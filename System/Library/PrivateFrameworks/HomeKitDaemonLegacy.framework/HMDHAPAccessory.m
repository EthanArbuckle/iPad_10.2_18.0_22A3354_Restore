@implementation HMDHAPAccessory

- (id)findServiceWithServiceType:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  char v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHAPAccessory services](self, "services", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "serviceType");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqualToString:", v4);

        if ((v11 & 1) != 0)
        {
          v6 = v9;
          goto LABEL_11;
        }
      }
      v6 = (id)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

- (NSArray)services
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray copy](self->_services, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

uint64_t __49__HMDHAPAccessory__characteristicsToEnableEvents__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  objc_msgSend(v3, "type");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "service");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(*(id *)(a1 + 32), "shouldFilterChangeNotificationsForCharacteristicType:serviceType:", v4, v6) & 1) != 0)
    v7 = 0;
  else
    v7 = objc_msgSend(v3, "isNotificationEnabled");

  return v7;
}

- (BOOL)updateAccessoryInformationWithCharacteristicType:(id)a3 serviceType:(id)a4 value:(id)a5 accessoryTransaction:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  char v20;
  void *v21;
  int v22;
  void *v23;
  HMDHAPAccessory *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  HMDAccessoryVersion *v28;
  void *v29;
  char v30;
  BOOL v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  void *v48;
  void *v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  id v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v14 = v12;
  else
    v14 = 0;
  v15 = v14;
  v16 = v12;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v18 = v17;

  if ((objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0CB99A0]) & 1) == 0
    && !objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D161A0]))
  {
    if (objc_msgSend(v11, "isEqualToString:", CFSTR("00000239-0000-1000-8000-0026BB765291")))
    {
      v31 = 0;
      if (!objc_msgSend(v10, "isEqualToString:", CFSTR("0000023A-0000-1000-8000-0026BB765291")) || !v15)
        goto LABEL_60;
      -[HMDHAPAccessory sleepInterval](self, "sleepInterval");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = HMFEqualObjects();

      if ((v33 & 1) == 0)
      {
        objc_msgSend(v13, "setSleepInterval:", v15);
LABEL_36:
        v31 = 1;
        goto LABEL_60;
      }
    }
LABEL_59:
    v31 = 0;
    goto LABEL_60;
  }
  if (objc_msgSend(v10, "isEqualToString:", *MEMORY[0x1E0CB8968]))
  {
    if (!v18)
      goto LABEL_59;
    -[HMDAccessory providedName](self, "providedName");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = HMFEqualObjects();

    if ((v20 & 1) != 0)
      goto LABEL_59;
    if (-[HMDHAPAccessory supportsCHIP](self, "supportsCHIP"))
    {
      -[HMDAccessory home](self, "home");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "isCurrentDevicePrimaryResident");

      if (v22)
      {
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        v24 = self;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory providedName](v24, "providedName");
          v49 = v23;
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory providedName](v24, "providedName");
          *(_DWORD *)buf = 138544130;
          v51 = v48;
          v52 = 2112;
          v53 = v26;
          v54 = 2112;
          v55 = v18;
          v56 = 2112;
          v57 = objc_claimAutoreleasedReturnValue();
          v27 = (void *)v57;
          _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Primary resident should not change matter accessory name from %@ to %@. Updating matter accessory name back to %@", buf, 0x2Au);

          v23 = v49;
        }

        objc_autoreleasePoolPop(v23);
        -[HMDAccessory providedName](v24, "providedName");
        v28 = (HMDAccessoryVersion *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory updateCHIPAccessoryName:](v24, "updateCHIPAccessoryName:", v28);
        goto LABEL_58;
      }
    }
    objc_msgSend(v13, "setProvidedName:", v18);
    goto LABEL_36;
  }
  if (objc_msgSend(v10, "isEqualToString:", *MEMORY[0x1E0CB8950]))
  {
    if (!v18)
      goto LABEL_59;
    -[HMDAccessory model](self, "model");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = HMFEqualObjects();

    if ((v30 & 1) != 0)
      goto LABEL_59;
    objc_msgSend(v13, "setModel:", v18);
    goto LABEL_36;
  }
  if (objc_msgSend(v10, "isEqualToString:", *MEMORY[0x1E0CB8948]))
  {
    if (!v18)
      goto LABEL_59;
    -[HMDAccessory manufacturer](self, "manufacturer");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = HMFEqualObjects();

    if ((v35 & 1) != 0)
      goto LABEL_59;
    objc_msgSend(v13, "setManufacturer:", v18);
    goto LABEL_36;
  }
  if (objc_msgSend(v10, "isEqualToString:", *MEMORY[0x1E0CB88C8]))
  {
    if (-[HMDHAPAccessory supportsCHIP](self, "supportsCHIP"))
    {
      if (!v18)
        goto LABEL_59;
      -[HMDAccessory displayableFirmwareVersion](self, "displayableFirmwareVersion");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = HMFEqualObjects();

      if ((v37 & 1) != 0)
        goto LABEL_59;
      objc_msgSend(v13, "setDisplayableFirmwareVersion:", v18);
      goto LABEL_36;
    }
    if (v18)
    {
      v28 = -[HMDAccessoryVersion initWithVersionString:]([HMDAccessoryVersion alloc], "initWithVersionString:", v18);
      if (v28)
      {
        -[HMDAccessory firmwareVersion](self, "firmwareVersion");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = -[HMDAccessoryVersion isEqualToVersion:](v28, "isEqualToVersion:", v40);

        if ((v41 & 1) == 0)
        {
          objc_msgSend(v13, "setFirmwareVersion:", v18);
LABEL_45:

          goto LABEL_36;
        }
      }
    }
    else
    {
      v28 = 0;
    }
    goto LABEL_58;
  }
  if (objc_msgSend(v10, "isEqualToString:", *MEMORY[0x1E0CB8A20]))
  {
    if (!v18)
      goto LABEL_59;
    -[HMDAccessory serialNumber](self, "serialNumber");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = HMFEqualObjects();

    if ((v39 & 1) != 0)
      goto LABEL_59;
    objc_msgSend(v13, "setSerialNumber:", v18);
    goto LABEL_36;
  }
  if (objc_msgSend(v10, "isEqualToString:", CFSTR("000000A6-0000-1000-8000-0026BB765291")))
  {
    if (!v15)
      goto LABEL_59;
    -[HMDHAPAccessory accessoryFlags](self, "accessoryFlags");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = HMFEqualObjects();

    if ((v43 & 1) != 0)
      goto LABEL_59;
    objc_msgSend(v13, "setAccessoryFlags:", v15);
    goto LABEL_36;
  }
  if ((objc_msgSend(v10, "isEqualToString:", CFSTR("00000220-0000-1000-8000-0026BB765291")) & 1) != 0
    || !objc_msgSend(v10, "isEqualToString:", CFSTR("0000026D-0000-1000-8000-0026BB765291")))
  {
    goto LABEL_59;
  }
  v31 = 0;
  if (-[HMDHAPAccessory supportsCHIP](self, "supportsCHIP") && v15)
  {
    v28 = -[HMDAccessoryVersion initWithMajorVersion:minorVersion:updateVersion:]([HMDAccessoryVersion alloc], "initWithMajorVersion:minorVersion:updateVersion:", objc_msgSend(v15, "unsignedLongValue"), 0, 0);
    if (v28)
    {
      -[HMDAccessory firmwareVersion](self, "firmwareVersion");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = HMFEqualObjects();

      if ((v45 & 1) == 0)
      {
        -[HMDAccessoryVersion versionString](v28, "versionString");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setFirmwareVersion:", v46);

        goto LABEL_45;
      }
    }
LABEL_58:

    goto LABEL_59;
  }
LABEL_60:

  return v31;
}

- (id)_characteristicsToEnableEvents
{
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __49__HMDHAPAccessory__characteristicsToEnableEvents__block_invoke;
  v7[3] = &unk_1E89BF8D0;
  v8 = v3;
  v4 = v3;
  -[HMDHAPAccessory characteristicsPassingTest:](self, "characteristicsPassingTest:", v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (void)_notifyCharacteristicNotificationChanges:(id)a3 enableNotification:(BOOL)a4 message:(id)a5 clientIdentifier:(id)a6
{
  _BOOL8 v8;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v8 = a4;
  v32 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a5;
  v26 = a6;
  if (objc_msgSend(v10, "count"))
  {
    v22 = v11;
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v10, "count"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v23 = v10;
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v13 = v10;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v28 != v16)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
          objc_msgSend(v18, "characteristic");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory hmdCharacteristicFromHapCharacteristic:](self, "hmdCharacteristicFromHapCharacteristic:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          if (v20)
          {
            objc_msgSend(v12, "addObject:", v20);
            objc_msgSend(v18, "error");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            if (v21)
            {
              objc_msgSend(v25, "setObject:forKey:", v21, v20);
              if (!v8)
                objc_msgSend(v20, "setNotificationEnabled:forClientIdentifier:", 0, v26);
            }
            else
            {
              objc_msgSend(v20, "setNotificationEnabled:forClientIdentifier:", v8, v26);
              if (v8)
                objc_msgSend(v20, "setNotificationEnabledTime:", v24);
            }

          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      }
      while (v15);
    }

    v11 = v22;
    -[HMDHAPAccessory _notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:](self, "_notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:", v12, v25, v8, v22);

    v10 = v23;
  }

}

- (id)hmdCharacteristicFromHapCharacteristic:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (!v4)
  {
    v10 = 0;
    goto LABEL_10;
  }
  objc_msgSend(v4, "service");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "accessory");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!-[HMDHAPAccessory matchesHAPAccessory:](self, "matchesHAPAccessory:", v7))
    goto LABEL_7;
  objc_msgSend(v5, "instanceID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "instanceID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory findCharacteristic:forService:](self, "findCharacteristic:forService:", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "uniqueIdentifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "instanceID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "instanceID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138544130;
      v20 = v14;
      v21 = 2112;
      v22 = v15;
      v23 = 2112;
      v24 = v16;
      v25 = 2112;
      v26 = v17;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@hapCharacteristic %@/%@/%@ to hmdCharacteristic mapping failed", (uint8_t *)&v19, 0x2Au);

    }
    objc_autoreleasePoolPop(v11);
LABEL_7:
    v10 = 0;
  }

LABEL_10:
  return v10;
}

- (id)findCharacteristic:(id)a3 forService:(id)a4
{
  id v6;
  void *v7;
  void *v8;

  v6 = a3;
  -[HMDHAPAccessory findService:](self, "findService:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "findCharacteristic:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)findService:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHAPAccessory services](self, "services");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithInstanceID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)characteristicsPassingTest:(id)a3
{
  unsigned int (**v4)(id, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned int (**)(id, _QWORD))a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  -[HMDHAPAccessory services](self, "services");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v7, "copy");

  obj = v8;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v31;
    do
    {
      v12 = 0;
      v24 = v10;
      do
      {
        if (*(_QWORD *)v31 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v12);
        objc_msgSend(v13, "type", v24);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v6, "shouldFilterServiceOfType:", v14);

        if ((v15 & 1) == 0)
        {
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          objc_msgSend(v13, "characteristics");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = (void *)objc_msgSend(v16, "copy");

          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
          if (v18)
          {
            v19 = v18;
            v20 = *(_QWORD *)v27;
            do
            {
              for (i = 0; i != v19; ++i)
              {
                if (*(_QWORD *)v27 != v20)
                  objc_enumerationMutation(v17);
                v22 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
                if (v4[2](v4, v22))
                  objc_msgSend(v5, "addObject:", v22);
              }
              v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
            }
            while (v19);
          }

          v10 = v24;
        }
        ++v12;
      }
      while (v12 != v10);
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    }
    while (v10);
  }

  return v5;
}

uint64_t __80__HMDHAPAccessory_enableNotificationsWithHAPAccessory_homeNotificationsEnabled___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "characteristic");
}

- (HMDHAPMetadata)hapMetadata
{
  return (HMDHAPMetadata *)objc_getProperty(self, a2, 992, 1);
}

BOOL __28__HMDHAPAccessory_hasIPLink__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "linkType") == 1;
}

BOOL __30__HMDHAPAccessory_hasBTLELink__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "linkType") == 2;
}

- (id)transactionWithObjectChangeType:(unint64_t)a3
{
  HMDHAPAccessoryTransaction *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHAPAccessoryTransaction *v9;

  v5 = [HMDHAPAccessoryTransaction alloc];
  -[HMDAccessory uuid](self, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory home](self, "home");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v5, "initWithObjectChangeType:uuid:parentUUID:", a3, v6, v8);

  return v9;
}

BOOL __88__HMDHAPAccessory_matchingTransportInformationWithServerIdentifier_instanceID_linkType___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  void *v6;
  int v7;
  _BOOL8 v8;

  v3 = a2;
  objc_msgSend(v3, "serverIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = HMFEqualObjects();

  if (v5
    && (!*(_QWORD *)(a1 + 40)
     || (objc_msgSend(v3, "instanceID"),
         v6 = (void *)objc_claimAutoreleasedReturnValue(),
         v7 = HMFEqualObjects(),
         v6,
         v7)))
  {
    if (*(_QWORD *)(a1 + 48))
      v8 = objc_msgSend(v3, "linkType") == *(_QWORD *)(a1 + 48);
    else
      v8 = 1;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (id)matchingTransportInformation:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = a3;
  objc_msgSend(v4, "instanceID");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5
    && (v6 = (void *)v5,
        objc_msgSend(v4, "serverIdentifier"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v7,
        v6,
        v7))
  {
    objc_msgSend(v4, "serverIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "instanceID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:instanceID:linkType:](self, "matchingTransportInformationWithServerIdentifier:instanceID:linkType:", v8, v9, objc_msgSend(v4, "linkType"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

- (id)matchingTransportInformationWithServerIdentifier:(id)a3 instanceID:(id)a4 linkType:(int64_t)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id v15;
  int64_t v16;

  v8 = a3;
  v9 = a4;
  if (v8)
  {
    -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __88__HMDHAPAccessory_matchingTransportInformationWithServerIdentifier_instanceID_linkType___block_invoke;
    v13[3] = &unk_1E89AB3E0;
    v14 = v8;
    v15 = v9;
    v16 = a5;
    objc_msgSend(v10, "na_firstObjectPassingTest:", v13);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

- (NSArray)transportInformationInstances
{
  void *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = (void *)-[NSMutableArray copy](self->_transportInformationInstances, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSArray *)v3;
}

- (id)preferredHAPAccessoryForOperation:(int64_t)a3 linkType:(int64_t *)a4
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  int64_t v20;
  void *v21;
  unint64_t v22;
  void *v23;
  int v24;
  int64_t v25;
  void *v27;
  uint64_t v28;
  HMDHAPAccessory *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  id obj;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[128];
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v6 = objc_msgSend(&unk_1E8B31DE8, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
    if (!v6)
    {
LABEL_28:
      *a4 = 0;
      return 0;
    }
    v7 = v6;
    v8 = *(_QWORD *)v42;
    v32 = *MEMORY[0x1E0D16680];
    v33 = 1;
    v9 = 0x1E0CB3000uLL;
    v28 = *(_QWORD *)v42;
    v29 = self;
LABEL_4:
    v10 = 0;
    v30 = v7;
    while (1)
    {
      if (*(_QWORD *)v42 != v8)
        objc_enumerationMutation(&unk_1E8B31DE8);
      v11 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * v10);
      -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      obj = v12;
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
      if (v13)
        break;
LABEL_26:

      if (++v10 == v7)
      {
        v7 = objc_msgSend(&unk_1E8B31DE8, "countByEnumeratingWithState:objects:count:", &v41, v46, 16);
        if (!v7)
          goto LABEL_28;
        goto LABEL_4;
      }
    }
    v14 = v13;
    v31 = v10;
    v15 = *(_QWORD *)v38;
    v34 = *(_QWORD *)v38;
LABEL_9:
    v16 = 0;
    while (1)
    {
      if (*(_QWORD *)v38 != v15)
        objc_enumerationMutation(obj);
      v17 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v16);
      objc_msgSend(*(id *)(v9 + 2024), "numberWithInteger:", objc_msgSend(v17, "linkType"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v11, "isEqualToNumber:", v18))
      {
        if (a3 == 1 || a3 == 10)
        {
          objc_msgSend(v17, "instanceID");
          v19 = v11;
          v20 = a3;
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(v9 + 2024), "numberWithUnsignedInteger:", v32);
          v22 = v9;
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v21, "isEqualToNumber:", v23);

          v9 = v22;
          a3 = v20;
          v11 = v19;
          v15 = v34;

          if (!v24)
            goto LABEL_21;
        }
        else
        {

        }
        if (((*a4 != 0) & v33) != 1)
        {
          objc_msgSend(v17, "hapAccessory");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *a4 = objc_msgSend(v17, "linkType");

          return v27;
        }
        v25 = *a4;
        if (v25 == objc_msgSend(v17, "linkType"))
        {
          v33 = 0;
LABEL_25:
          v8 = v28;
          self = v29;
          v7 = v30;
          v10 = v31;
          goto LABEL_26;
        }
      }
      else
      {

      }
LABEL_21:
      if (v14 == ++v16)
      {
        v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
        if (v14)
          goto LABEL_9;
        goto LABEL_25;
      }
    }
  }
  return 0;
}

- (void)_groupCharacteristicsNotificationWithCharacteristics:(id)a3 enable:(BOOL)a4 activity:(id)a5 clientIdentifier:(id)a6 groupCharacteristicsError:(id *)a7 characteristicsToModifyLocally:(id *)a8 characteristicsToModifyOnResident:(id *)a9 characteristicsToDisableOnResident:(id *)a10 characteristicsErrorsMapFailingToModify:(id *)a11
{
  id v16;
  id v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  int v22;
  BOOL v23;
  int v24;
  void *v25;
  HMDHAPAccessory *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHAPAccessory *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  id v50;
  void *v51;
  HMDHAPAccessory *v52;
  void *v53;
  HMDHAPAccessory *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  HMDHAPAccessory *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  HMDHAPAccessory *v67;
  NSObject *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  id *v74;
  id v75;
  void *v76;
  void *v77;
  char v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  int v92;
  int v93;
  HMDHAPAccessory *v94;
  int v95;
  void *v97;
  id obj;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint8_t buf[4];
  void *v104;
  __int16 v105;
  void *v106;
  __int16 v107;
  void *v108;
  __int16 v109;
  void *v110;
  _BYTE v111[128];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v16 = a3;
  v79 = a5;
  v17 = a6;
  -[HMDAccessory home](self, "home");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v94 = self;
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "primaryResident");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v89 = v18;
  v20 = objc_msgSend(v18, "isCurrentDeviceAvailableResident");
  objc_msgSend(v19, "device");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = objc_msgSend(v21, "isCurrentDevice");

  v80 = v17;
  v22 = objc_msgSend(v17, "hasPrefix:", CFSTR("com.apple.HomeKitDaemon.Local"));
  v23 = isWatch();
  v24 = v22 ^ 1;
  if (((v22 ^ 1) & 1) == 0 && (v20 & 1) == 0)
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = v94;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    HMFGetLogIdentifier();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v79, "identifier");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "shortDescription");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v104 = v28;
    v105 = 2114;
    v106 = v30;
    v107 = 2112;
    v108 = v80;
    _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] Not modifying characteristic notifications because client identifier %@ is disallowed on non-resident enabled devices", buf, 0x20u);
    goto LABEL_9;
  }
  if (-[HMDHAPAccessory canWakeUpViaWoL](v94, "canWakeUpViaWoL") && -[HMDHAPAccessory isSuspended](v94, "isSuspended"))
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = v94;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      goto LABEL_10;
    HMFGetLogIdentifier();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v79, "identifier");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "shortDescription");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory uniqueIdentifier](v26, "uniqueIdentifier");
    v31 = v19;
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v104 = v28;
    v105 = 2114;
    v106 = v30;
    v107 = 2112;
    v108 = v32;
    _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Not modifying notification for characteristics because accessory: %@ is suspended.", buf, 0x20u);

    v19 = v31;
LABEL_9:

LABEL_10:
    objc_autoreleasePoolPop(v25);
    if (a7)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      *a7 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_65;
  }
  v76 = v19;
  v74 = a8;
  if (!v23)
  {
    if (!shouldSkipLocalAccessoryNotificationRegistration(v89, v94, v16))
    {
      v95 = 0;
      goto LABEL_19;
    }
    v33 = (void *)MEMORY[0x1D17BA0A0]();
    v34 = v94;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v79, "identifier");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "shortDescription");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v104 = v36;
      v105 = 2114;
      v106 = v38;
      v107 = 2112;
      v108 = v80;
      _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Not modifying local notifications for characteristics for %@ as current device is a non-resident and home has a resident", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v33);
  }
  v95 = 1;
LABEL_19:
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v16, "count", a9));
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v16, "count"));
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v16, "count"));
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v75 = v16;
  obj = v16;
  v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v99, v111, 16);
  v40 = v80;
  if (!v39)
    goto LABEL_58;
  v41 = v39;
  v42 = *(_QWORD *)v100;
  v92 = v95 | v24;
  if (v76)
    v43 = v20;
  else
    v43 = 0;
  v93 = v43;
  do
  {
    v44 = 0;
    do
    {
      if (*(_QWORD *)v100 != v42)
        objc_enumerationMutation(obj);
      v45 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * v44);
      if ((objc_msgSend(v45, "properties") & 1) != 0)
      {
        objc_msgSend(v45, "type");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "service");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "type");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = objc_msgSend(v97, "shouldFilterEnableNotificationsForCharacteristicType:serviceType:", v46, v48);

        if (!v49)
        {
          if (a4)
          {
            v52 = v94;
            if ((v95 & 1) != 0)
            {
              v53 = (void *)MEMORY[0x1D17BA0A0]();
              v54 = v94;
              HMFGetOSLogHandle();
              v55 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v81 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v79, "identifier");
                v83 = (void *)objc_claimAutoreleasedReturnValue();
                v86 = v53;
                objc_msgSend(v83, "shortDescription");
                v56 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v45, "shortDescription");
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v104 = v81;
                v105 = 2114;
                v106 = v56;
                v107 = 2112;
                v108 = v57;
                _os_log_impl(&dword_1CD062000, v55, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Dropping characteristic %@ from local notification as current device is a non-resident and home has a resident", buf, 0x20u);

                v40 = v80;
                v52 = v94;

                v53 = v86;
              }

              objc_autoreleasePoolPop(v53);
            }
            else
            {
              objc_msgSend(v91, "addObject:", v45);
            }
            if (v93)
            {
              if (shouldSkipRemoteAccessoryNotificationRegistration(v89, v52))
              {
                v58 = MEMORY[0x1D17BA0A0]();
                v59 = v52;
                HMFGetOSLogHandle();
                v60 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v79, "identifier");
                  v84 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v84, "shortDescription");
                  v87 = v58;
                  v62 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v45, "shortDescription");
                  v63 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v104 = v61;
                  v105 = 2114;
                  v106 = v62;
                  v107 = 2112;
                  v108 = v63;
                  _os_log_impl(&dword_1CD062000, v60, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Dropping characteristic %@ from remote notification as partitioned network is no longer supported by residents", buf, 0x20u);

                  v58 = v87;
                  v40 = v80;
                }

                v64 = (void *)v58;
                goto LABEL_47;
              }
              if ((v78 & 1) == 0
                && objc_msgSend(v45, "isNotificationEnabledForClientIdentifierPrefix:", CFSTR("com.apple.HomeKitDaemon.Local")))
              {
                v66 = MEMORY[0x1D17BA0A0]();
                v67 = v52;
                HMFGetOSLogHandle();
                v68 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v88 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v79, "identifier");
                  v82 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v82, "shortDescription");
                  v69 = (void *)objc_claimAutoreleasedReturnValue();
                  -[HMDHAPAccessory uniqueIdentifier](v67, "uniqueIdentifier");
                  v85 = v66;
                  v70 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v45, "shortDescription");
                  v71 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138544130;
                  v104 = v88;
                  v105 = 2114;
                  v106 = v69;
                  v107 = 2112;
                  v108 = v70;
                  v109 = 2112;
                  v110 = v71;
                  _os_log_impl(&dword_1CD062000, v68, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Dropping characteristic %@ for remote notifications from primary resident because it should be local only: %@", buf, 0x2Au);

                  v66 = v85;
                  v40 = v80;

                }
                v64 = (void *)v66;
LABEL_47:
                objc_autoreleasePoolPop(v64);
                if (v40)
                  goto LABEL_31;
                v65 = v77;
LABEL_56:
                objc_msgSend(v65, "addObject:", v45);
                goto LABEL_31;
              }
            }
LABEL_54:
            if (!v92)
              goto LABEL_31;
          }
          else
          {
            if (!objc_msgSend(v45, "deregisterNotificationForClientIdentifier:", v40))
              goto LABEL_31;
            if ((v95 & 1) == 0)
            {
              objc_msgSend(v91, "addObject:", v45);
              goto LABEL_54;
            }
          }
          v65 = v90;
          goto LABEL_56;
        }
      }
      if (a11)
      {
        v50 = *a11;
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "setObject:forKey:", v51, v45);

      }
LABEL_31:
      ++v44;
    }
    while (v41 != v44);
    v72 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v99, v111, 16);
    v41 = v72;
  }
  while (v72);
LABEL_58:

  if (v74)
    *v74 = (id)objc_msgSend(v91, "copy");
  v16 = v75;
  v19 = v76;
  if (v73)
    *v73 = (id)objc_msgSend(v90, "copy");
  if (a10)
    *a10 = (id)objc_msgSend(v77, "copy");

LABEL_65:
}

- (BOOL)canWakeUpViaWoL
{
  void *v3;
  void *v4;
  void *v5;
  char v6;

  if (!-[HMDAccessory isSuspendCapable](self, "isSuspendCapable"))
    return 0;
  -[HMDHAPAccessory lpmProfile](self, "lpmProfile");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[HMDHAPAccessory connectivityInfo](self, "connectivityInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "woWLANInfo");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "supportsSleepConfig");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t __45__HMDHAPAccessory_handleAccessoryConfigured___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_evaluateAvailableSoftwareUpdate");
}

uint64_t __48__HMDHAPAccessory_WirelessResume__cancelPowerOn__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_cancelPowerOn");
}

- (void)handleUpdatedServicesForThreadManagementWithCompletion:(id)a3
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[5];
  id v9;
  SEL v10;

  v5 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __92__HMDHAPAccessory_ThreadManagement__handleUpdatedServicesForThreadManagementWithCompletion___block_invoke;
  block[3] = &unk_1E89C01B0;
  v9 = v5;
  v10 = a2;
  block[4] = self;
  v7 = v5;
  dispatch_async(v6, block);

}

- (BOOL)matchesHAPAccessoryWithServerIdentifier:(id)a3 linkType:(int64_t *)a4
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  int64_t v12;

  v6 = (void *)MEMORY[0x1E0D163A8];
  v7 = a3;
  -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "serverIdentifierWithUniqueIdentifier:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v7, "isEqualToString:", v9);

  -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:](self, "matchingTransportInformationWithServerIdentifier:", v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    v12 = 0;
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v12 = objc_msgSend(v11, "linkType");
  v10 = 1;
  if (a4)
LABEL_3:
    *a4 = v12;
LABEL_4:

  return v10;
}

- (id)matchingTransportInformationWithServerIdentifier:(id)a3
{
  return -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:instanceID:linkType:](self, "matchingTransportInformationWithServerIdentifier:instanceID:linkType:", a3, 0, 0);
}

- (void)maybeCommissionToThreadNetworkWithCompletion:(id)a3
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[5];
  id v9;
  SEL v10;

  v5 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __82__HMDHAPAccessory_ThreadManagement__maybeCommissionToThreadNetworkWithCompletion___block_invoke;
  block[3] = &unk_1E89C01B0;
  v9 = v5;
  v10 = a2;
  block[4] = self;
  v7 = v5;
  dispatch_async(v6, block);

}

- (BOOL)isEqual:(id)a3
{
  HMDHAPAccessory *v4;
  HMDHAPAccessory *v5;
  HMDHAPAccessory *v6;
  void *v7;
  void *v8;
  char v9;

  v4 = (HMDHAPAccessory *)a3;
  if (self == v4)
  {
    v9 = 1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = v4;
    else
      v5 = 0;
    v6 = v5;
    if (v6)
    {
      -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory uniqueIdentifier](v6, "uniqueIdentifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v7, "isEqualToString:", v8);

    }
    else
    {
      v9 = 0;
    }

  }
  return v9;
}

- (unint64_t)hash
{
  void *v3;
  void *v4;
  id v5;
  objc_super v7;

  -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (id)objc_msgSend(v4, "hash");

  }
  else
  {
    v7.receiver = self;
    v7.super_class = (Class)HMDHAPAccessory;
    v5 = -[HMDHAPAccessory hash](&v7, sel_hash);
  }

  return (unint64_t)v5;
}

- (NSString)shortDescription
{
  int v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = isInternalBuild();
  v4 = (void *)MEMORY[0x1E0CB3940];
  if (v3)
  {
    -[HMDHAPAccessory name](self, "name");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory uuid](self, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory isReachable](self, "isReachable");
    HMFBooleanToString();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("%@/%@/%@/%@"), v5, v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[HMDAccessory uuid](self, "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory isReachable](self, "isReachable");
    HMFBooleanToString();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("%@/%@/%@"), v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return (NSString *)v9;
}

- (NSString)uniqueIdentifier
{
  return self->_uniqueIdentifier;
}

- (id)name
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = self;
  v8.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory name](&v8, sel_name);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHAPAccessory hasSmartSpeakerService](self, "hasSmartSpeakerService"))
  {
    -[HMDHAPAccessory getConfiguredName](self, "getConfiguredName");
    v4 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v4;
    if (!v4)
    {
      -[HMDAccessory room](self, "room");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "name");
      v3 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  if (!objc_msgSend(v3, "length"))
  {
    -[HMDAccessory initialManufacturer](self, "initialManufacturer");
    v6 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v6;
  }
  return v3;
}

- (BOOL)hasSmartSpeakerService
{
  void *v2;
  BOOL v3;

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000228-0000-1000-8000-0026BB765291"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (void)_setNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 clientIdentifier:(id)a5 matchingHAPAccessory:(id)a6
{
  -[HMDHAPAccessory _setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:](self, "_setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:", a3, a4, 0, a5, a6);
}

- (void)deregisterFromSessionRestore:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __48__HMDHAPAccessory_deregisterFromSessionRestore___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

uint64_t __41__HMDHAPAccessory_checkHAPSessionRestore__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkHAPSessionRestore");
}

void __84__HMDHAPAccessory_configureWithAccessory_homeNotificationsEnabled_queue_completion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  NSObject *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  id v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  int v48;
  void *v49;
  id v50;
  NSObject *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  void *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  id v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  char isKindOfClass;
  void *v65;
  id v66;
  NSObject *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  _QWORD block[4];
  id v75;
  _QWORD v76[4];
  NSObject *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[4];
  id v83;
  id v84;
  _BYTE v85[128];
  const __CFString *v86;
  uint64_t v87;
  const __CFString *v88;
  void *v89;
  uint8_t buf[4];
  void *v91;
  __int16 v92;
  void *v93;
  __int16 v94;
  void *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(void **)(a1 + 40);
    HMFBooleanToString();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v91 = v5;
    v92 = 2112;
    v93 = v6;
    v94 = 2112;
    v95 = v7;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Configuring with HAPAccessory: %@ homeNotificationsEnabled: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "_addHAPAccessory:", *(_QWORD *)(a1 + 40));
  v8 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "services");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = 0;
  objc_msgSend(v8, "_configureWithAccessoryServices:changedCharacteristics:", v9, &v84);
  v10 = v84;

  if ((_os_feature_enabled_impl() & 1) == 0 && objc_msgSend(v10, "count"))
  {
    v88 = CFSTR("kCharacteristicAndValueKey");
    v11 = (void *)objc_msgSend(v10, "copy");
    v89 = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v89, &v88, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = objc_alloc(MEMORY[0x1E0D285D8]);
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)objc_msgSend(v13, "initWithTarget:", v14);

    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D285F8]), "initWithName:destination:payload:", CFSTR("kCharacteristicsUpdatedNotificationKey"), v15, v12);
    objc_msgSend(*(id *)(a1 + 32), "messageSendPolicy");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setSendPolicy:", v17);

    objc_msgSend(*(id *)(a1 + 32), "msgDispatcher");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "sendMessage:", v16);

  }
  v73 = v10;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
  v19 = objc_claimAutoreleasedReturnValue();
  v86 = CFSTR("HMDNotificationCharacteristicValueUpdatedReasonKey");
  v87 = v19;
  v72 = (void *)v19;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v87, &v86, 1);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  logAndPostNotification(CFSTR("HMDNotificationCharacteristicValueUpdated"), *(void **)(a1 + 32), v71);
  objc_msgSend(*(id *)(a1 + 32), "enableNotificationsWithHAPAccessory:homeNotificationsEnabled:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 72));
  objc_msgSend(*(id *)(a1 + 32), "getPrimaryHAPAccessories");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "firstObject");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v21, "server");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (((objc_msgSend(*(id *)(a1 + 32), "custom1WoBLE") & 1) != 0
     || objc_msgSend(*(id *)(a1 + 32), "supportsWoL"))
    && v22)
  {
    objc_msgSend(*(id *)(a1 + 32), "hapMetadata");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = *(void **)(a1 + 32);
    v82[0] = MEMORY[0x1E0C809B0];
    v82[1] = 3221225472;
    v82[2] = __84__HMDHAPAccessory_configureWithAccessory_homeNotificationsEnabled_queue_completion___block_invoke_355;
    v82[3] = &unk_1E89BF8D0;
    v25 = v23;
    v83 = v25;
    objc_msgSend(v24, "characteristicsPassingTest:", v82);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v26, "count"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v28 = v26;
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v78, v85, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v79;
      do
      {
        v32 = 0;
        do
        {
          if (*(_QWORD *)v79 != v31)
            objc_enumerationMutation(v28);
          objc_msgSend(*(id *)(*((_QWORD *)&v78 + 1) + 8 * v32), "characteristicForHAPAccessory:", v21);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          if (v33)
            objc_msgSend(v27, "addObject:", v33);

          ++v32;
        }
        while (v30 != v32);
        v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v78, v85, 16);
      }
      while (v30);
    }

    if (objc_msgSend(v27, "count"))
    {
      v34 = (void *)MEMORY[0x1D17BA0A0]();
      v35 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v91 = v37;
        v92 = 2112;
        v93 = v27;
        _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@Configuring accessory - sending out changed notifications: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v34);
      objc_msgSend(*(id *)(a1 + 32), "home");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "handleUpdatedCharacteristics:accessoryServer:", v27, v22);

    }
  }
  v39 = dispatch_group_create();
  dispatch_group_enter(v39);
  objc_msgSend(*(id *)(a1 + 32), "internalEnhancedAuthMethod");
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  if (v40)
  {
    v41 = (void *)MEMORY[0x1D17BA0A0]();
    v42 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "enhancedAuthMethod");
      HAPAuthMethodToString();
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "internalEnhancedAuthConfigNumber");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v91 = v44;
      v92 = 2112;
      v93 = v45;
      v94 = 2112;
      v95 = v46;
      _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Auth method already calculated as %@ (c#: %@)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v41);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "server");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = objc_msgSend(*(id *)(a1 + 40), "isPrimary");
    v49 = (void *)MEMORY[0x1D17BA0A0]();
    v50 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v51 = objc_claimAutoreleasedReturnValue();
    v52 = v51;
    if (v48 && v47)
    {
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v91 = v53;
        _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_INFO, "%{public}@We don't have an auth method, computing it from the server", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v49);
      dispatch_group_enter(v39);
      v54 = *(void **)(a1 + 32);
      v76[0] = MEMORY[0x1E0C809B0];
      v76[1] = 3221225472;
      v76[2] = __84__HMDHAPAccessory_configureWithAccessory_homeNotificationsEnabled_queue_completion___block_invoke_356;
      v76[3] = &unk_1E89C2350;
      v77 = v39;
      objc_msgSend(v54, "_updateAuthMethodWithServer:completion:", v47, v76);

    }
    else
    {
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v91 = v55;
        _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_DEBUG, "%{public}@No auth method and unable to calculate it", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v49);
    }

  }
  v56 = *(NSObject **)(a1 + 48);
  if (v56)
  {
    v57 = *(void **)(a1 + 56);
    if (v57)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __84__HMDHAPAccessory_configureWithAccessory_homeNotificationsEnabled_queue_completion___block_invoke_357;
      block[3] = &unk_1E89C0870;
      v75 = v57;
      dispatch_group_notify(v39, v56, block);

    }
  }
  dispatch_group_leave(v39);
  v58 = (void *)MEMORY[0x1D17BA0A0]();
  v59 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v60 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "isSecureSessionEstablished");
    HMFBooleanToString();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v91 = v61;
    v92 = 2112;
    v93 = v62;
    _os_log_impl(&dword_1CD062000, v60, OS_LOG_TYPE_INFO, "%{public}@Sending accessory configured notification, Secure Session: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v58);
  logAndPostNotification(CFSTR("HMDAccessoryConfiguredNotification"), *(void **)(a1 + 32), 0);
  if ((objc_msgSend(*(id *)(a1 + 40), "isPrimary") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "_checkBridgedAccessoryOnConfigured");
  objc_msgSend(*(id *)(a1 + 32), "_updateAccessoryTracking");
  objc_msgSend(*(id *)(a1 + 32), "_reconcileAccessControlSetting");
  objc_msgSend(*(id *)(a1 + 40), "server");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0 && v63)
  {
    v65 = (void *)MEMORY[0x1D17BA0A0]();
    v66 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v67 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromSelector(*(SEL *)(a1 + 64));
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "shortDescription");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v91 = v68;
      v92 = 2112;
      v93 = v69;
      v94 = 2112;
      v95 = v70;
      _os_log_impl(&dword_1CD062000, v67, OS_LOG_TYPE_INFO, "%{public}@%@ setting reachabilityPingNotificationEnabled for accessory %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v65);
    objc_msgSend(*(id *)(a1 + 32), "setReachabilityPingNotificationEnabled:", 1);
  }
  objc_msgSend(*(id *)(a1 + 32), "_checkResidentDeviceForReachabilityPing");

}

- (void)_notifyClientsWithNotificationChangesForCharacteristics:(id)a3 characteristicErrors:(id)a4 enableNotification:(BOOL)a5 message:(id)a6
{
  _BOOL8 v7;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  HMDHomeManagerXPCMessageSendPolicy *v28;
  uint64_t v29;
  uint64_t v30;
  HMDHomeManagerXPCMessageSendPolicy *v31;
  HMDHomeManagerXPCMessageSendPolicy *v32;
  void *v33;
  void *v34;
  _QWORD v35[4];
  id v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v7 = a5;
  v41 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a6;
  -[HMDAccessory home](self, "home");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    +[HMDCharacteristicResponseNotificationContext notificationUpdateMessagePayloadForHome:notificationEnabled:characteristics:characteristicsErrorsMap:](HMDCharacteristicResponseNotificationContext, "notificationUpdateMessagePayloadForHome:notificationEnabled:characteristics:characteristicsErrorsMap:", v13, v7, v10, v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "identifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {

    }
    else if (!objc_msgSend(v14, "count"))
    {
      goto LABEL_12;
    }
    v20 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMDAccessory messageTargetUUID](self, "messageTargetUUID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)objc_msgSend(v20, "initWithTarget:", v21);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:destination:payload:", CFSTR("kAccessoryNotificationsUpdatedNotificationKey"), v22, v14);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory messageSendPolicy](self, "messageSendPolicy");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      objc_msgSend(v23, "setSendPolicy:", v24);
      objc_msgSend(v12, "identifier");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "setIdentifier:", v25);

      objc_msgSend(v23, "setRemote:", objc_msgSend(v12, "isRemote"));
    }
    else
    {
      v34 = v22;
      v26 = v10;
      v27 = v11;
      v28 = [HMDHomeManagerXPCMessageSendPolicy alloc];
      v29 = objc_msgSend(v24, "entitlements");
      v30 = objc_msgSend(v24, "options");
      v31 = v28;
      v11 = v27;
      v10 = v26;
      v22 = v34;
      v32 = -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:](v31, "initWithEntitlements:options:active:", v29, v30, 1);
      objc_msgSend(v23, "setSendPolicy:", v32);

    }
    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = __123__HMDHAPAccessory__notifyClientsWithNotificationChangesForCharacteristics_characteristicErrors_enableNotification_message___block_invoke;
    v35[3] = &unk_1E89C2350;
    v36 = v12;
    objc_msgSend(v33, "sendMessage:completionHandler:", v23, v35);

  }
  else
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v19;
      v39 = 2112;
      v40 = v10;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Not notifying characteristic changes %@ since home is nil", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "respondWithError:", v14);
  }
LABEL_12:

}

- (id)messageSendPolicy
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  uint64_t v7;

  if (-[HMDHAPAccessory hasTelevisionService](self, "hasTelevisionService"))
  {
    if (_os_feature_enabled_impl())
      v3 = 1;
    else
      v3 = 5;
    v4 = 1537;
  }
  else
  {
    v4 = 513;
    v3 = 1;
  }
  -[HMDHAPAccessory networkRouterController](self, "networkRouterController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = v5 == 0;
  if (v5)
    v7 = v3 | 0x40;
  else
    v7 = v3;
  if (!v6)
    v4 |= 0x1000uLL;
  return -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:]([HMDHomeManagerXPCMessageSendPolicy alloc], "initWithEntitlements:options:", v7, v4);
}

- (BOOL)hasTelevisionService
{
  void *v2;
  BOOL v3;

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", *MEMORY[0x1E0CB9AF0]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (NSSet)lightProfiles
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[HMDAccessory accessoryProfiles](self, "accessoryProfiles", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v15;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v4);
        v9 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * v8);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        if (v11)
          objc_msgSend(v3, "addObject:", v11);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v6);
  }

  v12 = (void *)objc_msgSend(v3, "copy");
  return (NSSet *)v12;
}

- (id)getConfiguredName
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  objc_super v9;

  if (-[HMDHAPAccessory hasSmartSpeakerService](self, "hasSmartSpeakerService"))
  {
    -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000228-0000-1000-8000-0026BB765291"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "getConfiguredName");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory room](self, "room");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = HMFEqualObjects();

    if (v7)
    {

      v4 = 0;
    }

  }
  else
  {
    v9.receiver = self;
    v9.super_class = (Class)HMDHAPAccessory;
    -[HMDAccessory getConfiguredName](&v9, sel_getConfiguredName);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

- (NSNumber)internalEnhancedAuthMethod
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_internalEnhancedAuthMethod;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)enableNotificationsWithHAPAccessory:(id)a3 homeNotificationsEnabled:(BOOL)a4
{
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  HMDHAPAccessory *v24;
  NSObject *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  BOOL v30;
  void *v31;
  void *v32;
  HMDHAPAccessory *v33;
  id obj;
  uint64_t v35;
  uint64_t v36;
  void *context;
  _QWORD v38[4];
  id v39;
  id v40;
  BOOL v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  uint64_t v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (v6)
  {
    v30 = a4;
    -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory _characteristicsToEnableEvents](self, "_characteristicsToEnableEvents");
    v7 = objc_claimAutoreleasedReturnValue();
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v31 = (void *)v7;
    -[HMDHAPAccessory _notificationRegistrationsByClientIDForCharacteristics:](self, "_notificationRegistrationsByClientIDForCharacteristics:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    objc_msgSend(v8, "allKeys");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v52, 16);
    if (v36)
    {
      v35 = *(_QWORD *)v43;
      v32 = v8;
      v33 = self;
      do
      {
        for (i = 0; i != v36; ++i)
        {
          if (*(_QWORD *)v43 != v35)
            objc_enumerationMutation(obj);
          v10 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * i);
          objc_msgSend(v8, "objectForKeyedSubscript:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "na_map:", &__block_literal_global_350);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "na_filter:", &__block_literal_global_352);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          context = (void *)MEMORY[0x1D17BA0A0]();
          v14 = self;
          HMFGetOSLogHandle();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "shortDescription");
            v17 = v6;
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v47 = v16;
            v48 = 2112;
            v49 = v18;
            v50 = 2112;
            v51 = v10;
            _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Enabling notifications for %@ with client id %@", buf, 0x20u);

            v6 = v17;
            v8 = v32;

            self = v33;
          }

          objc_autoreleasePoolPop(context);
          -[HMDHAPAccessory setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:](v14, "setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:", 1, v12, v13, v10, v6);

        }
        v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v52, 16);
      }
      while (v36);
    }

    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v31);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = __80__HMDHAPAccessory_enableNotificationsWithHAPAccessory_homeNotificationsEnabled___block_invoke_353;
    v38[3] = &unk_1E89AB390;
    v41 = v30;
    v20 = v19;
    v39 = v20;
    v21 = v29;
    v40 = v21;
    -[HMDHAPAccessory characteristicsPassingTest:](self, "characteristicsPassingTest:", v38);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v22, "count"))
    {
      v23 = (void *)MEMORY[0x1D17BA0A0]();
      v24 = self;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = v6;
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v47 = v27;
        v48 = 2112;
        v49 = v22;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Enabling notifications on behalf of homed for %@", buf, 0x16u);

        v6 = v26;
      }

      objc_autoreleasePoolPop(v23);
      -[HMDHAPAccessory setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:](v24, "setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:", 1, v22, 0, CFSTR("com.apple.HomeKitDaemon.homeNotifications"), v6);
    }

  }
}

- (void)_reconcileAccessControlSetting
{
  void *v3;
  id v4;

  if (-[HMDHAPAccessory supportsMinimumUserPrivilege](self, "supportsMinimumUserPrivilege"))
  {
    -[HMDAccessory home](self, "home");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    __handleUpdatedMinimumUserPrivilege(self, objc_msgSend(v4, "minimumMediaUserPrivilege"));
    objc_msgSend(v4, "mediaPassword");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    __handleUpdatedPassword(self, v3);

  }
}

- (BOOL)supportsMinimumUserPrivilege
{
  return -[HMDHAPAccessory hasTelevisionService](self, "hasTelevisionService")
      || -[HMDHAPAccessory hasSmartSpeakerService](self, "hasSmartSpeakerService");
}

- (void)_checkResidentDeviceForReachabilityPing
{
  void *v3;
  int v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  HMDHAPAccessory *v18;
  NSObject *v19;
  void *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  -[HMDAccessory home](self, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isCurrentDeviceAvailableResident") & 1) != 0)
  {
    if (-[HMDAccessory reachabilityPingNotificationEnabled](self, "reachabilityPingNotificationEnabled"))
    {
      v4 = objc_msgSend(v3, "isCurrentDeviceConfirmedPrimaryResident");
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      v6 = self;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = (void *)v8;
        v10 = CFSTR("not ");
        if (v4)
          v10 = &stru_1E89C3E38;
        v21 = 138543618;
        v22 = v8;
        v23 = 2112;
        v24 = (void *)v10;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Current device is %@primary resident", (uint8_t *)&v21, 0x16u);

      }
      objc_autoreleasePoolPop(v5);
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = v6;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = (void *)v14;
        v16 = "Disabling";
        if (v4)
          v16 = "Enabling";
        v21 = 138543618;
        v22 = v14;
        v23 = 2080;
        v24 = (void *)v16;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@%s reachability ping for thread transport", (uint8_t *)&v21, 0x16u);

      }
      objc_autoreleasePoolPop(v11);
      if (v4)
      {
        -[HMDAccessory setReachabilityPingEnabled:](v12, "setReachabilityPingEnabled:", 1);
        -[HMDHAPAccessory startReachabilityCheck](v12, "startReachabilityCheck");
      }
      else
      {
        -[HMDHAPAccessory stopReachabilityCheck](v12, "stopReachabilityCheck");
        -[HMDAccessory setReachabilityPingEnabled:](v12, "setReachabilityPingEnabled:", 0);
      }
    }
  }
  else
  {
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543362;
      v22 = (uint64_t)v20;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Current device is not a resident", (uint8_t *)&v21, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
  }

}

- (BOOL)isBLESecureSessionEstablished
{
  void *v2;
  char v3;

  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_340);

  return v3;
}

- (NSNumber)internalEnhancedAuthConfigNumber
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_internalEnhancedAuthConfigNumber;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)_cancelPowerOn
{
  id v3;

  if (-[HMDHAPAccessory custom1WoBLE](self, "custom1WoBLE"))
  {
    +[HMDBTLEAdvertiser sharedAdvertiser](HMDBTLEAdvertiser, "sharedAdvertiser");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "cancelOn:", self);

  }
}

- (BOOL)custom1WoBLE
{
  void *v3;
  void *v4;
  BOOL v5;

  os_unfair_recursive_lock_lock_with_options();
  -[HMFConnectivityInfo woBLEInfo](self->_connectivityInfo, "woBLEInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bleIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 != 0;

  os_unfair_recursive_lock_unlock();
  return v5;
}

- (void)populateModelObject:(id)a3 version:(int64_t)a4
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  objc_super v36;

  v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;
  v36.receiver = self;
  v36.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory populateModelObject:version:](&v36, sel_populateModelObject_version_, v6, a4);
  -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setUniqueIdentifier:", v9);

  -[HMDHAPAccessory bridge](self, "bridge");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setBridgeUUID:", v12);

  -[HMDHAPAccessory pairingUsername](self, "pairingUsername");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setPairingUsername:", v13);

  -[HMDHAPAccessory publicKey](self, "publicKey");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setPublicKey:", v14);

  if (a4 >= 2)
  {
    -[HMDHAPAccessory accessoryFlags](self, "accessoryFlags");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setPropertyIfNotNil:named:", v15, CFSTR("accessoryFlags"));

    -[HMDHAPAccessory broadcastKey](self, "broadcastKey");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setBroadcastKey:", v16);

    if ((unint64_t)a4 >= 4)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[HMDHAPAccessory certificationStatus](self, "certificationStatus"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setCertificationStatus:", v17);

      -[HMDHAPAccessory setupHash](self, "setupHash");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setPropertyIfNotNil:named:", v18, CFSTR("accessorySetupHash"));

      -[HMDHAPAccessory wiFiTransportCapabilities](self, "wiFiTransportCapabilities");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setWiFiTransportCapabilities:", v19);

      -[HMDHAPAccessory initialServiceTypeUUIDs](self, "initialServiceTypeUUIDs");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setPropertyIfNotNil:named:", v20, CFSTR("initialServiceTypeUUIDs"));

      -[HMDHAPAccessory needsOnboarding](self, "needsOnboarding");
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
      {
        -[HMDHAPAccessory needsOnboarding](self, "needsOnboarding");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setNeedsOnboarding:", v22);

      }
    }
  }
  -[HMDHAPAccessory getTransportInformationArray](self, "getTransportInformationArray");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v23, "count"))
    objc_msgSend(v8, "setTransportInformation:", v23);
  if (-[HMDHAPAccessory communicationProtocol](self, "communicationProtocol"))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", -[HMDHAPAccessory communicationProtocol](self, "communicationProtocol"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setCommunicationProtocol:", v24);

  }
  -[HMDHAPAccessory connectivityInfo](self, "connectivityInfo");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setPropertyIfNotNil:named:", v25, CFSTR("connectivityInfo"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMDHAPAccessory suspendedState](self, "suspendedState"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setSuspendedState:", v26);

  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "targetUUIDs");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setTargetUUIDs:", v28);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHAPAccessory hardwareSupport](self, "hardwareSupport"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setHardwareSupport:", v29);

  -[HMDHAPAccessory hasOnboardedForNaturalLighting](self, "hasOnboardedForNaturalLighting");
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30)
  {
    -[HMDHAPAccessory hasOnboardedForNaturalLighting](self, "hasOnboardedForNaturalLighting");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setHasOnboardedForNaturalLighting:", v31);

  }
  -[HMDAccessory preferredMediaUserUUID](self, "preferredMediaUserUUID");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setPreferredMediaUserUUID:", v32);

  -[HMDAccessory preferredMediaUserSelectionTypeNumber](self, "preferredMediaUserSelectionTypeNumber");
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  if (v33)
  {
    -[HMDAccessory preferredMediaUserSelectionTypeNumber](self, "preferredMediaUserSelectionTypeNumber");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setPreferredUserSelectionType:", v34);

  }
  -[HMDHAPAccessory chipStorage](self, "chipStorage");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "updateAccessoryModel:", v8);

}

- (NSArray)attributeDescriptions
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  objc_super v28;
  _QWORD v29[7];

  v29[6] = *MEMORY[0x1E0C80C00];
  v3 = objc_alloc(MEMORY[0x1E0D28548]);
  -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = (void *)objc_msgSend(v3, "initWithName:value:", CFSTR("ID"), v27);
  v29[0] = v26;
  v4 = objc_alloc(MEMORY[0x1E0D28548]);
  -[HMDHAPAccessory certificationStatus](self, "certificationStatus");
  HMAccessoryCertificationStatusToString();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)objc_msgSend(v4, "initWithName:value:", CFSTR("CS"), v25);
  v29[1] = v24;
  v5 = objc_alloc(MEMORY[0x1E0D28548]);
  -[HMDHAPAccessory bridge](self, "bridge");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "uuid");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)objc_msgSend(v5, "initWithName:value:", CFSTR("BUUID"), v22);
  v29[2] = v21;
  v6 = objc_alloc(MEMORY[0x1E0D28548]);
  -[HMDHAPAccessory matterNodeID](self, "matterNodeID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "initWithName:value:", CFSTR("NodeID"), v7);
  v29[3] = v8;
  v9 = objc_alloc(MEMORY[0x1E0D28548]);
  -[HMDHAPAccessory chipStorage](self, "chipStorage");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "vendorID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v9, "initWithName:value:", CFSTR("VID"), v11);
  v29[4] = v12;
  v13 = objc_alloc(MEMORY[0x1E0D28548]);
  -[HMDHAPAccessory chipStorage](self, "chipStorage");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "productID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v13, "initWithName:value:", CFSTR("PID"), v15);
  v29[5] = v16;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 6);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v28.receiver = self;
  v28.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory attributeDescriptions](&v28, sel_attributeDescriptions);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "arrayByAddingObjectsFromArray:", v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v19;
}

- (HMDCHIPAccessoryStorage)chipStorage
{
  return self->_chipStorage;
}

- (BOOL)isPrimary
{
  void *v2;

  -[HMDHAPAccessory bridge](self, "bridge");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2 == 0;
}

- (id)bridge
{
  void *v2;
  void *v3;
  id v4;

  -[HMDAccessory hostAccessory](self, "hostAccessory");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

- (int64_t)certificationStatus
{
  return self->_certificationStatus;
}

- (NSNumber)matterNodeID
{
  return self->_matterNodeID;
}

- (NSSet)initialServiceTypeUUIDs
{
  NSSet *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_initialServiceTypeUUIDs;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (unint64_t)suspendedState
{
  unint64_t suspendedState;

  os_unfair_recursive_lock_lock_with_options();
  suspendedState = self->_suspendedState;
  os_unfair_recursive_lock_unlock();
  return suspendedState;
}

- (HMDTargetControllerManager)targetControllerManager
{
  HMDTargetControllerManager *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_targetControllerManager;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (NSNumber)needsOnboarding
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_needsOnboarding;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)_checkHAPSessionRestore
{
  NSObject *v3;
  void *v4;
  BOOL v5;
  void *v6;
  id v7;

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000701-0000-1000-8000-0026BB765291"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 || (v5 = -[HMDHAPAccessory hasBTLELink](self, "hasBTLELink"), v4 = 0, v5))
  {

  }
  else if (-[HMDHAPAccessory communicationProtocol](self, "communicationProtocol") != 2)
  {
    -[HMDHAPAccessory bridge](self, "bridge");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[HMDHAPAccessory _deregisterFromSessionRestore:](self, "_deregisterFromSessionRestore:", CFSTR("accessorySession-Primary"));
    }
    else
    {
      -[HMDAccessory home](self, "home");
      v7 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "isCurrentDeviceConfirmedPrimaryResident"))
        -[HMDHAPAccessory _registerForSessionRestore:](self, "_registerForSessionRestore:", CFSTR("accessorySession-Primary"));
      else
        -[HMDHAPAccessory _deregisterFromSessionRestore:](self, "_deregisterFromSessionRestore:", CFSTR("accessorySession-Primary"));

    }
  }
}

- (void)_updateAccessoryTracking
{
  _BOOL8 v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;

  if (-[HMDHAPAccessory hasBTLELink](self, "hasBTLELink"))
  {
    v7 = 0;
    v3 = -[HMDHAPAccessory _shouldTrackAccessoryWithPriority:](self, "_shouldTrackAccessoryWithPriority:", &v7);
    -[HMDAccessory home](self, "home");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accessoryBrowser");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "accessoryBrowserHapProtocol");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "configureAccessory:trackState:connectionPriority:", self, v3, v7);

  }
}

- (BOOL)hasIPLink
{
  void *v4;
  char v5;

  if (-[HMDHAPAccessory communicationProtocol](self, "communicationProtocol") == 2)
    return -[HMDHAPAccessory hasIPServer](self, "hasIPServer");
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "na_any:", &__block_literal_global_334_48795);

  return v5;
}

- (BOOL)hasBTLELink
{
  void *v4;
  char v5;

  if (-[HMDHAPAccessory communicationProtocol](self, "communicationProtocol") == 2)
    return -[HMDHAPAccessory hasBLEServer](self, "hasBLEServer");
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "na_any:", &__block_literal_global_337);

  return v5;
}

- (int64_t)communicationProtocol
{
  int64_t communicationProtocol;

  os_unfair_recursive_lock_lock_with_options();
  communicationProtocol = self->_communicationProtocol;
  os_unfair_recursive_lock_unlock();
  return communicationProtocol;
}

- (int64_t)reachableTransports
{
  void *v3;
  int64_t v4;
  _QWORD v6[5];
  objc_super v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v7.receiver = self;
  v7.super_class = (Class)HMDHAPAccessory;
  v11 = -[HMDAccessory reachableTransports](&v7, sel_reachableTransports);
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __38__HMDHAPAccessory_reachableTransports__block_invoke;
  v6[3] = &unk_1E89AB9A0;
  v6[4] = &v8;
  objc_msgSend(v3, "na_each:", v6);

  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

- (NSNumber)wiFiTransportCapabilities
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_wiFiTransportCapabilities;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (NSData)setupHash
{
  NSData *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_setupHash;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (NSData)publicKey
{
  return self->_publicKey;
}

- (NSString)pairingUsername
{
  return self->_pairingUsername;
}

- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4
{
  void *v6;

  -[HMDHAPAccessory transactionWithObjectChangeType:](self, "transactionWithObjectChangeType:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory populateModelObject:version:](self, "populateModelObject:version:", v6, a4);
  return v6;
}

- (id)modelObjectWithChangeType:(unint64_t)a3
{
  return -[HMDHAPAccessory modelObjectWithChangeType:version:](self, "modelObjectWithChangeType:version:", a3, 4);
}

- (NSNumber)hasOnboardedForNaturalLighting
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_hasOnboardedForNaturalLighting;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (BOOL)hardwareSupport
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_hardwareSupport;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (id)getTransportInformationArray
{
  void *v2;
  void *v3;

  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_map:", &__block_literal_global_602);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (NSData)broadcastKey
{
  NSData *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_broadcastKey;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (NSNumber)accessoryFlags
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_accessoryFlags;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (HMFConnectivityInfo)connectivityInfo
{
  HMFConnectivityInfo *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_connectivityInfo;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (BOOL)isPaired
{
  return 1;
}

- (BOOL)matchesHAPAccessory:(id)a3
{
  void *v3;
  BOOL v4;

  -[HMDHAPAccessory matchingTransportInformation:](self, "matchingTransportInformation:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

- (void)configureWithAccessory:(id)a3 homeNotificationsEnabled:(BOOL)a4 queue:(id)a5 completion:(id)a6
{
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[5];
  id v19;
  id v20;
  id v21;
  SEL v22;
  BOOL v23;

  v11 = a3;
  v12 = a5;
  v13 = a6;
  -[HMDAccessory workQueue](self, "workQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __84__HMDHAPAccessory_configureWithAccessory_homeNotificationsEnabled_queue_completion___block_invoke;
  v18[3] = &unk_1E89AB3B8;
  v18[4] = self;
  v19 = v11;
  v23 = a4;
  v20 = v12;
  v21 = v13;
  v22 = a2;
  v15 = v13;
  v16 = v12;
  v17 = v11;
  dispatch_async(v14, v18);

}

id __47__HMDHAPAccessory_getTransportInformationArray__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  if (objc_msgSend(v2, "linkType"))
  {
    objc_msgSend(v2, "transportInfoDictionary");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void __96__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_hapAccessory_activity_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = v6;
    v9 = v8;
    if (v8 && (objc_msgSend(v8, "isHMError") & 1) == 0)
    {
      if (objc_msgSend(v9, "isHAPError"))
      {
        v10 = objc_msgSend(v9, "code");
        if (v10 > 0x20)
          v11 = 52;
        else
          v11 = qword_1CDB8F990[v10];
      }
      else
      {
        v11 = 54;
      }
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:underlyingError:", v11, CFSTR("Enabling events failed"), 0, 0, v9);
      v18 = objc_claimAutoreleasedReturnValue();

      v9 = (void *)v18;
    }
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = WeakRetained;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "identifier");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "shortDescription");
      v29 = a1;
      v24 = v19;
      v25 = WeakRetained;
      v26 = v6;
      v27 = v5;
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v22;
      v32 = 2114;
      v33 = v28;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Successfully modified characteristic notifications", buf, 0x16u);

      v5 = v27;
      v6 = v26;
      WeakRetained = v25;
      v19 = v24;
      a1 = v29;

    }
    objc_autoreleasePoolPop(v19);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    objc_msgSend(v20, "_updateAccessoryTracking");
  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "identifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "shortDescription");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v14;
      v32 = 2114;
      v33 = v16;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] Failed to modify characteristic notifications: lost self", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v17 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v17 + 16))(v17, 0, v9);
  }

}

void __83__HMDHAPAccessory__enableNotification_forCharacteristics_message_clientIdentifier___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id WeakRetained;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v6)
    {
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
      {
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
      }
    }
    else
    {
      v8 = objc_msgSend(v11, "copy");
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

- (void)_readCharacteristicValues:(id)a3 hapAccessory:(id)a4 source:(unint64_t)a5 message:(id)a6 logEvent:(id)a7 completionHandler:(id)a8
{
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t i;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHAPAccessory *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  HMDHAPAccessory *v39;
  NSObject *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t j;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  HMDHAPAccessory *v56;
  NSObject *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  HMDHAPAccessory *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  HMDHAPAccessory *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  uint64_t v73;
  id v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  id v85;
  HMDHAPAccessory *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  _QWORD v96[4];
  id v97;
  HMDHAPAccessory *v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint8_t v113[128];
  uint8_t buf[4];
  void *v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  void *v119;
  __int16 v120;
  void *v121;
  _BYTE v122[128];
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v14 = a4;
  v76 = a6;
  v77 = a7;
  v75 = a8;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v13, "count"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = self;
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = 0u;
  v17 = v13;
  v79 = v15;
  v80 = v16;
  v93 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v109, v122, 16);
  if (v93)
  {
    v90 = *(_QWORD *)v110;
    v88 = *MEMORY[0x1E0CB8C70];
    v78 = v14;
    v85 = v17;
    do
    {
      for (i = 0; i != v93; ++i)
      {
        if (*(_QWORD *)v110 != v90)
          objc_enumerationMutation(v17);
        v19 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * i);
        objc_msgSend(v19, "characteristic");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "properties");
        objc_msgSend(v20, "characteristicType");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v92, "shouldNotCacheCharacteristicOfType:", v22);

        if ((v23 & 1) != 0 || (v21 & 2) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", v88, 48, 0);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v19, v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "addObject:", v26);

        }
        else
        {
          objc_msgSend(v20, "characteristicForHAPAccessory:", v14);
          v24 = objc_claimAutoreleasedReturnValue();
          if (v24)
          {
            v25 = (void *)v24;
            objc_msgSend(v15, "addObject:", v24);
            objc_msgSend(v87, "setObject:forKey:", v19, v25);
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v19, v27);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = (void *)MEMORY[0x1D17BA0A0]();
            v30 = v86;
            HMFGetOSLogHandle();
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v81 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "instanceID");
              v82 = v28;
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "characteristicType");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "server");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "identifier");
              v83 = v27;
              v35 = v29;
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v115 = v81;
              v116 = 2112;
              v117 = (uint64_t)v32;
              v118 = 2112;
              v119 = v33;
              v120 = 2112;
              v121 = v36;
              _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot map HMDCharacteristic %@/%@ to a HAPCharacteristic for server %@ to map read requests", buf, 0x2Au);

              v29 = v35;
              v27 = v83;

              v14 = v78;
              v16 = v80;

              v28 = v82;
              v15 = v79;

            }
            objc_autoreleasePoolPop(v29);
            objc_msgSend(v16, "addObject:", v28);

            v25 = 0;
            v17 = v85;
          }
        }

      }
      v93 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v109, v122, 16);
    }
    while (v93);
  }

  v37 = objc_msgSend(v16, "count");
  if (v37 == objc_msgSend(v17, "count"))
  {
    v38 = (void *)MEMORY[0x1D17BA0A0]();
    v39 = v86;
    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend(v80, "count");
      *(_DWORD *)buf = 138543618;
      v115 = v41;
      v116 = 2048;
      v117 = v42;
      _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@No HAP characteristics (out of %tu) left to be read", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v38);
    v43 = v75;
    v44 = v80;
    if (v75)
      (*((void (**)(id, void *))v75 + 2))(v75, v80);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v17, "count"));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v47 = v17;
    v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v105, v113, 16);
    if (v48)
    {
      v49 = v48;
      v50 = *(_QWORD *)v106;
      do
      {
        for (j = 0; j != v49; ++j)
        {
          if (*(_QWORD *)v106 != v50)
            objc_enumerationMutation(v47);
          v52 = *(void **)(*((_QWORD *)&v105 + 1) + 8 * j);
          objc_msgSend(v52, "characteristic");
          v53 = (void *)objc_claimAutoreleasedReturnValue();

          if (v53)
          {
            objc_msgSend(v52, "characteristic");
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v45, "addObject:", v54);

          }
          else
          {
            objc_msgSend(v46, "addObject:", v52);
          }
        }
        v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v105, v113, 16);
      }
      while (v49);
    }

    if (objc_msgSend(v46, "count"))
    {
      v55 = (void *)MEMORY[0x1D17BA0A0]();
      v56 = v86;
      HMFGetOSLogHandle();
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v115 = v58;
        v116 = 2112;
        v117 = (uint64_t)v46;
        _os_log_impl(&dword_1CD062000, v57, OS_LOG_TYPE_ERROR, "%{public}@Invalid read requests with missing characteristic: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v55);
    }
    objc_msgSend(MEMORY[0x1E0D33490], "currentTime");
    v60 = v59;
    v15 = v79;
    if (v77)
    {
      v61 = v77;
      objc_msgSend(v61, "setIsLocal:", 1);
      objc_msgSend(v61, "setLinkType:", objc_msgSend(v14, "linkType"));
      v62 = v86;
    }
    else
    {
      objc_msgSend(v76, "applicationBundleIdentifier");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      v62 = v86;
      -[HMDAccessory home](v86, "home");
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "userForHome:", v94);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "uuid");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v73) = 0;
      +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:", v45, v86, v14, a5, 1, 0, v73, v63, v65);
      v61 = (id)objc_claimAutoreleasedReturnValue();

      v15 = v79;
    }
    -[HMDAccessory metricLoggingVendorDetails](v62, "metricLoggingVendorDetails");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "manufacturer");
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v95 = v66;
    objc_msgSend(v66, "model");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory firmwareVersion](v62, "firmwareVersion");
    v67 = v62;
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v68, "versionString");
    v84 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory uuid](v67, "uuid");

    objc_msgSend(v45, "count");
    objc_msgSend(v14, "linkType");
    -[HMDAccessory workQueue](v86, "workQueue");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v96[0] = MEMORY[0x1E0C809B0];
    v96[1] = 3221225472;
    v96[2] = __100__HMDHAPAccessory__readCharacteristicValues_hapAccessory_source_message_logEvent_completionHandler___block_invoke;
    v96[3] = &unk_1E89AB608;
    v104 = v60;
    v97 = v61;
    v98 = v86;
    v99 = v69;
    v100 = v80;
    v101 = v87;
    v102 = v47;
    v103 = v75;
    v71 = v69;
    v72 = v61;
    objc_msgSend(v14, "readCharacteristicValues:timeout:completionQueue:completionHandler:", v15, v70, v96, 0.0);

    v43 = v75;
    v44 = v80;
  }

}

void __121__HMDHAPAccessory__readCharacteristicValues_localOperationRequired_source_message_logEvent_completionHandler_errorBlock___block_invoke(uint64_t a1)
{
  id *v1;
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  void *v23;
  _BOOL4 v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  void *v41;
  void *v42;
  _BOOL4 v43;
  void *v44;
  void *v45;
  id v46;
  NSObject *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void *v59;
  id v60;
  void *v61;
  uint64_t v62;
  id v63;
  id v64;
  void *v65;
  void *v66;
  _QWORD v68[4];
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75[3];
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  char v89;
  _BYTE v90[128];
  uint8_t v91[128];
  uint8_t buf[4];
  void *v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  void *v97;
  __int16 v98;
  id v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  void *v105;
  __int16 v106;
  void *v107;
  __int16 v108;
  void *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v89 = 0;
  v88 = 5;
  v1 = (id *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 32), "home");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*v1, "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = 0;
  v87 = 0;
  objc_msgSend(v65, "retrieveStateForTrackedAccessory:stateNumber:isReachable:linkQuality:lastSeen:", v2, &v87, &v89, &v88, &v86);
  v63 = v87;
  v64 = v86;

  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = *v1;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "isSuspended");
    HMFBooleanToString();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v88;
    objc_msgSend(v64, "doubleValue");
    v11 = v10;
    HMFBooleanToString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "count"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "shortDescription");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v93 = v6;
    v94 = 2112;
    v95 = (uint64_t)v7;
    v96 = 2112;
    v97 = v8;
    v98 = 2112;
    v99 = v63;
    v100 = 2048;
    v101 = v9;
    v102 = 2048;
    v103 = v11;
    v104 = 2112;
    v105 = v12;
    v106 = 2112;
    v107 = v13;
    v108 = 2112;
    v109 = v14;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Retrieved accessory: Reachable(%@) / Suspended(%@) / S#(%@) / LQ(%ld) / Seen(%.3fs) / Local(%@) for read requests (%@). %@", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = 0;
  v15 = (id)objc_msgSend(*(id *)(a1 + 32), "preferredHAPAccessoryForOperation:linkType:", 2, &v85);
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v16 = *(id *)(a1 + 40);
  v17 = 0;
  v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v81, v91, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v82;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v82 != v19)
          objc_enumerationMutation(v16);
        v21 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * i);
        objc_msgSend(v21, "characteristic");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "stateNumber");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = HAPCompareStateNumberWithRollover() == 1;

        if (v24)
        {
          objc_msgSend(v22, "stateNumber");
          v25 = objc_claimAutoreleasedReturnValue();

          v17 = (void *)v25;
        }
        if (objc_msgSend(*(id *)(a1 + 32), "hasValidCachedValueForCharacteristic:shouldLog:", v22, 1))
        {
          objc_msgSend(*(id *)(a1 + 32), "autoUpdateCachedCountDownCharacteristics:", v22);
          +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v21, 0);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "value");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "setValue:", v27);

          objc_msgSend(v66, "addObject:", v26);
        }

      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v81, v91, 16);
    }
    while (v18);
  }

  v28 = objc_msgSend(v66, "count");
  if (v28 == objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v29 = (void *)MEMORY[0x1D17BA0A0]();
    v30 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v66, "count");
      objc_msgSend(*(id *)(a1 + 48), "shortDescription");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v93 = v32;
      v94 = 2048;
      v95 = v33;
      v96 = 2112;
      v97 = v34;
      _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Returning Cached values, No more HAP characteristics (out of %tu) left to be read. %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v29);
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v37 = *(id *)(a1 + 40);
    v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v77, v90, 16);
    if (v38)
    {
      v39 = *(_QWORD *)v78;
      do
      {
        for (j = 0; j != v38; ++j)
        {
          if (*(_QWORD *)v78 != v39)
            objc_enumerationMutation(v37);
          v41 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * j);
          objc_msgSend(v41, "characteristic");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v43 = v42 == 0;

          if (v43)
          {
            objc_msgSend(v36, "addObject:", v41);
          }
          else
          {
            objc_msgSend(v41, "characteristic");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "addObject:", v44);

          }
        }
        v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v77, v90, 16);
      }
      while (v38);
    }

    if (objc_msgSend(v36, "count"))
    {
      v45 = (void *)MEMORY[0x1D17BA0A0]();
      v46 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v93 = v48;
        v94 = 2112;
        v95 = (uint64_t)v36;
        _os_log_impl(&dword_1CD062000, v47, OS_LOG_TYPE_ERROR, "%{public}@Invalid read requests with missing characteristic: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v45);
    }
    v49 = *(void **)(a1 + 56);
    if (v49)
    {
      v50 = v49;
      objc_msgSend(v50, "setIsCached:", 1);
      objc_msgSend(v50, "setIsLocal:", 1);
    }
    else
    {
      v51 = *(_QWORD *)(a1 + 32);
      v52 = *(_QWORD *)(a1 + 88);
      objc_msgSend(*(id *)(a1 + 48), "applicationBundleIdentifier");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "userForHome:", v65);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "uuid");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v62) = 1;
      +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:", v35, v51, 0, v52, 1, 0, v62, v53, v55);
      v50 = (id)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend(*(id *)(a1 + 32), "submitLogEvent:error:", v50, 0);
    v56 = *(_QWORD *)(a1 + 72);
    if (v56)
    {
      (*(void (**)(uint64_t, void *))(v56 + 16))(v56, v66);

      goto LABEL_41;
    }

  }
  v57 = *(unsigned __int8 *)(a1 + 96);
  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 64), "markWithReason:", CFSTR("Evaluating"));
  if (v57)
    v58 = 10;
  else
    v58 = 2;
  v59 = *(void **)(a1 + 32);
  v68[0] = MEMORY[0x1E0C809B0];
  v68[1] = 3221225472;
  v68[2] = __121__HMDHAPAccessory__readCharacteristicValues_localOperationRequired_source_message_logEvent_completionHandler_errorBlock___block_invoke_413;
  v68[3] = &unk_1E89AB568;
  objc_copyWeak(v75, (id *)buf);
  v69 = *(id *)(a1 + 64);
  v76 = *(_BYTE *)(a1 + 96);
  v70 = *(id *)(a1 + 40);
  v71 = *(id *)(a1 + 48);
  v75[1] = (id)v58;
  v60 = *(id *)(a1 + 80);
  v61 = *(void **)(a1 + 88);
  v73 = v60;
  v75[2] = v61;
  v72 = *(id *)(a1 + 56);
  v74 = *(id *)(a1 + 72);
  objc_msgSend(v59, "_evaluateLocalOperation:state:completion:", 2, v17, v68);

  objc_destroyWeak(v75);
  objc_destroyWeak((id *)buf);
LABEL_41:

}

- (BOOL)hasValidCachedValueForCharacteristic:(id)a3 shouldLog:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v17;
  void *v18;
  HMDHAPAccessory *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  HMDHAPAccessory *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  BOOL v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  id v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v4 = a4;
  v56 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v35 = -[HMDAccessory isReachable](self, "isReachable");
  v34 = 0;
  v7 = -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](self, "preferredHAPAccessoryForOperation:linkType:", 2, &v34);
  if (v34 != 2 && (-[HMDHAPAccessory reachableTransports](self, "reachableTransports") & 2) == 0)
  {
    LOBYTE(v8) = 0;
    v9 = 0;
    v10 = 0;
    goto LABEL_10;
  }
  -[HMDAccessory home](self, "home");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory identifier](self, "identifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = 0;
  v33 = 0;
  objc_msgSend(v11, "retrieveStateForTrackedAccessory:stateNumber:isReachable:linkQuality:lastSeen:", v12, &v33, &v35, 0, &v32);
  v9 = v33;
  v10 = v32;

  if (!v35 || (objc_msgSend(v6, "value"), (v13 = objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_9:
    LOBYTE(v8) = 0;
    goto LABEL_10;
  }
  v14 = (void *)v13;
  objc_msgSend(v6, "stateNumber");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v15 || objc_msgSend(v6, "shouldIgnoreCacheValueForRead"))
  {

    goto LABEL_9;
  }
  objc_msgSend(v6, "stateNumber");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v8) = HMFEqualObjects();

  if (v4 && (_DWORD)v8)
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "value");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "characteristicType");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      HAPShortUUIDType();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "instanceID");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "stateNumber");
      v29 = v18;
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "lastKnownValue");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "lastKnownValueUpdateTime");
      v27 = v19;
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "doubleValue");
      *(_DWORD *)buf = 138545666;
      v37 = v31;
      v38 = 2112;
      v39 = v30;
      v40 = 2112;
      v41 = v20;
      v42 = 2112;
      v43 = v21;
      v44 = 2112;
      v45 = v22;
      v46 = 2112;
      v47 = v23;
      v48 = 2112;
      v49 = v24;
      v50 = 2112;
      v51 = v9;
      v52 = 2112;
      v53 = v25;
      v54 = 2048;
      v55 = v26;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Valid cached value %@ for characteristic: %@/%@/%@/%@/%@ for Accessory: S#(%@)/R(%@)/T(%.3fs)", buf, 0x66u);

      v19 = v27;
      v18 = v29;

    }
    objc_autoreleasePoolPop(v18);
    LOBYTE(v8) = 1;
  }
LABEL_10:

  return (char)v8;
}

- (BOOL)isSuspended
{
  return -[HMDHAPAccessory suspendedState](self, "suspendedState") == 3;
}

- (void)populateHMDCharacteristicResponses:(id)a3 hapResponses:(id)a4 mapping:(id)a5 overallError:(id)a6 requests:(id)a7
{
  id v11;
  id v12;
  uint64_t i;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  id v24;
  uint64_t j;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t k;
  void *v33;
  void *v34;
  void *v35;
  char v36;
  uint64_t v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  HMDHAPAccessory *v43;
  NSObject *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  __objc2_class **p_superclass;
  void *v63;
  HMDHAPAccessory *v64;
  NSObject *v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t m;
  void *v72;
  void *v73;
  HMDHAPAccessory *v74;
  NSObject *v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t n;
  void *v82;
  id v83;
  id v84;
  id obj;
  uint64_t v87;
  id v88;
  id v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE v121[128];
  uint8_t v122[128];
  uint8_t buf[4];
  void *v124;
  __int16 v125;
  void *v126;
  __int16 v127;
  void *v128;
  _BYTE v129[128];
  _BYTE v130[128];
  _BYTE v131[128];
  _BYTE v132[128];
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v89 = a4;
  v88 = a5;
  v84 = a6;
  v83 = a7;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:");
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v12 = v11;
  v91 = v12;
  v95 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v117, v132, 16);
  if (v95)
  {
    v92 = *(_QWORD *)v118;
    do
    {
      for (i = 0; i != v95; ++i)
      {
        if (*(_QWORD *)v118 != v92)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v117 + 1) + 8 * i), "request");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v113 = 0u;
        v114 = 0u;
        v115 = 0u;
        v116 = 0u;
        v15 = v94;
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v113, v131, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v114;
LABEL_8:
          v19 = 0;
          while (1)
          {
            if (*(_QWORD *)v114 != v18)
              objc_enumerationMutation(v15);
            v20 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * v19);
            objc_msgSend(v20, "characteristic");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "characteristic");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = objc_msgSend(v21, "isEqual:", v22);

            if ((v23 & 1) != 0)
              break;
            if (v17 == ++v19)
            {
              v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v113, v131, 16);
              if (v17)
                goto LABEL_8;
              v12 = v91;
              goto LABEL_17;
            }
          }
          v24 = v20;

          v12 = v91;
          if (!v24)
            goto LABEL_18;
          objc_msgSend(v15, "removeObject:", v24);
          v15 = v24;
        }
LABEL_17:

LABEL_18:
      }
      v95 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v117, v132, 16);
    }
    while (v95);
  }

  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  obj = v89;
  v90 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, v130, 16);
  if (v90)
  {
    v87 = *(_QWORD *)v110;
    do
    {
      for (j = 0; j != v90; j = v45 + 1)
      {
        if (*(_QWORD *)v110 != v87)
          objc_enumerationMutation(obj);
        v93 = j;
        v26 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * j);
        objc_msgSend(v26, "characteristic");
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v88, "objectForKey:");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v105 = 0u;
        v106 = 0u;
        v107 = 0u;
        v108 = 0u;
        v28 = v94;
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v105, v129, 16);
        if (v29)
        {
          v30 = v29;
          v31 = *(_QWORD *)v106;
          while (2)
          {
            for (k = 0; k != v30; ++k)
            {
              if (*(_QWORD *)v106 != v31)
                objc_enumerationMutation(v28);
              v33 = *(void **)(*((_QWORD *)&v105 + 1) + 8 * k);
              objc_msgSend(v33, "characteristic");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "characteristic");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              v36 = objc_msgSend(v34, "isEqual:", v35);

              if ((v36 & 1) != 0)
              {
                v38 = v33;

                if (v38)
                  v37 = objc_msgSend(v28, "removeObject:", v38);
                goto LABEL_36;
              }
            }
            v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v105, v129, 16);
            if (v30)
              continue;
            break;
          }
        }

        v38 = 0;
LABEL_36:
        if (v27)
        {
          objc_msgSend(v26, "error");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = v96;
          if (v39)
          {
            objc_msgSend(v26, "error");
            v41 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v41 = v84;
          }
          v50 = v41;
          v45 = v93;

          +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v27, v50);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "request");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "characteristic");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v96, "stateNumber");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "setStateNumber:", v54);

          objc_msgSend(v26, "value");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "valueUpdatedTime");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "stateNumber");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "notificationContext");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "setValue:updatedTime:stateNumber:notificationContext:", v55, v56, v57, v58);

          objc_msgSend(v91, "addObject:", v51);
        }
        else
        {
          v42 = (void *)MEMORY[0x1D17BA0A0](v37);
          v43 = self;
          HMFGetOSLogHandle();
          v44 = objc_claimAutoreleasedReturnValue();
          v45 = v93;
          v40 = v96;
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v96, "service");
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "instanceID");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v96, "instanceID");
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v124 = v46;
            v125 = 2112;
            v126 = v48;
            v127 = 2112;
            v128 = v49;
            _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to look up HMD request for HAP characteristic %@/%@", buf, 0x20u);

            v40 = v96;
          }

          objc_autoreleasePoolPop(v42);
        }

      }
      v90 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, v130, 16);
    }
    while (v90);
  }

  v59 = objc_msgSend(v94, "count");
  v60 = v84;
  if (v84)
  {
    v61 = v91;
    p_superclass = &OBJC_METACLASS___HMDNaturalLightingCurveWriter.superclass;
  }
  else
  {
    v61 = v91;
    p_superclass = (__objc2_class **)(&OBJC_METACLASS___HMDNaturalLightingCurveWriter + 8);
    if (v59)
    {
      v63 = (void *)MEMORY[0x1D17BA0A0]();
      v64 = self;
      HMFGetOSLogHandle();
      v65 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v124 = v66;
        _os_log_impl(&dword_1CD062000, v65, OS_LOG_TYPE_DEFAULT, "%{public}@Did not get all requests from device back, and not in an error state (using HMErrorCodeNotFound for missing items.).", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v63);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v67 = v94;
  v68 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v101, v122, 16);
  if (v68)
  {
    v69 = v68;
    v70 = *(_QWORD *)v102;
    do
    {
      for (m = 0; m != v69; ++m)
      {
        if (*(_QWORD *)v102 != v70)
          objc_enumerationMutation(v67);
        objc_msgSend(p_superclass + 49, "responseWithRequest:error:", *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * m), v60);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v61, "addObject:", v72);

      }
      v69 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v101, v122, 16);
    }
    while (v69);
  }

  if (objc_msgSend(v67, "count") && !v60)
  {
    v73 = (void *)MEMORY[0x1D17BA0A0]();
    v74 = self;
    HMFGetOSLogHandle();
    v75 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v124 = v76;
      _os_log_impl(&dword_1CD062000, v75, OS_LOG_TYPE_DEFAULT, "%{public}@Did not get all requests from device back, and not in an error state (using HMErrorCodeNotFound for missing items.).", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v73);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v77 = v67;
  v78 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v97, v121, 16);
  if (v78)
  {
    v79 = v78;
    v80 = *(_QWORD *)v98;
    do
    {
      for (n = 0; n != v79; ++n)
      {
        if (*(_QWORD *)v98 != v80)
          objc_enumerationMutation(v77);
        objc_msgSend(p_superclass + 49, "responseWithRequest:error:", *(_QWORD *)(*((_QWORD *)&v97 + 1) + 8 * n), v60);
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v61, "addObject:", v82);

      }
      v79 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v97, v121, 16);
    }
    while (v79);
  }

}

- (void)_evaluateLocalOperation:(int64_t)a3 state:(id)a4 completion:(id)a5
{
  id v8;
  void (**v9)(id, _QWORD);
  void *v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  NSObject *v15;
  id v16;
  _QWORD block[4];
  id v18;
  HMDHAPAccessory *v19;
  id v20;
  void (**v21)(id, _QWORD);
  uint64_t *v22;
  int64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;

  v8 = a4;
  v9 = (void (**)(id, _QWORD))a5;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 1;
  if (!-[HMDHAPAccessory hasBTLELink](self, "hasBTLELink")
    || -[HMDHAPAccessory isBLELinkConnected](self, "isBLELinkConnected")
    || -[HMDHAPAccessory hasIPLink](self, "hasIPLink") && -[HMDAccessory isReachable](self, "isReachable"))
  {
    if (v9)
      v9[2](v9, *((unsigned __int8 *)v27 + 24));
  }
  else
  {
    -[HMDAccessory home](self, "home");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "primaryResident");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "isReachable");

    objc_msgSend(v10, "residentDeviceManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isCurrentDeviceAvailableResident");

    -[HMDAccessory workQueue](self, "workQueue");
    v15 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __60__HMDHAPAccessory__evaluateLocalOperation_state_completion___block_invoke;
    block[3] = &unk_1E89AB978;
    v18 = v10;
    v19 = self;
    v24 = v14;
    v25 = v12;
    v20 = v8;
    v22 = &v26;
    v23 = a3;
    v21 = v9;
    v16 = v10;
    dispatch_async(v15, block);

  }
  _Block_object_dispose(&v26, 8);

}

- (BOOL)isSecureSessionEstablished
{
  return -[HMDHAPAccessory isIPSecureSessionEstablished](self, "isIPSecureSessionEstablished")
      || -[HMDHAPAccessory isBLESecureSessionEstablished](self, "isBLESecureSessionEstablished");
}

- (BOOL)isIPSecureSessionEstablished
{
  void *v2;
  char v3;

  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_336);

  return v3;
}

uint64_t __82__HMDHAPAccessory_enableNotification_forCharacteristics_message_clientIdentifier___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_enableNotification:forCharacteristics:message:clientIdentifier:", *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

- (void)_configureWithAccessoryServices:(id)a3 changedCharacteristics:(id *)a4
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  id *v21;
  id obj;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  _BYTE v36[128];
  uint64_t v37;

  v21 = a4;
  v37 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v6);

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v5, "count"));
  v26 = (id)objc_claimAutoreleasedReturnValue();
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = v5;
  v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
  if (v24)
  {
    v23 = *(_QWORD *)v32;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v32 != v23)
          objc_enumerationMutation(obj);
        v25 = v7;
        v8 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * v7);
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        -[HMDHAPAccessory services](self, "services", v21);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v28;
          do
          {
            for (i = 0; i != v11; ++i)
            {
              if (*(_QWORD *)v28 != v12)
                objc_enumerationMutation(v9);
              v14 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
              objc_msgSend(v8, "instanceID");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "instanceID");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v15, "isEqual:", v16);

              if (v17)
              {
                objc_msgSend(v14, "configureWithService:accessory:", v8, self);
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                v19 = (void *)objc_msgSend(v18, "mutableCopy");

                -[HMDHAPAccessory _wol_ignoreWakingViaCharacteristicUpdateFromChangedService:](self, "_wol_ignoreWakingViaCharacteristicUpdateFromChangedService:", v19);
                if (objc_msgSend(v19, "count"))
                {
                  objc_msgSend(v14, "instanceID");
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v26, "setObject:forKeyedSubscript:", v19, v20);

                }
              }
            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
          }
          while (v11);
        }

        v7 = v25 + 1;
      }
      while (v25 + 1 != v24);
      v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    }
    while (v24);
  }

  if (v21)
    *v21 = objc_retainAutorelease(v26);

}

- (void)_wol_ignoreWakingViaCharacteristicUpdateFromChangedService:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    -[HMDHAPAccessory wakingViaCharacteristicWithIID](self, "wakingViaCharacteristicWithIID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend(v4, "objectForKey:", CFSTR("kModifiedCharacteristicsForAccessoryKey"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory wakingViaCharacteristicWithIID](self, "wakingViaCharacteristicWithIID");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectForKey:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
        objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCharacteristicValue"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "BOOLValue");

        if ((v10 & 1) == 0)
        {
          v11 = (void *)MEMORY[0x1D17BA0A0]();
          v12 = self;
          HMFGetOSLogHandle();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDAccessory identifier](v12, "identifier");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = 138543874;
            v18 = v14;
            v19 = 2112;
            v20 = v8;
            v21 = 2112;
            v22 = v15;
            _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Ignoring changed characteristic update: '%@' since accessory: %@ has a pending wake via this characteristic.", (uint8_t *)&v17, 0x20u);

          }
          objc_autoreleasePoolPop(v11);
          -[HMDHAPAccessory wakingViaCharacteristicWithIID](v12, "wakingViaCharacteristicWithIID");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "removeObjectForKey:", v16);

          objc_msgSend(v4, "setObject:forKey:", v6, CFSTR("kModifiedCharacteristicsForAccessoryKey"));
        }
      }

    }
  }

}

- (NSNumber)wakingViaCharacteristicWithIID
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_wakingViaCharacteristicWithIID;
  os_unfair_recursive_lock_unlock();
  return v3;
}

BOOL __53__HMDHAPAccessory_Light__updateLightProfilesSettings__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a2, "notificationEnabledCharacteristics");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

- (void)handleAccessoryConfigured:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __45__HMDHAPAccessory_handleAccessoryConfigured___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

uint64_t __48__HMDHAPAccessory_isBLESecureSessionEstablished__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = a2;
  if (objc_msgSend(v2, "linkType") == 2)
  {
    objc_msgSend(v2, "hapAccessory");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "server");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = v4;
    else
      v5 = 0;
    v6 = v5;

    v7 = objc_msgSend(v6, "isSecuritySessionOpen");
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (id)expectedTransport
{
  void *v3;
  int v4;

  -[HMDAccessory home](self, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isThreadCapable");

  if (v4
    && (-[HMDHAPAccessory supportsThread](self, "supportsThread")
     || -[HMDHAPAccessory hasThreadServer](self, "hasThreadServer")))
  {
    return CFSTR("Thread");
  }
  if (-[HMDHAPAccessory hasIPLink](self, "hasIPLink"))
    return CFSTR("WiFi-Ethernet");
  if (-[HMDHAPAccessory hasBTLELink](self, "hasBTLELink"))
    return CFSTR("BLE");
  return CFSTR("Unknown");
}

- (unint64_t)supportedTransports
{
  unint64_t v3;

  v3 = -[HMDHAPAccessory hasIPLink](self, "hasIPLink");
  if (-[HMDHAPAccessory hasBTLELink](self, "hasBTLELink"))
    return v3 | 2;
  else
    return v3;
}

- (void)_addHAPAccessory:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  __CFString *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHAPAccessory *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  __CFString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "serverIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v4, "linkType");
    if (v10 > 2)
      v11 = CFSTR("Undefined");
    else
      v11 = off_1E89ABEB0[v10];
    v12 = v11;
    v22 = 138543874;
    v23 = v8;
    v24 = 2112;
    v25 = v9;
    v26 = 2112;
    v27 = v12;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Adding HAPAccessory %@/%@ for accessory", (uint8_t *)&v22, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHAPAccessory matchingTransportInformation:](v6, "matchingTransportInformation:", v4);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    objc_msgSend(v13, "setReachable:", objc_msgSend(v4, "isReachable"));
    objc_msgSend(v13, "setHapAccessory:", v4);
    objc_msgSend(v4, "server");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "version");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "versionString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setProtocolVersion:", v16);

    -[HMDHAPAccessory updateSuspendedStateWithConnectionState:hapAccessory:](v6, "updateSuspendedStateWithConnectionState:hapAccessory:", 1, v4);
  }
  else
  {
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = v6;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543618;
      v23 = v20;
      v24 = 2112;
      v25 = v21;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to find transport info for HAPAccessory %@", (uint8_t *)&v22, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
  }
  objc_msgSend(v4, "setShouldDisconnectOnIdle:", -[HMDHAPAccessory shouldDisconnectOnIdle](v6, "shouldDisconnectOnIdle"));
  -[HMDHAPAccessory _updateReachability](v6, "_updateReachability");
  objc_msgSend(v4, "setDelegate:", v6);
  -[HMDHAPAccessory configureCHIPAccessory](v6, "configureCHIPAccessory");

}

- (BOOL)shouldDisconnectOnIdle
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_shouldDisconnectOnIdle;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)_updateReachability
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v7), "isReachable", (_QWORD)v10) & 1) != 0)
        {

          -[HMDAccessory setReachable:](self, "setReachable:", 1);
          -[HMDHAPAccessory cancelPowerOn](self, "cancelPowerOn");
          -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
          v8 = (void *)objc_claimAutoreleasedReturnValue();

          if (v8)
          {
            HAPStringFromAccessoryServerSession();
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHAPAccessory registerForSessionRestore:](self, "registerForSessionRestore:", v9);

          }
          goto LABEL_12;
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }

  -[HMDAccessory setReachable:](self, "setReachable:", 0);
LABEL_12:
  -[HMDHAPAccessory _checkSessionRestoreOnLinkStateChange](self, "_checkSessionRestoreOnLinkStateChange", (_QWORD)v10);

}

void __38__HMDHAPAccessory_reachableTransports__block_invoke(uint64_t a1, void *a2)
{
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v3 = objc_msgSend(v7, "isReachable");
  v4 = v7;
  if (v3)
  {
    if (objc_msgSend(v7, "linkType") == 1)
    {
      v5 = 1;
      v4 = v7;
LABEL_6:
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= v5;
      goto LABEL_7;
    }
    v6 = objc_msgSend(v7, "linkType");
    v4 = v7;
    if (v6 == 2)
    {
      v5 = 2;
      goto LABEL_6;
    }
  }
LABEL_7:

}

- (void)cancelPowerOn
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __48__HMDHAPAccessory_WirelessResume__cancelPowerOn__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_checkBridgedAccessoryOnConfigured
{
  void *v3;
  uint64_t v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory setLastSessionStatus:](self, "setLastSessionStatus:", 0);
  -[HMDHAPAccessory currentActiveSessionRestoreClients](self, "currentActiveSessionRestoreClients");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Session Restore - Checking bridged accessory", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHAPAccessory _checkSession](v6, "_checkSession");
  }
}

- (void)_checkSessionRestoreOnLinkStateChange
{
  void *v3;
  double Current;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory currentActiveSessionRestoreClients](self, "currentActiveSessionRestoreClients");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count"))
  {
    Current = CFAbsoluteTimeGetCurrent();
    -[HMDHAPAccessory lastLinkChangeSessionCheckTime](self, "lastLinkChangeSessionCheckTime");
    v6 = Current - v5;
    -[HMDHAPAccessory sessionCheckPeriod](self, "sessionCheckPeriod");
    if (v6 > v7)
    {
      v8 = -[HMDHAPAccessory setLastLinkChangeSessionCheckTime:](self, "setLastLinkChangeSessionCheckTime:", CFAbsoluteTimeGetCurrent());
      v9 = (void *)MEMORY[0x1D17BA0A0](v8);
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138543618;
        v14 = v12;
        v15 = 2112;
        v16 = v3;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Session Restore checking session on link state change, registrations %@", (uint8_t *)&v13, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      if (-[HMDAccessory isReachable](v10, "isReachable"))
        -[HMDHAPAccessory _checkSession](v10, "_checkSession");
    }
    if (-[HMDAccessory isReachable](self, "isReachable"))
      -[HMDHAPAccessory _startSessionMonitor](self, "_startSessionMonitor");
  }

}

uint64_t __48__HMDHAPAccessory_deregisterFromSessionRestore___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_deregisterFromSessionRestore:", *(_QWORD *)(a1 + 40));
}

- (NSMutableSet)activeSessionRestoreClients
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)&self->super._lock);
  return self->_activeSessionRestoreClients;
}

- (void)setLastSessionStatus:(unint64_t)a3
{
  self->_lastSessionStatus = a3;
}

- (void)updateSuspendedStateWithConnectionState:(BOOL)a3 hapAccessory:(id)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  BOOL v11;

  v6 = a4;
  -[HMDAccessory workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __77__HMDHAPAccessory_WoL__updateSuspendedStateWithConnectionState_hapAccessory___block_invoke;
  block[3] = &unk_1E89C0898;
  v11 = a3;
  block[4] = self;
  v10 = v6;
  v8 = v6;
  dispatch_async(v7, block);

}

- (void)configureCHIPAccessory
{
  void *v3;
  void *v4;
  HMDHAPAccessory *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (-[HMDHAPAccessory supportsCHIP](self, "supportsCHIP"))
  {
    -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v3)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory isPrimary](v5, "isPrimary");
        HMFBooleanToString();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v19 = v8;
        v20 = 2112;
        v21 = v9;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Configuring CHIP accessory (isPrimary: %@)", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v4);
      if (-[HMDHAPAccessory isPrimary](v5, "isPrimary"))
        objc_msgSend(v3, "setChipDelegate:", v5);
      -[HMDAccessory home](v5, "home");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v10, "isCurrentDevicePrimaryResident"))
      {
        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "removeObserver:name:object:", v5, CFSTR("HMDHomeNameChangedNotification"), v10);

        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "addObserver:selector:name:object:", v5, sel__handleHomeNameChangedNotification_, CFSTR("HMDHomeNameChangedNotification"), v10);

      }
      if (-[HMDHAPAccessory isPrimary](v5, "isPrimary"))
      {
        -[HMDHAPAccessory chipStorage](v5, "chipStorage");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "pairings");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v14)
        {
          objc_msgSend(v10, "name");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 3221225472;
          v17[2] = __47__HMDHAPAccessory_CHIP__configureCHIPAccessory__block_invoke;
          v17[3] = &unk_1E89C2350;
          v17[4] = v5;
          -[HMDHAPAccessory _updateCHIPAccessoryWithFabricLabel:completionHandler:](v5, "_updateCHIPAccessoryWithFabricLabel:completionHandler:", v15, v17);

        }
      }

    }
    else
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v19 = v16;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP accessory server to set up CHIP accessory", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v4);
    }

  }
}

- (BOOL)supportsCHIP
{
  return -[HMDHAPAccessory communicationProtocol](self, "communicationProtocol") == 2;
}

- (unint64_t)enhancedAuthMethod
{
  void *v2;
  void *v3;
  unint64_t v4;

  -[HMDHAPAccessory internalEnhancedAuthMethod](self, "internalEnhancedAuthMethod");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    v4 = objc_msgSend(v2, "unsignedIntValue");
  else
    v4 = 5;

  return v4;
}

- (HMDAccessoryMetric)accessoryMetric
{
  return self->_accessoryMetric;
}

uint64_t __92__HMDHAPAccessory_readCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

- (BOOL)supportsWalletKey
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_supportsWalletKey;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)supportsHAP
{
  return -[HMDHAPAccessory communicationProtocol](self, "communicationProtocol") == 1;
}

uint64_t __123__HMDHAPAccessory__notifyClientsWithNotificationChangesForCharacteristics_characteristicErrors_enableNotification_message___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:", 0);
}

- (void)updateLightProfilesSettings
{
  void *v3;
  void *v4;
  id v5;

  -[HMDHAPAccessory lightProfiles](self, "lightProfiles");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "na_filter:", &__block_literal_global_3_126032);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  -[HMDAccessory home](self, "home");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateLightProfilesSettings:", v5);

}

- (HMMTRAccessoryServer)chipAccessoryServer
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v5)
        objc_enumerationMutation(v2);
      objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v6), "hapAccessory", (_QWORD)v12);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "server");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      v9 = (objc_opt_isKindOfClass() & 1) != 0 ? v8 : 0;
      v10 = v9;

      if (v10)
        break;
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v8 = 0;
  }

  return (HMMTRAccessoryServer *)v8;
}

- (BOOL)shouldEnableDaemonRelaunch
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  objc_super v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13.receiver = self;
  v13.super_class = (Class)HMDHAPAccessory;
  if (-[HMDAccessory shouldEnableDaemonRelaunch](&v13, sel_shouldEnableDaemonRelaunch))
  {
    LOBYTE(v3) = 1;
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    -[HMDHAPAccessory services](self, "services", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v4, "copy");

    v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v14, 16);
    if (v3)
    {
      v6 = *(_QWORD *)v10;
      while (2)
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v10 != v6)
            objc_enumerationMutation(v5);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "shouldEnableDaemonRelaunch") & 1) != 0)
          {
            LOBYTE(v3) = 1;
            goto LABEL_13;
          }
        }
        v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v14, 16);
        if (v3)
          continue;
        break;
      }
    }
LABEL_13:

  }
  return v3;
}

- (void)_evaluateAvailableSoftwareUpdate
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  id v11;

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHAPAccessory firmwareUpdateManager](self, "firmwareUpdateManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "sessionForAccessory:", self);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    -[HMDAccessory softwareUpdate](self, "softwareUpdate");
    v5 = objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = (void *)v5;
      -[HMDAccessory softwareUpdate](self, "softwareUpdate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "version");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory firmwareVersion](self, "firmwareVersion");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v8, "isEqualToVersion:", v9);

      if ((v10 & 1) == 0)
        -[HMDAccessory updateSoftwareUpdate:completionHandler:](self, "updateSoftwareUpdate:completionHandler:", 0, &__block_literal_global_19745);
    }
  }

}

- (id)firmwareUpdateManager
{
  void *v2;
  void *v3;
  void *v4;

  -[HMDAccessory home](self, "home");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "accessoryFirmwareUpdateManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t __77__HMDHAPAccessory_WoL__updateSuspendedStateWithConnectionState_hapAccessory___block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;
  BOOL v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(*(id *)(a1 + 32), "suspendedState");
  if (*(_BYTE *)(a1 + 48))
    v3 = 0;
  else
    v3 = result == 2;
  if (v3)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0](result);
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      HAPAccessorySuspendedStateDescription();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v12;
      v17 = 2112;
      v18 = v13;
      v19 = 2112;
      v20 = v14;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received disconnection from a '%@' accessory: %@", (uint8_t *)&v15, 0x20u);

    }
    v8 = 3;
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 48))
    v4 = result == 3;
  else
    v4 = 0;
  if (v4)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0](result);
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = 1;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      HAPAccessorySuspendedStateDescription();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v9;
      v17 = 2112;
      v18 = v10;
      v19 = 2112;
      v20 = v11;
      v8 = 1;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received connection from a '%@' accessory: %@", (uint8_t *)&v15, 0x20u);

    }
LABEL_15:

    objc_autoreleasePoolPop(v5);
    return objc_msgSend(*(id *)(a1 + 32), "setSuspendedState:", v8);
  }
  return result;
}

- (id)matchingHAPAccessoryServerIdentifierWithLinkType:(int64_t)a3
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  void *v14;
  __CFString *v15;
  void *v16;
  __CFString *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  __CFString *v26;
  __int16 v27;
  id v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v29, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v20 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        if (objc_msgSend(v10, "linkType", (_QWORD)v19) == a3)
        {
          objc_msgSend(v10, "serverIdentifier");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          goto LABEL_18;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v29, 16);
      if (v7)
        continue;
      break;
    }
  }

  if (a3)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if ((unint64_t)a3 > 2)
        v15 = CFSTR("Undefined");
      else
        v15 = off_1E89ABEB0[a3];
      v17 = v15;
      *(_DWORD *)buf = 138543874;
      v24 = v14;
      v25 = 2112;
      v26 = v17;
      v27 = 2112;
      v28 = v5;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@*** no server identifier found in transport information array for link type %@, %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    v16 = 0;
  }
  else
  {
    -[HMDAccessory identifier](self, "identifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_18:

  return v16;
}

- (id)anyIPServer
{
  void *v3;
  void *v4;
  void *v5;

  -[HMDHAPAccessory primaryIPServer](self, "primaryIPServer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    -[HMDHAPAccessory bridge](self, "bridge");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
    {
      objc_msgSend(v4, "primaryIPServer");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = 0;
    }

  }
  return v3;
}

- (id)primaryIPServer
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory getPrimaryHAPAccessories](self, "getPrimaryHAPAccessories");
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v7, "linkType", (_QWORD)v12) == 1)
        {
          objc_msgSend(v7, "server");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v9 = v8;
          else
            v9 = 0;
          v10 = v9;

          if (v10 && (objc_msgSend(v7, "isReachable") & 1) != 0)
            goto LABEL_16;

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }
  v8 = 0;
LABEL_16:

  return v8;
}

- (id)getPrimaryHAPAccessories
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v17 = (id)objc_opt_new();
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v19;
    v7 = *MEMORY[0x1E0D16680];
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend(v9, "hapAccessory");
        v10 = objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)v10;
          objc_msgSend(v9, "instanceID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v7);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v12, "isEqualToNumber:", v13);

          if (v14)
          {
            objc_msgSend(v9, "hapAccessory");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "addObject:", v15);

          }
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v5);
  }

  return v17;
}

- (BOOL)supportsWoL
{
  void *v3;
  void *v4;
  BOOL v5;

  -[HMDHAPAccessory findCharacteristicType:forServiceType:](self, "findCharacteristicType:forServiceType:", CFSTR("00000251-0000-1000-8000-0026BB765291"), CFSTR("00000221-0000-1000-8000-0026BB765291"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[HMDHAPAccessory findCharacteristicType:forServiceType:](self, "findCharacteristicType:forServiceType:", CFSTR("00000252-0000-1000-8000-0026BB765291"), CFSTR("00000221-0000-1000-8000-0026BB765291"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4 != 0;

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (id)findCharacteristicType:(id)a3 forServiceType:(id)a4
{
  id v6;
  void *v7;
  void *v8;

  v6 = a3;
  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "findCharacteristicWithType:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (HMCameraUserNotificationSettings)cameraProfileNotificationSettings
{
  HMCameraUserNotificationSettings *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_cameraProfileNotificationSettings;
  os_unfair_recursive_lock_unlock();
  return v3;
}

void __82__HMDHAPAccessory_ThreadManagement__maybeCommissionToThreadNetworkWithCompletion___block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v2 = objc_alloc(MEMORY[0x1E0D28540]);
  v3 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@, %s:%ld"), v4, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory+ThreadManagement.m", 216);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (id)objc_msgSend(v2, "initWithName:", v5);

  objc_msgSend(v11, "begin");
  v10 = v11;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __82__HMDHAPAccessory_ThreadManagement__maybeCommissionToThreadNetworkWithCompletion___block_invoke_2;
  v7[3] = &unk_1E89BFC88;
  v6 = *(void **)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v8 = v10;
  objc_msgSend(v6, "_maybeCommissionToThreadNetworkWithActivity:completion:", v8, v7);

  __HMFActivityScopeLeave();
  __HMFActivityScopeLeave();

}

- (void)_maybeCommissionToThreadNetworkWithActivity:(id)a3 completion:(id)a4
{
  id v6;
  void (**v7)(id, _QWORD);
  NSObject *v8;
  char v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  _QWORD v25[5];
  id v26;
  id v27;
  void (**v28)(id, _QWORD);
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(id, _QWORD))a4;
  -[HMDAccessory workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v8);

  v9 = -[HMDHAPAccessory reachableTransports](self, "reachableTransports");
  if (!-[HMDHAPAccessory hasBTLELink](self, "hasBTLELink") || (v9 & 1) != 0)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Either not a thread-capable accessory or already commissioned", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    v7[2](v7, 0);
  }
  else
  {
    v30 = 0;
    -[HMDHAPAccessory _findThreadControlPointCharacteristicWithError:](self, "_findThreadControlPointCharacteristicWithError:", &v30);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v30;
    if (v10)
    {
      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D16360]), "initWithValue:", 3);
      v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D16350]), "initWithOperationType:threadNetworkCredentials:formingAllowed:", v12, 0, 0);
      v29 = v11;
      objc_msgSend(v13, "serializeWithError:", &v29);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v29;

      if (v14)
      {
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 3221225472;
        v25[2] = __92__HMDHAPAccessory_ThreadManagement___maybeCommissionToThreadNetworkWithActivity_completion___block_invoke;
        v25[3] = &unk_1E89BF1B0;
        v28 = v7;
        v25[4] = self;
        v26 = v6;
        v27 = v10;
        -[HMDHAPAccessory _writeThreadControlPointCharacteristic:value:activity:completion:](self, "_writeThreadControlPointCharacteristic:value:activity:completion:", v27, v14, v26, v25);

      }
      else
      {
        v20 = (void *)MEMORY[0x1D17BA0A0]();
        v21 = self;
        HMFGetOSLogHandle();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v24 = v20;
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v32 = v23;
          v33 = 2112;
          v34 = v15;
          _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Unable to serialize request TLV: %@", buf, 0x16u);

          v20 = v24;
        }

        objc_autoreleasePoolPop(v20);
        ((void (**)(id, id))v7)[2](v7, v15);
      }

    }
    else
    {
      ((void (**)(id, id))v7)[2](v7, v11);
      v15 = v11;
    }

  }
}

uint64_t __82__HMDHAPAccessory_ThreadManagement__maybeCommissionToThreadNetworkWithCompletion___block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

- (void)_performOperation:(int64_t)a3 linkType:(int64_t)a4 operationBlock:(id)a5 errorBlock:(id)a6
{
  id v10;
  void (**v11)(id, void *);
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  int v22;
  void *v23;
  HMDHAPAccessory *v24;
  NSObject *v25;
  _BOOL4 v26;
  __CFString *v27;
  void *v28;
  HMDHAPAccessory *v29;
  NSObject *v30;
  void *v31;
  __CFString *v32;
  void *v33;
  void *v34;
  HMDHAPAccessory *v35;
  NSObject *v36;
  void *v37;
  unint64_t v38;
  HMDHAPAccessory *v39;
  int64_t v40;
  id v41;
  void (**v42)(id, void *);
  void *v43;
  HMDHAPAccessory *v44;
  NSObject *v45;
  void *v46;
  __CFString *v47;
  NSObject *v48;
  void *v49;
  __CFString *v50;
  __CFString *v51;
  void *v52;
  HMDHAPAccessory *v53;
  NSObject *v54;
  void *v55;
  __CFString *v56;
  __CFString *v57;
  void *v58;
  void *v59;
  void *v60;
  HMDHAPAccessory *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  int v65;
  const __CFString *v66;
  __CFString *v67;
  __CFString *v68;
  __CFString *v69;
  void *v70;
  __CFString *v71;
  __CFString *v72;
  __CFString *v73;
  __CFString *v74;
  void *v75;
  __CFString *v76;
  void *v77;
  void *v78;
  __CFString *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  _QWORD block[5];
  id v89;
  id v90;
  void (**v91)(id, void *);
  int64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint8_t buf[4];
  void *v96;
  __int16 v97;
  const __CFString *v98;
  __int16 v99;
  __CFString *v100;
  __int16 v101;
  __CFString *v102;
  __int16 v103;
  void *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v10 = a5;
  v11 = (void (**)(id, void *))a6;
  v94 = a4;
  -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](self, "preferredHAPAccessoryForOperation:linkType:", a3, &v94);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "server");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10 && v11)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v11[2](v11, v14);
    goto LABEL_68;
  }
  objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
  v15 = objc_claimAutoreleasedReturnValue();
  v87 = (void *)v15;
  if (v94)
  {
    v14 = (void *)v15;
    if (!isiOSDevice())
      goto LABEL_12;
    if (v94 != 2)
      goto LABEL_12;
    v16 = -[HMDAccessory isRemoteAccessEnabled](self, "isRemoteAccessEnabled");
    if ((a3 & 0xFFFFFFFFFFFFFFFELL) != 2 || !v16)
      goto LABEL_12;
    -[HMDAccessory identifier](self, "identifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:linkType:](self, "matchingTransportInformationWithServerIdentifier:linkType:", v17, v94);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v18 || (objc_msgSend(v18, "isReachable") & 1) != 0)
    {

LABEL_12:
      v19 = v13;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v20 = v19;
      else
        v20 = 0;
      v21 = v20;

      v81 = v21;
      if (objc_msgSend(v21, "isReachable") && (objc_msgSend(v21, "isReadyForOperation:", a3) & 1) == 0)
      {
        v85 = v13;
        v43 = (void *)MEMORY[0x1D17BA0A0]();
        v44 = self;
        HMFGetOSLogHandle();
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "shortDescription");
          v47 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v96 = v46;
          v97 = 2112;
          v98 = v47;
          _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_INFO, "%{public}@BTLE server is reachable but not ready for operation: %@. Retrieving the server", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v43);
        -[HMDAccessory workQueue](v44, "workQueue");
        v48 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __72__HMDHAPAccessory__performOperation_linkType_operationBlock_errorBlock___block_invoke;
        block[3] = &unk_1E89AB430;
        block[4] = v44;
        v92 = a3;
        v93 = v94;
        v90 = v10;
        v91 = v11;
        v14 = v87;
        v89 = v87;
        dispatch_async(v48, block);

        goto LABEL_50;
      }
      if (v19)
      {
        v22 = objc_msgSend(v12, "isReachable");
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        v24 = self;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = os_log_type_enabled(v25, OS_LOG_TYPE_INFO);
        if (v22)
        {
          if (v26)
          {
            HMFGetLogIdentifier();
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            v83 = v13;
            if ((unint64_t)a3 > 0xA)
              v27 = CFSTR("Undefined");
            else
              v27 = off_1E89ABEC8[a3];
            v73 = v27;
            objc_msgSend(v12, "serverIdentifier");
            v72 = (__CFString *)objc_claimAutoreleasedReturnValue();
            v80 = v23;
            if (v94 > 2)
              v67 = CFSTR("Undefined");
            else
              v67 = off_1E89ABEB0[v94];
            v69 = v67;
            -[HMDHAPAccessory suspendedState](v24, "suspendedState");
            HAPAccessorySuspendedStateDescription();
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544386;
            v96 = v75;
            v97 = 2112;
            v98 = v73;
            v99 = 2112;
            v100 = v72;
            v101 = 2112;
            v102 = v69;
            v103 = 2112;
            v104 = v70;
            _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Accessory '%@' operation: HAPAccessory %@/%@ is reachable. Suspended State: %@", buf, 0x34u);

            v13 = v83;
            v23 = v80;
          }

          objc_autoreleasePoolPop(v23);
          -[HMDAccessory uuid](v24, "uuid");

          v14 = v87;
          if (-[HMDHAPAccessory canWakeUpViaWoL](v24, "canWakeUpViaWoL")
            && -[HMDHAPAccessory isSuspended](v24, "isSuspended"))
          {
            -[HMDHAPAccessory _handleUnreachableAccessoryToPerformOperation:operationBlock:errorBlock:](v24, "_handleUnreachableAccessoryToPerformOperation:operationBlock:errorBlock:", a3, v10, v11);
          }
          else if (v10)
          {
            (*((void (**)(id, void *))v10 + 2))(v10, v12);
          }
        }
        else
        {
          if (v26)
          {
            v78 = v23;
            HMFGetLogIdentifier();
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDAccessory identifier](v24, "identifier");
            v76 = (__CFString *)objc_claimAutoreleasedReturnValue();
            if ((unint64_t)a3 > 0xA)
              v50 = CFSTR("Undefined");
            else
              v50 = off_1E89ABEC8[a3];
            v74 = v50;
            if (v94 > 2)
              v68 = CFSTR("Undefined");
            else
              v68 = off_1E89ABEB0[v94];
            v71 = v68;
            *(_DWORD *)buf = 138544130;
            v96 = v49;
            v97 = 2112;
            v98 = v76;
            v99 = 2112;
            v100 = v74;
            v101 = 2112;
            v102 = v71;
            _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ '%@' operation: Unable to retrieve HAPAccessory for linkType %@ - trying the next link", buf, 0x2Au);

            v23 = v78;
          }

          objc_autoreleasePoolPop(v23);
          -[HMDAccessory uuid](v24, "uuid");

          -[HMDHAPAccessory _performOperation:linkType:operationBlock:errorBlock:](v24, "_performOperation:linkType:operationBlock:errorBlock:", a3);
          v14 = v87;
        }
        goto LABEL_67;
      }
      v85 = v13;
      -[HMDAccessory home](self, "home");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v33, "isResidentFirstAccessoryCommunicationEnabled"))
      {
        v34 = (void *)MEMORY[0x1D17BA0A0]();
        v35 = self;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v96 = v37;
          _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@No configured HAP accessory, attempting retrieval for accessory", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v34);
        v38 = v94;
        v39 = v35;
        v40 = a3;
        v41 = v10;
        v42 = v11;
        v14 = v87;
      }
      else
      {
        if (!-[HMDAccessory isReachable](self, "isReachable"))
        {
          objc_msgSend(v33, "homeManager");
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "residentMesh");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "bestResidentDeviceForAccessory:", self);
          v79 = (__CFString *)objc_claimAutoreleasedReturnValue();

          v60 = (void *)MEMORY[0x1D17BA0A0]();
          v61 = self;
          HMFGetOSLogHandle();
          v62 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v77 = v60;
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v33, "primaryResident");
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            v65 = objc_msgSend(v64, "isCurrentDevice");
            v66 = CFSTR("NO");
            *(_DWORD *)buf = 138543874;
            v96 = v63;
            v97 = 2112;
            if (v65)
              v66 = CFSTR("YES");
            v98 = v66;
            v99 = 2112;
            v100 = v79;
            _os_log_impl(&dword_1CD062000, v62, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory unreachable, isPrimary: %@, reachable via: %@", buf, 0x20u);

            v60 = v77;
          }

          objc_autoreleasePoolPop(v60);
          -[HMDHAPAccessory _performOperation:linkType:operationBlock:errorBlock:](v61, "_performOperation:linkType:operationBlock:errorBlock:", a3, v94, v10, v11);

          v14 = v87;
          goto LABEL_49;
        }
        v38 = v94;
        v39 = self;
        v40 = a3;
        v41 = v10;
        v42 = v11;
      }
      -[HMDHAPAccessory _retrieveHAPAccessoryToPerformOperation:linkType:operationBlock:errorBlock:activity:](v39, "_retrieveHAPAccessoryToPerformOperation:linkType:operationBlock:errorBlock:activity:", v40, v38, v41, v42, v14);
LABEL_49:

LABEL_50:
      v13 = v85;
LABEL_67:

      goto LABEL_68;
    }
    v52 = (void *)MEMORY[0x1D17BA0A0]();
    v53 = self;
    HMFGetOSLogHandle();
    v54 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v82 = v52;
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory identifier](v53, "identifier");
      v56 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v86 = v13;
      v57 = off_1E89ABEC8[a3];
      *(_DWORD *)buf = 138543874;
      v96 = v55;
      v97 = 2112;
      v98 = v56;
      v99 = 2112;
      v100 = v57;
      _os_log_impl(&dword_1CD062000, v54, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ '%@' operation: BTLE link unreachable and there are other transports - trying the next link", buf, 0x20u);

      v13 = v86;
      v52 = v82;
    }

    objc_autoreleasePoolPop(v52);
    -[HMDHAPAccessory _performOperation:linkType:operationBlock:errorBlock:](v53, "_performOperation:linkType:operationBlock:errorBlock:", a3, v94, v10, v11);

    v14 = v87;
  }
  else
  {
    v84 = v13;
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      if ((unint64_t)a4 > 2)
        v32 = CFSTR("Undefined");
      else
        v32 = off_1E89ABEB0[a4];
      v51 = v32;
      *(_DWORD *)buf = 138543618;
      v96 = v31;
      v97 = 2112;
      v98 = v51;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@No accessory of linkType %@ or higher", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    -[HMDAccessory uuid](v29, "uuid");

    -[HMDHAPAccessory _handleUnreachableAccessoryToPerformOperation:operationBlock:errorBlock:](v29, "_handleUnreachableAccessoryToPerformOperation:operationBlock:errorBlock:", a3, v10, v11);
    v13 = v84;
    v14 = v87;
  }
LABEL_68:

}

void __92__HMDHAPAccessory_ThreadManagement__handleUpdatedServicesForThreadManagementWithCompletion___block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;

  v2 = objc_alloc(MEMORY[0x1E0D28540]);
  v3 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@, %s:%ld"), v4, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory+ThreadManagement.m", 96);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v2, "initWithName:", v5);

  objc_msgSend(v6, "begin");
  v7 = v6;
  objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedServicesForThreadManagementWithActivity:", v7);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(void))(v8 + 16))();
  __HMFActivityScopeLeave();

}

- (void)_handleUpdatedServicesForThreadManagementWithActivity:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[5];
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000701-0000-1000-8000-0026BB765291"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "characteristics");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __91__HMDHAPAccessory_ThreadManagement___handleUpdatedServicesForThreadManagementWithActivity___block_invoke;
    v13[3] = &unk_1E89BF110;
    v13[4] = self;
    objc_msgSend(v8, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v13);

    -[HMDAccessory uuid](self, "uuid");
    -[HMDHAPAccessory internalThreadCapabilities](self, "internalThreadCapabilities");

    -[HMDHAPAccessory internalThreadStatus](self, "internalThreadStatus");
    -[HMDHAPAccessory internalThreadActive](self, "internalThreadActive");

  }
  else
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v15 = v12;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEBUG, "%{public}@No thread management service found", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
  }

}

- (void)setReachability:(BOOL)a3 serverIdentifier:(id)a4 linkType:(int64_t)a5
{
  id v8;
  NSObject *v9;
  id v10;
  _QWORD v11[5];
  id v12;
  int64_t v13;
  BOOL v14;

  v8 = a4;
  -[HMDAccessory workQueue](self, "workQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __61__HMDHAPAccessory_setReachability_serverIdentifier_linkType___block_invoke;
  v11[3] = &unk_1E89BC570;
  v12 = v8;
  v13 = a5;
  v11[4] = self;
  v14 = a3;
  v10 = v8;
  dispatch_async(v9, v11);

}

- (void)_enableNotification:(BOOL)a3 forCharacteristics:(id)a4 message:(id)a5 clientIdentifier:(id)a6
{
  _BOOL8 v8;
  id v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  id v14;
  void *v15;
  void *v16;
  __CFString *v17;
  void *v18;
  void *v19;
  HMDHAPAccessory *v20;
  NSObject *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  HMDHAPAccessory *v30;
  NSObject *v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  void *v42;
  HMDHAPAccessory *v43;
  NSObject *v44;
  id v45;
  void *v46;
  void *v47;
  __CFString *v48;
  __CFString *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  HMDHAPAccessory *v53;
  NSObject *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t k;
  void *v62;
  HMDHAPAccessory *v63;
  NSObject *v64;
  id v65;
  void *v66;
  void *v67;
  __CFString *v68;
  __CFString *v69;
  unint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  NSObject *v74;
  id v75;
  void *v76;
  HMDHAPAccessory *v77;
  NSObject *v78;
  id v79;
  void *v80;
  void *v81;
  __int128 v82;
  dispatch_group_t v83;
  id v84;
  id v85;
  void *v86;
  id v87;
  void *v88;
  void *v89;
  dispatch_group_t group;
  HMDHAPAccessory *v91;
  void *v92;
  _QWORD block[4];
  id v94;
  id v95;
  id v96;
  id v97;
  uint64_t *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t *v101;
  id v102;
  BOOL v103;
  _QWORD v104[4];
  id v105;
  NSObject *v106;
  id v107;
  id v108;
  uint64_t *v109;
  id v110[2];
  BOOL v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  unint64_t v120;
  _QWORD aBlock[4];
  dispatch_group_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t *v125;
  id v126;
  _QWORD v127[4];
  id v128;
  BOOL v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _QWORD v134[4];
  id v135;
  HMDHAPAccessory *v136;
  id v137;
  id v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t, uint64_t);
  void (*v143)(uint64_t);
  id v144;
  _QWORD v145[5];
  id v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  char v150;
  _QWORD v151[3];
  char v152;
  id location;
  _BYTE v154[128];
  _BYTE v155[128];
  uint8_t v156[128];
  uint8_t buf[4];
  id v158;
  __int16 v159;
  void *v160;
  __int16 v161;
  __CFString *v162;
  __int16 v163;
  id v164;
  __int16 v165;
  void *v166;
  uint64_t v167;

  v8 = a3;
  v167 = *MEMORY[0x1E0C80C00];
  v85 = a4;
  v84 = a5;
  v10 = a6;
  -[HMDAccessory workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v11);

  objc_initWeak(&location, self);
  v151[0] = 0;
  v151[1] = v151;
  v151[2] = 0x2020000000;
  v152 = 0;
  v147 = 0;
  v148 = &v147;
  v149 = 0x2020000000;
  v150 = 0;
  v145[0] = 0;
  v145[1] = v145;
  v145[2] = 0x3032000000;
  v145[3] = __Block_byref_object_copy__48424;
  v145[4] = __Block_byref_object_dispose__48425;
  v146 = 0;
  v139 = 0;
  v140 = &v139;
  v141 = 0x3032000000;
  v142 = __Block_byref_object_copy__48424;
  v143 = __Block_byref_object_dispose__48425;
  v144 = 0;
  v83 = dispatch_group_create();
  -[HMDAccessory home](self, "home");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  v138 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D28540]), "initWithName:", CFSTR("Modify characteristic notifications"));
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v91 = self;
  HMFGetOSLogHandle();
  v13 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v138, "identifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "shortDescription");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v17 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v85, "shortDescription");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v158 = v14;
    v159 = 2114;
    v160 = v16;
    v161 = 2112;
    v162 = v17;
    v163 = 2112;
    v164 = v10;
    v165 = 2112;
    v166 = v18;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Setting notifications enabled to %@ for client identifier %@ for characteristics: %@", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v12);
  if (objc_msgSend(v85, "count"))
  {
    v87 = v85;
    v89 = v87;
    if (v10)
    {
      v89 = v87;
      if (!v8)
      {
        v134[0] = MEMORY[0x1E0C809B0];
        v134[1] = 3221225472;
        v134[2] = __83__HMDHAPAccessory__enableNotification_forCharacteristics_message_clientIdentifier___block_invoke;
        v134[3] = &unk_1E89AB838;
        v135 = v10;
        v136 = v91;
        v137 = v138;
        objc_msgSend(v87, "na_filter:", v134);
        v89 = (void *)objc_claimAutoreleasedReturnValue();

      }
    }
    if (v8 && objc_msgSend(v10, "hasPrefix:", CFSTR("com.apple.HomeKitDaemon")))
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = v91;
      HMFGetOSLogHandle();
      v21 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v138, "identifier");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "shortDescription");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v158 = v22;
        v159 = 2114;
        v160 = v24;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Updating cached characteristic notification registrations up front because client is homed", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v25 = v87;
      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v130, v156, 16);
      if (v26)
      {
        v27 = *(_QWORD *)v131;
        do
        {
          for (i = 0; i != v26; ++i)
          {
            if (*(_QWORD *)v131 != v27)
              objc_enumerationMutation(v25);
            objc_msgSend(*(id *)(*((_QWORD *)&v130 + 1) + 8 * i), "setNotificationEnabled:forClientIdentifier:", 1, v10);
          }
          v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v130, v156, 16);
        }
        while (v26);
      }

    }
    if (isWatch() || shouldSkipLocalAccessoryNotificationRegistration(v86, v91, v89))
    {
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = v91;
      HMFGetOSLogHandle();
      v31 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v32 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v138, "identifier");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "shortDescription");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = objc_msgSend(v87, "count");
        *(_DWORD *)buf = 138544130;
        v158 = v32;
        v159 = 2114;
        v160 = v34;
        v161 = 2048;
        v162 = (__CFString *)v35;
        v163 = 2112;
        v164 = v10;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Modifying %tu characteristic notifications on primary for client: %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v29);
      -[HMDHAPAccessory _remotelySetNotificationsEnabled:forCharacteristic:clientIdentifier:](v30, "_remotelySetNotificationsEnabled:forCharacteristic:clientIdentifier:", v8, v89, v10);
      v127[0] = MEMORY[0x1E0C809B0];
      v127[1] = 3221225472;
      v127[2] = __83__HMDHAPAccessory__enableNotification_forCharacteristics_message_clientIdentifier___block_invoke_511;
      v127[3] = &unk_1E89AB860;
      v129 = v8;
      v128 = v10;
      objc_msgSend(v87, "na_each:", v127);
      *((_BYTE *)v148 + 24) = 1;

      v89 = 0;
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __83__HMDHAPAccessory__enableNotification_forCharacteristics_message_clientIdentifier___block_invoke_2;
    aBlock[3] = &unk_1E89AB888;
    objc_copyWeak(&v126, &location);
    v123 = v145;
    v124 = v151;
    v125 = &v139;
    group = v83;
    v122 = group;
    v88 = _Block_copy(aBlock);
    v120 = 0;
    -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](v91, "preferredHAPAccessoryForOperation:linkType:", 4, &v120);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v36 = 138543618;
    v82 = v36;
    while (1)
    {
      if (!objc_msgSend(v89, "count", v82) || !v120)
      {
        -[HMDAccessory workQueue](v91, "workQueue");
        v74 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __83__HMDHAPAccessory__enableNotification_forCharacteristics_message_clientIdentifier___block_invoke_513;
        block[3] = &unk_1E89AB8D8;
        objc_copyWeak(&v102, &location);
        v94 = v84;
        v98 = &v147;
        v75 = v87;
        v103 = v8;
        v95 = v75;
        v99 = v151;
        v100 = v145;
        v96 = v10;
        v97 = v138;
        v101 = &v139;
        dispatch_group_notify(group, v74, block);

        objc_destroyWeak(&v102);
        objc_destroyWeak(&v126);

        goto LABEL_68;
      }
      dispatch_group_enter(group);
      objc_msgSend(v92, "server");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      if (v37)
        break;
      if (v120 == 2)
      {
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v38 = v87;
        v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v116, v155, 16);
        if (v39)
        {
          v40 = *(_QWORD *)v117;
          do
          {
            for (j = 0; j != v39; ++j)
            {
              if (*(_QWORD *)v117 != v40)
                objc_enumerationMutation(v38);
              objc_msgSend(*(id *)(*((_QWORD *)&v116 + 1) + 8 * j), "setNotificationEnabled:forClientIdentifier:", v8, v10);
            }
            v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v116, v155, 16);
          }
          while (v39);
        }

        *((_BYTE *)v148 + 24) = 1;
        dispatch_group_leave(group);
        -[HMDHAPAccessory _updateAccessoryTracking](v91, "_updateAccessoryTracking");
      }
      else
      {
        if (isFeatureMatteriPhoneOnlyPairingControlEnabled()
          && !v8
          && -[HMDHAPAccessory supportsCHIP](v91, "supportsCHIP"))
        {
          v52 = (void *)MEMORY[0x1D17BA0A0]();
          v53 = v91;
          HMFGetOSLogHandle();
          v54 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v55 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v138, "identifier");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v56, "shortDescription");
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v82;
            v158 = v55;
            v159 = 2114;
            v160 = v57;
            _os_log_impl(&dword_1CD062000, v54, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Not connecting to Matter accessory when disabling notifications", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v52);
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v58 = v87;
          v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v112, v154, 16);
          if (v59)
          {
            v60 = *(_QWORD *)v113;
            do
            {
              for (k = 0; k != v59; ++k)
              {
                if (*(_QWORD *)v113 != v60)
                  objc_enumerationMutation(v58);
                objc_msgSend(*(id *)(*((_QWORD *)&v112 + 1) + 8 * k), "setNotificationEnabled:forClientIdentifier:", 0, v10);
              }
              v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v112, v154, 16);
            }
            while (v59);
          }

          *((_BYTE *)v148 + 24) = 1;
LABEL_44:
          dispatch_group_leave(group);
          goto LABEL_63;
        }
        v62 = (void *)MEMORY[0x1D17BA0A0]();
        v63 = v91;
        HMFGetOSLogHandle();
        v64 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v65 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v138, "identifier");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v66, "shortDescription");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          v68 = CFSTR("Undefined");
          if (v120 <= 2)
            v68 = off_1E89ABEB0[v120];
          v69 = v68;
          *(_DWORD *)buf = 138543874;
          v158 = v65;
          v159 = 2114;
          v160 = v67;
          v161 = 2112;
          v162 = v69;
          _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Retrieving HAP accessory for linkType: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v62);
        v70 = v120;
        -[HMDAccessory workQueue](v63, "workQueue");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        v104[0] = MEMORY[0x1E0C809B0];
        v104[1] = 3221225472;
        v104[2] = __83__HMDHAPAccessory__enableNotification_forCharacteristics_message_clientIdentifier___block_invoke_512;
        v104[3] = &unk_1E89AB8B0;
        objc_copyWeak(v110, &location);
        v72 = v138;
        v110[1] = (id)v120;
        v105 = v72;
        v109 = &v139;
        v106 = group;
        v111 = v8;
        v107 = v89;
        v108 = v88;
        objc_msgSend(v86, "retrieveHAPAccessoryForHMDAccessory:linkType:forceRetrieve:queue:completion:", v63, v70, 0, v71, v104);

        objc_destroyWeak(v110);
      }
LABEL_63:
      -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](v91, "preferredHAPAccessoryForOperation:linkType:", 4, &v120);
      v73 = objc_claimAutoreleasedReturnValue();

      v92 = (void *)v73;
    }
    if ((objc_msgSend(v92, "isReachable") & 1) != 0)
    {
      -[HMDHAPAccessory _setNotificationsEnabled:forCharacteristics:hapAccessory:activity:completion:](v91, "_setNotificationsEnabled:forCharacteristics:hapAccessory:activity:completion:", v8, v89, v92, v138, v88);
      goto LABEL_63;
    }
    v42 = (void *)MEMORY[0x1D17BA0A0]();
    v43 = v91;
    HMFGetOSLogHandle();
    v44 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v45 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v138, "identifier");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "shortDescription");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = CFSTR("Undefined");
      if (v120 <= 2)
        v48 = off_1E89ABEB0[v120];
      v49 = v48;
      *(_DWORD *)buf = 138543874;
      v158 = v45;
      v159 = 2114;
      v160 = v47;
      v161 = 2112;
      v162 = v49;
      _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Not modifying characteristic notifications using linkType %@: no accessory server found", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v42);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v50 = objc_claimAutoreleasedReturnValue();
    v51 = (void *)v140[5];
    v140[5] = v50;

    goto LABEL_44;
  }
  v76 = (void *)MEMORY[0x1D17BA0A0]();
  v77 = v91;
  HMFGetOSLogHandle();
  v78 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v79 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v138, "identifier");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "shortDescription");
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v158 = v79;
    v159 = 2114;
    v160 = v81;
    _os_log_impl(&dword_1CD062000, v78, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] No characteristics to modify notifications for", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v76);
  objc_msgSend(v84, "respondWithSuccess");
LABEL_68:
  __HMFActivityScopeLeave();

  _Block_object_dispose(&v139, 8);
  _Block_object_dispose(v145, 8);

  _Block_object_dispose(&v147, 8);
  _Block_object_dispose(v151, 8);
  objc_destroyWeak(&location);

}

- (void)_setNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 hapAccessory:(id)a5 activity:(id)a6 completion:(id)a7
{
  _BOOL8 v10;
  id v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHAPAccessory *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHAPAccessory *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  HMDHAPAccessory *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *context;
  id v51;
  id v52;
  id v53;
  _QWORD v54[4];
  id v55;
  id v56;
  id v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint8_t buf[4];
  void *v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  id v67;
  __int16 v68;
  void *v69;
  _BYTE v70[128];
  uint64_t v71;

  v10 = a3;
  v71 = *MEMORY[0x1E0C80C00];
  v51 = a4;
  v12 = a5;
  v53 = a6;
  v52 = a7;
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "identifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "shortDescription");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v63 = v16;
    v64 = 2114;
    v65 = v18;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Modifying characteristic notifications on HAPAccessory", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  if (-[HMDHAPAccessory canWakeUpViaWoL](v14, "canWakeUpViaWoL") && -[HMDHAPAccessory isSuspended](v14, "isSuspended"))
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = v14;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "identifier");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "shortDescription");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory identifier](v20, "identifier");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v63 = v22;
      v64 = 2114;
      v65 = v24;
      v66 = 2112;
      v67 = v25;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Not modifying characteristic notifications because accessory is suspended: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v19);
    (*((void (**)(id, _QWORD, _QWORD))v52 + 2))(v52, MEMORY[0x1E0C9AA60], 0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v27 = v51;
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v58, v70, 16);
    if (v28)
    {
      v29 = *(_QWORD *)v59;
      while (2)
      {
        for (i = 0; i != v28; ++i)
        {
          if (*(_QWORD *)v59 != v29)
            objc_enumerationMutation(v27);
          v31 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * i);
          objc_msgSend(v31, "characteristicForHAPAccessory:", v12);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v32)
          {
            context = (void *)MEMORY[0x1D17BA0A0]();
            v35 = v14;
            HMFGetOSLogHandle();
            v36 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "identifier");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v37, "shortDescription");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "server");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v39, "identifier");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v63 = v49;
              v64 = 2114;
              v65 = v38;
              v66 = 2112;
              v67 = v31;
              v68 = 2112;
              v69 = v40;
              _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] Failed to modify characteristic notifications: cannot map %@ to a HAPCharacteristic for server %@", buf, 0x2Au);

            }
            objc_autoreleasePoolPop(context);
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            (*((void (**)(id, _QWORD, void *))v52 + 2))(v52, 0, v41);

            v33 = v27;
            goto LABEL_23;
          }
          objc_msgSend(v26, "addObject:", v32);

        }
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v58, v70, 16);
        if (v28)
          continue;
        break;
      }
    }

    objc_msgSend(v12, "server");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (v33)
    {
      objc_initWeak((id *)buf, v14);
      v54[0] = MEMORY[0x1E0C809B0];
      v54[1] = 3221225472;
      v54[2] = __96__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_hapAccessory_activity_completion___block_invoke;
      v54[3] = &unk_1E89B3478;
      objc_copyWeak(&v57, (id *)buf);
      v55 = v53;
      v56 = v52;
      -[HMDAccessory workQueue](v14, "workQueue");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "enableEvents:forCharacteristics:withCompletionHandler:queue:", v10, v26, v54, v34);

      if (objc_msgSend(v33, "linkType") == 2)
        -[HMDHAPAccessory _enableBroadcastNotifications:hapAccessory:forCharacteristics:](v14, "_enableBroadcastNotifications:hapAccessory:forCharacteristics:", v10, v12, v27);

      objc_destroyWeak(&v57);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      v42 = (void *)MEMORY[0x1D17BA0A0]();
      v43 = v14;
      HMFGetOSLogHandle();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "identifier");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "shortDescription");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v63 = v45;
        v64 = 2114;
        v65 = v47;
        v66 = 2112;
        v67 = v12;
        _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] Failed to modify characteristic notifications: no server found for HAPAccessory: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v42);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, void *))v52 + 2))(v52, 0, v48);

      v33 = 0;
    }
LABEL_23:

  }
}

void __100__HMDHAPAccessory__readCharacteristicValues_hapAccessory_source_message_logEvent_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  double v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  id v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v6)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v8 = v5;
    v7 = (void *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    if (v7)
    {
      v9 = *(_QWORD *)v26;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v26 != v9)
            objc_enumerationMutation(v8);
          v11 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v11, "error", (_QWORD)v25);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          if (v12)
          {
            objc_msgSend(v11, "error");
            v7 = (void *)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        v7 = (void *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_12:

  }
  objc_msgSend(MEMORY[0x1E0D33490], "currentTime", (_QWORD)v25);
  objc_msgSend(*(id *)(a1 + 32), "setLocalDurationInMilliseconds:", (uint64_t)((v13 - *(double *)(a1 + 88)) * 1000.0));
  objc_msgSend(*(id *)(a1 + 40), "submitLogEvent:error:", *(_QWORD *)(a1 + 32), v7);
  v14 = *(void **)(a1 + 40);
  v15 = *(id *)(a1 + 48);
  objc_msgSend(v14, "uuid");

  objc_msgSend(v7, "domain");
  objc_msgSend(v7, "code");

  v16 = v6;
  v17 = v16;
  if (v6)
  {
    v6 = v16;
    if ((objc_msgSend(v16, "isHMError") & 1) == 0)
    {
      if (objc_msgSend(v17, "isHAPError"))
      {
        v18 = objc_msgSend(v17, "code");
        if (v18 > 0x20)
          v19 = 52;
        else
          v19 = qword_1CDB8F990[v18];
      }
      else
      {
        v19 = 74;
      }
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:underlyingError:", v19, CFSTR("Read Failed."), 0, 0, v17);
      v6 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "populateHMDCharacteristicResponses:hapResponses:mapping:overallError:requests:", *(_QWORD *)(a1 + 56), v5, *(_QWORD *)(a1 + 64), v6, *(_QWORD *)(a1 + 72));
  v20 = *(_QWORD *)(a1 + 80);
  if (v20)
  {
    (*(void (**)(uint64_t, _QWORD))(v20 + 16))(v20, *(_QWORD *)(a1 + 56));
  }
  else if (v6)
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v24;
      v31 = 2112;
      v32 = v6;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to read values for characteristics: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
  }

}

void __92__HMDHAPAccessory_readCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void (**v4)(_QWORD, _QWORD);
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  void *v9;
  id v10;
  void (**v11)(_QWORD, _QWORD);

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "begin");
  v4 = *(void (***)(_QWORD, _QWORD))(a1 + 48);
  if (v4)
  {
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
    {
      v6 = MEMORY[0x1E0C809B0];
      v7 = 3221225472;
      v8 = __92__HMDHAPAccessory_readCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_2;
      v9 = &unk_1E89C1D68;
      v11 = v4;
      v10 = v3;
      dispatch_async(v5, &v6);

    }
    else
    {
      ((void (**)(_QWORD, id))v4)[2](v4, v3);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "end", v6, v7, v8, v9);
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

- (void)enableNotification:(BOOL)a3 forCharacteristics:(id)a4 message:(id)a5 clientIdentifier:(id)a6
{
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  _QWORD block[5];
  id v18;
  id v19;
  id v20;
  BOOL v21;

  v10 = a4;
  v11 = a5;
  v12 = a6;
  -[HMDAccessory workQueue](self, "workQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __82__HMDHAPAccessory_enableNotification_forCharacteristics_message_clientIdentifier___block_invoke;
  block[3] = &unk_1E89BC5E8;
  v21 = a3;
  block[4] = self;
  v18 = v10;
  v19 = v11;
  v20 = v12;
  v14 = v12;
  v15 = v11;
  v16 = v10;
  dispatch_async(v13, block);

}

- (void)checkHAPSessionRestore
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __41__HMDHAPAccessory_checkHAPSessionRestore__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 message:(id)a5 queue:(id)a6 logEvent:(id)a7 completionHandler:(id)a8
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  id v38;
  id v39[2];
  id location;
  _QWORD aBlock[4];
  id v42;
  id v43;
  id v44;
  id v45;

  v15 = a3;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = objc_alloc(MEMORY[0x1E0D28540]);
  v21 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "stringWithFormat:", CFSTR("%@, %s:%ld"), v22, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory.m", 6335);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = (id)objc_msgSend(v20, "initWithName:", v23);

  v24 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __92__HMDHAPAccessory_readCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke;
  aBlock[3] = &unk_1E89BF138;
  v25 = v45;
  v42 = v25;
  v26 = v19;
  v44 = v26;
  v33 = v17;
  v43 = v33;
  v27 = _Block_copy(aBlock);
  objc_initWeak(&location, self);
  v34[0] = v24;
  v34[1] = 3221225472;
  v34[2] = __92__HMDHAPAccessory_readCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_3;
  v34[3] = &unk_1E89AB4D0;
  objc_copyWeak(v39, &location);
  v28 = v18;
  v35 = v28;
  v29 = v15;
  v36 = v29;
  v39[1] = (id)a4;
  v30 = v16;
  v37 = v30;
  v31 = v27;
  v38 = v31;
  v32 = _Block_copy(v34);
  -[HMDHAPAccessory _wakeAccessoryIfNeededForCharacteristicRequests:source:activity:completion:](self, "_wakeAccessoryIfNeededForCharacteristicRequests:source:activity:completion:", v29, a4, v25, v32);

  objc_destroyWeak(v39);
  objc_destroyWeak(&location);

  __HMFActivityScopeLeave();
}

- (void)_wakeAccessoryIfNeededForCharacteristicRequests:(id)a3 source:(unint64_t)a4 activity:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  BOOL v13;
  id v14;
  void *v15;
  HMDHAPAccessory *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  unsigned __int8 v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a5;
  v12 = a6;
  if (-[HMDHAPAccessory canWakeViaCustomWoBLE](self, "canWakeViaCustomWoBLE"))
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __94__HMDHAPAccessory__wakeAccessoryIfNeededForCharacteristicRequests_source_activity_completion___block_invoke;
    v22[3] = &unk_1E89B8D30;
    v22[4] = self;
    v23 = v11;
    v24 = v12;
    -[HMDHAPAccessory wakeOrScanForSuspendedAccessoryForRequests:source:completion:](self, "wakeOrScanForSuspendedAccessoryForRequests:source:completion:", v10, a4, v22);

  }
  else
  {
    v21 = 0;
    v20 = 0;
    v13 = -[HMDHAPAccessory canProceedWithRequests:suspended:error:](self, "canProceedWithRequests:suspended:error:", v10, &v21, &v20);
    v14 = v20;
    if (!v13)
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAccessory identifier](v16, "identifier");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v26 = v18;
        v27 = 2112;
        v28 = v19;
        v29 = 2112;
        v30 = v10;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ is suspended and should not wake up for requests: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v15);
    }
    (*((void (**)(id, _QWORD, id))v12 + 2))(v12, v21, v14);

  }
}

void __92__HMDHAPAccessory_readCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_3(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t aBlock;
  uint64_t v12;
  void (*v13)(uint64_t, void *);
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19[2];
  char v20;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  aBlock = MEMORY[0x1E0C809B0];
  v12 = 3221225472;
  v13 = __92__HMDHAPAccessory_readCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_4;
  v14 = &unk_1E89AB4A8;
  objc_copyWeak(v19, (id *)(a1 + 64));
  v15 = *(id *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = *(void **)(a1 + 72);
  v16 = v7;
  v19[1] = v8;
  v17 = *(id *)(a1 + 48);
  v20 = a2;
  v18 = *(id *)(a1 + 56);
  v9 = _Block_copy(&aBlock);
  v10 = v9;
  if (v5)
    (*((void (**)(void *, id))v9 + 2))(v9, v5);
  else
    objc_msgSend(WeakRetained, "_readCharacteristicValues:localOperationRequired:source:message:logEvent:completionHandler:errorBlock:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), v9, aBlock, v12, v13, v14, v15, v16, v17);

  objc_destroyWeak(v19);
}

- (BOOL)canProceedWithRequests:(id)a3 suspended:(BOOL *)a4 error:(id *)a5
{
  id v8;
  void *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  BOOL v12;

  v8 = a3;
  if (-[HMDHAPAccessory canWakeUpViaWoL](self, "canWakeUpViaWoL")
    && -[HMDHAPAccessory isSuspended](self, "isSuspended"))
  {
    -[HMDAccessory home](self, "home");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDHAPAccessory residentCanWakeForWOL](self, "residentCanWakeForWOL");
    if (-[HMDAccessory isReachable](self, "isReachable"))
    {
      v11 = 1;
      if (!v10)
      {
LABEL_9:
        if (!-[HMDHAPAccessory canWakeBasedOnCharacteristicRequests:](self, "canWakeBasedOnCharacteristicRequests:", v8))
        {
          if (a5)
          {
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 103);
            *a5 = (id)objc_claimAutoreleasedReturnValue();
          }
          v12 = 0;
          if (a4)
            *a4 = 1;
          goto LABEL_15;
        }
LABEL_10:
        v12 = 1;
LABEL_15:

        goto LABEL_16;
      }
    }
    else
    {
      v11 = -[HMDHAPAccessory isReachableViaBSP](self, "isReachableViaBSP");
      if (!v10)
        goto LABEL_9;
    }
    if ((objc_msgSend(v9, "isCurrentDeviceAvailableResident") | v11) != 1)
      goto LABEL_10;
    goto LABEL_9;
  }
  v12 = 1;
LABEL_16:

  return v12;
}

- (BOOL)canWakeViaCustomWoBLE
{
  void *v3;
  BOOL v4;

  if (-[HMDAccessory isReachable](self, "isReachable")
    || isWatch()
    || !-[HMDHAPAccessory custom1WoBLE](self, "custom1WoBLE"))
  {
    return 0;
  }
  -[HMDAccessory home](self, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "homeLocation") == 1;

  return v4;
}

- (void)_readCharacteristicValues:(id)a3 localOperationRequired:(BOOL)a4 source:(unint64_t)a5 message:(id)a6 logEvent:(id)a7 completionHandler:(id)a8 errorBlock:(id)a9
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  _QWORD block[5];
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  unint64_t v38;
  BOOL v39;
  id v40;

  v15 = a3;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  v20 = objc_alloc(MEMORY[0x1E0D28540]);
  v21 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "stringWithFormat:", CFSTR("%@, %s:%ld"), v22, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory.m", 6504);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = (id)objc_msgSend(v20, "initWithName:", v23);

  -[HMDAccessory workQueue](self, "workQueue");
  v24 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __121__HMDHAPAccessory__readCharacteristicValues_localOperationRequired_source_message_logEvent_completionHandler_errorBlock___block_invoke;
  block[3] = &unk_1E89AB590;
  v39 = a4;
  block[4] = self;
  v32 = v15;
  v33 = v16;
  v34 = v17;
  v38 = a5;
  v36 = v18;
  v35 = v40;
  v37 = v19;
  v25 = v19;
  v26 = v18;
  v27 = v17;
  v28 = v16;
  v29 = v15;
  dispatch_async(v24, block);

  __HMFActivityScopeLeave();
}

- (HMDService)primaryService
{
  HMDService *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_primaryService;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (NSSet)identifiersForBridgedAccessories
{
  NSSet *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_identifiersForBridgedAccessories;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (NSSet)cameraProfiles
{
  NSMutableSet *accessoryProfiles;
  void *v4;

  os_unfair_recursive_lock_lock_with_options();
  accessoryProfiles = self->super._accessoryProfiles;
  if (accessoryProfiles)
    -[NSMutableSet objectsPassingTest:](accessoryProfiles, "objectsPassingTest:", &__block_literal_global_1566);
  else
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_recursive_lock_unlock();
  return (NSSet *)v4;
}

- (BOOL)isSecuritySessionOpen
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  BOOL v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v8, "hapAccessory");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "server");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v10, "isSecuritySessionOpen") && objc_msgSend(v8, "linkType") == 1)
        {
          objc_msgSend(v8, "serverIdentifier");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory identifier](self, "identifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v11, "isEqual:", v12);

          if ((v13 & 1) != 0)
          {
            v14 = 1;
            goto LABEL_14;
          }
        }
        else
        {

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v5);
  }
  v14 = 0;
LABEL_14:

  return v14;
}

- (void)requestResource:(id)a3 queue:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void (**v14)(void *, _QWORD);
  void *v15;
  HMDHAPAccessory *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *);
  void *v22;
  HMDHAPAccessory *v23;
  id v24;
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v19 = MEMORY[0x1E0C809B0];
  v20 = 3221225472;
  v21 = __59__HMDHAPAccessory_requestResource_queue_completionHandler___block_invoke;
  v22 = &unk_1E89C25C8;
  v23 = self;
  v11 = v10;
  v26 = v11;
  v12 = v8;
  v24 = v12;
  v13 = v9;
  v25 = v13;
  v14 = (void (**)(void *, _QWORD))_Block_copy(&v19);
  if (-[HMDHAPAccessory isSecuritySessionOpen](self, "isSecuritySessionOpen", v19, v20, v21, v22, v23))
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Not establishing local HAP connection for resource request because security session is already open", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    v14[2](v14, 0);
  }
  else
  {
    -[HMDHAPAccessory establishLocalHAPConnectionWithQueue:completion:](self, "establishLocalHAPConnectionWithQueue:completion:", v13, v14);
  }

}

uint64_t __47__HMDHAPAccessory_isIPSecureSessionEstablished__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = a2;
  if (objc_msgSend(v2, "linkType") == 1)
  {
    objc_msgSend(v2, "hapAccessory");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "server");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = v4;
    else
      v5 = 0;
    v6 = v5;

    v7 = objc_msgSend(v6, "isSecuritySessionOpen");
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (NSNumber)hapInstanceId
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0D163A8];
  -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "instanceIDForUniqueIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSNumber *)v4;
}

- (void)establishLocalHAPConnectionWithQueue:(id)a3 completion:(id)a4
{
  id v6;
  void (**v7)(id, id);
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  HMDHAPAccessory *v19;
  NSObject *v20;
  void *v21;
  uint8_t v22[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(id, id))a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v22 = 138543362;
    *(_QWORD *)&v22[4] = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Establishing local HAP connection", v22, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDAccessory home](v9, "home");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    *(_QWORD *)v22 = 0;
    -[HMDHAPAccessory bridge](v9, "bridge");
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    if (v13)
      v15 = (void *)v13;
    else
      v15 = v9;
    v16 = v15;

    v17 = (id)objc_msgSend(v16, "preferredHAPAccessoryForOperation:linkType:", 10, v22);
    objc_msgSend(v12, "retrieveHAPAccessoryForHMDAccessory:linkType:forceRetrieve:queue:completion:", v16, *(_QWORD *)v22, 0, v6, v7);
  }
  else
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = v9;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v22 = 138543362;
      *(_QWORD *)&v22[4] = v21;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Cannot establish local HAP connection because home reference is nil", v22, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    v7[2](v7, v16);
  }

}

- (id)runtimeState
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  objc_super v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17.receiver = self;
  v17.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory runtimeState](&v17, sel_runtimeState);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "mutableCopy");

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDAccessory accessoryProfiles](self, "accessoryProfiles", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "runtimeState");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v10, "count"))
          objc_msgSend(v4, "addEntriesFromDictionary:", v10);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v18, 16);
    }
    while (v7);
  }

  v11 = (void *)objc_msgSend(v4, "copy");
  return v11;
}

void __61__HMDHAPAccessory_setReachability_serverIdentifier_linkType___block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "transportInformationInstances");
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (!*(_QWORD *)(a1 + 48)
          || objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "linkType", (_QWORD)v11) == *(_QWORD *)(a1 + 48))
        {
          v8 = *(void **)(a1 + 40);
          if (!v8
            || (objc_msgSend(v7, "serverIdentifier"),
                v9 = (void *)objc_claimAutoreleasedReturnValue(),
                v10 = objc_msgSend(v8, "isEqualToString:", v9),
                v9,
                v10))
          {
            objc_msgSend(v7, "setReachable:", *(unsigned __int8 *)(a1 + 56), (_QWORD)v11);
            objc_msgSend(*(id *)(a1 + 32), "_updateReachability");
            goto LABEL_14;
          }
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_14:

}

void __59__HMDHAPAccessory_requestResource_queue_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543362;
      v17 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to establish local HAP connection for resource read", (uint8_t *)&v16, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "anyIPServer");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      objc_msgSend(v8, "requestResource:queue:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543362;
        v17 = v13;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to find a HAP accessory server for resource read", (uint8_t *)&v16, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
      v14 = *(_QWORD *)(a1 + 56);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v14 + 16))(v14, 0, v15);

    }
  }

}

- (void)updateActiveDisconnectOnIdleTimeout:(double)a3
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory bridge](self, "bridge");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    objc_msgSend(v5, "getPrimaryHAPAccessories");
  else
    -[HMDHAPAccessory getPrimaryHAPAccessories](self, "getPrimaryHAPAccessories");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_recursive_lock_lock_with_options();
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v8);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "server", (_QWORD)v13);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "updateActiveDisconnectOnIdleTimeout:", a3);

      }
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v9);
  }

  os_unfair_recursive_lock_unlock();
}

- (BOOL)_handleUpdatedServicesForWiFiManagementController
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  HMDWiFiManagementController *v16;
  void *v17;
  HMDWiFiManagementController *v18;
  void *v19;
  HMDHAPAccessory *v20;
  NSObject *v21;
  void *v22;
  BOOL v23;
  int v25;
  uint64_t v26;
  __int16 v27;
  const __CFString *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory wiFiManagementController](self, "wiFiManagementController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!-[HMDHAPAccessory isPrimary](self, "isPrimary")
    || (-[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("0000022A-0000-1000-8000-0026BB765291")), (v4 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    if (v3)
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543362;
        v26 = (uint64_t)v22;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEBUG, "%{public}@Removing Wi-Fi Management Controller", (uint8_t *)&v25, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      -[HMDHAPAccessory setWiFiManagementController:](v20, "setWiFiManagementController:", 0);
      v5 = 0;
      goto LABEL_14;
    }
    v5 = 0;
LABEL_16:
    v23 = 0;
    goto LABEL_17;
  }
  v5 = (void *)v4;
  if (v3)
  {
    objc_msgSend(v3, "service");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v7, "isEqual:", v8);

    if ((v9 & 1) != 0)
      goto LABEL_16;
  }
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    v15 = CFSTR("Replacing");
    if (!v3)
      v15 = CFSTR("Creating");
    v25 = 138543618;
    v26 = v13;
    v27 = 2112;
    v28 = v15;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEBUG, "%{public}@%@ Wi-Fi Management Controller", (uint8_t *)&v25, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  v16 = [HMDWiFiManagementController alloc];
  -[HMDAccessory workQueue](v11, "workQueue");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HMDWiFiManagementController initWithAccessory:wiFiTransportService:workQueue:](v16, "initWithAccessory:wiFiTransportService:workQueue:", v11, v5, v17);
  -[HMDHAPAccessory setWiFiManagementController:](v11, "setWiFiManagementController:", v18);

LABEL_14:
  v23 = 1;
LABEL_17:

  return v23;
}

- (BOOL)isAutomaticThirdPartyAccessorySoftwareUpdateEnabled
{
  void *v2;
  char v3;

  -[HMDAccessory home](self, "home");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isAutomaticThirdPartyAccessorySoftwareUpdateEnabled");

  return v3;
}

- (BOOL)hasResidentWithFirmwareUpdatesSupport
{
  void *v2;
  void *v3;
  char v4;

  -[HMDAccessory home](self, "home");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "primaryResident");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "supportsResidentFirmwareUpdate");

  return v4;
}

- (BOOL)supportsFirmwareUpdate
{
  void *v2;
  BOOL v3;

  -[HMDHAPAccessory firmwareUpdateProfile](self, "firmwareUpdateProfile");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (unint64_t)identityType
{
  void *v3;
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;

  -[HMDAccessory manufacturer](self, "manufacturer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("Apple Inc.")) & 1) != 0)
  {
    -[HMDAccessory model](self, "model");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
      return 2;
  }
  else
  {

  }
  -[HMDAccessory productData](self, "productData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    return 1;
  if ((_os_feature_enabled_impl() & 1) == 0
    && !CFPreferencesGetAppBooleanValue(CFSTR("MatterOTA"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0)|| !-[HMDHAPAccessory supportsCHIP](self, "supportsCHIP"))
  {
    return 0;
  }
  -[HMDHAPAccessory chipStorage](self, "chipStorage");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "vendorID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHAPAccessory chipStorage](self, "chipStorage");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "productID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
    v11 = v8 == 0;
  else
    v11 = 1;
  if (v11)
    v5 = 0;
  else
    v5 = 3;

  return v5;
}

- (BOOL)isAppleAccessory
{
  return -[HMDHAPAccessory identityType](self, "identityType") == 2;
}

- (BOOL)_handleUpdatedServicesForFirmwareUpdateProfile:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  HMDAccessoryFirmwareUpdateProfile *v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  uint64_t v17;
  HMDHAPAccessory *v18;
  const __CFString *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  NSObject *v24;
  void *v25;
  HMDHAPAccessory *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHAPAccessory *v30;
  void *v31;
  HMDAccessoryFirmwareUpdateProfile *v32;
  void *v33;
  void *v34;
  HMDAccessoryFirmwareUpdateProfile *v35;
  void *v36;
  char v37;
  void *v38;
  HMDHAPAccessory *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v45;
  id v46;
  uint64_t v47;
  id obj;
  id obja;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  HMDAccessoryFirmwareUpdateProfile *v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "supportsFirmwareUpdate");

  if ((v6 & 1) != 0)
  {
    -[HMDAccessory home](self, "home");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "homeManager");
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v46 = v4;
    obj = v4;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v51;
      v11 = CFSTR("00000236-0000-1000-8000-0026BB765291");
      while (2)
      {
        v12 = 0;
        v47 = v9;
        do
        {
          if (*(_QWORD *)v51 != v10)
            objc_enumerationMutation(obj);
          v13 = *(HMDAccessoryFirmwareUpdateProfile **)(*((_QWORD *)&v50 + 1) + 8 * v12);
          v14 = (void *)MEMORY[0x1D17BA0A0]();
          v15 = self;
          HMFGetOSLogHandle();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v17 = v10;
            v18 = self;
            v19 = v11;
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDAccessoryFirmwareUpdateProfile serviceType](v13, "serviceType");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v55 = v20;
            v56 = 2112;
            v57 = v13;
            v58 = 2112;
            v59 = v21;
            _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Found service: %@, %@", buf, 0x20u);

            v11 = v19;
            self = v18;
            v10 = v17;
            v9 = v47;
          }

          objc_autoreleasePoolPop(v14);
          -[HMDAccessoryFirmwareUpdateProfile serviceType](v13, "serviceType");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "isEqualToString:", v11);

          if (v23)
          {
            v32 = [HMDAccessoryFirmwareUpdateProfile alloc];
            -[HMDAccessoryFirmwareUpdateProfile accessory](v13, "accessory");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDAccessory workQueue](v15, "workQueue");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = -[HMDAccessoryFirmwareUpdateProfile initWithAccessory:service:workQueue:](v32, "initWithAccessory:service:workQueue:", v33, v13, v34);

            -[HMDHAPAccessory firmwareUpdateProfile](v15, "firmwareUpdateProfile");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            v37 = HMFEqualObjects();

            v28 = v45;
            if ((v37 & 1) == 0)
            {
              v38 = (void *)MEMORY[0x1D17BA0A0]();
              v39 = v15;
              HMFGetOSLogHandle();
              v40 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v55 = v41;
                v56 = 2112;
                v57 = v35;
                _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@Adding new accessory firmware update profile: %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v38);
              -[HMDHAPAccessory setFirmwareUpdateProfile:](v39, "setFirmwareUpdateProfile:", v35);
              -[HMDHAPAccessory firmwareUpdateProfile](v39, "firmwareUpdateProfile");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "configure");

              objc_msgSend(v45, "accessoryFirmwareUpdateManager");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v43, "registerAccessory:", v39);

            }
            LOBYTE(v24) = v37 ^ 1;

            v4 = v46;
            goto LABEL_25;
          }
          ++v12;
        }
        while (v9 != v12);
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
        if (v9)
          continue;
        break;
      }
    }

    -[HMDHAPAccessory firmwareUpdateProfile](self, "firmwareUpdateProfile");
    v24 = objc_claimAutoreleasedReturnValue();

    if (v24)
    {
      v25 = (void *)MEMORY[0x1D17BA0A0]();
      v26 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v55 = v27;
        _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Update service not available; removing third-party firmware update profile",
          buf,
          0xCu);

      }
      objc_autoreleasePoolPop(v25);
      -[HMDHAPAccessory setFirmwareUpdateProfile:](v26, "setFirmwareUpdateProfile:", 0);
      -[HMDHAPAccessory firmwareUpdateManager](v26, "firmwareUpdateManager");
      obja = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obja, "unregisterAccessory:", v26);
      LOBYTE(v24) = 0;
      v28 = v45;
      v4 = v46;

    }
    else
    {
      v28 = v45;
      v4 = v46;
    }
LABEL_25:

  }
  else
  {
    v29 = (void *)MEMORY[0x1D17BA0A0]();
    v30 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v55 = v31;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Accessory firmware update feature is not supported on this device", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v29);
    LOBYTE(v24) = 0;
  }

  return (char)v24;
}

- (void)_handleStartUpdate:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __54__HMDHAPAccessory_FirmwareUpdate___handleStartUpdate___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_startManualUpdateFromBestSuitableDevice:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  id v13;
  HMDHAPAccessory *v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory home](self, "home");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isCurrentDeviceConfirmedPrimaryResident") & 1) != 0
    || (objc_msgSend(v5, "isResidentSupported") & 1) == 0)
  {
    -[HMDHAPAccessory _startUpdateFromCurrentDeviceWithRequest:](self, "_startUpdateFromCurrentDeviceWithRequest:", v4);
  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v16 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Query for available primary resident to perform the update", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v14 = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v14, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __76__HMDHAPAccessory_FirmwareUpdate___startManualUpdateFromBestSuitableDevice___block_invoke;
    v11[3] = &unk_1E89C18F8;
    v11[4] = v7;
    v12 = v5;
    v13 = v4;
    objc_msgSend(v12, "queryPrimaryResidentReachabilityForAccessories:completion:", v10, v11);

  }
}

- (void)_startUpdateFromCurrentDeviceWithRequest:(id)a3
{
  id v4;
  NSObject *v5;
  BOOL v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  HMDHAPAccessory *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = -[HMDAccessory isReachable](self, "isReachable");
  if (((_os_feature_enabled_impl() & 1) != 0
     || CFPreferencesGetAppBooleanValue(CFSTR("MatterOTA"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0))&& -[HMDHAPAccessory supportsCHIP](self, "supportsCHIP")&& !-[HMDAccessory isReachable](self, "isReachable"))
  {
    -[HMDAccessory home](self, "home");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "homeManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "matterSoftwareUpdateProviderDelegate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "canEstablishConnectionForHMDHAPAccessory:", self);

    if ((v14 & 1) != 0)
      goto LABEL_6;
  }
  else if (v6)
  {
LABEL_6:
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543362;
      v22 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempting to start firmware update session for reachable accessory", (uint8_t *)&v21, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    -[HMDHAPAccessory _startUpdateSessionWithRequest:](v8, "_startUpdateSessionWithRequest:", v4);
    goto LABEL_13;
  }
  v15 = (void *)MEMORY[0x1D17BA0A0]();
  v16 = self;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory logIdentifier](v16, "logIdentifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v18;
    v23 = 2112;
    v24 = v19;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to start update for accessory %@ because it is not reachable and we don't have a resident to delegate to", (uint8_t *)&v21, 0x16u);

  }
  objc_autoreleasePoolPop(v15);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v20);

LABEL_13:
}

- (void)_startUpdateSessionWithRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  HMDHAPAccessory *v20;
  void *v21;
  HMDHAPAccessory *v22;
  NSObject *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  HMDHAPAccessory *v30;
  NSObject *v31;
  void *v32;
  HMDHAPAccessory *v33;
  HMDHAPAccessory *v34;
  id v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  HMDHAPAccessory *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", *MEMORY[0x1E0CB9C88]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3710], "deserializeObjectWithData:allowedClass:frameworkClasses:", v5, objc_opt_class(), &unk_1E8B31D10);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      v21 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = self;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v37 = v24;
        _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Invalid software update in message payload", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v21);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 22);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v8);
      goto LABEL_27;
    }
    -[HMDHAPAccessory firmwareUpdateManager](self, "firmwareUpdateManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "sessionForAccessory:", self);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
      goto LABEL_4;
    -[HMDHAPAccessory firmwareUpdateManager](self, "firmwareUpdateManager");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "UARPAccessoryForHMDAccessory:", self);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      -[HMDHAPAccessory firmwareUpdateManager](self, "firmwareUpdateManager");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "addSessionForUARPAccessory:", v8);
      v28 = objc_claimAutoreleasedReturnValue();

      if (v28)
      {

        v8 = (void *)v28;
LABEL_4:
        if (((_os_feature_enabled_impl() & 1) != 0
           || CFPreferencesGetAppBooleanValue(CFSTR("MatterOTA"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0))&& -[HMDHAPAccessory supportsCHIP](self, "supportsCHIP"))
        {
          v9 = (void *)MEMORY[0x1D17BA0A0]();
          v10 = self;
          HMFGetOSLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v37 = v12;
            v38 = 2112;
            v39 = v10;
            _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Marking software update as Requested for %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v9);
          objc_msgSend(v8, "updateAvailableSoftwareUpdateState:", 5);
          -[HMDAccessory home](v10, "home");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "homeManager");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "matterSoftwareUpdateProviderDelegate");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "notifyUpdateRequestedForHMDHAPAccessory:isUserTriggered:", v10, 1);

          objc_msgSend(v4, "respondWithPayload:error:", 0, 0);
          goto LABEL_27;
        }
        v35 = 0;
        objc_msgSend(v8, "startManualUpdate:error:", v6, &v35);
        v25 = v35;
        objc_msgSend(v4, "respondWithPayload:error:", 0, v25);
LABEL_26:

LABEL_27:
        goto LABEL_28;
      }
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v33 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory name](v33, "name");
        v34 = (HMDHAPAccessory *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v37 = v32;
        v38 = 2112;
        v39 = v34;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to start update for accessory %@ because a session could not be established", buf, 0x16u);

        goto LABEL_24;
      }
    }
    else
    {
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v37 = v32;
        v38 = 2112;
        v39 = v30;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@UARP accessory is not found for accessory %@", buf, 0x16u);
LABEL_24:

      }
    }

    objc_autoreleasePoolPop(v29);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v25);
    goto LABEL_26;
  }
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v20 = (HMDHAPAccessory *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v19;
    v38 = 2112;
    v39 = v20;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Missing serialized software update from message payload: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v16);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v6);
LABEL_28:

}

- (void)_handleChangeUpdateSource:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  const char *v18;
  _BYTE v19[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", *MEMORY[0x1E0CB9C98]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9C90]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9C80]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB9CA0]);
  if (!v5)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0](v8);
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v19 = 138543618;
      *(_QWORD *)&v19[4] = v16;
      *(_WORD *)&v19[12] = 2112;
      *(_QWORD *)&v19[14] = v17;
      v18 = "%{public}@Missing source from message payload: %@";
LABEL_10:
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, v18, v19, 0x16u);

    }
LABEL_11:

    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v4;
    goto LABEL_12;
  }
  v9 = v8;
  if (objc_msgSend(v5, "integerValue") == 2 && !objc_msgSend(v6, "length"))
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v19 = 138543618;
      *(_QWORD *)&v19[4] = v16;
      *(_WORD *)&v19[12] = 2112;
      *(_QWORD *)&v19[14] = v17;
      v18 = "%{public}@Missing path from message payload: %@";
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  -[HMDHAPAccessory firmwareUpdateManager](self, "firmwareUpdateManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "changeAccessory:source:path:documentationPath:userInitiatedStaging:", self, objc_msgSend(v5, "integerValue"), v6, v7, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = v4;
  if (v11)
  {
LABEL_12:
    objc_msgSend(v12, "respondWithError:", v11, *(_OWORD *)v19, *(_QWORD *)&v19[16], v20);
    goto LABEL_13;
  }
  objc_msgSend(v4, "respondWithSuccess");
LABEL_13:

}

- (void)_handleRemoveStagedSoftwareUpdate:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v4 = a3;
  -[HMDHAPAccessory firmwareUpdateManager](self, "firmwareUpdateManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __69__HMDHAPAccessory_FirmwareUpdate___handleRemoveStagedSoftwareUpdate___block_invoke;
  v7[3] = &unk_1E89C2350;
  v8 = v4;
  v6 = v4;
  objc_msgSend(v5, "rescindStagedAsset:completion:", self, v7);

}

void __69__HMDHAPAccessory_FirmwareUpdate___handleRemoveStagedSoftwareUpdate___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 58);
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithError:", v3);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithSuccess");
  }
}

void __76__HMDHAPAccessory_FirmwareUpdate___startManualUpdateFromBestSuitableDevice___block_invoke(id *a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;
  id v9;
  id v10;
  id location;

  v3 = a2;
  objc_initWeak(&location, a1[4]);
  objc_msgSend(a1[4], "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __76__HMDHAPAccessory_FirmwareUpdate___startManualUpdateFromBestSuitableDevice___block_invoke_2;
  block[3] = &unk_1E89BF278;
  objc_copyWeak(&v10, &location);
  v7 = v3;
  v8 = a1[5];
  v9 = a1[6];
  v5 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void __76__HMDHAPAccessory_FirmwareUpdate___startManualUpdateFromBestSuitableDevice___block_invoke_2(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_BOOLForKey:", CFSTR("kAccessoryIsReachableKey"));

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 40), "residentDeviceManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "primaryResidentDevice");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = WeakRetained;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v10;
      v21 = 2112;
      v22 = v6;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Redispatching start update to primary resident %@ ", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v12 = *(void **)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v8, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "workQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "redispatchToResidentMessage:target:responseQueue:", v11, v13, v14);

  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = WeakRetained;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543362;
      v20 = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Primary resident has no reachability with accessory, starting update in current device", (uint8_t *)&v19, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(v16, "_startUpdateFromCurrentDeviceWithRequest:", *(_QWORD *)(a1 + 48));
  }

}

uint64_t __54__HMDHAPAccessory_FirmwareUpdate___handleStartUpdate___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startManualUpdateFromBestSuitableDevice:", *(_QWORD *)(a1 + 40));
}

- (BOOL)_handleUpdatedServicesForDiagnosticsManager:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  BOOL v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  void *v24;
  HMDHAPAccessory *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  int v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!_os_feature_enabled_impl())
    goto LABEL_20;
  -[HMDHAPAccessory dataStreamController](self, "dataStreamController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", *MEMORY[0x1E0CB99F8]);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory diagnosticsManager](self, "diagnosticsManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (v7)
      {

        if (v9)
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          v11 = self;
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = 138543362;
            v32 = v13;
            _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Diagnostics manager is already present for diagnostics service", (uint8_t *)&v31, 0xCu);

          }
          objc_autoreleasePoolPop(v10);
          goto LABEL_15;
        }
        -[HMDHAPAccessory _createDiagnosticsManager:](self, "_createDiagnosticsManager:", v7);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory setDiagnosticsManager:](self, "setDiagnosticsManager:", v23);

        v24 = (void *)MEMORY[0x1D17BA0A0]();
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory diagnosticsManager](v25, "diagnosticsManager");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = 138543874;
          v32 = v27;
          v33 = 2112;
          v34 = v28;
          v35 = 2112;
          v36 = v7;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Created diagnostics manager %@ with service: %@", (uint8_t *)&v31, 0x20u);

        }
        objc_autoreleasePoolPop(v24);
        -[HMDHAPAccessory diagnosticsManager](v25, "diagnosticsManager");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "start");

      }
      else
      {

        if (!v9)
        {
LABEL_15:
          v15 = 0;
LABEL_25:

          goto LABEL_26;
        }
        -[HMDHAPAccessory _destroyDiagnosticsManager](self, "_destroyDiagnosticsManager");
      }
      v15 = 1;
      goto LABEL_25;
    }
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 138543362;
    v32 = v19;
    v20 = "%{public}@Message dispatcher isn't set, cannot create diagnostics manager";
    v21 = v18;
    v22 = OS_LOG_TYPE_ERROR;
    goto LABEL_18;
  }
  -[HMDHAPAccessory diagnosticsManager](self, "diagnosticsManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v14)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
LABEL_19:

      objc_autoreleasePoolPop(v16);
LABEL_20:
      v15 = 0;
      goto LABEL_26;
    }
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 138543362;
    v32 = v19;
    v20 = "%{public}@Not creating diagnostics manager for accessory without a data stream controller";
    v21 = v18;
    v22 = OS_LOG_TYPE_DEBUG;
LABEL_18:
    _os_log_impl(&dword_1CD062000, v21, v22, v20, (uint8_t *)&v31, 0xCu);

    goto LABEL_19;
  }
  -[HMDHAPAccessory _destroyDiagnosticsManager](self, "_destroyDiagnosticsManager");
  v15 = 1;
LABEL_26:

  return v15;
}

- (void)_createDiagnosticManagerForMatterDevice:(id)a3
{
  id v4;
  HMDMatterAccessoryDiagnosticsManager *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  HMDMatterAccessoryDiagnosticsManager *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory matterDiagnosticManager](self, "matterDiagnosticManager");
  v5 = (HMDMatterAccessoryDiagnosticsManager *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v5 = -[HMDMatterAccessoryDiagnosticsManager initWithAccessory:]([HMDMatterAccessoryDiagnosticsManager alloc], "initWithAccessory:", self);
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v5;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Starting matter diagnostic manager: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDMatterAccessoryDiagnosticsManager start](v5, "start");
    -[HMDHAPAccessory setMatterDiagnosticManager:](v7, "setMatterDiagnosticManager:", v5);
  }
  -[HMDMatterAccessoryDiagnosticsManager setMatterDevice:](v5, "setMatterDevice:", v4);

}

- (id)_createDiagnosticsManager:(id)a3
{
  id v4;
  HMDAccessoryDiagnosticsManager *v5;

  v4 = a3;
  v5 = -[HMDAccessoryDiagnosticsManager initWithAccessory:service:]([HMDAccessoryDiagnosticsManager alloc], "initWithAccessory:service:", self, v4);

  return v5;
}

- (void)_destroyDiagnosticsManager
{
  void *v3;
  HMDHAPAccessory *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory diagnosticsManager](v4, "diagnosticsManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v6;
    v11 = 2112;
    v12 = v7;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Destroying diagnostics manager %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHAPAccessory diagnosticsManager](v4, "diagnosticsManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "shutDown");

  -[HMDHAPAccessory setDiagnosticsManager:](v4, "setDiagnosticsManager:", 0);
}

- (void)initializeBTLEScan
{
  +[BTLEScanner sharedBTLEScanner]();

}

- (void)initiateScan:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  NSObject *v12;
  id v13;
  id v14;
  _QWORD block[4];
  id v16;
  HMDHAPAccessory *v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory identifier](v6, "identifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v8;
    v21 = 2112;
    v22 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Initiating BLE Scan for custom device: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  +[BTLEScanner sharedBTLEScanner]();
  v10 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    v12 = v10[1];
  else
    v12 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __42__HMDHAPAccessory_BTLEScan__initiateScan___block_invoke;
  block[3] = &unk_1E89C1B48;
  v16 = v10;
  v17 = v6;
  v18 = v4;
  v13 = v4;
  v14 = v11;
  dispatch_async(v12, block);

}

- (void)scanningCompleteWithAccessoryFound:(BOOL)a3 suspended:(BOOL)a4
{
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t v30[128];
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory identifier](v8, "identifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v32 = v10;
    v33 = 2112;
    v34 = v11;
    v35 = 2112;
    v36 = v12;
    v37 = 2112;
    v38 = v13;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Scanning of custom device(%@) found(%@) suspended(%@)", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v7);
  if (a3)
  {
    if (a4 || -[HMDAccessory isReachable](v8, "isReachable"))
    {
      v14 = 0;
    }
    else
    {
      +[HMDBTLEAdvertiser sharedAdvertiser](HMDBTLEAdvertiser, "sharedAdvertiser");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v15, "isAdvertisingForAccessory:", v8) & 1) != 0)
      {
        v14 = 0;
      }
      else
      {
        v16 = (void *)MEMORY[0x1D17BA0A0]();
        v17 = v8;
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v32 = v19;
          _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Accessory discoverable via Bluetooth but no HAP connection!!!", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v16);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
      }

    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  -[HMDHAPAccessory pendingReads](v8, "pendingReads", 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v27;
    do
    {
      v24 = 0;
      do
      {
        if (*(_QWORD *)v27 != v23)
          objc_enumerationMutation(v20);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v24++) + 16))();
      }
      while (v22 != v24);
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v22);
  }

  -[HMDHAPAccessory pendingReads](v8, "pendingReads");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "removeAllObjects");

  -[HMDHAPAccessory setPendingReads:](v8, "setPendingReads:", 0);
}

- (void)_stopScan
{
  _QWORD *v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD v6[4];
  id v7;
  HMDHAPAccessory *v8;

  +[BTLEScanner sharedBTLEScanner]();
  v3 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  if (v3)
    v4 = v3[1];
  else
    v4 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __38__HMDHAPAccessory_BTLEScan___stopScan__block_invoke;
  v6[3] = &unk_1E89C2328;
  v7 = v3;
  v8 = self;
  v5 = v3;
  dispatch_async(v4, v6);

}

- (void)stopScan
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __37__HMDHAPAccessory_BTLEScan__stopScan__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

uint64_t __37__HMDHAPAccessory_BTLEScan__stopScan__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_stopScan");
}

void __38__HMDHAPAccessory_BTLEScan___stopScan__block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 40);
  else
    v3 = 0;
  objc_msgSend(v3, "getContextForAccessory:", *(_QWORD *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      v6 = *(void **)(v5 + 40);
    else
      v6 = 0;
    objc_msgSend(v6, "removeAccessory:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 40), "scanningCompleteWithAccessoryFound:suspended:", 0, 0);
  }
}

void __42__HMDHAPAccessory_BTLEScan__initiateScan___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  double v11;
  double v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id *v20;
  id v21;
  void *v22;
  ScanContext *v23;
  ScanContext *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 32);
  else
    v3 = 0;
  v4 = objc_msgSend(v3, "state");
  if (v4 && v4 != 5)
  {
    v30 = (void *)MEMORY[0x1D17BA0A0]();
    v31 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = 138543618;
      v36 = v33;
      v37 = 2112;
      v38 = v34;
      _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_ERROR, "%{public}@Failed to start scan of custom device: %@ - bluetooth not turned on", (uint8_t *)&v35, 0x16u);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 54);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "pendingReads");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      objc_msgSend(*(id *)(a1 + 40), "setPendingReads:", v6);

    }
    objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "preferenceForKey:", CFSTR("BTLEScanTimeout_Seconds"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "numberValue");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = objc_msgSend(v9, "doubleValue");
    v12 = v11;
    v13 = (void *)MEMORY[0x1D17BA0A0](v10);
    v14 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = 138543874;
      v36 = v16;
      v37 = 2112;
      v38 = v17;
      v39 = 2112;
      v40 = v9;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Scan timeout for custom device: %@ set to %@ seconds", (uint8_t *)&v35, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(*(id *)(a1 + 40), "pendingReads");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = _Block_copy(*(const void **)(a1 + 48));
    objc_msgSend(v18, "addObject:", v19);

    v20 = *(id **)(a1 + 32);
    v21 = *(id *)(a1 + 40);
    v22 = v21;
    if (v20 && v21)
    {
      v23 = objc_alloc_init(ScanContext);
      v24 = v23;
      if (v23)
        v23->_timeout = v12;
      objc_msgSend(v20[5], "addAccessory:toQueue:context:", v22, CFSTR("ScanQueue"), v23);
      objc_msgSend(v20, "_checkCanScan");

    }
    else
    {

      v25 = (void *)MEMORY[0x1D17BA0A0]();
      v26 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "identifier");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543618;
        v36 = v28;
        v37 = 2112;
        v38 = v29;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Failed to start scan of custom device: %@ - ignoring request", (uint8_t *)&v35, 0x16u);

      }
      objc_autoreleasePoolPop(v25);
      objc_msgSend(*(id *)(a1 + 40), "scanningCompleteWithAccessoryFound:suspended:", 0, 0);
    }
  }

}

- (HMDHAPAccessory)init
{
  void *v3;
  HMDHAPAccessory *v4;

  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[HMDHAPAccessory initWithHAPMetadata:](self, "initWithHAPMetadata:", v3);

  return v4;
}

- (HMDHAPAccessory)initWithHAPMetadata:(id)a3
{
  id v5;
  HMDHAPAccessory *v6;
  HMDHAPAccessory *v7;
  NSNumber *internalEnhancedAuthConfigNumber;
  NSNumber *internalEnhancedAuthMethod;
  uint64_t v10;
  NSMutableArray *services;
  uint64_t v12;
  NSSet *identifiersForBridgedAccessories;
  uint64_t v14;
  NSMutableArray *transportInformationInstances;
  NSNumber *backedOffStateNumber;
  HMFTimer *accessoryDiscoveryBackoffTimer;
  HMFTimer *accessoryKeyRefreshTimer;
  NSMutableArray *v19;
  NSMutableArray *powerOnCompletionRoutines;
  uint64_t v21;
  NSMutableDictionary *accessCodeCache;
  uint64_t v23;
  NSMutableSet *activeSessionRestoreClients;
  HMFTimer *sessionRestoreTimer;
  HMDCHIPAccessoryStorage *v26;
  HMDCHIPAccessoryStorage *chipStorage;
  NAFuture *v28;
  NAFuture *didConfigureCHIPAccessoryServerFuture;
  void *v30;
  void *v31;
  uint64_t v32;
  HMDBulletinBoard *bulletinBoard;
  objc_super v35;

  v5 = a3;
  v35.receiver = self;
  v35.super_class = (Class)HMDHAPAccessory;
  v6 = -[HMDAccessory init](&v35, sel_init);
  v7 = v6;
  if (v6)
  {
    v6->_certificationStatus = 0;
    objc_storeStrong((id *)&v6->_hapMetadata, a3);
    internalEnhancedAuthConfigNumber = v7->_internalEnhancedAuthConfigNumber;
    v7->_internalEnhancedAuthConfigNumber = 0;

    internalEnhancedAuthMethod = v7->_internalEnhancedAuthMethod;
    v7->_internalEnhancedAuthMethod = 0;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v10 = objc_claimAutoreleasedReturnValue();
    services = v7->_services;
    v7->_services = (NSMutableArray *)v10;

    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v12 = objc_claimAutoreleasedReturnValue();
    identifiersForBridgedAccessories = v7->_identifiersForBridgedAccessories;
    v7->_identifiersForBridgedAccessories = (NSSet *)v12;

    v14 = objc_opt_new();
    transportInformationInstances = v7->_transportInformationInstances;
    v7->_transportInformationInstances = (NSMutableArray *)v14;

    v7->_communicationProtocol = 0;
    backedOffStateNumber = v7->_backedOffStateNumber;
    v7->_backedOffStateNumber = 0;

    accessoryDiscoveryBackoffTimer = v7->_accessoryDiscoveryBackoffTimer;
    v7->_accessoryDiscoveryBackoffTimer = 0;

    accessoryKeyRefreshTimer = v7->_accessoryKeyRefreshTimer;
    v7->_accessoryKeyRefreshTimer = 0;

    v7->_keyGenerationType = 0;
    v19 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    powerOnCompletionRoutines = v7->_powerOnCompletionRoutines;
    v7->_powerOnCompletionRoutines = v19;

    v7->_siriEndpointCapabilities = 0;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v21 = objc_claimAutoreleasedReturnValue();
    accessCodeCache = v7->_accessCodeCache;
    v7->_accessCodeCache = (NSMutableDictionary *)v21;

    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v23 = objc_claimAutoreleasedReturnValue();
    activeSessionRestoreClients = v7->_activeSessionRestoreClients;
    v7->_activeSessionRestoreClients = (NSMutableSet *)v23;

    sessionRestoreTimer = v7->_sessionRestoreTimer;
    v7->_sessionRestoreTimer = 0;

    v7->_lastLinkChangeSessionCheckTime = 0.0;
    v7->_lastSessionStatus = 0;
    v26 = objc_alloc_init(HMDCHIPAccessoryStorage);
    chipStorage = v7->_chipStorage;
    v7->_chipStorage = v26;

    v28 = (NAFuture *)objc_alloc_init(MEMORY[0x1E0D519C0]);
    didConfigureCHIPAccessoryServerFuture = v7->_didConfigureCHIPAccessoryServerFuture;
    v7->_didConfigureCHIPAccessoryServerFuture = v28;

    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "addObserver:selector:name:object:", v7, sel_reachabilityDidChangeToReachable_, CFSTR("HMDAccessoryIsReachableNotification"), v7);

    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "addObserver:selector:name:object:", v7, sel_reachabilityDidChangeToUnreachable_, CFSTR("HMDAccessoryIsNotReachableNotification"), v7);

  }
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v32 = objc_claimAutoreleasedReturnValue();
  bulletinBoard = v7->_bulletinBoard;
  v7->_bulletinBoard = (HMDBulletinBoard *)v32;

  return v7;
}

- (HMDHAPAccessory)initWithTransaction:(id)a3 home:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHAPAccessory *v9;

  v6 = a4;
  v7 = a3;
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HMDHAPAccessory initWithTransaction:home:hapMetadata:](self, "initWithTransaction:home:hapMetadata:", v7, v6, v8);

  return v9;
}

- (HMDHAPAccessory)initWithTransaction:(id)a3 home:(id)a4 hapMetadata:(id)a5
{
  id v8;
  id v9;
  id v10;
  HMDHAPAccessory *v11;
  uint64_t v12;
  NSString *uniqueIdentifier;
  uint64_t v14;
  NSNumber *accessoryFlags;
  void *v16;
  uint64_t v17;
  NSString *pairingUsername;
  uint64_t v19;
  NSData *publicKey;
  uint64_t v21;
  NSData *broadcastKey;
  uint64_t v23;
  NSDate *keyUpdatedTime;
  uint64_t v25;
  NSNumber *keyUpdatedStateNumber;
  uint64_t v27;
  NSNumber *hasOnboardedForNaturalLighting;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  HMDHAPAccessory *v35;
  NSObject *v36;
  void *v37;
  HMDHAPAccessory *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  NSData *setupHash;
  uint64_t v52;
  NSNumber *wiFiTransportCapabilities;
  uint64_t v54;
  NSArray *targetUUIDs;
  void *v56;
  void *v57;
  void *v58;
  HMDHAPAccessory *v59;
  NSObject *v60;
  void *v61;
  NSString *v62;
  uint64_t v63;
  NSNumber *sleepInterval;
  void *v65;
  void *v66;
  uint64_t v67;
  NSSet *initialServiceTypeUUIDs;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  NSNumber *needsOnboarding;
  uint64_t v75;
  NSNumber *matterNodeID;
  uint64_t v77;
  NSNumber *matterVendorID;
  uint64_t v79;
  NSNumber *matterProductID;
  NAFuture *v81;
  NAFuture *didConfigureCHIPAccessoryServerFuture;
  void *v84;
  id v85;
  void *v86;
  objc_super v87;
  uint8_t buf[4];
  void *v89;
  __int16 v90;
  id v91;
  __int16 v92;
  NSString *v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v87.receiver = self;
  v87.super_class = (Class)HMDHAPAccessory;
  v11 = -[HMDAccessory initWithTransaction:home:](&v87, sel_initWithTransaction_home_, v8, v9);
  if (!v11)
  {
LABEL_28:
    v38 = v11;
    goto LABEL_29;
  }
  objc_msgSend(v8, "uniqueIdentifier");
  v12 = objc_claimAutoreleasedReturnValue();
  uniqueIdentifier = v11->_uniqueIdentifier;
  v11->_uniqueIdentifier = (NSString *)v12;

  if (v11->_uniqueIdentifier)
  {
    objc_storeStrong((id *)&v11->_hapMetadata, a5);
    objc_msgSend(v8, "accessoryFlags");
    v14 = objc_claimAutoreleasedReturnValue();
    accessoryFlags = v11->_accessoryFlags;
    v11->_accessoryFlags = (NSNumber *)v14;

    objc_msgSend(v8, "certificationStatus");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v11->_certificationStatus = objc_msgSend(v16, "unsignedIntegerValue");

    objc_msgSend(v8, "pairingUsername");
    v17 = objc_claimAutoreleasedReturnValue();
    pairingUsername = v11->_pairingUsername;
    v11->_pairingUsername = (NSString *)v17;

    objc_msgSend(v8, "publicKey");
    v19 = objc_claimAutoreleasedReturnValue();
    publicKey = v11->_publicKey;
    v11->_publicKey = (NSData *)v19;

    objc_msgSend(v8, "broadcastKey");
    v21 = objc_claimAutoreleasedReturnValue();
    broadcastKey = v11->_broadcastKey;
    v11->_broadcastKey = (NSData *)v21;

    objc_msgSend(v8, "keyUpdatedTime");
    v23 = objc_claimAutoreleasedReturnValue();
    keyUpdatedTime = v11->_keyUpdatedTime;
    v11->_keyUpdatedTime = (NSDate *)v23;

    v11->_keyGenerationInProgress = 0;
    objc_msgSend(v8, "keyUpdatedStateNumber");
    v25 = objc_claimAutoreleasedReturnValue();
    keyUpdatedStateNumber = v11->_keyUpdatedStateNumber;
    v11->_keyUpdatedStateNumber = (NSNumber *)v25;

    objc_msgSend(v8, "hasOnboardedForNaturalLighting");
    v27 = objc_claimAutoreleasedReturnValue();
    hasOnboardedForNaturalLighting = v11->_hasOnboardedForNaturalLighting;
    v11->_hasOnboardedForNaturalLighting = (NSNumber *)v27;

    v29 = objc_alloc(MEMORY[0x1E0CB3A28]);
    objc_msgSend(v8, "bridgeUUID");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = (void *)objc_msgSend(v29, "initWithUUIDString:", v30);

    objc_msgSend(v8, "bridgeUUID");
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v32)
    {
      v33 = v31;
    }
    else
    {
      objc_msgSend(v8, "hostAccessoryUUID");
      v33 = (id)objc_claimAutoreleasedReturnValue();

      if (v33)
      {
        v39 = objc_alloc(MEMORY[0x1E0CB3A28]);
        objc_msgSend(v8, "hostAccessoryUUID");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = (id)objc_msgSend(v39, "initWithUUIDString:", v40);

      }
    }
    v86 = v33;
    -[HMDAccessory _updateHost:](v11, "_updateHost:", v33);
    objc_msgSend(v8, "transportInformation");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory updateTransportInformation:localSource:](v11, "updateTransportInformation:localSource:", v41, 1);

    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory setBulletinBoard:](v11, "setBulletinBoard:", v42);

    objc_msgSend(v8, "communicationProtocol");
    v43 = (void *)objc_claimAutoreleasedReturnValue();

    if (v43)
    {
      objc_msgSend(v8, "communicationProtocol");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v11->_communicationProtocol = objc_msgSend(v44, "integerValue");

    }
    -[HMDHAPAccessory bridge](v11, "bridge");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "room");
    v46 = objc_claimAutoreleasedReturnValue();
    if (v46)
    {
      v47 = (void *)v46;
      objc_msgSend(v8, "roomUUID");
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v48)
      {
        objc_msgSend(v45, "room");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAccessory setRoom:](v11, "setRoom:", v49);

      }
    }
    objc_msgSend(v8, "accessorySetupHash");
    v50 = objc_claimAutoreleasedReturnValue();
    setupHash = v11->_setupHash;
    v11->_setupHash = (NSData *)v50;

    objc_msgSend(v8, "wiFiTransportCapabilities");
    v52 = objc_claimAutoreleasedReturnValue();
    wiFiTransportCapabilities = v11->_wiFiTransportCapabilities;
    v11->_wiFiTransportCapabilities = (NSNumber *)v52;

    objc_msgSend(v8, "targetUUIDs");
    v54 = objc_claimAutoreleasedReturnValue();
    targetUUIDs = v11->_targetUUIDs;
    v11->_targetUUIDs = (NSArray *)v54;

    objc_msgSend(v8, "hardwareSupport");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v11->_hardwareSupport = objc_msgSend(v56, "BOOLValue");

    objc_msgSend(v8, "connectivityInfo");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    if (v57 && -[HMDHAPAccessory _validateConnectivityInfo:](v11, "_validateConnectivityInfo:", v57))
    {
      v84 = v31;
      v85 = v10;
      objc_storeStrong((id *)&v11->_connectivityInfo, v57);
      v58 = (void *)MEMORY[0x1D17BA0A0]();
      v59 = v11;
      HMFGetOSLogHandle();
      v60 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        v62 = v11->_uniqueIdentifier;
        *(_DWORD *)buf = 138543874;
        v89 = v61;
        v90 = 2112;
        v91 = v57;
        v92 = 2112;
        v93 = v62;
        _os_log_impl(&dword_1CD062000, v60, OS_LOG_TYPE_DEBUG, "%{public}@Setting connectivityInfo to: %@ from accessory transaction of %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v58);
      v31 = v84;
      v10 = v85;
    }
    objc_msgSend(v8, "sleepInterval");
    v63 = objc_claimAutoreleasedReturnValue();
    sleepInterval = v11->_sleepInterval;
    v11->_sleepInterval = (NSNumber *)v63;

    v65 = (void *)MEMORY[0x1E0D28630];
    objc_msgSend(v8, "initialServiceTypeUUIDs");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "hmf_setOfCachedInstancesForStrings:", v66);
    v67 = objc_claimAutoreleasedReturnValue();
    initialServiceTypeUUIDs = v11->_initialServiceTypeUUIDs;
    v11->_initialServiceTypeUUIDs = (NSSet *)v67;

    objc_msgSend(v8, "suspendedState");
    v69 = (void *)objc_claimAutoreleasedReturnValue();

    if (v69)
    {
      objc_msgSend(v8, "suspendedState");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory setSuspendedState:](v11, "setSuspendedState:", objc_msgSend(v70, "unsignedIntegerValue"));

    }
    -[HMDHAPAccessory wirelessResumeInit](v11, "wirelessResumeInit");
    v11->_siriEndpointCapabilities = 0;
    objc_msgSend(v8, "needsOnboarding");
    v71 = (void *)objc_claimAutoreleasedReturnValue();

    if (v71)
    {
      objc_msgSend(v8, "needsOnboarding");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      v73 = objc_msgSend(v72, "copy");
      needsOnboarding = v11->_needsOnboarding;
      v11->_needsOnboarding = (NSNumber *)v73;

    }
    -[HMDCHIPAccessoryStorage updateUsingAccessoryModel:](v11->_chipStorage, "updateUsingAccessoryModel:", v8);
    -[HMDCHIPAccessoryStorage nodeID](v11->_chipStorage, "nodeID");
    v75 = objc_claimAutoreleasedReturnValue();
    matterNodeID = v11->_matterNodeID;
    v11->_matterNodeID = (NSNumber *)v75;

    -[HMDCHIPAccessoryStorage vendorID](v11->_chipStorage, "vendorID");
    v77 = objc_claimAutoreleasedReturnValue();
    matterVendorID = v11->_matterVendorID;
    v11->_matterVendorID = (NSNumber *)v77;

    -[HMDCHIPAccessoryStorage productID](v11->_chipStorage, "productID");
    v79 = objc_claimAutoreleasedReturnValue();
    matterProductID = v11->_matterProductID;
    v11->_matterProductID = (NSNumber *)v79;

    if (v11->_matterVendorID && v11->_matterProductID)
      logAndPostNotification(CFSTR("HMDAccessoryVendorIDProductIDUpdatedNotification"), v11, 0);
    v81 = (NAFuture *)objc_alloc_init(MEMORY[0x1E0D519C0]);
    didConfigureCHIPAccessoryServerFuture = v11->_didConfigureCHIPAccessoryServerFuture;
    v11->_didConfigureCHIPAccessoryServerFuture = v81;

    goto LABEL_28;
  }
  v34 = (void *)MEMORY[0x1D17BA0A0]();
  v35 = v11;
  HMFGetOSLogHandle();
  v36 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v89 = v37;
    v90 = 2112;
    v91 = v8;
    _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_ERROR, "%{public}@Failed to create accessory from transaction with nil uniqueIdentifier: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v34);
  v38 = 0;
LABEL_29:

  return v38;
}

- (BOOL)_validateConnectivityInfo:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;

  v4 = a3;
  objc_msgSend(v4, "woBLEInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bleIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {

  }
  else
  {
    objc_msgSend(v4, "woWLANInfo");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "primaryMACAddress");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
      goto LABEL_5;
    objc_msgSend(v4, "woWLANInfo");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "supportsSleepConfig");

    if (!v12)
    {
      v9 = 0;
      goto LABEL_6;
    }
    objc_msgSend(v4, "woWLANInfos");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "count") == 1)
    {
      -[HMDHAPAccessory connectivityInfo](self, "connectivityInfo");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "woWLANInfos");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "count");
      objc_msgSend(v4, "woWLANInfos");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v15) = v15 > objc_msgSend(v16, "count");

      v9 = v15 ^ 1;
      goto LABEL_6;
    }
  }

LABEL_5:
  v9 = 1;
LABEL_6:

  return v9 & 1;
}

- (NSString)serializedIdentifier
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  -[HMDAccessory home](self, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(v3, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringWithFormat:", CFSTR("%@/%@"), v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSString *)v9;
}

- (void)_registerForMessages
{
  void *v3;
  BOOL v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  void *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  objc_super v133;
  _QWORD v134[2];
  _QWORD v135[2];
  _QWORD v136[2];
  _QWORD v137[2];
  _QWORD v138[2];
  _QWORD v139[2];
  _QWORD v140[2];
  _QWORD v141[2];
  _QWORD v142[2];
  _QWORD v143[3];
  _QWORD v144[3];
  _QWORD v145[3];
  _QWORD v146[3];
  _QWORD v147[3];
  _QWORD v148[3];
  _QWORD v149[3];
  _QWORD v150[3];
  _QWORD v151[3];
  _QWORD v152[2];
  _QWORD v153[2];
  _QWORD v154[3];
  _QWORD v155[3];
  _QWORD v156[4];
  _QWORD v157[4];
  uint8_t buf[4];
  void *v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v133.receiver = self;
  v133.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory _registerForMessages](&v133, sel__registerForMessages);
  -[HMDAccessory home](self, "home");
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:");
  v131 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isResidentCapable") & 1) != 0)
  {

  }
  else
  {
    v4 = +[HMDDeviceCapabilities isCompanionCapable](HMDDeviceCapabilities, "isCompanionCapable");

    if (!v4)
      goto LABEL_7;
  }
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v159 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Registering for legacy accessory read / write handlers", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v132, 0, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setRoles:", objc_msgSend(v10, "roles") | 6);
  v11 = (void *)objc_msgSend(v10, "copy");
  -[HMDAccessory msgDispatcher](v6, "msgDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v157[0] = v11;
  v157[1] = v9;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v157[2] = v13;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v157[3] = v14;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v157, 4);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "registerForMessage:receiver:policies:selector:", CFSTR("kCharacteristicWriteRequestKey"), v6, v15, sel__handleCharacteristicWrite_);

  -[HMDAccessory msgDispatcher](v6, "msgDispatcher");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v156[0] = v11;
  v156[1] = v9;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v156[2] = v17;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v156[3] = v18;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v156, 4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "registerForMessage:receiver:policies:selector:", CFSTR("kCharacteristicReadRequestKey"), v6, v19, sel__handleCharacteristicRead_);

LABEL_7:
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v132, 3, 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v132, 4, 0);
  v22 = objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v155[0] = v23;
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v155[1] = v24;
  v155[2] = v22;
  v130 = (void *)v22;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v155, 3);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v20, "supportsFirmwareUpdate"))
  {
    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9C78], self, v25, sel__handleStartUpdate_);

  }
  if (_os_feature_enabled_impl())
  {
    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB8168], self, v25, sel_routeUpdatePreferredMediaUser_);

  }
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v154[0] = v28;
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v154[1] = v29;
  v154[2] = v21;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v154, 3);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (isInternalBuild() && objc_msgSend(v20, "supportsFirmwareUpdate"))
  {
    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9C60], self, v30, sel__handleChangeUpdateSource_);

    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9C70], self, v30, sel__handleRemoveStagedSoftwareUpdate_);

  }
  objc_msgSend(v132, "administratorHandler");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = *MEMORY[0x1E0CBABF0];
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v153[0] = v35;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v153[1] = v36;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v153, 2);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "registerForMessage:receiver:policies:selector:", v34, self, v37, sel__handleRenameService_);

  objc_msgSend(v132, "administratorHandler");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v152[0] = v39;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v152[1] = v40;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v152, 2);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "registerForMessage:receiver:policies:selector:", CFSTR("kSetAssociatedServiceTypeRequestKey"), self, v41, sel__handleUpdateAssociatedServiceType_);

  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = *MEMORY[0x1E0CB8158];
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v151[0] = v44;
  v151[1] = v131;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v151[2] = v45;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v151, 3);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "registerForMessage:receiver:policies:selector:", v43, self, v46, sel__handleUpdateCharacteristicAuthorizationDataMessage_);

  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = *MEMORY[0x1E0CB7B58];
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v150[0] = v49;
  v150[1] = v131;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v150[2] = v50;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v150, 3);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "registerForMessage:receiver:policies:selector:", v48, self, v51, sel__handleConfigureTargets_);

  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = *MEMORY[0x1E0CB9E38];
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v149[0] = v54;
  v149[1] = v131;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v149[2] = v55;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v149, 3);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "registerForMessage:receiver:policies:selector:", v53, self, v56, sel__handleUpdateMediaSourceDisplayOrder_);

  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = *MEMORY[0x1E0CB7E20];
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v148[0] = v59;
  v148[1] = v131;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v148[2] = v60;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v148, 3);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "registerForMessage:receiver:policies:selector:", v58, self, v61, sel_handleSetHasOnboardedForNaturalLighting_);

  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = *MEMORY[0x1E0CB7C60];
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v147[0] = v64;
  v147[1] = v131;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v147[2] = v65;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v147, 3);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "registerForMessage:receiver:policies:selector:", v63, self, v66, sel_handleFetchCHIPPairingsMessage_);

  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = *MEMORY[0x1E0CB7DD0];
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v146[0] = v69;
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v132, 4, 1);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v146[1] = v70;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v146[2] = v71;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v146, 3);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v67, "registerForMessage:receiver:policies:selector:", v68, self, v72, sel_handleRemoveCHIPPairingsMessage_);

  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = *MEMORY[0x1E0CB7DE0];
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v145[0] = v75;
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v132, 4, 1);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v145[1] = v76;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v145[2] = v77;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v145, 3);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v73, "registerForMessage:receiver:policies:selector:", v74, self, v78, sel_handleRemoveCorrespondingSystemCommissionerMessage_);

  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v80 = *MEMORY[0x1E0CB7970];
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v144[0] = v81;
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v132, 4, 1);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  v144[1] = v82;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v144[2] = v83;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v144, 3);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "registerForMessage:receiver:policies:selector:", v80, self, v84, sel_handleActivateCHIPPairingModeMessage_);

  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = *MEMORY[0x1E0CB7968];
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v143[0] = v87;
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:](HMDUserMessagePolicy, "userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:", v132, 4, 1);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  v143[1] = v88;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  v143[2] = v89;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v143, 3);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "registerForMessage:receiver:policies:selector:", v86, self, v90, sel_handleActivateCHIPPairingModeAndCreateSetupPayloadStringMessage_);

  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  v92 = *MEMORY[0x1E0CB8180];
  v142[0] = v131;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  v142[1] = v93;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v142, 2);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v91, "registerForMessage:receiver:policies:selector:", v92, self, v94, sel__handleValidatePairingAuthMethodMessage_);

  if (isInternalBuild())
  {
    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    v141[0] = v131;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v141[1] = v96;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v141, 2);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v95, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateAccessoryConnectionStateKey"), self, v97, sel__handleUpdateAccessoryConnectionState_);

  }
  if (isInternalBuild())
  {
    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v99 = *MEMORY[0x1E0CB7BF8];
    v140[0] = v131;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    v140[1] = v100;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v140, 2);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "registerForMessage:receiver:policies:selector:", v99, self, v101, sel_handleGetAllUsersMessage_);

    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    v103 = *MEMORY[0x1E0CB7B40];
    v139[0] = v131;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    v139[1] = v104;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v139, 2);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "registerForMessage:receiver:policies:selector:", v103, self, v105, sel_handleClearUserMessage_);

    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v107 = *MEMORY[0x1E0CB7B28];
    v138[0] = v131;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    v138[1] = v108;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v138, 2);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "registerForMessage:receiver:policies:selector:", v107, self, v109, sel_handleClearCredentialMessage_);

    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    v137[0] = v131;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    v137[1] = v111;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v137, 2);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v110, "registerForMessage:receiver:policies:selector:", CFSTR("kSetStartUpColorTemperatureRequestKey"), self, v112, sel_handleSetStartUpColorTemperature_);

    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    v136[0] = v131;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    v136[1] = v114;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v136, 2);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "registerForMessage:receiver:policies:selector:", CFSTR("kGetStartUpColorTemperatureRequestKey"), self, v115, sel_handleGetStartUpColorTemperature_);

    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    v117 = *MEMORY[0x1E0CB7C70];
    v135[0] = v131;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    v135[1] = v118;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v135, 2);
    v119 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v116, "registerForMessage:receiver:policies:selector:", v117, self, v119, sel_handleGetAccessoryDiagnosticCountersMessage_);

    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    v121 = *MEMORY[0x1E0CB7C78];
    v134[0] = v131;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    v134[1] = v122;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v134, 2);
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v120, "registerForMessage:receiver:policies:selector:", v121, self, v123, sel_handleGetAccessoryDiagnosticEventsMessage_);

  }
  -[HMDHAPAccessory _registerForMessages_lowPowerMode](self, "_registerForMessages_lowPowerMode");
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v124, "addObserver:selector:name:object:", self, sel_handleCharacteristicsChangedNotification_, CFSTR("HMDAccessoryCharacteristicsChangedNotification"), self);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v125, "addObserver:selector:name:object:", self, sel_handleRoomChanged_, CFSTR("HMDNotificationAccessoryChangedRoom"), self);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v126, "addObserver:selector:name:object:", self, sel_handleRoomNameChanged_, CFSTR("HMDRoomNameUpdatedNotification"), 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v127, "addObserver:selector:name:object:", self, sel_handleAccessoryConfigured_, CFSTR("HMDAccessoryConnectedNotification"), self);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v128, "removeObserver:name:object:", self, CFSTR("HMDHomeUserRemovedNotification"), 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v129, "addObserver:selector:name:object:", self, sel_handleHomeUserRemovedNotification_, CFSTR("HMDHomeUserRemovedNotification"), v132);

}

- (id)transportReports
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v8), "report");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "setReason:", CFSTR("unchanged"));
        objc_msgSend(v3, "addObject:", v9);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  return v3;
}

- (void)configureWithHome:(id)a3 msgDispatcher:(id)a4 configurationTracker:(id)a5 initialConfiguration:(BOOL)a6
{
  uint64_t v6;
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  NSObject *v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  unsigned int v38;
  _QWORD block[5];
  id v40;
  id v41;
  NSObject *v42;
  uint64_t v43;
  char v44;
  objc_super v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  const __CFString *v49;
  __int16 v50;
  const __CFString *v51;
  __int16 v52;
  const __CFString *v53;
  __int16 v54;
  const __CFString *v55;
  __int16 v56;
  const __CFString *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  const __CFString *v61;
  __int16 v62;
  void *v63;
  __int16 v64;
  const __CFString *v65;
  __int16 v66;
  void *v67;
  uint64_t v68;

  v6 = a6;
  v68 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = HMFUptime();
  v15 = v14;
  if ((_DWORD)v6)
  {
    v37 = v11;
    v38 = v6;
    v16 = (void *)MEMORY[0x1D17BA0A0](v13);
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 0x1E0CB3000;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uuid");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory uuid](v17, "uuid");
      v36 = v16;
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138545922;
      v47 = v35;
      v48 = 2114;
      v49 = CFSTR("accessoryConfigureStart");
      v50 = 2112;
      v51 = CFSTR("Configuring accessory");
      v52 = 2114;
      v53 = CFSTR("state");
      v54 = 2112;
      v55 = CFSTR("start");
      v56 = 2114;
      v57 = CFSTR("homeUUID");
      v58 = 2112;
      v59 = v20;
      v60 = 2114;
      v61 = CFSTR("accessoryUUID");
      v62 = 2112;
      v63 = v21;
      v64 = 2114;
      v65 = CFSTR("initialConfig");
      v66 = 2112;
      v67 = v22;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x70u);

      v16 = v36;
      v19 = 0x1E0CB3000uLL;

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_alloc(MEMORY[0x1E0D334C8]);
    objc_msgSend(v10, "uuid");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory uuid](v17, "uuid");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(v19 + 2024), "numberWithBool:", 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    HMDTaggedLoggingCreateDictionary();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = (void *)objc_msgSend(v24, "initWithTag:data:", CFSTR("accessoryConfigureStart"), v28, CFSTR("state"), CFSTR("start"), CFSTR("homeUUID"), v25, CFSTR("accessoryUUID"), v26, CFSTR("initialConfig"), v27);
    objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "submitTaggedEvent:processorList:", v29, v30);

    v6 = v38;
    v11 = v37;
  }
  if (v12)
    dispatch_group_enter(v12);
  v45.receiver = self;
  v45.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:](&v45, sel_configureWithHome_msgDispatcher_configurationTracker_initialConfiguration_, v10, v11, v12, v6);
  -[HMDAccessory workQueue](self, "workQueue");
  v31 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __93__HMDHAPAccessory_configureWithHome_msgDispatcher_configurationTracker_initialConfiguration___block_invoke;
  block[3] = &unk_1E89C2708;
  block[4] = self;
  v40 = v11;
  v44 = v6;
  v41 = v10;
  v42 = v12;
  v43 = v15;
  v32 = v12;
  v33 = v10;
  v34 = v11;
  dispatch_async(v31, block);

}

- (void)setDefaultPreferredMediaUserIfNeeded
{
  void *v3;

  -[HMDAccessory preferredMediaUserUUID](self, "preferredMediaUserUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
    -[HMDHAPAccessory setDefaultPreferredMediaUser](self, "setDefaultPreferredMediaUser");
}

- (void)setDefaultPreferredMediaUser
{
  void *v3;
  int v4;
  void *v5;
  int v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  -[HMDAccessory home](self, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCurrentDeviceConfirmedPrimaryResident");
  -[HMDHAPAccessory siriEndpointProfile](self, "siriEndpointProfile");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    v6 = v4;
  else
    v6 = 0;
  if (v6 == 1)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v18 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting default preferred media user to owner", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(v3, "owner");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak((id *)buf, v8);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __47__HMDHAPAccessory_setDefaultPreferredMediaUser__block_invoke;
    v14[3] = &unk_1E89BF250;
    objc_copyWeak(&v16, (id *)buf);
    v13 = v12;
    v15 = v13;
    -[HMDAccessory setPreferredMediaUser:selectionType:completion:](v8, "setPreferredMediaUser:selectionType:completion:", v13, 1, v14);

    objc_destroyWeak(&v16);
    objc_destroyWeak((id *)buf);

  }
}

- (void)configureBulletinNotification
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __48__HMDHAPAccessory_configureBulletinNotification__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (id)settingTopicForKeyPath:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a3;
  -[HMDAccessory home](self, "home");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  MEMORY[0x1D17B8E58](v6, v7, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)eventSourceIdentifier
{
  void *v2;
  void *v3;

  -[HMDAccessory uuid](self, "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (double)eventTimestamp
{
  double result;

  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  return result;
}

- (id)eventForwarder
{
  void *v2;
  void *v3;
  void *v4;

  -[HMDAccessory home](self, "home");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "eventForwarder");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)eventStoreReadHandle
{
  void *v2;
  void *v3;
  void *v4;

  -[HMDAccessory home](self, "home");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "homeManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "eventStoreReadHandle");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)postUpdateEventsIfDifferentWithPreferredMediaUUID:(id)a3 selectionType:(unint64_t)a4
{
  id v6;
  NSObject *v7;
  _QWORD block[4];
  id v9;
  HMDHAPAccessory *v10;
  unint64_t v11;

  v6 = a3;
  if (_os_feature_enabled_impl())
  {
    -[HMDAccessory workQueue](self, "workQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __83__HMDHAPAccessory_postUpdateEventsIfDifferentWithPreferredMediaUUID_selectionType___block_invoke;
    block[3] = &unk_1E89BE2F0;
    v10 = self;
    v11 = a4;
    v9 = v6;
    dispatch_async(v7, block);

  }
}

- (void)_postUpdateEventsIfDifferent:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHAPAccessory *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMDHAPAccessory *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  HMDHAPAccessory *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  HMDHAPAccessory *v32;
  NSObject *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  _QWORD v42[5];
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  id v46;
  __int16 v47;
  id v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v44 = v9;
    v45 = 2112;
    v46 = v4;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Posting event to update primaryUserInfo: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  -[HMDAccessory uuid](v7, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory home](v7, "home");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10 && v12)
  {
    objc_msgSend(MEMORY[0x1E0CBA240], "topicFromSuffixID:homeUUID:accessoryUUID:", *MEMORY[0x1E0CB7C28], v12, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory eventStoreReadHandle](v7, "eventStoreReadHandle");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "lastEventForTopic:", v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      v16 = objc_alloc(MEMORY[0x1E0CBA258]);
      objc_msgSend(v15, "encodedData");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (void *)objc_msgSend(v16, "initWithProtoData:", v17);

      if (v18)
      {
        if (objc_msgSend(v18, "isEqual:", v4))
        {
          v19 = (void *)MEMORY[0x1D17BA0A0]();
          v20 = v7;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v44 = v22;
            _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Skip sending event update for primaryUserInfo as it matches stored", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v19);
LABEL_21:

          goto LABEL_22;
        }
LABEL_18:
        v31 = (void *)MEMORY[0x1D17BA0A0]();
        v32 = v7;
        HMFGetOSLogHandle();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v44 = v34;
          v45 = 2112;
          v46 = v13;
          v47 = 2112;
          v48 = v4;
          _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Forwarding event with topic: %@ for primaryUserInfo: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v31);
        v35 = objc_alloc(MEMORY[0x1E0D32D38]);
        -[HMDHAPAccessory eventSourceIdentifier](v32, "eventSourceIdentifier");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory eventTimestamp](v32, "eventTimestamp");
        v37 = (void *)objc_msgSend(v35, "initWithSource:cachePolicy:combineType:timestamp:", v36, 2, 2);

        v38 = objc_alloc(MEMORY[0x1E0D32D28]);
        objc_msgSend(v4, "protoData");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = (void *)objc_msgSend(v38, "initWithEventData:metadata:", v39, v37);

        -[HMDHAPAccessory eventForwarder](v32, "eventForwarder");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42[0] = MEMORY[0x1E0C809B0];
        v42[1] = 3221225472;
        v42[2] = __48__HMDHAPAccessory__postUpdateEventsIfDifferent___block_invoke;
        v42[3] = &unk_1E89C2350;
        v42[4] = v32;
        objc_msgSend(v41, "forwardEvent:topic:completion:", v40, v13, v42);

        goto LABEL_21;
      }
      v27 = (void *)MEMORY[0x1D17BA0A0]();
      v28 = v7;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v44 = v30;
        v45 = 2112;
        v46 = v13;
        _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_ERROR, "%{public}@Error reading stored primary user for topic %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v27);
    }
    v18 = 0;
    goto LABEL_18;
  }
  v23 = (void *)MEMORY[0x1D17BA0A0]();
  v24 = v7;
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v44 = v26;
    v45 = 2112;
    v46 = v12;
    v47 = 2112;
    v48 = v10;
    _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@Unexpected nil value in homeUUID: %@, accessoryUUID: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v23);
LABEL_22:

}

- (void)updateAccessoryFlags:(id)a3
{
  NSNumber *v4;
  NSNumber *accessoryFlags;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((HMFEqualObjects() & 1) == 0)
  {
    v4 = (NSNumber *)objc_msgSend(v6, "copy");
    accessoryFlags = self->_accessoryFlags;
    self->_accessoryFlags = v4;

  }
  os_unfair_recursive_lock_unlock();

}

- (void)setAccessoryFlags:(id)a3
{
  id v4;

  if (a3)
  {
    -[HMDHAPAccessory updateAccessoryFlags:](self, "updateAccessoryFlags:");
    -[HMDAccessory home](self, "home");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "saveWithReason:postSyncNotification:", CFSTR("kAccessoryInformationUpdate"), 0);

  }
}

- (void)setInternalEnhancedAuthMethod:(id)a3 configNumber:(unint64_t)a4
{
  NSObject *v7;
  NSNumber *v8;
  NSNumber *v9;
  NSNumber *internalEnhancedAuthConfigNumber;
  void *v11;
  id v12;

  v12 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  os_unfair_recursive_lock_lock_with_options();
  v8 = self->_internalEnhancedAuthMethod;
  objc_storeStrong((id *)&self->_internalEnhancedAuthMethod, a3);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a4);
  v9 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  internalEnhancedAuthConfigNumber = self->_internalEnhancedAuthConfigNumber;
  self->_internalEnhancedAuthConfigNumber = v9;

  os_unfair_recursive_lock_unlock();
  if ((HMFEqualObjects() & 1) == 0)
  {
    -[HMDHAPAccessory _handleUpdatedAuthMethod](self, "_handleUpdatedAuthMethod");
    -[HMDAccessory home](self, "home");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "saveWithReason:postSyncNotification:", CFSTR("HMDHAPAccessorySaveAuthMethodReason"), 0);

  }
}

- (void)testSetInternalEnhancedAuthMethod:(id)a3
{
  NSNumber *v4;
  NSNumber *internalEnhancedAuthMethod;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  internalEnhancedAuthMethod = self->_internalEnhancedAuthMethod;
  self->_internalEnhancedAuthMethod = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)testSetInternalEnhancedAuthConfigNumber:(id)a3
{
  NSNumber *v4;
  NSNumber *internalEnhancedAuthConfigNumber;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  internalEnhancedAuthConfigNumber = self->_internalEnhancedAuthConfigNumber;
  self->_internalEnhancedAuthConfigNumber = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)handleUpdatedAuthMethod
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __42__HMDHAPAccessory_handleUpdatedAuthMethod__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_handleUpdatedAuthMethod
{
  NSObject *v3;

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHAPAccessory _handleUpdatedServicesForProfilesAndControllers:](self, "_handleUpdatedServicesForProfilesAndControllers:", 0);
}

- (void)_updateBroadcastKey:(id)a3 keyUpdatedStateNumber:(id)a4 keyUpdatedTime:(double)a5
{
  id v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a3;
  v8 = a4;
  -[HMDHAPAccessory broadcastKey](self, "broadcastKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = HMFEqualObjects();

  if ((v10 & 1) == 0)
  {
    -[HMDHAPAccessory transactionWithObjectChangeType:](self, "transactionWithObjectChangeType:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setBroadcastKey:", v17);
    objc_msgSend(v11, "setKeyUpdatedStateNumber:", v8);
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a5);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setKeyUpdatedTime:", v12);

    -[HMDAccessory home](self, "home");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "backingStore");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "transaction:options:", CFSTR("AccessoryUpdated"), v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v16, "add:", v11);
    objc_msgSend(v16, "run");

  }
}

- (void)setBroadcastKey:(id)a3 keyUpdatedStateNumber:(id)a4 keyUpdatedTime:(id)a5
{
  id v8;
  id v9;
  void *v10;
  NSData *v11;
  NSData *broadcastKey;
  NSNumber *v13;
  NSNumber *keyUpdatedStateNumber;
  NSDate *v15;
  NSDate *keyUpdatedTime;
  id v17;
  HMFTimer *v18;
  HMFTimer *accessoryKeyRefreshTimer;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;

  v25 = a3;
  v8 = a4;
  v9 = a5;
  -[HMDAccessory identifier](self, "identifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_recursive_lock_lock_with_options();
  v11 = (NSData *)objc_msgSend(v25, "copy");
  broadcastKey = self->_broadcastKey;
  self->_broadcastKey = v11;

  v13 = (NSNumber *)objc_msgSend(v8, "copy");
  keyUpdatedStateNumber = self->_keyUpdatedStateNumber;
  self->_keyUpdatedStateNumber = v13;

  v15 = (NSDate *)objc_msgSend(v9, "copy");
  keyUpdatedTime = self->_keyUpdatedTime;
  self->_keyUpdatedTime = v15;

  v17 = objc_alloc(MEMORY[0x1E0D286C8]);
  v18 = (HMFTimer *)objc_msgSend(v17, "initWithTimeInterval:options:", 1, (double)(unint64_t)broadcastKeyRefreshTimeInSeconds * 0.5+ (double)(arc4random() % 0x2E + 15));
  accessoryKeyRefreshTimer = self->_accessoryKeyRefreshTimer;
  self->_accessoryKeyRefreshTimer = v18;

  -[HMDHAPAccessory accessoryKeyRefreshTimer](self, "accessoryKeyRefreshTimer");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setDelegate:", self);

  self->_keyGenerationType = 0;
  -[HMDHAPAccessory accessoryKeyRefreshTimer](self, "accessoryKeyRefreshTimer");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "resume");

  os_unfair_recursive_lock_unlock();
  -[HMDAccessory home](self, "home");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "accessoryBrowser");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "accessoryBrowserHapProtocol");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "timeIntervalSinceReferenceDate");
  objc_msgSend(v24, "updateBroadcastKeyForIdentifier:key:keyUpdatedStateNumber:keyUpdatedTime:", v10, v25, v8);

}

- (void)setConnectivityInfo:(id)a3
{
  HMFConnectivityInfo *v4;
  HMFConnectivityInfo *connectivityInfo;

  v4 = (HMFConnectivityInfo *)a3;
  os_unfair_recursive_lock_lock_with_options();
  connectivityInfo = self->_connectivityInfo;
  self->_connectivityInfo = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)setSetupHash:(id)a3
{
  NSData *v4;
  NSData *setupHash;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((HMFEqualObjects() & 1) == 0)
  {
    v4 = (NSData *)objc_msgSend(v6, "copy");
    setupHash = self->_setupHash;
    self->_setupHash = v4;

  }
  os_unfair_recursive_lock_unlock();

}

- (void)setNeedsOnboarding:(id)a3
{
  NSNumber *v4;
  NSNumber *needsOnboarding;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((HMFEqualObjects() & 1) == 0)
  {
    v4 = (NSNumber *)objc_msgSend(v6, "copy");
    needsOnboarding = self->_needsOnboarding;
    self->_needsOnboarding = v4;

  }
  os_unfair_recursive_lock_unlock();

}

- (void)updateSymptoms
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __33__HMDHAPAccessory_updateSymptoms__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (NSArray)targetUUIDs
{
  NSArray *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_targetUUIDs;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setTargetUUIDs:(id)a3
{
  NSArray *v4;
  NSArray *targetUUIDs;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if ((HMFEqualObjects() & 1) == 0)
  {
    v4 = (NSArray *)objc_msgSend(v6, "copy");
    targetUUIDs = self->_targetUUIDs;
    self->_targetUUIDs = v4;

  }
  os_unfair_recursive_lock_unlock();

}

- (void)setHardwareSupport:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_hardwareSupport = a3;
  os_unfair_recursive_lock_unlock();
}

- (void)saveHardwareSupport:(BOOL)a3
{
  NSObject *v5;
  _QWORD v6[5];
  BOOL v7;

  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __39__HMDHAPAccessory_saveHardwareSupport___block_invoke;
  v6[3] = &unk_1E89C2758;
  v6[4] = self;
  v7 = a3;
  dispatch_async(v5, v6);

}

- (void)_saveHardwareSupport:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a3;
  -[HMDHAPAccessory transactionWithObjectChangeType:](self, "transactionWithObjectChangeType:", 2);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setHardwareSupport:", v5);

  -[HMDAccessory home](self, "home");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "backingStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "transaction:options:", CFSTR("SaveHardwareSupport"), v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "add:", v10);
  objc_msgSend(v9, "run");

}

- (void)setTargetControllerManager:(id)a3
{
  HMDTargetControllerManager *v4;
  HMDTargetControllerManager *targetControllerManager;

  v4 = (HMDTargetControllerManager *)a3;
  os_unfair_recursive_lock_lock_with_options();
  targetControllerManager = self->_targetControllerManager;
  self->_targetControllerManager = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)saveTargetUUIDs:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __35__HMDHAPAccessory_saveTargetUUIDs___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_saveTargetUUIDs:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a3;
  -[HMDHAPAccessory transactionWithObjectChangeType:](self, "transactionWithObjectChangeType:", 2);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setTargetUUIDs:", v4);

  -[HMDAccessory home](self, "home");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "backingStore");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "transaction:options:", CFSTR("SaveTargetUUIDs"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "add:", v9);
  objc_msgSend(v8, "run");

}

- (void)updateTargetUUIDs:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory targetUUIDs](v7, "targetUUIDs");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      v18 = 2112;
      v19 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Updating targetUUIDs %@ -> %@", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHAPAccessory setTargetUUIDs:](v7, "setTargetUUIDs:", v4);
    -[HMDHAPAccessory updateSymptoms](v7, "updateSymptoms");
    -[HMDHAPAccessory targetControllerManager](v7, "targetControllerManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "updateTargets:", v4);

  }
  else
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v13;
      v16 = 2112;
      v17 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Attempt to update targets to %@ with no target controller manager", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

}

- (BOOL)providesHashRouteID
{
  return -[HMDHAPAccessory hasTelevisionService](self, "hasTelevisionService")
      || -[HMDHAPAccessory hasSmartSpeakerService](self, "hasSmartSpeakerService");
}

- (HMDAccessorySymptomHandler)symptomsHandler
{
  HMDAccessorySymptomHandler *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_symptomsHandler;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setSymptomsHandler:(id)a3
{
  HMDAccessorySymptomHandler *v4;
  HMDAccessorySymptomHandler *symptomsHandler;

  v4 = (HMDAccessorySymptomHandler *)a3;
  os_unfair_recursive_lock_lock_with_options();
  symptomsHandler = self->_symptomsHandler;
  self->_symptomsHandler = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)setShouldDisconnectOnIdle:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  uint64_t v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *context;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  id v25;
  __int16 v26;
  id v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v3 = a3;
  v30 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory bridge](self, "bridge");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    objc_msgSend(v5, "getPrimaryHAPAccessories");
  else
    -[HMDHAPAccessory getPrimaryHAPAccessories](self, "getPrimaryHAPAccessories");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = os_unfair_recursive_lock_lock_with_options();
  if (self->_shouldDisconnectOnIdle != v3)
  {
    context = (void *)MEMORY[0x1D17BA0A0](v7);
    v8 = self;
    HMFGetOSLogHandle();
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (id)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v11 = (id)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v25 = v10;
      v26 = 2112;
      v27 = v11;
      v28 = 2112;
      v29 = v12;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating shouldDisconnectOnIdle from: %@ to: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(context);
    self->_shouldDisconnectOnIdle = v3;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v13 = v18;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v20 != v15)
            objc_enumerationMutation(v13);
          objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * i), "setShouldDisconnectOnIdle:", v3, context);
        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v14);
    }

  }
  os_unfair_recursive_lock_unlock();

}

- (BOOL)supportsDiagnosticsTransfer
{
  void *v3;
  void *v4;
  BOOL v5;
  void *v6;

  if (!_os_feature_enabled_impl())
    return 0;
  if (-[HMDHAPAccessory supportsCHIP](self, "supportsCHIP"))
  {
    -[HMDHAPAccessory matterDiagnosticManager](self, "matterDiagnosticManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "supportedDiagnostics");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
      return 1;
  }
  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", *MEMORY[0x1E0CB99F8]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v6 != 0;

  return v5;
}

- (HMSupportedAccessoryDiagnostics)supportedDiagnostics
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  BOOL v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;

  -[HMDHAPAccessory matterDiagnosticManager](self, "matterDiagnosticManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[HMDHAPAccessory matterDiagnosticManager](self, "matterDiagnosticManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "supportedDiagnostics");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[HMDHAPAccessory findCharacteristicType:forServiceType:](self, "findCharacteristicType:forServiceType:", *MEMORY[0x1E0CB8A88], *MEMORY[0x1E0CB99F8]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      v7 = (void *)MEMORY[0x1E0D165E0];
      objc_msgSend(v4, "value");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 0;
      objc_msgSend(v7, "parsedFromData:error:", v8, &v22);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v22;

      objc_msgSend(v9, "options");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "value");

      objc_msgSend(v9, "type");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "value");

      objc_msgSend(v9, "format");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15
        && ((objc_msgSend(v9, "format"),
             v16 = (void *)objc_claimAutoreleasedReturnValue(),
             v17 = objc_msgSend(v16, "value"),
             v16,
             v17 <= 1)
          ? (v18 = v10 == 0)
          : (v18 = 0),
            v18))
      {
        objc_msgSend(v9, "audioDiagnostics");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "value");

        v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBA8D8]), "initWithSupportedTypes:format:audio:options:", v14, v17 + 1, v20, v12);
      }
      else
      {
        v5 = 0;
      }

    }
    else
    {
      v5 = 0;
    }
  }

  return (HMSupportedAccessoryDiagnostics *)v5;
}

- (BOOL)hasBattery
{
  void *v2;
  BOOL v3;

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", *MEMORY[0x1E0CB99B8]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (void)setSiriEndpointCapabilities:(unint64_t)a3
{
  uint64_t v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_siriEndpointCapabilities == a3)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_siriEndpointCapabilities = a3;
    v5 = os_unfair_recursive_lock_unlock();
    v6 = (void *)MEMORY[0x1D17BA0A0](v5);
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v9;
      v16 = 2112;
      v17 = v10;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@SiriEndPointFeatureSupportChanged to %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDAccessory home](v7, "home");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "homeManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory uuid](v7, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("SiriEndPointFeatureSupportChanged"), v13, 1);

  }
}

- (unint64_t)siriEndpointCapabilities
{
  unint64_t siriEndpointCapabilities;

  os_unfair_recursive_lock_lock_with_options();
  siriEndpointCapabilities = self->_siriEndpointCapabilities;
  os_unfair_recursive_lock_unlock();
  return siriEndpointCapabilities;
}

- (BOOL)supportsAnnounce
{
  return -[HMDHAPAccessory siriEndpointCapabilities](self, "siriEndpointCapabilities") & 1;
}

- (BOOL)supportsMusicAlarm
{
  return (-[HMDHAPAccessory siriEndpointCapabilities](self, "siriEndpointCapabilities") >> 1) & 1;
}

- (BOOL)supportsMultiUser
{
  return (-[HMDHAPAccessory siriEndpointCapabilities](self, "siriEndpointCapabilities") >> 2) & 1;
}

- (BOOL)supportsDoorbellChime
{
  return (-[HMDHAPAccessory siriEndpointCapabilities](self, "siriEndpointCapabilities") >> 3) & 1;
}

- (BOOL)supportsUserMediaSettings
{
  return (-[HMDHAPAccessory siriEndpointCapabilities](self, "siriEndpointCapabilities") >> 4) & 1;
}

- (void)setSupportsAccessCode:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_supportsAccessCode = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)supportsAccessCode
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_supportsAccessCode;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (BOOL)_handleUpdatedServicesForAccessCodes
{
  void *v3;
  int v4;
  int supportsAccessCode;

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000260-0000-1000-8000-0026BB765291"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  os_unfair_recursive_lock_lock_with_options();
  supportsAccessCode = self->_supportsAccessCode;
  if (supportsAccessCode == v4)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_supportsAccessCode = v4;
    os_unfair_recursive_lock_unlock();
    logAndPostNotification(CFSTR("HMDAccessorySupportsAccessCodeDidChangeNotification"), self, 0);
  }
  return supportsAccessCode != v4;
}

- (void)setSupportsWalletKey:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_supportsWalletKey = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)supportsAnyInPersonAccess
{
  return -[HMDHAPAccessory supportsAccessCode](self, "supportsAccessCode")
      || -[HMDHAPAccessory supportsWalletKey](self, "supportsWalletKey");
}

- (BOOL)_handleUpdatedServicesForWalletKey
{
  void *v3;
  int v4;
  int supportsWalletKey;

  -[HMDHAPAccessory services](self, "services");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "na_any:", &__block_literal_global_267))
    v4 = objc_msgSend(v3, "na_any:", &__block_literal_global_268);
  else
    v4 = 0;
  os_unfair_recursive_lock_lock_with_options();
  supportsWalletKey = self->_supportsWalletKey;
  if (supportsWalletKey == v4)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    self->_supportsWalletKey = v4;
    os_unfair_recursive_lock_unlock();
    logAndPostNotification(CFSTR("HMDAccessorySupportsWalletKeyDidChangeNotification"), self, 0);
  }

  return supportsWalletKey != v4;
}

- (BOOL)supportsNetworkProtection
{
  void *v3;
  HMDHAPAccessory *v4;
  NSObject *v5;
  void *v6;
  const char *v7;
  void *v8;
  void *v9;
  BOOL v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHAPAccessory *v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  void *v36;
  HMDHAPAccessory *v37;
  NSObject *v38;
  void *v39;
  id obj;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (-[HMDHAPAccessory supportsCHIP](self, "supportsCHIP"))
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v47 = v6;
      v7 = "%{public}@Accessory does not support network protection because it supports CHIP";
LABEL_8:
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEBUG, v7, buf, 0xCu);
LABEL_11:

      goto LABEL_12;
    }
    goto LABEL_12;
  }
  if (!-[HMDHAPAccessory hasIPLink](self, "hasIPLink"))
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory transportInformationInstances](v4, "transportInformationInstances");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v47 = v6;
      v48 = 2112;
      v49 = v9;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Accessory does not support network protection because it has no IP Link. transportInformationInstances: %@", buf, 0x16u);

      goto LABEL_11;
    }
    goto LABEL_12;
  }
  -[HMDHAPAccessory bridge](self, "bridge");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v47 = v6;
      v7 = "%{public}@Accessory does not support network protection because it is a bridged accessory";
      goto LABEL_8;
    }
LABEL_12:

    objc_autoreleasePoolPop(v3);
    return 0;
  }
  -[HMDAccessory initialCategoryIdentifier](self, "initialCategoryIdentifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "categoryForIdentifier:", v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "uuidStr");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v47 = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@supportsNetworkProtection: falling back to current category because initialCategoryIdentifier is unavailable", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    -[HMDAccessory category](v17, "category");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "categoryType");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }

  if ((objc_msgSend(v15, "isEqualToString:", *MEMORY[0x1E0CB7AF8]) & 1) != 0
    || (objc_msgSend(v15, "isEqualToString:", *MEMORY[0x1E0CB7AC8]) & 1) != 0
    || (objc_msgSend(v15, "isEqualToString:", *MEMORY[0x1E0CB7AD8]) & 1) != 0
    || objc_msgSend(v15, "isEqualToString:", *MEMORY[0x1E0CB7AE0]))
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v47 = v23;
      v48 = 2112;
      v49 = v15;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Accessory does not support network protection because of its category type: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    v10 = 0;
  }
  else
  {
    -[HMDHAPAccessory initialServiceTypeUUIDs](self, "initialServiceTypeUUIDs");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v24)
    {
      v25 = (void *)MEMORY[0x1D17BA0A0]();
      v26 = self;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v47 = v28;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@supportsNetworkProtection: falling back to current service types because initialServiceTypeUUIDs is unavailable", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v25);
      -[HMDHAPAccessory initialServiceTypeUUIDs](v26, "initialServiceTypeUUIDs");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    obj = v24;
    v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v42;
      v32 = *MEMORY[0x1E0CB9B18];
      v33 = *MEMORY[0x1E0CB9AF0];
      while (2)
      {
        for (i = 0; i != v30; ++i)
        {
          if (*(_QWORD *)v42 != v31)
            objc_enumerationMutation(obj);
          v35 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
          if ((objc_msgSend(v35, "isEqualToString:", v32) & 1) != 0
            || (objc_msgSend(v35, "isEqualToString:", CFSTR("00000701-0000-1000-8000-0026BB765291")) & 1) != 0
            || objc_msgSend(v35, "isEqualToString:", v33))
          {
            v36 = (void *)MEMORY[0x1D17BA0A0]();
            v37 = self;
            HMFGetOSLogHandle();
            v38 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v47 = v39;
              v48 = 2112;
              v49 = v35;
              _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_DEBUG, "%{public}@Accessory does not support network protection because of its serviceType: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v36);
            v10 = 0;
            goto LABEL_46;
          }
        }
        v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
        v10 = 1;
        if (v30)
          continue;
        break;
      }
    }
    else
    {
      v10 = 1;
    }
LABEL_46:

  }
  return v10;
}

- (BOOL)needsAirplayAccess
{
  void *v3;
  BOOL v4;
  void *v5;

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000228-0000-1000-8000-0026BB765291"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = 1;
  }
  else
  {
    -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000253-0000-1000-8000-0026BB765291"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v5 != 0;

  }
  return v4;
}

- (BOOL)_serviceSupportsMinimumUserPrivilege:(id)a3
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;

  v3 = a3;
  objc_msgSend(v3, "serviceType");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CB9AF0]) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    objc_msgSend(v3, "serviceType");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v6, "isEqualToString:", CFSTR("00000228-0000-1000-8000-0026BB765291")) & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      objc_msgSend(v3, "serviceType");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v7, "isEqualToString:", CFSTR("000000DA-0000-1000-8000-0026BB765291"));

    }
  }

  return v5;
}

- (void)handleUpdatedMinimumUserPrivilege:(int64_t)a3
{
  NSObject *v5;
  _QWORD v6[6];

  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __53__HMDHAPAccessory_handleUpdatedMinimumUserPrivilege___block_invoke;
  v6[3] = &unk_1E89C0B98;
  v6[4] = self;
  v6[5] = a3;
  dispatch_async(v5, v6);

}

- (void)handleUpdatedPassword:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __41__HMDHAPAccessory_handleUpdatedPassword___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_renameAccessory:(id)a3 resetName:(BOOL)a4 message:(id)a5
{
  _BOOL8 v6;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  objc_super v14;
  _QWORD v15[5];
  id v16;
  BOOL v17;

  v6 = a4;
  v8 = a3;
  v9 = a5;
  if (-[HMDHAPAccessory hasSmartSpeakerService](self, "hasSmartSpeakerService"))
  {
    v10 = v8;
    if (v6)
    {
      -[HMDAccessory room](self, "room");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "name");
      v12 = objc_claimAutoreleasedReturnValue();

      v10 = (id)v12;
    }
    -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000228-0000-1000-8000-0026BB765291"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __54__HMDHAPAccessory__renameAccessory_resetName_message___block_invoke;
    v15[3] = &unk_1E89AB128;
    v15[4] = self;
    v17 = v6;
    v16 = v9;
    -[HMDHAPAccessory _renameService:name:message:completionBlock:](self, "_renameService:name:message:completionBlock:", v13, v10, 0, v15);

  }
  else
  {
    v14.receiver = self;
    v14.super_class = (Class)HMDHAPAccessory;
    -[HMDAccessory _renameAccessory:resetName:message:](&v14, sel__renameAccessory_resetName_message_, v8, v6, v9);
  }

}

- (void)_handleUpdatedName:(id)a3
{
  id v4;
  void *v5;
  objc_super v6;

  v4 = a3;
  v6.receiver = self;
  v6.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory _handleUpdatedName:](&v6, sel__handleUpdatedName_, v4);
  if (-[HMDHAPAccessory hasSmartSpeakerService](self, "hasSmartSpeakerService"))
  {
    -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000228-0000-1000-8000-0026BB765291"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory _renameService:name:message:completionBlock:](self, "_renameService:name:message:completionBlock:", v5, v4, 0, 0);

  }
}

- (void)_updateAuthMethodWithServer:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDAccessory workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v8);

  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v12;
    v21 = 2112;
    v22 = v13;
    _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Attempting to validate the pairing auth method for %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v9);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __58__HMDHAPAccessory__updateAuthMethodWithServer_completion___block_invoke;
  v16[3] = &unk_1E89AB150;
  v16[4] = v10;
  v17 = v6;
  v18 = v7;
  v14 = v7;
  v15 = v6;
  objc_msgSend(v15, "validatePairingAuthMethod:", v16);

}

- (void)_configNumberUpdated
{
  NSObject *v3;

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHAPAccessory _challengeAccessoryAuthMethod](self, "_challengeAccessoryAuthMethod");
}

- (void)_challengeAccessoryAuthMethod
{
  NSObject *v3;
  BOOL v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  v4 = -[HMDHAPAccessory isPrimary](self, "isPrimary");
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v19 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Updating our auth method because c# changed", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v17 = 0;
    -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](v6, "preferredHAPAccessoryForOperation:linkType:", 10, &v17);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "server");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      -[HMDHAPAccessory _updateAuthMethodWithServer:completion:](v6, "_updateAuthMethodWithServer:completion:", v11, 0);
    }
    else
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = v6;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v19 = v16;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Unable to find accessory server to challenge for auth method", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v13);
    }

  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v19 = v12;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Not challenging for auth method on a bridged accessory", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }
}

- (id)_messagesForUpdatedRoom:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  -[HMDHAPAccessory services](self, "services", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    v9 = *MEMORY[0x1E0CB9AF0];
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend(v11, "serviceType");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "isEqualToString:", v9);

        if (v13)
        {
          -[HMDAccessory room](self, "room");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "messagesForUpdatedRoom:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObjectsFromArray:", v15);

          goto LABEL_11;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v7)
        continue;
      break;
    }
  }
LABEL_11:

  v16 = (void *)objc_msgSend(v4, "copy");
  return v16;
}

- (void)_handleRoomChangedFromOldRoomName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory room](self, "room");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "name");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = HMFEqualObjects();

  if ((v7 & 1) == 0)
  {
    -[HMDAccessory room](self, "room");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory _messagesForUpdatedRoom:](self, "_messagesForUpdatedRoom:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v10 = v9;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v18;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v18 != v13)
            objc_enumerationMutation(v10);
          v15 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v14);
          -[HMDAccessory msgDispatcher](self, "msgDispatcher", (_QWORD)v17);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "sendMessage:completionHandler:", v15, 0);

          ++v14;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v12);
    }

  }
}

- (void)handleRoomNameChanged:(id)a3
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  id v18;

  v18 = a3;
  objc_msgSend(v18, "object");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    -[HMDAccessory room](self, "room");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = HMFEqualObjects();

    if (v8)
    {
      objc_msgSend(v18, "userInfo");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "hmf_stringForKey:", CFSTR("kRoomOldNameKey"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDHAPAccessory _handleRoomChangedFromOldRoomName:](self, "_handleRoomChangedFromOldRoomName:", v10);
      objc_msgSend(v18, "userInfo");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "hmf_BOOLForKey:", CFSTR("HMIsCloudSourceKey"));

      if (-[HMDHAPAccessory hasSmartSpeakerService](self, "hasSmartSpeakerService"))
      {
        -[HMDHAPAccessory getConfiguredName](self, "getConfiguredName");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (v13)
          v12 = 1;

        if ((v12 & 1) == 0)
        {
          objc_msgSend(v18, "userInfo");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "hmf_stringForKey:", CFSTR("kRoomOldNameKey"));
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          -[HMDHAPAccessory name](self, "name");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = HMFEqualObjects();

          if ((v17 & 1) == 0)
            -[HMDAccessory notifyAccessoryNameChanged:](self, "notifyAccessoryNameChanged:", 1);

        }
      }

    }
  }

}

- (void)handleRoomChanged:(id)a3
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  id v19;

  v19 = a3;
  objc_msgSend(v19, "object");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    objc_msgSend(v6, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory uuid](self, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v7, "isEqual:", v8);

    if (v9)
    {
      objc_msgSend(v19, "userInfo");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "hmf_stringForKey:", CFSTR("kRoomOldNameKey"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDHAPAccessory _handleRoomChangedFromOldRoomName:](self, "_handleRoomChangedFromOldRoomName:", v11);
      objc_msgSend(v19, "userInfo");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "hmf_BOOLForKey:", CFSTR("HMIsCloudSourceKey"));

      if (-[HMDHAPAccessory hasSmartSpeakerService](self, "hasSmartSpeakerService"))
      {
        -[HMDHAPAccessory getConfiguredName](self, "getConfiguredName");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (v14)
          v13 = 1;

        if ((v13 & 1) == 0)
        {
          objc_msgSend(v19, "userInfo");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "hmf_stringForKey:", CFSTR("kRoomOldNameKey"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          -[HMDHAPAccessory name](self, "name");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = HMFEqualObjects();

          if ((v18 & 1) == 0)
            -[HMDAccessory notifyAccessoryNameChanged:](self, "notifyAccessoryNameChanged:", 1);

        }
      }

    }
  }

}

- (void)__checkLowBatteryUpdatedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  _BOOL4 v12;
  _BOOL8 v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHAPAccessory *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kModifiedCharacteristicsKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  objc_msgSend(v8, "hmf_firstObjectWithCharacteristicType:", *MEMORY[0x1E0CB8A60]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    objc_msgSend(v9, "value");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = +[HMDCharacteristic value:differentThan:](HMDCharacteristic, "value:differentThan:", v11, &unk_1E8B32EE0);
    if (v12 == -[HMDAccessory isLowBattery](self, "isLowBattery"))
    {
      v13 = !v12;
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "previousValue");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = 138543874;
        v25 = v17;
        v26 = 2112;
        v27 = v18;
        v28 = 2112;
        v29 = v11;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Low Battery value updated: %@ -> %@", (uint8_t *)&v24, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = v15;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = 138543618;
        v25 = v22;
        v26 = 2114;
        v27 = v23;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Updating low battery to %{public}@", (uint8_t *)&v24, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      -[HMDAccessory setLowBattery:](v20, "setLowBattery:", v13);
    }

  }
}

- (void)__handleCharacteristicsChangedPayload:(id)a3
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  void *v27;
  void *v28;
  HMDHAPAccessory *v29;
  void *v30;
  void *v31;
  id obj;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD aBlock[6];
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  _BYTE v44[128];
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a3, "hmf_arrayForKey:", CFSTR("kModifiedCharacteristicsKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0;
  -[HMDAccessory home](self, "home");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory transactionWithObjectChangeType:](self, "transactionWithObjectChangeType:", 2);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v40;
    v29 = self;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v40 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
        objc_msgSend(v9, "accessory");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqual:", self);

        if (v11)
        {
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = __57__HMDHAPAccessory___handleCharacteristicsChangedPayload___block_invoke;
          aBlock[3] = &unk_1E89AB178;
          aBlock[4] = self;
          aBlock[5] = v9;
          v38 = v31;
          v12 = _Block_copy(aBlock);
          objc_msgSend(v9, "service");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "type");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "value");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "serviceType");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "accessory");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDService processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:](HMDService, "processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:", v14, v15, v16, v13, v12, v17, v30, &v43);

          self = v29;
        }
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
    }
    while (v6);
  }

  if (v43 || objc_msgSend(v31, "count"))
  {
    +[HMDBackingStoreTransactionOptions optionsWithSource:destination:mustReplay:mustPush:](HMDBackingStoreTransactionOptions, "optionsWithSource:destination:mustReplay:mustPush:", 0, 0, 0, 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v28, "isCurrentDeviceConfirmedPrimaryResident"))
    {
      +[HMDBackingStoreTransactionOptions optionsWithSource:destination:mustReplay:mustPush:](HMDBackingStoreTransactionOptions, "optionsWithSource:destination:mustReplay:mustPush:", 0, 2, 1, 0);
      v19 = objc_claimAutoreleasedReturnValue();

      v18 = (void *)v19;
    }
    objc_msgSend(v28, "backingStore");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "transaction:options:", CFSTR("HMDCharacteristicsChanged"), v18);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v22 = v31;
    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v33, v44, 16);
    if (v23)
    {
      v24 = v23;
      v25 = *(_QWORD *)v34;
      do
      {
        for (j = 0; j != v24; ++j)
        {
          if (*(_QWORD *)v34 != v25)
            objc_enumerationMutation(v22);
          objc_msgSend(v22, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * j));
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "add:withMessage:", v27, 0);

        }
        v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v33, v44, 16);
      }
      while (v24);
    }

    if (v43)
      objc_msgSend(v21, "add:", v30);
    objc_msgSend(v21, "run");

  }
}

- (void)handleCharacteristicsChangedNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __60__HMDHAPAccessory_handleCharacteristicsChangedNotification___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (BOOL)isReadingRequiredForBTLEAccessoryCharacteristic:(id)a3 forceReadFWVersion:(BOOL)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  int v17;
  BOOL v18;
  void *v19;
  int v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  void *v27;
  int v28;
  void *v29;
  int v30;
  void *v31;
  int v32;
  void *v33;
  int v34;
  void *v35;
  int v36;

  v6 = a3;
  objc_msgSend(v6, "service");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "type");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0CB99A0]) & 1) == 0
    && !objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0D161A0]))
  {
LABEL_23:
    if (!objc_msgSend(v8, "isEqualToString:", CFSTR("00000239-0000-1000-8000-0026BB765291"))
      || (objc_msgSend(v6, "type"),
          v27 = (void *)objc_claimAutoreleasedReturnValue(),
          v28 = objc_msgSend(v27, "isEqualToString:", CFSTR("0000023A-0000-1000-8000-0026BB765291")),
          v27,
          !v28))
    {
      if (objc_msgSend(v8, "isEqualToString:", CFSTR("00000701-0000-1000-8000-0026BB765291")))
      {
        -[HMDAccessory home](self, "home");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v29, "isOwnerUser");

        if (v30)
        {
          objc_msgSend(v6, "type");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = objc_msgSend(v31, "isEqualToString:", CFSTR("00000702-0000-1000-8000-0026BB765291"));

          if (v32)
          {
            -[HMDHAPAccessory internalThreadCapabilities](self, "internalThreadCapabilities");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            goto LABEL_34;
          }
          objc_msgSend(v6, "type");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = objc_msgSend(v33, "isEqualToString:", CFSTR("00000703-0000-1000-8000-0026BB765291"));

          if (v34)
          {
            -[HMDHAPAccessory internalThreadStatus](self, "internalThreadStatus");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            goto LABEL_34;
          }
          objc_msgSend(v6, "type");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = objc_msgSend(v35, "isEqualToString:", CFSTR("0000022B-0000-1000-8000-0026BB765291"));

          if (v36)
          {
            -[HMDHAPAccessory internalThreadActive](self, "internalThreadActive");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            goto LABEL_34;
          }
        }
      }
      v18 = 0;
      goto LABEL_35;
    }
    -[HMDHAPAccessory sleepInterval](self, "sleepInterval");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_34:
    v18 = v11 == 0;

    goto LABEL_35;
  }
  objc_msgSend(v6, "type");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0CB8968]);

  if (v10)
  {
    -[HMDAccessory providedName](self, "providedName");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_34;
  }
  objc_msgSend(v6, "type");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0CB8950]);

  if (v13)
  {
    -[HMDAccessory model](self, "model");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_34;
  }
  objc_msgSend(v6, "type");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isEqualToString:", *MEMORY[0x1E0CB8948]);

  if (v15)
  {
    -[HMDAccessory manufacturer](self, "manufacturer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_34;
  }
  objc_msgSend(v6, "type");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isEqualToString:", *MEMORY[0x1E0CB88C8]);

  if (v17)
  {
    if (-[HMDHAPAccessory supportsHAP](self, "supportsHAP") && a4)
      goto LABEL_12;
LABEL_16:
    -[HMDAccessory firmwareVersion](self, "firmwareVersion");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_34;
  }
  objc_msgSend(v6, "type");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "isEqualToString:", *MEMORY[0x1E0D15F88]);

  if (!v20 || !-[HMDHAPAccessory supportsCHIP](self, "supportsCHIP"))
  {
    objc_msgSend(v6, "type");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "isEqualToString:", *MEMORY[0x1E0CB8A20]);

    if (v22)
    {
      -[HMDAccessory serialNumber](self, "serialNumber");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_34;
    }
    objc_msgSend(v6, "type");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "isEqualToString:", CFSTR("000000A6-0000-1000-8000-0026BB765291"));

    if (v24)
    {
      -[HMDHAPAccessory accessoryFlags](self, "accessoryFlags");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_34;
    }
    objc_msgSend(v6, "type");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "isEqualToString:", CFSTR("00000220-0000-1000-8000-0026BB765291"));

    if (v26)
    {
      -[HMDAccessory productData](self, "productData");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_34;
    }
    goto LABEL_23;
  }
  if (!a4)
    goto LABEL_16;
LABEL_12:
  v18 = 1;
LABEL_35:

  return v18;
}

- (id)namesOfServicesShowingTilesInHomeApp
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHAPAccessory *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v26;
  void *v27;
  id obj;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  -[HMDHAPAccessory services](self, "services");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "copy");

  obj = v5;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v30;
    *(_QWORD *)&v7 = 138543874;
    v26 = v7;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v30 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v10);
        -[HMDHAPAccessory hapMetadata](self, "hapMetadata", v26);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "type");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v12, "shouldHomeAppShowTileForServiceType:", v13);

        if (v14)
        {
          objc_msgSend(v11, "name");
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          if (v15)
          {
            objc_msgSend(v11, "name");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "addObject:", v16);

          }
          else
          {
            v17 = (void *)MEMORY[0x1D17BA0A0]();
            v18 = self;
            HMFGetOSLogHandle();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v27 = v17;
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "type");
              v21 = v3;
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v26;
              v34 = v20;
              v35 = 2112;
              v36 = v11;
              v37 = 2112;
              v38 = v22;
              _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@The name of the service (%@) with type (%@) is nil.", buf, 0x20u);

              v3 = v21;
              v17 = v27;
            }

            objc_autoreleasePoolPop(v17);
          }
        }
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
    }
    while (v8);
  }

  if (!objc_msgSend(v3, "count"))
  {
    -[HMDHAPAccessory name](self, "name");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      -[HMDHAPAccessory name](self, "name");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v24);

    }
  }
  return v3;
}

- (id)updateAccessoryFlagsAndNotifyClients:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v17;
  void *v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v20 = v8;
    v21 = 2112;
    v22 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Updating accessory flags: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHAPAccessory accessoryFlags](v6, "accessoryFlags");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = HMFEqualObjects();

  if ((v10 & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    -[HMDHAPAccessory setAccessoryFlags:](v6, "setAccessoryFlags:", v4);
    -[HMDHAPAccessory accessoryFlags](v6, "accessoryFlags", CFSTR("HM.accessoryFlagsKey"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v12;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = (void *)MEMORY[0x1E0D285D0];
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "entitledMessageWithName:identifier:messagePayload:", CFSTR("kAccessoryFlagsChangedNotificationKey"), v15, v13);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v11;
}

- (void)timerDidFire:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHAPAccessory *v9;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __32__HMDHAPAccessory_timerDidFire___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handlePairedStateChange:(BOOL)a3
{
  NSObject *v5;
  _QWORD v6[5];
  BOOL v7;

  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __43__HMDHAPAccessory_handlePairedStateChange___block_invoke;
  v6[3] = &unk_1E89C2758;
  v6[4] = self;
  v7 = a3;
  dispatch_async(v5, v6);

}

- (void)setPairingUsername:(id)a3 publicKey:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDAccessory workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __48__HMDHAPAccessory_setPairingUsername_publicKey___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (BOOL)associateControllerKeyWithAccessory:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  HMDHAPAccessory *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  HMDHAPAccessory *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (!v6)
    _HMFPreconditionFailure();
  v7 = v6;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "controllerKeyIdentifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 138543618;
    v28 = v11;
    v29 = 2112;
    v30 = v12;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Going to save new pairing identity %@ to keychain", (uint8_t *)&v27, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "establishRelationshipBetweenAccessoryAndControllerKey:error:", v7, a4);
  if (v14 && !*a4)
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = v9;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "controllerKeyIdentifier");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory pairingUsername](v23, "pairingUsername");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 138543874;
      v28 = v24;
      v29 = 2112;
      v30 = v25;
      v31 = 2112;
      v32 = v26;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Successfully updated key chain entry to associate controller key [%@] with the accessory [%@]", (uint8_t *)&v27, 0x20u);

    }
  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = v9;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "controllerKeyIdentifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory pairingUsername](v16, "pairingUsername");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = *a4;
      v27 = 138544130;
      v28 = v18;
      v29 = 2112;
      v30 = v19;
      v31 = 2112;
      v32 = v20;
      v33 = 2112;
      v34 = v21;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Unable to associate accessory controller key identifier to the accessory public key. PV with this accessory will fail in future : controller Key to be used : %@ forAccessory : %@, %@", (uint8_t *)&v27, 0x2Au);

    }
  }

  objc_autoreleasePoolPop(v15);
  return v14;
}

- (void)savePublicKeyToKeychain
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  id v7;
  BOOL v8;
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (-[HMDHAPAccessory isPrimary](self, "isPrimary"))
  {
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory publicKey](self, "publicKey");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory pairingUsername](self, "pairingUsername");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 0;
    v6 = objc_msgSend(v3, "savePublicKey:forAccessoryName:error:", v4, v5, &v15);
    v7 = v15;

    if (v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory publicKey](v10, "publicKey");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory pairingUsername](v10, "pairingUsername");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v17 = v12;
        v18 = 2112;
        v19 = v13;
        v20 = 2112;
        v21 = v14;
        v22 = 2112;
        v23 = v7;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Failed to save public key(%@) pairing username(%@): %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v9);
    }

  }
}

- (void)verifyPairingWithCompletionHandler:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __54__HMDHAPAccessory_verifyPairingWithCompletionHandler___block_invoke;
  v7[3] = &unk_1E89C1D68;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)addUser:(id)a3 completionHandler:(id)a4
{
  id v6;
  void (**v7)(id, void *);
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(id, void *))a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543362;
    v14 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Does not support add user interface", (uint8_t *)&v13, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v7[2](v7, v12);

  }
}

- (void)removeUser:(id)a3 completionHandler:(id)a4
{
  id v6;
  void (**v7)(id, void *);
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(id, void *))a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543362;
    v14 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Does not support remove user interface", (uint8_t *)&v13, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v7[2](v7, v12);

  }
}

- (void)pairingsWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHAPAccessory *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  uint64_t v25;
  uint8_t buf[4];
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v27 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Requesting pairings", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDAccessory home](v6, "home");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isOwnerUser");

  if ((v10 & 1) != 0)
  {
    v25 = 0;
    -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](v6, "preferredHAPAccessoryForOperation:linkType:", 7, &v25);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "server");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      -[HMDAccessory workQueue](v6, "workQueue");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = __49__HMDHAPAccessory_pairingsWithCompletionHandler___block_invoke;
      v23[3] = &unk_1E89C0960;
      v23[4] = v6;
      v24 = v4;
      objc_msgSend(v12, "listPairingsWithCompletionQueue:completionHandler:", v13, v23);

    }
    else
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = v6;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v27 = v21;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to list pairings without a reachable accessory server", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      if (v4)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v22);

      }
    }
    goto LABEL_14;
  }
  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v15 = v6;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v27 = v17;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Only owners may list pairings", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v14);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v4 + 2))(v4, 0, v12);
LABEL_14:

  }
}

- (HMFPairingIdentity)pairingIdentity
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;

  v3 = objc_alloc(MEMORY[0x1E0D28658]);
  -[HMDHAPAccessory publicKey](self, "publicKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initWithPairingKeyData:", v4);

  v6 = objc_alloc(MEMORY[0x1E0D165A8]);
  -[HMDAccessory identifier](self, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "initWithIdentifier:publicKey:privateKey:permissions:", v7, v5, 0, 0);

  return (HMFPairingIdentity *)v8;
}

- (NSSet)serviceTypeUUIDs
{
  void *v3;
  NSMutableArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", -[NSMutableArray count](self->_services, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = self->_services;
  v5 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v7), "serviceType", (_QWORD)v11);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObject:", v8);

        ++v7;
      }
      while (v5 != v7);
      v5 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_msgSend(v3, "copy");
  os_unfair_recursive_lock_unlock();
  return (NSSet *)v9;
}

- (void)setInitialServiceTypeUUIDs:(id)a3
{
  NSSet *v4;
  NSSet *initialServiceTypeUUIDs;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  v4 = (NSSet *)objc_msgSend(v6, "copy");
  initialServiceTypeUUIDs = self->_initialServiceTypeUUIDs;
  self->_initialServiceTypeUUIDs = v4;

  os_unfair_recursive_lock_unlock();
}

- (BOOL)wasUpdatedWithServiceType:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;

  v4 = a3;
  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[HMDHAPAccessory initialServiceTypeUUIDs](self, "initialServiceTypeUUIDs");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "containsObject:", v4) ^ 1;

  }
  else
  {
    LOBYTE(v7) = 0;
  }

  return v7;
}

- (void)updatePrimaryServiceIfNeeded
{
  HMDHAPAccessory *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  _BOOL4 v9;
  HMDHAPAccessory *v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  void *v14;
  HMDService *primaryService;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  HMDHAPAccessory *v20;
  id v21;
  void *v22;
  void *v23;
  BOOL v24;
  id *v25;
  id v26;
  void *v27;
  HMDHAPAccessory *v28;
  NSObject *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  int v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  _BOOL4 v42;
  BOOL v43;
  void *v44;
  void *v45;
  id *location;
  NSMutableArray *obj;
  HMDHAPAccessory *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint8_t buf[4];
  id v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  void *v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (!self)
  {
    v2 = 0;
LABEL_6:
    v9 = 0;
    goto LABEL_12;
  }
  v2 = self;
  -[HMDHAPAccessory cameraProfiles](self, "cameraProfiles");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = v2;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v54 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Accessory with camera profiles do not have primary service", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    goto LABEL_6;
  }
  accessoryToEncodeForXPCTransportForAccessory(v2);
  v10 = (HMDHAPAccessory *)objc_claimAutoreleasedReturnValue();
  v9 = v10 == v2;
  if (v10 != v2)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = v2;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v54 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@HomePod sensor accessory does not have primary service", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }

LABEL_12:
  os_unfair_recursive_lock_lock_with_options();
  primaryService = v2->_primaryService;
  v2->_primaryService = 0;

  if (v9)
  {
    location = (id *)&v2->_primaryService;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = v2;
    obj = v2->_services;
    v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
    if (!v16)
      goto LABEL_43;
    v17 = *(_QWORD *)v50;
    while (1)
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v50 != v17)
          objc_enumerationMutation(obj);
        v19 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * v18);
        v20 = v48;
        v21 = v19;
        v22 = v21;
        if (!v21)
          goto LABEL_20;
        objc_msgSend(v21, "instanceID");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "intValue") == 1;

        if (v24)
          goto LABEL_20;
        if (objc_msgSend(v22, "isPrimary"))
        {
          v25 = location;
          v26 = *location;
LABEL_25:
          *v25 = v22;
          v22 = v26;
          goto LABEL_26;
        }
        if ((objc_msgSend(v22, "isCustom") & 1) != 0)
          goto LABEL_20;
        if (!*location)
        {
          v26 = 0;
          v25 = location;
          goto LABEL_25;
        }
        if ((objc_msgSend(*location, "isPrimary") & 1) != 0)
          goto LABEL_20;
        -[HMDAccessory category](v20, "category");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "categoryType");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*location, "serviceType");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = +[HMDHAPMetadata isServiceType:compatibleWithAccessoryCategoryType:](HMDHAPMetadata, "isServiceType:compatibleWithAccessoryCategoryType:", v33, v45);

        objc_msgSend(v22, "serviceType");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = +[HMDHAPMetadata isServiceType:compatibleWithAccessoryCategoryType:](HMDHAPMetadata, "isServiceType:compatibleWithAccessoryCategoryType:", v34, v45);

        objc_msgSend(v22, "instanceID");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "intValue");
        objc_msgSend(*location, "instanceID");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = objc_msgSend(v37, "intValue");

        if (v42)
        {
          v39 = v43;
          if (v36 < v38)
            v39 = 0;
          if (v39)
            goto LABEL_41;
        }
        else
        {
          v40 = v43;
          if (v36 >= v38)
            v40 = 1;
          if ((v40 & 1) != 0)
          {
LABEL_41:

LABEL_20:
            goto LABEL_21;
          }
        }
        objc_storeStrong(location, v19);

LABEL_26:
        v27 = (void *)MEMORY[0x1D17BA0A0]();
        v28 = v20;
        HMFGetOSLogHandle();
        v29 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v30 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*location, "name");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*location, "uuid");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v54 = v30;
          v55 = 2112;
          v56 = v31;
          v57 = 2112;
          v58 = v32;
          _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_DEBUG, "%{public}@Current primary service of accessory is %@(%@)", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v27);
LABEL_21:
        ++v18;
      }
      while (v16 != v18);
      v41 = -[NSMutableArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v49, v59, 16);
      v16 = v41;
      if (!v41)
      {
LABEL_43:

        break;
      }
    }
  }
  os_unfair_recursive_lock_unlock();
}

- (void)_updatePrimaryServiceIfNeededWithService:(id)a3
{
  HMDService *v5;
  id primaryService;
  void *v7;
  void *v8;
  int v9;
  char v10;
  id *p_primaryService;
  HMDService *v12;
  BOOL v13;
  id v14;
  void *v15;
  void *v16;
  BOOL v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  int v21;
  void *v22;
  int v23;
  char v25;
  id v26;

  v26 = a3;
  if (objc_msgSend(v26, "isPrimary"))
  {
    v5 = (HMDService *)v26;
    primaryService = self->_primaryService;
    self->_primaryService = v5;
LABEL_3:

    v7 = v26;
    goto LABEL_8;
  }
  objc_msgSend(v26, "instanceID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  v7 = v26;
  if (v9 != 1)
  {
    v10 = objc_msgSend(v26, "isCustom");
    v7 = v26;
    if ((v10 & 1) == 0)
    {
      p_primaryService = (id *)&self->_primaryService;
      v12 = self->_primaryService;
      if (!v12)
      {
        v14 = v26;
        primaryService = *p_primaryService;
        *p_primaryService = v14;
        goto LABEL_3;
      }
      v13 = -[HMDService isPrimary](v12, "isPrimary");
      v7 = v26;
      if (v13)
        goto LABEL_8;
      -[HMDAccessory category](self, "category");
      primaryService = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(primaryService, "categoryType");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*p_primaryService, "serviceType");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = +[HMDHAPMetadata isServiceType:compatibleWithAccessoryCategoryType:](HMDHAPMetadata, "isServiceType:compatibleWithAccessoryCategoryType:", v16, v15);

      objc_msgSend(v26, "serviceType");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = +[HMDHAPMetadata isServiceType:compatibleWithAccessoryCategoryType:](HMDHAPMetadata, "isServiceType:compatibleWithAccessoryCategoryType:", v18, v15);

      objc_msgSend(v26, "instanceID");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "intValue");
      objc_msgSend(*p_primaryService, "instanceID");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "intValue");

      if (v19)
      {
        if (v21 >= v23 && v17)
          goto LABEL_21;
      }
      else
      {
        v25 = v21 >= v23 || v17;
        if ((v25 & 1) != 0)
          goto LABEL_21;
      }
      objc_storeStrong(p_primaryService, a3);
LABEL_21:

      goto LABEL_3;
    }
  }
LABEL_8:

}

- (void)_addService:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  if (v4)
  {
    v5 = v4;
    os_unfair_recursive_lock_lock_with_options();
    -[NSMutableArray addObject:](self->_services, "addObject:", v5);
    os_unfair_recursive_lock_unlock();
    v4 = v5;
  }

}

- (void)_removeService:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  if (v4)
  {
    v5 = v4;
    os_unfair_recursive_lock_lock_with_options();
    -[NSMutableArray removeObject:](self->_services, "removeObject:", v5);
    os_unfair_recursive_lock_unlock();
    v4 = v5;
  }

}

- (id)serviceWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHAPAccessory services](self, "services");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)serviceWithSPIClientIdentifier:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHAPAccessory services](self, "services");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __50__HMDHAPAccessory_serviceWithSPIClientIdentifier___block_invoke;
  v9[3] = &unk_1E89AB1A0;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)_handleUpdatedServicesForProfilesAndControllers:(BOOL)a3
{
  _BOOL4 v3;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;

  v3 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHAPAccessory services](self, "services");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory home](self, "home");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory _handleUpdatedServicesForDataStreamController:](self, "_handleUpdatedServicesForDataStreamController:", v6);
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHAPAccessory _handleUpdatedServicesForCameraProfiles:](self, "_handleUpdatedServicesForCameraProfiles:", v6))
  {
    objc_msgSend(v8, "appendString:", CFSTR("CreateCameraProfiles"));
    v9 = !v3;
  }
  else
  {
    v9 = 0;
  }
  if (-[HMDHAPAccessory _handleUpdatedServicesForNetworkRouterController:](self, "_handleUpdatedServicesForNetworkRouterController:", v6))
  {
    objc_msgSend(v8, "appendString:", CFSTR("NetworkRouterProfiles"));
  }
  if (-[HMDHAPAccessory _handleUpdatedServicesForFirmwareUpdateProfile:](self, "_handleUpdatedServicesForFirmwareUpdateProfile:", v6))
  {
    objc_msgSend(v8, "appendString:", CFSTR("FirmwareUpdateProfile"));
  }
  if (-[HMDHAPAccessory _handleUpdatedServicesForMediaProfile:](self, "_handleUpdatedServicesForMediaProfile:", v6))
    objc_msgSend(v8, "appendString:", CFSTR("MediaProfiles"));
  if (-[HMDHAPAccessory _handleUpdatedServicesForLightProfiles:](self, "_handleUpdatedServicesForLightProfiles:", v6))
    objc_msgSend(v8, "appendString:", CFSTR("LightProfiles"));
  if (-[HMDHAPAccessory _handleUpdatedServicesForWiFiManagementController](self, "_handleUpdatedServicesForWiFiManagementController"))
  {
    objc_msgSend(v8, "appendString:", CFSTR("WiFiManagementController"));
  }
  if (-[HMDHAPAccessory _handleUpdatedServicesForDoorbellController](self, "_handleUpdatedServicesForDoorbellController"))
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEBUG, "%{public}@calling update services on doorbell chime controller", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v8, "appendString:", CFSTR("DoorbellChimeController"));
  }
  if (-[HMDHAPAccessory _handleUpdatedServicesForSiriEndpointProfile:](self, "_handleUpdatedServicesForSiriEndpointProfile:", v6))
  {
    -[HMDHAPAccessory _evaluateResidentEnabledFeatures](self);
    objc_msgSend(v8, "appendString:", CFSTR("SiriEndpointProfile"));
  }
  if (-[HMDHAPAccessory _handleUpdatedServicesForDiagnosticsManager:](self, "_handleUpdatedServicesForDiagnosticsManager:", v6))
  {
    objc_msgSend(v8, "appendString:", CFSTR("DiagnosticsManager"));
  }
  if (-[HMDHAPAccessory _handleUpdatedServicesForLowPowerModeProfile](self, "_handleUpdatedServicesForLowPowerModeProfile"))
  {
    objc_msgSend(v8, "appendString:", CFSTR("LowPowerModeProfile"));
  }
  if (-[HMDHAPAccessory _handleUpdatedServicesForAccessCodes](self, "_handleUpdatedServicesForAccessCodes"))
    objc_msgSend(v8, "appendString:", CFSTR("AddedAccessCodeSupport"));
  if (-[HMDHAPAccessory _handleUpdatedServicesForWalletKey](self, "_handleUpdatedServicesForWalletKey"))
    objc_msgSend(v8, "appendString:", CFSTR("supportsWalletKey"));
  objc_msgSend(v7, "homeManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "length"))
  {
    -[HMDAccessory uuid](self, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", v8, v15, 1);

  }
  if (v9)
  {
    v16 = (void *)objc_msgSend(v8, "copy");
    objc_msgSend(v14, "assistantSyncDataChanged:", v16);

  }
}

- (void)_handleAddServiceTransaction:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  HMDService *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHAPAccessory *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  NSObject *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  NSObject *v42;
  BOOL v43;
  BOOL v44;
  void *v45;
  void *v46;
  _QWORD block[5];
  HMDService *v48;
  NSObject *v49;
  BOOL v50;
  BOOL v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint8_t v60[128];
  uint8_t buf[4];
  void *v62;
  __int16 v63;
  void *v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  void *v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = -[HMDService initWithTransaction:accessory:owner:]([HMDService alloc], "initWithTransaction:accessory:owner:", v6, self, self);
  if (v8)
  {
    v45 = v7;
    v46 = v6;
    v44 = -[HMDHAPAccessory supportsTargetController](self, "supportsTargetController");
    v43 = -[HMDHAPAccessory supportsSiri](self, "supportsSiri");
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    -[HMDHAPAccessory services](self, "services");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v56, v71, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v57;
      while (2)
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v57 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * i);
          objc_msgSend(v14, "instanceID");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDService instanceID](v8, "instanceID");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "isEqual:", v16);

          if (v17)
          {
            v7 = v45;
            v6 = v46;
            objc_msgSend(v14, "transactionObjectUpdated:newValues:message:", 0, v46, v45);
            goto LABEL_23;
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v56, v71, 16);
        if (v11)
          continue;
        break;
      }
    }

    objc_msgSend(v46, "configurationTracker");
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (v18)
      dispatch_group_enter(v18);
    -[HMDHAPAccessory _addService:](self, "_addService:", v8);
    -[HMDAccessory workQueue](self, "workQueue");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDService configureWithWorkQueue:messageDispatcher:](v8, "configureWithWorkQueue:messageDispatcher:", v20, v21);

    v7 = v45;
    objc_msgSend(v45, "transactionResult");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "markChanged");
    objc_msgSend(v9, "markSaveToAssistant");
    v22 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v45, "respondWithPayload:", 0));
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v41 = v22;
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDService type](v8, "type");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDService instanceID](v8, "instanceID");
      v42 = v19;
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = (void *)MEMORY[0x1E0CB37E8];
      -[HMDService characteristics](v8, "characteristics");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "numberWithUnsignedInteger:", objc_msgSend(v28, "count"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "shortDescription");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v62 = v40;
      v63 = 2112;
      v64 = v25;
      v65 = 2112;
      v66 = v26;
      v31 = (void *)v26;
      v67 = 2112;
      v68 = v29;
      v69 = 2112;
      v70 = v30;
      v22 = v41;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_DEBUG, "%{public}@Service %@/%@ with %@ characteristics added. Message: %@", buf, 0x34u);

      v7 = v45;
      v19 = v42;

    }
    objc_autoreleasePoolPop(v22);
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    -[HMDAccessory home](v23, "home");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "serviceGroups");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
    if (v34)
    {
      v35 = v34;
      v36 = *(_QWORD *)v53;
      do
      {
        for (j = 0; j != v35; ++j)
        {
          if (*(_QWORD *)v53 != v36)
            objc_enumerationMutation(v33);
          objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * j), "setServiceIfPresent:", v8);
        }
        v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
      }
      while (v35);
    }

    -[HMDAccessory workQueue](v23, "workQueue");
    v38 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __56__HMDHAPAccessory__handleAddServiceTransaction_message___block_invoke;
    block[3] = &unk_1E89B84C8;
    block[4] = v23;
    v50 = v44;
    v51 = v43;
    v48 = v8;
    v49 = v19;
    v39 = v19;
    dispatch_async(v38, block);

    v6 = v46;
LABEL_23:

  }
}

- (void)_handleServiceRemovedTransaction:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  id v26;
  _QWORD v27[5];
  id v28;
  objc_super v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v29.receiver = self;
  v29.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory transactionObjectRemoved:message:](&v29, sel_transactionObjectRemoved_message_, v6, v7);
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory serviceWithUUID:](self, "serviceWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "name");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "instanceID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "shortDescription");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v31 = v13;
    v32 = 2112;
    v33 = v14;
    v34 = 2112;
    v35 = v15;
    v36 = 2112;
    v37 = v16;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Removing service:%@ instanceID:%@. Message: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDAccessory home](v11, "home");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "removeService:", v9);

  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "removeBulletinsForService:", v9);

  -[HMDHAPAccessory _removeService:](v11, "_removeService:", v9);
  objc_msgSend(v7, "transactionResult");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "markChanged");
  objc_msgSend(v19, "markSaveToAssistant");
  v20 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v7, "respondWithPayload:", 0));
  v21 = v11;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "instanceID");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v31 = v23;
    v32 = 2112;
    v33 = v24;
    _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Service %@ removed", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v20);
  -[HMDAccessory workQueue](v21, "workQueue");
  v25 = objc_claimAutoreleasedReturnValue();
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __60__HMDHAPAccessory__handleServiceRemovedTransaction_message___block_invoke;
  v27[3] = &unk_1E89C2328;
  v27[4] = v21;
  v28 = v9;
  v26 = v9;
  dispatch_async(v25, v27);

}

- (BOOL)_supportsMediaAccessControl
{
  void *v2;
  BOOL v3;

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("000000DA-0000-1000-8000-0026BB765291"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (BOOL)supportsTargetController
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  BOOL v7;

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", *MEMORY[0x1E0CB9AE0]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "characteristics");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count"))
  {
    -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", *MEMORY[0x1E0CB9AE8]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "characteristics");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "count") != 0;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)addTarget:(id)a3 buttonConfiguration:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (!v6)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Attempt to add a nil target accessory", (uint8_t *)&v17, 0xCu);
LABEL_8:

    }
LABEL_9:

    objc_autoreleasePoolPop(v10);
    goto LABEL_10;
  }
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "UUIDString");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543874;
      v18 = v13;
      v19 = 2112;
      v20 = v14;
      v21 = 2112;
      v22 = v16;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Attempt to add a target %@/%@ to an accessory with no target controller manager", (uint8_t *)&v17, 0x20u);

      goto LABEL_8;
    }
    goto LABEL_9;
  }
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addTargetAccessory:buttonConfiguration:", v6, v7);

LABEL_10:
}

- (void)removeTarget:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!v4)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempt to remove a nil target accessory", (uint8_t *)&v14, 0xCu);
LABEL_8:

    }
LABEL_9:

    objc_autoreleasePoolPop(v7);
    goto LABEL_10;
  }
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "UUIDString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      v18 = 2112;
      v19 = v13;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempt to remove a target %@/%@ to an accessory with no target controller manager", (uint8_t *)&v14, 0x20u);

      goto LABEL_8;
    }
    goto LABEL_9;
  }
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeTargetAccessory:", v4);

LABEL_10:
}

- (void)updateTarget:(id)a3 name:(id)a4 buttonConfiguration:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (!v8)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      buttonConfigurationAsString(v10);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543874;
      v22 = v16;
      v23 = 2112;
      v24 = v9;
      v25 = 2112;
      v26 = v17;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Attempt to update a nil target accessory with name %@ and buttonConfiguration %@", (uint8_t *)&v21, 0x20u);

LABEL_8:
    }
LABEL_9:

    objc_autoreleasePoolPop(v13);
    goto LABEL_10;
  }
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "name");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "UUIDString");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543874;
      v22 = v16;
      v23 = 2112;
      v24 = v18;
      v25 = 2112;
      v26 = v20;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Attempt to update the name and button configuration of target %@/%@ but no target controller manager", (uint8_t *)&v21, 0x20u);

      goto LABEL_8;
    }
    goto LABEL_9;
  }
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "updateTargetAccessory:name:buttonConfiguration:", v8, v9, v10);

LABEL_10:
}

- (void)registerForActiveIdentifierNotifications
{
  void *v3;
  void *v4;
  HMDHAPAccessory *v5;
  NSObject *v6;
  void *v7;
  id v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "registerForActiveIdentifierNotifications");

  }
  else
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v10 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Attempt to register for active identifier changes but no target controller manager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }
}

- (id)targetControllerButtonConfiguration
{
  void *v3;
  void *v4;
  void *v5;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "buttonConfiguration");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    return v5;
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempt to get the supported button configuration for a controller with no target controller manager", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    return 0;
  }
}

- (unint64_t)targetControllerTicksPerSecond
{
  void *v3;
  void *v4;
  unint64_t v5;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "ticksPerSecond");

    return v5;
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempt to get the supported button configuration for a controller with no target controller manager", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    return 1000;
  }
}

- (void)notifyClientsOfTargetControlSupportUpdate
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __60__HMDHAPAccessory_notifyClientsOfTargetControlSupportUpdate__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_notifyClientsOfTargetControlSupportUpdate
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[3];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v10[0] = *MEMORY[0x1E0CB8108];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDAccessory supportsTargetControl](self, "supportsTargetControl"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v3;
  v10[1] = *MEMORY[0x1E0CB8130];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHAPAccessory supportsTargetController](self, "supportsTargetController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v11[1] = v4;
  v10[2] = *MEMORY[0x1E0CB8120];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHAPAccessory hardwareSupport](self, "hardwareSupport"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11[2] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D285D0], "entitledMessageWithName:messagePayload:", *MEMORY[0x1E0CB8110], v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory uuid](self, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sendMessage:target:", v7, v9);

}

- (void)_setTargetControllerSession
{
  void *v3;
  int v4;
  uint64_t v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  id v10;

  -[HMDAccessory home](self, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCurrentDeviceAvailableResident");

  if (v4)
  {
    -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
    v5 = objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = (void *)v5;
      v7 = isAppleTV();

      if (v7)
      {
        HAPStringFromAccessoryServerSession();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory registerForSessionRestore:](self, "registerForSessionRestore:", v8);

        -[HMDHAPAccessory bridge](self, "bridge");
        v10 = (id)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          HAPStringFromAccessoryServerSession();
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "registerForSessionRestore:", v9);

        }
      }
    }
  }
}

- (void)configureTargetControllerWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __59__HMDHAPAccessory_configureTargetControllerWithCompletion___block_invoke;
  v7[3] = &unk_1E89C1D68;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_configureTargetControllerWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  HMDTargetControllerManager *v11;
  void *v12;
  HMDTargetControllerManager *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHAPAccessory shouldConfigureTargetController](self, "shouldConfigureTargetController"))
  {
    -[HMDHAPAccessory updateSymptoms](self, "updateSymptoms");
    -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      v6 = (void *)MEMORY[0x1D17BA0A0]();
      v7 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory targetUUIDs](v7, "targetUUIDs");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v25 = v9;
        v26 = 2112;
        v27 = v10;
        _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Accessory supports being a target controller but no target controller manager - creating one with target UUIDs: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v6);
      v11 = [HMDTargetControllerManager alloc];
      -[HMDHAPAccessory targetUUIDs](v7, "targetUUIDs");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = -[HMDTargetControllerManager initWithTargetControllerAccessory:targets:](v11, "initWithTargetControllerAccessory:targets:", v7, v12);
      -[HMDHAPAccessory setTargetControllerManager:](v7, "setTargetControllerManager:", v13);

    }
    if (-[HMDAccessory isReachable](self, "isReachable"))
    {
      -[HMDHAPAccessory _setTargetControllerSession](self, "_setTargetControllerSession");
      -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __60__HMDHAPAccessory__configureTargetControllerWithCompletion___block_invoke;
      v22[3] = &unk_1E89BFC88;
      v22[4] = self;
      v23 = v4;
      objc_msgSend(v14, "refreshConfigurationWithCompletion:", v22);

    }
    else if (v4)
    {
      (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
    }
  }
  else
  {
    -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v25 = v19;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Target controller manager present but accessory no longer supports being a target controller", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v16);
      -[HMDHAPAccessory targetControllerManager](v17, "targetControllerManager");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "invalidate");

      -[HMDHAPAccessory _notifyClientsOfTargetControlSupportUpdate](v17, "_notifyClientsOfTargetControlSupportUpdate");
    }
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v4 + 2))(v4, v21);

    }
  }

}

- (void)_autoConfigureTargetController
{
  _QWORD v3[4];
  id v4;
  id location;

  objc_initWeak(&location, self);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __49__HMDHAPAccessory__autoConfigureTargetController__block_invoke;
  v3[3] = &unk_1E89C0678;
  objc_copyWeak(&v4, &location);
  -[HMDHAPAccessory _configureTargetControllerWithCompletion:](self, "_configureTargetControllerWithCompletion:", v3);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

- (void)autoConfigureTargetController
{
  NSObject *v3;
  _QWORD block[5];

  if (-[HMDHAPAccessory shouldConfigureTargetController](self, "shouldConfigureTargetController"))
  {
    if (+[HMDDeviceCapabilities supportsTargetControllerAutoConfigure](HMDDeviceCapabilities, "supportsTargetControllerAutoConfigure"))
    {
      -[HMDAccessory workQueue](self, "workQueue");
      v3 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __48__HMDHAPAccessory_autoConfigureTargetController__block_invoke;
      block[3] = &unk_1E89C2730;
      block[4] = self;
      dispatch_async(v3, block);

    }
  }
}

- (void)acknowledgeTargetControlService:(id)a3 active:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v4 = a4;
  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "acknowledgeTargetControlService:active:", v6, v4);

  }
  else
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory name](v10, "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "instanceID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v12;
      v17 = 2112;
      v18 = v13;
      v19 = 2112;
      v20 = v14;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Attempt to mark controller %@ target control service %@ active with no target controller manager", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
  }

}

- (void)updateButtonConfigurationForTarget:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "updateButtonConfigurationForTarget:", v4);

  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v10;
      v13 = 2112;
      v14 = v4;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempt to update the button configuration for target %@ active with no target controller manager", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }

}

- (void)setIdentifiersForBridgedAccessories:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  if (v6)
  {
    v4 = (void *)objc_msgSend(v6, "copy");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v5 = v4;
  objc_storeStrong((id *)&self->_identifiersForBridgedAccessories, v4);

  os_unfair_recursive_lock_unlock();
}

- (void)addHostedAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSSet *v13;
  NSSet *identifiersForBridgedAccessories;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  v5 = (void *)-[NSSet mutableCopy](self->_identifiersForBridgedAccessories, "mutableCopy");
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "containsObject:", v6);

  if ((v7 & 1) == 0)
  {
    objc_msgSend(v4, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addObject:", v8);

    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = CFSTR("HMDAccessoryBridgedAccessoryUUIDKey");
    objc_msgSend(v4, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "UUIDString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:userInfo:", CFSTR("HMDAccessoryBridgedAccessoryAddedNotification"), self, v12);

    v13 = (NSSet *)objc_msgSend(v5, "copy");
    identifiersForBridgedAccessories = self->_identifiersForBridgedAccessories;
    self->_identifiersForBridgedAccessories = v13;

  }
  os_unfair_recursive_lock_unlock();

}

- (void)removeHostedAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSSet *v13;
  NSSet *identifiersForBridgedAccessories;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  v5 = (void *)-[NSSet mutableCopy](self->_identifiersForBridgedAccessories, "mutableCopy");
  objc_msgSend(v4, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "containsObject:", v6);

  if (v7)
  {
    objc_msgSend(v4, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "removeObject:", v8);

    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = CFSTR("HMDAccessoryBridgedAccessoryUUIDKey");
    objc_msgSend(v4, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "UUIDString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:userInfo:", CFSTR("HMDAccessoryBridgedAccessoryRemovedNotification"), self, v12);

    v13 = (NSSet *)objc_msgSend(v5, "copy");
    identifiersForBridgedAccessories = self->_identifiersForBridgedAccessories;
    self->_identifiersForBridgedAccessories = v13;

  }
  os_unfair_recursive_lock_unlock();

}

- (void)addTransportInformationInstance:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    os_unfair_recursive_lock_lock_with_options();
    -[NSMutableArray addObject:](self->_transportInformationInstances, "addObject:", v4);
    v5 = os_unfair_recursive_lock_unlock();
    v6 = (void *)MEMORY[0x1D17BA0A0](v5);
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Added transport information instance: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    logAndPostNotification(CFSTR("HMDAccessoryTransportAddedNotification"), v7, 0);
  }

}

- (void)removeTransportInformationInstance:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  os_unfair_recursive_lock_lock_with_options();
  -[NSMutableArray removeObject:](self->_transportInformationInstances, "removeObject:", v4);
  v5 = -[NSMutableArray count](self->_transportInformationInstances, "count");
  v6 = os_unfair_recursive_lock_unlock();
  if (!v5)
    v6 = -[HMDHAPAccessory resetNotificationEnabledTime](self, "resetNotificationEnabledTime");
  v7 = (void *)MEMORY[0x1D17BA0A0](v6);
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v10;
    v13 = 2048;
    v14 = objc_msgSend(v4, "linkType");
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@removed transportInformationInstance linkType %ld", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v7);

}

- (BOOL)hasCameraStreamService
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  char v10;
  BOOL v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHAPAccessory services](self, "services", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    v7 = *MEMORY[0x1E0D161B8];
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "type");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "isEqualToString:", v7);

        if ((v10 & 1) != 0)
        {
          v11 = 1;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v5)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_11:

  return v11;
}

- (HMDDataStreamController)dataStreamController
{
  HMDDataStreamController *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_dataStreamController;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (HMDNetworkRouterController)networkRouterController
{
  HMDNetworkRouterController *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_networkRouterController;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setNetworkRouterController:(id)a3
{
  HMDNetworkRouterController *v4;
  HMDNetworkRouterController *networkRouterController;

  v4 = (HMDNetworkRouterController *)a3;
  os_unfair_recursive_lock_lock_with_options();
  networkRouterController = self->_networkRouterController;
  self->_networkRouterController = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDAccessoryDiagnosticsManager)diagnosticsManager
{
  HMDAccessoryDiagnosticsManager *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_diagnosticsManager;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setDiagnosticsManager:(id)a3
{
  HMDAccessoryDiagnosticsManager *v4;
  HMDAccessoryDiagnosticsManager *diagnosticsManager;

  v4 = (HMDAccessoryDiagnosticsManager *)a3;
  os_unfair_recursive_lock_lock_with_options();
  diagnosticsManager = self->_diagnosticsManager;
  self->_diagnosticsManager = v4;

  os_unfair_recursive_lock_unlock();
}

- (int64_t)linkLayerType
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int64_t v7;

  -[HMDAccessory identifier](self, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "server");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
    v7 = objc_msgSend(v5, "linkLayerType");
  else
    v7 = 0;

  return v7;
}

- (BOOL)hasIPServer
{
  void *v3;
  void *v4;
  void *v5;
  BOOL v6;
  id v7;
  char isKindOfClass;

  -[HMDAccessory identifier](self, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "server");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHAPAccessory isHMMTRAccessoryServer:](self, "isHMMTRAccessoryServer:", v5))
  {
    v6 = -[HMDHAPAccessory hmmtrHasIPServer:](self, "hmmtrHasIPServer:", v5);
  }
  else
  {
    v7 = v5;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    v6 = isKindOfClass & (v7 != 0);
  }

  return v6;
}

- (BOOL)hasBLEServer
{
  void *v3;
  void *v4;
  void *v5;
  BOOL v6;
  id v7;
  char isKindOfClass;

  -[HMDAccessory identifier](self, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "server");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHAPAccessory isHMMTRAccessoryServer:](self, "isHMMTRAccessoryServer:", v5))
  {
    v6 = -[HMDHAPAccessory hmmtrHasBLEServer:](self, "hmmtrHasBLEServer:", v5);
  }
  else
  {
    v7 = v5;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    v6 = isKindOfClass & (v7 != 0);
  }

  return v6;
}

- (BOOL)isBLELinkConnected
{
  void *v2;
  char v3;

  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_339);

  return v3;
}

- (BOOL)isMatterLocalLinkConnectedAndPreferred
{
  void *v2;
  char v3;

  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_341_48793);

  return v3;
}

- (BOOL)supportsThread
{
  void *v2;

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000701-0000-1000-8000-0026BB765291"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2 != 0;
}

- (BOOL)hasThreadServer
{
  void *v3;
  void *v4;
  void *v5;
  BOOL v6;
  id v7;
  char isKindOfClass;

  -[HMDAccessory identifier](self, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "server");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HMDHAPAccessory isHMMTRAccessoryServer:](self, "isHMMTRAccessoryServer:", v5))
  {
    v6 = -[HMDHAPAccessory hmmtrHasThreadServer:](self, "hmmtrHasThreadServer:", v5);
  }
  else
  {
    v7 = v5;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    v6 = isKindOfClass & (v7 != 0);
  }

  return v6;
}

- (BOOL)isThreadSecureSessionEstablished
{
  void *v2;
  char v3;

  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_344);

  return v3;
}

- (int64_t)linkSpeed
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  char v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v23 != v7)
          objc_enumerationMutation(v3);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * i), "linkType") == 2)
          --v6;
        else
          ++v6;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  -[HMDHAPAccessory services](self, "services", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v19;
    v13 = *MEMORY[0x1E0D16208];
    while (2)
    {
      for (j = 0; j != v11; ++j)
      {
        if (*(_QWORD *)v19 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * j), "serviceType");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "isEqual:", v13);

        if ((v16 & 1) != 0)
        {
          v6 = 1;
          goto LABEL_23;
        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      if (v11)
        continue;
      break;
    }
  }
LABEL_23:

  return v6;
}

- (id)getHAPAccessoryMatchingInstanceId
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v8, "hapAccessory", (_QWORD)v16);
        v9 = objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          v10 = (void *)v9;
          objc_msgSend(v8, "instanceID");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory hapInstanceId](self, "hapInstanceId");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v11, "isEqualToNumber:", v12);

          if ((v13 & 1) != 0)
          {
            objc_msgSend(v8, "hapAccessory");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v5)
        continue;
      break;
    }
  }
  v14 = 0;
LABEL_12:

  return v14;
}

- (id)configureService:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  id v17;
  void *v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  HMDHAPAccessory *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v31;
  HMDHAPAccessory *v32;
  id obj;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  id v50;
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = self;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v52, 16);
  if (v35)
  {
    v34 = *(_QWORD *)v42;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v42 != v34)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v41 + 1) + 8 * v5), "hapAccessory");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        objc_msgSend(v6, "services");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = (void *)objc_msgSend(v7, "copy");

        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v37, v51, 16);
        if (v9)
        {
          v10 = v9;
          v36 = v6;
          v11 = *(_QWORD *)v38;
LABEL_8:
          v12 = 0;
          while (1)
          {
            if (*(_QWORD *)v38 != v11)
              objc_enumerationMutation(v8);
            v13 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v12);
            objc_msgSend(v4, "instanceID");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "instanceID");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v14, "isEqual:", v15);

            if (v16)
              break;
            if (v10 == ++v12)
            {
              v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v37, v51, 16);
              if (v10)
                goto LABEL_8;
              v17 = v8;
              v6 = v36;
              goto LABEL_21;
            }
          }
          v17 = v13;
          objc_msgSend(v4, "type");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "type");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v18, "isEqualToString:", v19);

          if ((v20 & 1) == 0)
          {
            v24 = (void *)MEMORY[0x1D17BA0A0]();
            v25 = v32;
            HMFGetOSLogHandle();
            v26 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "type");
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v46 = v27;
              v47 = 2112;
              v48 = v28;
              v49 = 2112;
              v50 = v4;
              _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_ERROR, "%{public}@Service type, %@, changed for service: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v24);
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 66);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDAccessory didEncounterError:](v25, "didEncounterError:", v29);

            v23 = 0;
            v22 = v31;
            goto LABEL_28;
          }

          v6 = v36;
          if (!v17)
            goto LABEL_22;
          objc_msgSend(v4, "configureWithService:accessory:", v17, v32);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v21, "count"))
            objc_msgSend(v31, "addEntriesFromDictionary:", v21);

        }
        else
        {
          v17 = v8;
        }
LABEL_21:

LABEL_22:
        ++v5;
      }
      while (v5 != v35);
      v35 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v52, 16);
    }
    while (v35);
  }

  v22 = v31;
  v23 = v31;
LABEL_28:

  return v23;
}

- (id)_notificationRegistrationsByClientIDForCharacteristics:(id)a3
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v15[4];
  id v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    v9 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        objc_msgSend(v11, "notificationRegistrations");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v15[0] = v9;
        v15[1] = 3221225472;
        v15[2] = __74__HMDHAPAccessory__notificationRegistrationsByClientIDForCharacteristics___block_invoke;
        v15[3] = &unk_1E89AB2E8;
        v16 = v4;
        v17 = v11;
        objc_msgSend(v12, "na_each:", v15);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v7);
  }

  v13 = (void *)objc_msgSend(v4, "copy");
  return v13;
}

- (void)unregisterFromAccessoryServer
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  -[HMDHAPAccessory getPrimaryHAPAccessories](self, "getPrimaryHAPAccessories");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "firstObject");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  v4 = v6;
  if (v6)
  {
    objc_msgSend(v6, "server");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "unregisterForNotifications:", self);

    v4 = v6;
  }

}

- (void)cleanupNotificationCenterObservers
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeObserver:name:object:", self, CFSTR("HMDAccessoryIsReachableNotification"), self);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObserver:name:object:", self, CFSTR("HMDAccessoryIsNotReachableNotification"), self);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeObserver:name:object:", self, CFSTR("HMDAccessoryCharacteristicsChangedNotification"), self);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeObserver:name:object:", self, CFSTR("HMDNotificationAccessoryChangedRoom"), self);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeObserver:name:object:", self, CFSTR("HMDRoomNameUpdatedNotification"), self);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "removeObserver:name:object:", self, CFSTR("HMDAccessoryConnectedNotification"), self);

  -[HMDAccessory home](self, "home");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "residentDeviceManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "removeObserver:name:object:", self, CFSTR("HMDResidentDeviceManagerAddResidentNotification"), v10);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "residentDeviceManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "removeObserver:name:object:", self, CFSTR("HMDResidentDeviceManagerRemoveResidentNotification"), v12);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "residentDeviceManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "removeObserver:name:object:", self, CFSTR("HMDResidentDeviceManagerUpdatePrimaryResidentNotification"), v14);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "residentDeviceManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "removeObserver:name:object:", self, CFSTR("HMDResidentDeviceManagerUpdateResidentNotification"), v16);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "removeObserver:name:object:", self, CFSTR("HMDResidentDeviceConfirmedStateChangedNotification"), self);

}

- (void)unconfigure
{
  id v3;
  void *v4;
  HMDHAPAccessory *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  objc_super v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory cleanupNotificationCenterObservers](self, "cleanupNotificationCenterObservers");
  v11.receiver = self;
  v11.super_class = (Class)HMDHAPAccessory;
  v3 = -[HMDAccessory unconfigure](&v11, sel_unconfigure);
  v4 = (void *)MEMORY[0x1D17BA0A0](v3);
  v5 = self;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v13 = v7;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Removing all services and characteristics...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  objc_initWeak((id *)buf, v5);
  -[HMDAccessory workQueue](v5, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __30__HMDHAPAccessory_unconfigure__block_invoke;
  block[3] = &unk_1E89BE3F8;
  objc_copyWeak(&v10, (id *)buf);
  dispatch_async(v8, block);

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);
}

- (void)unconfigureAccessoryWithServerIdentifier:(id)a3 linkType:(int64_t)a4 updateReachability:(BOOL)a5
{
  id v8;
  NSObject *v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13[2];
  BOOL v14;
  id location;

  v8 = a3;
  objc_initWeak(&location, self);
  -[HMDAccessory workQueue](self, "workQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __88__HMDHAPAccessory_unconfigureAccessoryWithServerIdentifier_linkType_updateReachability___block_invoke;
  block[3] = &unk_1E89BD370;
  objc_copyWeak(v13, &location);
  v12 = v8;
  v13[1] = (id)a4;
  v14 = a5;
  v10 = v8;
  dispatch_async(v9, block);

  objc_destroyWeak(v13);
  objc_destroyWeak(&location);
}

- (BOOL)matchesHAPAccessoryWithServerIdentifier:(id)a3 instanceID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  BOOL v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  char v14;
  void *v15;

  v6 = a3;
  v7 = a4;
  v8 = v7;
  v9 = 0;
  if (v6 && v7)
  {
    -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D163A8], "serverIdentifierWithUniqueIdentifier:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = HMFEqualObjects();

    if (v12
      && (objc_msgSend(MEMORY[0x1E0D163A8], "instanceIDForUniqueIdentifier:", v10),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          v14 = HMFEqualObjects(),
          v13,
          (v14 & 1) != 0))
    {
      v9 = 1;
    }
    else
    {
      -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:instanceID:linkType:](self, "matchingTransportInformationWithServerIdentifier:instanceID:linkType:", v6, v8, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v15 != 0;

    }
  }

  return v9;
}

- (id)matchingTransportInformationWithServerIdentifier:(id)a3 linkType:(int64_t)a4
{
  return -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:instanceID:linkType:](self, "matchingTransportInformationWithServerIdentifier:instanceID:linkType:", a3, 0, a4);
}

- (id)matchingHAPAccessoryWithServerIdentifier:(id)a3 linkType:(int64_t)a4
{
  void *v4;
  void *v5;

  -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:instanceID:linkType:](self, "matchingTransportInformationWithServerIdentifier:instanceID:linkType:", a3, 0, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hapAccessory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)matchingHAPAccessoryWithServerIdentifier:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:instanceID:linkType:](self, "matchingTransportInformationWithServerIdentifier:instanceID:linkType:", a3, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hapAccessory");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)matchingHAPAccessoryWithServerIdentifier:(id)a3 instanceID:(id)a4
{
  void *v4;
  void *v5;

  -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:instanceID:linkType:](self, "matchingTransportInformationWithServerIdentifier:instanceID:linkType:", a3, a4, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hapAccessory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)matchingHAPAccessoryWithLinkType:(int64_t)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v9, "linkType", (_QWORD)v12) == a3)
        {
          objc_msgSend(v9, "hapAccessory");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_11;
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v6)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_11:

  return v10;
}

- (void)performOperation:(int64_t)a3 linkType:(int64_t)a4 operationBlock:(id)a5 errorBlock:(id)a6
{
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  _QWORD block[5];
  id v16;
  id v17;
  int64_t v18;
  int64_t v19;

  v10 = a5;
  v11 = a6;
  -[HMDAccessory workQueue](self, "workQueue");
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __71__HMDHAPAccessory_performOperation_linkType_operationBlock_errorBlock___block_invoke;
  block[3] = &unk_1E89AB408;
  v18 = a3;
  v19 = a4;
  block[4] = self;
  v16 = v10;
  v17 = v11;
  v13 = v11;
  v14 = v10;
  dispatch_async(v12, block);

}

- (void)_retrieveHAPAccessoryToPerformOperation:(int64_t)a3 linkType:(int64_t)a4 retries:(unint64_t)a5 operationBlock:(id)a6 errorBlock:(id)a7 activity:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, void *);
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28[4];
  id location;

  v14 = a6;
  v15 = a7;
  v16 = a8;
  objc_initWeak(&location, self);
  v21 = MEMORY[0x1E0C809B0];
  v22 = 3221225472;
  v23 = __111__HMDHAPAccessory__retrieveHAPAccessoryToPerformOperation_linkType_retries_operationBlock_errorBlock_activity___block_invoke;
  v24 = &unk_1E89AB458;
  objc_copyWeak(v28, &location);
  v28[1] = (id)a5;
  v28[2] = (id)a3;
  v28[3] = (id)a4;
  v17 = v14;
  v26 = v17;
  v18 = v15;
  v27 = v18;
  v19 = v16;
  v25 = v19;
  v20 = _Block_copy(&v21);
  -[HMDHAPAccessory _retrieveHAPAccessoryToPerformOperation:linkType:operationBlock:errorBlock:activity:](self, "_retrieveHAPAccessoryToPerformOperation:linkType:operationBlock:errorBlock:activity:", a3, a4, v17, v20, v19, v21, v22, v23, v24);

  objc_destroyWeak(v28);
  objc_destroyWeak(&location);

}

- (void)_retrieveHAPAccessoryToPerformOperation:(int64_t)a3 linkType:(int64_t)a4 operationBlock:(id)a5 errorBlock:(id)a6 activity:(id)a7
{
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24[3];
  id location;

  v12 = a5;
  v13 = a6;
  v14 = a7;
  objc_initWeak(&location, self);
  -[HMDAccessory home](self, "home");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory workQueue](self, "workQueue");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __103__HMDHAPAccessory__retrieveHAPAccessoryToPerformOperation_linkType_operationBlock_errorBlock_activity___block_invoke;
  v20[3] = &unk_1E89AB480;
  objc_copyWeak(v24, &location);
  v17 = v14;
  v21 = v17;
  v24[1] = (id)a3;
  v24[2] = (id)a4;
  v18 = v12;
  v22 = v18;
  v19 = v13;
  v23 = v19;
  objc_msgSend(v15, "retrieveHAPAccessoryForHMDAccessory:linkType:forceRetrieve:queue:completion:", self, a4, 0, v16, v20);

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);

}

- (BOOL)residentCanWakeForWOL
{
  void *v3;
  void *v4;
  void *v5;
  char v6;

  -[HMDAccessory home](self, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "primaryResident");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (-[HMDAccessory isRemoteAccessEnabled](self, "isRemoteAccessEnabled")
    && objc_msgSend(v4, "isEnabled")
    && objc_msgSend(v4, "isReachable"))
  {
    objc_msgSend(v4, "capabilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "supportsWakeOnLAN");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)_handleUnreachableAccessoryToPerformOperation:(int64_t)a3 operationBlock:(id)a4 errorBlock:(id)a5
{
  id v9;
  void (**v10)(id, void *);
  void *v11;
  _BOOL4 v12;
  int v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void (**v20)(id, void *);
  uint64_t v21;
  HMDHAPAccessory *v22;
  NSObject *v23;
  id v24;
  __CFString *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  HMDHAPAccessory *v30;
  NSObject *v31;
  void *v32;
  __CFString *v33;
  __CFString *v34;
  void *v35;
  void *v36;
  void *context;
  void *v38;
  uint8_t buf[4];
  id v40;
  __int16 v41;
  __CFString *v42;
  __int16 v43;
  id v44;
  __int16 v45;
  id v46;
  __int16 v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v9 = a4;
  v10 = (void (**)(id, void *))a5;
  if (-[HMDHAPAccessory canWakeUpViaWoL](self, "canWakeUpViaWoL"))
  {
    if (a3 == 3)
    {
      -[HMDAccessory home](self, "home");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = -[HMDHAPAccessory residentCanWakeForWOL](self, "residentCanWakeForWOL");
      v13 = 1;
      if (!-[HMDHAPAccessory isReachableViaBSP](self, "isReachableViaBSP") && v12)
        v13 = objc_msgSend(v11, "isCurrentDeviceAvailableResident");
      v14 = objc_alloc(MEMORY[0x1E0D28540]);
      v15 = (void *)MEMORY[0x1E0CB3940];
      MEMORY[0x1D17B8D08](self, a2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringWithFormat:", CFSTR("%@, %s:%ld"), v16, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory.m", 5915);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (void *)objc_msgSend(v14, "initWithName:", v17);
      v38 = v18;

      if (v13)
        v19 = v9;
      else
        v19 = 0;
      if (v13)
        v20 = v10;
      else
        v20 = 0;
      v21 = -[HMDHAPAccessory _wakeSuspendedHAPAccessoryToPerformOperation:linkType:operationBlock:errorBlock:activity:](self, "_wakeSuspendedHAPAccessoryToPerformOperation:linkType:operationBlock:errorBlock:activity:", 3, 1, v19, v20, v18);
      if (v13)
      {
        context = (void *)MEMORY[0x1D17BA0A0](v21);
        v22 = self;
        HMFGetOSLogHandle();
        v23 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v24 = (id)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory identifier](v22, "identifier");
          v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory isReachableViaBSP](v22, "isReachableViaBSP");
          HMFBooleanToString();
          v26 = (id)objc_claimAutoreleasedReturnValue();
          HMFBooleanToString();
          v27 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "isCurrentDeviceAvailableResident");
          HMFBooleanToString();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544386;
          v40 = v24;
          v41 = 2112;
          v42 = v25;
          v43 = 2112;
          v44 = v26;
          v45 = 2112;
          v46 = v27;
          v47 = 2112;
          v48 = v28;
          _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Waiting for wake operation to complete for accessory: %@. Reachability (%@) / ResidentCanWake (%@) / isResident (%@)", buf, 0x34u);

        }
        objc_autoreleasePoolPop(context);
        __HMFActivityScopeLeave();

        goto LABEL_25;
      }
      __HMFActivityScopeLeave();

    }
    else
    {
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        if ((unint64_t)a3 > 0xA)
          v33 = CFSTR("Undefined");
        else
          v33 = off_1E89ABEC8[a3];
        v34 = v33;
        -[HMDAccessory identifier](v30, "identifier");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory suspendedState](v30, "suspendedState");
        HAPAccessorySuspendedStateDescription();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v40 = v32;
        v41 = 2112;
        v42 = v34;
        v43 = 2112;
        v44 = v35;
        v45 = 2112;
        v46 = v36;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEBUG, "%{public}@Not processing wake for operation: '%@' on unreachable accessory: %@ in state: '%@'", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v29);
    }
  }
  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v10[2](v10, v11);
LABEL_25:

  }
}

- (BOOL)supportsUserManagement
{
  void *v3;
  BOOL v4;

  if (!-[HMDHAPAccessory isPrimary](self, "isPrimary"))
    return 0;
  -[HMDHAPAccessory publicKey](self, "publicKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

- (BOOL)canWakeBasedOnCharacteristicRequests:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  id obj;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v22;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(obj);
        v8 = *(id *)(*((_QWORD *)&v21 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v9 = v8;
        else
          v9 = 0;
        v10 = v9;

        if (v10)
        {
          objc_msgSend(v10, "value");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = 3;
        }
        else
        {
          v11 = 0;
          v12 = 2;
        }
        objc_msgSend(v8, "service");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "type");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "characteristic");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "characteristicType");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v20, "shouldAllowToWakeSuspendedAccessoryForOperation:service:characteristicType:value:", v12, v14, v16, v11);

        if ((v17 & 1) != 0)
        {
          LOBYTE(v5) = 1;
          goto LABEL_17;
        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_17:

  return v5;
}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 queue:(id)a5 completionHandler:(id)a6
{
  -[HMDHAPAccessory writeCharacteristicValues:source:message:queue:completionHandler:](self, "writeCharacteristicValues:source:message:queue:completionHandler:", a3, a4, 0, a5, a6);
}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 message:(id)a5 queue:(id)a6 completionHandler:(id)a7
{
  -[HMDHAPAccessory writeCharacteristicValues:source:message:queue:logEvent:completionHandler:](self, "writeCharacteristicValues:source:message:queue:logEvent:completionHandler:", a3, a4, a5, a6, 0, a7);
}

- (void)writeCharacteristicValues:(id)a3 source:(unint64_t)a4 message:(id)a5 queue:(id)a6 logEvent:(id)a7 completionHandler:(id)a8
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  NSObject *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  _QWORD block[5];
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  unint64_t v39;
  _QWORD aBlock[4];
  id v41;
  id v42;
  id v43;
  id v44;

  v15 = a3;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = objc_alloc(MEMORY[0x1E0D28540]);
  v21 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "stringWithFormat:", CFSTR("%@, %s:%ld"), v22, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory.m", 5996);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = (id)objc_msgSend(v20, "initWithName:", v23);

  v24 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke;
  aBlock[3] = &unk_1E89BF138;
  v41 = v44;
  v25 = v19;
  v43 = v25;
  v26 = v17;
  v42 = v26;
  v27 = _Block_copy(aBlock);
  -[HMDAccessory workQueue](self, "workQueue");
  v28 = objc_claimAutoreleasedReturnValue();
  block[0] = v24;
  block[1] = 3221225472;
  block[2] = __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_3;
  block[3] = &unk_1E89BCFB0;
  block[4] = self;
  v34 = v18;
  v35 = v15;
  v36 = v16;
  v38 = v27;
  v39 = a4;
  v37 = v44;
  v29 = v27;
  v30 = v16;
  v31 = v15;
  v32 = v18;
  dispatch_async(v28, block);

  __HMFActivityScopeLeave();
}

- (void)wakeOrScanForSuspendedAccessoryForRequests:(id)a3 source:(unint64_t)a4 completion:(id)a5
{
  id v8;
  id v9;
  id *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[5];
  id v15;
  id v16;
  unint64_t v17;
  _QWORD v18[5];
  id v19;

  v8 = a3;
  v9 = a5;
  if (-[HMDHAPAccessory isPoweringOn](self, "isPoweringOn")
    || -[HMDHAPAccessory canWakeBasedOnCharacteristicRequests:](self, "canWakeBasedOnCharacteristicRequests:", v8))
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __80__HMDHAPAccessory_wakeOrScanForSuspendedAccessoryForRequests_source_completion___block_invoke;
    v18[3] = &unk_1E89BFC88;
    v10 = &v19;
    v18[4] = self;
    v19 = v9;
    v11 = v9;
    -[HMDHAPAccessory wirelessPowerOn:](self, "wirelessPowerOn:", v18);
  }
  else
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __80__HMDHAPAccessory_wakeOrScanForSuspendedAccessoryForRequests_source_completion___block_invoke_392;
    v14[3] = &unk_1E89AB518;
    v14[4] = self;
    v10 = &v15;
    v12 = v8;
    v16 = v9;
    v17 = a4;
    v15 = v12;
    v13 = v9;
    -[HMDHAPAccessory initiateScan:](self, "initiateScan:", v14);

  }
}

- (void)_writeCharacteristicValues:(id)a3 localOperationRequired:(BOOL)a4 source:(unint64_t)a5 completionHandler:(id)a6 errorBlock:(id)a7
{
  -[HMDHAPAccessory _writeCharacteristicValues:localOperationRequired:source:message:completionHandler:logEvent:errorBlock:](self, "_writeCharacteristicValues:localOperationRequired:source:message:completionHandler:logEvent:errorBlock:", a3, a4, a5, 0, a6, 0, a7);
}

- (void)_writeCharacteristicValues:(id)a3 localOperationRequired:(BOOL)a4 source:(unint64_t)a5 message:(id)a6 completionHandler:(id)a7 logEvent:(id)a8 errorBlock:(id)a9
{
  _BOOL4 v12;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  _QWORD v33[4];
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40[3];
  BOOL v41;
  id location;
  id v43;

  v12 = a4;
  v15 = a3;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  v20 = objc_alloc(MEMORY[0x1E0D28540]);
  v21 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "stringWithFormat:", CFSTR("%@, %s:%ld"), v22, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory.m", 6164);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)objc_msgSend(v20, "initWithName:", v23);
  v43 = v24;

  objc_initWeak(&location, self);
  objc_msgSend(v24, "markWithReason:", CFSTR("Evaluating"));
  if (v12)
    v25 = 10;
  else
    v25 = 3;
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = __122__HMDHAPAccessory__writeCharacteristicValues_localOperationRequired_source_message_completionHandler_logEvent_errorBlock___block_invoke;
  v33[3] = &unk_1E89AB568;
  objc_copyWeak(v40, &location);
  v26 = v43;
  v41 = v12;
  v34 = v26;
  v40[1] = (id)v25;
  v27 = v19;
  v38 = v27;
  v28 = v15;
  v35 = v28;
  v40[2] = (id)a5;
  v29 = v16;
  v36 = v29;
  v30 = v18;
  v37 = v30;
  v31 = v17;
  v39 = v31;
  -[HMDHAPAccessory _evaluateLocalOperation:state:completion:](self, "_evaluateLocalOperation:state:completion:", 3, 0, v33);

  objc_destroyWeak(v40);
  objc_destroyWeak(&location);
  __HMFActivityScopeLeave();

}

- (id)getFullError:(id)a3 source:(unint64_t)a4 suspended:(BOOL)a5
{
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = v7;
  if (v7)
  {
    if (a5)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2401);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (a4 == 8)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2400);
        v10 = objc_claimAutoreleasedReturnValue();

        v9 = (void *)v10;
      }
      v16 = *MEMORY[0x1E0CB3388];
      v17[0] = v9;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)MEMORY[0x1E0CB35C8];
      objc_msgSend(v8, "domain");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "errorWithDomain:code:userInfo:", v13, objc_msgSend(v8, "code"), v11);
      v14 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v14 = v7;
    }
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

- (id)_updatedResponseTuplesForRequests:(id)a3 error:(id)a4 source:(unint64_t)a5 suspended:(BOOL)a6
{
  _BOOL4 v6;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  HMDHAPAccessory *v13;
  NSObject *v14;
  void *v15;
  _BOOL4 v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  HMDHAPAccessory *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  __int128 v39;
  id obj;
  uint64_t v42;
  _BOOL4 v43;
  id v44;
  HMDHAPAccessory *v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  void *v58;
  _BYTE v59[128];
  uint64_t v60;

  v6 = a6;
  v60 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v44 = a4;
  -[HMDAccessory home](self, "home");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "homeLocation");

  v45 = self;
  v43 = 0;
  if (-[HMDAccessory isSuspendCapable](self, "isSuspendCapable") && v6)
  {
    if (objc_msgSend(v44, "isHMError"))
    {
      if (-[HMDHAPAccessory custom1WoBLE](self, "custom1WoBLE") && objc_msgSend(v44, "code") == 4)
      {
        v12 = (void *)MEMORY[0x1D17BA0A0]();
        v13 = self;
        HMFGetOSLogHandle();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v52 = v15;
          _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Ignoring unreachability error for accessory supporting custom wake on BTLE", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v12);
        v16 = 1;
        goto LABEL_11;
      }
      if (-[HMDHAPAccessory canWakeUpViaWoL](self, "canWakeUpViaWoL"))
      {
        v16 = objc_msgSend(v44, "code") == 103;
LABEL_11:
        v43 = v16;
        goto LABEL_13;
      }
    }
    v43 = 0;
  }
LABEL_13:
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v9, "count"));
  v46 = (id)objc_claimAutoreleasedReturnValue();
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  obj = v9;
  v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
  v19 = a5;
  if (v17)
  {
    v20 = v17;
    v21 = *(_QWORD *)v48;
    v22 = v11 == 1 && v43;
    v42 = *MEMORY[0x1E0CB8790];
    *(_QWORD *)&v18 = 138544130;
    v39 = v18;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v48 != v21)
          objc_enumerationMutation(obj);
        v24 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
        if (v22
          && (objc_msgSend(*(id *)(*((_QWORD *)&v47 + 1) + 8 * i), "characteristic"),
              v25 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend(v25, "type"),
              v26 = (void *)objc_claimAutoreleasedReturnValue(),
              v27 = objc_msgSend(v26, "isEqualToString:", v42),
              v26,
              v25,
              v27))
        {
          v28 = (void *)MEMORY[0x1D17BA0A0]();
          v29 = v45;
          HMFGetOSLogHandle();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDAccessory identifier](v29, "identifier");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v39;
            v52 = v31;
            v53 = 2112;
            v54 = &unk_1E8B32F10;
            v55 = 2112;
            v56 = v42;
            v57 = 2112;
            v58 = v32;
            _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Force setting value: '%@' for characteristic type: %@ of %@ while suspended", buf, 0x2Au);

            v19 = a5;
          }

          objc_autoreleasePoolPop(v28);
          v33 = 0;
          v34 = 1;
          v35 = &unk_1E8B32F10;
        }
        else
        {
          -[HMDHAPAccessory getFullError:source:suspended:](v45, "getFullError:source:suspended:", v44, v19, v43, v39);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = 0;
          v35 = 0;
        }
        +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v24, v33, v39);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        if (v34)
        {
          objc_msgSend(v24, "characteristic");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "updateValue:updatedTime:stateNumber:notificationContext:", v35, 0, 0, 0);

          objc_msgSend(v36, "setValue:", v35);
        }
        objc_msgSend(v46, "addObject:", v36);

      }
      v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v59, 16);
    }
    while (v20);
  }

  return v46;
}

- (id)_updatedResponseForRemoteResponse:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "error");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5
    && (v6 = (void *)v5,
        v7 = -[HMDHAPAccessory canWakeViaCustomWoBLE](self, "canWakeViaCustomWoBLE"),
        v6,
        v7))
  {
    objc_msgSend(v4, "error");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "underlyingErrors");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "firstObject");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v10, "isHMError") && objc_msgSend(v10, "code") == 2400)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 2401);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)MEMORY[0x1E0CB35C8];
      objc_msgSend(v4, "error");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "code");
      v22 = *MEMORY[0x1E0CB3388];
      v23[0] = v11;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "hmErrorWithCode:userInfo:", v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "request");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v17, v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v18 = 0;
    }

  }
  else
  {
    v18 = 0;
  }
  if (v18)
    v19 = v18;
  else
    v19 = v4;
  v20 = v19;

  return v20;
}

- (void)readCharacteristicValues:(id)a3 source:(unint64_t)a4 queue:(id)a5 completionHandler:(id)a6
{
  -[HMDHAPAccessory readCharacteristicValues:source:message:queue:logEvent:completionHandler:](self, "readCharacteristicValues:source:message:queue:logEvent:completionHandler:", a3, a4, 0, a5, 0, a6);
}

- (void)autoUpdateCachedCountDownCharacteristics:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  double v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHAPAccessory *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "isSecondsDownCounterCharacteristicType:", v6);

  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "lastKnownValueUpdateTime");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceDate:", v9);
    v11 = (unint64_t)v10;

    objc_msgSend(v4, "lastKnownValue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "unsignedIntegerValue");

    if (v13 <= v11)
    {
      v16 = &unk_1E8B32F10;
    }
    else
    {
      v14 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v4, "lastKnownValue");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "numberWithInteger:", objc_msgSend(v15, "unsignedIntegerValue") - v11);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138543618;
        v23 = v20;
        v24 = 2112;
        v25 = v16;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Auto updating countdown counter value to: %@", (uint8_t *)&v22, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
    }
    objc_msgSend(v4, "stateNumber");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "updateValue:updatedTime:stateNumber:notificationContext:", v16, 0, v21, 0);

  }
}

- (id)hmdCharacteristicForInstanceId:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  void *v17;
  char v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  -[HMDHAPAccessory services](self, "services");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  v22 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v22)
  {
    v7 = *(_QWORD *)v28;
    v21 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v28 != v7)
          objc_enumerationMutation(v6);
        v9 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        objc_msgSend(v9, "characteristics", v21);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = (void *)objc_msgSend(v10, "copy");

        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
        if (v12)
        {
          v13 = v12;
          v14 = *(_QWORD *)v24;
          while (2)
          {
            for (j = 0; j != v13; ++j)
            {
              if (*(_QWORD *)v24 != v14)
                objc_enumerationMutation(v11);
              v16 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
              objc_msgSend(v16, "instanceID");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = objc_msgSend(v17, "isEqual:", v4);

              if ((v18 & 1) != 0)
              {
                v19 = v16;

                goto LABEL_19;
              }
            }
            v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
            if (v13)
              continue;
            break;
          }
        }

        v7 = v21;
      }
      v19 = 0;
      v22 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v22);
  }
  else
  {
    v19 = 0;
  }
LABEL_19:

  return v19;
}

- (BOOL)shouldConfigureTargetController
{
  void *v3;
  int v4;

  -[HMDAccessory home](self, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isOwnerUser");

  return v4 && -[HMDHAPAccessory supportsTargetController](self, "supportsTargetController");
}

- (void)saveBluetoothAddress:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hapAccessory");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
      objc_msgSend(v7, "setBluetoothClassicMacAddress:", v9);

  }
}

- (HMDHAPAccessory)initWithCoder:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;

  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = (HMDHAPAccessory *)-[HMDHAPAccessory _initWithCoder:](self, "_initWithCoder:", v4);
  objc_autoreleasePoolPop(v5);

  return v6;
}

- (id)_initWithCoder:(id)a3
{
  id v4;
  HMDHAPAccessory *v5;
  void *v6;
  uint64_t v7;
  NSString *uniqueIdentifier;
  uint64_t v9;
  HMDHAPMetadata *hapMetadata;
  NAFuture *v11;
  NAFuture *didConfigureCHIPAccessoryServerFuture;
  uint64_t v13;
  NSData *publicKey;
  uint64_t v15;
  NSString *pairingUsername;
  void *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  HMDService *primaryService;
  void *v29;
  void *v30;
  void *v31;
  HMDHAPAccessory *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  HMDAccessoryTransportInformation *v48;
  void *v49;
  id *v50;
  NSObject *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSNumber *accessoryFlags;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSNumber *internalEnhancedAuthMethod;
  uint64_t v61;
  NSNumber *internalEnhancedAuthConfigNumber;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  NSArray *targetUUIDs;
  uint64_t v68;
  NSData *setupHash;
  uint64_t v70;
  NSData *broadcastKey;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  HMFConnectivityInfo *connectivityInfo;
  void *v78;
  HMDHAPAccessory *v79;
  NSObject *v80;
  void *v81;
  HMFConnectivityInfo *v82;
  uint64_t v83;
  uint64_t v84;
  NSNumber *wiFiTransportCapabilities;
  uint64_t v86;
  NSNumber *sleepInterval;
  uint64_t v88;
  NSNumber *hasOnboardedForNaturalLighting;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  NSSet *initialServiceTypeUUIDs;
  uint64_t v96;
  HMCameraUserNotificationSettings *cameraProfileNotificationSettings;
  uint64_t v98;
  NSNumber *needsOnboarding;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  NSMutableDictionary *accessCodeCache;
  void *v109;
  uint64_t v110;
  NSNumber *matterNodeID;
  uint64_t v112;
  NSNumber *matterVendorID;
  uint64_t v114;
  NSNumber *matterProductID;
  uint64_t v117;
  void *v118;
  void *v119;
  objc_super v120;
  _QWORD v121[3];
  _QWORD v122[2];
  uint8_t buf[4];
  void *v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  _QWORD v129[3];
  _QWORD v130[2];
  _QWORD v131[2];
  _QWORD v132[2];
  _QWORD v133[4];

  v133[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v120.receiver = self;
  v120.super_class = (Class)HMDHAPAccessory;
  v5 = -[HMDAccessory initWithCoder:](&v120, sel_initWithCoder_, v4);
  if (v5)
  {
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("accessoryBridge")))
    {
      objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("accessoryBridge"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
        -[HMDAccessory setHostAccessory:](v5, "setHostAccessory:", v6);

    }
    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("accessoryIdentifier"));
    v7 = objc_claimAutoreleasedReturnValue();
    uniqueIdentifier = v5->_uniqueIdentifier;
    v5->_uniqueIdentifier = (NSString *)v7;

    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v9 = objc_claimAutoreleasedReturnValue();
    hapMetadata = v5->_hapMetadata;
    v5->_hapMetadata = (HMDHAPMetadata *)v9;

    v11 = (NAFuture *)objc_alloc_init(MEMORY[0x1E0D519C0]);
    didConfigureCHIPAccessoryServerFuture = v5->_didConfigureCHIPAccessoryServerFuture;
    v5->_didConfigureCHIPAccessoryServerFuture = v11;

    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("accessoryPublicKey"))
      && objc_msgSend(v4, "containsValueForKey:", CFSTR("accessoryPairingUsername")))
    {
      objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("accessoryPublicKey"));
      v13 = objc_claimAutoreleasedReturnValue();
      publicKey = v5->_publicKey;
      v5->_publicKey = (NSData *)v13;

      objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("accessoryPairingUsername"));
      v15 = objc_claimAutoreleasedReturnValue();
      pairingUsername = v5->_pairingUsername;
      v5->_pairingUsername = (NSString *)v15;

    }
    v17 = (void *)MEMORY[0x1E0C99E60];
    v18 = 0x1E0C99000uLL;
    v133[0] = objc_opt_class();
    v133[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v133, 2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setWithArray:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v20, CFSTR("identifiersForBridgedAccessories"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v21);
    else
      objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong((id *)&v5->_identifiersForBridgedAccessories, v22);

    v23 = (void *)MEMORY[0x1E0C99E60];
    v132[0] = objc_opt_class();
    v132[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v132, 2);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setWithArray:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v25, CFSTR("services"));
    v26 = objc_claimAutoreleasedReturnValue();

    v119 = (void *)v26;
    -[NSMutableArray setArray:](v5->_services, "setArray:", v26);
    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("kAccessoryPrimaryServiceKey"));
    v27 = objc_claimAutoreleasedReturnValue();
    primaryService = v5->_primaryService;
    v5->_primaryService = (HMDService *)v27;

    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HM.bluetoothAddr")))
    {
      objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.bluetoothAddr"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (v29)
      {
        v30 = v20;
        v31 = (void *)MEMORY[0x1D17BA0A0]();
        v32 = v5;
        HMFGetOSLogHandle();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "formattedString");
          v35 = v21;
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v124 = v34;
          v125 = 2112;
          v126 = (uint64_t)v36;
          _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Bluetooth address %@", buf, 0x16u);

          v21 = v35;
        }

        objc_autoreleasePoolPop(v31);
        -[HMDHAPAccessory saveBluetoothAddress:](v32, "saveBluetoothAddress:", v29);
        v18 = 0x1E0C99000uLL;
        v20 = v30;
      }

    }
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HM.accessoryTransportInformation"), 800))
    {
      v37 = (void *)MEMORY[0x1E0C99E60];
      v131[0] = objc_opt_class();
      v131[1] = objc_opt_class();
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v131, 2);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "setWithArray:", v38);
      v39 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v39, CFSTR("HM.accessoryTransportInformation"));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = (void *)MEMORY[0x1D17BA0A0]();
      v42 = v5;
      HMFGetOSLogHandle();
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v124 = v44;
        v125 = 2112;
        v126 = (uint64_t)v40;
        _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@adding transportInformationInstances for accessory transportInformationInstances: %@", buf, 0x16u);

        v18 = 0x1E0C99000;
      }

      objc_autoreleasePoolPop(v41);
      objc_msgSend(v42[57], "setArray:", v40);
      v118 = (void *)v39;
    }
    else
    {
      v118 = v20;
      v45 = v21;
      v46 = objc_msgSend(v4, "decodeIntegerForKey:", CFSTR("linkType"));
      objc_msgSend(MEMORY[0x1E0D163A8], "serverIdentifierWithUniqueIdentifier:", *(Class *)((char *)&v5->super.super.super.isa + v117));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D163A8], "instanceIDForUniqueIdentifier:", *(Class *)((char *)&v5->super.super.super.isa + v117));
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = -[HMDAccessoryTransportInformation initWithServerIdentifier:instanceID:linkType:]([HMDAccessoryTransportInformation alloc], "initWithServerIdentifier:instanceID:linkType:", v40, v47, v46);
      v49 = (void *)MEMORY[0x1D17BA0A0]();
      v50 = v5;
      HMFGetOSLogHandle();
      v51 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v53 = -[HMDAccessoryTransportInformation linkType](v48, "linkType");
        *(_DWORD *)buf = 138543618;
        v124 = v52;
        v125 = 2048;
        v126 = v53;
        _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@adding transportInformationInstance to accessory for linktype %ld", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v49);
      objc_msgSend(v50[57], "addObject:", v48);

      v21 = v45;
      v18 = 0x1E0C99000uLL;
    }

    v5->_communicationProtocol = 0;
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HAP.communicationProtocol")))
    {
      v54 = objc_msgSend(v4, "decodeIntegerForKey:", CFSTR("HAP.communicationProtocol"));
      if ((unint64_t)(v54 - 1) <= 1)
        v5->_communicationProtocol = v54;
    }
    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("accessoryFlagsCodingKey"));
    v55 = objc_claimAutoreleasedReturnValue();
    accessoryFlags = v5->_accessoryFlags;
    v5->_accessoryFlags = (NSNumber *)v55;

    v5->_certificationStatus = 0;
    v57 = *MEMORY[0x1E0CB7B10];
    if (objc_msgSend(v4, "containsValueForKey:", *MEMORY[0x1E0CB7B10]))
    {
      v58 = objc_msgSend(v4, "decodeIntegerForKey:", v57);
      if ((unint64_t)(v58 - 1) <= 1)
        v5->_certificationStatus = v58;
    }
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HAP.authMethod")))
    {
      objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HAP.authMethod"));
      v59 = objc_claimAutoreleasedReturnValue();
      internalEnhancedAuthMethod = v5->_internalEnhancedAuthMethod;
      v5->_internalEnhancedAuthMethod = (NSNumber *)v59;

    }
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HAP.authMethodConfigNumber")))
    {
      objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HAP.authMethodConfigNumber"));
      v61 = objc_claimAutoreleasedReturnValue();
      internalEnhancedAuthConfigNumber = v5->_internalEnhancedAuthConfigNumber;
      v5->_internalEnhancedAuthConfigNumber = (NSNumber *)v61;

    }
    v63 = (void *)MEMORY[0x1E0C99E60];
    v130[0] = objc_opt_class();
    v130[1] = objc_opt_class();
    objc_msgSend(*(id *)(v18 + 3360), "arrayWithObjects:count:", v130, 2);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "setWithArray:", v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v65, *MEMORY[0x1E0CB7B78]);
    v66 = objc_claimAutoreleasedReturnValue();
    targetUUIDs = v5->_targetUUIDs;
    v5->_targetUUIDs = (NSArray *)v66;

    v5->_hardwareSupport = objc_msgSend(v4, "decodeBoolForKey:", *MEMORY[0x1E0CB8118]);
    -[HMDHAPAccessory wirelessResumeInit](v5, "wirelessResumeInit");
    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.accessorySetupHash"));
    v68 = objc_claimAutoreleasedReturnValue();
    setupHash = v5->_setupHash;
    v5->_setupHash = (NSData *)v68;

    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("accessoryBroadcastKey")))
    {
      objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("accessoryBroadcastKey"));
      v70 = objc_claimAutoreleasedReturnValue();
      broadcastKey = v5->_broadcastKey;
      v5->_broadcastKey = (NSData *)v70;

    }
    v72 = *MEMORY[0x1E0CB7B70];
    if (objc_msgSend(v4, "containsValueForKey:", *MEMORY[0x1E0CB7B70]))
    {
      v73 = (void *)MEMORY[0x1E0C99E60];
      v129[0] = objc_opt_class();
      v129[1] = objc_opt_class();
      v129[2] = objc_opt_class();
      objc_msgSend(*(id *)(v18 + 3360), "arrayWithObjects:count:", v129, 3);
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v73, "setWithArray:", v74);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v75, v72);
      v76 = objc_claimAutoreleasedReturnValue();
      connectivityInfo = v5->_connectivityInfo;
      v5->_connectivityInfo = (HMFConnectivityInfo *)v76;

      v78 = (void *)MEMORY[0x1D17BA0A0]();
      v79 = v5;
      HMFGetOSLogHandle();
      v80 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        v82 = v5->_connectivityInfo;
        v83 = *(uint64_t *)((char *)&v5->super.super.super.isa + v117);
        *(_DWORD *)buf = 138543874;
        v124 = v81;
        v125 = 2112;
        v126 = (uint64_t)v82;
        v127 = 2112;
        v128 = v83;
        _os_log_impl(&dword_1CD062000, v80, OS_LOG_TYPE_DEBUG, "%{public}@Setting connectivityInfo to: %@ for accessory: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v78);
      v18 = 0x1E0C99000uLL;
    }
    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HAP.wtcap"));
    v84 = objc_claimAutoreleasedReturnValue();
    wiFiTransportCapabilities = v5->_wiFiTransportCapabilities;
    v5->_wiFiTransportCapabilities = (NSNumber *)v84;

    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HAP.sleepInterval"));
    v86 = objc_claimAutoreleasedReturnValue();
    sleepInterval = v5->_sleepInterval;
    v5->_sleepInterval = (NSNumber *)v86;

    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), *MEMORY[0x1E0CB7C80]);
    v88 = objc_claimAutoreleasedReturnValue();
    hasOnboardedForNaturalLighting = v5->_hasOnboardedForNaturalLighting;
    v5->_hasOnboardedForNaturalLighting = (NSNumber *)v88;

    v90 = (void *)MEMORY[0x1E0C99E60];
    v122[0] = objc_opt_class();
    v122[1] = objc_opt_class();
    objc_msgSend(*(id *)(v18 + 3360), "arrayWithObjects:count:", v122, 2);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v90, "setWithArray:", v91);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v92, CFSTR("HAP.initialServiceTypeUUIDs"));
    v93 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D28630], "hmf_setOfCachedInstancesForStrings:", v93);
    v94 = objc_claimAutoreleasedReturnValue();
    initialServiceTypeUUIDs = v5->_initialServiceTypeUUIDs;
    v5->_initialServiceTypeUUIDs = (NSSet *)v94;

    -[HMDHAPAccessory cameraProfileNotificationSettingsFromCoder:](v5, "cameraProfileNotificationSettingsFromCoder:", v4);
    v96 = objc_claimAutoreleasedReturnValue();
    cameraProfileNotificationSettings = v5->_cameraProfileNotificationSettings;
    v5->_cameraProfileNotificationSettings = (HMCameraUserNotificationSettings *)v96;

    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HM.needsOnboarding")))
    {
      objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HM.needsOnboarding"));
      v98 = objc_claimAutoreleasedReturnValue();
      needsOnboarding = v5->_needsOnboarding;
      v5->_needsOnboarding = (NSNumber *)v98;

    }
    v5->_suspendedState = 0;
    v100 = *MEMORY[0x1E0CB80F8];
    if (objc_msgSend(v4, "containsValueForKey:", *MEMORY[0x1E0CB80F8]))
    {
      v101 = objc_msgSend(v4, "decodeIntegerForKey:", v100);
      if ((unint64_t)(v101 - 1) <= 2)
        v5->_suspendedState = v101;
    }
    -[HMDAccessory decodePreferredMediaUser:](v5, "decodePreferredMediaUser:", v4);
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HMDSiriEndpointAccessoryCapabiltiesKey")))
    {
      objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMDSiriEndpointAccessoryCapabiltiesKey"));
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      v103 = v102;
      if (v102)
        -[HMDHAPAccessory setSiriEndpointCapabilities:](v5, "setSiriEndpointCapabilities:", objc_msgSend(v102, "unsignedIntegerValue"));

    }
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HMDHAPAccessoryAccessCodeCacheCodingKey")))
    {
      v104 = (void *)MEMORY[0x1E0C99E60];
      v121[0] = objc_opt_class();
      v121[1] = objc_opt_class();
      v121[2] = objc_opt_class();
      objc_msgSend(*(id *)(v18 + 3360), "arrayWithObjects:count:", v121, 3);
      v105 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v104, "setWithArray:", v105);
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v106, CFSTR("HMDHAPAccessoryAccessCodeCacheCodingKey"));
      v107 = objc_claimAutoreleasedReturnValue();
      accessCodeCache = v5->_accessCodeCache;
      v5->_accessCodeCache = (NSMutableDictionary *)v107;

    }
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HMDHAPAccessoryHasPostedBulletinForAccessCodeOnboardingCodingKey")))v5->_hasPostedBulletinForAccessCodeOnboarding = objc_msgSend(v4, "decodeBoolForKey:", CFSTR("HMDHAPAccessoryHasPostedBulletinForAccessCodeOnboardingCodingKey"));
    if (objc_msgSend(v4, "containsValueForKey:", CFSTR("HMDHAPAccessoryHasPostedBulletinForWalletKeyOnboardingCodingKey")))v5->_hasPostedBulletinForWalletKeyOnboarding = objc_msgSend(v4, "decodeBoolForKey:", CFSTR("HMDHAPAccessoryHasPostedBulletinForWalletKeyOnboardingCodingKey"));
    objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HMDHAP.chipStorage"));
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    if (v109)
    {
      objc_storeStrong((id *)&v5->_chipStorage, v109);
      objc_msgSend(v109, "nodeID");
      v110 = objc_claimAutoreleasedReturnValue();
      matterNodeID = v5->_matterNodeID;
      v5->_matterNodeID = (NSNumber *)v110;

      objc_msgSend(v109, "vendorID");
      v112 = objc_claimAutoreleasedReturnValue();
      matterVendorID = v5->_matterVendorID;
      v5->_matterVendorID = (NSNumber *)v112;

      objc_msgSend(v109, "productID");
      v114 = objc_claimAutoreleasedReturnValue();
      matterProductID = v5->_matterProductID;
      v5->_matterProductID = (NSNumber *)v114;

      if (v5->_matterVendorID)
      {
        if (v5->_matterProductID)
          logAndPostNotification(CFSTR("HMDAccessoryVendorIDProductIDUpdatedNotification"), v5, 0);
      }
    }

  }
  return v5;
}

- (BOOL)_shouldFilterAccessoryProfileForUnentitledClients:(id)a3
{
  id v4;
  char isKindOfClass;
  objc_super v7;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (v7.receiver = self,
        v7.super_class = (Class)HMDHAPAccessory,
        -[HMDAccessory _shouldFilterAccessoryProfileForUnentitledClients:](&v7, sel__shouldFilterAccessoryProfileForUnentitledClients_, v4))|| (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)|| (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }

  return isKindOfClass & 1;
}

- (id)getBluetoothAddress
{
  void *v2;
  void *v3;
  void *v4;

  -[HMDHAPAccessory matchingHAPAccessoryWithLinkType:](self, "matchingHAPAccessoryWithLinkType:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "bluetoothClassicMacAddress");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (void)encodeWithCoder:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  -[HMDHAPAccessory _encodeWithCoder:](self, "_encodeWithCoder:", v5);
  objc_autoreleasePoolPop(v4);

}

- (void)_encodeWithCoder:(id)a3
{
  id v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  _BOOL8 v9;
  void *v10;
  void *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  int64_t v26;
  void *v27;
  _BOOL8 v28;
  void *v29;
  void *v30;
  _BOOL8 v31;
  _BOOL8 v32;
  void *v33;
  _BOOL8 v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  _BOOL8 v49;
  _BOOL8 v50;
  _BOOL8 v51;
  _BOOL8 v52;
  void *v53;
  void *v54;
  _BOOL8 v55;
  void *v56;
  void *v57;
  _BOOL8 v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  int v65;
  int v66;
  void *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  objc_super v72;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v72.receiver = self;
  v72.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory encodeWithCoder:](&v72, sel_encodeWithCoder_, v4);
  v5 = objc_msgSend(v4, "hmd_isForXPCTransport");
  v6 = objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess");
  v7 = objc_msgSend(v4, "hmd_homeManagerOptions");
  if ((v7 & 0x20) == 0)
  {
LABEL_8:
    if (!v5)
      goto LABEL_10;
    goto LABEL_9;
  }
  v8 = objc_msgSend(v4, "hmd_isForLocalStore");
  if ((objc_msgSend(v4, "hmd_isForXPCTransport") & 1) != 0)
    goto LABEL_7;
  if (!v5)
  {
    if (!v8)
      goto LABEL_10;
    goto LABEL_7;
  }
  if (((objc_msgSend(v4, "hmd_isForXPCTransportEntitledForSPIAccess") | v8) & 1) != 0)
  {
LABEL_7:
    -[HMDAccessory encodePreferredMediaUser:](self, "encodePreferredMediaUser:", v4);
    goto LABEL_8;
  }
LABEL_9:
  v9 = -[HMDHAPAccessory supportsPrimaryUserInfoSubscription](self, "supportsPrimaryUserInfoSubscription");
  objc_msgSend(v4, "encodeBool:forKey:", v9, *MEMORY[0x1E0CB80C8]);
LABEL_10:
  if (-[HMDHAPAccessory hasTelevisionService](self, "hasTelevisionService"))
  {
    if ((v7 & 0x400) == 0)
      goto LABEL_69;
  }
  else
  {
    -[HMDHAPAccessory networkRouterController](self, "networkRouterController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      if ((v7 & 0x1000) == 0)
        goto LABEL_69;
    }
    else
    {
      -[HMDHAPAccessory siriEndpointProfile](self, "siriEndpointProfile");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v11 != 0;

      if ((v7 & 0x201) == 0 && (v12 & (v7 >> 15)) == 0)
        goto LABEL_69;
    }
  }
  objc_msgSend(v4, "encodeBool:forKey:", -[HMDHAPAccessory isPaired](self, "isPaired", __PAIR64__(v6, v5)), CFSTR("paired"));
  -[HMDHAPAccessory identifiersForBridgedAccessories](self, "identifiersForBridgedAccessories");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "allObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v14, CFSTR("identifiersForBridgedAccessories"));

  -[HMDHAPAccessory bridge](self, "bridge");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeBool:forKey:", v67 != 0, CFSTR("isBridged"));
  -[HMDHAPAccessory accessoryFlags](self, "accessoryFlags");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v15, CFSTR("accessoryFlagsCodingKey"));

  -[HMDHAPAccessory broadcastKey](self, "broadcastKey");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v16, CFSTR("accessoryBroadcastKey"));

  -[HMDHAPAccessory uniqueIdentifier](self, "uniqueIdentifier");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v17, CFSTR("accessoryIdentifier"));

  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v68, v73, 16);
  if (v19)
  {
    v20 = v19;
    v21 = 0;
    v22 = 0;
    v23 = *(_QWORD *)v69;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v69 != v23)
          objc_enumerationMutation(v18);
        v25 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * i);
        if (objc_msgSend(v25, "linkType") == 1)
        {
          v22 |= 1uLL;
          v21 = 1;
        }
        else if (objc_msgSend(v25, "linkType") == 2)
        {
          v22 |= 2uLL;
          if (!v21)
            v21 = 2;
        }
      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v68, v73, 16);
    }
    while (v20);
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  objc_msgSend(v4, "encodeInteger:forKey:", v21, CFSTR("linkType"));
  if ((v65 ^ 1 | v66) == 1)
  {
    v26 = -[HMDHAPAccessory certificationStatus](self, "certificationStatus");
    objc_msgSend(v4, "encodeInteger:forKey:", v26, *MEMORY[0x1E0CB7B10]);
    -[HMDHAPAccessory targetUUIDs](self, "targetUUIDs");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v27, *MEMORY[0x1E0CB7B78]);

    v28 = -[HMDHAPAccessory hardwareSupport](self, "hardwareSupport");
    objc_msgSend(v4, "encodeBool:forKey:", v28, *MEMORY[0x1E0CB8118]);
    -[HMDHAPAccessory getBluetoothAddress](self, "getBluetoothAddress");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v29, CFSTR("HM.bluetoothAddr"));

    -[HMDHAPAccessory hasOnboardedForNaturalLighting](self, "hasOnboardedForNaturalLighting");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v30, *MEMORY[0x1E0CB7C80]);

  }
  if (v65)
  {
    v31 = -[HMDHAPAccessory supportsTargetController](self, "supportsTargetController");
    objc_msgSend(v4, "encodeBool:forKey:", v31, *MEMORY[0x1E0CB8128]);
    if (v66)
    {
      objc_msgSend(v4, "encodeInteger:forKey:", v22, CFSTR("HM.accessoryTransportTypes"));
      v32 = -[HMDHAPAccessory _supportsMediaAccessControl](self, "_supportsMediaAccessControl");
      objc_msgSend(v4, "encodeBool:forKey:", v32, *MEMORY[0x1E0CB8098]);
      -[HMDHAPAccessory symptomsHandler](self, "symptomsHandler");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "encodeBool:forKey:", v33 != 0, *MEMORY[0x1E0CB7C88]);

      v34 = -[HMDAccessory isReachable](self, "isReachable")
         || -[HMDAccessory isRemotelyReachable](self, "isRemotelyReachable");
      objc_msgSend(v4, "encodeBool:forKey:", v34, *MEMORY[0x1E0CB7B80]);
      v48 = -[HMDHAPAccessory suspendedState](self, "suspendedState");
      objc_msgSend(v4, "encodeInteger:forKey:", v48, *MEMORY[0x1E0CB80F8]);
      v49 = -[HMDHAPAccessory supportsCHIP](self, "supportsCHIP");
      objc_msgSend(v4, "encodeBool:forKey:", v49, *MEMORY[0x1E0CB8058]);
      v50 = -[HMDHAPAccessory(CHIP) requiresThreadRouter](self, "requiresThreadRouter");
      objc_msgSend(v4, "encodeBool:forKey:", v50, *MEMORY[0x1E0CB7DF0]);
      v51 = -[HMDHAPAccessory supportsAccessCode](self, "supportsAccessCode");
      objc_msgSend(v4, "encodeBool:forKey:", v51, *MEMORY[0x1E0CB8040]);
      v52 = -[HMDHAPAccessory supportsWalletKey](self, "supportsWalletKey");
      objc_msgSend(v4, "encodeBool:forKey:", v52, *MEMORY[0x1E0CB80F0]);
    }
    -[HMDHAPAccessory services](self, "services");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHAPAccessory encodeServices:forXPCCoder:metadata:](HMDHAPAccessory, "encodeServices:forXPCCoder:metadata:", v53, v4, v54);

    if (_os_feature_enabled_impl())
    {
      v55 = -[HMDHAPAccessory supportsDiagnosticsTransfer](self, "supportsDiagnosticsTransfer");
      objc_msgSend(v4, "encodeBool:forKey:", v55, *MEMORY[0x1E0CB7BD0]);
      -[HMDHAPAccessory supportedDiagnostics](self, "supportedDiagnostics");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      if (v56)
        objc_msgSend(v4, "encodeObject:forKey:", v56, *MEMORY[0x1E0CB8038]);

    }
    -[HMDHAPAccessory matterNodeID](self, "matterNodeID");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v38, *MEMORY[0x1E0CB7CD0]);
  }
  else
  {
    -[HMDHAPAccessory setupHash](self, "setupHash");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v35, CFSTR("HM.accessorySetupHash"));

    objc_msgSend(v4, "encodeConditionalObject:forKey:", v67, CFSTR("accessoryBridge"));
    -[HMDHAPAccessory services](self, "services");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v36, CFSTR("services"));

    -[HMDHAPAccessory primaryService](self, "primaryService");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v37, CFSTR("kAccessoryPrimaryServiceKey"));

    -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v38, CFSTR("HM.accessoryTransportInformation"));
    objc_msgSend(v4, "encodeInteger:forKey:", -[HMDHAPAccessory communicationProtocol](self, "communicationProtocol"), CFSTR("HAP.communicationProtocol"));
    -[HMDHAPAccessory publicKey](self, "publicKey");
    v39 = objc_claimAutoreleasedReturnValue();
    if (v39)
    {
      v40 = (void *)v39;
      -[HMDHAPAccessory pairingUsername](self, "pairingUsername");
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      if (v41)
      {
        -[HMDHAPAccessory publicKey](self, "publicKey");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "encodeObject:forKey:", v42, CFSTR("accessoryPublicKey"));

        -[HMDHAPAccessory pairingUsername](self, "pairingUsername");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "encodeObject:forKey:", v43, CFSTR("accessoryPairingUsername"));

      }
    }
    -[HMDHAPAccessory connectivityInfo](self, "connectivityInfo");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v44, *MEMORY[0x1E0CB7B70]);

    -[HMDHAPAccessory wiFiTransportCapabilities](self, "wiFiTransportCapabilities");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v45, CFSTR("HAP.wtcap"));

    -[HMDHAPAccessory sleepInterval](self, "sleepInterval");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v46, CFSTR("HAP.sleepInterval"));

    v47 = -[HMDHAPAccessory suspendedState](self, "suspendedState");
    objc_msgSend(v4, "encodeInteger:forKey:", v47, *MEMORY[0x1E0CB80F8]);
  }

  if ((objc_msgSend(v4, "hmd_isForLocalStore") & 1) != 0
    || objc_msgSend(v4, "hmd_isForRemoteTransport")
    && (objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount") & 1) == 0
    && (objc_msgSend(v4, "hmd_isForRemoteUserAdministrator") & 1) != 0
    || objc_msgSend(v4, "hmd_isForRemoteTransportOnSameAccount")
    && (objc_msgSend(v4, "hmd_isForRemoteGatewayCoder") & 1) == 0)
  {
    -[HMDHAPAccessory initialServiceTypeUUIDs](self, "initialServiceTypeUUIDs");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v57, CFSTR("HAP.initialServiceTypeUUIDs"));

  }
  v58 = -[HMDHAPAccessory supportsPreferredMediaUser](self, "supportsPreferredMediaUser");
  objc_msgSend(v4, "encodeBool:forKey:", v58, *MEMORY[0x1E0CB80C0]);
  if (objc_msgSend(v4, "hmd_isForLocalStore"))
  {
    -[HMDHAPAccessory internalEnhancedAuthMethod](self, "internalEnhancedAuthMethod");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v59, CFSTR("HAP.authMethod"));

    -[HMDHAPAccessory internalEnhancedAuthConfigNumber](self, "internalEnhancedAuthConfigNumber");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    if (v60)
      objc_msgSend(v4, "encodeObject:forKey:", v60, CFSTR("HAP.authMethodConfigNumber"));

  }
  -[HMDHAPAccessory needsOnboarding](self, "needsOnboarding");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v61, CFSTR("HM.needsOnboarding"));

  if (objc_msgSend(v4, "hmd_isForLocalStore"))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMDHAPAccessory siriEndpointCapabilities](self, "siriEndpointCapabilities"));
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v62, CFSTR("HMDSiriEndpointAccessoryCapabiltiesKey"));

  }
  -[HMDHAPAccessory encodeCameraProfileNotificationSettingsWithCoder:](self, "encodeCameraProfileNotificationSettingsWithCoder:", v4);
  if (objc_msgSend(v4, "hmd_isForLocalStore"))
  {
    -[HMDHAPAccessory accessCodeCache](self, "accessCodeCache");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "encodeObject:forKey:", v63, CFSTR("HMDHAPAccessoryAccessCodeCacheCodingKey"));

    if (-[HMDHAPAccessory hasPostedBulletinForAccessCodeOnboarding](self, "hasPostedBulletinForAccessCodeOnboarding"))
      objc_msgSend(v4, "encodeBool:forKey:", -[HMDHAPAccessory hasPostedBulletinForAccessCodeOnboarding](self, "hasPostedBulletinForAccessCodeOnboarding"), CFSTR("HMDHAPAccessoryHasPostedBulletinForAccessCodeOnboardingCodingKey"));
  }
  if (objc_msgSend(v4, "hmd_isForLocalStore")
    && -[HMDHAPAccessory hasPostedBulletinForWalletKeyOnboarding](self, "hasPostedBulletinForWalletKeyOnboarding"))
  {
    objc_msgSend(v4, "encodeBool:forKey:", -[HMDHAPAccessory hasPostedBulletinForWalletKeyOnboarding](self, "hasPostedBulletinForWalletKeyOnboarding"), CFSTR("HMDHAPAccessoryHasPostedBulletinForWalletKeyOnboardingCodingKey"));
  }
  -[HMDHAPAccessory chipStorage](self, "chipStorage");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "encodeObject:forKey:", v64, CFSTR("HMDHAP.chipStorage"));

LABEL_69:
}

- (BOOL)supportsPrimaryUserInfoSubscription
{
  return 0;
}

- (BOOL)supportsPreferredMediaUser
{
  void *v3;
  void *v4;
  void *v5;
  BOOL v6;

  -[HMDAccessory home](self, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "primaryResident");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[HMDHAPAccessory siriEndpointProfile](self, "siriEndpointProfile");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5 != 0;

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (HMDMessageRouter)primaryResidentMessageRouter
{
  void *v2;
  void *v3;

  -[HMDAccessory home](self, "home");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "primaryResidentMessageRouter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDMessageRouter *)v3;
}

- (void)handleHomeUserRemovedNotification:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  HMDHAPAccessory *v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling home user removed notification", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDAccessory workQueue](v6, "workQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __53__HMDHAPAccessory_handleHomeUserRemovedNotification___block_invoke;
  v11[3] = &unk_1E89C2328;
  v12 = v4;
  v13 = v6;
  v10 = v4;
  dispatch_async(v9, v11);

}

- (void)_handleHomeUserRemovedNotification:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  HMDHAPAccessory *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  HMDHAPAccessory *v37;
  NSObject *v38;
  void *v39;
  _QWORD v40[4];
  id v41;
  id v42;
  id v43;
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  id v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v45 = v9;
    v46 = 2112;
    v47 = v4;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling removed user: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (!v4)
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = v7;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v45 = v31;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Removed user is nil", buf, 0xCu);

    }
    goto LABEL_14;
  }
  -[HMDHAPAccessory siriEndpointProfile](v7, "siriEndpointProfile");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10 == 0;

  if (v11)
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = v7;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v45 = v32;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@SiriEndpointProfile is not installed", buf, 0xCu);

    }
LABEL_14:

    objc_autoreleasePoolPop(v28);
    goto LABEL_23;
  }
  -[HMDAccessory home](v7, "home");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v12, "isCurrentDeviceConfirmedPrimaryResident") & 1) != 0)
  {
    objc_msgSend(v12, "owner");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v4;
    -[HMDHAPAccessory cachedRemovedUser](v7, "cachedRemovedUser");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      -[HMDHAPAccessory cachedRemovedUser](v7, "cachedRemovedUser");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory preferredMediaUserUUID](v7, "preferredMediaUserUUID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v17, "hmf_isEqualToUUID:", v18);

      if (v19)
      {
        v20 = (void *)MEMORY[0x1D17BA0A0]();
        v21 = v7;
        HMFGetOSLogHandle();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory cachedRemovedUser](v21, "cachedRemovedUser");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v45 = v23;
          v46 = 2112;
          v47 = v24;
          _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Current preferred media user is the cached removed user: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v20);
        -[HMDHAPAccessory cachedRemovedUser](v21, "cachedRemovedUser");
        v25 = objc_claimAutoreleasedReturnValue();

        v14 = (id)v25;
      }
    }
    objc_initWeak((id *)buf, v7);
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 3221225472;
    v40[2] = __54__HMDHAPAccessory__handleHomeUserRemovedNotification___block_invoke;
    v40[3] = &unk_1E89BCB20;
    objc_copyWeak(&v43, (id *)buf);
    v26 = v14;
    v41 = v26;
    v27 = v13;
    v42 = v27;
    -[HMDAccessory setDefaultPreferredMediaUserIfRemoved:defaultUser:completion:](v7, "setDefaultPreferredMediaUserIfRemoved:defaultUser:completion:", v26, v27, v40);

    objc_destroyWeak(&v43);
    objc_destroyWeak((id *)buf);

  }
  else
  {
    objc_msgSend(v4, "uuid");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory preferredMediaUserUUID](v7, "preferredMediaUserUUID");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v33, "hmf_isEqualToUUID:", v34);

    if (v35)
    {
      v36 = (void *)MEMORY[0x1D17BA0A0]();
      v37 = v7;
      HMFGetOSLogHandle();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v45 = v39;
        v46 = 2112;
        v47 = v4;
        _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_INFO, "%{public}@Current preferred user was removed while there's no confirmed primary resident. Caching removed user: %@.", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v36);
      -[HMDHAPAccessory setCachedRemovedUser:](v37, "setCachedRemovedUser:", v4);
    }
  }

LABEL_23:
}

- (void)routeUpdatePreferredMediaUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory primaryResidentMessageRouter](self, "primaryResidentMessageRouter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __49__HMDHAPAccessory_routeUpdatePreferredMediaUser___block_invoke;
    v12[3] = &unk_1E89BFD28;
    v12[4] = self;
    objc_msgSend(v5, "routeMessage:localHandler:", v4, v12);
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v14 = v10;
      v15 = 2112;
      v16 = v4;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Primary resident message router is nil. %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);

  }
}

- (void)handleUpdatePreferredMediaUser:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  _BOOL4 v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  BOOL v20;
  void *v21;
  HMDHAPAccessory *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  HMDHAPAccessory *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  HMDHAPAccessory *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  HMDHAPAccessory *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD v39[4];
  id v40;
  id v41;
  id v42[2];
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  id v46;
  __int16 v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v44 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling update preferred media user notification", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHAPAccessory siriEndpointProfile](v6, "siriEndpointProfile");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9 == 0;

  if (v10)
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = v6;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v44 = v28;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Cannot set preferred user on accessory that is not siri capable.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }
  else
  {
    objc_msgSend(v4, "numberForKey:", *MEMORY[0x1E0CB7D90]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v11, "unsignedIntegerValue") == 1)
    {
      objc_msgSend(v4, "uuidForKey:", CFSTR("kUserUUIDKey"));
      v12 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory home](v6, "home");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "userWithUUID:", v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v14 == 0;

      if (v15)
      {
        v33 = (void *)MEMORY[0x1D17BA0A0]();
        v34 = v6;
        HMFGetOSLogHandle();
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory home](v34, "home");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v44 = v36;
          v45 = 2112;
          v46 = v12;
          v47 = 2112;
          v48 = v37;
          _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_ERROR, "%{public}@Did not find user with uuid %@ in home %@.", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v33);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 5);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v38);

      }
      else
      {
        -[HMDAccessory preferredMediaUserUUID](v6, "preferredMediaUserUUID");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = HMFEqualObjects();

        if (v17
          && (-[HMDAccessory preferredMediaUserSelectionTypeNumber](v6, "preferredMediaUserSelectionTypeNumber"),
              (v18 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
          && (-[HMDAccessory preferredMediaUserSelectionTypeNumber](v6, "preferredMediaUserSelectionTypeNumber"),
              v19 = (void *)objc_claimAutoreleasedReturnValue(),
              v20 = objc_msgSend(v19, "unsignedIntegerValue") == 1,
              v19,
              v18,
              v20))
        {
          v21 = (void *)MEMORY[0x1D17BA0A0]();
          v22 = v6;
          HMFGetOSLogHandle();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v44 = v24;
            _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@User already matches.", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v21);
          objc_msgSend(v4, "respondWithSuccess");
        }
        else
        {
          objc_initWeak((id *)buf, v6);
          v39[0] = MEMORY[0x1E0C809B0];
          v39[1] = 3221225472;
          v39[2] = __50__HMDHAPAccessory_handleUpdatePreferredMediaUser___block_invoke;
          v39[3] = &unk_1E89AB5B8;
          objc_copyWeak(v42, (id *)buf);
          v40 = v4;
          v12 = v12;
          v41 = v12;
          v42[1] = (id)1;
          -[HMDAccessory setPreferredMediaUser:selectionType:completion:](v6, "setPreferredMediaUser:selectionType:completion:", v12, 1, v39);

          objc_destroyWeak(v42);
          objc_destroyWeak((id *)buf);
        }
      }
    }
    else
    {
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = v6;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v44 = v32;
        v45 = 2112;
        v46 = v11;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@Unexpected selection type %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v29);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v12 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v12);
    }

  }
}

- (void)runTransactionWithPreferredMediaUserUUID:(id)a3 selectionType:(unint64_t)a4 completion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v22 = v13;
    v23 = 2112;
    v24 = v8;
    v25 = 2112;
    v26 = v14;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Run transaction and set preferred media user: %@, type: %@.", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHAPAccessory transactionWithObjectChangeType:](v11, "transactionWithObjectChangeType:", 2);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v16 = v15;
  else
    v16 = 0;
  v17 = v16;

  objc_msgSend(v17, "setPreferredMediaUserUUID:", v8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a4);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setPreferredUserSelectionType:", v18);

  v20 = v17;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v20, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDAccessory runTransactionWithModels:label:completion:](v11, "runTransactionWithModels:label:completion:", v19, CFSTR("Update preferred media user"), v9);
}

- (void)notifyValue:(id)a3 previousValue:(id)a4 error:(id)a5 forCharacteristic:(id)a6 requestMessage:(id)a7
{
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  BOOL v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHAPAccessory *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void (**v33)(void *, id, void *);
  id v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  int v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  int v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  HMDHomeKitVersion *v54;
  int v55;
  void *v56;
  HMDHAPAccessory *v57;
  NSObject *v58;
  void *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  HMDRemoteDeviceMessageDestination *v63;
  void *v64;
  void *v65;
  HMDRemoteDeviceMessageDestination *v66;
  HMDRemoteMessage *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  void *v79;
  _QWORD v80[4];
  void (**v81)(void *, id, void *);
  char v82;
  _QWORD v83[4];
  id v84;
  void (**v85)(void *, id, void *);
  _QWORD aBlock[4];
  id v87;
  id v88;
  id location;
  uint8_t buf[4];
  void *v91;
  __int16 v92;
  id v93;
  _QWORD v94[4];
  _QWORD v95[7];

  v95[4] = *MEMORY[0x1E0C80C00];
  v78 = a3;
  v73 = a4;
  v77 = a5;
  v12 = a6;
  v13 = a7;
  objc_msgSend(v12, "service");
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)MEMORY[0x1E0C99E08];
  v94[0] = CFSTR("kServiceInstanceID");
  objc_msgSend(v76, "instanceID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v95[0] = v15;
  v94[1] = CFSTR("kCharacteristicInstanceID");
  objc_msgSend(v12, "instanceID");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v95[1] = v16;
  v94[2] = CFSTR("kCharacteristicValue");
  v17 = v78;
  v18 = v78;
  if (!v78)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 0;
  }
  v19 = v17 != 0;
  v95[2] = v18;
  v94[3] = CFSTR("kCharacteristicValueUpdateTime");
  objc_msgSend(v12, "lastKnownValueUpdateTime");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v95[3] = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v95, v94, 4);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "dictionaryWithDictionary:", v21);
  v79 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v19)
  -[HMDAccessory home](self, "home");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stateNumber");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    objc_msgSend(v12, "stateNumber");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v23, CFSTR("kCharacteristicValueUpdateStateNumberKey"));

  }
  objc_msgSend(v12, "notificationContext");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "notificationContext");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v91 = v28;
      v92 = 2112;
      v93 = v29;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Setting notification context %@ in message payload", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(v12, "notificationContext");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v30, CFSTR("kCharacteristicNotificationContextKey"));

  }
  if (v77)
  {
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v77, 1, 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v31, CFSTR("kCharacteristicErrorDataKey"));

  }
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __84__HMDHAPAccessory_notifyValue_previousValue_error_forCharacteristic_requestMessage___block_invoke;
  aBlock[3] = &unk_1E89BF4F0;
  objc_copyWeak(&v88, &location);
  v32 = v13;
  v87 = v32;
  v33 = (void (**)(void *, id, void *))_Block_copy(aBlock);
  v34 = v32;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v35 = v34;
  else
    v35 = 0;
  v74 = v35;

  objc_msgSend(v34, "destination");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v37 = v36;
  else
    v37 = 0;
  v75 = v37;

  v38 = objc_msgSend(v34, "isRemote");
  if (v75)
    v39 = v38;
  else
    v39 = 0;
  if (v39 == 1 && objc_msgSend(v74, "type") != 2)
  {
    objc_msgSend(v75, "device");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "version");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("3.0"));
    v55 = objc_msgSend(v53, "isAtLeastVersion:", v54);

    v56 = (void *)MEMORY[0x1D17BA0A0]();
    v57 = self;
    if (v55)
    {
      HMFGetOSLogHandle();
      v58 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v91 = v59;
        v92 = 2112;
        v93 = v74;
        _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_INFO, "%{public}@Preferring to send the response as a response for: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v56);
      v33[2](v33, v77, v79);
      v40 = 1;
    }
    else
    {
      HMFGetOSLogHandle();
      v60 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v91 = v61;
        v92 = 2112;
        v93 = v74;
        _os_log_impl(&dword_1CD062000, v60, OS_LOG_TYPE_INFO, "%{public}@Preferring to send the response as a notification for: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v56);
      v62 = (void *)objc_msgSend(v79, "mutableCopy");
      objc_msgSend(v62, "setObject:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("kIDSMessageIsNotificationKey"));
      v71 = v62;

      v63 = [HMDRemoteDeviceMessageDestination alloc];
      -[HMDAccessory uuid](v57, "uuid");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "device");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v66 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v63, "initWithTarget:device:", v64, v65);

      v67 = -[HMDRemoteMessage initWithName:destination:payload:type:timeout:secure:]([HMDRemoteMessage alloc], "initWithName:destination:payload:type:timeout:secure:", CFSTR("kCharacteristicValueUpdatedNotificationKey"), v66, v71, 2, 1, 0.0);
      objc_msgSend(v34, "identifier");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDRemoteMessage setIdentifier:](v67, "setIdentifier:", v68);

      objc_msgSend(v72, "homeManager");
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v69, "messageDispatcher");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      v83[0] = MEMORY[0x1E0C809B0];
      v83[1] = 3221225472;
      v83[2] = __84__HMDHAPAccessory_notifyValue_previousValue_error_forCharacteristic_requestMessage___block_invoke_448;
      v83[3] = &unk_1E89BFC88;
      v85 = v33;
      v84 = v77;
      objc_msgSend(v70, "sendMessage:completionHandler:", v67, v83);

      v40 = 1;
      v79 = v71;
    }
  }
  else
  {
    v40 = 0;
  }
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "type");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v76, "type");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend(v41, "requiresDeviceUnlock:forService:", v42, v43);

  if ((isAppleTV() & v44) != 1 || objc_msgSend(v74, "isEntitledForSPIAccess"))
  {
    v45 = objc_alloc(MEMORY[0x1E0D285D8]);
    -[HMDAccessory uuid](self, "uuid");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = (void *)objc_msgSend(v45, "initWithTarget:", v46);

    v48 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D285F8]), "initWithName:destination:payload:", CFSTR("kCharacteristicValueUpdatedNotificationKey"), v47, v79);
    objc_msgSend(v34, "identifier");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "setIdentifier:", v49);

    -[HMDHAPAccessory messageSendPolicy](self, "messageSendPolicy");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "setSendPolicy:", v50);

    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v80[0] = MEMORY[0x1E0C809B0];
    v80[1] = 3221225472;
    v80[2] = __84__HMDHAPAccessory_notifyValue_previousValue_error_forCharacteristic_requestMessage___block_invoke_2_449;
    v80[3] = &unk_1E89AB5E0;
    v82 = v40;
    v81 = v33;
    objc_msgSend(v51, "sendMessage:completionHandler:", v48, v80);

  }
  if (v78
    && !v77
    && +[HMDCharacteristic value:differentThan:](HMDCharacteristic, "value:differentThan:", v78, v73))
  {
    objc_msgSend(v72, "notifyOfChangedCharacteristic:changedByThisDevice:residentShouldNotifyPeers:message:", v12, v40 ^ 1u, 1, v34);
  }

  objc_destroyWeak(&v88);
  objc_destroyWeak(&location);

}

- (id)hapCharacteristicWriteRequests:(id)a3 hapAccessory:(id)a4 hmdResponses:(id *)a5 mapping:(id *)a6
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  int v19;
  char v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  int v33;
  uint64_t v34;
  void *v35;
  HMDHAPAccessory *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  _BOOL8 v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  HMDHAPAccessory *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  id v64;
  id v65;
  void *v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  id v73;
  HMDHAPAccessory *v74;
  void *v75;
  HMDHAPAccessory *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  id obj;
  void *v81;
  id v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint8_t buf[4];
  void *v88;
  __int16 v89;
  void *v90;
  __int16 v91;
  void *v92;
  __int16 v93;
  void *v94;
  _BYTE v95[128];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v73 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v64 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
  v65 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = self;
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  obj = v8;
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v95, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v84;
    v79 = *MEMORY[0x1E0CB8C70];
    v66 = v9;
    v69 = *(_QWORD *)v84;
    do
    {
      v13 = 0;
      v70 = v11;
      do
      {
        v14 = v9;
        if (*(_QWORD *)v84 != v12)
          objc_enumerationMutation(obj);
        v15 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * v13);
        objc_msgSend(v15, "characteristic");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "properties");
        objc_msgSend(v16, "characteristicType");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v81, "shouldNotCacheCharacteristicOfType:", v18);

        if (v19)
          v20 = 0;
        else
          v20 = v17;
        if ((v20 & 4) != 0)
        {
          objc_msgSend(v15, "value");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v82 = 0;
          objc_msgSend(v16, "validateValueForWrite:outValue:", v22, &v82);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = v82;

        }
        else
        {
          if ((v20 & 2) != 0)
            v21 = 5;
          else
            v21 = 48;
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", v79, v21, 0);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = 0;
        }
        v25 = v16;
        v9 = v14;
        if (!v23)
        {
          objc_msgSend(v25, "characteristicForHAPAccessory:", v73);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          if (v26)
          {
            objc_msgSend(v15, "authorizationData");
            v77 = objc_claimAutoreleasedReturnValue();
            -[HMDHAPAccessory hapMetadata](v74, "hapMetadata");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "type");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "service");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "type");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v75 = v27;
            v31 = objc_msgSend(v27, "requiresTimedWrite:forService:", v28, v30);

            v32 = v15;
            if ((objc_msgSend(v26, "properties") & 0x80) != 0)
            {

            }
            else
            {
              v33 = objc_msgSend(v32, "includeResponseValue");

              if (!v33)
              {
                v71 = v25;
                v34 = 0;
                goto LABEL_26;
              }
            }
            if ((objc_msgSend(v26, "supportsWriteWithResponse") & 1) != 0)
            {
              v71 = v25;
              v34 = 1;
LABEL_26:
              v42 = (void *)MEMORY[0x1E0D16488];
              v43 = objc_msgSend(v32, "requestType") == 1;
              objc_msgSend(v32, "contextData");
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              v45 = v26;
              v46 = v24;
              v68 = v24;
              v47 = v26;
              v48 = (void *)v77;
              objc_msgSend(v42, "writeRequestTupleForCharacteristic:value:authorizationData:timedWrite:responseValue:type:contextData:", v45, v46, v77, v31, v34, v43, v44);
              v49 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v32, "characteristic");
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v50, "service");
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v51, "accessory");
              v52 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v52, "uuid");
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v49, "setHmdAccessoryUUID:", v53);

              v54 = v47;
              v55 = v47;
              v24 = v68;
              objc_msgSend(v65, "setObject:forKey:", v32, v55);
              objc_msgSend(v64, "addObject:", v49);

              v23 = 0;
              v9 = v66;
              v25 = v71;
            }
            else
            {
              v56 = (void *)MEMORY[0x1D17BA0A0]();
              v57 = v74;
              HMFGetOSLogHandle();
              v58 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v59 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v88 = v59;
                v89 = 2112;
                v90 = v26;
                _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_ERROR, "%{public}@Cannot use write-response with characteristic %@", buf, 0x16u);

              }
              v54 = v26;

              objc_autoreleasePoolPop(v56);
              objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              v48 = (void *)v77;
            }

            v12 = v69;
            v11 = v70;
            v26 = v54;
          }
          else
          {
            v35 = (void *)MEMORY[0x1D17BA0A0]();
            v36 = v74;
            HMFGetOSLogHandle();
            v37 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "instanceID");
              v76 = v36;
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "characteristicType");
              v78 = v35;
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v73, "server");
              v72 = v25;
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "identifier");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v88 = v67;
              v89 = 2112;
              v90 = v38;
              v91 = 2112;
              v92 = v39;
              v93 = 2112;
              v94 = v41;
              _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot map HMDCharacteristic %@/%@ to a HAPCharacteristic for server %@ to map write requests", buf, 0x2Au);

              v11 = v70;
              v25 = v72;

              v35 = v78;
              v36 = v76;
              v12 = v69;

            }
            objc_autoreleasePoolPop(v35);
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v9 = v66;
          }

          if (!v23)
            goto LABEL_33;
        }
        +[HMDCharacteristicResponse responseWithRequest:error:](HMDCharacteristicResponse, "responseWithRequest:error:", v15, v23);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "addObject:", v60);

LABEL_33:
        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v95, 16);
    }
    while (v11);
  }

  if (a6)
    *a6 = objc_retainAutorelease(v65);
  if (a5)
    *a5 = objc_retainAutorelease(v9);

  return v64;
}

- (void)_writeCharacteristicValues:(id)a3 hapAccessory:(id)a4 source:(unint64_t)a5 message:(id)a6 logEvent:(id)a7 completionHandler:(id)a8
{
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  void *v33;
  _BOOL4 v34;
  void *v35;
  char *v36;
  SEL v37;
  void *v38;
  HMDHAPAccessory *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  unsigned int v58;
  void *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  void *v65;
  void (**v66)(id, void *);
  id v67;
  id v68;
  HMDHAPAccessory *v69;
  void *v70;
  _QWORD v71[4];
  id v72;
  HMDHAPAccessory *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  void (**v78)(id, void *);
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  id v84;
  id v85;
  id v86;
  uint8_t v87[128];
  uint8_t buf[4];
  id v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v68 = a3;
  v67 = a4;
  v61 = a6;
  v63 = a7;
  v66 = (void (**)(id, void *))a8;
  v14 = objc_alloc(MEMORY[0x1E0D28540]);
  v15 = (void *)MEMORY[0x1E0CB3940];
  v69 = self;
  MEMORY[0x1D17B8D08](self, a2);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "stringWithFormat:", CFSTR("%@, %s:%ld"), v16, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory.m", 7650);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v86 = (id)objc_msgSend(v14, "initWithName:", v17);

  v84 = 0;
  v85 = 0;
  -[HMDHAPAccessory hapCharacteristicWriteRequests:hapAccessory:hmdResponses:mapping:](self, "hapCharacteristicWriteRequests:hapAccessory:hmdResponses:mapping:", v68, v67, &v85, &v84);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v85;
  v62 = v84;
  v65 = v18;
  v19 = objc_msgSend(v18, "count");
  if (v19 == objc_msgSend(v68, "count"))
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v23 = (id)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v65, "count");
      *(_DWORD *)buf = 138543618;
      v89 = v23;
      v90 = 2048;
      v91 = v24;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@No HAP characteristics (out of %tu) left to be written to", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    if (v66)
      v66[2](v66, v65);
  }
  else
  {
    objc_msgSend(v67, "server");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = objc_msgSend(v25, "requiresTimedWrite:", v64);

    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v68, "count"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v68, "count"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v28 = v68;
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v80, v87, 16);
    if (v29)
    {
      v30 = *(_QWORD *)v81;
      do
      {
        for (i = 0; i != v29; ++i)
        {
          if (*(_QWORD *)v81 != v30)
            objc_enumerationMutation(v28);
          v32 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * i);
          objc_msgSend(v32, "characteristic");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = v33 == 0;

          if (v34)
          {
            objc_msgSend(v70, "addObject:", v32);
          }
          else
          {
            objc_msgSend(v32, "characteristic");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "addObject:", v35);

            objc_msgSend(v32, "value");
            v36 = (char *)objc_claimAutoreleasedReturnValue();
            v37 = v36;
            if (!v36)
            {
              objc_msgSend(MEMORY[0x1E0C99E38], "null");
              a2 = (SEL)objc_claimAutoreleasedReturnValue();
              v37 = a2;
            }
            objc_msgSend(v27, "addObject:", v37);
            if (!v36)

          }
        }
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v80, v87, 16);
      }
      while (v29);
    }

    if (objc_msgSend(v70, "count"))
    {
      v38 = (void *)MEMORY[0x1D17BA0A0]();
      v39 = v69;
      HMFGetOSLogHandle();
      v40 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v89 = v41;
        v90 = 2112;
        v91 = (uint64_t)v70;
        _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_ERROR, "%{public}@Invalid write requests with missing characteristic: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v38);
    }
    if (objc_msgSend(v28, "count"))
    {
      objc_msgSend(v28, "firstObject");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "identifier");
      v43 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v43 = 0;
    }
    objc_msgSend(MEMORY[0x1E0D33490], "currentTime");
    v45 = v44;
    if (v63)
    {
      v46 = v63;
      objc_msgSend(v46, "setIsLocal:", 1);
      objc_msgSend(v46, "setIsTimedWrite:", v58);
      objc_msgSend(v46, "setLinkType:", objc_msgSend(v67, "linkType"));
    }
    else
    {
      objc_msgSend(v61, "applicationBundleIdentifier");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory home](v69, "home");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v61, "userForHome:", v48);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "uuid");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:userUUID:writtenValues:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:userUUID:writtenValues:", v26, v69, v67, a5, v58, 1, v43, v47, v50, v27);
      v46 = (id)objc_claimAutoreleasedReturnValue();

    }
    -[HMDAccessory metricLoggingVendorDetails](v69, "metricLoggingVendorDetails");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "manufacturer");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "model");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory firmwareVersion](v69, "firmwareVersion");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "versionString");
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    v55 = v86;
    -[HMDAccessory uuid](v69, "uuid");

    objc_msgSend(v26, "count");
    objc_msgSend(v67, "linkType");

    -[HMDAccessory workQueue](v69, "workQueue");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v71[0] = MEMORY[0x1E0C809B0];
    v71[1] = 3221225472;
    v71[2] = __101__HMDHAPAccessory__writeCharacteristicValues_hapAccessory_source_message_logEvent_completionHandler___block_invoke;
    v71[3] = &unk_1E89AB608;
    v57 = v46;
    v79 = v45;
    v72 = v57;
    v73 = v69;
    v74 = v86;
    v75 = v65;
    v76 = v62;
    v77 = v28;
    v78 = v66;
    objc_msgSend(v67, "writeCharacteristicValues:timeout:completionQueue:completionHandler:", v64, v56, v71, 0.0);

  }
  __HMFActivityScopeLeave();

}

- (void)_writeValue:(id)a3 forCharacteristic:(id)a4 hapAccessory:(id)a5 authorizationData:(id)a6 message:(id)a7
{
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  HMDHAPAccessory *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  BOOL v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  unsigned int v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  _QWORD v66[5];
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  void *v74;
  id v75;
  void *v76;
  uint8_t buf[4];
  void *v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  void *v82;
  __int16 v83;
  void *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v60 = a3;
  v12 = a4;
  v13 = a5;
  v58 = a6;
  v64 = a7;
  v65 = v12;
  v63 = v13;
  objc_msgSend(v12, "characteristicForHAPAccessory:", v13);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  if (v62)
  {
    objc_msgSend(v12, "service");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "type");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "type");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v56, "requiresTimedWrite:forService:", v14, v15);

    v17 = objc_msgSend(v62, "properties");
    -[HMDAccessory home](self, "home");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "value");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v64, "isRemote") & 1) != 0)
    {
      objc_msgSend(v64, "dataForKey:", CFSTR("kCharacteristicContextDataForWriteKey"));
      v55 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v57, "currentUser");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "notificationContextHAPIdentifier");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "contextDataForWriteRequestWithIdentifier:", v27);
      v55 = (void *)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend(MEMORY[0x1E0D16488], "writeRequestTupleForCharacteristic:value:authorizationData:timedWrite:responseValue:type:contextData:", v62, v60, v58, v16, (v17 >> 7) & 1, 0, v55);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "accessory");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "uuid");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "setHmdAccessoryUUID:", v29);

    objc_msgSend(v63, "server");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = v59;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v76, 1);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = objc_msgSend(v30, "requiresTimedWrite:", v31);

    v32 = parseMessageSource(v64);
    if (v60)
    {
      v75 = v60;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v75, 1);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v74 = v33;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v74, 1);
      v54 = (void *)objc_claimAutoreleasedReturnValue();

    }
    v73 = v65;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v73, 1);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = -[HMDHAPAccessory isPrimary](self, "isPrimary");
    v36 = self;
    if (!v35)
    {
      -[HMDHAPAccessory bridge](self, "bridge");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v64, "identifier");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "applicationBundleIdentifier");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "userForHome:", v57);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "uuid");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:userUUID:writtenValues:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:userUUID:writtenValues:", v34, v36, v63, v32, v53, 1, v37, v38, v40, v54);
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v35)
    -[HMDAccessory metricLoggingVendorDetails](self, "metricLoggingVendorDetails");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "manufacturer");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "model");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory firmwareVersion](self, "firmwareVersion");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "versionString");
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory uuid](self, "uuid");

    objc_msgSend(v65, "instanceID");
    objc_msgSend(v63, "linkType");
    objc_initWeak((id *)buf, self);
    -[HMDAccessory workQueue](self, "workQueue");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v66[0] = MEMORY[0x1E0C809B0];
    v66[1] = 3221225472;
    v66[2] = __88__HMDHAPAccessory__writeValue_forCharacteristic_hapAccessory_authorizationData_message___block_invoke;
    v66[3] = &unk_1E89AB630;
    v66[4] = self;
    v49 = v41;
    v67 = v49;
    v50 = v47;
    v68 = v50;
    v51 = v52;
    v69 = v51;
    v70 = v65;
    v71 = v64;
    objc_copyWeak(&v72, (id *)buf);
    objc_msgSend(v63, "writeCharacteristicValue:timeout:completionQueue:completionHandler:", v59, v48, v66, 0.0);

    objc_destroyWeak(&v72);
    objc_destroyWeak((id *)buf);

  }
  else
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "instanceID");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "characteristicType");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "server");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "identifier");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v78 = v21;
      v79 = 2112;
      v80 = v22;
      v81 = 2112;
      v82 = v23;
      v83 = 2112;
      v84 = v25;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot map HMDCharacteristic %@/%@ to a HAPCharacteristic for server %@ for write value", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "respondWithError:", v61);
  }

}

- (id)_prepareMessagePayloadForCharacteristicRemoteWrite:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kServiceInstanceID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "messagePayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("kCharacteristicInstanceID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHAPAccessory findService:](self, "findService:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "findCharacteristic:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    objc_msgSend(v4, "messagePayload");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v11, "mutableCopy");

    objc_msgSend(v10, "authorizationData");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      objc_msgSend(v10, "authorizationData");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v14, CFSTR("kAuthorizationDataKey"));

    }
    if (objc_msgSend(v4, "BOOLForKey:", CFSTR("kShortActionKey")))
      objc_msgSend(v12, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("kShortActionKey"));
    -[HMDAccessory home](self, "home");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "currentUser");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "notificationContextHAPIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "contextDataForWriteRequestWithIdentifier:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v18, CFSTR("kCharacteristicContextDataForWriteKey"));

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

- (BOOL)_handleCharacteristicError:(id)a3 read:(BOOL)a4 characteristic:(id)a5 didRelayMessage:(id)a6
{
  _BOOL4 v8;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  int v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  HMDHAPAccessory *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  const __CFString *v33;
  void *v34;
  void *v35;
  HMDHAPAccessory *v36;
  NSObject *v37;
  id v38;
  const __CFString *v39;
  __CFString *v40;
  void *v41;
  void *v42;
  HMDHAPAccessory *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  const __CFString *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  HMDHAPAccessory *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v62;
  void (**v63)(_QWORD, _QWORD, _QWORD);
  void (**v64)(_QWORD, _QWORD, _QWORD);
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint8_t buf[4];
  id v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  const __CFString *v76;
  uint64_t v77;

  v8 = a4;
  v77 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a5;
  v12 = a6;
  if (v10)
  {
    objc_msgSend(v10, "domain");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0CB8C70]) & 1) != 0)
    {
      v14 = objc_msgSend(v10, "code");

      if (v14 == 4)
      {
        v15 = (void *)MEMORY[0x1E0C99E08];
        objc_msgSend(v12, "messagePayload");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "dictionaryWithDictionary:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDAccessory home](self, "home");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "primaryResident");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "device");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "isCurrentDevice");

        v68 = v18;
        if (v21)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "setObject:forKey:", v22, CFSTR("kDoNotForwardMessageKey"));

          objc_msgSend(v12, "messagePayload");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "hmf_BOOLForKey:", CFSTR("kDoNotForwardMessageKey"));

          if (v24)
          {
            v25 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1D17BA0A0]();
            v26 = self;
            HMFGetOSLogHandle();
            v27 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v64 = v25;
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "accessory");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "uuid");
              v69 = v17;
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v30, "UUIDString");
              v31 = objc_claimAutoreleasedReturnValue();
              v32 = (void *)v31;
              v33 = CFSTR("write");
              *(_DWORD *)buf = 138543874;
              v72 = v28;
              v73 = 2112;
              if (v8)
                v33 = CFSTR("read");
              v74 = v31;
              v75 = 2112;
              v76 = v33;
              _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ is unreachable for %@ operation (DoNotForward set)", buf, 0x20u);

              v17 = v69;
              v25 = v64;
            }

            objc_autoreleasePoolPop(v25);
            objc_msgSend(v12, "respondWithError:", v10);
            LOBYTE(v25) = 0;
LABEL_41:
            v18 = v68;
LABEL_42:

            goto LABEL_43;
          }
          objc_msgSend(v18, "homeManager");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "residentMesh");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "bestResidentDeviceForAccessory:", self);
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          v70 = v17;
          if (!v34 || objc_msgSend(v34, "isCurrentDevice"))
          {
            v25 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1D17BA0A0]();
            v43 = self;
            HMFGetOSLogHandle();
            v44 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v63 = v25;
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "accessory");
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v46, "uuid");
              v66 = v34;
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v47, "UUIDString");
              v48 = objc_claimAutoreleasedReturnValue();
              v49 = (void *)v48;
              v50 = CFSTR("write");
              *(_DWORD *)buf = 138543874;
              v72 = v45;
              v73 = 2112;
              if (v8)
                v50 = CFSTR("read");
              v74 = v48;
              v75 = 2112;
              v76 = v50;
              _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ is unreachable for %@ operation (no path)", buf, 0x20u);

              v18 = v68;
              v34 = v66;

              v25 = v63;
            }

            objc_autoreleasePoolPop(v25);
            objc_msgSend(v12, "respondWithError:", v10);

            LOBYTE(v25) = 0;
            v17 = v70;
            goto LABEL_42;
          }
        }
        else
        {
          v70 = v17;
          v34 = 0;
        }
        v35 = (void *)MEMORY[0x1D17BA0A0]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          v65 = v35;
          HMFGetLogIdentifier();
          v38 = (id)objc_claimAutoreleasedReturnValue();
          if (v8)
            v39 = CFSTR("read");
          else
            v39 = CFSTR("write");
          if (v34)
          {
            objc_msgSend(v34, "identifier");
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v62, "UUIDString");
            v40 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v40 = CFSTR("resident");
          }
          *(_DWORD *)buf = 138543874;
          v72 = v38;
          v73 = 2112;
          v74 = (uint64_t)v39;
          v75 = 2112;
          v76 = v40;
          _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Accessory is unreachable for %@ operation, forwarding to %@.", buf, 0x20u);
          if (v34)
          {

          }
          v35 = v65;
        }

        objc_autoreleasePoolPop(v35);
        v51 = (void *)MEMORY[0x1E0D285D0];
        objc_msgSend(v12, "responseHandler");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "messageWithMessage:messagePayload:responseHandler:", v12, v70, v52);
        v53 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v11, "accessory");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "uuid");

        objc_msgSend(v11, "instanceID");
        objc_msgSend(v34, "device");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          -[HMDHAPAccessory _relayReadFromCharacteristic:toResidentForMessage:viaDevice:](v36, "_relayReadFromCharacteristic:toResidentForMessage:viaDevice:", v11, v53, v55);
        else
          -[HMDHAPAccessory _relayWriteToCharacteristic:toResidentForMessage:viaDevice:](v36, "_relayWriteToCharacteristic:toResidentForMessage:viaDevice:", v11, v53, v55);

        if (-[HMDHAPAccessory hasBTLELink](v36, "hasBTLELink")
          && -[HMDAccessory isRemoteAccessEnabled](v36, "isRemoteAccessEnabled"))
        {
          v56 = (void *)MEMORY[0x1D17BA0A0]();
          v57 = v36;
          HMFGetOSLogHandle();
          v58 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHAPAccessory name](v57, "name");
            v67 = v34;
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v72 = v59;
            v73 = 2112;
            v74 = (uint64_t)v60;
            _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ is unreachable for write operation, kicking off BTLE scan to update reachability", buf, 0x16u);

            v34 = v67;
          }

          objc_autoreleasePoolPop(v56);
          objc_msgSend(v68, "btleAccessoryReachabilityProbeTimer:", 1);
        }

        LOBYTE(v25) = 1;
        v17 = v70;
        goto LABEL_41;
      }
    }
    else
    {

    }
  }
  objc_msgSend(v12, "responseHandler");
  v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  if (v25)
  {
    objc_msgSend(v12, "responseHandler");
    v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v25)[2](v25, v10, 0);

    LOBYTE(v25) = 0;
  }
LABEL_43:

  return (char)v25;
}

- (void)submitCharacteristicWriteErrorLogEvent:(id)a3 startTime:(double)a4 message:(id)a5 error:(id)a6
{
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHAPAccessory *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a5;
  v29 = a6;
  v28 = parseMessageSource(v11);
  objc_msgSend(v10, "accessory");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v12, "isPrimary") & 1) == 0)
  {
    objc_msgSend(v12, "bridge");
    v13 = objc_claimAutoreleasedReturnValue();

    v12 = (void *)v13;
  }
  objc_msgSend(v11, "messagePayload");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("kCharacteristicValue"));
  v15 = objc_claimAutoreleasedReturnValue();

  v27 = (void *)v15;
  if (v15)
  {
    v32[0] = v15;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v17;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v31, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v30 = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v30, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "identifier");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "applicationBundleIdentifier");
  v26 = v10;
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory home](self, "home");
  v25 = self;
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "userForHome:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "uuid");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDCharacteristicReadWriteLogEvent eventWithStartTime:characteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:userUUID:writtenValues:](HMDCharacteristicReadWriteLogEvent, "eventWithStartTime:characteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:userUUID:writtenValues:", v18, v12, 0, v28, 0, 1, a4, v19, v20, v23, v16);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDAccessory submitLogEvent:error:](v25, "submitLogEvent:error:", v24, v29);
}

- (void)_handleCharacteristicWrite:(id)a3
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  int v23;
  char v24;
  uint64_t v25;
  void *v26;
  void (**v27)(_QWORD, _QWORD, _QWORD);
  id v28;
  void *v29;
  int v30;
  uint64_t v31;
  int v32;
  void *v33;
  int v34;
  void *v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _BOOL4 v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  NSObject *v52;
  void *v53;
  void (**v54)(_QWORD, _QWORD, _QWORD);
  id v55;
  void *v56;
  id *v57;
  BOOL v58;
  HMDHAPAccessory *v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  _QWORD v71[4];
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77[2];
  _QWORD v78[4];
  id v79;
  id v80;
  id v81;
  id v82[2];
  uint64_t aBlock;
  uint64_t v84;
  void (*v85)(uint64_t, void *);
  void *v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  _QWORD v94[4];
  id v95;
  id v96;
  id v97;
  id location;
  id v99;
  id v100;
  uint8_t buf[4];
  id *v102;
  __int16 v103;
  void *v104;
  __int16 v105;
  id v106;
  void *v107;
  _QWORD v108[4];

  v108[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = objc_alloc(MEMORY[0x1E0D28540]);
  v7 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringWithFormat:", CFSTR("%@, %s:%ld"), v8, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory.m", 8170);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v100 = (id)objc_msgSend(v6, "initWithName:", v9);

  v10 = v5;
  objc_msgSend(v10, "messagePayload");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("kCharacteristicValue"));
  v69 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "messagePayload");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("kServiceInstanceID"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "messagePayload");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("kCharacteristicInstanceID"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D33490], "currentTime");
  v17 = v16;
  -[HMDHAPAccessory findService:](self, "findService:", v13);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "findCharacteristic:", v15);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory home](self, "home");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
  {
    v21 = objc_msgSend(v19, "properties");
    objc_msgSend(v19, "characteristicType");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v70, "shouldNotCacheCharacteristicOfType:", v22);

    if (v23)
      v24 = 0;
    else
      v24 = v21;
    if ((v24 & 4) == 0)
    {
      if ((v24 & 2) != 0)
        v25 = 5;
      else
        v25 = 48;
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], v25, 0);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "responseHandler");
      v27 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v27)[2](v27, v26, 0);

      goto LABEL_11;
    }
    v108[0] = v19;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v108, 1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(v20, "requiresUnlockToAccessCharacteristics:withMessage:", v29, v10);

    if (v30)
    {
      v31 = parseMessageSource(v10);
      v32 = objc_msgSend(v20, "synchronouslyFetchIsCarPlayConnectedStatus")
          ? objc_msgSend(v20, "isCarPlayAccessAllowedForCharacteristic:withMessage:fromSource:", v19, v10, v31)
          : 0;
      if (((objc_msgSend(v20, "isAccessAllowedForCharacteristicsWithMessage:", v10) | v32) & 1) == 0)
      {
        if ((objc_msgSend(v10, "isEntitledForSPIAccess") & 1) != 0)
          v34 = 1;
        else
          v34 = objc_msgSend(v10, "isInternal");
        v35 = (void *)MEMORY[0x1E0CB35C8];
        v36 = +[HMDDeviceCapabilities supportsDeviceLock](HMDDeviceCapabilities, "supportsDeviceLock");
        v37 = 10;
        if (v34)
          v37 = 2003;
        if (v36)
          v38 = 82;
        else
          v38 = v37;
        objc_msgSend(v35, "hmErrorWithCode:", v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "respondWithError:", v39);

        goto LABEL_12;
      }
    }
    v99 = 0;
    objc_msgSend(v19, "validateValueForWrite:outValue:", v69, &v99);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = v99;
    if (v33)
    {
      objc_msgSend(v10, "respondWithError:", v33);
      v28 = v10;
LABEL_43:

      goto LABEL_44;
    }
    if (isWatch() && -[HMDAccessory isRemoteAccessEnabled](self, "isRemoteAccessEnabled"))
    {
      -[HMDHAPAccessory _relayWriteToCharacteristic:toResidentForMessage:viaDevice:](self, "_relayWriteToCharacteristic:toResidentForMessage:viaDevice:", v19, v10, 0);
      v28 = v10;
      v33 = 0;
      goto LABEL_43;
    }
    if (objc_msgSend(v10, "isRemote"))
      objc_msgSend(v10, "dataForKey:", CFSTR("kAuthorizationDataKey"));
    else
      objc_msgSend(v19, "authorizationData");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, self);
    v40 = -[HMDHAPAccessory canWakeUpViaWoL](self, "canWakeUpViaWoL");
    v41 = MEMORY[0x1E0C809B0];
    v42 = (_QWORD *)&unk_1CDB8E000;
    v28 = v10;
    if (v40)
    {
      v64 = (void *)objc_msgSend(v10, "mutableCopy");
      v94[0] = v41;
      v94[1] = 3221225472;
      v94[2] = __46__HMDHAPAccessory__handleCharacteristicWrite___block_invoke;
      v94[3] = &unk_1E89C1698;
      v43 = v10;
      v95 = v43;
      objc_copyWeak(&v97, &location);
      v60 = v19;
      v96 = v60;
      objc_msgSend(v64, "setResponseHandler:", v94);
      v28 = (id)objc_msgSend(v64, "copy");

      +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:type:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:type:", v60, v69, v67, 0);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v107 = v62;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v107, 1);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v93 = 0;
      v58 = -[HMDHAPAccessory canProceedWithRequests:suspended:error:](self, "canProceedWithRequests:suspended:error:", v44, 0, &v93);
      v45 = v93;

      if (!v58)
      {
        v51 = (void *)MEMORY[0x1D17BA0A0]();
        v59 = self;
        HMFGetOSLogHandle();
        v52 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        {
          v56 = v51;
          HMFGetLogIdentifier();
          v57 = (id *)(id)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory identifier](v59, "identifier");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v102 = v57;
          v103 = 2112;
          v104 = v53;
          v105 = 2112;
          v106 = v60;
          _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_ERROR, "%{public}@Accessory %@ is suspended and should not wake up for write request: %@", buf, 0x20u);

          v51 = v56;
        }

        objc_autoreleasePoolPop(v51);
        objc_msgSend(v28, "responseHandler");
        v54 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, id, _QWORD))v54)[2](v54, v45, 0);

        objc_destroyWeak(&v97);
        goto LABEL_42;
      }

      objc_destroyWeak(&v97);
      v41 = MEMORY[0x1E0C809B0];
      v42 = &unk_1CDB8E000;
    }
    aBlock = v41;
    v84 = v42[202];
    v46 = v84;
    v85 = __46__HMDHAPAccessory__handleCharacteristicWrite___block_invoke_483;
    v86 = &unk_1E89AB658;
    objc_copyWeak(&v92, &location);
    v47 = v28;
    v87 = v47;
    v88 = v100;
    v89 = v69;
    v48 = v19;
    v90 = v48;
    v91 = v67;
    v65 = _Block_copy(&aBlock);
    v78[0] = MEMORY[0x1E0C809B0];
    v78[1] = v46;
    v78[2] = __46__HMDHAPAccessory__handleCharacteristicWrite___block_invoke_2;
    v78[3] = &unk_1E89B0440;
    objc_copyWeak(v82, &location);
    v49 = v47;
    v79 = v49;
    v80 = v100;
    v50 = v48;
    v81 = v50;
    v82[1] = v17;
    v63 = _Block_copy(v78);
    objc_msgSend(v50, "stateNumber");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v71[0] = MEMORY[0x1E0C809B0];
    v71[1] = v46;
    v71[2] = __46__HMDHAPAccessory__handleCharacteristicWrite___block_invoke_3;
    v71[3] = &unk_1E89AB680;
    objc_copyWeak(v77, &location);
    v28 = v49;
    v72 = v28;
    v55 = v65;
    v75 = v55;
    v66 = v63;
    v76 = v66;
    v73 = v100;
    v74 = v50;
    v77[1] = v17;
    -[HMDHAPAccessory _evaluateLocalOperation:state:completion:](self, "_evaluateLocalOperation:state:completion:", 3, v61, v71);

    objc_destroyWeak(v77);
    objc_destroyWeak(v82);

    objc_destroyWeak(&v92);
LABEL_42:
    objc_destroyWeak(&location);

    v33 = 0;
    goto LABEL_43;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "respondWithError:", v26);
LABEL_11:

LABEL_12:
  v28 = v10;
LABEL_44:

  __HMFActivityScopeLeave();
}

- (void)_relayWriteToCharacteristic:(id)a3 toResidentForMessage:(id)a4 viaDevice:(id)a5
{
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  _QWORD v30[4];
  id v31;
  HMDHAPAccessory *v32;
  id v33;
  id v34;
  id v35;
  id location;
  id v37;
  void *v38;
  _QWORD v39[3];

  v39[1] = *MEMORY[0x1E0C80C00];
  v29 = a3;
  v8 = a4;
  v26 = a5;
  v9 = parseMessageSource(v8);
  objc_msgSend(v8, "messagePayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("kCharacteristicValue"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (v28)
  {
    v39[0] = v28;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v39, 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = v11;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v38, 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

  }
  -[HMDAccessory home](self, "home");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = v29;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v37, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "identifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "applicationBundleIdentifier");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "userForHome:", v12);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "uuid");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:userUUID:writtenValues:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:userUUID:writtenValues:", v13, self, 0, v9, 0, 0, v14, v15, v17, v27);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = (void *)objc_msgSend(v8, "mutableCopy");
  objc_msgSend(v19, "setQualityOfService:", 33);
  -[HMDHAPAccessory _prepareMessagePayloadForCharacteristicRemoteWrite:](self, "_prepareMessagePayloadForCharacteristicRemoteWrite:", v8);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setMessagePayload:", v20);

  objc_initWeak(&location, self);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __78__HMDHAPAccessory__relayWriteToCharacteristic_toResidentForMessage_viaDevice___block_invoke;
  v30[3] = &unk_1E89BCD30;
  v21 = v18;
  v31 = v21;
  v32 = self;
  objc_copyWeak(&v35, &location);
  v22 = v8;
  v33 = v22;
  v23 = v29;
  v34 = v23;
  objc_msgSend(v19, "setResponseHandler:", v30);
  -[HMDAccessory uuid](self, "uuid");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory workQueue](self, "workQueue");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "redispatchToResidentMessage:target:responseQueue:viaDevice:", v19, v24, v25, v26);

  objc_destroyWeak(&v35);
  objc_destroyWeak(&location);

}

- (void)_relayReadFromCharacteristic:(id)a3 toResidentForMessage:(id)a4 viaDevice:(id)a5
{
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  HMDHAPAccessory *v28;
  id v29;
  id v30;
  id v31;
  id location;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v24 = a5;
  -[HMDAccessory home](self, "home");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = parseMessageSource(v9);
  v33[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "identifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "applicationBundleIdentifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "userForHome:", v25);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:", v11, self, 0, v10, 0, v12, v23, v13, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = (void *)objc_msgSend(v9, "mutableCopy");
  objc_msgSend(v17, "setQualityOfService:", 33);
  objc_initWeak(&location, self);
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __79__HMDHAPAccessory__relayReadFromCharacteristic_toResidentForMessage_viaDevice___block_invoke;
  v26[3] = &unk_1E89BCD30;
  v18 = v16;
  v27 = v18;
  v28 = self;
  objc_copyWeak(&v31, &location);
  v19 = v9;
  v29 = v19;
  v20 = v8;
  v30 = v20;
  objc_msgSend(v17, "setResponseHandler:", v26);
  -[HMDAccessory uuid](self, "uuid");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory workQueue](self, "workQueue");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "redispatchToResidentMessage:target:responseQueue:viaDevice:", v17, v21, v22, v24);

  objc_destroyWeak(&v31);
  objc_destroyWeak(&location);

}

- (void)_parseResponseFromRemotePeer:(id)a3 message:(id)a4 error:(id)a5 characteristic:(id)a6
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  HMDHAPAccessory *v26;
  id v27;

  v27 = a3;
  v10 = a4;
  v11 = a6;
  if (a5)
  {
    objc_msgSend(v10, "respondWithError:", a5);
  }
  else
  {
    objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("kCharacteristicValue"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "hmf_numberForKey:", CFSTR("kCharacteristicInstanceID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "hmf_numberForKey:", CFSTR("kCharacteristicValueUpdateStateNumberKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "hmf_dateForKey:", CFSTR("kCharacteristicValueUpdateTime"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "hmf_dataForKey:", CFSTR("kCharacteristicNotificationContextKey"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "instanceID");
    v17 = objc_claimAutoreleasedReturnValue();
    if (!v17)
      goto LABEL_6;
    v18 = (void *)v17;
    objc_msgSend(v11, "instanceID");
    v26 = self;
    v19 = v16;
    v20 = v14;
    v21 = v15;
    v22 = v12;
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v13, "isEqualToNumber:", v23);

    v12 = v22;
    v15 = v21;
    v14 = v20;
    v16 = v19;

    if ((v24 & 1) != 0)
    {
      objc_msgSend(v11, "value");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "updateValue:updatedTime:stateNumber:notificationContext:", v12, v15, v14, v19);
      -[HMDHAPAccessory __updateNotifyingCharacteristicStateNumber:](v26, "__updateNotifyingCharacteristicStateNumber:", v14);
      -[HMDHAPAccessory notifyValue:previousValue:error:forCharacteristic:requestMessage:](v26, "notifyValue:previousValue:error:forCharacteristic:requestMessage:", v12, v25, 0, v11, v10);
    }
    else
    {
LABEL_6:
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 54);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "respondWithError:", v25);
    }

  }
}

- (void)submitCharacteristicReadErrorLogEvent:(id)a3 message:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHAPAccessory *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v22 = a5;
  v9 = a4;
  v21 = parseMessageSource(v9);
  objc_msgSend(v8, "accessory");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v10, "isPrimary") & 1) == 0)
  {
    objc_msgSend(v10, "bridge");
    v11 = objc_claimAutoreleasedReturnValue();

    v10 = (void *)v11;
  }
  v23[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "identifier");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "applicationBundleIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory home](self, "home");
  v15 = self;
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "userForHome:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "uuid");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v20) = 0;
  +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:", v12, v10, 0, v21, 1, v13, v20, v14, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDAccessory submitLogEvent:error:](v15, "submitLogEvent:error:", v19, v22);
}

- (void)_handleCharacteristicRead:(id)a3
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  id v21;
  void *v22;
  char v23;
  int v24;
  id v25;
  void *v26;
  BOOL v27;
  void *v28;
  _BOOL4 v29;
  HMDHAPAccessory *v30;
  NSObject *v31;
  void *v32;
  void (**v33)(_QWORD, _QWORD, _QWORD);
  void *v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  id v40;
  void *v41;
  id v42;
  HMDHAPAccessory *v43;
  void *context;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  _QWORD v50[4];
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  _QWORD v56[4];
  id v57;
  id v58;
  id v59;
  id location;
  id v61;
  uint8_t buf[4];
  id v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  id v67;
  void *v68;
  _QWORD v69[4];

  v69[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = objc_alloc(MEMORY[0x1E0D28540]);
  v7 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringWithFormat:", CFSTR("%@, %s:%ld"), v8, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory.m", 8502);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = (id)objc_msgSend(v6, "initWithName:", v9);

  v10 = v5;
  objc_msgSend(v10, "messagePayload");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("kServiceInstanceID"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "messagePayload");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("kCharacteristicInstanceID"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHAPAccessory findService:](self, "findService:", v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "findCharacteristic:", v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v16)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "respondWithError:", v20);
    goto LABEL_5;
  }
  objc_msgSend(v16, "characteristicType");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v17, "shouldNotCacheCharacteristicOfType:", v18);

  if (!v19)
  {
    -[HMDAccessory home](self, "home");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v69[0] = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v69, 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v49, "requiresUnlockToAccessCharacteristics:withMessage:", v22, v10))
    {
      v23 = objc_msgSend(v49, "isAccessAllowedForCharacteristicsWithMessage:", v10);

      if ((v23 & 1) == 0)
      {
        if ((objc_msgSend(v10, "isEntitledForSPIAccess") & 1) != 0)
          v24 = 1;
        else
          v24 = objc_msgSend(v10, "isInternal");
        v34 = (void *)MEMORY[0x1E0CB35C8];
        v35 = +[HMDDeviceCapabilities supportsDeviceLock](HMDDeviceCapabilities, "supportsDeviceLock");
        v36 = 10;
        if (v24)
          v36 = 2003;
        if (v35)
          v37 = 82;
        else
          v37 = v36;
        objc_msgSend(v34, "hmErrorWithCode:", v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "respondWithError:", v38);

        v21 = v10;
        goto LABEL_34;
      }
    }
    else
    {

    }
    if (isWatch() && -[HMDAccessory isRemoteAccessEnabled](self, "isRemoteAccessEnabled"))
    {
      -[HMDHAPAccessory _relayReadFromCharacteristic:toResidentForMessage:viaDevice:](self, "_relayReadFromCharacteristic:toResidentForMessage:viaDevice:", v16, v10, 0);
      v21 = v10;
LABEL_34:

      goto LABEL_35;
    }
    objc_initWeak(&location, self);
    v21 = v10;
    if (-[HMDHAPAccessory canWakeUpViaWoL](self, "canWakeUpViaWoL"))
    {
      v47 = (void *)objc_msgSend(v10, "mutableCopy");
      v56[0] = MEMORY[0x1E0C809B0];
      v56[1] = 3221225472;
      v56[2] = __45__HMDHAPAccessory__handleCharacteristicRead___block_invoke;
      v56[3] = &unk_1E89C1698;
      v25 = v10;
      v57 = v25;
      objc_copyWeak(&v59, &location);
      v48 = v16;
      v58 = v48;
      objc_msgSend(v47, "setResponseHandler:", v56);
      v21 = (id)objc_msgSend(v47, "copy");

      +[HMDCharacteristicRequest requestWithCharacteristic:](HMDCharacteristicRequest, "requestWithCharacteristic:", v48);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v68 = v46;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v68, 1);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = 0;
      v27 = -[HMDHAPAccessory canProceedWithRequests:suspended:error:](self, "canProceedWithRequests:suspended:error:", v26, 0, &v55);
      v45 = v55;

      if (!v27)
      {
        v29 = -[HMDHAPAccessory canReturnCachedValueForCharacteristic:](self, "canReturnCachedValueForCharacteristic:", v48);
        context = (void *)MEMORY[0x1D17BA0A0]();
        v30 = self;
        if (v29)
        {
          HMFGetOSLogHandle();
          v31 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v42 = (id)objc_claimAutoreleasedReturnValue();
            -[HMDAccessory identifier](v30, "identifier");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v63 = v42;
            v64 = 2112;
            v65 = v32;
            v66 = 2112;
            v67 = v48;
            _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@Accessory: %@ is suspended and will return the cached value for characteristic: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(context);
          objc_msgSend(v48, "value");
          v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory notifyValue:previousValue:error:forCharacteristic:requestMessage:](v30, "notifyValue:previousValue:error:forCharacteristic:requestMessage:", &unk_1E8B32F10, v33, 0, v48, v21);
        }
        else
        {
          HMFGetOSLogHandle();
          v39 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            v43 = v30;
            HMFGetLogIdentifier();
            v40 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "shortDescription");
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v63 = v40;
            v64 = 2112;
            v65 = v41;
            _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_ERROR, "%{public}@Accessory is suspended and should not wake up for read request: %@", buf, 0x16u);

            v30 = v43;
          }

          objc_autoreleasePoolPop(context);
          objc_msgSend(v21, "responseHandler");
          v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, id, _QWORD))v33)[2](v33, v45, 0);
        }

        objc_destroyWeak(&v59);
        goto LABEL_33;
      }

      objc_destroyWeak(&v59);
    }
    objc_msgSend(v16, "stateNumber");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v50[0] = MEMORY[0x1E0C809B0];
    v50[1] = 3221225472;
    v50[2] = __45__HMDHAPAccessory__handleCharacteristicRead___block_invoke_485;
    v50[3] = &unk_1E89BDB88;
    objc_copyWeak(&v54, &location);
    v51 = v16;
    v21 = v21;
    v52 = v21;
    v53 = v61;
    -[HMDHAPAccessory _evaluateLocalOperation:state:completion:](self, "_evaluateLocalOperation:state:completion:", 2, v28, v50);

    objc_destroyWeak(&v54);
LABEL_33:
    objc_destroyWeak(&location);
    goto LABEL_34;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "respondWithError:", v20);
LABEL_5:

  v21 = v10;
LABEL_35:

  __HMFActivityScopeLeave();
}

- (void)_readValueForCharacteristic:(id)a3 hapAccessory:(id)a4 requestMessage:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  BOOL v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  NSObject *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _QWORD block[5];
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  void *v64;
  __int16 v65;
  void *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v8, "characteristicForHAPAccessory:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "instanceID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "characteristicType");
      v45 = v10;
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "server");
      v48 = v14;
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "identifier");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v60 = v17;
      v61 = 2112;
      v62 = v18;
      v63 = 2112;
      v64 = v19;
      v65 = 2112;
      v66 = v21;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot map HMDCharacteristic %@/%@ to a HAPCharacteristic for server %@ for readValue", buf, 0x2Au);

      v14 = v48;
      v10 = v45;

    }
    objc_autoreleasePoolPop(v14);
    v12 = (void *)MEMORY[0x1E0CB35C8];
    v13 = 4;
    goto LABEL_7;
  }
  if ((objc_msgSend(v8, "properties") & 2) == 0)
  {
    v12 = (void *)MEMORY[0x1E0CB35C8];
    v13 = 6;
LABEL_7:
    objc_msgSend(v12, "hmErrorWithCode:", v13);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "respondWithError:", v22);

    goto LABEL_13;
  }
  v44 = v11;
  v49 = v9;
  v42 = parseMessageSource(v10);
  v58 = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v58, 1);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HMDHAPAccessory isPrimary](self, "isPrimary");
  v24 = self;
  if (!v23)
  {
    -[HMDHAPAccessory bridge](self, "bridge");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v10, "identifier");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "applicationBundleIdentifier");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory home](self, "home");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "userForHome:", v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "uuid");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v40) = 0;
  +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:", v46, v24, v49, v42, 1, v25, v40, v26, v29);
  v41 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v23)
  -[HMDAccessory metricLoggingVendorDetails](self, "metricLoggingVendorDetails");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "manufacturer");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "model");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory firmwareVersion](self, "firmwareVersion");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "versionString");
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory uuid](self, "uuid");

  objc_msgSend(v8, "instanceID");
  v9 = v49;
  objc_msgSend(v49, "linkType");
  objc_msgSend(v8, "value");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory workQueue](self, "workQueue");
  v35 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __75__HMDHAPAccessory__readValueForCharacteristic_hapAccessory_requestMessage___block_invoke;
  block[3] = &unk_1E89AB720;
  block[4] = self;
  v51 = v8;
  v52 = v33;
  v53 = v41;
  v54 = v34;
  v55 = v10;
  v56 = v49;
  v57 = v44;
  v36 = v34;
  v11 = v44;
  v37 = v36;
  v38 = v41;
  v39 = v33;
  dispatch_async(v35, block);

LABEL_13:
}

- (void)updateNotificationEnabled:(BOOL)a3 forCharacteristics:(id)a4 onBehalfOf:(id)a5
{
  id v8;
  void *v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  HMDHAPAccessory *v16;
  BOOL v17;

  v8 = a5;
  v9 = (void *)objc_msgSend(a4, "copy");
  -[HMDAccessory workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __75__HMDHAPAccessory_updateNotificationEnabled_forCharacteristics_onBehalfOf___block_invoke;
  v13[3] = &unk_1E89BCF10;
  v17 = a3;
  v14 = v9;
  v15 = v8;
  v16 = self;
  v11 = v8;
  v12 = v9;
  dispatch_async(v10, v13);

}

- (BOOL)isClientRegisteredForNotifications
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  BOOL v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[HMDHAPAccessory services](self, "services");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        objc_msgSend(v8, "characteristics", 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = (void *)objc_msgSend(v9, "copy");

        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v18;
          while (2)
          {
            for (j = 0; j != v12; ++j)
            {
              if (*(_QWORD *)v18 != v13)
                objc_enumerationMutation(v10);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * j), "isClientNotificationEnabled") & 1) != 0)
              {

                v15 = 1;
                goto LABEL_19;
              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
            if (v12)
              continue;
            break;
          }
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      v15 = 0;
    }
    while (v5);
  }
  else
  {
    v15 = 0;
  }
LABEL_19:

  return v15;
}

- (void)resetNotificationEnabledTime
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __47__HMDHAPAccessory_resetNotificationEnabledTime__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)handleRemoteGatewayNotificationRegistration:(id)a3 enable:(BOOL)a4 enableTime:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  HMDHAPAccessory *v15;
  id v16;
  BOOL v17;

  v8 = a3;
  v9 = a5;
  -[HMDAccessory workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __81__HMDHAPAccessory_handleRemoteGatewayNotificationRegistration_enable_enableTime___block_invoke;
  v13[3] = &unk_1E89BCF10;
  v14 = v8;
  v15 = self;
  v17 = a4;
  v16 = v9;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, v13);

}

- (void)disableNotificationsForBundleID:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDAccessory workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __69__HMDHAPAccessory_disableNotificationsForBundleID_completionHandler___block_invoke;
  block[3] = &unk_1E89C1B48;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_disableNotificationsForBundleID:(id)a3 completionHandler:(id)a4
{
  id v6;
  void (**v7)(id, BOOL);
  void *v8;
  void *v9;
  void *v10;
  BOOL v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[4];
  id v31;
  id v32;
  HMDHAPAccessory *v33;
  BOOL v34;
  uint8_t v35[128];
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(id, BOOL))a4;
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory home](self, "home");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "notificationRegistrations");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "count") != 0;

  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __70__HMDHAPAccessory__disableNotificationsForBundleID_completionHandler___block_invoke;
  v30[3] = &unk_1E89AB748;
  v12 = v6;
  v31 = v12;
  v34 = v11;
  v13 = v8;
  v32 = v13;
  v33 = self;
  -[HMDHAPAccessory characteristicsPassingTest:](self, "characteristicsPassingTest:", v30);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "count");
  if (v15)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v14, "count");
      *(_DWORD *)buf = 138543618;
      v37 = v19;
      v38 = 2048;
      v39 = v20;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Disabling notification for accessory for %tu characteristics", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    -[HMDHAPAccessory _setNotificationsEnabled:forCharacteristics:clientIdentifier:matchingHAPAccessory:](v17, "_setNotificationsEnabled:forCharacteristics:clientIdentifier:matchingHAPAccessory:", 0, v14, v12, 0);
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v21 = v14;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v26, v35, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v27;
      do
      {
        v25 = 0;
        do
        {
          if (*(_QWORD *)v27 != v24)
            objc_enumerationMutation(v21);
          objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * v25++), "setNotificationEnabled:forClientIdentifier:", 0, v12, (_QWORD)v26);
        }
        while (v23 != v25);
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v26, v35, 16);
      }
      while (v23);
    }

  }
  v7[2](v7, v15 != 0);

}

- (void)setNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 notificationChangeThresholds:(id)a5 clientIdentifier:(id)a6 matchingHAPAccessory:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[5];
  id v22;
  id v23;
  id v24;
  id v25;
  BOOL v26;

  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = a7;
  -[HMDAccessory workQueue](self, "workQueue");
  v16 = objc_claimAutoreleasedReturnValue();
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __129__HMDHAPAccessory_setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke;
  v21[3] = &unk_1E89B6E60;
  v26 = a3;
  v21[4] = self;
  v22 = v12;
  v23 = v13;
  v24 = v14;
  v25 = v15;
  v17 = v15;
  v18 = v14;
  v19 = v13;
  v20 = v12;
  dispatch_async(v16, v21);

}

- (void)setNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 clientIdentifier:(id)a5
{
  -[HMDHAPAccessory setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:](self, "setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:", a3, a4, 0, a5, 0);
}

- (void)setNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 notificationChangeThresholds:(id)a5 clientIdentifier:(id)a6
{
  -[HMDHAPAccessory setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:](self, "setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:", a3, a4, a5, a6, 0);
}

- (void)_setNotificationsEnabled:(BOOL)a3 forCharacteristics:(id)a4 notificationChangeThresholds:(id)a5 clientIdentifier:(id)a6 matchingHAPAccessory:(id)a7
{
  void *v11;
  NSObject *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  __CFString *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHAPAccessory *v27;
  NSObject *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  HMDHAPAccessory *v33;
  NSObject *v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  HMDHAPAccessory *v40;
  NSObject *v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  HMDHAPAccessory *v47;
  NSObject *v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  const __CFString *v53;
  __CFString *v54;
  uint64_t v55;
  uint64_t i;
  void *v57;
  void *v58;
  HMDHAPAccessory *v59;
  NSObject *v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  __CFString *v65;
  void *v66;
  void *v67;
  dispatch_group_t v68;
  __CFString *v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t k;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  NSObject *v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  id v86;
  id v87;
  __CFString *v88;
  void *v89;
  void *v90;
  id v91;
  id v92;
  id obj;
  id obja;
  dispatch_group_t group;
  dispatch_group_t groupa;
  uint64_t v97;
  void *j;
  HMDHAPAccessory *val;
  __CFString *v100;
  _BOOL4 v101;
  id v102;
  _QWORD block[4];
  id v104;
  id v105;
  __CFString *v106;
  id v107;
  id v108;
  id v109;
  _BYTE *v110;
  uint64_t *v111;
  id v112;
  BOOL v113;
  _QWORD v114[4];
  id v115;
  NSObject *v116;
  id v117;
  id v118;
  id v119[2];
  _QWORD v120[5];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  void *v125;
  _QWORD aBlock[4];
  id v127;
  __CFString *v128;
  HMDHAPAccessory *v129;
  id v130;
  dispatch_group_t v131;
  id v132;
  _BYTE *v133;
  id v134;
  BOOL v135;
  id location;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  char v140;
  _QWORD v141[5];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _QWORD v146[4];
  __CFString *v147;
  id v148;
  BOOL v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  _BYTE v156[128];
  uint8_t v157[128];
  _BYTE buf[24];
  uint64_t v159;
  __int16 v160;
  const __CFString *v161;
  __int16 v162;
  __CFString *v163;
  __int16 v164;
  __CFString *v165;
  uint64_t v166;

  v101 = a3;
  v166 = *MEMORY[0x1E0C80C00];
  v91 = a4;
  v102 = a5;
  v100 = (__CFString *)a6;
  v92 = a7;
  v155 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D28540]), "initWithName:", CFSTR("Modify characteristic notifications"));
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  val = self;
  HMFGetOSLogHandle();
  v12 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v155, "identifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "shortDescription");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v91, "shortDescription");
    v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v92, "identifier");
    v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544642;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2112;
    v159 = (uint64_t)v16;
    v160 = 2112;
    v161 = v17;
    v162 = 2112;
    v163 = v100;
    v164 = 2112;
    v165 = v18;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Setting notifications enabled to %@ for characteristics: %@ client identifier: %@  matching HAP accessory: %@", buf, 0x3Eu);

  }
  objc_autoreleasePoolPop(v11);
  if (!objc_msgSend(v91, "count"))
  {
    v26 = (void *)MEMORY[0x1D17BA0A0]();
    v27 = val;
    HMFGetOSLogHandle();
    v28 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v155, "identifier");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "shortDescription");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v29;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v31;
      *(_WORD *)&buf[22] = 2112;
      v159 = (uint64_t)v100;
      _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] No characteristics to update notification for client: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v26);
    goto LABEL_61;
  }
  -[HMDAccessory home](val, "home");
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v91, "count"));
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v154 = 0;
  v153 = 0;
  v152 = 0;
  v151 = 0;
  v150 = v19;
  -[HMDHAPAccessory _groupCharacteristicsNotificationWithCharacteristics:enable:activity:clientIdentifier:groupCharacteristicsError:characteristicsToModifyLocally:characteristicsToModifyOnResident:characteristicsToDisableOnResident:characteristicsErrorsMapFailingToModify:](val, "_groupCharacteristicsNotificationWithCharacteristics:enable:activity:clientIdentifier:groupCharacteristicsError:characteristicsToModifyLocally:characteristicsToModifyOnResident:characteristicsToDisableOnResident:characteristicsErrorsMapFailingToModify:", v91, v101, v155, v100, &v154, &v153, &v152, &v151, &v150);
  v88 = (__CFString *)v154;
  v86 = v153;
  v87 = v152;
  v85 = v151;
  v84 = v150;

  if (!v88)
  {
    if (objc_msgSend(v87, "count"))
    {
      v32 = (void *)MEMORY[0x1D17BA0A0]();
      v33 = val;
      HMFGetOSLogHandle();
      v34 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v35 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v155, "identifier");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "shortDescription");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = objc_msgSend(v87, "count");
        *(_DWORD *)buf = 138544130;
        *(_QWORD *)&buf[4] = v35;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v37;
        *(_WORD *)&buf[22] = 2048;
        v159 = v38;
        v160 = 2112;
        v161 = v100;
        _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Modifying %tu notifications on remote gateway for client: %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v32);
      objc_msgSend(v90, "remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:", v101, v87, v102);
    }
    if (objc_msgSend(v85, "count"))
    {
      v39 = (void *)MEMORY[0x1D17BA0A0]();
      v40 = val;
      HMFGetOSLogHandle();
      v41 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v42 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v155, "identifier");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "shortDescription");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = objc_msgSend(v85, "count");
        *(_DWORD *)buf = 138544130;
        *(_QWORD *)&buf[4] = v42;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v44;
        *(_WORD *)&buf[22] = 2048;
        v159 = v45;
        v160 = 2112;
        v161 = v100;
        _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Disabling %tu notifications on remote gateway for client: %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v39);
      objc_msgSend(v90, "remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:", 0, v85, 0);
    }
    if (shouldSkipLocalAccessoryNotificationRegistration(v90, val, v91))
    {
      v46 = (void *)MEMORY[0x1D17BA0A0]();
      v47 = val;
      HMFGetOSLogHandle();
      v48 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v49 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v155, "identifier");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "shortDescription");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v91, "count"));
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        if (v101)
          v53 = CFSTR("Enabling");
        else
          v53 = CFSTR("Disabling");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v85, "count"));
        v54 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544642;
        *(_QWORD *)&buf[4] = v49;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v51;
        *(_WORD *)&buf[22] = 2112;
        v159 = (uint64_t)v52;
        v160 = 2112;
        v161 = v53;
        v162 = 2112;
        v163 = v54;
        v164 = 2112;
        v165 = v100;
        _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Not modifying local notifications for %@ characteristics. %@ %@ characteristics notifications for client: %@ via primary", buf, 0x3Eu);

      }
      objc_autoreleasePoolPop(v46);
      v146[0] = MEMORY[0x1E0C809B0];
      v146[1] = 3221225472;
      v146[2] = __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke;
      v146[3] = &unk_1E89AB798;
      v149 = v101;
      v147 = v100;
      v148 = v102;
      objc_msgSend(v87, "na_each:", v146);
      -[HMDHAPAccessory _notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:](v47, "_notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:", v87, v84, v101, 0);

    }
    if (v101 && -[__CFString hasPrefix:](v100, "hasPrefix:", CFSTR("com.apple.HomeKitDaemon")))
    {
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      obj = v86;
      v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v142, v157, 16);
      if (v55)
      {
        group = *(dispatch_group_t *)v143;
        do
        {
          v97 = v55;
          for (i = 0; i != v97; ++i)
          {
            if (*(dispatch_group_t *)v143 != group)
              objc_enumerationMutation(obj);
            v57 = *(void **)(*((_QWORD *)&v142 + 1) + 8 * i);
            v58 = (void *)MEMORY[0x1D17BA0A0]();
            v59 = val;
            HMFGetOSLogHandle();
            v60 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v61 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v155, "identifier");
              v62 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v62, "shortDescription");
              v63 = (void *)objc_claimAutoreleasedReturnValue();
              HMFBooleanToString();
              v64 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v57, "shortDescription");
              v65 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544386;
              *(_QWORD *)&buf[4] = v61;
              *(_WORD *)&buf[12] = 2114;
              *(_QWORD *)&buf[14] = v63;
              *(_WORD *)&buf[22] = 2112;
              v159 = (uint64_t)v64;
              v160 = 2112;
              v161 = v65;
              v162 = 2112;
              v163 = v100;
              _os_log_impl(&dword_1CD062000, v60, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Marking the notification change (%@) before actually doing it in the accessory for characteristic %@ for client %@", buf, 0x34u);

            }
            objc_autoreleasePoolPop(v58);
            v141[0] = MEMORY[0x1E0C809B0];
            v141[1] = 3221225472;
            v141[2] = __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_499;
            v141[3] = &unk_1E89AB770;
            v141[4] = v57;
            objc_msgSend(v102, "na_firstObjectPassingTest:", v141);
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v66, "threshold");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v57, "setNotificationEnabled:forClientIdentifier:changeThreshold:", 1, v100, v67);

          }
          v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v142, v157, 16);
        }
        while (v55);
      }

    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    LOBYTE(v159) = 0;
    LOBYTE(v159) = objc_msgSend(v86, "count") == 0;
    v137 = 0;
    v138 = &v137;
    v139 = 0x2020000000;
    v140 = 0;
    v68 = dispatch_group_create();
    objc_initWeak(&location, val);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_2_500;
    aBlock[3] = &unk_1E89AB7E8;
    obja = v86;
    v127 = obja;
    v135 = v101;
    v69 = v100;
    v128 = v69;
    v129 = val;
    v130 = v155;
    groupa = v68;
    v131 = groupa;
    objc_copyWeak(&v134, &location);
    v133 = buf;
    v82 = v83;
    v132 = v82;
    v89 = _Block_copy(aBlock);
    v125 = 0;
    -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](val, "preferredHAPAccessoryForOperation:linkType:", 4, &v125);
    for (j = (void *)objc_claimAutoreleasedReturnValue(); ; j = (void *)v80)
    {
      if (!objc_msgSend(obja, "count") || !v125)
      {
LABEL_59:
        -[HMDAccessory workQueue](val, "workQueue");
        v81 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_505;
        block[3] = &unk_1E89AB810;
        objc_copyWeak(&v112, &location);
        v110 = buf;
        v104 = v84;
        v105 = v82;
        v113 = v101;
        v106 = v69;
        v111 = &v137;
        v107 = obja;
        v108 = v155;
        v109 = v102;
        dispatch_group_notify(groupa, v81, block);

        -[HMDHAPAccessory _checkHAPSessionRestore](val, "_checkHAPSessionRestore");
        objc_destroyWeak(&v112);

        objc_destroyWeak(&v134);
        objc_destroyWeak(&location);

        _Block_object_dispose(&v137, 8);
        _Block_object_dispose(buf, 8);
        goto LABEL_60;
      }
      dispatch_group_enter(groupa);
      objc_msgSend(j, "server");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      if (v70)
      {
        if (!objc_msgSend(j, "isReachable"))
          goto LABEL_45;
        if (v92)
        {
          if (objc_msgSend(j, "isEqual:"))
          {
            (*((void (**)(void *, void *, void *))v89 + 2))(v89, j, v70);

            goto LABEL_59;
          }
LABEL_45:
          dispatch_group_leave(groupa);
          goto LABEL_57;
        }
        (*((void (**)(void *, void *, void *))v89 + 2))(v89, j, v70);
      }
      else
      {
        v71 = v125;
        if (v125 == (void *)2)
        {
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v72 = obja;
          v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v121, v156, 16);
          if (v73)
          {
            v74 = *(_QWORD *)v122;
            do
            {
              for (k = 0; k != v73; ++k)
              {
                if (*(_QWORD *)v122 != v74)
                  objc_enumerationMutation(v72);
                v76 = *(void **)(*((_QWORD *)&v121 + 1) + 8 * k);
                v120[0] = MEMORY[0x1E0C809B0];
                v120[1] = 3221225472;
                v120[2] = __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_503;
                v120[3] = &unk_1E89AB770;
                v120[4] = v76;
                objc_msgSend(v102, "na_firstObjectPassingTest:", v120);
                v77 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v77, "threshold");
                v78 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v76, "setNotificationEnabled:forClientIdentifier:changeThreshold:", v101, v69, v78);

              }
              v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v121, v156, 16);
            }
            while (v73);
          }

          *((_BYTE *)v138 + 24) = 1;
          dispatch_group_leave(groupa);
          -[HMDHAPAccessory _updateAccessoryTracking](val, "_updateAccessoryTracking");
        }
        else
        {
          -[HMDAccessory workQueue](val, "workQueue");
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          v114[0] = MEMORY[0x1E0C809B0];
          v114[1] = 3221225472;
          v114[2] = __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_2_504;
          v114[3] = &unk_1E89BDFF0;
          objc_copyWeak(v119, &location);
          v115 = v155;
          v116 = groupa;
          v119[1] = v125;
          v117 = v92;
          v118 = v89;
          objc_msgSend(v90, "retrieveHAPAccessoryForHMDAccessory:linkType:forceRetrieve:queue:completion:", val, v71, 0, v79, v114);

          objc_destroyWeak(v119);
        }
      }
LABEL_57:
      -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](val, "preferredHAPAccessoryForOperation:linkType:", 4, &v125);
      v80 = objc_claimAutoreleasedReturnValue();

    }
  }
  v20 = (void *)MEMORY[0x1D17BA0A0]();
  v21 = val;
  HMFGetOSLogHandle();
  v22 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v155, "identifier");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "shortDescription");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v25;
    *(_WORD *)&buf[22] = 2112;
    v159 = (uint64_t)v100;
    v160 = 2112;
    v161 = v88;
    _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] No characteristics to update notification for client: %@ due to %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v20);
LABEL_60:

LABEL_61:
  __HMFActivityScopeLeave();

}

- (void)enableNotification:(BOOL)a3 forCharacteristicIDs:(id)a4 message:(id)a5 clientIdentifier:(id)a6
{
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  _QWORD block[4];
  id v18;
  HMDHAPAccessory *v19;
  id v20;
  id v21;
  BOOL v22;

  v10 = a4;
  v11 = a5;
  v12 = a6;
  -[HMDAccessory workQueue](self, "workQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __84__HMDHAPAccessory_enableNotification_forCharacteristicIDs_message_clientIdentifier___block_invoke;
  block[3] = &unk_1E89BC5E8;
  v18 = v10;
  v19 = self;
  v22 = a3;
  v20 = v12;
  v21 = v11;
  v14 = v11;
  v15 = v12;
  v16 = v10;
  dispatch_async(v13, block);

}

- (BOOL)_remotelySetNotificationsEnabled:(BOOL)a3 forCharacteristic:(id)a4 clientIdentifier:(id)a5
{
  _BOOL8 v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  __int128 v26;
  id v27;
  char v28;
  id obj;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v6 = a3;
  v40 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = a5;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = v7;
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
  v27 = v8;
  if (!v10)
  {
    v28 = 0;
    goto LABEL_22;
  }
  v12 = v10;
  v28 = 0;
  v13 = *(_QWORD *)v32;
  *(_QWORD *)&v11 = 138543618;
  v26 = v11;
  do
  {
    for (i = 0; i != v12; ++i)
    {
      if (*(_QWORD *)v32 != v13)
        objc_enumerationMutation(obj);
      v15 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
      if (!v6)
      {
        if (!objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * i), "deregisterNotificationForClientIdentifier:", v8))
        {
          v28 = 1;
          continue;
        }
        goto LABEL_17;
      }
      if (isWatch() || (objc_msgSend(v15, "isNotificationEnabled") & 1) == 0)
      {
        v20 = (void *)MEMORY[0x1D17BA0A0]();
        v21 = self;
        HMFGetOSLogHandle();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v26;
          v36 = v23;
          v37 = 2112;
          v38 = v15;
          _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Enabling notification for characteristic %@ on remote gateway", buf, 0x16u);

          v8 = v27;
        }

        objc_autoreleasePoolPop(v20);
LABEL_17:
        objc_msgSend(v9, "addObject:", v15, v26);
        continue;
      }
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = v26;
        v36 = v19;
        v37 = 2112;
        v38 = v15;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Notification is already set to YES for characteristic: %@, not modifying it in remote gateway", buf, 0x16u);

        v8 = v27;
      }

      objc_autoreleasePoolPop(v16);
    }
    v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
  }
  while (v12);
LABEL_22:

  if (objc_msgSend(v9, "count"))
  {
    -[HMDAccessory home](self, "home");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "remotelySetNotificationsEnabled:forCharacteristics:characteristicChangeThresholds:", v6, v9, 0);

    v8 = v27;
  }

  return v28 & 1;
}

- (void)_enableBroadcastNotifications:(BOOL)a3 hapAccessory:(id)a4 forCharacteristics:(id)a5
{
  id v6;
  __int128 v7;
  uint64_t i;
  void *v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  HMDHAPAccessory *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHAPAccessory *v28;
  NSObject *v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  _BOOL4 v38;
  int v39;
  void *v40;
  HMDHAPAccessory *v41;
  NSObject *v42;
  _BOOL4 v43;
  void *v44;
  int v45;
  void *v46;
  HMDHAPAccessory *v47;
  NSObject *v48;
  void *v49;
  int v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  int v55;
  uint64_t v56;
  void *v57;
  void *v58;
  HMDHAPAccessory *v59;
  NSObject *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  void *v65;
  void *v66;
  __int128 v67;
  void *v68;
  id obj;
  id v70;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id vala;
  _QWORD v77[4];
  id v78;
  id v79;
  id v80;
  BOOL v81;
  id location;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint8_t buf[4];
  id v88;
  __int16 v89;
  id v90;
  __int16 v91;
  id v92;
  __int16 v93;
  id v94;
  __int16 v95;
  void *v96;
  _BYTE v97[128];
  uint64_t v98;

  v71 = a3;
  v98 = *MEMORY[0x1E0C80C00];
  v70 = a4;
  v6 = a5;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  obj = v6;
  v73 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v97, 16);
  if (v73)
  {
    v72 = *(_QWORD *)v84;
    *(_QWORD *)&v7 = 138544130;
    v67 = v7;
    do
    {
      for (i = 0; i != v73; ++i)
      {
        if (*(_QWORD *)v84 != v72)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * i);
        if ((objc_msgSend(v9, "properties", v67) & 8) != 0)
        {
          if (objc_msgSend(v9, "isNotificationEnabled"))
            v16 = 1;
          else
            v16 = 3;
          objc_msgSend(v9, "characteristicForHAPAccessory:", v70);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0D16410], "configurationTupleForCharacteristic:broadcastEnable:broadcastInterval:", v17, v71, v16);
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = (void *)v18;
          if (v17)
            v20 = v18 == 0;
          else
            v20 = 1;
          if (v20)
          {
            v27 = (void *)MEMORY[0x1D17BA0A0]();
            v21 = self;
            HMFGetOSLogHandle();
            v29 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v9, "instanceID");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v9, "characteristicType");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v70, "server");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "identifier");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v67;
              v88 = v22;
              v89 = 2112;
              v90 = v23;
              v91 = 2112;
              v92 = v24;
              v93 = 2112;
              v94 = v26;
              _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot map HMDCharacteristic %@/%@ to a HAPCharacteristic for server %@ to enable broadcast notifications", buf, 0x2Au);

            }
          }
          else
          {
            v27 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v68, "addObject:", v18));
            v28 = self;
            HMFGetOSLogHandle();
            v29 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v19, "characteristic");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v88 = v31;
              v89 = 2112;
              v90 = v32;
              _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_DEBUG, "%{public}@Configuring broadcast notification for %@", buf, 0x16u);

            }
          }

          objc_autoreleasePoolPop(v27);
        }
        else
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          v11 = self;
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "shortDescription");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            HMFEnabledStatusToString();
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v88 = v13;
            v89 = 2112;
            v90 = v14;
            v91 = 2112;
            v92 = v15;
            _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEBUG, "%{public}@Not including %@ for broadcast notifications, enable: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v10);
        }
      }
      v73 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v97, 16);
    }
    while (v73);
  }

  objc_msgSend(v70, "server");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v34 = v33;
  else
    v34 = 0;
  v35 = v34;

  -[HMDAccessory home](self, "home");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "primaryResident");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = v37 == 0;

  if (v38)
  {
    v46 = (void *)MEMORY[0x1D17BA0A0]();
    v47 = self;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = -[HMDHAPAccessory keyGenerationType](v47, "keyGenerationType");
      *(_DWORD *)buf = 138543618;
      v88 = v49;
      v89 = 1024;
      LODWORD(v90) = v50;
      _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_DEBUG, "%{public}@No resident configured - generating Broadcast Notify Key with type: %d", buf, 0x12u);

    }
    objc_autoreleasePoolPop(v46);
  }
  else
  {
    v39 = objc_msgSend(v36, "isCurrentDeviceAvailableResident");
    v40 = (void *)MEMORY[0x1D17BA0A0]();
    v41 = self;
    HMFGetOSLogHandle();
    v42 = objc_claimAutoreleasedReturnValue();
    v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG);
    if (v39)
    {
      if (v43)
      {
        HMFGetLogIdentifier();
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = -[HMDHAPAccessory keyGenerationType](v41, "keyGenerationType");
        *(_DWORD *)buf = 138543618;
        v88 = v44;
        v89 = 1024;
        LODWORD(v90) = v45;
        _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_DEBUG, "%{public}@Available resident - generating Broadcast Notify Key with type: %d", buf, 0x12u);

      }
      objc_autoreleasePoolPop(v40);
    }
    else
    {
      if (v43)
      {
        HMFGetLogIdentifier();
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v88 = v51;
        _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_DEBUG, "%{public}@Reading Broadcast Notify Key from non-resident device", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v40);
      -[HMDHAPAccessory setKeyGenerationType:](v41, "setKeyGenerationType:", 2);
    }
  }
  if (!-[HMDHAPAccessory keyGenerationInProgress](self, "keyGenerationInProgress")
    && objc_msgSend(v36, "isAdminUser"))
  {
    objc_initWeak(&location, self);
    if (v71)
      goto LABEL_44;
    objc_msgSend(v36, "primaryResident");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v52)
      goto LABEL_44;
    objc_msgSend(v36, "primaryResident");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "device");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend(v54, "isCurrentDevice");

    if (v55)
    {
LABEL_44:
      -[HMDHAPAccessory setKeyGenerationInProgress:](self, "setKeyGenerationInProgress:", 1);
      v56 = -[HMDHAPAccessory keyGenerationType](self, "keyGenerationType");
      -[HMDAccessory workQueue](self, "workQueue");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v77[0] = MEMORY[0x1E0C809B0];
      v77[1] = 3221225472;
      v77[2] = __81__HMDHAPAccessory__enableBroadcastNotifications_hapAccessory_forCharacteristics___block_invoke;
      v77[3] = &unk_1E89AB928;
      objc_copyWeak(&v80, &location);
      v78 = v35;
      v79 = v68;
      v81 = v71;
      objc_msgSend(v78, "generateBroadcastKey:queue:withCompletionHandler:", v56, v57, v77);

      objc_destroyWeak(&v80);
    }
    else
    {
      v58 = (void *)MEMORY[0x1D17BA0A0]();
      v59 = self;
      HMFGetOSLogHandle();
      v60 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        v74 = v58;
        HMFGetLogIdentifier();
        vala = (id)objc_claimAutoreleasedReturnValue();
        HMFEnabledStatusToString();
        v61 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "isAdminUser");
        HMFBooleanToString();
        v62 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "primaryResident");
        v63 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "primaryResident");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "device");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v65, "isCurrentDevice");
        HMFBooleanToString();
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544386;
        v88 = vala;
        v89 = 2112;
        v90 = v61;
        v91 = 2112;
        v92 = v62;
        v93 = 2112;
        v94 = v63;
        v95 = 2112;
        v96 = v66;
        _os_log_impl(&dword_1CD062000, v60, OS_LOG_TYPE_DEBUG, "%{public}@Deferring BC configuration enable: %@, isAdminUser: %@, Resident: %@, isResident: %@", buf, 0x34u);

        v58 = v74;
      }

      objc_autoreleasePoolPop(v58);
    }
    objc_destroyWeak(&location);
  }

}

- (void)_forceUpdateBTLEKeyGenerationForServer:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHAPAccessory keyGenerationType](self, "keyGenerationType") != 2)
  {
    objc_msgSend(v4, "browser");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (objc_msgSend(v7, "remoteBrowsingEnabled")
      && (objc_msgSend(v7, "remoteBrowsingAndScanEnabled") & 1) == 0)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138543618;
        v13 = v11;
        v14 = 2112;
        v15 = &unk_1E8B32F28;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@WHB Mode - Forcing the keyGenerationType to %@", (uint8_t *)&v12, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      -[HMDHAPAccessory setKeyGenerationType:](v9, "setKeyGenerationType:", 2);
    }

  }
}

- (void)_forceEnableReachabilityPingForPrimaryResident:(id)a3
{
  id v4;
  char isKindOfClass;
  void *v6;
  int v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  NSObject *v14;
  void *v15;
  HMDHAPAccessory *v16;
  NSObject *v17;
  void *v18;
  __CFString *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  void *v23;
  _QWORD v24[5];
  id v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  const __CFString *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if (v4 && (isKindOfClass & 1) != 0)
  {
    -[HMDAccessory home](self, "home");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v6, "isCurrentDeviceAvailableResident") & 1) != 0)
    {
      v7 = objc_msgSend(v6, "isCurrentDeviceConfirmedPrimaryResident");
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = (void *)v11;
        v13 = CFSTR("not ");
        if (v7)
          v13 = &stru_1E89C3E38;
        *(_DWORD *)buf = 138543618;
        v27 = v11;
        v28 = 2112;
        v29 = v13;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Current device is %@primary resident", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      if (v7 && !-[HMDAccessory reachabilityPingEnabled](v9, "reachabilityPingEnabled"))
      {
        -[HMDAccessory workQueue](v9, "workQueue");
        v14 = objc_claimAutoreleasedReturnValue();
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 3221225472;
        v24[2] = __66__HMDHAPAccessory__forceEnableReachabilityPingForPrimaryResident___block_invoke;
        v24[3] = &unk_1E89C2328;
        v24[4] = v9;
        v25 = v4;
        dispatch_async(v14, v24);

      }
    }
    else
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v27 = (uint64_t)v23;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Current device not a resident", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
    }

  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v27 = (uint64_t)v18;
      v28 = 2112;
      v29 = v19;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Accessory Server does not support forced ping enable %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (void)handleResidentDeviceUpdated:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __47__HMDHAPAccessory_handleResidentDeviceUpdated___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (BOOL)_isRegisteredForNotificationsByForegroundProcess
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  BOOL v25;
  void *v26;
  HMDHAPAccessory *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  HMDHAPAccessory *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[4];
  id v50;
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  void *v54;
  __int16 v55;
  uint64_t v56;
  _BYTE v57[128];
  _BYTE v58[128];
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessageTransport defaultTransport](HMDXPCMessageTransport, "defaultTransport");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "processMonitor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "foregroundProcesses");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 3221225472;
  v49[2] = __67__HMDHAPAccessory__isRegisteredForNotificationsByForegroundProcess__block_invoke;
  v49[3] = &unk_1E89AB950;
  v7 = v3;
  v50 = v7;
  objc_msgSend(v6, "na_each:", v49);

  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, v59, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v46;
    v35 = v8;
    v36 = self;
    v32 = *(_QWORD *)v46;
    do
    {
      v11 = 0;
      v33 = v9;
      do
      {
        if (*(_QWORD *)v46 != v10)
          objc_enumerationMutation(v8);
        v12 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * v11);
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        -[HMDHAPAccessory services](self, "services");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v58, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v42;
          v34 = *(_QWORD *)v42;
          do
          {
            for (i = 0; i != v15; ++i)
            {
              if (*(_QWORD *)v42 != v16)
                objc_enumerationMutation(v13);
              v18 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
              v37 = 0u;
              v38 = 0u;
              v39 = 0u;
              v40 = 0u;
              objc_msgSend(v18, "characteristics");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v37, v57, 16);
              if (v20)
              {
                v21 = v20;
                v22 = *(_QWORD *)v38;
                while (2)
                {
                  for (j = 0; j != v21; ++j)
                  {
                    if (*(_QWORD *)v38 != v22)
                      objc_enumerationMutation(v19);
                    v24 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * j);
                    if (objc_msgSend(v24, "isNotificationEnabledForClientIdentifier:", v12))
                    {
                      v26 = (void *)MEMORY[0x1D17BA0A0]();
                      v27 = v36;
                      HMFGetOSLogHandle();
                      v28 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        v29 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v24, "shortDescription");
                        v30 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138543874;
                        v52 = v29;
                        v53 = 2112;
                        v54 = v30;
                        v55 = 2112;
                        v56 = v12;
                        _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Characteristic %@ is registered for notifications from foreground client %@", buf, 0x20u);

                      }
                      objc_autoreleasePoolPop(v26);

                      v25 = 1;
                      v8 = v35;
                      goto LABEL_28;
                    }
                  }
                  v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v37, v57, 16);
                  if (v21)
                    continue;
                  break;
                }
              }

              v16 = v34;
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v58, 16);
            v8 = v35;
            v10 = v32;
          }
          while (v15);
        }

        ++v11;
        self = v36;
      }
      while (v11 != v33);
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v45, v59, 16);
      v25 = 0;
    }
    while (v9);
  }
  else
  {
    v25 = 0;
  }
LABEL_28:

  return v25;
}

- (void)_doPrimaryResidentUpdated
{
  NSObject *v3;
  void *v4;
  char v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHAPAccessory *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  HMDHAPAccessory *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHAPAccessory _checkHAPSessionRestore](self, "_checkHAPSessionRestore");
  if (!-[HMDAccessory reachabilityPingNotificationEnabled](self, "reachabilityPingNotificationEnabled"))
  {
    v18 = MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543362;
      v25 = v21;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Reachability is not enabled for accessory", (uint8_t *)&v24, 0xCu);

    }
    v22 = (void *)v18;
    goto LABEL_15;
  }
  -[HMDAccessory home](self, "home");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isCurrentDeviceConfirmedPrimaryResident");

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if ((v5 & 1) == 0)
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543362;
      v25 = v23;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Primary resident notification -- but home says we're not primary!", (uint8_t *)&v24, 0xCu);

    }
    v22 = v6;
LABEL_15:
    objc_autoreleasePoolPop(v22);
    return;
  }
  if (v9)
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 138543362;
    v25 = v10;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Enabling reachability ping for thread transport, accessory", (uint8_t *)&v24, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  -[HMDAccessory setReachabilityPingEnabled:](v7, "setReachabilityPingEnabled:", 1);
  -[HMDHAPAccessory startReachabilityCheck](v7, "startReachabilityCheck");
  -[HMDHAPAccessory cachedRemovedUser](v7, "cachedRemovedUser");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = v7;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory cachedRemovedUser](v13, "cachedRemovedUser");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543618;
      v25 = v15;
      v26 = 2112;
      v27 = v16;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Current device is primary resident and there's a cached removed user: %@", (uint8_t *)&v24, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    -[HMDHAPAccessory cachedRemovedUser](v13, "cachedRemovedUser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory _handleHomeUserRemovedNotification:](v13, "_handleHomeUserRemovedNotification:", v17);

  }
}

- (double)_getDurationAndUpdateCurrentTime:(id)a3 currentTime:(id *)a4
{
  id v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  id v10;

  v5 = a3;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v5)
  {
    objc_msgSend(v6, "timeIntervalSinceDate:", v5);
    v9 = v8;
  }
  else
  {
    v9 = 0.0;
  }
  v10 = objc_retainAutorelease(v7);
  *a4 = v10;

  return v9;
}

- (void)_logServerReachabilityNotification:(BOOL)a3 withDuration:(id)a4 withLinkType:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  void *v13;
  id v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  HMDHAPMetricsReachabilityAddRemoveEvent *v22;
  uint64_t v23;
  HMDHAPMetricsReachabilityAddRemoveEvent *v24;
  _BOOL4 v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v6 = a3;
  v39 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v26 = v8;
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v9;
    if (v6)
      v15 = "unreachable";
    else
      v15 = "reachable";
    -[HMDAccessory identifier](v11, "identifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v25 = v6;
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory home](v11, "home");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "isCurrentDeviceConfirmedPrimaryResident");
    HMFBooleanToString();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544642;
    v28 = v13;
    v29 = 2080;
    v30 = v15;
    v9 = v14;
    v31 = 2112;
    v32 = v16;
    v33 = 2112;
    v34 = v26;
    v35 = 2112;
    v36 = v17;
    v37 = 2112;
    v38 = v19;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@%s duration for %@ is %@ seconds - reachable %@, primary resident: %@", buf, 0x3Eu);

    v6 = v25;
    v8 = v26;
  }

  objc_autoreleasePoolPop(v10);
  -[HMDAccessory home](v11, "home");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "isCurrentDeviceConfirmedPrimaryResident");

  if (v21)
  {
    v22 = [HMDHAPMetricsReachabilityAddRemoveEvent alloc];
    if (v6)
      v23 = 2;
    else
      v23 = 1;
    v24 = -[HMDHAPMetricsReachabilityAddRemoveEvent initWithAccessory:hmdAddRemoveEvent:forLinkType:](v22, "initWithAccessory:hmdAddRemoveEvent:forLinkType:", v11, v23, v9);
    -[HMDAccessory submitLogEvent:](v11, "submitLogEvent:", v24);

  }
}

- (void)_logServerReachabilityNotification:(id)a3
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char v9;

  v9 = 0;
  v4 = *MEMORY[0x1E0D15E70];
  v5 = a3;
  v6 = objc_msgSend(v5, "hmf_BOOLForKey:isPresent:", v4, &v9);
  objc_msgSend(v5, "hmf_numberForKey:", *MEMORY[0x1E0D15E68]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", *MEMORY[0x1E0D15E98]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHAPAccessory _logServerReachabilityNotification:withDuration:withLinkType:](self, "_logServerReachabilityNotification:withDuration:withLinkType:", v6, v8, v7);
}

- (void)handlePrimaryResidentUpdateNotification:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __59__HMDHAPAccessory_handlePrimaryResidentUpdateNotification___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)reachabilityDidChangeToReachable:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __52__HMDHAPAccessory_reachabilityDidChangeToReachable___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)reachabilityDidChangeToUnreachable:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __54__HMDHAPAccessory_reachabilityDidChangeToUnreachable___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)notifyClientsOfUpdatedAccessoryControllableValue
{
  objc_super v2;

  v2.receiver = self;
  v2.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory notifyClientsOfUpdatedAccessoryControllableValue:](&v2, sel_notifyClientsOfUpdatedAccessoryControllableValue_, -[HMDAccessory isReachable](self, "isReachable"));
}

- (void)_reenableNotificationsOnWatch
{
  void *v3;
  HMDHAPAccessory *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  HMDHAPAccessory *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint8_t v31[128];
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (isWatch() && -[HMDHAPAccessory isPaired](self, "isPaired"))
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory uniqueIdentifier](v4, "uniqueIdentifier");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v33 = v6;
      v34 = 2112;
      v35 = v7;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Accessory is reachable; re-enabling notifications on HAP accessories: %@",
        buf,
        0x16u);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v21 = v4;
    -[HMDHAPAccessory services](v4, "services");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v27 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          objc_msgSend(v14, "characteristics");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
          if (v16)
          {
            v17 = v16;
            v18 = *(_QWORD *)v23;
            do
            {
              for (j = 0; j != v17; ++j)
              {
                if (*(_QWORD *)v23 != v18)
                  objc_enumerationMutation(v15);
                v20 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * j);
                if (objc_msgSend(v20, "isNotificationEnabled"))
                  objc_msgSend(v8, "addObject:", v20);
              }
              v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
            }
            while (v17);
          }

        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v11);
    }

    -[HMDHAPAccessory _setNotificationsEnabled:forCharacteristics:clientIdentifier:matchingHAPAccessory:](v21, "_setNotificationsEnabled:forCharacteristics:clientIdentifier:matchingHAPAccessory:", 1, v8, 0, 0);
  }
}

- (void)setCameraProfileNotificationSettings:(id)a3
{
  HMCameraUserNotificationSettings *v4;
  HMCameraUserNotificationSettings *cameraProfileNotificationSettings;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  v4 = (HMCameraUserNotificationSettings *)objc_msgSend(v6, "copy");
  cameraProfileNotificationSettings = self->_cameraProfileNotificationSettings;
  self->_cameraProfileNotificationSettings = v4;

  os_unfair_recursive_lock_unlock();
}

- (BOOL)_shouldTrackAccessoryWithPriority:(BOOL *)a3
{
  void *v6;
  void *v7;
  char v8;

  if (a3)
  {
    *a3 = 0;
    if (-[HMDHAPAccessory _containsSecureCharacteristic](self, "_containsSecureCharacteristic"))
    {
      *a3 = 1;
      return 1;
    }
  }
  else if (-[HMDHAPAccessory _containsSecureCharacteristic](self, "_containsSecureCharacteristic"))
  {
    return 1;
  }
  if (-[HMDHAPAccessory isNotificationEnabled](self, "isNotificationEnabled"))
    return 1;
  -[HMDAccessory home](self, "home");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "residentDeviceManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isCurrentDeviceAvailableResident");

  return v8;
}

- (BOOL)_containsSecureCharacteristic
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  -[HMDHAPAccessory services](self, "services");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "copy");

  v23 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v23)
  {
    v6 = *(_QWORD *)v30;
    v24 = v5;
    v22 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v23; ++i)
      {
        if (*(_QWORD *)v30 != v6)
          objc_enumerationMutation(v5);
        v8 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        v25 = 0u;
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        objc_msgSend(v8, "characteristics");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = (void *)objc_msgSend(v9, "copy");

        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v26;
          while (2)
          {
            for (j = 0; j != v12; ++j)
            {
              if (*(_QWORD *)v26 != v13)
                objc_enumerationMutation(v10);
              v15 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * j);
              objc_msgSend(v15, "type");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "service");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "type");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = objc_msgSend(v3, "requiresDeviceUnlock:forService:", v16, v18);

              if ((v19 & 1) != 0)
              {

                v20 = 1;
                v5 = v24;
                goto LABEL_19;
              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
            if (v12)
              continue;
            break;
          }
        }

        v5 = v24;
        v6 = v22;
      }
      v20 = 0;
      v23 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    }
    while (v23);
  }
  else
  {
    v20 = 0;
  }
LABEL_19:

  return v20;
}

- (void)updateTrackedAccessoryStateNumber:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __53__HMDHAPAccessory_updateTrackedAccessoryStateNumber___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_updateStateForTrackedAccessory:(id)a3 stateNumber:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  v6 = a4;
  if (-[HMDHAPAccessory hasBTLELink](self, "hasBTLELink"))
  {
    -[HMDAccessory home](self, "home");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "accessoryBrowser");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "accessoryBrowserHapProtocol");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateStateForIdentifier:stateNumber:", v10, v6);

  }
}

- (id)findCharacteristic:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHAPAccessory services](self, "services", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "findCharacteristic:", v4);
        v10 = objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)v10;
          goto LABEL_11;
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_11:

  return v11;
}

- (id)findCharacteristicsByType:(id)a3 forServiceType:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  -[HMDHAPAccessory services](self, "services", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v14, "serviceType");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "isEqualToString:", v7);

        if (v16)
        {
          objc_msgSend(v14, "findCharacteristicWithType:", v6);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v17)
            objc_msgSend(v8, "addObject:", v17);

        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v11);
  }

  return v8;
}

- (id)findCharacteristicsByTypes:(id)a3 forServiceType:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id obj;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  -[HMDHAPAccessory services](self, "services");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v35;
    v26 = *(_QWORD *)v35;
    v27 = v7;
    do
    {
      v12 = 0;
      v28 = v10;
      do
      {
        if (*(_QWORD *)v35 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * v12);
        objc_msgSend(v13, "serviceType", v26, v27);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "isEqualToString:", v7);

        if (v15)
        {
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          objc_msgSend(v13, "characteristics");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
          if (v17)
          {
            v18 = v17;
            v19 = *(_QWORD *)v31;
            do
            {
              for (i = 0; i != v18; ++i)
              {
                if (*(_QWORD *)v31 != v19)
                  objc_enumerationMutation(v16);
                v21 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
                objc_msgSend(v21, "type");
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                v23 = objc_msgSend(v6, "containsObject:", v22);

                if (v23)
                  objc_msgSend(v8, "addObject:", v21);
              }
              v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
            }
            while (v18);
          }

          v11 = v26;
          v7 = v27;
          v10 = v28;
        }
        ++v12;
      }
      while (v12 != v10);
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    }
    while (v10);
  }

  v24 = (void *)objc_msgSend(v8, "copy");
  return v24;
}

- (void)_checkRegisterForServerNotification
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory getHAPAccessoryMatchingInstanceId](self, "getHAPAccessoryMatchingInstanceId");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "server");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v3 && v4)
  {
    objc_msgSend(v4, "registerForNotifications:", self);
  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@hapAccessory not ready to register for server notifications: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

}

- (void)_doReachabilityUpdateForServer:(id)a3
{
  id v4;
  int v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDAccessory reachabilityPingEnabled](self, "reachabilityPingEnabled"))
  {
    v5 = objc_msgSend(v4, "hmf_BOOLForKey:", *MEMORY[0x1E0D15E70]);
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543618;
      v16 = v9;
      v17 = 1024;
      v18 = v5;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@accessory server reachability via ping %d from accessory", (uint8_t *)&v15, 0x12u);

    }
    objc_autoreleasePoolPop(v6);
    if (v5)
      v10 = (_QWORD *)MEMORY[0x1E0D16160];
    else
      v10 = (_QWORD *)MEMORY[0x1E0D16158];
    objc_msgSend(MEMORY[0x1E0D16588], "postNotification:object:userInfo:", *v10, v7, 0);
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@ignoring reachability update - pings not enabled for accessory", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)_submitStateNumberChangeMetric
{
  void *v3;
  int v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  HMDHAPMetricsStateNumberChangeEvent *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[HMDAccessory home](self, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCurrentDevicePrimaryResident");

  if (v4)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@submitting state change metric for accessory", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v9 = -[HMDHAPMetricsStateNumberChangeEvent initWithAccessory:]([HMDHAPMetricsStateNumberChangeEvent alloc], "initWithAccessory:", v6);
    -[HMDAccessory submitLogEvent:](v6, "submitLogEvent:", v9);

  }
}

- (void)_submitReachabilityDelayedMetric:(id)a3
{
  uint64_t v4;
  id v5;
  void *v6;
  HMDHAPMetricsReachabilityTimerLateEvent *v7;
  id v8;

  v4 = *MEMORY[0x1E0D15E50];
  v5 = a3;
  objc_msgSend(v5, "hmf_numberForKey:", v4);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_numberForKey:", *MEMORY[0x1E0D15E58]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = -[HMDHAPMetricsReachabilityTimerLateEvent initWithAccessory:actualDuration:expectedDuration:]([HMDHAPMetricsReachabilityTimerLateEvent alloc], "initWithAccessory:actualDuration:expectedDuration:", self, v8, v6);
  -[HMDAccessory submitLogEvent:](self, "submitLogEvent:", v7);

}

- (void)indicateNotificationFromServer:(id)a3 notifyType:(unint64_t)a4 withDictionary:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  unint64_t v16;

  v8 = a3;
  v9 = a5;
  -[HMDAccessory workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __76__HMDHAPAccessory_indicateNotificationFromServer_notifyType_withDictionary___block_invoke;
  v13[3] = &unk_1E89BE790;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v16 = a4;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, v13);

}

- (void)_renameService:(id)a3 name:(id)a4 message:(id)a5 completionBlock:(id)a6
{
  id v10;
  id v11;
  id v12;
  void (**v13)(id, void *);
  uint64_t v14;
  void *v15;
  uint64_t v16;
  HMDServiceTransaction *v17;
  void *v18;
  void *v19;
  HMDServiceTransaction *v20;
  void *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  HMDHAPAccessory *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  HMDHAPAccessory *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  HMDServiceTransaction *v43;
  void *v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  id v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void (**)(id, void *))a6;
  -[HMDAccessory home](self, "home");
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)v14;
  if (!v10 || !v14)
  {
    v27 = (void *)MEMORY[0x1D17BA0A0]();
    v28 = self;
    HMFGetOSLogHandle();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v46 = v30;
      _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_ERROR, "%{public}@No service or home does not exist", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v27);
    v31 = (void *)MEMORY[0x1E0CB35C8];
    v32 = 2;
    goto LABEL_15;
  }
  if (!v11)
  {
    v31 = (void *)MEMORY[0x1E0CB35C8];
    v32 = 3;
LABEL_15:
    objc_msgSend(v31, "hmErrorWithCode:", v32);
    v16 = objc_claimAutoreleasedReturnValue();
    goto LABEL_16;
  }
  if (!objc_msgSend(v11, "length")
    || (objc_msgSend(v15, "validateName:", v11), (v16 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    v17 = [HMDServiceTransaction alloc];
    objc_msgSend(v10, "uuid");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory uuid](self, "uuid");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v17, "initWithObjectChangeType:uuid:parentUUID:", 2, v18, v19);

    objc_msgSend(v10, "findCharacteristicWithType:", *MEMORY[0x1E0CB8818]);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = v21;
    if (objc_msgSend(v21, "supportsWrite"))
    {
      v43 = v20;
      v22 = objc_msgSend(v11, "length");
      objc_msgSend(v21, "metadata");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "maxLength");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "unsignedIntegerValue");

      if (v22 > v25)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "respondWithError:", v26);
        if (v13)
          v13[2](v13, v26);

        v20 = v43;
        goto LABEL_27;
      }
      v35 = (void *)MEMORY[0x1D17BA0A0]();
      v36 = self;
      HMFGetOSLogHandle();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v46 = v38;
        v47 = 2112;
        v48 = v11;
        _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Setting expected configured name to %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v35);
      v20 = v43;
      -[HMDServiceTransaction setExpectedConfiguredName:](v43, "setExpectedConfiguredName:", v11);
      if (!v12)
        goto LABEL_25;
    }
    else
    {
      -[HMDServiceTransaction setName:](v20, "setName:", v11);
      if (!v12)
      {
LABEL_25:
        v34 = (id)*MEMORY[0x1E0CBABF0];
        goto LABEL_26;
      }
    }
    objc_msgSend(v12, "name");
    v34 = (id)objc_claimAutoreleasedReturnValue();
LABEL_26:
    v39 = v34;
    objc_msgSend(v15, "backingStore");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "transaction:options:", v39, v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v42, "add:withMessage:", v20, v12);
    objc_msgSend(v42, "run:", v13);

LABEL_27:
    goto LABEL_19;
  }
LABEL_16:
  v33 = (void *)v16;
  objc_msgSend(v12, "respondWithError:", v16);
  if (v13)
    v13[2](v13, v33);

LABEL_19:
}

- (void)_handleRenameService:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory home](self, "home");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("kServiceInstanceID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory services](self, "services");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_firstObjectWithInstanceID:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8 && v5)
  {
    objc_msgSend(v4, "stringForKey:", CFSTR("kServiceName"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = HMMaxLengthForNaming();
    if (objc_msgSend(v9, "length") <= v10)
    {
      -[HMDHAPAccessory _renameService:name:message:completionBlock:](self, "_renameService:name:message:completionBlock:", v8, v9, v4, 0);
    }
    else
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543362;
        v21 = v14;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v20, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 46);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v15);

    }
  }
  else
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v19;
      v22 = 2112;
      v23 = v6;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@No service matching instanceID %@ or home does not exist", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v9);
  }

}

- (void)_handleUpdateAssociatedServiceType:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDServiceTransaction *v12;
  void *v13;
  void *v14;
  HMDServiceTransaction *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHAPAccessory *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHAPAccessory *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDServiceTransaction *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD v40[5];
  id v41;
  id v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kServiceType"));
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v44 = v8;
    v45 = 2112;
    v46 = v39;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling update associated service type: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "numberForKey:", CFSTR("kServiceInstanceID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory services](v6, "services");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "hmf_firstObjectWithInstanceID:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v12 = [HMDServiceTransaction alloc];
    objc_msgSend(v11, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory uuid](v6, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v12, "initWithObjectChangeType:uuid:parentUUID:", 2, v13, v14);

    -[HMDHAPAccessory hapMetadata](v6, "hapMetadata");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "serviceType");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "validateAssociatedServiceType:forService:", v39, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = v6;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v38 = v18;
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "serviceType");
        v23 = v19;
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v44 = v22;
        v45 = 2112;
        v46 = v39;
        v47 = 2112;
        v48 = v24;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Failed to validate associated service type: %@, for service: %@", buf, 0x20u);

        v19 = v23;
        v18 = v38;
      }

      objc_autoreleasePoolPop(v19);
      objc_msgSend(v4, "respondWithError:", v18);
    }
    else
    {
      -[HMDServiceTransaction setAssociatedServiceType:](v15, "setAssociatedServiceType:", v39);
      -[HMDAccessory home](v6, "home");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "backingStore");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v31 = v15;
      v32 = v4;
      v33 = v16;
      v34 = v9;
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "transaction:options:", v30, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      v9 = v34;
      v16 = v33;
      v4 = v32;
      v15 = v31;

      v18 = 0;
      objc_msgSend(v36, "add:", v31);
      v40[0] = MEMORY[0x1E0C809B0];
      v40[1] = 3221225472;
      v40[2] = __54__HMDHAPAccessory__handleUpdateAssociatedServiceType___block_invoke;
      v40[3] = &unk_1E89C0DA8;
      v40[4] = v6;
      v41 = v4;
      v42 = v11;
      objc_msgSend(v36, "run:", v40);

    }
  }
  else
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = v6;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v44 = v28;
      v45 = 2112;
      v46 = v9;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@No service matching instanceID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v15 = (HMDServiceTransaction *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v15);
  }

}

- (id)characteristicWithAuthorizationDataMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  id v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHAPAccessory *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHAPAccessory *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHAPAccessory *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "numberForKey:", CFSTR("kServiceInstanceID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHAPAccessory findService:](self, "findService:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(v4, "numberForKey:", CFSTR("kCharacteristicInstanceID"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
      {
        objc_msgSend(v6, "findCharacteristic:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          -[HMDHAPAccessory hapMetadata](self, "hapMetadata");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v8, "properties") & 0x10) != 0
            || (objc_msgSend(v8, "type"),
                v10 = (void *)objc_claimAutoreleasedReturnValue(),
                objc_msgSend(v6, "type"),
                v11 = (void *)objc_claimAutoreleasedReturnValue(),
                v12 = objc_msgSend(v9, "supportsAuthorizationData:forService:", v10, v11),
                v11,
                v10,
                (v12 & 1) != 0))
          {
            v13 = v8;
          }
          else
          {
            v36 = (void *)MEMORY[0x1D17BA0A0]();
            v37 = self;
            HMFGetOSLogHandle();
            v38 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "shortDescription");
              v42 = v36;
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v44 = v39;
              v45 = 2112;
              v46 = v40;
              v47 = 2112;
              v48 = v8;
              _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_ERROR, "%{public}@Not handling update authorization data message: %@ because characteristic: %@ doesn't support authorization data", buf, 0x20u);

              v36 = v42;
            }

            objc_autoreleasePoolPop(v36);
            v13 = 0;
          }

        }
        else
        {
          v31 = (void *)MEMORY[0x1D17BA0A0]();
          v32 = self;
          HMFGetOSLogHandle();
          v33 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "shortDescription");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v44 = v34;
            v45 = 2112;
            v46 = v35;
            v47 = 2112;
            v48 = v7;
            v49 = 2112;
            v50 = v6;
            _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_ERROR, "%{public}@Not handling update authorization data message: %@, characteristic with instance ID: %@ does not exist for service: %@", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v31);
          v13 = 0;
        }

      }
      else
      {
        v25 = (void *)MEMORY[0x1D17BA0A0]();
        v26 = self;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "shortDescription");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "messagePayload");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v44 = v28;
          v45 = 2112;
          v46 = v29;
          v47 = 2112;
          v48 = 0;
          v49 = 2112;
          v50 = v30;
          _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Not handling update authorization data message: %@, missing characteristic ID key: %@ message payload: %@", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v25);
        v13 = 0;
      }

    }
    else
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "shortDescription");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v44 = v23;
        v45 = 2112;
        v46 = v24;
        v47 = 2112;
        v48 = v5;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Not handling update authorization data message: %@, service with instance ID does not exist: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v20);
      v13 = 0;
    }

  }
  else
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "shortDescription");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v44 = v17;
      v45 = 2112;
      v46 = v18;
      v47 = 2112;
      v48 = 0;
      v49 = 2112;
      v50 = v19;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Not handling update authorization data message: %@, missing service ID key: %@ message payload: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v14);
    v13 = 0;
  }

  return v13;
}

- (void)_handleUpdateCharacteristicAuthorizationDataMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  HMDHAPAccessory *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  const __CFString *v29;
  void *v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "isRemote") && (objc_msgSend(v4, "isSecureRemote") & 1) == 0)
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v15;
      v33 = 2112;
      v34 = v4;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v5);
  }
  else
  {
    objc_msgSend(v4, "dataForKey:", CFSTR("kAuthorizationDataKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      -[HMDHAPAccessory characteristicWithAuthorizationDataMessage:](self, "characteristicWithAuthorizationDataMessage:", v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        v29 = CFSTR("kCharacteristicAuthDataPresentKey");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v5, "length") != 0);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = v7;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v6, "authorizationData");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "isEqual:", v5);

        if (v10)
        {
          objc_msgSend(v4, "respondWithPayload:", v8);
        }
        else
        {
          objc_msgSend(v6, "setAuthorizationData:", v5);
          objc_msgSend(v6, "service");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory home](self, "home");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v17, "isOwnerUser"))
          {
            objc_msgSend(v24, "modelObjectWithChangeType:", 2);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "backingStore");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "name");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "transaction:options:", v19, v20);
            v21 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v21, "add:", v23);
            objc_initWeak((id *)buf, self);
            v25[0] = MEMORY[0x1E0C809B0];
            v25[1] = 3221225472;
            v25[2] = __71__HMDHAPAccessory__handleUpdateCharacteristicAuthorizationDataMessage___block_invoke;
            v25[3] = &unk_1E89BCB20;
            objc_copyWeak(&v28, (id *)buf);
            v26 = v4;
            v22 = v23;
            v27 = v22;
            objc_msgSend(v21, "save:", v25);

            objc_destroyWeak(&v28);
            objc_destroyWeak((id *)buf);
          }
          else
          {
            objc_msgSend(v17, "setWatchSkipVersionCheck:", 1);
            objc_msgSend(v4, "name");
            v22 = (id)objc_claimAutoreleasedReturnValue();
            +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "saveSharedHomeToAccountWithReason:postSyncNotification:options:", v22, 0, v21);
          }

          objc_msgSend(v4, "respondWithPayload:", v8);
        }

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v16);

      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v11);

      v5 = 0;
    }
  }

}

- (BOOL)supportsIdentify
{
  return 1;
}

- (void)handleIdentifyAccessoryMessage:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHAPAccessory *v18;
  NSObject *v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[4];
  id v28;
  id v29;
  uint8_t v30[128];
  uint8_t buf[4];
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHAPAccessory isPaired](self, "isPaired"))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v32 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Identify by writing to characteristic", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHAPAccessory findCharacteristicType:forServiceType:](v6, "findCharacteristicType:forServiceType:", *MEMORY[0x1E0D15F68], *MEMORY[0x1E0D16198]);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_initWeak((id *)buf, v6);
    -[HMDAccessory workQueue](v6, "workQueue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = __50__HMDHAPAccessory_handleIdentifyAccessoryMessage___block_invoke;
    v27[3] = &unk_1E89BF250;
    objc_copyWeak(&v29, (id *)buf);
    v28 = v4;
    -[HMDHAPAccessory writeValue:toCharacteristic:queue:completion:](v6, "writeValue:toCharacteristic:queue:completion:", MEMORY[0x1E0C9AAB0], v9, v10, v27);

    objc_destroyWeak(&v29);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    -[HMDHAPAccessory getPrimaryHAPAccessories](self, "getPrimaryHAPAccessories");
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v9 = (id)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v30, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v24;
      while (2)
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v24 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
          objc_msgSend(v14, "server");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          if (v15 && objc_msgSend(v14, "isReachable"))
          {
            v17 = (void *)MEMORY[0x1D17BA0A0]();
            v18 = self;
            HMFGetOSLogHandle();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v32 = v20;
              _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Identify by /identify URL or unpaired BTLE characteristic write", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v17);
            v21[0] = MEMORY[0x1E0C809B0];
            v21[1] = 3221225472;
            v21[2] = __50__HMDHAPAccessory_handleIdentifyAccessoryMessage___block_invoke_545;
            v21[3] = &unk_1E89C21C0;
            v21[4] = v18;
            v22 = v4;
            objc_msgSend(v15, "identifyWithCompletion:", v21);

            v16 = v9;
            goto LABEL_18;
          }

        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v30, 16);
        if (v11)
          continue;
        break;
      }
    }

    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v16);
LABEL_18:

  }
}

- (void)_handleDiscoveryBackoffTimerFired
{
  void *v3;
  HMDHAPAccessory *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _BYTE v12[12];
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory backedOffStateNumber](v4, "backedOffStateNumber");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v12 = 138543618;
    *(_QWORD *)&v12[4] = v6;
    v13 = 2112;
    v14 = v7;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Discovery back off timer fired for state number %@ retrieving", v12, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  if (-[HMDAccessory resetOnBackoffExpiry](v4, "resetOnBackoffExpiry"))
  {
    -[HMDAccessory setLastPairingFailureTime:](v4, "setLastPairingFailureTime:", 0.0);
    -[HMDAccessory setConsecutivePairingFailures:](v4, "setConsecutivePairingFailures:", 0);
    -[HMDAccessory setResetOnBackoffExpiry:](v4, "setResetOnBackoffExpiry:", 0);
  }
  *(_QWORD *)v12 = 0;
  v8 = -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](v4, "preferredHAPAccessoryForOperation:linkType:", 10, v12);
  -[HMDAccessory home](v4, "home");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)v12;
  -[HMDAccessory workQueue](v4, "workQueue");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "retrieveHAPAccessoryForHMDAccessory:linkType:forceRetrieve:queue:completion:", v4, v10, 1, v11, 0);

  -[HMDHAPAccessory setAccessoryDiscoveryBackoffTimer:](v4, "setAccessoryDiscoveryBackoffTimer:", 0);
  -[HMDHAPAccessory setBackedOffStateNumber:](v4, "setBackedOffStateNumber:", 0);
}

- (void)backOffAccessoryForStateNumber:(id)a3 backoffPeriod:(double)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  double v11;

  v6 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __64__HMDHAPAccessory_backOffAccessoryForStateNumber_backoffPeriod___block_invoke;
  block[3] = &unk_1E89BE2F0;
  block[4] = self;
  v10 = v6;
  v11 = a4;
  v8 = v6;
  dispatch_async(v7, block);

}

- (void)_removeBackedoffAccessoryForStateNumber:(id)a3
{
  void *v4;
  void *v5;

  -[HMDHAPAccessory accessoryDiscoveryBackoffTimer](self, "accessoryDiscoveryBackoffTimer", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[HMDHAPAccessory accessoryDiscoveryBackoffTimer](self, "accessoryDiscoveryBackoffTimer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "suspend");

  }
  -[HMDHAPAccessory setAccessoryDiscoveryBackoffTimer:](self, "setAccessoryDiscoveryBackoffTimer:", 0);
  -[HMDHAPAccessory setBackedOffStateNumber:](self, "setBackedOffStateNumber:", 0);
}

- (void)_handleKeyRefreshTimerFired
{
  void *v3;
  HMDHAPAccessory *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory keyUpdatedStateNumber](v4, "keyUpdatedStateNumber");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory keyUpdatedTime](v4, "keyUpdatedTime");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138544130;
    v20 = v6;
    v21 = 2112;
    v22 = v7;
    v23 = 2112;
    v24 = v8;
    v25 = 2048;
    v26 = (double)(unint64_t)broadcastKeyRefreshTimeInSeconds;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Key Refresh timer fired, last updated state number: %@ last updated time: %@, update Interval: %f", (uint8_t *)&v19, 0x2Au);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHAPAccessory keyUpdatedTime](v4, "keyUpdatedTime");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "timeIntervalSinceNow");
  v11 = fabs(v10);
  v12 = (double)(unint64_t)broadcastKeyRefreshTimeInSeconds * 0.5;

  if (v11 >= v12)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = v4;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543362;
      v20 = v17;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Retrieving for key refresh", (uint8_t *)&v19, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    -[HMDHAPAccessory setKeyGenerationType:](v15, "setKeyGenerationType:", 1);
    -[HMDAccessory home](v15, "home");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory workQueue](v15, "workQueue");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "retrieveHAPAccessoryForHMDAccessory:linkType:forceRetrieve:queue:completion:", v15, 2, 0, v18, &__block_literal_global_548);

  }
  else
  {
    -[HMDHAPAccessory accessoryKeyRefreshTimer](v4, "accessoryKeyRefreshTimer");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "resume");
  }

}

- (void)_handleConfigureTargets:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[HMDHAPAccessory targetControllerManager](self, "targetControllerManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __43__HMDHAPAccessory__handleConfigureTargets___block_invoke;
    v12[3] = &unk_1E89C0E20;
    v12[4] = self;
    objc_msgSend(v6, "handleConfigureTargets:responseHandler:", v7, v12);

  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v14 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@No target controller manager to handle configuring targets", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v6);
  }

}

- (void)associateWithAccessoryAdvertisement:(id)a3
{
  HMDAccessoryAdvertisement *v4;
  HMDAccessoryAdvertisement *accessoryAdvertisement;

  v4 = (HMDAccessoryAdvertisement *)a3;
  os_unfair_recursive_lock_lock_with_options();
  accessoryAdvertisement = self->_accessoryAdvertisement;
  self->_accessoryAdvertisement = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDAccessoryAdvertisement)accessoryAdvertisement
{
  HMDAccessoryAdvertisement *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_accessoryAdvertisement;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)addAdvertisement:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  objc_super v9;
  uint8_t buf[4];
  void *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  HMDHAPAccessory *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v11 = v8;
    v12 = 2112;
    v13 = v4;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Adding advertisement: %@ to accessory: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  v9.receiver = v6;
  v9.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory addAdvertisement:](&v9, sel_addAdvertisement_, v4);
  if (v4)
    -[HMDHAPAccessory associateWithAccessoryAdvertisement:](v6, "associateWithAccessoryAdvertisement:", v4);

}

- (void)removeAdvertisement:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  objc_super v9;
  uint8_t buf[4];
  void *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  HMDHAPAccessory *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v11 = v8;
    v12 = 2112;
    v13 = v4;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Removing advertisement: %@ from accessory: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  v9.receiver = v6;
  v9.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory removeAdvertisement:](&v9, sel_removeAdvertisement_, v4);
  if (v4)
    -[HMDHAPAccessory associateWithAccessoryAdvertisement:](v6, "associateWithAccessoryAdvertisement:", 0);

}

- (HMDDoorbellChimeController)doorbellChimeController
{
  HMDDoorbellChimeController *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_doorbellChimeController;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setDoorbellChimeController:(id)a3
{
  HMDDoorbellChimeController *v4;
  HMDDoorbellChimeController *doorbellChimeController;

  v4 = (HMDDoorbellChimeController *)a3;
  os_unfair_recursive_lock_lock_with_options();
  doorbellChimeController = self->_doorbellChimeController;
  self->_doorbellChimeController = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDWiFiManagementController)wiFiManagementController
{
  HMDWiFiManagementController *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_wiFiManagementController;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setWiFiManagementController:(id)a3
{
  HMDWiFiManagementController *v4;
  HMDWiFiManagementController *wiFiManagementController;

  v4 = (HMDWiFiManagementController *)a3;
  os_unfair_recursive_lock_lock_with_options();
  wiFiManagementController = self->_wiFiManagementController;
  self->_wiFiManagementController = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)setWiFiTransportCapabilities:(id)a3
{
  NSNumber *v4;
  NSNumber *wiFiTransportCapabilities;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  v4 = (NSNumber *)objc_msgSend(v6, "copy");
  wiFiTransportCapabilities = self->_wiFiTransportCapabilities;
  self->_wiFiTransportCapabilities = v4;

  os_unfair_recursive_lock_unlock();
}

- (BOOL)supportsWiFiReconfiguration
{
  void *v2;
  char v3;

  -[HMDHAPAccessory wiFiManagementController](self, "wiFiManagementController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportsStationConfiguration");

  return v3;
}

- (BOOL)supportsSoftwareUpdate
{
  void *v2;
  BOOL v3;

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000236-0000-1000-8000-0026BB765291"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (void)_updateReachabilityMetric:(BOOL)a3 withDuration:(id)a4
{
  _BOOL8 v4;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v4 = a3;
  v18 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "linkType", (_QWORD)v13) == 1)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory _logServerReachabilityNotification:withDuration:withLinkType:](self, "_logServerReachabilityNotification:withDuration:withLinkType:", v4, v6, v12);

          goto LABEL_11;
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v9)
        continue;
      break;
    }
  }
LABEL_11:

}

- (void)handleMultipleCharacteristicsUpdated:(id)a3 message:(id)a4 completionQueue:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _QWORD block[5];
  id v20;
  id v21;
  id v22;
  id v23;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  -[HMDAccessory workQueue](self, "workQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __98__HMDHAPAccessory_handleMultipleCharacteristicsUpdated_message_completionQueue_completionHandler___block_invoke;
  block[3] = &unk_1E89C0598;
  block[4] = self;
  v20 = v10;
  v21 = v11;
  v22 = v12;
  v23 = v13;
  v15 = v13;
  v16 = v12;
  v17 = v11;
  v18 = v10;
  dispatch_async(v14, block);

}

- (void)_handleMultipleCharacteristicsUpdated:(id)a3 message:(id)a4 completionQueue:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  void *v15;
  HMDHAPAccessory *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMDHAPAccessory *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  BOOL v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  HMDHomeKitVersion *v30;
  id v31;
  char *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  HMDHAPAccessory *v42;
  uint64_t v43;
  BOOL v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  int v58;
  id v59;
  void *v60;
  void *v61;
  HMDHAPAccessory *v62;
  NSObject *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  HMDHAPAccessory *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  HMDHAPAccessory *v74;
  NSObject *v75;
  void *v76;
  void *v77;
  HMDHAPAccessory *v78;
  NSObject *v79;
  void *v80;
  void *v81;
  HMDCharacteristicValueUpdate *v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  void *v87;
  HMDHAPAccessory *v88;
  NSObject *v89;
  void *v90;
  void *v91;
  void *v92;
  int v93;
  int v94;
  void *v95;
  char v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  HMDCharacteristicValueUpdate *v102;
  void *v103;
  HMDCharacteristicValueUpdate *v104;
  void *v105;
  void *v106;
  void *v107;
  BOOL v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  HMDHAPAccessory *v114;
  NSObject *v115;
  void *v116;
  NSObject *v117;
  os_log_type_t v118;
  const char *v119;
  uint32_t v120;
  void *v121;
  int v122;
  void *v123;
  HMDHAPAccessory *v124;
  NSObject *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  char v131;
  void *v132;
  HMDHAPAccessory *v133;
  NSObject *v134;
  void *v135;
  void *v136;
  HMDHAPAccessory *v137;
  NSObject *v138;
  void *v139;
  id v140;
  void *v141;
  int v142;
  uint64_t v143;
  void *v144;
  HMDHAPAccessory *v145;
  NSObject *v146;
  void *v147;
  void *v148;
  void *v149;
  NSObject *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t i;
  void *v160;
  NSObject *v161;
  void (**v162)(_QWORD, _QWORD);
  void *v163;
  void (**v164)(_QWORD, _QWORD);
  NSObject *v165;
  id v166;
  char *v167;
  void *v168;
  uint64_t v169;
  char *v170;
  HMDHomeKitVersion *v171;
  void *v172;
  void *v173;
  uint64_t v174;
  void *v175;
  int v176;
  void *v177;
  void *v178;
  char v179;
  void *v180;
  char v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  id v188;
  int v189;
  HMDHAPAccessory *v190;
  void *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  id obj;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  uint64_t v202;
  _QWORD block[4];
  id v204;
  void (**v205)(_QWORD, _QWORD);
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  _QWORD aBlock[5];
  id v211;
  id v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  char v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint8_t v222[128];
  uint8_t buf[4];
  void *v224;
  __int16 v225;
  uint64_t v226;
  __int16 v227;
  uint64_t v228;
  __int16 v229;
  void *v230;
  __int16 v231;
  uint64_t v232;
  __int16 v233;
  void *v234;
  __int16 v235;
  void *v236;
  __int16 v237;
  void *v238;
  _BYTE v239[128];
  _BYTE v240[128];
  uint64_t v241;

  v241 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v188 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  v14 = objc_msgSend(v188, "setNumberStyle:", 1);
  v164 = (void (**)(_QWORD, _QWORD))v13;
  v165 = v12;
  if (v13)
  {
    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v192 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0](v14);
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v224 = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@*** modified characteristics will be skipped due to missing completion queue or handler", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    v192 = 0;
  }
  objc_msgSend(v11, "stringForKey:", CFSTR("kNotificationUpdateIdentifierKey"));
  v184 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)MEMORY[0x1D17BA0A0]();
  v20 = self;
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "isRemote");
    HMFBooleanToString();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v224 = v22;
    v225 = 2112;
    v226 = (uint64_t)v184;
    v227 = 2112;
    v228 = (uint64_t)v23;
    _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Received characteristics updated notification with identifier %@ from message with isRemote=%@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v19);
  v24 = -[HMDHAPAccessory isSecuritySessionOpen](v20, "isSecuritySessionOpen");
  objc_msgSend(v11, "destination");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v26 = v25;
  else
    v26 = 0;
  v27 = v26;

  -[HMDHAPAccessory hapMetadata](v20, "hapMetadata");
  v178 = (void *)objc_claimAutoreleasedReturnValue();
  v171 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("3.2"));
  v163 = v27;
  objc_msgSend(v27, "device");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v190 = v20;
  -[HMDAccessory home](v20, "home");
  v177 = (void *)objc_claimAutoreleasedReturnValue();
  v186 = v28;
  objc_msgSend(v28, "version");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("3.1"));
  v176 = objc_msgSend(v29, "isAtLeastVersion:", v30);

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v182 = (void *)objc_claimAutoreleasedReturnValue();
  v218 = 0u;
  v219 = 0u;
  v220 = 0u;
  v221 = 0u;
  v31 = v10;
  v32 = (char *)objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v218, v240, 16);
  if (v32)
  {
    v179 = 0;
    v175 = 0;
    v181 = !v24;
    v169 = *(_QWORD *)v219;
    v174 = *MEMORY[0x1E0D16218];
    v187 = v11;
    v166 = v31;
    do
    {
      v33 = 0;
      v167 = v32;
      do
      {
        if (*(_QWORD *)v219 != v169)
          objc_enumerationMutation(v31);
        v34 = *(void **)(*((_QWORD *)&v218 + 1) + 8 * (_QWORD)v33);
        objc_msgSend(v31, "hmf_dictionaryForKey:", v34);
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = v34;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v37 = v36;
        else
          v37 = 0;
        v38 = v37;

        v170 = v33;
        v39 = (void *)v35;
        if (v38)
        {
          v40 = v36;
        }
        else
        {
          objc_msgSend(v188, "numberFromString:", v36);
          v40 = (id)objc_claimAutoreleasedReturnValue();
        }
        v41 = v40;

        v42 = v190;
        -[HMDHAPAccessory findService:](v190, "findService:", v41);
        v43 = objc_claimAutoreleasedReturnValue();
        v185 = (void *)v43;
        if (v39)
          v44 = v43 == 0;
        else
          v44 = 1;
        v191 = v41;
        if (v44)
        {
          v45 = v170;
        }
        else
        {
          v217 = 0;
          -[HMDHAPAccessory transactionWithObjectChangeType:](v190, "transactionWithObjectChangeType:", 2);
          v183 = (void *)objc_claimAutoreleasedReturnValue();
          v213 = 0u;
          v214 = 0u;
          v215 = 0u;
          v216 = 0u;
          v168 = v39;
          obj = v39;
          v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v213, v239, 16);
          v194 = v46;
          if (v46)
          {
            v193 = *(_QWORD *)v214;
            do
            {
              v47 = 0;
              do
              {
                if (*(_QWORD *)v214 != v193)
                  objc_enumerationMutation(obj);
                v48 = *(id *)(*((_QWORD *)&v213 + 1) + 8 * v47);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v49 = v48;
                else
                  v49 = 0;
                v50 = v49;

                if (v50)
                {
                  v51 = v48;
                }
                else
                {
                  objc_msgSend(v188, "numberFromString:", v48);
                  v51 = (id)objc_claimAutoreleasedReturnValue();
                }
                v52 = v51;

                -[HMDHAPAccessory findCharacteristic:forService:](v42, "findCharacteristic:forService:", v52, v41);
                v53 = objc_claimAutoreleasedReturnValue();
                v54 = (void *)v53;
                if (v53)
                {
                  v201 = (void *)v53;
                  v196 = v52;
                  objc_msgSend(obj, "hmf_dictionaryForKey:", v48);
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v55, "objectForKey:", CFSTR("kCharacteristicValue"));
                  v202 = objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v55, "hmf_numberForKey:", CFSTR("kCharacteristicValueUpdateStateNumberKey"));
                  v198 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v55, "hmf_dateForKey:", CFSTR("kCharacteristicValueUpdateTime"));
                  v200 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v55, "errorFromDataForKey:", CFSTR("kCharacteristicErrorDataKey"));
                  v56 = objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v55, "hmf_dataForKey:", CFSTR("kCharacteristicNotificationContextKey"));
                  v199 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v55, "objectForKey:", CFSTR("kCharacteristicBroadcastValueUpdateKey"));
                  v57 = (void *)objc_claimAutoreleasedReturnValue();

                  v58 = objc_msgSend(v55, "hmf_BOOLForKey:", CFSTR("kCharacteristicBroadcastValueUpdateKey"));
                  v59 = objc_alloc(MEMORY[0x1E0CB3A28]);
                  objc_msgSend(v55, "hmf_stringForKey:", CFSTR("kCharacteristicAttributedUserUUIDKey"));
                  v60 = (void *)objc_claimAutoreleasedReturnValue();
                  v197 = (void *)objc_msgSend(v59, "initWithUUIDString:", v60);

                  v61 = (void *)MEMORY[0x1D17BA0A0]();
                  v62 = v42;
                  HMFGetOSLogHandle();
                  v63 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v64 = (void *)objc_claimAutoreleasedReturnValue();
                    HMFBooleanToString();
                    v65 = (void *)objc_claimAutoreleasedReturnValue();
                    HMFBooleanToString();
                    v189 = v58;
                    v66 = v47;
                    v67 = v57;
                    v68 = v55;
                    v69 = v62;
                    v70 = v56;
                    v71 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138545154;
                    v224 = v64;
                    v225 = 2112;
                    v226 = (uint64_t)v201;
                    v227 = 2112;
                    v228 = (uint64_t)v65;
                    v229 = 2112;
                    v230 = v199;
                    v231 = 2112;
                    v232 = v202;
                    v233 = 2112;
                    v234 = v200;
                    v235 = 2112;
                    v236 = v71;
                    v237 = 2112;
                    v238 = v197;
                    _os_log_impl(&dword_1CD062000, v63, OS_LOG_TYPE_INFO, "%{public}@Handling update notification for characteristic: %@ isSecuritySessionOpen: %@ notificationContext: %@ updatedValue: %@ valueUpdatedTime: %@ isBroadcast: %@ attributedUserUUID: %@", buf, 0x52u);

                    v56 = v70;
                    v62 = v69;
                    v55 = v68;
                    v57 = v67;
                    v47 = v66;
                    v58 = v189;

                  }
                  objc_autoreleasePoolPop(v61);
                  v54 = v201;
                  objc_msgSend(v201, "accessory");
                  v72 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v72, "setRemotelyReachable:", v56 == 0);

                  if (!(v202 | v56))
                  {
                    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
                    v56 = objc_claimAutoreleasedReturnValue();
                    v73 = (void *)MEMORY[0x1D17BA0A0]();
                    v74 = v62;
                    HMFGetOSLogHandle();
                    v75 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v76 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543618;
                      v224 = v76;
                      v225 = 2112;
                      v226 = v56;
                      _os_log_impl(&dword_1CD062000, v75, OS_LOG_TYPE_INFO, "%{public}@Nil updated value for characteristic, adding error: %@", buf, 0x16u);

                    }
                    objc_autoreleasePoolPop(v73);
                    v54 = v201;
                  }
                  if (v56)
                  {
                    v77 = (void *)MEMORY[0x1D17BA0A0]();
                    v78 = v62;
                    HMFGetOSLogHandle();
                    v79 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v80 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543874;
                      v224 = v80;
                      v225 = 2112;
                      v226 = (uint64_t)v54;
                      v227 = 2112;
                      v228 = v56;
                      _os_log_impl(&dword_1CD062000, v79, OS_LOG_TYPE_INFO, "%{public}@Received %@ update with error %@", buf, 0x20u);

                    }
                    objc_autoreleasePoolPop(v77);
                    v81 = (void *)v202;
                    if (v192)
                    {
                      v82 = -[HMDCharacteristicValueUpdate initWithError:]([HMDCharacteristicValueUpdate alloc], "initWithError:", v56);
                      objc_msgSend(v192, "setObject:forKey:", v82, v54);

                    }
                    v42 = v190;
                    v41 = v191;
                    v52 = v196;
                    v83 = (void *)v56;
                    v84 = v198;
                    goto LABEL_126;
                  }
                  if (objc_msgSend(v187, "isRemote"))
                  {
                    if (v198)
                    {
                      objc_msgSend(v54, "stateNumber");
                      v85 = (void *)objc_claimAutoreleasedReturnValue();
                      v86 = HAPCompareStateNumberWithRollover();

                      if (v86 == 1)
                      {
                        v87 = (void *)MEMORY[0x1D17BA0A0]();
                        v88 = v62;
                        HMFGetOSLogHandle();
                        v89 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
                        {
                          HMFGetLogIdentifier();
                          v90 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v54, "stateNumber");
                          v91 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)buf = 138544130;
                          v224 = v90;
                          v225 = 2112;
                          v226 = (uint64_t)v54;
                          v227 = 2112;
                          v228 = (uint64_t)v198;
                          v229 = 2112;
                          v230 = v91;
                          _os_log_impl(&dword_1CD062000, v89, OS_LOG_TYPE_INFO, "%{public}@Not adding %@ as state number:%@ is stale, current: %@", buf, 0x2Au);

                        }
                        objc_autoreleasePoolPop(v87);
                        v42 = v190;
                        v41 = v191;
                        v52 = v196;
                        v81 = (void *)v202;
LABEL_124:
                        v84 = v198;
LABEL_125:
                        v83 = 0;
LABEL_126:

                        goto LABEL_127;
                      }
                    }
                    if (v57)
                      v94 = v58;
                    else
                      v94 = 1;
                    v81 = (void *)v202;
                    if (v94 == 1)
                    {
                      objc_msgSend(v54, "value");
                      v95 = (void *)objc_claimAutoreleasedReturnValue();
                      if (+[HMDCharacteristic value:differentThan:](HMDCharacteristic, "value:differentThan:", v202, v95))
                      {

                        goto LABEL_67;
                      }
                      objc_msgSend(v54, "stateNumber");
                      v121 = (void *)objc_claimAutoreleasedReturnValue();
                      v122 = HMFEqualObjects();

                      if (!v198 || !v122)
                        goto LABEL_67;
                      v123 = (void *)MEMORY[0x1D17BA0A0]();
                      v124 = v62;
                      HMFGetOSLogHandle();
                      v125 = objc_claimAutoreleasedReturnValue();
                      v84 = v198;
                      if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        v126 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v54, "stateNumber");
                        v127 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138544130;
                        v224 = v126;
                        v225 = 2112;
                        v226 = (uint64_t)v54;
                        v227 = 2112;
                        v228 = (uint64_t)v198;
                        v229 = 2112;
                        v230 = v127;
                        _os_log_impl(&dword_1CD062000, v125, OS_LOG_TYPE_INFO, "%{public}@Not adding %@ as the value hasn't changed and state number:%@ is same, current: %@", buf, 0x2Au);

                      }
                      objc_autoreleasePoolPop(v123);
LABEL_113:
                      v42 = v190;
                      v41 = v191;
                      v52 = v196;
                      goto LABEL_125;
                    }
LABEL_67:
                    if (v198)
                      v96 = 1;
                    else
                      v96 = v181;
                    if ((v96 & 1) == 0)
                    {
                      if ((objc_msgSend(v177, "isResidentFirstAccessoryCommunicationEnabled") & 1) != 0)
                      {
LABEL_78:
                        if (((!-[HMDHAPAccessory hasBTLELink](v62, "hasBTLELink") | v176) & 1) != 0)
                          goto LABEL_80;
                        objc_msgSend(v54, "value");
                        v107 = (void *)objc_claimAutoreleasedReturnValue();
                        v108 = +[HMDCharacteristic value:differentThan:](HMDCharacteristic, "value:differentThan:", v202, v107);

                        if (v108)
                          goto LABEL_80;
                        v113 = (void *)MEMORY[0x1D17BA0A0]();
                        v114 = v62;
                        HMFGetOSLogHandle();
                        v150 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v150, OS_LOG_TYPE_INFO))
                        {
                          HMFGetLogIdentifier();
                          v151 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)buf = 138543362;
                          v224 = v151;
                          _os_log_impl(&dword_1CD062000, v150, OS_LOG_TYPE_INFO, "%{public}@Ignoring stale update from legacy BLE devices", buf, 0xCu);

                        }
                      }
                      else
                      {
                        v113 = (void *)MEMORY[0x1D17BA0A0]();
                        v114 = v62;
                        HMFGetOSLogHandle();
                        v115 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
                        {
                          HMFGetLogIdentifier();
                          v116 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)buf = 138543618;
                          v224 = v116;
                          v225 = 2112;
                          v226 = (uint64_t)v54;
                          v117 = v115;
                          v118 = OS_LOG_TYPE_DEFAULT;
                          v119 = "%{public}@Not adding %@ as we are currently connected to the accessory";
                          v120 = 22;
LABEL_92:
                          _os_log_impl(&dword_1CD062000, v117, v118, v119, buf, v120);

                        }
LABEL_93:

                      }
                      objc_autoreleasePoolPop(v113);
                      v42 = v190;
                      v41 = v191;
                      v52 = v196;
                      goto LABEL_124;
                    }
                    if (!v198)
                      goto LABEL_78;
LABEL_80:
                    objc_msgSend(v54, "characteristicType");
                    v109 = (void *)objc_claimAutoreleasedReturnValue();
                    if (objc_msgSend(v178, "shouldNotCacheCharacteristicOfType:", v109))
                    {
                      objc_msgSend(v185, "serviceType");
                      v110 = (void *)objc_claimAutoreleasedReturnValue();
                      if ((objc_msgSend(v110, "isEqualToString:", v174) & 1) != 0)
                      {
                        objc_msgSend(v186, "version");
                        v111 = (void *)objc_claimAutoreleasedReturnValue();
                        v112 = objc_msgSend(v111, "compare:", v171);

                        if (v112 == -1)
                        {
                          v113 = (void *)MEMORY[0x1D17BA0A0]();
                          v114 = v62;
                          HMFGetOSLogHandle();
                          v115 = objc_claimAutoreleasedReturnValue();
                          if (os_log_type_enabled(v115, OS_LOG_TYPE_INFO))
                          {
                            HMFGetLogIdentifier();
                            v116 = (void *)objc_claimAutoreleasedReturnValue();
                            *(_DWORD *)buf = 138544130;
                            v224 = v116;
                            v225 = 2112;
                            v226 = (uint64_t)v54;
                            v227 = 2112;
                            v228 = v202;
                            v229 = 2112;
                            v230 = v186;
                            v117 = v115;
                            v118 = OS_LOG_TYPE_INFO;
                            v119 = "%{public}@Dropping %@ value update %@ from pre-Erie device %@";
                            v120 = 42;
                            goto LABEL_92;
                          }
                          goto LABEL_93;
                        }
LABEL_96:
                        objc_msgSend(v54, "value");
                        v128 = (void *)objc_claimAutoreleasedReturnValue();
                        if (+[HMDCharacteristic value:differentThan:](HMDCharacteristic, "value:differentThan:", v202, v128))
                        {

                        }
                        else
                        {
                          -[HMDHAPAccessory hapMetadata](v62, "hapMetadata");
                          v129 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v54, "type");
                          v130 = (void *)objc_claimAutoreleasedReturnValue();
                          v131 = objc_msgSend(v129, "shouldNotCacheCharacteristicOfType:", v130);

                          if ((v131 & 1) == 0)
                          {
                            objc_msgSend(MEMORY[0x1E0C99E38], "null");
                            v141 = (void *)objc_claimAutoreleasedReturnValue();
                            v142 = objc_msgSend((id)v202, "isEqual:", v141);

                            if (v142)
                              v143 = 0;
                            else
                              v143 = v202;
                            v84 = v198;
                            v144 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v54, "updateValue:updatedTime:stateNumber:notificationContext:", v143, v200, v198, v199));
                            v145 = v62;
                            HMFGetOSLogHandle();
                            v146 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v146, OS_LOG_TYPE_INFO))
                            {
                              HMFGetLogIdentifier();
                              v147 = (void *)objc_claimAutoreleasedReturnValue();
                              *(_DWORD *)buf = 138543618;
                              v224 = v147;
                              v225 = 2112;
                              v226 = (uint64_t)v54;
                              _os_log_impl(&dword_1CD062000, v146, OS_LOG_TYPE_INFO, "%{public}@Ignoring same value updates for characteristics: %@ from remote", buf, 0x16u);

                            }
                            objc_autoreleasePoolPop(v144);
                            -[HMDAccessory identifier](v145, "identifier");
                            v148 = (void *)objc_claimAutoreleasedReturnValue();
                            -[HMDHAPAccessory _updateStateForTrackedAccessory:stateNumber:](v145, "_updateStateForTrackedAccessory:stateNumber:", v148, v198);

                            goto LABEL_113;
                          }
                        }
                        v132 = (void *)MEMORY[0x1D17BA0A0]();
                        v133 = v62;
                        HMFGetOSLogHandle();
                        v134 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v134, OS_LOG_TYPE_INFO))
                        {
                          HMFGetLogIdentifier();
                          v135 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)buf = 138543874;
                          v224 = v135;
                          v225 = 2112;
                          v226 = (uint64_t)v54;
                          v227 = 2112;
                          v228 = (uint64_t)v198;
                          _os_log_impl(&dword_1CD062000, v134, OS_LOG_TYPE_INFO, "%{public}@Adding %@ as the value or state number: %@ changed", buf, 0x20u);

                        }
                        objc_autoreleasePoolPop(v132);
                        if (v198)
                        {
                          v136 = (void *)MEMORY[0x1D17BA0A0]();
                          v137 = v133;
                          HMFGetOSLogHandle();
                          v138 = objc_claimAutoreleasedReturnValue();
                          v81 = (void *)v202;
                          if (os_log_type_enabled(v138, OS_LOG_TYPE_INFO))
                          {
                            HMFGetLogIdentifier();
                            v173 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v201, "value");
                            v172 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v201, "stateNumber");
                            v180 = v136;
                            v139 = (void *)objc_claimAutoreleasedReturnValue();
                            *(_DWORD *)buf = 138544642;
                            v224 = v173;
                            v225 = 2112;
                            v226 = (uint64_t)v201;
                            v81 = (void *)v202;
                            v227 = 2112;
                            v228 = (uint64_t)v172;
                            v229 = 2112;
                            v230 = v139;
                            v231 = 2112;
                            v232 = v202;
                            v233 = 2112;
                            v234 = v198;
                            _os_log_impl(&dword_1CD062000, v138, OS_LOG_TYPE_INFO, "%{public}@Value for characteristic %@ changed with updated state number from %@/%@ to %@/%@", buf, 0x3Eu);

                            v136 = v180;
                          }

                          objc_autoreleasePoolPop(v136);
                          if (HAPCompareStateNumberWithRollover() == 1)
                          {
                            v140 = v198;

                            v179 = 1;
                            v175 = v140;
                          }
                          else
                          {
                            v179 = 1;
                          }
                          v54 = v201;
                        }
                        else
                        {
                          v81 = (void *)v202;
                        }
                        -[HMDAccessory identifier](v133, "identifier");
                        v149 = (void *)objc_claimAutoreleasedReturnValue();
                        -[HMDHAPAccessory _updateStateForTrackedAccessory:stateNumber:](v133, "_updateStateForTrackedAccessory:stateNumber:", v149, v198);

                        if (!-[HMDHAPAccessory isClientRegisteredForNotifications](v133, "isClientRegisteredForNotifications")&& v198&& (v179 & 1) != 0)
                        {
                          -[HMDHAPAccessory _removeBackedoffAccessoryForStateNumber:](v133, "_removeBackedoffAccessoryForStateNumber:", v198);
                          v179 = 1;
                        }
LABEL_59:
                        objc_msgSend(MEMORY[0x1E0C99E38], "null");
                        v92 = (void *)objc_claimAutoreleasedReturnValue();
                        v93 = objc_msgSend(v81, "isEqual:", v92);

                        v84 = v198;
                        if (v93)
                        {
                          objc_msgSend(v54, "updateValue:updatedTime:stateNumber:notificationContext:", 0, v200, v198, v199);
                        }
                        else
                        {
                          objc_msgSend(v54, "updateValue:updatedTime:stateNumber:notificationContext:", v81, v200, v198, v199);
                          aBlock[0] = MEMORY[0x1E0C809B0];
                          aBlock[1] = 3221225472;
                          aBlock[2] = __99__HMDHAPAccessory__handleMultipleCharacteristicsUpdated_message_completionQueue_completionHandler___block_invoke;
                          aBlock[3] = &unk_1E89AB178;
                          aBlock[4] = v62;
                          v97 = v54;
                          v211 = v97;
                          v212 = v182;
                          v98 = _Block_copy(aBlock);
                          objc_msgSend(v97, "type");
                          v99 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v185, "type");
                          v100 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v185, "accessory");
                          v101 = (void *)objc_claimAutoreleasedReturnValue();
                          v81 = (void *)v202;
                          +[HMDService processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:](HMDService, "processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:", v99, v202, v100, v185, v98, v101, v183, &v217);

                        }
                        v42 = v190;
                        v52 = v196;
                        if (v192)
                        {
                          v102 = [HMDCharacteristicValueUpdate alloc];
                          objc_msgSend(v54, "value");
                          v103 = (void *)objc_claimAutoreleasedReturnValue();
                          v104 = -[HMDCharacteristicValueUpdate initWithValue:updateIdentifier:remoteDevice:](v102, "initWithValue:updateIdentifier:remoteDevice:", v103, v184, v186);

                          objc_msgSend(v54, "lastKnownValueUpdateTime");
                          v105 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v54, "stateNumber");
                          v106 = (void *)objc_claimAutoreleasedReturnValue();
                          -[HMDCharacteristicValueUpdate setValueUpdatedTime:stateNumber:](v104, "setValueUpdatedTime:stateNumber:", v105, v106);

                          objc_msgSend(v192, "setObject:forKey:", v104, v54);
                        }
                        v41 = v191;
                        goto LABEL_125;
                      }

                    }
                    goto LABEL_96;
                  }
                  v81 = (void *)v202;
                  goto LABEL_59;
                }
LABEL_127:

                ++v47;
              }
              while (v194 != v47);
              v194 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v213, v239, 16);
            }
            while (v194);
          }

          +[HMDBackingStoreTransactionOptions optionsWithSource:destination:mustReplay:mustPush:](HMDBackingStoreTransactionOptions, "optionsWithSource:destination:mustReplay:mustPush:", 0, 2, 1, 0);
          v152 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v177, "backingStore");
          v153 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v153, "transaction:options:", CFSTR("AccessoryUpdated"), v152);
          v154 = (void *)objc_claimAutoreleasedReturnValue();

          v208 = 0u;
          v209 = 0u;
          v206 = 0u;
          v207 = 0u;
          v155 = v182;
          v156 = objc_msgSend(v155, "countByEnumeratingWithState:objects:count:", &v206, v222, 16);
          if (v156)
          {
            v157 = v156;
            v158 = *(_QWORD *)v207;
            do
            {
              for (i = 0; i != v157; ++i)
              {
                if (*(_QWORD *)v207 != v158)
                  objc_enumerationMutation(v155);
                objc_msgSend(v155, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v206 + 1) + 8 * i));
                v160 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v154, "add:withMessage:", v160, 0);

              }
              v157 = objc_msgSend(v155, "countByEnumeratingWithState:objects:count:", &v206, v222, 16);
            }
            while (v157);
          }

          if (v217 && (objc_msgSend(v154, "add:withMessage:", v183, 0), v217) || objc_msgSend(v155, "count"))
            objc_msgSend(v154, "run");

          v11 = v187;
          v31 = v166;
          v32 = (char *)v167;
          v45 = v170;
          v39 = v168;
        }

        v33 = v45 + 1;
      }
      while (v33 != v32);
      v32 = (char *)objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v218, v240, 16);
    }
    while (v32);

    v162 = v164;
    v161 = v165;
    if ((v179 & 1) != 0)
    {
      v32 = (char *)v175;
      -[HMDHAPAccessory __updateNotifyingCharacteristicStateNumber:](v190, "__updateNotifyingCharacteristicStateNumber:", v175);
      objc_msgSend(v177, "saveToCurrentAccountWithReason:", CFSTR("kCharacteristicValueUpdateStateNumberKey"));
      if (!v164)
        goto LABEL_152;
    }
    else
    {
      v32 = (char *)v175;
      if (!v164)
        goto LABEL_152;
    }
  }
  else
  {

    v162 = v164;
    v161 = v165;
    if (!v164)
      goto LABEL_152;
  }
  if (v161)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __99__HMDHAPAccessory__handleMultipleCharacteristicsUpdated_message_completionQueue_completionHandler___block_invoke_2;
    block[3] = &unk_1E89C1D68;
    v205 = v162;
    v204 = v192;
    dispatch_async(v161, block);

  }
  else
  {
    ((void (**)(_QWORD, void *))v162)[2](v162, v192);
  }
LABEL_152:

}

- (void)notifyingCharacteristicStateNumberUpdated:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __61__HMDHAPAccessory_notifyingCharacteristicStateNumberUpdated___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)__updateNotifyingCharacteristicStateNumber:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  HMDHAPAccessory *v19;
  NSObject *v20;
  void *v21;
  id obj;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  HMDHAPAccessory *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  id v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  -[HMDHAPAccessory services](self, "services");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v42, 16);
  if (v24)
  {
    v23 = *(_QWORD *)v32;
    v26 = self;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v32 != v23)
          objc_enumerationMutation(obj);
        v25 = v5;
        v6 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * v5);
        v27 = 0u;
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        objc_msgSend(v6, "characteristics");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v41, 16);
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v28;
          do
          {
            for (i = 0; i != v9; ++i)
            {
              if (*(_QWORD *)v28 != v10)
                objc_enumerationMutation(v7);
              v12 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
              if (objc_msgSend(v12, "supportsNotification"))
              {
                objc_msgSend(v12, "stateNumber");
                v13 = (void *)objc_claimAutoreleasedReturnValue();
                v14 = HAPCompareStateNumberWithRollover();

                if (v14 == -1)
                {
                  v15 = objc_msgSend(v4, "unsignedIntegerValue");
                  objc_msgSend(v12, "stateNumber");
                  v16 = (void *)objc_claimAutoreleasedReturnValue();
                  v17 = v15 - objc_msgSend(v16, "unsignedIntegerValue");

                  if (v17 == 1)
                  {
                    v18 = (void *)MEMORY[0x1D17BA0A0]();
                    v19 = self;
                    HMFGetOSLogHandle();
                    v20 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v21 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543874;
                      v36 = v21;
                      v37 = 2112;
                      v38 = v4;
                      v39 = 2112;
                      v40 = v12;
                      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Updating state number to %@ for characteristic: %@", buf, 0x20u);

                      self = v26;
                    }

                    objc_autoreleasePoolPop(v18);
                    objc_msgSend(v12, "setStateNumber:", v4);
                  }
                }
              }
            }
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v41, 16);
          }
          while (v9);
        }

        v5 = v25 + 1;
      }
      while (v25 + 1 != v24);
      v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v42, 16);
    }
    while (v24);
  }

}

- (void)didUpdateConnectionState:(BOOL)a3 linkLayerType:(int64_t)a4 withError:(id)a5
{
  -[HMDHAPAccessory didUpdateConnectionState:sessionInfo:linkLayerType:bookkeeping:withError:](self, "didUpdateConnectionState:sessionInfo:linkLayerType:bookkeeping:withError:", a3, 0, a4, 0, a5);
}

- (void)didUpdateConnectionState:(BOOL)a3 sessionInfo:(id)a4 linkLayerType:(int64_t)a5 bookkeeping:(id)a6 withError:(id)a7
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[5];
  id v20;
  id v21;
  id v22;
  int64_t v23;
  BOOL v24;

  v12 = a4;
  v13 = a6;
  v14 = a7;
  -[HMDAccessory workQueue](self, "workQueue");
  v15 = objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __92__HMDHAPAccessory_didUpdateConnectionState_sessionInfo_linkLayerType_bookkeeping_withError___block_invoke;
  v19[3] = &unk_1E89C2708;
  v24 = a3;
  v22 = v14;
  v23 = a5;
  v19[4] = self;
  v20 = v12;
  v21 = v13;
  v16 = v14;
  v17 = v13;
  v18 = v12;
  dispatch_async(v15, v19);

}

- (void)accessory:(id)a3 didUpdateReachabilityState:(BOOL)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  BOOL v11;

  v6 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __56__HMDHAPAccessory_accessory_didUpdateReachabilityState___block_invoke;
  block[3] = &unk_1E89C0898;
  block[4] = self;
  v10 = v6;
  v11 = a4;
  v8 = v6;
  dispatch_async(v7, block);

}

- (BOOL)isNotificationEnabledForClientIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  BOOL v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  -[HMDHAPAccessory services](self, "services");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v25 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        objc_msgSend(v11, "characteristics", 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = (void *)objc_msgSend(v12, "copy");

        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v21;
          while (2)
          {
            for (j = 0; j != v15; ++j)
            {
              if (*(_QWORD *)v21 != v16)
                objc_enumerationMutation(v13);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * j), "isNotificationEnabledForClientIdentifier:", v4) & 1) != 0)
              {

                v18 = 1;
                goto LABEL_19;
              }
            }
            v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
            if (v15)
              continue;
            break;
          }
        }

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      v18 = 0;
    }
    while (v8);
  }
  else
  {
    v18 = 0;
  }
LABEL_19:

  return v18;
}

- (BOOL)isNonClientNotificationEnabled
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  BOOL v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[HMDHAPAccessory services](self, "services");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        objc_msgSend(v8, "characteristics", 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = (void *)objc_msgSend(v9, "copy");

        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v18;
          while (2)
          {
            for (j = 0; j != v12; ++j)
            {
              if (*(_QWORD *)v18 != v13)
                objc_enumerationMutation(v10);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * j), "isNonClientNotificationEnabled") & 1) != 0)
              {

                v15 = 1;
                goto LABEL_19;
              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
            if (v12)
              continue;
            break;
          }
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      v15 = 0;
    }
    while (v5);
  }
  else
  {
    v15 = 0;
  }
LABEL_19:

  return v15;
}

- (BOOL)isNotificationEnabled
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  BOOL v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[HMDHAPAccessory services](self, "services");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        objc_msgSend(v8, "characteristics", 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = (void *)objc_msgSend(v9, "copy");

        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v18;
          while (2)
          {
            for (j = 0; j != v12; ++j)
            {
              if (*(_QWORD *)v18 != v13)
                objc_enumerationMutation(v10);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * j), "isNotificationEnabled") & 1) != 0)
              {

                v15 = 1;
                goto LABEL_19;
              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
            if (v12)
              continue;
            break;
          }
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
      v15 = 0;
    }
    while (v5);
  }
  else
  {
    v15 = 0;
  }
LABEL_19:

  return v15;
}

- (BOOL)supportsPersonalRequests
{
  void *v2;
  BOOL v3;

  -[HMDHAPAccessory siriEndpointProfile](self, "siriEndpointProfile");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (id)dumpState
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  _BOOL4 v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  int64_t v15;
  void *v16;
  HMDHAPAccessory *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t k;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  unint64_t v49;
  __CFString *v50;
  __CFString *v51;
  const char *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  HMDHAPAccessory *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  int64_t v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  HMDHAPAccessory *v82;
  id obj;
  void *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  objc_super v97;
  _BYTE v98[128];
  _BYTE v99[128];
  _BYTE v100[128];
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v97.receiver = self;
  v97.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory dumpState](&v97, sel_dumpState);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "mutableCopy");

  -[HMDHAPAccessory identifiersForBridgedAccessories](self, "identifiersForBridgedAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  -[HMDHAPAccessory bridge](self, "bridge");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (!v7 || v6)
  {
    if (v7 || !v6)
    {
      if (v7)
        v10 = 1;
      else
        v10 = v6 != 0;
      if (v10)
        v9 = CFSTR("<unknown>");
      else
        v9 = CFSTR("standalone");
    }
    else
    {
      v9 = CFSTR("bridge");
    }
  }
  else
  {
    v9 = CFSTR("bridged");
  }
  v11 = *MEMORY[0x1E0D27F80];
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D27F80]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(v12, "mutableCopy");

  -[HMDHAPAccessory accessoryFlags](self, "accessoryFlags");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v82 = self;
  v15 = -[HMDHAPAccessory certificationStatus](self, "certificationStatus");
  -[HMDHAPAccessory sleepInterval](v82, "sleepInterval");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = v15;
  v17 = v82;
  objc_msgSend(v13, "appendFormat:", CFSTR(", type: %@, accessoryFlags: %@, certificationStatus: %tu, sleepInterval: %@"), v9, v14, v75, v16);

  v77 = v13;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v13, v11);
  -[HMDHAPAccessory identifiersForBridgedAccessories](v82, "identifiersForBridgedAccessories");
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = v8;
  if (objc_msgSend(v81, "count"))
  {
    v18 = v4;
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v81, "count"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v20 = v81;
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v93, v100, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v94;
      do
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_QWORD *)v94 != v23)
            objc_enumerationMutation(v20);
          v25 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(*(id *)(*((_QWORD *)&v93 + 1) + 8 * i), "UUIDString");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "stringWithFormat:", CFSTR("Bridged accessory identifier: %@"), v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "addObject:", v27);

        }
        v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v93, v100, 16);
      }
      while (v22);
    }

    v4 = v18;
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v19, *MEMORY[0x1E0D27E70]);

    v8 = v78;
    v17 = v82;
  }
  if (v8)
  {
    v28 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v8, "uuid");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "UUIDString");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "stringWithFormat:", CFSTR("Bridge accessory identifier: %@"), v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v31, *MEMORY[0x1E0D27E68]);

    v17 = v82;
  }
  -[HMDHAPAccessory services](v17, "services");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = (void *)objc_msgSend(v32, "copy");

  v80 = v33;
  if (objc_msgSend(v33, "count"))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v33, "count"));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v35 = v33;
    v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v89, v99, 16);
    if (v36)
    {
      v37 = v36;
      v38 = *(_QWORD *)v90;
      do
      {
        for (j = 0; j != v37; ++j)
        {
          if (*(_QWORD *)v90 != v38)
            objc_enumerationMutation(v35);
          objc_msgSend(*(id *)(*((_QWORD *)&v89 + 1) + 8 * j), "dumpState");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "addObject:", v40);

        }
        v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v89, v99, 16);
      }
      while (v37);
    }

    objc_msgSend(v4, "setObject:forKeyedSubscript:", v34, *MEMORY[0x1E0D27F60]);
    v17 = v82;
  }
  -[HMDHAPAccessory transportInformationInstances](v17, "transportInformationInstances");
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v79, "count"))
  {
    v76 = v4;
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v79, "count"));
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0u;
    obj = v79;
    v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v85, v98, 16);
    if (v41)
    {
      v42 = v41;
      v43 = *(_QWORD *)v86;
      do
      {
        for (k = 0; k != v42; ++k)
        {
          if (*(_QWORD *)v86 != v43)
            objc_enumerationMutation(obj);
          v45 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * k);
          v46 = (void *)MEMORY[0x1E0CB37A0];
          objc_msgSend(v45, "serverIdentifier");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "instanceID");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          v49 = objc_msgSend(v45, "linkType");
          v50 = CFSTR("Undefined");
          if (v49 <= 2)
            v50 = off_1E89ABEB0[v49];
          v51 = v50;
          if (objc_msgSend(v45, "isReachable"))
            v52 = "Yes";
          else
            v52 = "No";
          objc_msgSend(v45, "protocolVersion");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "stringWithFormat:", CFSTR("HAPAccessory server: %@, instanceID: %@, linkType: %@, Transport Reachable: %s, version: %@"), v47, v48, v51, v52, v53);
          v54 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v45, "hapAccessory");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "server");
          v56 = (void *)objc_claimAutoreleasedReturnValue();

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v57 = v56;
          else
            v57 = 0;
          v58 = v57;

          if (v58)
          {
            objc_msgSend(v58, "peerEndpointDescription");
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v54, "appendFormat:", CFSTR(", endpoint: %@"), v59);

          }
          v60 = (void *)objc_msgSend(v54, "copy");
          objc_msgSend(v84, "addObject:", v60);

        }
        v42 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v85, v98, 16);
      }
      while (v42);
    }

    v4 = v76;
    objc_msgSend(v76, "setObject:forKeyedSubscript:", v84, *MEMORY[0x1E0D27E50]);

    v8 = v78;
    v17 = v82;
  }
  -[HMDHAPAccessory setupHash](v17, "setupHash");
  v61 = (void *)objc_claimAutoreleasedReturnValue();

  if (v61)
  {
    -[HMDHAPAccessory setupHash](v17, "setupHash");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v62, *MEMORY[0x1E0D27E48]);

  }
  -[HMDHAPAccessory chipStorage](v17, "chipStorage");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v63, "debugDictionaryRepresentation");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v64, CFSTR("CHIP Accessory Storage"));

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v65 = v17;
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory matterNodeID](v65, "matterNodeID");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "setObject:forKeyedSubscript:", v67, CFSTR("Matter Accessory Node ID"));

  -[HMDHAPAccessory matterVendorID](v65, "matterVendorID");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "setObject:forKeyedSubscript:", v68, CFSTR("Matter Accessory Vendor ID"));

  -[HMDHAPAccessory matterProductID](v65, "matterProductID");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v66, "setObject:forKeyedSubscript:", v69, CFSTR("Matter Accessory Product ID"));

  v70 = (void *)objc_msgSend(v66, "copy");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v70, CFSTR("Matter Accessory Information"));

  -[HMDHAPAccessory accessoryMetric](v65, "accessoryMetric");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v71, "sessionMetric");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v72, "state");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v73, CFSTR("Accessory Session State"));

  return v4;
}

- (id)dumpSimpleState
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  _BOOL4 v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  __CFString *v27;
  __CFString *v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id obj;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  objc_super v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v42.receiver = self;
  v42.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory dumpSimpleState](&v42, sel_dumpSimpleState);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "mutableCopy");

  -[HMDHAPAccessory identifiersForBridgedAccessories](self, "identifiersForBridgedAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  -[HMDHAPAccessory bridge](self, "bridge");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (!v7 || v6)
  {
    if (v7 || !v6)
    {
      if (v7)
        v10 = 1;
      else
        v10 = v6 != 0;
      if (v10)
        v9 = CFSTR("<unknown>");
      else
        v9 = CFSTR("standalone");
    }
    else
    {
      v9 = CFSTR("bridge");
    }
  }
  else
  {
    v9 = CFSTR("bridged");
  }
  v11 = *MEMORY[0x1E0D27F80];
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D27F80]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(v12, "mutableCopy");

  -[HMDHAPAccessory connectivityInfo](self, "connectivityInfo");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory sleepInterval](self, "sleepInterval");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "appendFormat:", CFSTR("type: %@ connectivityInfo: %@, sleepInterval: %@"), v9, v14, v15);

  objc_msgSend(v4, "setObject:forKeyedSubscript:", v13, v11);
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v16, "count"))
  {
    v34 = v13;
    v35 = v8;
    v36 = v4;
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v16, "count"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v33 = v16;
    obj = v16;
    v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v39 != v20)
            objc_enumerationMutation(obj);
          v22 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
          v23 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(v22, "serverIdentifier");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "instanceID");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v22, "linkType");
          v27 = CFSTR("Undefined");
          if (v26 <= 2)
            v27 = off_1E89ABEB0[v26];
          v28 = v27;
          if (objc_msgSend(v22, "isReachable"))
            v29 = "Yes";
          else
            v29 = "No";
          objc_msgSend(v22, "protocolVersion");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "stringWithFormat:", CFSTR("HAPAccessory server: %@, instanceID: %@, linkType: %@, Transport Reachable: %s, version: %@"), v24, v25, v28, v29, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v17, "addObject:", v31);
        }
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
      }
      while (v19);
    }

    v4 = v36;
    objc_msgSend(v36, "setObject:forKeyedSubscript:", v17, *MEMORY[0x1E0D27E50]);

    v13 = v34;
    v8 = v35;
    v16 = v33;
  }

  return v4;
}

- (id)getOrCreateServiceUpdateTransactionForKey:(id)a3 fromDictionary:(id)a4
{
  id v6;
  id v7;
  HMDServiceTransaction *v8;
  HMDServiceTransaction *v9;
  void *v10;

  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "objectForKey:", v6);
  v8 = (HMDServiceTransaction *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v9 = [HMDServiceTransaction alloc];
    -[HMDAccessory uuid](self, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v9, "initWithObjectChangeType:uuid:parentUUID:", 2, v6, v10);

    objc_msgSend(v7, "setObject:forKey:", v8, v6);
  }

  return v8;
}

- (void)readInitialRequiredCharacteristicsForAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99DE8];
  -[HMDHAPAccessory services](self, "services");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  -[HMDHAPAccessory services](self, "services");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v26;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v26 != v10)
          objc_enumerationMutation(v8);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v11), "gatherRequiredReadRequestsForceReadFWVersion:", 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v12, "count"))
          objc_msgSend(v7, "addObjectsFromArray:", v12);

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    }
    while (v9);
  }

  v24 = 0;
  -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](self, "preferredHAPAccessoryForOperation:linkType:", 10, &v24);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "server");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
    v15 = -[HMDAccessory setConfigNumber:](self, "setConfigNumber:", objc_msgSend(v14, "configNumber"));
  v16 = (void *)MEMORY[0x1D17BA0A0](v15);
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v30 = v19;
    v31 = 2112;
    v32 = v7;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Reading initial required characteristics: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v16);
  if (objc_msgSend(v7, "count"))
  {
    objc_initWeak((id *)buf, v17);
    -[HMDAccessory workQueue](v17, "workQueue");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __66__HMDHAPAccessory_readInitialRequiredCharacteristicsForAccessory___block_invoke;
    v21[3] = &unk_1E89C1648;
    objc_copyWeak(&v23, (id *)buf);
    v22 = v4;
    -[HMDHAPAccessory readCharacteristicValues:source:message:queue:logEvent:completionHandler:](v17, "readCharacteristicValues:source:message:queue:logEvent:completionHandler:", v7, 7, 0, v20, 0, v21);

    objc_destroyWeak(&v23);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void (**v14)(_QWORD, _QWORD, _QWORD);
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  objc_super v29;
  _QWORD v30[4];
  id v31;
  objc_super v32;
  _QWORD aBlock[5];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = v9;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  if (v13)
  {
    v34 = 0;
    v35 = &v34;
    v36 = 0x3032000000;
    v37 = __Block_byref_object_copy__48424;
    v38 = __Block_byref_object_dispose__48425;
    v39 = 0;
    objc_msgSend(v10, "responseHandler");
    v14 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __62__HMDHAPAccessory_transactionObjectUpdated_newValues_message___block_invoke;
      aBlock[3] = &unk_1E89B1078;
      aBlock[4] = &v34;
      v15 = _Block_copy(aBlock);
      objc_msgSend(v10, "setResponseHandler:", v15);

    }
    v32.receiver = self;
    v32.super_class = (Class)HMDHAPAccessory;
    -[HMDAccessory transactionObjectUpdated:newValues:message:](&v32, sel_transactionObjectUpdated_newValues_message_, 0, v11, v10);
    __transactionAccessoryUpdated_48426(self, v13, v10);
    if (v14)
      v14[2](v14, v35[5], 0);

    _Block_object_dispose(&v34, 8);
  }
  else
  {
    v16 = v11;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v17 = v16;
    else
      v17 = 0;
    v18 = v17;

    if (v18)
    {
      objc_msgSend(v18, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory serviceWithUUID:](self, "serviceWithUUID:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v20)
        objc_msgSend(v20, "transactionObjectUpdated:newValues:message:", v8, v16, v10);
      else
        -[HMDHAPAccessory _handleAddServiceTransaction:message:](self, "_handleAddServiceTransaction:message:", v18, v10);

    }
    else
    {
      v21 = v16;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v22 = v21;
      else
        v22 = 0;
      v23 = v22;

      if (v23)
      {
        +[HMDUserManagementOperation auditUserManagementOperationAccessory:model:](HMDUserManagementOperation, "auditUserManagementOperationAccessory:model:", self, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        if (v24)
        {
          -[HMDAccessory home](self, "home");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "setDelegate:", v25);
          objc_msgSend(v25, "homeManager");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory identifier](self, "identifier");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v30[0] = MEMORY[0x1E0C809B0];
          v30[1] = 3221225472;
          v30[2] = __62__HMDHAPAccessory_transactionObjectUpdated_newValues_message___block_invoke_2;
          v30[3] = &unk_1E89C2350;
          v31 = v24;
          objc_msgSend(v26, "cleanupOperationsForAccessory:user:completion:", v27, 0, v30);

        }
        objc_msgSend(v10, "transactionResult");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "markChanged");

      }
      else
      {
        v29.receiver = self;
        v29.super_class = (Class)HMDHAPAccessory;
        -[HMDAccessory transactionObjectUpdated:newValues:message:](&v29, sel_transactionObjectUpdated_newValues_message_, v8, v21, v10);
        v24 = 0;
      }

    }
  }

}

- (BOOL)updateTransportInformation:(id)a3 localSource:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  HMDAccessoryTransportInformation *v22;
  char v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  id v30;
  id obj;
  HMDHAPAccessory *v32;
  char v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  _BYTE v52[128];
  _BYTE v53[128];
  uint64_t v54;

  v4 = a4;
  v54 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (!v4)
  {
    v23 = 0;
    goto LABEL_38;
  }
  v32 = self;
  -[HMDHAPAccessory transportInformationInstances](self, "transportInformationInstances");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = (void *)objc_msgSend(v7, "mutableCopy");

  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v30 = v6;
  obj = v6;
  v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v53, 16);
  if (!v36)
  {
    v33 = 0;
    goto LABEL_29;
  }
  v33 = 0;
  v34 = *(_QWORD *)v48;
  do
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v48 != v34)
        objc_enumerationMutation(obj);
      v37 = v8;
      v9 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * v8);
      objc_msgSend(v9, "hmf_stringForKey:", CFSTR("HM.serverIdentifier"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "hmf_numberForKey:", CFSTR("HM.instanceID"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "hmf_numberForKey:", CFSTR("linkType"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(v12, "integerValue");

      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v13 = v35;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v43, v52, 16);
      if (!v14)
      {
LABEL_20:

        goto LABEL_23;
      }
      v15 = v14;
      v16 = *(_QWORD *)v44;
LABEL_9:
      v17 = 0;
      while (1)
      {
        if (*(_QWORD *)v44 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * v17);
        objc_msgSend(v18, "serverIdentifier");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v19, "isEqualToString:", v10))
          goto LABEL_17;
        objc_msgSend(v18, "instanceID");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v20, "isEqual:", v11) & 1) == 0)
        {

LABEL_17:
          goto LABEL_18;
        }
        v21 = objc_msgSend(v18, "linkType");

        if (v21 == v38)
          break;
LABEL_18:
        if (v15 == ++v17)
        {
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v43, v52, 16);
          if (v15)
            goto LABEL_9;
          goto LABEL_20;
        }
      }
      v22 = v18;

      if (v22)
      {
        objc_msgSend(v13, "removeObject:", v22);
        goto LABEL_24;
      }
LABEL_23:
      v22 = -[HMDAccessoryTransportInformation initWithServerIdentifier:instanceID:linkType:]([HMDAccessoryTransportInformation alloc], "initWithServerIdentifier:instanceID:linkType:", v10, v11, v38);
      -[HMDHAPAccessory addTransportInformationInstance:](v32, "addTransportInformationInstance:", v22);
      v33 = 1;
LABEL_24:

      v8 = v37 + 1;
    }
    while (v37 + 1 != v36);
    v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v53, 16);
  }
  while (v36);
LABEL_29:

  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v24 = v35;
  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
  v6 = v30;
  v23 = v33;
  if (v25)
  {
    v26 = v25;
    v27 = *(_QWORD *)v40;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v40 != v27)
          objc_enumerationMutation(v24);
        -[HMDHAPAccessory removeTransportInformationInstance:](v32, "removeTransportInformationInstance:", *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * i));
      }
      v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
    }
    while (v26);
    v23 = 1;
  }

LABEL_38:
  return v23 & 1;
}

- (void)transactionObjectRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  char isKindOfClass;
  void *v12;
  void *v13;
  void *v14;
  objc_super v15;

  v6 = a3;
  v7 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v6;
  else
    v8 = 0;
  v9 = v8;
  if (v9)
  {
    -[HMDHAPAccessory _handleServiceRemovedTransaction:message:](self, "_handleServiceRemovedTransaction:message:", v9, v7);
  }
  else
  {
    v10 = v6;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if (v10 && (isKindOfClass & 1) != 0)
    {
      objc_msgSend(v7, "transactionResult");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "removeOperationWithIdentifier:", v14);

      objc_msgSend(v12, "markChanged");
    }
    else
    {
      v15.receiver = self;
      v15.super_class = (Class)HMDHAPAccessory;
      -[HMDAccessory transactionObjectRemoved:message:](&v15, sel_transactionObjectRemoved_message_, v10, v7);
    }
  }

}

- (id)backingStoreObjects:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  objc_super v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1E0C99DE8];
  -[HMDHAPAccessory modelObjectWithChangeType:version:](self, "modelObjectWithChangeType:version:", 1, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "arrayWithObject:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (a3 >= 3)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    -[HMDHAPAccessory services](self, "services");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v18;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v18 != v11)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v12), "backingStoreObjects:", a3);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "addObjectsFromArray:", v13);

          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v10);
    }

  }
  v16.receiver = self;
  v16.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory backingStoreObjects:](&v16, sel_backingStoreObjects_, a3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObjectsFromArray:", v14);

  return v7;
}

- (id)messageReceiverChildren
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  objc_super v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend((id)-[HMDHAPAccessory superclass](self, "superclass"), "instancesRespondToSelector:", sel_messageReceiverChildren))
  {
    v18.receiver = self;
    v18.super_class = (Class)HMDHAPAccessory;
    -[HMDAccessory messageReceiverChildren](&v18, sel_messageReceiverChildren);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)objc_msgSend(v3, "mutableCopy");

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  -[HMDHAPAccessory services](self, "services");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObjectsFromArray:", v5);

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHAPAccessory cameraProfiles](self, "cameraProfiles", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v15;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v15 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v10), "messageReceiverChildren");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "unionSet:", v11);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    }
    while (v8);
  }

  v12 = (void *)objc_msgSend(v4, "copy");
  return v12;
}

- (void)makeServiceNameConsistent:(id)a3 withName:(id)a4 completionHandler:(id)a5
{
  id v8;
  __CFString *v9;
  id v10;
  __CFString *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  __CFString *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (__CFString *)a4;
  v10 = a5;
  v11 = &stru_1E89C3E38;
  if (v9)
    v11 = v9;
  v12 = v11;
  objc_msgSend(v8, "findCharacteristicWithType:", *MEMORY[0x1E0CB8818]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "serviceType");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "instanceID");
    v23 = v10;
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "instanceID");
    v22 = v14;
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v25 = v17;
    v26 = 2112;
    v27 = v9;
    v28 = 2112;
    v29 = v18;
    v30 = 2112;
    v31 = v19;
    v32 = 2112;
    v33 = v20;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Writing configured name %@ to service %@/%@ via (%@)", buf, 0x34u);

    v14 = v22;
    v10 = v23;

  }
  objc_autoreleasePoolPop(v14);
  -[HMDAccessory workQueue](v15, "workQueue");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory writeValue:toCharacteristic:queue:completion:](v15, "writeValue:toCharacteristic:queue:completion:", v12, v13, v21, v10);

}

- (id)createUpdateServiceTransactionWithServiceUUID:(id)a3
{
  id v4;
  HMDServiceTransaction *v5;
  void *v6;
  HMDServiceTransaction *v7;

  v4 = a3;
  v5 = [HMDServiceTransaction alloc];
  -[HMDAccessory uuid](self, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v5, "initWithObjectChangeType:uuid:parentUUID:", 2, v4, v6);

  return v7;
}

- (id)backingStoreTransactionWithName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a3;
  -[HMDAccessory home](self, "home");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "backingStore");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "transaction:options:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (HMDCameraProfileSettingsManager)cameraProfileSettingsManager
{
  HMDCameraProfileSettingsManager *cameraProfileSettingsManager;
  HMDCameraProfileSettingsManager *v4;
  void *v5;
  HMDCameraProfileSettingsManager *v6;
  HMDCameraProfileSettingsManager *v7;
  HMDCameraProfileSettingsManager *v8;

  os_unfair_recursive_lock_lock_with_options();
  cameraProfileSettingsManager = self->_cameraProfileSettingsManager;
  if (!cameraProfileSettingsManager)
  {
    v4 = [HMDCameraProfileSettingsManager alloc];
    -[HMDAccessory workQueue](self, "workQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[HMDCameraProfileSettingsManager initWithHAPAccessory:workQueue:](v4, "initWithHAPAccessory:workQueue:", self, v5);
    v7 = self->_cameraProfileSettingsManager;
    self->_cameraProfileSettingsManager = v6;

    cameraProfileSettingsManager = self->_cameraProfileSettingsManager;
  }
  v8 = cameraProfileSettingsManager;
  os_unfair_recursive_lock_unlock();
  return v8;
}

- (HMDAccessoryFirmwareUpdateProfile)firmwareUpdateProfile
{
  HMDAccessoryFirmwareUpdateProfile *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_firmwareUpdateProfile;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setFirmwareUpdateProfile:(id)a3
{
  HMDAccessoryFirmwareUpdateProfile *v4;
  HMDAccessoryFirmwareUpdateProfile *firmwareUpdateProfile;

  v4 = (HMDAccessoryFirmwareUpdateProfile *)a3;
  os_unfair_recursive_lock_lock_with_options();
  firmwareUpdateProfile = self->_firmwareUpdateProfile;
  self->_firmwareUpdateProfile = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)startReachabilityCheck
{
  void *v3;
  HMDHAPAccessory *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (-[HMDAccessory reachabilityPingEnabled](self, "reachabilityPingEnabled"))
  {
    -[HMDHAPAccessory startPing](self, "startPing");
  }
  else
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_ERROR, "%{public}@Attempting to start reachability check on accessory with pings disabled", (uint8_t *)&v7, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
}

- (BOOL)supportsUnreachablePing
{
  void *v3;
  void *v4;
  void *v5;
  char v6;

  -[HMDAccessory identifier](self, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:linkType:](self, "matchingHAPAccessoryWithServerIdentifier:linkType:", v3, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v4, "server");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "supportsUnreachablePing");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (NSNumber)internalThreadCapabilities
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_internalThreadCapabilities;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setInternalThreadCapabilities:(id)a3
{
  NSNumber *v4;
  NSNumber *internalThreadCapabilities;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  internalThreadCapabilities = self->_internalThreadCapabilities;
  self->_internalThreadCapabilities = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSNumber)internalThreadStatus
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_internalThreadStatus;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setInternalThreadStatus:(id)a3
{
  NSNumber *v4;
  NSNumber *internalThreadStatus;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  internalThreadStatus = self->_internalThreadStatus;
  self->_internalThreadStatus = v4;

  os_unfair_recursive_lock_unlock();
}

- (NSNumber)internalThreadActive
{
  NSNumber *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_internalThreadActive;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setInternalThreadActive:(id)a3
{
  NSNumber *v4;
  NSNumber *internalThreadActive;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  internalThreadActive = self->_internalThreadActive;
  self->_internalThreadActive = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)setHasOnboardedForNaturalLighting:(id)a3
{
  NSNumber *v4;
  NSNumber *hasOnboardedForNaturalLighting;
  id v6;

  v6 = a3;
  os_unfair_recursive_lock_lock_with_options();
  v4 = (NSNumber *)objc_msgSend(v6, "copy");
  hasOnboardedForNaturalLighting = self->_hasOnboardedForNaturalLighting;
  self->_hasOnboardedForNaturalLighting = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)setSuspendedState:(unint64_t)a3 shouldNotify:(BOOL)a4
{
  _BOOL4 v4;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  const __CFString *v16;
  _QWORD v17[2];

  v4 = a4;
  v17[1] = *MEMORY[0x1E0C80C00];
  os_unfair_recursive_lock_lock_with_options();
  if (self->_suspendedState != a3)
  {
    self->_suspendedState = a3;
    os_unfair_recursive_lock_unlock();
    -[HMDAccessory identifier](self, "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "server");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "primaryAccessory");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setSuspendedState:", a3);

    -[HMDHAPAccessory transactionWithObjectChangeType:](self, "transactionWithObjectChangeType:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setSuspendedState:", v12);

    -[HMDHAPAccessory _wol_runAccessoryTransaction:localOnly:](self, "_wol_runAccessoryTransaction:localOnly:", v11, 1);
    -[HMDAccessory home](self, "home");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "suspendedStateChangedForAccessory:suspendedState:", self, a3);

    if (!v4)
      return;
    goto LABEL_5;
  }
  os_unfair_recursive_lock_unlock();
  if (v4)
  {
LABEL_5:
    v16 = CFSTR("HMDHAPAccessorySuspendedStateKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = v14;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    logAndPostNotification(CFSTR("HMDHAPAccessoryUpdatedSuspendedState"), self, v15);

  }
}

- (void)setSuspendedState:(unint64_t)a3
{
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (-[HMDHAPAccessory suspendedState](self, "suspendedState") != a3)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      HAPAccessorySuspendedStateDescription();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      HAPAccessorySuspendedStateDescription();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory identifier](v6, "identifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138544130;
      v13 = v8;
      v14 = 2112;
      v15 = v9;
      v16 = 2112;
      v17 = v10;
      v18 = 2112;
      v19 = v11;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating accessory's suspended state '%@' -> '%@' for %@", (uint8_t *)&v12, 0x2Au);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHAPAccessory setSuspendedState:shouldNotify:](v6, "setSuspendedState:shouldNotify:", a3, 1);
  }
}

- (void)setReachableViaBSP:(BOOL)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_reachableViaBSP = a3;
  os_unfair_recursive_lock_unlock();
}

- (BOOL)isReachableViaBSP
{
  os_unfair_recursive_lock_lock_with_options();
  LOBYTE(self) = self->_reachableViaBSP;
  os_unfair_recursive_lock_unlock();
  return (char)self;
}

- (void)setWakingViaCharacteristicWithIID:(id)a3
{
  NSNumber *v4;
  NSNumber *wakingViaCharacteristicWithIID;

  v4 = (NSNumber *)a3;
  os_unfair_recursive_lock_lock_with_options();
  wakingViaCharacteristicWithIID = self->_wakingViaCharacteristicWithIID;
  self->_wakingViaCharacteristicWithIID = v4;

  os_unfair_recursive_lock_unlock();
}

- (HMDBulletinBoard)bulletinBoard
{
  HMDBulletinBoard *v3;

  os_unfair_recursive_lock_lock_with_options();
  v3 = self->_bulletinBoard;
  os_unfair_recursive_lock_unlock();
  return v3;
}

- (void)setBulletinBoard:(id)a3
{
  HMDBulletinBoard *v4;
  HMDBulletinBoard *bulletinBoard;

  v4 = (HMDBulletinBoard *)a3;
  os_unfair_recursive_lock_lock_with_options();
  bulletinBoard = self->_bulletinBoard;
  self->_bulletinBoard = v4;

  os_unfair_recursive_lock_unlock();
}

- (void)setCommunicationProtocol:(int64_t)a3
{
  os_unfair_recursive_lock_lock_with_options();
  self->_communicationProtocol = a3;
  os_unfair_recursive_lock_unlock();
}

- (void)setCommunicationProtocolIfNeeded
{
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!-[HMDHAPAccessory communicationProtocol](self, "communicationProtocol"))
  {
    -[HMDHAPAccessory matterNodeID](self, "matterNodeID");
    v3 = objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      v4 = (void *)v3;
      -[HMDHAPAccessory matterNodeID](self, "matterNodeID");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "isEqualToNumber:", &unk_1E8B32F10);

      if (v6)
        v7 = 1;
      else
        v7 = 2;
    }
    else
    {
      v7 = 1;
    }
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory communicationProtocol](v9, "communicationProtocol");
      HAPCommunicationProtocolDescription();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      HAPCommunicationProtocolDescription();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543874;
      v21 = v11;
      v22 = 2112;
      v23 = v12;
      v24 = 2112;
      v25 = v13;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Running transaction to set communication protocol from %@ to %@", (uint8_t *)&v20, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    -[HMDHAPAccessory transactionWithObjectChangeType:](v9, "transactionWithObjectChangeType:", 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setCommunicationProtocol:", v15);

    -[HMDAccessory home](v9, "home");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "backingStore");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    +[HMDBackingStoreTransactionOptions defaultLocalOptions](HMDBackingStoreTransactionOptions, "defaultLocalOptions");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "transaction:options:", CFSTR("Set communication protocol"), v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "add:", v14);
    objc_msgSend(v19, "run");

  }
}

- (void)handleSetHasOnboardedForNaturalLighting:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD v30[5];
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHAPAccessory lightProfiles](self, "lightProfiles");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "na_firstObjectPassingTest:", &__block_literal_global_621_48395);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v33 = v17;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Accessory does not have any light profile that supports natural lighting", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v18);
    goto LABEL_17;
  }
  -[HMDHAPAccessory hasOnboardedForNaturalLighting](self, "hasOnboardedForNaturalLighting");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  if (!v9)
  {
    -[HMDAccessory home](self, "home");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "backingStore");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = v22;
    if (v18)
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v33 = v24;
        _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Setting accessory has onboarded for natural lighting", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      -[HMDHAPAccessory transactionWithObjectChangeType:](v21, "transactionWithObjectChangeType:", 2);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "setHasOnboardedForNaturalLighting:", MEMORY[0x1E0C9AAB0]);
      objc_msgSend(v4, "name");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "transaction:options:", v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v28, "add:", v25);
      v30[0] = MEMORY[0x1E0C809B0];
      v30[1] = 3221225472;
      v30[2] = __59__HMDHAPAccessory_handleSetHasOnboardedForNaturalLighting___block_invoke_622;
      v30[3] = &unk_1E89C21C0;
      v30[4] = v21;
      v31 = v4;
      objc_msgSend(v28, "run:", v30);

    }
    else
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v33 = v29;
        v34 = 2112;
        v35 = v4;
        _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@No backing store while processing message: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v25);
    }

LABEL_17:
    goto LABEL_18;
  }
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v33 = v13;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Accessory has already been onboarded for natural lighting", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v10);
  objc_msgSend(v4, "respondWithSuccess");
LABEL_18:

}

- (void)startPing
{
  void *v3;
  HMDHAPAccessory *v4;
  NSObject *v5;
  void *v6;
  BOOL reachable;
  NSObject *v8;
  _QWORD v9[5];
  BOOL v10;
  uint8_t buf[4];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (-[HMDHAPAccessory supportsCHIP](self, "supportsCHIP"))
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v12 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Matter accessories are not eligible to enable reachability ping", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
  else
  {
    os_unfair_recursive_lock_lock_with_options();
    reachable = self->super._reachable;
    os_unfair_recursive_lock_unlock();
    -[HMDAccessory workQueue](self, "workQueue");
    v8 = objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __28__HMDHAPAccessory_startPing__block_invoke;
    v9[3] = &unk_1E89C2758;
    v9[4] = self;
    v10 = reachable;
    dispatch_async(v8, v9);

  }
}

- (void)stopPing
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __27__HMDHAPAccessory_stopPing__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (id)currentActiveSessionRestoreClients
{
  void *v3;
  void *v4;

  os_unfair_recursive_lock_lock_with_options();
  -[HMDHAPAccessory activeSessionRestoreClients](self, "activeSessionRestoreClients");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");

  os_unfair_recursive_lock_unlock();
  return v4;
}

- (void)registerForSessionRestore:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHAPAccessory_registerForSessionRestore___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_registerForSessionRestore:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v9;
    v18 = 2112;
    v19 = v4;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Session Restore registration for accessory for client %@", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  os_unfair_recursive_lock_lock_with_options();
  -[HMDHAPAccessory activeSessionRestoreClients](v7, "activeSessionRestoreClients");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addObject:", v4);

  os_unfair_recursive_lock_unlock();
  if (-[HMDAccessory isReachable](v7, "isReachable"))
  {
    -[HMDHAPAccessory _checkSession](v7, "_checkSession");
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = v7;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543362;
      v17 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Session Restore requested for currently unreachable accessory", (uint8_t *)&v16, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }
  v15 = HAPAccessoryServerSessionTypesFromString();
  if (v15)
    -[HMDHAPAccessory addSession:](v7, "addSession:", v15);
  -[HMDHAPAccessory _startSessionMonitor](v7, "_startSessionMonitor", v15);

}

- (void)_deregisterFromSessionRestore:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  HMDHAPAccessory *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory currentActiveSessionRestoreClients](v7, "currentActiveSessionRestoreClients");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543874;
    v23 = v9;
    v24 = 2112;
    v25 = v4;
    v26 = 2048;
    v27 = objc_msgSend(v10, "count");
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Session Restore deregistration for accessory for client %@ count %lu", (uint8_t *)&v22, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  os_unfair_recursive_lock_lock_with_options();
  -[HMDHAPAccessory activeSessionRestoreClients](v7, "activeSessionRestoreClients");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "count") == 0;

  if (v12)
  {
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    -[HMDHAPAccessory activeSessionRestoreClients](v7, "activeSessionRestoreClients");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "removeObject:", v4);

    os_unfair_recursive_lock_unlock();
    v14 = HAPAccessoryServerSessionTypesFromString();
    if (v14)
      -[HMDHAPAccessory removeSession:](v7, "removeSession:", v14);
    -[HMDHAPAccessory currentActiveSessionRestoreClients](v7, "currentActiveSessionRestoreClients", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "count") == 0;

    if (v16)
    {
      -[HMDHAPAccessory _stopSessionMonitor](v7, "_stopSessionMonitor");
    }
    else
    {
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = v7;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory currentActiveSessionRestoreClients](v18, "currentActiveSessionRestoreClients");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138543618;
        v23 = v20;
        v24 = 2112;
        v25 = v21;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Session Restore continuing to monitor accessory as with registered clients %@", (uint8_t *)&v22, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
    }
  }

}

- (double)sessionCheckPeriod
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  uint64_t v10;

  objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferenceForKey:", CFSTR("HMDPreferenceSessionCheckPeriod"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberValue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = 0;
  -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](self, "preferredHAPAccessoryForOperation:linkType:", 10, &v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "server");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v7, "doesPeriodicSessionChecks"))
    v8 = (double)(unint64_t)objc_msgSend(v7, "sessionCheckInterval");
  else
    v8 = (double)objc_msgSend(v5, "integerValue");

  return v8;
}

- (void)_deregisterAllClientsFromSessionRestore
{
  void *v3;
  HMDHAPAccessory *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Session Restore deregistering all clients", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  os_unfair_recursive_lock_lock_with_options();
  -[HMDHAPAccessory activeSessionRestoreClients](v4, "activeSessionRestoreClients");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeAllObjects");

  os_unfair_recursive_lock_unlock();
  -[HMDHAPAccessory _stopSessionMonitor](v4, "_stopSessionMonitor");
}

- (unint64_t)numActiveSessionClients
{
  void *v3;
  void *v4;
  unint64_t v5;
  void *v6;
  uint64_t v8;

  v8 = 0;
  -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](self, "preferredHAPAccessoryForOperation:linkType:", 10, &v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "server");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "doesPeriodicSessionChecks"))
  {
    v5 = objc_msgSend(v4, "numActiveSessionClients");
  }
  else
  {
    -[HMDHAPAccessory currentActiveSessionRestoreClients](self, "currentActiveSessionRestoreClients");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v6, "count");

  }
  return v5;
}

- (void)_checkSession
{
  void *v3;
  HMDHAPAccessory *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  _QWORD v9[4];
  id v10;
  uint8_t buf[4];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v12 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Session Restore checking session", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  objc_initWeak((id *)buf, v4);
  v7 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __32__HMDHAPAccessory__checkSession__block_invoke;
  v9[3] = &unk_1E89ABA70;
  objc_copyWeak(&v10, (id *)buf);
  v8[0] = v7;
  v8[1] = 3221225472;
  v8[2] = __32__HMDHAPAccessory__checkSession__block_invoke_625;
  v8[3] = &unk_1E89C2350;
  v8[4] = v4;
  -[HMDHAPAccessory _performOperation:linkType:operationBlock:errorBlock:](v4, "_performOperation:linkType:operationBlock:errorBlock:", 2, 0, v9, v8);
  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);
}

- (void)_notifyBridgedAccessoryReachabilityChange:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!-[HMDHAPAccessory isPrimary](self, "isPrimary"))
  {
    if (!v4)
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543362;
        v21 = v19;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Session Restore Bridged accessory became reachable", (uint8_t *)&v20, 0xCu);

      }
      objc_autoreleasePoolPop(v16);
      logAndPostNotification(CFSTR("HMDBridgedAccessoryReachableNotification"), v17, 0);
      -[HMDHAPAccessory accessoryMetric](v17, "accessoryMetric");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "sessionMetric");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = -[HMDHAPAccessory linkLayerType](v17, "linkLayerType");
      v13 = v11;
      v14 = 1;
      v15 = 0;
      goto LABEL_11;
    }
    objc_msgSend(v4, "domain");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v5, "isEqual:", *MEMORY[0x1E0CB8C70]))
    {
LABEL_12:

      goto LABEL_13;
    }
    v6 = objc_msgSend(v4, "code");

    if (v6 == 88)
    {
      v7 = (void *)MEMORY[0x1D17BA0A0]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543362;
        v21 = v10;
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Session Restore Bridged accessory became unreachable", (uint8_t *)&v20, 0xCu);

      }
      objc_autoreleasePoolPop(v7);
      logAndPostNotification(CFSTR("HMDBridgedAccessoryUnreachableNotification"), v8, 0);
      -[HMDHAPAccessory accessoryMetric](v8, "accessoryMetric");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "sessionMetric");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = -[HMDHAPAccessory linkLayerType](v8, "linkLayerType");
      v13 = v11;
      v14 = 0;
      v15 = v4;
LABEL_11:
      objc_msgSend(v13, "updateSessionState:linkLayerType:sessionInfo:bookkeeping:withError:", v14, v12, 0, 0, v15);

      goto LABEL_12;
    }
  }
LABEL_13:

}

- (void)_stopSessionMonitor
{
  void *v3;
  void *v4;
  HMDHAPAccessory *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory sessionRestoreTimer](self, "sessionRestoreTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory currentActiveSessionRestoreClients](v5, "currentActiveSessionRestoreClients");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Session Restore stopping monitoring accessory, active registrations %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHAPAccessory sessionRestoreTimer](v5, "sessionRestoreTimer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "suspend");

    -[HMDHAPAccessory setSessionRestoreTimer:](v5, "setSessionRestoreTimer:", 0);
  }
  -[HMDHAPAccessory _updateSessionRestoreOnServer:](self, "_updateSessionRestoreOnServer:", 0);
}

- (void)_startSessionMonitor
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory currentActiveSessionRestoreClients](self, "currentActiveSessionRestoreClients");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    -[HMDHAPAccessory sessionRestoreTimer](self, "sessionRestoreTimer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v5)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543362;
        v17 = v10;
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Session Restore - already monitoring accessory", (uint8_t *)&v16, 0xCu);

      }
      objc_autoreleasePoolPop(v6);
    }
    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543362;
        v17 = v11;
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Session Restore - Starting timer to monitor session with accessory", (uint8_t *)&v16, 0xCu);

      }
      objc_autoreleasePoolPop(v6);
      v12 = objc_alloc(MEMORY[0x1E0D286C8]);
      -[HMDHAPAccessory sessionCheckPeriod](v7, "sessionCheckPeriod");
      v13 = (void *)objc_msgSend(v12, "initWithTimeInterval:options:", 4);
      -[HMDHAPAccessory setSessionRestoreTimer:](v7, "setSessionRestoreTimer:", v13);

      -[HMDHAPAccessory sessionRestoreTimer](v7, "sessionRestoreTimer");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setDelegate:", v7);

      -[HMDHAPAccessory sessionRestoreTimer](v7, "sessionRestoreTimer");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "resume");

    }
    -[HMDHAPAccessory _updateSessionRestoreOnServer:](v7, "_updateSessionRestoreOnServer:", 1);
  }
}

- (void)_updateSessionRestoreOnServer:(BOOL)a3
{
  _QWORD v3[5];
  BOOL v4;
  _QWORD v5[5];
  BOOL v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __49__HMDHAPAccessory__updateSessionRestoreOnServer___block_invoke;
  v5[3] = &unk_1E89ABA98;
  v5[4] = self;
  v6 = a3;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __49__HMDHAPAccessory__updateSessionRestoreOnServer___block_invoke_626;
  v3[3] = &unk_1E89ABAC0;
  v3[4] = self;
  v4 = a3;
  -[HMDHAPAccessory _performOperation:linkType:operationBlock:errorBlock:](self, "_performOperation:linkType:operationBlock:errorBlock:", 2, 0, v5, v3);
}

- (void)_handleSessionRestoreTimerFired
{
  void *v3;
  HMDHAPAccessory *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Session Restore timer fired for accessory", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHAPAccessory _checkSession](v4, "_checkSession");
  if (!-[HMDAccessory isReachable](v4, "isReachable"))
    -[HMDHAPAccessory _stopSessionMonitor](v4, "_stopSessionMonitor");
}

- (void)addSession:(int64_t)a3
{
  NSObject *v5;
  _QWORD v6[6];

  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __30__HMDHAPAccessory_addSession___block_invoke;
  v6[3] = &unk_1E89C0B98;
  v6[4] = self;
  v6[5] = a3;
  dispatch_async(v5, v6);

}

- (void)removeSession:(int64_t)a3
{
  NSObject *v5;
  _QWORD v6[6];

  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __33__HMDHAPAccessory_removeSession___block_invoke;
  v6[3] = &unk_1E89C0B98;
  v6[4] = self;
  v6[5] = a3;
  dispatch_async(v5, v6);

}

- (void)_handleValidatePairingAuthMethodMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDHAPAccessory *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  HMDHAPAccessory *v18;
  uint64_t v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHAPAccessory isPrimary](self, "isPrimary"))
  {
    v19 = 0;
    -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:](self, "preferredHAPAccessoryForOperation:linkType:", 10, &v19);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "server");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __59__HMDHAPAccessory__handleValidatePairingAuthMethodMessage___block_invoke;
      v16[3] = &unk_1E89C21C0;
      v17 = v4;
      v18 = self;
      -[HMDHAPAccessory _updateAuthMethodWithServer:completion:](self, "_updateAuthMethodWithServer:completion:", v6, v16);
      v7 = v17;
    }
    else
    {
      v12 = (void *)MEMORY[0x1D17BA0A0]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v21 = v15;
        _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unable to find accessory server to challenge for auth method", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v12);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v7);
    }

  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to challenge for auth method on bridged accessory", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v6);
  }

}

- (void)handleLinkQualityRequestMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v5;
  if (v5)
  {
    objc_msgSend(v5, "identifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHAPAccessory getLinkQualityForAccessory:forMessage:](self, "getLinkQualityForAccessory:forMessage:", v7, v4);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 4, CFSTR("Accessory server is currently unavailable"), 0, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v7);
  }

}

- (void)_handleUpdateAccessoryConnectionState:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHAPAccessory *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMDHAPAccessory *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "isRemote"))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543618;
      v25 = v8;
      v26 = 2112;
      v27 = v4;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Message not supported: %@", (uint8_t *)&v24, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v9);
  }
  else
  {
    objc_msgSend(v4, "stringForKey:", CFSTR("kAccessoryName"));
    v10 = objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v9 = (void *)v10;
      if (-[HMDAccessory isReachable](self, "isReachable"))
      {
        -[HMDAccessory identifier](self, "identifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "server");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          objc_msgSend(v13, "disconnect");
          objc_msgSend(v4, "respondWithSuccess");
        }
        else
        {
          v19 = (void *)MEMORY[0x1D17BA0A0]();
          v20 = self;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = 138543362;
            v25 = v22;
            _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@No matching accessory server", (uint8_t *)&v24, 0xCu);

          }
          objc_autoreleasePoolPop(v19);
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "respondWithError:", v23);

        }
      }
      else
      {
        v15 = (void *)MEMORY[0x1D17BA0A0]();
        v16 = self;
        HMFGetOSLogHandle();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = 138543362;
          v25 = v18;
          _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Accessory is not reachable", (uint8_t *)&v24, 0xCu);

        }
        objc_autoreleasePoolPop(v15);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v13);
      }

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v14);

      v9 = 0;
    }
  }

}

- (void)setBroadcastKey:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 520);
}

- (NSNumber)keyUpdatedStateNumber
{
  return self->_keyUpdatedStateNumber;
}

- (void)setKeyUpdatedStateNumber:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 528);
}

- (NSDate)keyUpdatedTime
{
  return self->_keyUpdatedTime;
}

- (void)setKeyUpdatedTime:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 536);
}

- (BOOL)keyGenerationInProgress
{
  return self->_keyGenerationInProgress;
}

- (void)setKeyGenerationInProgress:(BOOL)a3
{
  self->_keyGenerationInProgress = a3;
}

- (HMDPendingCharacteristic)pendingPowerOn
{
  return self->_pendingPowerOn;
}

- (void)setPendingPowerOn:(id)a3
{
  objc_storeStrong((id *)&self->_pendingPowerOn, a3);
}

- (NSMutableArray)powerOnCompletionRoutines
{
  return self->_powerOnCompletionRoutines;
}

- (void)setPowerOnCompletionRoutines:(id)a3
{
  objc_storeStrong((id *)&self->_powerOnCompletionRoutines, a3);
}

- (NSNumber)sleepInterval
{
  return self->_sleepInterval;
}

- (void)setSleepInterval:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 648);
}

- (void)setAccessoryAdvertisement:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryAdvertisement, a3);
}

- (NSMutableDictionary)accessCodeCache
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 776, 1);
}

- (void)setAccessCodeCache:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 776);
}

- (BOOL)hasPostedBulletinForAccessCodeOnboarding
{
  return self->_hasPostedBulletinForAccessCodeOnboarding;
}

- (void)setHasPostedBulletinForAccessCodeOnboarding:(BOOL)a3
{
  self->_hasPostedBulletinForAccessCodeOnboarding = a3;
}

- (BOOL)hasPostedBulletinForWalletKeyOnboarding
{
  return self->_hasPostedBulletinForWalletKeyOnboarding;
}

- (void)setHasPostedBulletinForWalletKeyOnboarding:(BOOL)a3
{
  self->_hasPostedBulletinForWalletKeyOnboarding = a3;
}

- (void)setChipStorage:(id)a3
{
  objc_storeStrong((id *)&self->_chipStorage, a3);
}

- (BOOL)requiresThreadRouter
{
  return self->_requiresThreadRouter;
}

- (void)setRequiresThreadRouter:(BOOL)a3
{
  self->_requiresThreadRouter = a3;
}

- (void)setUniqueIdentifier:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 800);
}

- (void)setCertificationStatus:(int64_t)a3
{
  self->_certificationStatus = a3;
}

- (void)setMatterNodeID:(id)a3
{
  objc_storeStrong((id *)&self->_matterNodeID, a3);
}

- (NSNumber)matterVendorID
{
  return self->_matterVendorID;
}

- (void)setMatterVendorID:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 824);
}

- (NSNumber)matterProductID
{
  return self->_matterProductID;
}

- (void)setMatterProductID:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 832);
}

- (NSNumber)supportedLinkLayerTypes
{
  return self->_supportedLinkLayerTypes;
}

- (void)setSupportedLinkLayerTypes:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 840);
}

- (HMDAnalyticsHAPServiceData)primaryHAPServiceForAnalytics
{
  return self->_primaryHAPServiceForAnalytics;
}

- (NSArray)hapServicesListForAnalytics
{
  return self->_hapServicesListForAnalytics;
}

- (unint64_t)activationAttempts
{
  return self->_activationAttempts;
}

- (void)setActivationAttempts:(unint64_t)a3
{
  self->_activationAttempts = a3;
}

- (unint64_t)pairingAttempts
{
  return self->_pairingAttempts;
}

- (void)setPairingAttempts:(unint64_t)a3
{
  self->_pairingAttempts = a3;
}

- (NSNumber)backedOffStateNumber
{
  return self->_backedOffStateNumber;
}

- (void)setBackedOffStateNumber:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 880);
}

- (HMFTimer)accessoryDiscoveryBackoffTimer
{
  return self->_accessoryDiscoveryBackoffTimer;
}

- (void)setAccessoryDiscoveryBackoffTimer:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryDiscoveryBackoffTimer, a3);
}

- (HMFTimer)accessoryKeyRefreshTimer
{
  return self->_accessoryKeyRefreshTimer;
}

- (void)setAccessoryKeyRefreshTimer:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryKeyRefreshTimer, a3);
}

- (unsigned)keyGenerationType
{
  return self->_keyGenerationType;
}

- (void)setKeyGenerationType:(unsigned __int8)a3
{
  self->_keyGenerationType = a3;
}

- (HMFTimer)sessionRestoreTimer
{
  return self->_sessionRestoreTimer;
}

- (void)setSessionRestoreTimer:(id)a3
{
  objc_storeStrong((id *)&self->_sessionRestoreTimer, a3);
}

- (double)lastLinkChangeSessionCheckTime
{
  return self->_lastLinkChangeSessionCheckTime;
}

- (void)setLastLinkChangeSessionCheckTime:(double)a3
{
  self->_lastLinkChangeSessionCheckTime = a3;
}

- (unint64_t)lastSessionStatus
{
  return self->_lastSessionStatus;
}

- (void)setAccessoryMetric:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryMetric, a3);
}

- (HMDSiriEndpointProfileMetricsDispatcher)siriEndpointProfileMetricsDispatcher
{
  return (HMDSiriEndpointProfileMetricsDispatcher *)objc_getProperty(self, a2, 936, 1);
}

- (void)setSiriEndpointProfileMetricsDispatcher:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 936);
}

- (HMDUser)cachedRemovedUser
{
  return self->_cachedRemovedUser;
}

- (void)setCachedRemovedUser:(id)a3
{
  objc_storeStrong((id *)&self->_cachedRemovedUser, a3);
}

- (NSMutableArray)discoveredServices
{
  return self->_discoveredServices;
}

- (void)setDiscoveredServices:(id)a3
{
  objc_storeStrong((id *)&self->_discoveredServices, a3);
}

- (void)setPublicKey:(id)a3
{
  objc_storeStrong((id *)&self->_publicKey, a3);
}

- (void)setPairingUsername:(id)a3
{
  objc_storeStrong((id *)&self->_pairingUsername, a3);
}

- (void)setDataStreamController:(id)a3
{
  objc_storeStrong((id *)&self->_dataStreamController, a3);
}

- (NSMutableArray)pendingReads
{
  return (NSMutableArray *)objc_getProperty(self, a2, 984, 1);
}

- (void)setPendingReads:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 984);
}

- (BOOL)hasSiriEndpointService
{
  return self->_hasSiriEndpointService;
}

- (void)setHasSiriEndpointService:(BOOL)a3
{
  self->_hasSiriEndpointService = a3;
}

- (HMDMatterAccessoryDiagnosticsManager)matterDiagnosticManager
{
  return self->_matterDiagnosticManager;
}

- (void)setMatterDiagnosticManager:(id)a3
{
  objc_storeStrong((id *)&self->_matterDiagnosticManager, a3);
}

- (NAFuture)didConfigureCHIPAccessoryServerFuture
{
  return (NAFuture *)objc_getProperty(self, a2, 1008, 1);
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_didConfigureCHIPAccessoryServerFuture, 0);
  objc_storeStrong((id *)&self->_matterDiagnosticManager, 0);
  objc_storeStrong((id *)&self->_hapMetadata, 0);
  objc_storeStrong((id *)&self->_pendingReads, 0);
  objc_storeStrong((id *)&self->_dataStreamController, 0);
  objc_storeStrong((id *)&self->_pairingUsername, 0);
  objc_storeStrong((id *)&self->_publicKey, 0);
  objc_storeStrong((id *)&self->_discoveredServices, 0);
  objc_storeStrong((id *)&self->_cachedRemovedUser, 0);
  objc_storeStrong((id *)&self->_siriEndpointProfileMetricsDispatcher, 0);
  objc_storeStrong((id *)&self->_accessoryMetric, 0);
  objc_storeStrong((id *)&self->_sessionRestoreTimer, 0);
  objc_storeStrong((id *)&self->_accessoryKeyRefreshTimer, 0);
  objc_storeStrong((id *)&self->_accessoryDiscoveryBackoffTimer, 0);
  objc_storeStrong((id *)&self->_backedOffStateNumber, 0);
  objc_storeStrong((id *)&self->_hapServicesListForAnalytics, 0);
  objc_storeStrong((id *)&self->_primaryHAPServiceForAnalytics, 0);
  objc_storeStrong((id *)&self->_supportedLinkLayerTypes, 0);
  objc_storeStrong((id *)&self->_matterProductID, 0);
  objc_storeStrong((id *)&self->_matterVendorID, 0);
  objc_storeStrong((id *)&self->_matterNodeID, 0);
  objc_storeStrong((id *)&self->_uniqueIdentifier, 0);
  objc_storeStrong((id *)&self->_chipStorage, 0);
  objc_storeStrong((id *)&self->_bulletinBoard, 0);
  objc_storeStrong((id *)&self->_accessCodeCache, 0);
  objc_storeStrong((id *)&self->_needsOnboarding, 0);
  objc_storeStrong((id *)&self->_wakingViaCharacteristicWithIID, 0);
  objc_storeStrong((id *)&self->_internalThreadActive, 0);
  objc_storeStrong((id *)&self->_internalThreadStatus, 0);
  objc_storeStrong((id *)&self->_internalThreadCapabilities, 0);
  objc_storeStrong((id *)&self->_doorbellChimeController, 0);
  objc_storeStrong((id *)&self->_accessoryAdvertisement, 0);
  objc_storeStrong((id *)&self->_firmwareUpdateProfile, 0);
  objc_storeStrong((id *)&self->_activeSessionRestoreClients, 0);
  objc_storeStrong((id *)&self->_initialServiceTypeUUIDs, 0);
  objc_storeStrong((id *)&self->_cameraProfileNotificationSettings, 0);
  objc_storeStrong((id *)&self->_hasOnboardedForNaturalLighting, 0);
  objc_storeStrong((id *)&self->_sleepInterval, 0);
  objc_storeStrong((id *)&self->_diagnosticsManager, 0);
  objc_storeStrong((id *)&self->_wiFiTransportCapabilities, 0);
  objc_storeStrong((id *)&self->_wiFiManagementController, 0);
  objc_storeStrong((id *)&self->_cameraProfileSettingsManager, 0);
  objc_storeStrong((id *)&self->_powerOnCompletionRoutines, 0);
  objc_storeStrong((id *)&self->_connectivityInfo, 0);
  objc_storeStrong((id *)&self->_networkRouterController, 0);
  objc_storeStrong((id *)&self->_pendingPowerOn, 0);
  objc_storeStrong((id *)&self->_primaryService, 0);
  objc_storeStrong((id *)&self->_identifiersForBridgedAccessories, 0);
  objc_storeStrong((id *)&self->_symptomsHandler, 0);
  objc_storeStrong((id *)&self->_targetControllerManager, 0);
  objc_storeStrong((id *)&self->_targetUUIDs, 0);
  objc_storeStrong((id *)&self->_keyUpdatedTime, 0);
  objc_storeStrong((id *)&self->_keyUpdatedStateNumber, 0);
  objc_storeStrong((id *)&self->_broadcastKey, 0);
  objc_storeStrong((id *)&self->_setupHash, 0);
  objc_storeStrong((id *)&self->_internalEnhancedAuthMethod, 0);
  objc_storeStrong((id *)&self->_internalEnhancedAuthConfigNumber, 0);
  objc_storeStrong((id *)&self->_accessoryFlags, 0);
  objc_storeStrong((id *)&self->_services, 0);
  objc_storeStrong((id *)&self->_transportInformationInstances, 0);
}

void __59__HMDHAPAccessory__handleValidatePairingAuthMethodMessage___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
  }
  else
  {
    v5 = *MEMORY[0x1E0CB79D0];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 40), "enhancedAuthMethod"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithPayload:", v4);

  }
}

void __33__HMDHAPAccessory_removeSession___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  objc_msgSend(v2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "matchingHAPAccessoryWithServerIdentifier:linkType:", v3, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v4, "server");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (v7)
    {
      objc_msgSend(v7, "removeActiveSession:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        HAPStringFromAccessoryServerSession();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "shortDescription");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138543874;
        v20 = v16;
        v21 = 2112;
        v22 = v17;
        v23 = 2112;
        v24 = v18;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@*** remove %@ from an object with no server %@", (uint8_t *)&v19, 0x20u);

      }
      objc_autoreleasePoolPop(v13);
    }

  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(void **)(a1 + 32);
      v19 = 138543618;
      v20 = v11;
      v21 = 2112;
      v22 = v12;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@HAPAccessory not available to set session %@", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

void __30__HMDHAPAccessory_addSession___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  objc_msgSend(v2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "matchingHAPAccessoryWithServerIdentifier:linkType:", v3, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v4, "server");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v6 = v5;
    else
      v6 = 0;
    v7 = v6;

    if (v7)
    {
      objc_msgSend(v7, "addActiveSession:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        HAPStringFromAccessoryServerSession();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "shortDescription");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543874;
        v21 = v17;
        v22 = 2112;
        v23 = v18;
        v24 = 2112;
        v25 = v19;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@*** adding %@ to an object with no server %@", (uint8_t *)&v20, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
    }

  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HAPStringFromAccessoryServerSession();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "shortDescription");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543874;
      v21 = v11;
      v22 = 2112;
      v23 = v12;
      v24 = 2112;
      v25 = v13;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@HAPAccessory not available to set session %@ for %@", (uint8_t *)&v20, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

void __49__HMDHAPAccessory__updateSessionRestoreOnServer___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  id v11;
  char isKindOfClass;
  void *v13;
  id v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "server");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v9;
      v18 = 2112;
      v19 = v10;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating session restore to %@ on server", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v4, "setSessionRestoreActive:", *(unsigned __int8 *)(a1 + 40));
    if (!*(_BYTE *)(a1 + 40))
    {
      v11 = v4;
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) != 0)
        v13 = v11;
      else
        v13 = 0;
      v14 = v13;

      if ((isKindOfClass & 1) != 0)
        objc_msgSend(v11, "processPendingBonjourRemoveEvents");

    }
  }
  else
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543362;
      v17 = v15;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Session Restore - No server for accessory", (uint8_t *)&v16, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __49__HMDHAPAccessory__updateSessionRestoreOnServer___block_invoke_626(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543874;
    v10 = v7;
    v11 = 2112;
    v12 = v8;
    v13 = 2112;
    v14 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Session Restore, unable to update sessionRestore to %@ on server, error: %@", (uint8_t *)&v9, 0x20u);

  }
  objc_autoreleasePoolPop(v4);

}

void __32__HMDHAPAccessory__checkSession__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    objc_msgSend(v3, "characteristicOfType:serviceType:", *MEMORY[0x1E0D15FC8], *MEMORY[0x1E0D161A8]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      objc_msgSend(v3, "characteristicOfType:serviceType:", *MEMORY[0x1E0D15F58], *MEMORY[0x1E0D16198]);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v5)
      {
        v6 = (void *)MEMORY[0x1D17BA0A0]();
        v7 = WeakRetained;
        HMFGetOSLogHandle();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v20 = v9;
          _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Session Restore poll failed - no suitable characteristic for accessory", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v6);
        v5 = 0;
      }
    }
    objc_msgSend(WeakRetained, "workQueue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __32__HMDHAPAccessory__checkSession__block_invoke_624;
    v16[3] = &unk_1E89ABA48;
    v16[4] = WeakRetained;
    v17 = v3;
    v18 = v5;
    v11 = v5;
    objc_msgSend(v17, "readValueForCharacteristic:timeout:completionQueue:completionHandler:", v11, v10, v16, 0.0);

  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "identifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v14;
      v21 = 2112;
      v22 = v15;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Accessory disappeared. Session Restore check for accessory %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
  }

}

void __32__HMDHAPAccessory__checkSession__block_invoke_625(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEBUG, "%{public}@Session Restore failed to retrieve accessory with error %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);

}

void __32__HMDHAPAccessory__checkSession__block_invoke_624(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v11;
      v19 = 2112;
      v20 = v6;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Session Restore read failed with error %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    if ((objc_msgSend(*(id *)(a1 + 40), "isPrimary") & 1) == 0
      && objc_msgSend(*(id *)(a1 + 32), "lastSessionStatus") != 1)
    {
      objc_msgSend(*(id *)(a1 + 32), "_notifyBridgedAccessoryReachabilityChange:", v6);
    }
    objc_msgSend(*(id *)(a1 + 32), "setLastSessionStatus:", 1);
    objc_msgSend(*(id *)(a1 + 40), "server");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v13 = v12;
    else
      v13 = 0;
    v14 = v13;

    if (v14)
      objc_msgSend(v14, "processPendingBonjourRemoveEvents");

  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(void **)(a1 + 48);
      v17 = 138543618;
      v18 = v15;
      v19 = 2112;
      v20 = v16;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Session Restore valid session read %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    if ((objc_msgSend(*(id *)(a1 + 40), "isPrimary") & 1) == 0
      && objc_msgSend(*(id *)(a1 + 32), "lastSessionStatus") != 2)
    {
      objc_msgSend(*(id *)(a1 + 32), "_notifyBridgedAccessoryReachabilityChange:", 0);
    }
    objc_msgSend(*(id *)(a1 + 32), "setLastSessionStatus:", 2);
  }

}

uint64_t __45__HMDHAPAccessory_registerForSessionRestore___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_registerForSessionRestore:", *(_QWORD *)(a1 + 40));
}

void __27__HMDHAPAccessory_stopPing__block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(v1, "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "matchingHAPAccessoryWithServerIdentifier:linkType:", v2, 1);
  v5 = (id)objc_claimAutoreleasedReturnValue();

  v3 = v5;
  if (v5)
  {
    objc_msgSend(v5, "server");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setReachabilityPingEnabled:", 0);
    objc_msgSend(v4, "stopPing");

    v3 = v5;
  }

}

void __28__HMDHAPAccessory_startPing__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  objc_msgSend(v2, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "matchingHAPAccessoryWithServerIdentifier:linkType:", v3, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v4, "server");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (*(_BYTE *)(a1 + 40) || objc_msgSend(v5, "supportsUnreachablePing"))
    {
      v7 = (void *)MEMORY[0x1D17BA0A0]();
      v8 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543362;
        v16 = v10;
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@startPing", (uint8_t *)&v15, 0xCu);

      }
      objc_autoreleasePoolPop(v7);
      objc_msgSend(v6, "setReachabilityPingEnabled:", 1);
      objc_msgSend(v6, "startPing");
    }

  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@HAPAccessory not available to enable reachability ping", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }

}

void __59__HMDHAPAccessory_handleSetHasOnboardedForNaturalLighting___block_invoke_622(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 40);
      v9 = 138543874;
      v10 = v7;
      v11 = 2112;
      v12 = v8;
      v13 = 2112;
      v14 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to run transaction block for message: %@ with error: %@", (uint8_t *)&v9, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");
  }

}

uint64_t __59__HMDHAPAccessory_handleSetHasOnboardedForNaturalLighting___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "settings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportedFeatures") & 1;

  return v3;
}

void __62__HMDHAPAccessory_transactionObjectUpdated_newValues_message___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  id v5;

  v4 = a2;
  if (v4)
  {
    v5 = v4;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    v4 = v5;
  }

}

void __62__HMDHAPAccessory_transactionObjectUpdated_newValues_message___block_invoke_2(uint64_t a1)
{
  id v2;

  +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addOperation:", *(_QWORD *)(a1 + 32));

}

void __66__HMDHAPAccessory_readInitialRequiredCharacteristicsForAccessory___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t i;
  void *v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  id v40;
  id obj;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD aBlock[5];
  id v51;
  id v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  uint8_t v58[128];
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  void *v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v39 = a1;
    v57 = 0;
    +[HMDBackingStoreTransactionOptions optionsWithSource:destination:mustReplay:mustPush:](HMDBackingStoreTransactionOptions, "optionsWithSource:destination:mustReplay:mustPush:", 0, 2, 1, 0);
    v5 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "home");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "backingStore");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = (void *)v5;
    objc_msgSend(v7, "transaction:options:", CFSTR("readInitialRequiredCharacteristics"), v5);
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "transactionWithObjectChangeType:", 2);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v40 = v3;
    obj = v3;
    v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
    if (v45)
    {
      v42 = *(_QWORD *)v54;
      do
      {
        for (i = 0; i != v45; ++i)
        {
          if (*(_QWORD *)v54 != v42)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          v11 = WeakRetained;
          v12 = WeakRetained;
          HMFGetOSLogHandle();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v60 = v14;
            v61 = 2112;
            v62 = v9;
            _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Got response %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v10);
          objc_msgSend(v9, "request");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "characteristic");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v16, "service");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "value");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "valueUpdatedTime");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "stateNumber");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "notificationContext");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "updateValue:updatedTime:stateNumber:notificationContext:", v18, v19, v20, v21);

          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = __66__HMDHAPAccessory_readInitialRequiredCharacteristicsForAccessory___block_invoke_595;
          aBlock[3] = &unk_1E89AB178;
          aBlock[4] = v12;
          v51 = v17;
          v52 = v43;
          v22 = v17;
          v23 = _Block_copy(aBlock);
          objc_msgSend(v16, "type");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "value");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "type");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "accessory");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDService processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:](HMDService, "processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:", v24, v25, v26, v22, v23, v27, v44, &v57);

          WeakRetained = v11;
        }
        v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
      }
      while (v45);
    }

    if (v57)
      objc_msgSend(v37, "add:withMessage:", v44, 0);
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v28 = v43;
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
    v3 = v40;
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v47;
      do
      {
        for (j = 0; j != v30; ++j)
        {
          if (*(_QWORD *)v47 != v31)
            objc_enumerationMutation(v28);
          objc_msgSend(v28, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * j));
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "add:withMessage:", v33, 0);

        }
        v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
      }
      while (v30);
    }

    objc_msgSend(v37, "run:", *(_QWORD *)(v39 + 32));
  }
  else
  {
    v34 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v60 = v36;
      _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Accessory is no longer valid", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v34);
  }

}

id __66__HMDHAPAccessory_readInitialRequiredCharacteristicsForAccessory___block_invoke_595(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "getOrCreateServiceUpdateTransactionForKey:fromDictionary:", v3, *(_QWORD *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void __56__HMDHAPAccessory_accessory_didUpdateReachabilityState___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "matchingTransportInformation:", *(_QWORD *)(a1 + 40));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "home");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "reachabilityChangedLogEventManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(v6, "report");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "submitForAccessory:withTransportReport:reachable:", v4, v5, *(unsigned __int8 *)(a1 + 48));

  objc_msgSend(v6, "setReachable:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_updateReachability");

}

void __92__HMDHAPAccessory_didUpdateConnectionState_sessionInfo_linkLayerType_bookkeeping_withError___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  objc_msgSend(*(id *)(a1 + 32), "_checkSessionRestoreOnLinkStateChange");
  objc_msgSend(*(id *)(a1 + 32), "setConnected:", *(unsigned __int8 *)(a1 + 72));
  if (*(_BYTE *)(a1 + 72))
  {
    objc_msgSend(*(id *)(a1 + 32), "accessoryMetric");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "sessionMetric");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v2;
    v4 = *(_QWORD *)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = 1;
    v8 = 0;
  }
  else
  {
    logAndPostNotification(CFSTR("HMDAccessoryDisconnectedNotification"), *(void **)(a1 + 32), 0);
    objc_msgSend(*(id *)(a1 + 32), "accessoryMetric");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "sessionMetric");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v2;
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 64);
    v7 = 0;
  }
  objc_msgSend(v2, "updateSessionState:linkLayerType:sessionInfo:bookkeeping:withError:", v7, v4, v5, v6, v8);

}

uint64_t __61__HMDHAPAccessory_notifyingCharacteristicStateNumberUpdated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__updateNotifyingCharacteristicStateNumber:", *(_QWORD *)(a1 + 40));
}

id __99__HMDHAPAccessory__handleMultipleCharacteristicsUpdated_message_completionQueue_completionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "service");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "getOrCreateServiceUpdateTransactionForKey:fromDictionary:", v4, *(_QWORD *)(a1 + 48));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

uint64_t __99__HMDHAPAccessory__handleMultipleCharacteristicsUpdated_message_completionQueue_completionHandler___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t __98__HMDHAPAccessory_handleMultipleCharacteristicsUpdated_message_completionQueue_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleMultipleCharacteristicsUpdated:message:completionQueue:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void __43__HMDHAPAccessory__handleConfigureTargets___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v10;
    v13 = 2112;
    v14 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Response from handleConfigureTargets %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v7);

}

uint64_t __64__HMDHAPAccessory_backOffAccessoryForStateNumber_backoffPeriod___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(void **)(a1 + 40);
    v18 = 138543618;
    v19 = v5;
    v20 = 2112;
    v21 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Adding accessory's state: %@ to discovery back off", (uint8_t *)&v18, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "accessoryDiscoveryBackoffTimer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
  {
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D286C8]), "initWithTimeInterval:options:", 8, *(double *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "setAccessoryDiscoveryBackoffTimer:", v8);

    objc_msgSend(*(id *)(a1 + 32), "accessoryDiscoveryBackoffTimer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setDelegate:", *(_QWORD *)(a1 + 32));

    objc_msgSend(*(id *)(a1 + 32), "accessoryDiscoveryBackoffTimer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "resume");

  }
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  v12 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "backedOffStateNumber");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(a1 + 40);
    v18 = 138543874;
    v19 = v14;
    v20 = 2112;
    v21 = v15;
    v22 = 2112;
    v23 = v16;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Updating backed off state number from %@ to %@", (uint8_t *)&v18, 0x20u);

  }
  objc_autoreleasePoolPop(v11);
  return objc_msgSend(*(id *)(a1 + 32), "setBackedOffStateNumber:", *(_QWORD *)(a1 + 40));
}

void __50__HMDHAPAccessory_handleIdentifyAccessoryMessage___block_invoke(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = *(void **)(a1 + 32);
  if (WeakRetained)
  {
    objc_msgSend(v4, "respondWithPayload:error:", 0, v6);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v5);

  }
}

void __50__HMDHAPAccessory_handleIdentifyAccessoryMessage___block_invoke_545(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v7;
    v16 = 2112;
    v17 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Identify by /identify URL completed with error: %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = v3;
  v9 = v8;
  if (v8)
  {
    v10 = v8;
    if ((objc_msgSend(v8, "isHMError") & 1) == 0)
    {
      if (objc_msgSend(v9, "isHAPError"))
      {
        v11 = objc_msgSend(v9, "code");
        if (v11 > 0x20)
          v12 = 52;
        else
          v12 = qword_1CDB8F990[v11];
      }
      else
      {
        v12 = 54;
      }
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:underlyingError:", v12, CFSTR("Identify failed."), 0, 0, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(*(id *)(a1 + 40), "responseHandler");
  v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, void *, _QWORD))v13)[2](v13, v10, 0);

}

void __71__HMDHAPAccessory__handleUpdateCharacteristicAuthorizationDataMessage___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "home");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "saveWithReason:postSyncNotification:objectChange:", v3, 0, *(_QWORD *)(a1 + 40) != 0);

}

void __54__HMDHAPAccessory__handleUpdateAssociatedServiceType___block_invoke(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  _QWORD v18[2];
  _QWORD v19[2];
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v8;
      v22 = 2112;
      v23 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to commit update associated service type transaction with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(a1[5], "respondWithError:", v3);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[6], "associatedServiceType");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[6], "instanceID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v21 = v9;
      v22 = 2112;
      v23 = v10;
      v24 = 2112;
      v25 = v11;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Responding to message that we successfully updated service type: %@ on service: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    v18[0] = CFSTR("kServiceInstanceID");
    v12 = a1[5];
    objc_msgSend(a1[6], "instanceID", CFSTR("kServiceInstanceID"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v18[1] = CFSTR("kServiceType");
    v19[0] = v13;
    objc_msgSend(a1[6], "associatedServiceType");
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = (void *)v14;
    v16 = &stru_1E89C3E38;
    if (v14)
      v16 = (const __CFString *)v14;
    v19[1] = v16;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "respondWithPayload:", v17);

  }
}

void __76__HMDHAPAccessory_indicateNotificationFromServer_notifyType_withDictionary___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "isEqualToString:", v3);

  if (v4)
  {
    v5 = *(void **)(a1 + 48);
    if (v5)
    {
      objc_msgSend(v5, "hmf_numberForKey:", *MEMORY[0x1E0D15E60]);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D16588], "typeToString:", *(_QWORD *)(a1 + 56));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543874;
      v24 = v15;
      v25 = 2112;
      v26 = v16;
      v27 = 2112;
      v28 = v6;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Accessory - Notification %@ with instance %@", (uint8_t *)&v23, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
    v17 = *(_QWORD *)(a1 + 56);
    switch(v17)
    {
      case 4:
        objc_msgSend(*(id *)(a1 + 32), "_submitReachabilityDelayedMetric:", *(_QWORD *)(a1 + 48));
        break;
      case 3:
        objc_msgSend(*(id *)(a1 + 32), "_submitStateNumberChangeMetric");
        break;
      case 2:
        objc_msgSend(*(id *)(a1 + 32), "_doReachabilityUpdateForServer:", *(_QWORD *)(a1 + 48));
        break;
      default:
        v18 = (void *)MEMORY[0x1D17BA0A0]();
        v19 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0D16588], "typeToString:", *(_QWORD *)(a1 + 56));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 138543874;
          v24 = v21;
          v25 = 2112;
          v26 = v22;
          v27 = 2112;
          v28 = v6;
          _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Accessory - Unhandled notification %@ with instance %@", (uint8_t *)&v23, 0x20u);

        }
        objc_autoreleasePoolPop(v18);
        break;
    }

  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "deviceID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v10;
      v25 = 2112;
      v26 = v11;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Accessory - Incorrect server for reachability indication, expected server: %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
}

void __60__HMDHAPAccessory__evaluateLocalOperation_state_completion___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  __CFString *v23;
  __CFString *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  char v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  __int16 v46;
  __CFString *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v30 = 5;
  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0;
  v29 = 0;
  objc_msgSend(v2, "retrieveStateForTrackedAccessory:stateNumber:isReachable:linkQuality:lastSeen:", v3, &v29, &v31, &v30, &v28);
  v4 = v29;
  v5 = v28;

  if (*(_QWORD *)(a1 + 48) && v4 && *(_QWORD *)(a1 + 72) == 2 && (objc_msgSend(v4, "isEqual:") & 1) == 0)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      v33 = v9;
      v34 = 2112;
      v35 = v4;
      v36 = 2112;
      v37 = v10;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEBUG, "%{public}@State out of sync current/cached %@/%@ Preferring resident for reads", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v11 = 1;
  }
  else if (*(_BYTE *)(a1 + 81))
  {
    v11 = v31;
  }
  else
  {
    v11 = 1;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v11;
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v13 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v27 = v4;
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "isSuspended");
    HMFBooleanToString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v30;
    objc_msgSend(v5, "doubleValue");
    v20 = v19;
    HMFBooleanToString();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = *(_QWORD *)(a1 + 72);
    v26 = v5;
    if (v22 > 0xA)
      v23 = CFSTR("Undefined");
    else
      v23 = off_1E89ABEC8[v22];
    v24 = v23;
    *(_DWORD *)buf = 138545154;
    v33 = v15;
    v34 = 2112;
    v35 = v16;
    v36 = 2112;
    v37 = v17;
    v38 = 2112;
    v39 = v27;
    v40 = 2048;
    v41 = v18;
    v4 = v27;
    v42 = 2048;
    v43 = v20;
    v44 = 2112;
    v45 = v21;
    v46 = 2112;
    v47 = v24;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Retrieved accessory: Reachable(%@) / Suspended(%@) / S#(%@) / LQ(%ld) / Seen(%.3fs) / Local(%@) to evaluate operation: %@", buf, 0x52u);

    v5 = v26;
  }

  objc_autoreleasePoolPop(v12);
  v25 = *(_QWORD *)(a1 + 56);
  if (v25)
    (*(void (**)(uint64_t, _QWORD))(v25 + 16))(v25, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));

}

void __53__HMDHAPAccessory_updateTrackedAccessoryStateNumber___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(v2, "identifier");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_updateStateForTrackedAccessory:stateNumber:", v3, *(_QWORD *)(a1 + 40));

}

void __54__HMDHAPAccessory_reachabilityDidChangeToUnreachable___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "timeBecameReachable");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "timeIntervalSinceDate:", v3);
  v5 = v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543362;
    v14 = v10;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Accessory became unreachable", (uint8_t *)&v13, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(*(id *)(a1 + 32), "accessoryMetric");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "sessionMetric");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "updateReachableState:", 0);

  objc_msgSend(*(id *)(a1 + 32), "_updateReachabilityMetric:withDuration:", 0, v6);
  objc_msgSend(*(id *)(a1 + 32), "notifyClientsOfUpdatedAccessoryControllableValue");

}

uint64_t __52__HMDHAPAccessory_reachabilityDidChangeToReachable___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Accessory became reachable", (uint8_t *)&v14, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "accessoryMetric");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sessionMetric");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "updateReachableState:", 1);

  objc_msgSend(*(id *)(a1 + 32), "_checkRegisterForServerNotification");
  objc_msgSend(*(id *)(a1 + 32), "_reenableNotificationsOnWatch");
  objc_msgSend(*(id *)(a1 + 32), "_setTargetControllerSession");
  objc_msgSend(*(id *)(a1 + 32), "timeBecameUnreachable");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(*(id *)(a1 + 32), "timeBecameUnreachable");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "timeIntervalSinceDate:", v11);
    objc_msgSend(v10, "numberWithDouble:");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "_updateReachabilityMetric:withDuration:", 1, v12);
  }
  return objc_msgSend(*(id *)(a1 + 32), "notifyClientsOfUpdatedAccessoryControllableValue");
}

void __59__HMDHAPAccessory_handlePrimaryResidentUpdateNotification___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  HMDAccessoryMetric *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_doPrimaryResidentUpdated");
  objc_msgSend(*(id *)(a1 + 32), "setDefaultPreferredMediaUserIfNeeded");
  objc_msgSend(*(id *)(a1 + 32), "home");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isCurrentDeviceConfirmedPrimaryResident");

  objc_msgSend(*(id *)(a1 + 32), "accessoryMetric");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v3)
  {

    if (!v5)
    {
      v6 = (void *)MEMORY[0x1D17BA0A0]();
      v7 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543362;
        v17 = v9;
        _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Current device became primary - starting AccessoryMetric", (uint8_t *)&v16, 0xCu);

      }
      objc_autoreleasePoolPop(v6);
      v10 = -[HMDAccessoryMetric initWithAccessory:]([HMDAccessoryMetric alloc], "initWithAccessory:", *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(a1 + 32), "setAccessoryMetric:", v10);

    }
  }
  else
  {

    if (v5)
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543362;
        v17 = v14;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Current device stopped being primary - submitting AccessoryMetric and stopping", (uint8_t *)&v16, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      objc_msgSend(*(id *)(a1 + 32), "accessoryMetric");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "submitMetricAndStop");

      objc_msgSend(*(id *)(a1 + 32), "setAccessoryMetric:", 0);
    }
  }
}

void __67__HMDHAPAccessory__isRegisteredForNotificationsByForegroundProcess__block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  objc_msgSend(v7, "bundleIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = *(void **)(a1 + 32);
    objc_msgSend(v7, "bundleIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("com.apple.HomeKit.client."), "stringByAppendingString:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v6);

    if (objc_msgSend(v7, "isEntitledForSPIAccess"))
      objc_msgSend(*(id *)(a1 + 32), "addObject:", CFSTR("com.apple.HomeKitDaemon.homeNotifications"));
  }

}

void __47__HMDHAPAccessory_handleResidentDeviceUpdated___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_checkResidentDeviceForReachabilityPing");
  -[HMDHAPAccessory _evaluateResidentEnabledFeatures](*(void **)(a1 + 32));
}

- (void)_evaluateResidentEnabledFeatures
{
  void *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  int v8;
  uint64_t v9;
  id v10;
  void *v11;
  int v12;
  id v13;
  void *v14;
  int v15;
  _BOOL4 v16;
  int v17;
  id v18;
  void *v19;
  int v20;
  _BOOL4 v21;
  int v22;
  id v23;
  void *v24;
  int v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;

  if (a1)
  {
    objc_msgSend(a1, "home");
    v31 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "enabledResidents");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "na_any:", &__block_literal_global_48538);

    objc_msgSend(v31, "appleMediaAccessories");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "na_map:", &__block_literal_global_257_48539);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v5;
    objc_msgSend(a1, "siriEndpointProfile");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "na_any:", &__block_literal_global_261);

    if (v7)
      v9 = v8 & v3;
    else
      v9 = 0;
    v10 = v6;
    objc_msgSend(a1, "siriEndpointProfile");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v10, "na_any:", &__block_literal_global_262);

    LODWORD(v30) = v12 & v3;
    HIDWORD(v30) = v11 != 0;
    v13 = v10;
    objc_msgSend(a1, "siriEndpointProfile");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v13, "na_any:", &__block_literal_global_263);

    v16 = v14 != 0;
    v17 = v15 & v3;
    v18 = v13;
    objc_msgSend(a1, "siriEndpointProfile");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v18, "na_any:", &__block_literal_global_264);

    v21 = v19 != 0;
    v22 = v20 & v3;
    v23 = v18;
    objc_msgSend(a1, "siriEndpointProfile");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v23, "na_any:", &__block_literal_global_265);

    v26 = v24 != 0;
    v27 = v25 & v3;

    v28 = v9 | 2;
    if ((HIDWORD(v30) & v30) == 0)
      v28 = v9;
    if ((v16 & v17) != 0)
      v28 |= 4uLL;
    if ((v21 & v22) != 0)
      v28 |= 8uLL;
    if ((v26 & v27) != 0)
      v29 = v28 | 0x10;
    else
      v29 = v28;
    objc_msgSend(a1, "setSiriEndpointCapabilities:", v29, v30);

  }
}

uint64_t __86__HMDHAPAccessory_supportsUserMediaSettingsWithAccessoryCapabilities_supportsHomeHub___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "supportsUserMediaSettings");
}

uint64_t __82__HMDHAPAccessory_supportsDoorbellChimeWithAccessoryCapabilities_supportsHomeHub___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "supportsDoorbellChime");
}

uint64_t __78__HMDHAPAccessory_supportsMultiUserWithAccessoryCapabilities_supportsHomeHub___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "supportsMultiUser");
}

uint64_t __79__HMDHAPAccessory_supportsMusicAlarmWithAccessoryCapabilities_supportsHomeHub___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "supportsMusicAlarm");
}

uint64_t __77__HMDHAPAccessory_supportsAnnounceWithAccessoryCapabilities_supportsHomeHub___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "supportsAnnounce");
}

uint64_t __51__HMDHAPAccessory__evaluateResidentEnabledFeatures__block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "capabilities");
}

uint64_t __51__HMDHAPAccessory__evaluateResidentEnabledFeatures__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "capabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportsHomeHub");

  return v3;
}

uint64_t __66__HMDHAPAccessory__forceEnableReachabilityPingForPrimaryResident___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setReachabilityPingNotificationEnabled:", 1);
  objc_msgSend(*(id *)(a1 + 32), "setReachabilityPingEnabled:", 1);
  objc_msgSend(*(id *)(a1 + 40), "setReachabilityPingEnabled:", 1);
  return objc_msgSend(*(id *)(a1 + 40), "startPing");
}

void __81__HMDHAPAccessory__enableBroadcastNotifications_hapAccessory_forCharacteristics___block_invoke(uint64_t a1, void *a2, void *a3, int a4, void *a5, double a6)
{
  id v11;
  id v12;
  id v13;
  id WeakRetained;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  char v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a5;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v15 = objc_msgSend(WeakRetained, "setKeyGenerationInProgress:", 0);
  if (v13)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0](v15);
    v17 = WeakRetained;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", objc_msgSend(v17, "keyGenerationType"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v30 = v19;
      v31 = 2112;
      v32 = v20;
      v33 = 2114;
      v34 = v13;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed generating broadcast key for type %@ with error: %{public}@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v16);
  }
  else
  {
    if (v11 && objc_msgSend(WeakRetained, "keyGenerationType") != 2 && a4)
    {
      if (objc_msgSend(WeakRetained, "keyGenerationType") == 1)
        v21 = 2;
      else
        v21 = 3;
      +[HMDBLEBroadcastEventKeyGeneration broadcastKeyGenerationEventForAccessory:reason:](HMDBLEBroadcastEventKeyGeneration, "broadcastKeyGenerationEventForAccessory:reason:", WeakRetained, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "submitLogEvent:", v22);
      objc_msgSend(WeakRetained, "_updateBroadcastKey:keyUpdatedStateNumber:keyUpdatedTime:", v11, v12, a6);
      objc_msgSend(WeakRetained, "setKeyGenerationType:", 0);

    }
    v23 = *(void **)(a1 + 32);
    v24 = *(_QWORD *)(a1 + 40);
    objc_msgSend(WeakRetained, "workQueue");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __81__HMDHAPAccessory__enableBroadcastNotifications_hapAccessory_forCharacteristics___block_invoke_518;
    v26[3] = &unk_1E89AB900;
    objc_copyWeak(&v27, (id *)(a1 + 48));
    v28 = *(_BYTE *)(a1 + 56);
    objc_msgSend(v23, "configureCharacteristics:queue:withCompletionHandler:", v24, v25, v26);

    objc_destroyWeak(&v27);
  }

}

void __81__HMDHAPAccessory__enableBroadcastNotifications_hapAccessory_forCharacteristics___block_invoke_518(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _BOOL8 v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v28 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v7 = v5;
  v8 = a1;
  v9 = v7;
  v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v33;
    v29 = *(_QWORD *)v33;
    v30 = WeakRetained;
    do
    {
      v13 = 0;
      v31 = v11;
      do
      {
        if (*(_QWORD *)v33 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v13);
        objc_msgSend(v14, "characteristic");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "instanceID");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(WeakRetained, "hmdCharacteristicForInstanceId:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v14, "error");
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        if (v18)
        {
          v19 = *(_BYTE *)(v8 + 40) == 0;
        }
        else
        {
          v20 = (void *)MEMORY[0x1D17BA0A0]();
          v21 = WeakRetained;
          HMFGetOSLogHandle();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            HMFEnabledStatusToString();
            v24 = v9;
            v25 = v8;
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "characteristic");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v37 = v23;
            v38 = 2112;
            v39 = v26;
            v40 = 2112;
            v41 = v27;
            _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@%@ Broadcast Events for characteristic %@", buf, 0x20u);

            v8 = v25;
            v9 = v24;
            WeakRetained = v30;

            v12 = v29;
          }

          objc_autoreleasePoolPop(v20);
          v19 = *(_BYTE *)(v8 + 40) != 0;
          v11 = v31;
        }
        objc_msgSend(v17, "setBroadcastNotificationEnabled:", v19);

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
    }
    while (v11);
  }

}

uint64_t __83__HMDHAPAccessory__enableNotification_forCharacteristics_message_clientIdentifier___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  const char *v12;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!objc_msgSend(v3, "isNotificationEnabled"))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "shortDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "shortDescription");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v8;
      v16 = 2114;
      v17 = v10;
      v18 = 2112;
      v19 = v11;
      v12 = "%{public}@[%{public}@] Filtering out request to disable characteristic because notification is already disabled: %@";
LABEL_8:
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, v12, (uint8_t *)&v14, 0x20u);

    }
LABEL_9:

    objc_autoreleasePoolPop(v5);
    v4 = 0;
    goto LABEL_10;
  }
  if ((objc_msgSend(v3, "deregisterNotificationForClientIdentifier:", *(_QWORD *)(a1 + 32)) & 1) == 0)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "shortDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "shortDescription");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v8;
      v16 = 2114;
      v17 = v10;
      v18 = 2112;
      v19 = v11;
      v12 = "%{public}@[%{public}@] Filtering out request to disable characteristic because another client identifier is "
            "still registered: %@";
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  v4 = 1;
LABEL_10:

  return v4;
}

uint64_t __83__HMDHAPAccessory__enableNotification_forCharacteristics_message_clientIdentifier___block_invoke_511(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setNotificationEnabled:forClientIdentifier:", *(unsigned __int8 *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __83__HMDHAPAccessory__enableNotification_forCharacteristics_message_clientIdentifier___block_invoke_512(uint64_t a1, void *a2)
{
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  __CFString *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  __CFString *v21;
  void *v22;
  void *v23;
  __CFString *v24;
  __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  __CFString *v36;
  unint64_t v37;
  __CFString *v38;
  __CFString *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  __CFString *v50;
  __int16 v51;
  id v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v6 = WeakRetained;
  if (!WeakRetained)
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "identifier");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "shortDescription");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(_QWORD *)(a1 + 80);
      if (v20 > 2)
        v21 = CFSTR("Undefined");
      else
        v21 = off_1E89ABEB0[v20];
      v25 = v21;
      *(_DWORD *)buf = 138543874;
      v46 = v17;
      v47 = 2114;
      v48 = v19;
      v49 = 2112;
      v50 = v25;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] Failed to modify characteristic notifications using link type %@: lost self", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v28 = *(void **)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;

    goto LABEL_18;
  }
  if (!v4)
  {
    objc_msgSend(WeakRetained, "matchingHAPAccessoryWithLinkType:", *(_QWORD *)(a1 + 80));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "server");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      if ((objc_msgSend(v22, "isReachable") & 1) != 0)
      {
        objc_msgSend(v6, "_setNotificationsEnabled:forCharacteristics:hapAccessory:activity:completion:", *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 48), v22, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
LABEL_31:

        goto LABEL_32;
      }
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = v6;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "identifier");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "shortDescription");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = *(_QWORD *)(a1 + 80);
        if (v37 > 2)
          v38 = CFSTR("Undefined");
        else
          v38 = off_1E89ABEB0[v37];
        v39 = v38;
        *(_DWORD *)buf = 138543874;
        v46 = v32;
        v47 = 2114;
        v48 = v34;
        v49 = 2112;
        v50 = v39;
        v40 = "%{public}@[%{public}@] Not modifying characteristic notifications using linkType %@: retrieved accessory is not reachable";
LABEL_29:
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, v40, buf, 0x20u);

        v4 = 0;
      }
    }
    else
    {
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = v6;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "identifier");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "shortDescription");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = *(_QWORD *)(a1 + 80);
        if (v35 > 2)
          v36 = CFSTR("Undefined");
        else
          v36 = off_1E89ABEB0[v35];
        v39 = v36;
        *(_DWORD *)buf = 138543874;
        v46 = v32;
        v47 = 2114;
        v48 = v34;
        v49 = 2112;
        v50 = v39;
        v40 = "%{public}@[%{public}@] Not modifying characteristic notifications using linkType %@: no accessory server found";
        goto LABEL_29;
      }
    }

    objc_autoreleasePoolPop(v29);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v41 = objc_claimAutoreleasedReturnValue();
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v43 = *(void **)(v42 + 40);
    *(_QWORD *)(v42 + 40) = v41;

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    goto LABEL_31;
  }
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = v6;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "identifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "shortDescription");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(_QWORD *)(a1 + 80);
    v44 = v7;
    if (v13 > 2)
      v14 = CFSTR("Undefined");
    else
      v14 = off_1E89ABEB0[v13];
    v24 = v14;
    *(_DWORD *)buf = 138544130;
    v46 = v10;
    v47 = 2114;
    v48 = v12;
    v49 = 2112;
    v50 = v24;
    v51 = 2112;
    v52 = v4;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] Failed to modify characteristic notifications using link type %@: accessory retrieval error: %@", buf, 0x2Au);

    v7 = v44;
  }

  objc_autoreleasePoolPop(v7);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a2);
LABEL_18:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
LABEL_32:

}

void __83__HMDHAPAccessory__enableNotification_forCharacteristics_message_clientIdentifier___block_invoke_513(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t v33[128];
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      v4 = *(unsigned __int8 *)(a1 + 104);
      v6 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 40);
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
      {
        objc_msgSend(WeakRetained, "_notifyCharacteristicNotificationChanges:enableNotification:message:clientIdentifier:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), *(unsigned __int8 *)(a1 + 104), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
        goto LABEL_14;
      }
      if (*(_BYTE *)(a1 + 104))
      {
        v9 = *(void **)(a1 + 48);
        if (!v9 || (objc_msgSend(v9, "hasPrefix:", CFSTR("com.apple.HomeKit.client.")) & 1) != 0)
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          v11 = v3;
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(a1 + 56), "identifier");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "shortDescription");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
            *(_DWORD *)buf = 138543874;
            v35 = v13;
            v36 = 2114;
            v37 = v15;
            v38 = 2112;
            v39 = v16;
            _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] Characteristic notification enablement failed: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v10);
          objc_msgSend(*(id *)(a1 + 32), "respondWithError:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
          goto LABEL_14;
        }
      }
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = v3;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 56), "identifier");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "shortDescription");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138543874;
        v35 = v20;
        v36 = 2114;
        v37 = v22;
        v38 = 2112;
        v39 = v23;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Characteristic local notification enablement failed/skipped, updating registrations anyway for client: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v17);
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v24 = *(id *)(a1 + 40);
      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      if (v25)
      {
        v26 = v25;
        v27 = *(_QWORD *)v30;
        do
        {
          for (i = 0; i != v26; ++i)
          {
            if (*(_QWORD *)v30 != v27)
              objc_enumerationMutation(v24);
            objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "setNotificationEnabled:forClientIdentifier:", *(unsigned __int8 *)(a1 + 104), *(_QWORD *)(a1 + 48), (_QWORD)v29);
          }
          v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        }
        while (v26);
      }

      v4 = *(unsigned __int8 *)(a1 + 104);
      v6 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 40);
      WeakRetained = v18;
    }
    objc_msgSend(WeakRetained, "_notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:", v5, 0, v4, v6, (_QWORD)v29);
LABEL_14:
    objc_msgSend(v3, "_checkHAPSessionRestore");
    goto LABEL_15;
  }
  v7 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "respondWithError:", v8);

LABEL_15:
}

void __84__HMDHAPAccessory_enableNotification_forCharacteristicIDs_message_clientIdentifier___block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  char *v29;
  NSObject *v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  void *v37;
  const char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  void *v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  NSObject *v53;
  void *v54;
  const char *v55;
  void (**v56)(_QWORD, _QWORD, _QWORD);
  void *v57;
  __int128 v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  id obj;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint8_t buf[4];
  void *v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  void *v73;
  __int16 v74;
  uint64_t v75;
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "hapMetadata");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  obj = *(id *)(a1 + 32);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v76, 16);
  if (v2)
  {
    v4 = v2;
    v5 = *(_QWORD *)v65;
    *(_QWORD *)&v3 = 138543874;
    v58 = v3;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v65 != v5)
          objc_enumerationMutation(obj);
        v7 = *(const char **)(*((_QWORD *)&v64 + 1) + 8 * v6);
        objc_msgSend(*(id *)(a1 + 40), "findCharacteristic:", v7, v58);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v8;
        if (!v8)
        {
          v10 = MEMORY[0x1D17BA0A0]();
          v11 = *(id *)(a1 + 40);
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v69 = v13;
            v70 = 2112;
            v71 = v7;
            v14 = v12;
            v15 = "%{public}@Unable to look up characteristic with instanceID %@";
            goto LABEL_15;
          }
LABEL_16:

          v20 = (void *)v10;
LABEL_17:
          objc_autoreleasePoolPop(v20);
          goto LABEL_18;
        }
        if ((objc_msgSend(v8, "properties") & 1) == 0)
        {
          v10 = MEMORY[0x1D17BA0A0]();
          v11 = *(id *)(a1 + 40);
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v69 = v13;
            v70 = 2112;
            v71 = v7;
            v14 = v12;
            v15 = "%{public}@Characteristic with instanceID %@ does not support notification";
            goto LABEL_15;
          }
          goto LABEL_16;
        }
        objc_msgSend(v9, "type");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "service");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "type");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v62, "shouldFilterEnableNotificationsForCharacteristicType:serviceType:", v16, v18);

        if (v19)
        {
          v10 = MEMORY[0x1D17BA0A0]();
          v11 = *(id *)(a1 + 40);
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v69 = v13;
            v70 = 2112;
            v71 = v7;
            v14 = v12;
            v15 = "%{public}@Dropping notification enable request for filtered characteristic with instanceID %@";
LABEL_15:
            _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 0x16u);

          }
          goto LABEL_16;
        }
        v21 = objc_msgSend(v9, "isNotificationEnabled");
        v22 = *(unsigned __int8 *)(a1 + 64);
        v23 = objc_msgSend(v9, "isNotificationEnabledForClientIdentifier:", *(_QWORD *)(a1 + 48));
        v24 = *(unsigned __int8 *)(a1 + 64);
        if (v22 == v21)
        {
          if (v24 != (_DWORD)v23)
            v23 = objc_msgSend(v9, "setNotificationEnabled:forClientIdentifier:", v24 != 0, *(_QWORD *)(a1 + 48));
          v25 = (void *)MEMORY[0x1D17BA0A0](v23);
          v26 = *(id *)(a1 + 40);
          HMFGetOSLogHandle();
          v27 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
            goto LABEL_29;
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "shortDescription");
          v29 = (char *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v69 = v28;
          v70 = 2112;
          v71 = v29;
          v30 = v27;
          v31 = "%{public}@No change in notification for characteristic %@";
          goto LABEL_28;
        }
        if (v24 != (_DWORD)v23)
        {
          if (*(_BYTE *)(a1 + 64)
            || (objc_msgSend(v9, "notificationRegistrations"),
                v32 = (void *)objc_claimAutoreleasedReturnValue(),
                v33 = objc_msgSend(v32, "count"),
                v32,
                v33 == 1))
          {
            v34 = MEMORY[0x1D17BA0A0](objc_msgSend(v60, "addObject:", v9));
            v35 = *(id *)(a1 + 40);
            HMFGetOSLogHandle();
            v36 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v59 = v34;
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              if (*(_BYTE *)(a1 + 64))
                v38 = "Subscribe";
              else
                v38 = "Unsubscribe";
              objc_msgSend(v9, "shortDescription");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              v40 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)buf = 138544130;
              v69 = v37;
              v70 = 2080;
              v71 = v38;
              v72 = 2112;
              v73 = v39;
              v74 = 2112;
              v75 = v40;
              _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@%s notification of characteristic %@ due to client %@", buf, 0x2Au);

              v34 = v59;
            }

            v20 = (void *)v34;
          }
          else
          {
            objc_msgSend(v9, "setNotificationEnabled:forClientIdentifier:", *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48));
            v41 = MEMORY[0x1D17BA0A0](objc_msgSend(v61, "addObject:", v9));
            v42 = *(id *)(a1 + 40);
            HMFGetOSLogHandle();
            v43 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v9, "shortDescription");
              v45 = (char *)objc_claimAutoreleasedReturnValue();
              v46 = *(void **)(a1 + 48);
              *(_DWORD *)buf = v58;
              v69 = v44;
              v70 = 2112;
              v71 = v45;
              v72 = 2112;
              v73 = v46;
              _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Deregister notification of characteristic %@ for client %@", buf, 0x20u);

            }
            v20 = (void *)v41;
          }
          goto LABEL_17;
        }
        v25 = (void *)MEMORY[0x1D17BA0A0]();
        v26 = *(id *)(a1 + 40);
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "shortDescription");
          v29 = (char *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v69 = v28;
          v70 = 2112;
          v71 = v29;
          v30 = v27;
          v31 = "%{public}@No change in notification enabled for characteristic %@";
LABEL_28:
          _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, v31, buf, 0x16u);

        }
LABEL_29:

        objc_autoreleasePoolPop(v25);
        objc_msgSend(v61, "addObject:", v9);
LABEL_18:

        ++v6;
      }
      while (v4 != v6);
      v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v76, 16);
      v4 = v47;
    }
    while (v47);
  }

  v48 = objc_msgSend(v60, "count");
  if (objc_msgSend(v61, "count"))
  {
    if (v48)
      v49 = 0;
    else
      v49 = *(_QWORD *)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 40), "_notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:", v61, 0, *(unsigned __int8 *)(a1 + 64) != 0, v49);
    if (objc_msgSend(v60, "count"))
      goto LABEL_52;
  }
  else
  {
    if (objc_msgSend(v60, "count"))
    {
LABEL_52:
      objc_msgSend(*(id *)(a1 + 40), "_enableNotification:forCharacteristics:message:clientIdentifier:", *(unsigned __int8 *)(a1 + 64), v60, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
      goto LABEL_53;
    }
    objc_msgSend(*(id *)(a1 + 56), "responseHandler");
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    if (v50)
    {
      v51 = (void *)MEMORY[0x1D17BA0A0]();
      v52 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v53 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = *(const char **)(a1 + 32);
        *(_DWORD *)buf = 138543618;
        v69 = v54;
        v70 = 2112;
        v71 = v55;
        _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_INFO, "%{public}@No matching characteristics for instanceIDs %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v51);
      objc_msgSend(*(id *)(a1 + 56), "responseHandler");
      v56 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v56)[2](v56, v57, 0);

    }
  }
LABEL_53:

}

void __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v3 = a2;
  v4 = *(unsigned __int8 *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_2;
  v10[3] = &unk_1E89AB770;
  v11 = v3;
  v9 = v3;
  objc_msgSend(v5, "na_firstObjectPassingTest:", v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "threshold");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setNotificationEnabled:forClientIdentifier:changeThreshold:", v4, v6, v8);

}

BOOL __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_499(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "characteristic");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_2_500(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  id obj;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD v42[4];
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE buf[12];
  __int16 v55;
  void *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  id v60;
  __int16 v61;
  void *v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v41 = a2;
  v33 = a3;
  v38 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = 0u;
  v51 = 0u;
  v52 = 0u;
  v50 = 0u;
  obj = *(id *)(a1 + 32);
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v63, 16);
  if (v40)
  {
    v39 = *(_QWORD *)v51;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v51 != v39)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * v5);
        objc_msgSend(v6, "characteristicForHAPAccessory:", v41);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = v7;
        if (v7)
        {
          if ((objc_msgSend(v7, "properties") & 1) != 0
            && (*(_BYTE *)(v38 + 96)
             || objc_msgSend(v6, "deregisterNotificationForClientIdentifier:", *(_QWORD *)(v38 + 40))))
          {
            objc_msgSend(v34, "addObject:", v8);
          }
        }
        else
        {
          v9 = (void *)MEMORY[0x1D17BA0A0]();
          v10 = *(id *)(v38 + 48);
          HMFGetOSLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(v38 + 56), "identifier");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "shortDescription");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "instanceID");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "characteristicType");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "server");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "identifier");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544386;
            *(_QWORD *)&buf[4] = v36;
            v55 = 2114;
            v56 = v12;
            v57 = 2112;
            v58 = (uint64_t)v13;
            v59 = 2112;
            v60 = v14;
            v61 = 2112;
            v62 = v16;
            _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] Cannot map HMDCharacteristic %@/%@ to a HAPCharacteristic for server %@ to enable notifications", buf, 0x34u);

          }
          objc_autoreleasePoolPop(v9);
        }

        ++v5;
      }
      while (v40 != v5);
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v63, 16);
      v40 = v17;
    }
    while (v17);
  }

  v18 = objc_msgSend(v34, "count");
  if (v33 && v18 && (v18 = objc_msgSend(v41, "isReachable"), (v18 & 1) != 0))
  {
    v19 = *(unsigned __int8 *)(v38 + 96);
    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 3221225472;
    v42[2] = __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_501;
    v42[3] = &unk_1E89AB7C0;
    objc_copyWeak(&v48, (id *)(v38 + 88));
    v20 = *(id *)(v38 + 56);
    v22 = *(void **)(v38 + 72);
    v21 = *(_QWORD *)(v38 + 80);
    v43 = v20;
    v47 = v21;
    v44 = v22;
    v45 = *(id *)(v38 + 32);
    v49 = *(_BYTE *)(v38 + 96);
    v46 = *(id *)(v38 + 64);
    objc_msgSend(*(id *)(v38 + 48), "workQueue");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "enableEvents:forCharacteristics:withCompletionHandler:queue:", v19 != 0, v34, v42, v23);

    objc_msgSend(*(id *)(v38 + 48), "_updateAccessoryTracking");
    *(_QWORD *)buf = 0;
    v24 = (id)objc_msgSend(*(id *)(v38 + 48), "preferredHAPAccessoryForOperation:linkType:", 4, buf);
    if (*(_QWORD *)buf == 2)
      objc_msgSend(*(id *)(v38 + 48), "_enableBroadcastNotifications:hapAccessory:forCharacteristics:", *(unsigned __int8 *)(v38 + 96), v41, *(_QWORD *)(v38 + 32));

    objc_destroyWeak(&v48);
  }
  else
  {
    v25 = (void *)MEMORY[0x1D17BA0A0](v18);
    v26 = *(id *)(v38 + 48);
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(v38 + 56), "identifier");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "shortDescription");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v34, "count");
      objc_msgSend(v41, "isReachable");
      HMFBooleanToString();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      *(_QWORD *)&buf[4] = v28;
      v55 = 2114;
      v56 = v30;
      v57 = 2048;
      v58 = v31;
      v59 = 2112;
      v60 = v33;
      v61 = 2112;
      v62 = v32;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Not enabling events on HAP accessory server because hapCharacteristics.count=%lu accessoryServer=%@ hapAccessory.isReachable=%@", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v25);
    dispatch_group_leave(*(dispatch_group_t *)(v38 + 64));
  }

}

BOOL __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_503(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "characteristic");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_2_504(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "matchingHAPAccessoryWithLinkType:", *(_QWORD *)(a1 + 72));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "server");
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    if (!v3 && v7 && (objc_msgSend(v6, "isReachable") & 1) != 0)
    {
      if (!*(_QWORD *)(a1 + 48) || objc_msgSend(v6, "isEqual:"))
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
LABEL_12:

        goto LABEL_16;
      }
    }
    else
    {
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      v10 = v5;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "identifier");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "shortDescription");
        v20 = v9;
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v22 = v12;
        v23 = 2114;
        v24 = v14;
        v25 = 2112;
        v26 = v3;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] Failed to retrieve the HAP accessory: %@", buf, 0x20u);

        v9 = v20;
      }

      objc_autoreleasePoolPop(v9);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    goto LABEL_12;
  }
  v15 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "identifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "shortDescription");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v22 = v17;
    v23 = 2114;
    v24 = v19;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Self became nil", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v15);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
LABEL_16:

}

void __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_505(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id obj;
  _QWORD v31[5];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[4];
  id v37;
  id v38;
  uint8_t v39[128];
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
    {
      objc_msgSend(*(id *)(a1 + 32), "keyEnumerator");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "allObjects");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 3221225472;
      v36[2] = __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_2_506;
      v36[3] = &unk_1E89B9150;
      v37 = *(id *)(a1 + 32);
      v38 = *(id *)(a1 + 40);
      objc_msgSend(v5, "na_each:", v36);

      objc_msgSend(v3, "_notifyCharacteristicNotificationChanges:enableNotification:message:clientIdentifier:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 104), 0, *(_QWORD *)(a1 + 48));
    }
    else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
    {
      objc_msgSend(WeakRetained, "_notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 104), 0);
    }
    else if (objc_msgSend(*(id *)(a1 + 48), "hasPrefix:", CFSTR("com.apple.HomeKitDaemon"))
           && (objc_msgSend(*(id *)(a1 + 48), "isEqualToString:", CFSTR("com.apple.HomeKitDaemon.homeNotifications")) & 1) == 0)
    {
      v12 = (void *)MEMORY[0x1D17BA0A0]();
      v29 = v3;
      v13 = v3;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 64), "identifier");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "shortDescription");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v15;
        v42 = 2114;
        v43 = v17;
        _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Characteristic notification enablement failed, but updating registrations anyway", buf, 0x16u);

      }
      v28 = v13;

      objc_autoreleasePoolPop(v12);
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      obj = *(id *)(a1 + 56);
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v39, 16);
      if (v18)
      {
        v19 = v18;
        v20 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v19; ++i)
          {
            if (*(_QWORD *)v33 != v20)
              objc_enumerationMutation(obj);
            v22 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
            v23 = *(unsigned __int8 *)(a1 + 104);
            v24 = *(_QWORD *)(a1 + 48);
            v25 = *(void **)(a1 + 72);
            v31[0] = MEMORY[0x1E0C809B0];
            v31[1] = 3221225472;
            v31[2] = __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_508;
            v31[3] = &unk_1E89AB770;
            v31[4] = v22;
            objc_msgSend(v25, "na_firstObjectPassingTest:", v31, v28);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "threshold");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "setNotificationEnabled:forClientIdentifier:changeThreshold:", v23, v24, v27);

          }
          v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v39, 16);
        }
        while (v19);
      }

      objc_msgSend(v28, "_notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 104), 0);
      v3 = v29;
    }
    else
    {
      v6 = (void *)MEMORY[0x1D17BA0A0]();
      v7 = v3;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 64), "identifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "shortDescription");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v9;
        v42 = 2114;
        v43 = v11;
        _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] Characteristic notification enablement failed", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v6);
    }
  }

}

void __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_2_506(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0D16428], "responseTupleForCharacteristic:error:", 0, v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v4);

}

BOOL __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_508(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "characteristic");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_501(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  id v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v6)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "identifier");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "shortDescription");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v31 = v12;
        v32 = 2114;
        v33 = v14;
        v34 = 2112;
        v35 = v6;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@[%{public}@] One or more notification enable commands failed: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v8);
    }
    else
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "identifier");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "shortDescription");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v31 = v15;
        v32 = 2114;
        v33 = v17;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Successfully modified characteristic notifications", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
      v25 = v5;
      objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v5);
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v18 = *(id *)(a1 + 48);
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v27;
        do
        {
          for (i = 0; i != v20; ++i)
          {
            if (*(_QWORD *)v27 != v21)
              objc_enumerationMutation(v18);
            v23 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
            if (*(_BYTE *)(a1 + 80))
              objc_msgSend(MEMORY[0x1E0C99D68], "date");
            else
              objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "setNotificationEnabledTime:", v24);

          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
        }
        while (v20);
      }

      v5 = v25;
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

BOOL __130__HMDHAPAccessory__setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "characteristic");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

uint64_t __129__HMDHAPAccessory_setNotificationsEnabled_forCharacteristics_notificationChangeThresholds_clientIdentifier_matchingHAPAccessory___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setNotificationsEnabled:forCharacteristics:notificationChangeThresholds:clientIdentifier:matchingHAPAccessory:", *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

uint64_t __70__HMDHAPAccessory__disableNotificationsForBundleID_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!objc_msgSend(v3, "isNotificationEnabled"))
    goto LABEL_6;
  v4 = objc_msgSend(v3, "deregisterNotificationForClientIdentifier:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v3, "type");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "service");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "type");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4
    || *(_BYTE *)(a1 + 56)
    && (objc_msgSend(*(id *)(a1 + 40), "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v5, v7) & 1) != 0)
  {

LABEL_6:
    v8 = 0;
    goto LABEL_7;
  }
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = *(id *)(a1 + 48);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v13;
    v16 = 2112;
    v17 = v3;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Deregistering notification for characteristic %@", (uint8_t *)&v14, 0x16u);

  }
  objc_autoreleasePoolPop(v10);

  v8 = 1;
LABEL_7:

  return v8;
}

uint64_t __69__HMDHAPAccessory_disableNotificationsForBundleID_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_disableNotificationsForBundleID:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __81__HMDHAPAccessory_handleRemoteGatewayNotificationRegistration_enable_enableTime___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  id obj;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  objc_msgSend(*(id *)(a1 + 40), "services");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
  if (v19)
  {
    v18 = *(_QWORD *)v27;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v27 != v18)
          objc_enumerationMutation(obj);
        v20 = v4;
        v5 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v4);
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        objc_msgSend(v5, "characteristics");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)v23;
          do
          {
            for (i = 0; i != v8; ++i)
            {
              if (*(_QWORD *)v23 != v9)
                objc_enumerationMutation(v6);
              v11 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
              v12 = *(void **)(a1 + 32);
              objc_msgSend(v11, "instanceID");
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              LODWORD(v12) = objc_msgSend(v12, "containsObject:", v13);

              if ((_DWORD)v12)
              {
                if (*(_BYTE *)(a1 + 56))
                {
                  objc_msgSend(v11, "setNotificationRegisteredWithRemoteGateway:", 1);
                  objc_msgSend(v11, "notificationEnabledTime");
                  v14 = (void *)objc_claimAutoreleasedReturnValue();
                  v15 = objc_msgSend(v14, "isEqualToDate:", v2);

                  if (v15)
                  {
                    objc_msgSend(v3, "addObject:", v11);
                    objc_msgSend(v11, "setNotificationEnabledTime:", *(_QWORD *)(a1 + 48));
                  }
                }
                else
                {
                  objc_msgSend(v11, "setNotificationRegisteredWithRemoteGateway:", 0);
                  objc_msgSend(*(id *)(a1 + 40), "transportInformationInstances");
                  v16 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend(v16, "count"))
                  {
                    objc_msgSend(v21, "addObject:", v11);
                    objc_msgSend(v11, "setNotificationEnabledTime:", v2);
                  }

                }
              }
            }
            v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
          }
          while (v8);
        }

        v4 = v20 + 1;
      }
      while (v20 + 1 != v19);
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    }
    while (v19);
  }

  if (objc_msgSend(v3, "count"))
    objc_msgSend(*(id *)(a1 + 40), "_notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:", v3, 0, 1, 0);
  if (objc_msgSend(v21, "count"))
    objc_msgSend(*(id *)(a1 + 40), "_notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:", v21, 0, 0, 0);

}

void __47__HMDHAPAccessory_resetNotificationEnabledTime__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v15 = a1;
  objc_msgSend(*(id *)(a1 + 32), "services");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v21;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v21 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v8);
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        objc_msgSend(v9, "characteristics");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v17;
          do
          {
            v14 = 0;
            do
            {
              if (*(_QWORD *)v17 != v13)
                objc_enumerationMutation(v10);
              objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v14++), "setNotificationEnabledTime:", v2);
            }
            while (v12 != v14);
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
          }
          while (v12);
        }

        ++v8;
      }
      while (v8 != v6);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v6);
  }

  objc_msgSend(*(id *)(v15 + 32), "_notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:", v3, 0, 0, 0);
}

uint64_t __75__HMDHAPAccessory_updateNotificationEnabled_forCharacteristics_onBehalfOf___block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "setNotificationEnabled:forClientIdentifier:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(a1 + 48), "_checkHAPSessionRestore");
}

void __75__HMDHAPAccessory__readValueForCharacteristic_hapAccessory_requestMessage___block_invoke(id *a1)
{
  int v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v2 = objc_msgSend(a1[4], "hasValidCachedValueForCharacteristic:shouldLog:", a1[5], 1);
  v3 = a1[4];
  if (v2)
  {
    objc_msgSend(a1[4], "autoUpdateCachedCountDownCharacteristics:", a1[5]);
    v4 = a1[4];
    v5 = a1[6];
    objc_msgSend(v4, "uuid");

    objc_msgSend(a1[5], "instanceID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(a1[4], "submitLogEvent:error:", a1[7], 0);
    v7 = a1[4];
    objc_msgSend(a1[5], "value");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "notifyValue:previousValue:error:forCharacteristic:requestMessage:", v11, a1[8], 0, a1[5], a1[9]);

  }
  else
  {
    objc_msgSend(a1[5], "stateNumber");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __75__HMDHAPAccessory__readValueForCharacteristic_hapAccessory_requestMessage___block_invoke_2;
    v12[3] = &unk_1E89AB6F8;
    v13 = a1[10];
    v9 = a1[11];
    v10 = a1[4];
    v14 = v9;
    v15 = v10;
    v16 = a1[7];
    v17 = a1[6];
    v18 = a1[8];
    v19 = a1[5];
    v20 = a1[9];
    objc_msgSend(v3, "_evaluateLocalOperation:state:completion:", 2, v8, v12);

  }
}

void __75__HMDHAPAccessory__readValueForCharacteristic_hapAccessory_requestMessage___block_invoke_2(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "workQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __75__HMDHAPAccessory__readValueForCharacteristic_hapAccessory_requestMessage___block_invoke_3;
    v9[3] = &unk_1E89AB6D0;
    v6 = *(void **)(a1 + 56);
    v9[4] = *(_QWORD *)(a1 + 48);
    v10 = v6;
    v11 = *(id *)(a1 + 64);
    v12 = *(id *)(a1 + 72);
    v13 = *(id *)(a1 + 80);
    v14 = *(id *)(a1 + 88);
    objc_msgSend(v3, "readValueForCharacteristic:timeout:completionQueue:completionHandler:", v4, v5, v9, 0.0);

  }
  else
  {
    v7 = *(void **)(a1 + 88);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v8);

  }
}

void __75__HMDHAPAccessory__readValueForCharacteristic_hapAccessory_requestMessage___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  void *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "submitLogEvent:error:", *(_QWORD *)(a1 + 40), v5);
  objc_msgSend(*(id *)(a1 + 32), "uuid");

  objc_msgSend(v14, "instanceID");
  objc_msgSend(v5, "domain");

  objc_msgSend(v5, "code");
  v6 = v5;
  v7 = v6;
  if (!v6)
  {
    v11 = *(void **)(a1 + 32);
    objc_msgSend(v14, "value");
    v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "notifyValue:previousValue:error:forCharacteristic:requestMessage:", v12, *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
    v8 = 0;
LABEL_12:

    goto LABEL_13;
  }
  v8 = v6;
  if ((objc_msgSend(v6, "isHMError") & 1) == 0)
  {
    if (objc_msgSend(v7, "isHAPError"))
    {
      v9 = objc_msgSend(v7, "code");
      if (v9 > 0x20)
        v10 = 52;
      else
        v10 = qword_1CDB8F990[v9];
    }
    else
    {
      v10 = 74;
    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:underlyingError:", v10, CFSTR("Read Failed."), 0, 0, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(*(id *)(a1 + 72), "responseHandler");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(*(id *)(a1 + 72), "responseHandler");
    v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v12)[2](v12, v8, 0);
    goto LABEL_12;
  }
LABEL_13:

}

void __45__HMDHAPAccessory__handleCharacteristicRead___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_wol_processReadWriteResponseForCharacteristic:isRead:error:", *(_QWORD *)(a1 + 40), 1, v8);
  objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", v5, v8);

}

void __45__HMDHAPAccessory__handleCharacteristicRead___block_invoke_485(id *a1, int a2)
{
  id *v4;
  id WeakRetained;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  char v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  _QWORD block[4];
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;

  v4 = a1 + 7;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v6 = WeakRetained;
  if (a2)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __45__HMDHAPAccessory__handleCharacteristicRead___block_invoke_2;
    block[3] = &unk_1E89AC020;
    v18 = a1[4];
    v19 = v6;
    v20 = a1[5];
    objc_copyWeak(&v22, v4);
    v21 = a1[6];
    dispatch_async(v7, block);

    objc_destroyWeak(&v22);
    v8 = v18;
  }
  else
  {
    if (!WeakRetained)
    {
      v14 = a1[5];
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "respondWithError:", v15);

      goto LABEL_8;
    }
    objc_msgSend(a1[6], "begin");
    v16 = a1[6];
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v6, "_handleCharacteristicError:read:characteristic:didRelayMessage:", v9, 1, a1[4], a1[5]);

    if ((v10 & 1) == 0)
    {
      v12 = a1[4];
      v11 = a1[5];
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "submitCharacteristicReadErrorLogEvent:message:error:", v12, v11, v13);

    }
    __HMFActivityScopeLeave();
    v8 = v16;
  }

LABEL_8:
}

void __45__HMDHAPAccessory__handleCharacteristicRead___block_invoke_2(id *a1)
{
  _QWORD *v2;
  int v3;
  id v4;
  void *v5;
  uint64_t v6;
  id *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  id v11;
  id *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  _QWORD v30[4];
  id v31;
  id v32;
  id v33;
  id v34;
  _QWORD v35[3];

  v35[1] = *MEMORY[0x1E0C80C00];
  v2 = a1 + 4;
  objc_msgSend(a1[4], "value");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(a1[5], "hasValidCachedValueForCharacteristic:shouldLog:", *v2, 1);
  v4 = a1[5];
  if (v3)
  {
    objc_msgSend(a1[5], "autoUpdateCachedCountDownCharacteristics:", a1[4]);
    v22 = parseMessageSource(a1[6]);
    objc_msgSend(a1[4], "accessory");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v5, "isPrimary") & 1) == 0)
    {
      objc_msgSend(v5, "bridge");
      v6 = objc_claimAutoreleasedReturnValue();

      v5 = (void *)v6;
    }
    v7 = a1 + 4;
    v35[0] = a1[4];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v35, 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = a1 + 6;
    objc_msgSend(a1[6], "identifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[6], "applicationBundleIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = a1[6];
    v13 = a1[5];
    v12 = a1 + 5;
    objc_msgSend(v13, "home");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "userForHome:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v21) = 1;
    +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:", v23, v5, 0, v22, 1, v9, v21, v10, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*v12, "submitLogEvent:error:", v17, 0);
    v18 = *v12;
    objc_msgSend(*v7, "value");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "notifyValue:previousValue:error:forCharacteristic:requestMessage:", v19, v24, 0, *v7, *v8);

  }
  else
  {
    v20 = MEMORY[0x1E0C809B0];
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = __45__HMDHAPAccessory__handleCharacteristicRead___block_invoke_3;
    v30[3] = &unk_1E89AB6A8;
    objc_copyWeak(&v34, a1 + 8);
    v31 = a1[6];
    v32 = a1[7];
    v33 = a1[4];
    v25[0] = v20;
    v25[1] = 3221225472;
    v25[2] = __45__HMDHAPAccessory__handleCharacteristicRead___block_invoke_4;
    v25[3] = &unk_1E89B94D0;
    objc_copyWeak(&v29, a1 + 8);
    v26 = a1[6];
    v27 = a1[7];
    v28 = a1[4];
    objc_msgSend(v4, "_performOperation:linkType:operationBlock:errorBlock:", 2, 0, v30, v25);

    objc_destroyWeak(&v29);
    objc_destroyWeak(&v34);
  }

}

void __45__HMDHAPAccessory__handleCharacteristicRead___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 40), "begin");
    v7 = *(id *)(a1 + 40);
    objc_msgSend(WeakRetained, "_readValueForCharacteristic:hapAccessory:requestMessage:", *(_QWORD *)(a1 + 48), v3, *(_QWORD *)(a1 + 32));
    __HMFActivityScopeLeave();

  }
  else
  {
    v5 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "respondWithError:", v6);

  }
}

void __45__HMDHAPAccessory__handleCharacteristicRead___block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 40), "begin");
    v7 = *(id *)(a1 + 40);
    if ((objc_msgSend(WeakRetained, "_handleCharacteristicError:read:characteristic:didRelayMessage:", v3, 1, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32)) & 1) == 0)objc_msgSend(WeakRetained, "submitCharacteristicReadErrorLogEvent:message:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), v3);
    __HMFActivityScopeLeave();

  }
  else
  {
    v5 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "respondWithError:", v6);

  }
}

void __79__HMDHAPAccessory__relayReadFromCharacteristic_toResidentForMessage_viaDevice___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kRemoteMessageTransportAttributionKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setTransportType:", objc_msgSend(v6, "intValue"));

  objc_msgSend(*(id *)(a1 + 40), "submitLogEvent:error:", *(_QWORD *)(a1 + 32), v11);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v8 = WeakRetained;
  v9 = *(void **)(a1 + 48);
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_parseResponseFromRemotePeer:message:error:characteristic:", v5, *(_QWORD *)(a1 + 48), v11, *(_QWORD *)(a1 + 56));
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 54);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v10);

  }
}

void __78__HMDHAPAccessory__relayWriteToCharacteristic_toResidentForMessage_viaDevice___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v5 = a3;
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("kRemoteMessageTransportAttributionKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setTransportType:", objc_msgSend(v6, "intValue"));

  objc_msgSend(*(id *)(a1 + 40), "submitLogEvent:error:", *(_QWORD *)(a1 + 32), v11);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v8 = WeakRetained;
  v9 = *(void **)(a1 + 48);
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_parseResponseFromRemotePeer:message:error:characteristic:", v5, *(_QWORD *)(a1 + 48), v11, *(_QWORD *)(a1 + 56));
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 54);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v10);

  }
}

void __46__HMDHAPAccessory__handleCharacteristicWrite___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v7 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_wol_processReadWriteResponseForCharacteristic:isRead:error:", *(_QWORD *)(a1 + 40), 0, v8);
  objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", v5, v8);

}

void __46__HMDHAPAccessory__handleCharacteristicWrite___block_invoke_483(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 40), "begin");
    v7 = *(id *)(a1 + 40);
    objc_msgSend(WeakRetained, "_writeValue:forCharacteristic:hapAccessory:authorizationData:message:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v3, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32));
    __HMFActivityScopeLeave();

  }
  else
  {
    v5 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "respondWithError:", v6);

  }
}

void __46__HMDHAPAccessory__handleCharacteristicWrite___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 40), "begin");
    v7 = *(id *)(a1 + 40);
    if ((objc_msgSend(WeakRetained, "_handleCharacteristicError:read:characteristic:didRelayMessage:", v3, 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32)) & 1) == 0)objc_msgSend(WeakRetained, "submitCharacteristicWriteErrorLogEvent:startTime:message:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), v3, *(double *)(a1 + 64));
    __HMFActivityScopeLeave();

  }
  else
  {
    v5 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "respondWithError:", v6);

  }
}

void __46__HMDHAPAccessory__handleCharacteristicWrite___block_invoke_3(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      objc_msgSend(WeakRetained, "_performOperation:linkType:operationBlock:errorBlock:", 3, 0, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "begin");
      v9 = *(id *)(a1 + 40);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v5, "_handleCharacteristicError:read:characteristic:didRelayMessage:", v8, 0, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32)) & 1) == 0)objc_msgSend(v5, "submitCharacteristicWriteErrorLogEvent:startTime:message:error:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), v8, *(double *)(a1 + 80));

      __HMFActivityScopeLeave();
    }
  }
  else
  {
    v6 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "respondWithError:", v7);

  }
}

void __88__HMDHAPAccessory__writeValue_forCharacteristic_hapAccessory_authorizationData_message___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id WeakRetained;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD, _QWORD);
  _QWORD v21[4];
  id v22;
  id v23;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "submitLogEvent:error:", *(_QWORD *)(a1 + 40), v6);
  v7 = *(void **)(a1 + 32);
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v7, "uuid");

  objc_msgSend(v6, "domain");
  objc_msgSend(v6, "code");

  v9 = v6;
  v10 = v9;
  if (v9
    && ((v11 = v9, (objc_msgSend(v9, "isHMError") & 1) != 0)
     || (!objc_msgSend(v10, "isHAPError")
       ? (v13 = 74)
       : (v12 = objc_msgSend(v10, "code"), v12 > 0x20)
       ? (v13 = 52)
       : (v13 = qword_1CDB8F990[v12]),
         objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:underlyingError:", v13, CFSTR("Write Failed."), 0, 0, v10), v11 = (void *)objc_claimAutoreleasedReturnValue(), v10, v11)))
  {
    objc_msgSend(*(id *)(a1 + 72), "responseHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
      v16 = WeakRetained;
      if (WeakRetained)
      {
        objc_msgSend(WeakRetained, "workQueue");
        v17 = objc_claimAutoreleasedReturnValue();
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = __88__HMDHAPAccessory__writeValue_forCharacteristic_hapAccessory_authorizationData_message___block_invoke_2;
        v21[3] = &unk_1E89C2328;
        v22 = *(id *)(a1 + 72);
        v23 = v11;
        dispatch_async(v17, v21);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 72), "responseHandler");
        v20 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v20)[2](v20, v11, 0);

      }
    }
  }
  else
  {
    v18 = *(void **)(a1 + 32);
    objc_msgSend(v5, "value");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "notifyValue:previousValue:error:forCharacteristic:requestMessage:", v19, *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));

    v11 = 0;
  }

}

void __88__HMDHAPAccessory__writeValue_forCharacteristic_hapAccessory_authorizationData_message___block_invoke_2(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 40), 0);

}

void __101__HMDHAPAccessory__writeCharacteristicValues_hapAccessory_source_message_logEvent_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  void *v12;
  double v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v6)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v8 = v5;
    v7 = (void *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    if (v7)
    {
      v9 = *(_QWORD *)v27;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v27 != v9)
            objc_enumerationMutation(v8);
          v11 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v11, "error", (_QWORD)v26);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          if (v12)
          {
            objc_msgSend(v11, "error");
            v7 = (void *)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        v7 = (void *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_12:

  }
  objc_msgSend(MEMORY[0x1E0D33490], "currentTime", (_QWORD)v26);
  objc_msgSend(*(id *)(a1 + 32), "setLocalDurationInMilliseconds:", (uint64_t)((v13 - *(double *)(a1 + 88)) * 1000.0));
  objc_msgSend(*(id *)(a1 + 40), "submitLogEvent:error:", *(_QWORD *)(a1 + 32), v7);
  v14 = *(void **)(a1 + 40);
  v15 = *(id *)(a1 + 48);
  objc_msgSend(v14, "uuid");

  objc_msgSend(v7, "domain");
  objc_msgSend(v7, "code");

  v16 = v6;
  v17 = v16;
  if (v6)
  {
    v18 = v16;
    if ((objc_msgSend(v16, "isHMError") & 1) == 0)
    {
      if (objc_msgSend(v17, "isHAPError"))
      {
        v19 = objc_msgSend(v17, "code");
        if (v19 > 0x20)
          v20 = 52;
        else
          v20 = qword_1CDB8F990[v19];
      }
      else
      {
        v20 = 74;
      }
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:underlyingError:", v20, CFSTR("Write Failed."), 0, 0, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(*(id *)(a1 + 40), "populateHMDCharacteristicResponses:hapResponses:mapping:overallError:requests:", *(_QWORD *)(a1 + 56), v5, *(_QWORD *)(a1 + 64), v18, *(_QWORD *)(a1 + 72));
  v21 = *(_QWORD *)(a1 + 80);
  if (v21)
  {
    (*(void (**)(uint64_t, _QWORD))(v21 + 16))(v21, *(_QWORD *)(a1 + 56));
  }
  else if (v6)
  {
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v25;
      v32 = 2112;
      v33 = v17;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to write values for characteristics: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);
  }

}

void __84__HMDHAPAccessory_notifyValue_previousValue_error_forCharacteristic_requestMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(WeakRetained, "workQueue");
      v9 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __84__HMDHAPAccessory_notifyValue_previousValue_error_forCharacteristic_requestMessage___block_invoke_2;
      block[3] = &unk_1E89C20C8;
      v11 = *(id *)(a1 + 32);
      v12 = v5;
      v13 = v6;
      dispatch_async(v9, block);

    }
  }

}

uint64_t __84__HMDHAPAccessory_notifyValue_previousValue_error_forCharacteristic_requestMessage___block_invoke_448(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t __84__HMDHAPAccessory_notifyValue_previousValue_error_forCharacteristic_requestMessage___block_invoke_2_449(uint64_t result)
{
  if (!*(_BYTE *)(result + 40))
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void __84__HMDHAPAccessory_notifyValue_previousValue_error_forCharacteristic_requestMessage___block_invoke_2(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void __50__HMDHAPAccessory_handleUpdatePreferredMediaUser___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v9;
      v14 = 2112;
      v15 = v3;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to update preferred media user, error: %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v3);
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(void **)(a1 + 40);
      v12 = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Updated preferred media user to %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 32), "respondWithSuccess");
    objc_msgSend(v6, "postUpdateEventsIfDifferentWithPreferredMediaUUID:selectionType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  }

}

uint64_t __49__HMDHAPAccessory_routeUpdatePreferredMediaUser___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleUpdatePreferredMediaUser:", a2);
}

void __54__HMDHAPAccessory__handleHomeUserRemovedNotification___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v16 = 138544130;
      v17 = v9;
      v18 = 2112;
      v19 = v10;
      v20 = 2112;
      v21 = v11;
      v22 = 2112;
      v23 = v3;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Updated preferred media user %@ to owner: %@ with error: %@", (uint8_t *)&v16, 0x2Au);

    }
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 40);
      v16 = 138543874;
      v17 = v12;
      v18 = 2112;
      v19 = v13;
      v20 = 2112;
      v21 = v14;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Updated preferred media user %@ to owner: %@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v6, "setCachedRemovedUser:", 0);
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "postUpdateEventsIfDifferentWithPreferredMediaUUID:selectionType:", v15, 1);

  }
}

void __53__HMDHAPAccessory_handleHomeUserRemovedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", CFSTR("HMDUserNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  objc_msgSend(*(id *)(a1 + 40), "_handleHomeUserRemovedNotification:", v5);
}

void __121__HMDHAPAccessory__readCharacteristicValues_localOperationRequired_source_message_logEvent_completionHandler_errorBlock___block_invoke_413(uint64_t a1, char a2)
{
  id *v4;
  id WeakRetained;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24[2];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (id *)(a1 + 80);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  objc_msgSend(*(id *)(a1 + 32), "markWithReason:", CFSTR("Evaluated"));
  if ((a2 & 1) != 0 || *(_BYTE *)(a1 + 104))
  {
    v6 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(*(id *)(a1 + 32), "markWithReason:", CFSTR("Resolving link type")));
    v7 = WeakRetained;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 48), "shortDescription");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v26 = v9;
      v27 = 2112;
      v28 = v10;
      v29 = 2112;
      v30 = v11;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Performing a local read on the accessory: %@. %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    v12 = *(_QWORD *)(a1 + 88);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __121__HMDHAPAccessory__readCharacteristicValues_localOperationRequired_source_message_logEvent_completionHandler_errorBlock___block_invoke_416;
    v17[3] = &unk_1E89AB540;
    objc_copyWeak(v24, v4);
    v22 = *(id *)(a1 + 64);
    v18 = *(id *)(a1 + 32);
    v13 = *(id *)(a1 + 40);
    v14 = *(void **)(a1 + 96);
    v19 = v13;
    v24[1] = v14;
    v20 = *(id *)(a1 + 48);
    v21 = *(id *)(a1 + 56);
    v23 = *(id *)(a1 + 72);
    objc_msgSend(v7, "_performOperation:linkType:operationBlock:errorBlock:", v12, 0, v17, *(_QWORD *)(a1 + 64));

    objc_destroyWeak(v24);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 64);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);

  }
}

void __121__HMDHAPAccessory__readCharacteristicValues_localOperationRequired_source_message_logEvent_completionHandler_errorBlock___block_invoke_416(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "markWithFormat:", CFSTR("Reading via accessory: %tu"), objc_msgSend(v3, "linkType"));
    objc_msgSend(*(id *)(a1 + 32), "begin");
    v7 = *(id *)(a1 + 32);
    objc_msgSend(WeakRetained, "_readCharacteristicValues:hapAccessory:source:message:logEvent:completionHandler:", *(_QWORD *)(a1 + 40), v3, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));
    __HMFActivityScopeLeave();

  }
  else
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

    }
  }

}

void __94__HMDHAPAccessory__wakeAccessoryIfNeededForCharacteristicRequests_source_activity_completion___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  NSObject *v15;
  _QWORD block[4];
  id v17;
  id v18;
  BOOL v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = a1[4];
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v11;
      v22 = 2112;
      v23 = v6;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to wake/scan for accessory with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v12 = a1[4];
    v13 = a1[5];
    objc_msgSend(v12, "uuid");

    objc_msgSend(v6, "domain");
    objc_msgSend(v6, "code");
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v14;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Found suspended accessory", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(a1[4], "uuid");
    v13 = (id)objc_claimAutoreleasedReturnValue();
  }

  objc_msgSend(a1[4], "workQueue");
  v15 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __94__HMDHAPAccessory__wakeAccessoryIfNeededForCharacteristicRequests_source_activity_completion___block_invoke_412;
  block[3] = &unk_1E89B6038;
  v17 = a1[5];
  v18 = a1[6];
  v19 = v6 == 0;
  dispatch_async(v15, block);

}

uint64_t __94__HMDHAPAccessory__wakeAccessoryIfNeededForCharacteristicRequests_source_activity_completion___block_invoke_412(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), 0);
}

void __92__HMDHAPAccessory_readCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v5 = *(void **)(a1 + 32);
  if (!WeakRetained)
  {
    if (!v5)
      goto LABEL_20;
LABEL_19:
    objc_msgSend(v5, "setIsLocal:", 1);
    objc_msgSend(WeakRetained, "submitLogEvent:error:", *(_QWORD *)(a1 + 32), v3);
    goto LABEL_20;
  }
  if (v5)
    goto LABEL_19;
  v29 = v3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v8 = *(id *)(a1 + 40);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v31 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
        objc_msgSend(v13, "characteristic");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          objc_msgSend(v13, "characteristic");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "addObject:", v15);

        }
        else
        {
          objc_msgSend(v7, "addObject:", v13);
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    }
    while (v10);
  }

  v3 = v29;
  if (objc_msgSend(v7, "count"))
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = WeakRetained;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v35 = v19;
      v36 = 2112;
      v37 = v7;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Invalid read requests with missing characteristic: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
  }
  v28 = *(_QWORD *)(a1 + 72);
  objc_msgSend(*(id *)(a1 + 48), "applicationBundleIdentifier");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = *(void **)(a1 + 48);
  objc_msgSend(WeakRetained, "home");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "userForHome:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "uuid");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v27) = 0;
  +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:userUUID:", v6, WeakRetained, 0, v28, 1, 0, v27, v20, v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(WeakRetained, "submitLogEvent:error:", v25, v29);
LABEL_20:
  objc_msgSend(WeakRetained, "_updatedResponseTuplesForRequests:error:source:suspended:", *(_QWORD *)(a1 + 40), v3, *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void __122__HMDHAPAccessory__writeCharacteristicValues_localOperationRequired_source_message_completionHandler_logEvent_errorBlock___block_invoke(uint64_t a1, char a2)
{
  id *v4;
  id WeakRetained;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24[2];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (id *)(a1 + 80);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v6 = objc_msgSend(*(id *)(a1 + 32), "markWithReason:", CFSTR("Evaluated"));
  if ((a2 & 1) != 0 || *(_BYTE *)(a1 + 104))
  {
    v7 = *(_QWORD *)(a1 + 88);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __122__HMDHAPAccessory__writeCharacteristicValues_localOperationRequired_source_message_completionHandler_logEvent_errorBlock___block_invoke_2;
    v17[3] = &unk_1E89AB540;
    objc_copyWeak(v24, v4);
    v22 = *(id *)(a1 + 64);
    v18 = *(id *)(a1 + 32);
    v8 = *(id *)(a1 + 40);
    v9 = *(void **)(a1 + 96);
    v19 = v8;
    v24[1] = v9;
    v20 = *(id *)(a1 + 48);
    v21 = *(id *)(a1 + 56);
    v23 = *(id *)(a1 + 72);
    objc_msgSend(WeakRetained, "_performOperation:linkType:operationBlock:errorBlock:", v7, 0, v17, *(_QWORD *)(a1 + 64));

    objc_destroyWeak(v24);
  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0](v6);
    v11 = WeakRetained;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "shortDescription");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v13;
      v27 = 2112;
      v28 = v14;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEBUG, "%{public}@Should dispatch accessory to resident. %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v15 = *(_QWORD *)(a1 + 64);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);

  }
}

void __122__HMDHAPAccessory__writeCharacteristicValues_localOperationRequired_source_message_completionHandler_logEvent_errorBlock___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "markWithFormat:", CFSTR("Writing via accessory: %tu"), objc_msgSend(v3, "linkType"));
    objc_msgSend(*(id *)(a1 + 32), "begin");
    v7 = *(id *)(a1 + 32);
    objc_msgSend(WeakRetained, "_writeCharacteristicValues:hapAccessory:source:message:logEvent:completionHandler:", *(_QWORD *)(a1 + 40), v3, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));
    __HMFActivityScopeLeave();

  }
  else
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

    }
  }

}

void __80__HMDHAPAccessory_wakeOrScanForSuspendedAccessoryForRequests_source_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Wireless power on completed with error: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void __80__HMDHAPAccessory_wakeOrScanForSuspendedAccessoryForRequests_source_completion___block_invoke_392(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543618;
    v13 = v7;
    v14 = 2112;
    v15 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Scanning for suspended accessory completed with error: %@", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  if (v3
    || (objc_msgSend(*(id *)(a1 + 40), "na_any:", &__block_literal_global_395) & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 32), "isReachable") & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_updatedResponseTuplesForRequests:error:source:suspended:", v10, v11, *(_QWORD *)(a1 + 56), 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t __80__HMDHAPAccessory_wakeOrScanForSuspendedAccessoryForRequests_source_completion___block_invoke_393(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  objc_opt_class();
  v3 = objc_opt_isKindOfClass() & (v2 != 0);

  return v3;
}

void __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void (**v4)(_QWORD, _QWORD);
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  void *v9;
  id v10;
  void (**v11)(_QWORD, _QWORD);

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "begin");
  v4 = *(void (***)(_QWORD, _QWORD))(a1 + 48);
  if (v4)
  {
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
    {
      v6 = MEMORY[0x1E0C809B0];
      v7 = 3221225472;
      v8 = __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_2;
      v9 = &unk_1E89C1D68;
      v11 = v4;
      v10 = v3;
      dispatch_async(v5, &v6);

    }
    else
    {
      ((void (**)(_QWORD, id))v4)[2](v4, v3);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "end", v6, v7, v8, v9);
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

}

void __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_3(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  _QWORD aBlock[4];
  id v6;
  id v7;
  id v8;
  id v9;
  id v10[2];
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_4;
  aBlock[3] = &unk_1E89AB4D0;
  objc_copyWeak(v10, &location);
  v6 = *(id *)(a1 + 40);
  v2 = *(id *)(a1 + 48);
  v3 = *(void **)(a1 + 80);
  v7 = v2;
  v10[1] = v3;
  v8 = *(id *)(a1 + 56);
  v9 = *(id *)(a1 + 72);
  v4 = _Block_copy(aBlock);
  objc_msgSend(*(id *)(a1 + 32), "_wakeAccessoryIfNeededForCharacteristicRequests:source:activity:completion:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), v4);

  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
}

void __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_4(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, void *);
  void *v16;
  id v17;
  id v18;
  _QWORD aBlock[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24[2];
  char v25;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v7 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_5;
  aBlock[3] = &unk_1E89AB4A8;
  objc_copyWeak(v24, (id *)(a1 + 64));
  v20 = *(id *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v9 = *(void **)(a1 + 72);
  v21 = v8;
  v24[1] = v9;
  v22 = *(id *)(a1 + 48);
  v25 = a2;
  v23 = *(id *)(a1 + 56);
  v10 = _Block_copy(aBlock);
  v11 = v10;
  if (v5)
  {
    (*((void (**)(void *, id))v10 + 2))(v10, v5);
  }
  else
  {
    objc_msgSend(WeakRetained, "_wol_updateWakingViaCharacteristicForWriteRequests:", *(_QWORD *)(a1 + 40));
    v13 = v7;
    v14 = 3221225472;
    v15 = __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_390;
    v16 = &unk_1E89C1648;
    objc_copyWeak(&v18, (id *)(a1 + 64));
    v17 = *(id *)(a1 + 56);
    v12 = _Block_copy(&v13);
    objc_msgSend(WeakRetained, "_writeCharacteristicValues:localOperationRequired:source:message:completionHandler:logEvent:errorBlock:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48), v12, *(_QWORD *)(a1 + 32), v11, v13, v14, v15, v16);

    objc_destroyWeak(&v18);
  }

  objc_destroyWeak(v24);
}

void __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_5(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v5 = *(void **)(a1 + 32);
  if (!WeakRetained)
  {
    if (!v5)
      goto LABEL_23;
LABEL_22:
    objc_msgSend(v5, "setIsLocal:", 1);
    objc_msgSend(WeakRetained, "submitLogEvent:error:", *(_QWORD *)(a1 + 32), v3);
    goto LABEL_23;
  }
  if (v5)
    goto LABEL_22;
  v31 = v3;
  v32 = WeakRetained;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 40), "count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v9 = *(id *)(a1 + 40);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v34 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v14, "characteristic");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          objc_msgSend(v14, "characteristic");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "addObject:", v16);

          objc_msgSend(v14, "value");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v17)
          {
            objc_msgSend(v7, "addObject:", v17);
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0C99E38], "null");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "addObject:", v18);

          }
        }
        else
        {
          objc_msgSend(v8, "addObject:", v14);
        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    }
    while (v11);
  }

  v3 = v31;
  if (objc_msgSend(v8, "count"))
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = v32;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v22;
      v39 = 2112;
      v40 = v8;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Invalid write requests with missing characteristic: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
  }
  v30 = *(_QWORD *)(a1 + 72);
  objc_msgSend(*(id *)(a1 + 48), "applicationBundleIdentifier");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = *(void **)(a1 + 48);
  WeakRetained = v32;
  objc_msgSend(v32, "home");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "userForHome:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "uuid");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:userUUID:writtenValues:](HMDCharacteristicReadWriteLogEvent, "eventWithCharacteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:userUUID:writtenValues:", v6, v32, 0, v30, 0, 1, 0, v29, v26, v7);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v32, "submitLogEvent:error:", v27, v31);
LABEL_23:
  objc_msgSend(WeakRetained, "_updatedResponseTuplesForRequests:error:source:suspended:", *(_QWORD *)(a1 + 40), v3, *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_390(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "_wol_updateWakingViaCharacteristicForWriteResponses:", v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t __93__HMDHAPAccessory_writeCharacteristicValues_source_message_queue_logEvent_completionHandler___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __103__HMDHAPAccessory__retrieveHAPAccessoryToPerformOperation_linkType_operationBlock_errorBlock_activity___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  __CFString *v18;
  uint64_t v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  __CFString *v26;
  __CFString *v27;
  unint64_t v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  unint64_t v32;
  __CFString *v33;
  __CFString *v34;
  int v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  __CFString *v40;
  __int16 v41;
  __CFString *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (v3)
    {
      objc_msgSend(WeakRetained, "uuid");

      objc_msgSend(v3, "domain");
      objc_msgSend(v3, "code");
      if (objc_msgSend(v3, "isHMError") && objc_msgSend(v3, "code") == 53)
      {
        v6 = v3;
        goto LABEL_10;
      }
      v12 = (void *)MEMORY[0x1D17BA0A0]();
      v13 = v5;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "identifier");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = *(_QWORD *)(a1 + 64);
        if (v17 > 0xA)
          v18 = CFSTR("Undefined");
        else
          v18 = off_1E89ABEC8[v17];
        v27 = v18;
        v28 = *(_QWORD *)(a1 + 72);
        if (v28 > 2)
          v29 = CFSTR("Undefined");
        else
          v29 = off_1E89ABEB0[v28];
        v30 = v29;
        v35 = 138544130;
        v36 = v15;
        v37 = 2112;
        v38 = v16;
        v39 = 2112;
        v40 = v27;
        v41 = 2112;
        v42 = v30;
        _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ '%@' operation: Unable to retrieve HAPAccessory for linkType %@ - trying the next link", (uint8_t *)&v35, 0x2Au);

      }
      objc_autoreleasePoolPop(v12);
      objc_msgSend(v13, "_performOperation:linkType:operationBlock:errorBlock:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      v11 = 0;
LABEL_28:
      v6 = 0;
      goto LABEL_29;
    }
    objc_msgSend(WeakRetained, "matchingHAPAccessoryWithLinkType:", *(_QWORD *)(a1 + 72));
    v19 = objc_claimAutoreleasedReturnValue();
    if (v19)
    {
      v11 = (void *)v19;
      if (*(_QWORD *)(a1 + 40))
      {
        objc_msgSend(v5, "uuid");

        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      }
      goto LABEL_28;
    }
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = v5;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "identifier");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = *(_QWORD *)(a1 + 64);
      if (v25 > 0xA)
        v26 = CFSTR("Undefined");
      else
        v26 = off_1E89ABEC8[v25];
      v31 = v26;
      v32 = *(_QWORD *)(a1 + 72);
      if (v32 > 2)
        v33 = CFSTR("Undefined");
      else
        v33 = off_1E89ABEB0[v32];
      v34 = v33;
      v35 = 138544130;
      v36 = v23;
      v37 = 2112;
      v38 = v24;
      v39 = 2112;
      v40 = v31;
      v41 = 2112;
      v42 = v34;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Accessory %@ '%@' operation: Retrieval succeeded but no HAPAccessory of linkType %@", (uint8_t *)&v35, 0x2Au);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(v21, "uuid");

  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = 138543362;
      v36 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Accessory went away", (uint8_t *)&v35, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
LABEL_10:
    v10 = *(_QWORD *)(a1 + 48);
    if (v10)
      (*(void (**)(uint64_t, id))(v10 + 16))(v10, v6);
  }
  v11 = 0;
LABEL_29:

}

void __111__HMDHAPAccessory__retrieveHAPAccessoryToPerformOperation_linkType_retries_operationBlock_errorBlock_activity___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543874;
    v13 = v8;
    v14 = 2112;
    v15 = v3;
    v16 = 2112;
    v17 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Retrieving the accessory server failed with error: %@. Retries: (%@)", (uint8_t *)&v12, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  if (*(_QWORD *)(a1 + 64) && objc_msgSend(v3, "isHMError") && objc_msgSend(v3, "code") == 4)
  {
    objc_msgSend(v6, "_retrieveHAPAccessoryToPerformOperation:linkType:retries:operationBlock:errorBlock:activity:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64) - 1, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v10 = _Block_copy(*(const void **)(a1 + 48));
    v11 = v10;
    if (v10)
      (*((void (**)(void *, id))v10 + 2))(v10, v3);

  }
}

uint64_t __72__HMDHAPAccessory__performOperation_linkType_operationBlock_errorBlock___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_retrieveHAPAccessoryToPerformOperation:linkType:retries:operationBlock:errorBlock:activity:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), 1, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
}

uint64_t __71__HMDHAPAccessory_performOperation_linkType_operationBlock_errorBlock___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_performOperation:linkType:operationBlock:errorBlock:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __88__HMDHAPAccessory_unconfigureAccessoryWithServerIdentifier_linkType_updateReachability___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  uint8_t v44[128];
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  __CFString *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = WeakRetained;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 48);
    if (v8 > 2)
      v9 = CFSTR("Undefined");
    else
      v9 = off_1E89ABEB0[v8];
    v10 = v9;
    *(_DWORD *)buf = 138543874;
    v46 = v6;
    v47 = 2112;
    v48 = v7;
    v49 = 2112;
    v50 = v10;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Unconfiguring HAPAccessory with serverIdentifier %@/%@...", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend(v4, "matchingTransportInformationWithServerIdentifier:linkType:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "setHapAccessory:", 0);
    if (objc_msgSend(v12, "linkType") != 2)
      objc_msgSend(v12, "setReachable:", 0);
  }
  v34 = v12;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  objc_msgSend(v4, "services");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v40;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v40 != v16)
          objc_enumerationMutation(v13);
        v18 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        objc_msgSend(v18, "characteristics");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
        if (v20)
        {
          v21 = v20;
          v22 = *(_QWORD *)v36;
          do
          {
            for (j = 0; j != v21; ++j)
            {
              if (*(_QWORD *)v36 != v22)
                objc_enumerationMutation(v19);
              objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * j), "unconfigureForServerIdentifier:linkType:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
            }
            v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
          }
          while (v21);
        }

      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
    }
    while (v15);
  }

  v24 = (void *)MEMORY[0x1D17BA0A0]();
  v25 = v4;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v46 = v27;
    _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Sending disconnected notification", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v24);
  logAndPostNotification(CFSTR("HMDAccessoryDisconnectedNotification"), v25, 0);
  if (*(_BYTE *)(a1 + 56))
    v28 = objc_msgSend(v25, "_updateReachability");
  v29 = (void *)MEMORY[0x1D17BA0A0](v28);
  v30 = v25;
  HMFGetOSLogHandle();
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "isSecureSessionEstablished");
    HMFBooleanToString();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v46 = v32;
    v47 = 2112;
    v48 = v33;
    _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@Sending accessory unconfigured notification, Secure Session: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v29);
  logAndPostNotification(CFSTR("HMDAccessoryUnconfiguredNotification"), v30, 0);

}

void __30__HMDHAPAccessory_unconfigure__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_deregisterAllClientsFromSessionRestore");
  objc_msgSend(WeakRetained, "stopPing");
  objc_msgSend(WeakRetained, "unregisterFromAccessoryServer");
  objc_msgSend(WeakRetained, "cancelPowerOn");
  objc_msgSend(WeakRetained, "stopScan");
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend(WeakRetained, "services");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v18;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v18 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v6);
        v13 = 0u;
        v14 = 0u;
        v15 = 0u;
        v16 = 0u;
        objc_msgSend(v7, "characteristics", 0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v14;
          do
          {
            v12 = 0;
            do
            {
              if (*(_QWORD *)v14 != v11)
                objc_enumerationMutation(v8);
              objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v12++), "unconfigure");
            }
            while (v10 != v12);
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
          }
          while (v10);
        }

        ++v6;
      }
      while (v6 != v4);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v4);
  }

}

uint64_t __84__HMDHAPAccessory_configureWithAccessory_homeNotificationsEnabled_queue_completion___block_invoke_355(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v3, "type");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "service");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v2, "generateNotificationOnConfigurationForCharacteristicType:serviceType:", v4, v6);

  return v7;
}

void __84__HMDHAPAccessory_configureWithAccessory_homeNotificationsEnabled_queue_completion___block_invoke_356(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __84__HMDHAPAccessory_configureWithAccessory_homeNotificationsEnabled_queue_completion___block_invoke_357(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __80__HMDHAPAccessory_enableNotificationsWithHAPAccessory_homeNotificationsEnabled___block_invoke_353(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  objc_msgSend(v3, "type");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "service");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (*(_BYTE *)(a1 + 48) && (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v3) & 1) == 0)
    v7 = objc_msgSend(*(id *)(a1 + 40), "shouldEnableHomeNotificationForCharacteristicType:serviceType:", v4, v6);
  else
    v7 = 0;

  return v7;
}

BOOL __80__HMDHAPAccessory_enableNotificationsWithHAPAccessory_homeNotificationsEnabled___block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a2, "threshold");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

void __74__HMDHAPAccessory__notificationRegistrationsByClientIDForCharacteristics___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDCharacteristicNotificationChangeThreshold *v10;
  uint64_t v11;
  void *v12;
  HMDCharacteristicNotificationChangeThreshold *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v17 = v3;
  objc_msgSend(v3, "clientID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(void **)(a1 + 32);
    objc_msgSend(v17, "clientID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, v9);

  }
  v10 = [HMDCharacteristicNotificationChangeThreshold alloc];
  v11 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v17, "updateThreshold");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDCharacteristicNotificationChangeThreshold initWithCharacteristic:threshold:](v10, "initWithCharacteristic:threshold:", v11, v12);

  v14 = *(void **)(a1 + 32);
  objc_msgSend(v17, "clientID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKeyedSubscript:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v13);

}

uint64_t __51__HMDHAPAccessory_isThreadSecureSessionEstablished__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = a2;
  if (objc_msgSend(v2, "linkType") == 1)
  {
    objc_msgSend(v2, "hapAccessory");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "server");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v5 = v4;
    else
      v5 = 0;
    v6 = v5;

    v7 = objc_msgSend(v6, "isSecuritySessionOpen");
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t __57__HMDHAPAccessory_isMatterLocalLinkConnectedAndPreferred__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;

  objc_msgSend(a2, "hapAccessory");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "server");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  v6 = objc_msgSend(v5, "hasPreferredLocalLink");
  return v6;
}

uint64_t __37__HMDHAPAccessory_isBLELinkConnected__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = a2;
  if (objc_msgSend(v2, "linkType") == 2)
  {
    objc_msgSend(v2, "hapAccessory");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "server");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isBLELinkConnected");

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t __48__HMDHAPAccessory_autoConfigureTargetController__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_autoConfigureTargetController");
}

void __49__HMDHAPAccessory__autoConfigureTargetController__block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!a2 && WeakRetained)
  {
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "targetControllerManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "autoConfigureTargets");

    WeakRetained = v5;
  }

}

uint64_t __60__HMDHAPAccessory__configureTargetControllerWithCompletion___block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientsOfTargetControlSupportUpdate");
}

uint64_t __59__HMDHAPAccessory_configureTargetControllerWithCompletion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_configureTargetControllerWithCompletion:", *(_QWORD *)(a1 + 40));
}

uint64_t __60__HMDHAPAccessory_notifyClientsOfTargetControlSupportUpdate__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientsOfTargetControlSupportUpdate");
}

void __60__HMDHAPAccessory__handleServiceRemovedTransaction_message___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedServicesForProfilesAndControllers:", 0);
  objc_msgSend(*(id *)(a1 + 32), "updatePrimaryServiceIfNeeded");
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("kHMDNotificationServicesUpdated"), *(_QWORD *)(a1 + 32), 0);

  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "primaryService");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "name");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "primaryService");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138544386;
    v14 = v6;
    v15 = 2112;
    v16 = v8;
    v17 = 2112;
    v18 = v10;
    v19 = 2112;
    v20 = v11;
    v21 = 2112;
    v22 = v12;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Current primary service of accessory is %@(%@) after removing service %@(%@)", (uint8_t *)&v13, 0x34u);

  }
  objc_autoreleasePoolPop(v3);
}

void __56__HMDHAPAccessory__handleAddServiceTransaction_message___block_invoke(uint64_t a1)
{
  uint64_t i;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  int v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  void *v38;
  id obj;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  const __CFString *v54;
  uint64_t v55;
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  void *v63;
  __int16 v64;
  void *v65;
  _BYTE v66[128];
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "transportInformationInstances");
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v42 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v67, 16);
  if (v42)
  {
    v40 = *(_QWORD *)v51;
    do
    {
      for (i = 0; i != v42; ++i)
      {
        if (*(_QWORD *)v51 != v40)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * i), "hapAccessory");
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v44 = v3;
        objc_msgSend(v3, "services");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v46, v66, 16);
        if (v5)
        {
          v6 = v5;
          v7 = *(_QWORD *)v47;
          do
          {
            for (j = 0; j != v6; ++j)
            {
              if (*(_QWORD *)v47 != v7)
                objc_enumerationMutation(v4);
              v9 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
              objc_msgSend(v9, "instanceID");
              v10 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(a1 + 40), "instanceID");
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              v12 = objc_msgSend(v10, "isEqual:", v11);

              if (v12)
                v13 = (id)objc_msgSend(*(id *)(a1 + 40), "configureWithService:accessory:shouldRead:added:", v9, *(_QWORD *)(a1 + 32), 0, 1);
            }
            v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v46, v66, 16);
          }
          while (v6);
        }

      }
      v42 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v67, 16);
    }
    while (v42);
  }

  objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedServicesForProfilesAndControllers:", 0);
  objc_msgSend(*(id *)(a1 + 32), "primaryService");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "updatePrimaryServiceIfNeeded");
  if (objc_msgSend(*(id *)(a1 + 32), "_serviceSupportsMinimumUserPrivilege:", *(_QWORD *)(a1 + 40)))
    objc_msgSend(*(id *)(a1 + 32), "_reconcileAccessControlSetting");
  objc_msgSend(*(id *)(a1 + 32), "hapMetadata");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "type");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v15, "shouldFilterServiceOfTypeFromApp:", v16);

  if (v14)
  {
    objc_msgSend(*(id *)(a1 + 32), "primaryService");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18 == v14)
      v19 = v17;
    else
      v19 = 0;
    if ((v19 & 1) == 0)
      goto LABEL_24;
  }
  else if ((v17 & 1) == 0)
  {
LABEL_24:
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "postNotificationName:object:userInfo:", CFSTR("kHMDNotificationServicesUpdated"), *(_QWORD *)(a1 + 32), 0);

  }
  v21 = (void *)MEMORY[0x1D17BA0A0]();
  v22 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    v45 = v14;
    HMFGetLogIdentifier();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "primaryService");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "name");
    v24 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "primaryService");
    v43 = v21;
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "uuid");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v57 = v38;
    v58 = 2112;
    v59 = v24;
    v29 = (void *)v24;
    v60 = 2112;
    v61 = v26;
    v62 = 2112;
    v63 = v27;
    v64 = 2112;
    v65 = v28;
    v14 = v45;
    _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_DEBUG, "%{public}@Current primary service of accessory is %@(%@) after adding service %@(%@)", buf, 0x34u);

    v21 = v43;
  }

  objc_autoreleasePoolPop(v21);
  v30 = objc_msgSend(*(id *)(a1 + 32), "supportsTargetController");
  v31 = objc_msgSend(*(id *)(a1 + 32), "supportsSiri");
  if (!*(_BYTE *)(a1 + 56) && (v30 & 1) != 0 || (!*(_BYTE *)(a1 + 57) ? (v32 = v31) : (v32 = 0), v32 == 1))
    objc_msgSend(*(id *)(a1 + 32), "_configureTargetControllerWithCompletion:", &__block_literal_global_329);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = *(_QWORD *)(a1 + 32);
  v34 = *(_QWORD *)(a1 + 40);
  v54 = CFSTR("HMDServiceNotificationKey");
  v55 = v34;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v55, &v54, 1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "postNotificationName:object:userInfo:", CFSTR("HMDAccessoryServiceAddedNotification"), v35, v36);

  v37 = *(NSObject **)(a1 + 48);
  if (v37)
    dispatch_group_leave(v37);

}

uint64_t __50__HMDHAPAccessory_serviceWithSPIClientIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "spiClientIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

void __49__HMDHAPAccessory_pairingsWithCompletionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v11;
    v18 = 2112;
    v19 = v6;
    v12 = "%{public}@Failed to list pairings with error: %@";
    v13 = v10;
    v14 = OS_LOG_TYPE_DEFAULT;
  }
  else
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v11;
    v18 = 2112;
    v19 = v5;
    v12 = "%{public}@Successfully requested pairing identities: %@";
    v13 = v10;
    v14 = OS_LOG_TYPE_INFO;
  }
  _os_log_impl(&dword_1CD062000, v13, v14, v12, (uint8_t *)&v16, 0x16u);

LABEL_7:
  objc_autoreleasePoolPop(v7);
  v15 = *(_QWORD *)(a1 + 40);
  if (v15)
    (*(void (**)(uint64_t, id, id))(v15 + 16))(v15, v5, v6);

}

void __54__HMDHAPAccessory_verifyPairingWithCompletionHandler___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v2 = MEMORY[0x1E0C809B0];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __54__HMDHAPAccessory_verifyPairingWithCompletionHandler___block_invoke_2;
  v6[3] = &unk_1E89B33D8;
  v3 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v4[0] = v2;
  v4[1] = 3221225472;
  v4[2] = __54__HMDHAPAccessory_verifyPairingWithCompletionHandler___block_invoke_299;
  v4[3] = &unk_1E89C1A48;
  v5 = *(id *)(a1 + 40);
  objc_msgSend(v7, "_performOperation:linkType:operationBlock:errorBlock:", 10, 0, v6, v4);

}

void __54__HMDHAPAccessory_verifyPairingWithCompletionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "findCharacteristicType:forServiceType:", *MEMORY[0x1E0D15F98], *MEMORY[0x1E0D16198]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "characteristicForHAPAccessory:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "readValueForCharacteristic:timeout:completionQueue:completionHandler:", v5, v6, *(_QWORD *)(a1 + 40), 0.0);
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "instanceID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "characteristicType");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "server");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = v7;
      objc_msgSend(v15, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v18 = v10;
      v19 = 2112;
      v20 = v11;
      v21 = 2112;
      v22 = v12;
      v23 = 2112;
      v24 = v13;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot map HMDCharacteristic %@/%@ to a HAPCharacteristic for server %@ to verify pairing", buf, 0x2Au);

      v7 = v16;
    }

    objc_autoreleasePoolPop(v7);
    v14 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v14 + 16))(v14, 0, v6);
  }

}

uint64_t __54__HMDHAPAccessory_verifyPairingWithCompletionHandler___block_invoke_299(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __48__HMDHAPAccessory_setPairingUsername_publicKey___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = 138543874;
    v10 = v5;
    v11 = 2112;
    v12 = v6;
    v13 = 2112;
    v14 = v7;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Going to update username & public key : [%@ / %@]", (uint8_t *)&v9, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "setPublicKey:", *(_QWORD *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "setPairingUsername:", *(_QWORD *)(a1 + 40));
}

void __43__HMDHAPAccessory_handlePairedStateChange___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v19 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of a change in pairing state", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = (void *)MEMORY[0x1E0D285F8];
  v7 = *MEMORY[0x1E0CBAA60];
  v8 = objc_alloc(MEMORY[0x1E0D285D8]);
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v8, "initWithTarget:", v9);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 40), CFSTR("kAccessoryIsPairedKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "messageWithName:destination:payload:", v7, v10, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "messageSendPolicy");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setSendPolicy:", v14);

  objc_msgSend(*(id *)(a1 + 32), "msgDispatcher");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "sendMessage:", v13);

}

void __32__HMDHAPAccessory_timerDidFire___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "accessoryDiscoveryBackoffTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2 == v3)
  {
    objc_msgSend(*(id *)(a1 + 40), "_handleDiscoveryBackoffTimerFired");
  }
  else
  {
    v4 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "accessoryKeyRefreshTimer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4 == v5)
    {
      objc_msgSend(*(id *)(a1 + 40), "_handleKeyRefreshTimerFired");
    }
    else
    {
      v6 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "sessionRestoreTimer");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6 == v7)
        objc_msgSend(*(id *)(a1 + 40), "_handleSessionRestoreTimerFired");
    }
  }
}

void __60__HMDHAPAccessory_handleCharacteristicsChangedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "__checkLowBatteryUpdatedNotification:", *(_QWORD *)(a1 + 40));
  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "userInfo");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "__handleCharacteristicsChangedPayload:", v3);

}

id __57__HMDHAPAccessory___handleCharacteristicsChangedPayload___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "service");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "getOrCreateServiceUpdateTransactionForKey:fromDictionary:", v4, *(_QWORD *)(a1 + 48));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void __58__HMDHAPAccessory__updateAuthMethodWithServer_completion___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD block[4];
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __58__HMDHAPAccessory__updateAuthMethodWithServer_completion___block_invoke_2;
  block[3] = &unk_1E89BB0A0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(a1 + 40);
  v11 = v5;
  v12 = v7;
  v13 = v8;
  v14 = *(id *)(a1 + 48);
  v15 = a3;
  v9 = v5;
  dispatch_async(v6, block);

}

uint64_t __58__HMDHAPAccessory__updateAuthMethodWithServer_completion___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t result;
  uint64_t (*v23)(void);
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  int v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "domain");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0D160B0]))
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "code");

      if (v4 == 3)
      {
        v5 = (void *)MEMORY[0x1D17BA0A0]();
        v6 = *(id *)(a1 + 40);
        HMFGetOSLogHandle();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_msgSend(*(id *)(a1 + 48), "configNumber");
          v31 = 138543618;
          v32 = v8;
          v33 = 1024;
          LODWORD(v34) = v9;
          _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Accessory doesn't support the new protocol (c#: %d)", (uint8_t *)&v31, 0x12u);

        }
        objc_autoreleasePoolPop(v5);
        v10 = *(void **)(a1 + 40);
        v11 = objc_msgSend(*(id *)(a1 + 48), "configNumber");
        v12 = &unk_1E8B32EC8;
        v13 = v10;
LABEL_15:
        objc_msgSend(v13, "setInternalEnhancedAuthMethod:configNumber:", v12, v11);
        result = *(_QWORD *)(a1 + 56);
        if (!result)
          return result;
        v23 = *(uint64_t (**)(void))(result + 16);
        return v23();
      }
    }
    else
    {

    }
    v24 = (void *)MEMORY[0x1D17BA0A0]();
    v25 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = *(void **)(a1 + 32);
      v29 = objc_msgSend(*(id *)(a1 + 48), "configNumber");
      v31 = 138543874;
      v32 = v27;
      v33 = 2112;
      v34 = v28;
      v35 = 1024;
      v36 = v29;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_ERROR, "%{public}@Unexpected error validating auth method: %@ (c#: %d)", (uint8_t *)&v31, 0x1Cu);

    }
    objc_autoreleasePoolPop(v24);
    v30 = *(void **)(a1 + 40);
    v11 = objc_msgSend(*(id *)(a1 + 48), "configNumber");
    v13 = v30;
    v12 = 0;
    goto LABEL_15;
  }
  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v15 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HAPAuthMethodToString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(*(id *)(a1 + 48), "configNumber");
    v31 = 138543874;
    v32 = v17;
    v33 = 2112;
    v34 = v18;
    v35 = 1024;
    v36 = v19;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Saving validated auth method: %@ (c#: %d)", (uint8_t *)&v31, 0x1Cu);

  }
  objc_autoreleasePoolPop(v14);
  v20 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 64));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setInternalEnhancedAuthMethod:configNumber:", v21, objc_msgSend(*(id *)(a1 + 48), "configNumber"));

  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    v23 = *(uint64_t (**)(void))(result + 16);
    return v23();
  }
  return result;
}

void __54__HMDHAPAccessory__renameAccessory_resetName_message___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "name");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    if (v5 && !*(_BYTE *)(a1 + 48))
    {
      v7 = CFSTR("kAccessoryName");
      v8[0] = v5;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v4 = 0;
    }

  }
  objc_msgSend(*(id *)(a1 + 40), "respondWithPayload:error:", v4, v3);

}

void __41__HMDHAPAccessory_handleUpdatedPassword___block_invoke(uint64_t a1)
{
  __handleUpdatedPassword(*(void **)(a1 + 32), *(void **)(a1 + 40));
}

void __53__HMDHAPAccessory_handleUpdatedMinimumUserPrivilege___block_invoke(uint64_t a1)
{
  __handleUpdatedMinimumUserPrivilege(*(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t __53__HMDHAPAccessory__handleUpdatedServicesForWalletKey__block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "type");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("00000266-0000-1000-8000-0026BB765291"));

  return v3;
}

uint64_t __53__HMDHAPAccessory__handleUpdatedServicesForWalletKey__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "type");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CB9A80]);

  return v3;
}

uint64_t __35__HMDHAPAccessory_saveTargetUUIDs___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_saveTargetUUIDs:", *(_QWORD *)(a1 + 40));
}

uint64_t __39__HMDHAPAccessory_saveHardwareSupport___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_saveHardwareSupport:", *(unsigned __int8 *)(a1 + 40));
}

void __33__HMDHAPAccessory_updateSymptoms__block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  HMDAccessorySymptomHandler *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  if (objc_msgSend(*(id *)(a1 + 32), "shouldConfigureTargetController")
    && +[HMDDeviceCapabilities supportsSymptomsHandler](HMDDeviceCapabilities, "supportsSymptomsHandler"))
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "targetUUIDs");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "count");

    if (!v3)
    {
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBA8E0]), "initWithType:", 12);
      objc_msgSend(v16, "addObject:", v4);

    }
    objc_msgSend(*(id *)(a1 + 32), "symptomsHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "symptoms");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      v8 = v6;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E60], "set");
      v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    v9 = v8;

    if ((objc_msgSend(v9, "isEqualToSet:", v16) & 1) == 0)
    {
      if (objc_msgSend(v16, "count"))
      {
        v10 = -[HMDAccessorySymptomHandler initWithAccessory:]([HMDAccessorySymptomHandler alloc], "initWithAccessory:", *(_QWORD *)(a1 + 32));
        objc_msgSend(*(id *)(a1 + 32), "setSymptomsHandler:", v10);

        objc_msgSend(*(id *)(a1 + 32), "symptomsHandler");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "configure");

        objc_msgSend(*(id *)(a1 + 32), "symptomsHandler");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "updateSymptoms:", v16);

      }
      else
      {
        objc_msgSend(*(id *)(a1 + 32), "setSymptomsHandler:", 0);
      }
      objc_msgSend(*(id *)(a1 + 32), "home");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "homeManager");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("AccessoryHasSymptomsHandlerUpdated"), v15, 1);

    }
  }
}

uint64_t __42__HMDHAPAccessory_handleUpdatedAuthMethod__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedAuthMethod");
}

void __48__HMDHAPAccessory__postUpdateEventsIfDifferent___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Error in forwarding the primary user event: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }

}

void __83__HMDHAPAccessory_postUpdateEventsIfDifferentWithPreferredMediaUUID_selectionType___block_invoke(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  v2 = objc_alloc(MEMORY[0x1E0CBA258]);
  objc_msgSend(*(id *)(a1 + 32), "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (id)objc_msgSend(v2, "initWithUUIDString:selectionType:", v3, *(_QWORD *)(a1 + 48));

  objc_msgSend(*(id *)(a1 + 40), "_postUpdateEventsIfDifferent:", v4);
}

void __48__HMDHAPAccessory_configureBulletinNotification__block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "services", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v1, "copy");

  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "configureBulletinNotification");
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void __47__HMDHAPAccessory_setDefaultPreferredMediaUser__block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!a2)
  {
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "postUpdateEventsIfDifferentWithPreferredMediaUUID:selectionType:", *(_QWORD *)(a1 + 32), 1);
    WeakRetained = v5;
  }

}

void __93__HMDHAPAccessory_configureWithHome_msgDispatcher_configurationTracker_initialConfiguration___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  uint64_t v32;
  void *v33;
  id v34;
  NSObject *v35;
  void *v36;
  __CFString *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  NSObject *v44;
  void *v45;
  void *v46;
  id v47;
  NSObject *v48;
  void *v49;
  HMDAccessoryMetric *v50;
  void *v51;
  id v52;
  NSObject *v53;
  unint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  double v59;
  void *v60;
  objc_class *v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  void *v67;
  double v68;
  void *v69;
  objc_class *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint8_t buf[4];
  void *v80;
  __int16 v81;
  const __CFString *v82;
  __int16 v83;
  const __CFString *v84;
  __int16 v85;
  const __CFString *v86;
  __int16 v87;
  const __CFString *v88;
  __int16 v89;
  const __CFString *v90;
  __int16 v91;
  void *v92;
  __int16 v93;
  const __CFString *v94;
  __int16 v95;
  void *v96;
  __int16 v97;
  const __CFString *v98;
  __int16 v99;
  void *v100;
  __int16 v101;
  const __CFString *v102;
  __int16 v103;
  void *v104;
  _BYTE v105[128];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "services");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v75, v105, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v76;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v76 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "workQueue");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "configureWithWorkQueue:messageDispatcher:", v8, *(_QWORD *)(a1 + 40));

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v75, v105, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedServicesForProfilesAndControllers:", *(unsigned __int8 *)(a1 + 72));
  objc_msgSend(*(id *)(a1 + 32), "updatePrimaryServiceIfNeeded");
  objc_msgSend(*(id *)(a1 + 32), "_configureTargetControllerWithCompletion:", 0);
  objc_msgSend(*(id *)(a1 + 32), "initializeBTLEScan");
  objc_msgSend(*(id *)(a1 + 32), "_checkResidentDeviceForReachabilityPing");
  objc_msgSend(*(id *)(a1 + 32), "_checkRegisterForServerNotification");
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "residentDeviceManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addObserver:selector:name:object:", v10, sel_handleResidentDeviceUpdated_, CFSTR("HMDResidentDeviceManagerAddResidentNotification"), v11);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "residentDeviceManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "addObserver:selector:name:object:", v13, sel_handleResidentDeviceUpdated_, CFSTR("HMDResidentDeviceManagerRemoveResidentNotification"), v14);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "residentDeviceManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "addObserver:selector:name:object:", v16, sel_handleResidentDeviceUpdated_, CFSTR("HMDResidentDeviceManagerUpdateResidentNotification"), v17);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), sel_handleResidentDeviceUpdated_, CFSTR("HMDDeviceCapabilitiiesUpdatedNotification"), 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), sel_handleResidentDeviceUpdated_, CFSTR("HMDResidentDeviceCapabilitiesUpdatedNotification"), 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "residentDeviceManager");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "addObserver:selector:name:object:", v21, sel_handlePrimaryResidentUpdateNotification_, CFSTR("HMDResidentDeviceManagerUpdatePrimaryResidentNotification"), v22);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), sel_handlePrimaryResidentUpdateNotification_, CFSTR("HMDResidentDeviceConfirmedStateChangedNotification"), 0);

  -[HMDHAPAccessory _evaluateResidentEnabledFeatures](*(void **)(a1 + 32));
  v24 = *(NSObject **)(a1 + 56);
  if (v24)
    dispatch_group_leave(v24);
  v25 = (void *)MEMORY[0x1D17BA0A0]();
  v26 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "isCurrentDevicePrimaryResident");
    HMFBooleanToString();
    v29 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "isCurrentDeviceAvailableResident");
    HMFBooleanToString();
    v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "areAllResidentsUnreachable");
    HMFBooleanToString();
    v31 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v80 = v28;
    v81 = 2114;
    v82 = v29;
    v83 = 2114;
    v84 = v30;
    v85 = 2114;
    v86 = v31;
    _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Evaluating disconnect on idle status using - isCurrentDevicePrimaryResident = %{public}@, isCurrentDeviceAvailableResident = %{public}@, areAllResidentsUnreachable = %{public}@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v25);
  v32 = shouldDisconnectOnIdleForAccessory(*(void **)(a1 + 32));
  v33 = (void *)MEMORY[0x1D17BA0A0]();
  v34 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v37 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v80 = v36;
    v81 = 2112;
    v82 = v37;
    _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Configuring initial accessory shouldDisconnectOnIdle to %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v33);
  objc_msgSend(*(id *)(a1 + 32), "setShouldDisconnectOnIdle:", v32);
  objc_msgSend(*(id *)(a1 + 32), "siriEndpointProfile");
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  if (v38)
  {
    v39 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 48), "logEventSubmitter");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "dailyScheduler");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "configureSiriEndpointProfileMetricsDispatcherWithFactory:logEventSubmitter:dailyScheduler:", v39, v40, v41);

  }
  v42 = (void *)MEMORY[0x1D17BA0A0]();
  v43 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v44 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v80 = v45;
    _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_INFO, "%{public}@Setting default preferred media user if needed.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v42);
  objc_msgSend(*(id *)(a1 + 32), "setDefaultPreferredMediaUserIfNeeded");
  objc_msgSend(*(id *)(a1 + 32), "setCommunicationProtocolIfNeeded");
  objc_msgSend(*(id *)(a1 + 32), "checkHAPSessionRestore");
  objc_msgSend(*(id *)(a1 + 32), "wirelessResumeInit");
  if (objc_msgSend(*(id *)(a1 + 48), "isCurrentDeviceConfirmedPrimaryResident"))
  {
    v46 = (void *)MEMORY[0x1D17BA0A0]();
    v47 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v80 = v49;
      _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_DEBUG, "%{public}@Current device is primary - starting AccessoryMetric", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v46);
    v50 = -[HMDAccessoryMetric initWithAccessory:]([HMDAccessoryMetric alloc], "initWithAccessory:", *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 32), "setAccessoryMetric:", v50);

  }
  if (*(_BYTE *)(a1 + 72))
  {
    v51 = (void *)MEMORY[0x1D17BA0A0]();
    v52 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v53 = objc_claimAutoreleasedReturnValue();
    v54 = 0x1E0CB3000;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "uuid");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = (void *)MEMORY[0x1E0CB3940];
      HMFUptime();
      objc_msgSend(v58, "stringWithFormat:", CFSTR("%.3f"), v59 - *(double *)(a1 + 64));
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = (objc_class *)objc_opt_class();
      NSStringFromClass(v61);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138546434;
      v80 = v55;
      v81 = 2114;
      v82 = CFSTR("accessoryConfigureDone");
      v83 = 2112;
      v84 = CFSTR("Configured accessory");
      v85 = 2114;
      v86 = CFSTR("state");
      v87 = 2112;
      v88 = CFSTR("end");
      v89 = 2114;
      v90 = CFSTR("homeUUID");
      v91 = 2112;
      v92 = v56;
      v93 = 2114;
      v94 = CFSTR("accessoryUUID");
      v95 = 2112;
      v96 = v57;
      v97 = 2114;
      v98 = CFSTR("duration");
      v99 = 2112;
      v100 = v60;
      v101 = 2114;
      v102 = CFSTR("accessoryType");
      v103 = 2112;
      v104 = v62;
      _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x84u);

      v54 = 0x1E0CB3000uLL;
    }

    objc_autoreleasePoolPop(v51);
    objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v64 = objc_alloc(MEMORY[0x1E0D334C8]);
    objc_msgSend(*(id *)(a1 + 48), "uuid");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = *(void **)(v54 + 2368);
    HMFUptime();
    objc_msgSend(v67, "stringWithFormat:", CFSTR("%.3f"), v68 - *(double *)(a1 + 64));
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = (objc_class *)objc_opt_class();
    NSStringFromClass(v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    HMDTaggedLoggingCreateDictionary();
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = (void *)objc_msgSend(v64, "initWithTag:data:", CFSTR("accessoryConfigureDone"), v72, CFSTR("state"), CFSTR("end"), CFSTR("homeUUID"), v65, CFSTR("accessoryUUID"), v66, CFSTR("duration"), v69, CFSTR("accessoryType"), v71);
    objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "submitTaggedEvent:processorList:", v73, v74);

  }
}

+ (Class)transactionClass
{
  return (Class)objc_opt_class();
}

+ (unint64_t)getAWDTransportTypeWithLinkType:(int64_t)a3
{
  if (a3 == 1)
    return 1;
  else
    return 2 * (a3 == 2);
}

+ (BOOL)supportsSecureCoding
{
  return 1;
}

+ (void)encodeServices:(id)a3 forXPCCoder:(id)a4 metadata:(id)a5
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = a5;
  if ((objc_msgSend(v8, "hmd_isForXPCTransport") & 1) == 0)
    _HMFPreconditionFailure();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v11 = v7;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v20 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v16, "type", (_QWORD)v19);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v9, "shouldFilterServiceOfTypeFromApp:", v17);

        if ((v18 & 1) == 0)
          objc_msgSend(v10, "addObject:", v16);
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v13);
  }

  objc_msgSend(v8, "encodeObject:forKey:", v10, CFSTR("services"));
}

+ (BOOL)hasMessageReceiverChildren
{
  return 1;
}

- (void)saveCharacteristicsToLocalDiskForHH2Migration
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHAPAccessory *v18;
  NSObject *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory services](self, "services");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543362;
      v22 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Storing accessory for migration", (uint8_t *)&v21, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    encodeRootObject();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      -[HMDHAPAccessory _accessoryForHH2MigrationFileName](v7, "_accessoryForHH2MigrationFileName");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDPersistentStore writeData:toStorePath:dataLabel:](HMDPersistentStore, "writeData:toStorePath:dataLabel:", v10, v11, CFSTR("PerHAPAccessoryHH2Migration"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = v7;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543874;
        v22 = v16;
        v23 = 2112;
        v24 = v12;
        v25 = 2112;
        v26 = v11;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Stored [%@] bytes to [%@]", (uint8_t *)&v21, 0x20u);

      }
      objc_autoreleasePoolPop(v13);

    }
    else
    {
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = v7;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543362;
        v22 = v20;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@Nothing to store as there is no data after archiving the accessory", (uint8_t *)&v21, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
    }

    objc_autoreleasePoolPop(v5);
  }
}

- (id)_accessoryForHH2MigrationFileName
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  -[HMDAccessory uuid](self, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/HMDHAPAccessory-%@.plist"), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (BOOL)_updateNetworkRouterControllerUsingRouterService:(id)a3
{
  id v4;
  NSObject *v5;
  HMDNetworkRouterController *v6;
  HMDNetworkRouterController *v7;
  void *v8;
  HMDNetworkRouterController *v9;
  char v10;
  void *v11;
  unint64_t v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHAPAccessory *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  const __CFString *v26;
  HMDHAPAccessory *v27;
  const __CFString *v28;
  HMDHAPAccessory *v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  HMDNetworkRouterController *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHAPAccessory networkRouterController](self, "networkRouterController");
  v6 = (HMDNetworkRouterController *)objc_claimAutoreleasedReturnValue();
  v7 = [HMDNetworkRouterController alloc];
  -[HMDAccessory workQueue](self, "workQueue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HMDNetworkRouterController initWithAccessory:service:workQueue:](v7, "initWithAccessory:service:workQueue:", self, v4, v8);

  v10 = HMFEqualObjects();
  if ((v10 & 1) == 0)
  {
    -[HMDNetworkRouterController configure](v9, "configure");
    -[HMDHAPAccessory setNetworkRouterController:](self, "setNetworkRouterController:", v9);
    -[HMDAccessory home](self, "home");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 0x1E0C99000;
    if (v6)
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v31 = v16;
        v32 = 2112;
        v33 = v6;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing existing network router controller: %@", buf, 0x16u);

        v12 = 0x1E0C99000uLL;
      }

      objc_autoreleasePoolPop(v13);
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = CFSTR("HMDNetworkRouterAccessoryNotificationKey");
      v29 = v14;
      objc_msgSend(*(id *)(v12 + 3456), "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "postNotificationName:object:userInfo:", CFSTR("HMDAccessoryDidRemoveNetworkRouterControllerNotification"), v11, v18);

    }
    if (v9)
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v31 = v22;
        v32 = 2112;
        v33 = v9;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Creating new network router controller: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = CFSTR("HMDNetworkRouterAccessoryNotificationKey");
      v27 = v20;
      objc_msgSend(*(id *)(v12 + 3456), "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "postNotificationName:object:userInfo:", CFSTR("HMDAccessoryDidAddNetworkRouterControllerNotification"), v11, v24);

    }
  }

  return v10 ^ 1;
}

- (BOOL)_handleUpdatedServicesForNetworkRouterController:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v23;
    v11 = *MEMORY[0x1E0CB9B18];
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v23 != v10)
          objc_enumerationMutation(v6);
        v13 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        objc_msgSend(v13, "serviceType", (_QWORD)v22);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "isEqualToString:", v11);

        if (v15)
        {
          if (!-[HMDHAPAccessory isPrimary](self, "isPrimary"))
          {
            v16 = (void *)MEMORY[0x1D17BA0A0]();
            v17 = self;
            HMFGetOSLogHandle();
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHAPAccessory name](v17, "name");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v27 = v19;
              v28 = 2112;
              v29 = v20;
              _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Network router service is not allowed on bridged HAP accessory: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v16);
            goto LABEL_16;
          }
          v9 |= -[HMDHAPAccessory _updateNetworkRouterControllerUsingRouterService:](self, "_updateNetworkRouterControllerUsingRouterService:", v13);
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      if (v8)
        continue;
      break;
    }
  }
  else
  {
    LOBYTE(v9) = 0;
  }
LABEL_16:

  return v9 & 1;
}

- (BOOL)hasAnyServiceWithTypes:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHAPAccessory services](self, "services", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "type");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v4, "containsObject:", v9);

        if ((v10 & 1) != 0)
        {
          LOBYTE(v6) = 1;
          goto LABEL_11;
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  return v6;
}

- (NSData)nfcReaderIdentifier
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  const __CFString *v7;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v8[1] = 0;
  v2 = (void *)MEMORY[0x1E0CB3A28];
  -[HMDAccessory uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = CFSTR("69D04989-C152-43AD-85CD-CE5336B758FA");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v7, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hm_deriveUUIDFromBaseUUID:withSalts:", v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "getUUIDBytes:", v8);

  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v8, 8);
  return (NSData *)(id)objc_claimAutoreleasedReturnValue();
}

- (void)updateHasPostedBulletinForWalletKeyOnboarding:(BOOL)a3
{
  _BOOL8 v3;
  id v5;

  v3 = a3;
  if (-[HMDHAPAccessory hasPostedBulletinForWalletKeyOnboarding](self, "hasPostedBulletinForWalletKeyOnboarding") != a3)
  {
    -[HMDHAPAccessory setHasPostedBulletinForWalletKeyOnboarding:](self, "setHasPostedBulletinForWalletKeyOnboarding:", v3);
    -[HMDAccessory home](self, "home");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "saveToCurrentAccountWithReason:", CFSTR("HMDHAPAccessoryUpdateHasPostedBulletinForWalletKeyOnboardingReason"));

  }
}

- (BOOL)shouldSubmitRoutineConfigurationEventForSiriEndpointProfileMetricsDispatcher:(id)a3
{
  void *v4;
  void *v5;
  BOOL v6;

  -[HMDAccessory home](self, "home", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isCurrentDeviceConfirmedPrimaryResident"))
  {
    -[HMDHAPAccessory siriEndpointProfile](self, "siriEndpointProfile");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5 != 0;

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)accessoryCategoryTypeForSiriEndpointProfileMetricsDispatcher:(id)a3
{
  void *v3;
  void *v4;

  -[HMDAccessory category](self, "category", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "categoryType");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)profileFieldsForSiriEndpointProfileMetricsDispatcher:(id)a3
{
  void *v4;
  void *v5;
  HMDSiriEndpointProfileFields *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDSiriEndpointProfileFields *v14;

  -[HMDHAPAccessory needsOnboarding](self, "needsOnboarding", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "BOOLValue");

  -[HMDHAPAccessory siriEndpointProfile](self, "siriEndpointProfile");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = [HMDSiriEndpointProfileFields alloc];
  HMFBooleanToString();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory supportsSiriEndpointOnBoarding](self, "supportsSiriEndpointOnBoarding");
  HMFBooleanToString();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(v5, "siriEnable");
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "siriListening");
    HMFBooleanToString();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "siriTouchToUse");
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "siriLightOnUse");
    HMFBooleanToString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "siriSoundOnUse");
    HMFBooleanToString();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[HMDSiriEndpointProfileFields initWithNeedsOnboardingField:supportsOnboardingField:siriEnableField:siriListeningField:siriTouchToUseField:siriLightOnUseField:siriSoundOnUseField:](v6, "initWithNeedsOnboardingField:supportsOnboardingField:siriEnableField:siriListeningField:siriTouchToUseField:siriLightOnUseField:siriSoundOnUseField:", v7, v8, v9, v10, v11, v12, v13);

  }
  else
  {
    v14 = -[HMDSiriEndpointProfileFields initWithNeedsOnboardingField:supportsOnboardingField:siriEnableField:siriListeningField:siriTouchToUseField:siriLightOnUseField:siriSoundOnUseField:](v6, "initWithNeedsOnboardingField:supportsOnboardingField:siriEnableField:siriListeningField:siriTouchToUseField:siriLightOnUseField:siriSoundOnUseField:", v7, v8, CFSTR("NoProfile"), CFSTR("NoProfile"), CFSTR("NoProfile"), CFSTR("NoProfile"), CFSTR("NoProfile"));
  }

  return v14;
}

- (id)compositeSettingsControllerManagerForSiriEndpointProfileMetricsDispatcher:(id)a3
{
  void *v3;
  void *v4;
  void *v5;

  -[HMDAccessory home](self, "home", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "homeManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "compositeSettingsControllerManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (BOOL)_handleUpdatedServicesForDoorbellController
{
  void *v3;
  char v4;
  void *v5;
  HMDDoorbellChimeController *v6;
  void *v7;
  HMDDoorbellChimeController *v8;
  void *v9;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory services](self, "services");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "na_any:", &__block_literal_global_106584);

  if ((v4 & 1) != 0)
  {
    -[HMDHAPAccessory doorbellChimeController](self, "doorbellChimeController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      v6 = [HMDDoorbellChimeController alloc];
      -[HMDAccessory workQueue](self, "workQueue");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = -[HMDDoorbellChimeController initWithWorkQueue:accessory:](v6, "initWithWorkQueue:accessory:", v7, self);
      -[HMDHAPAccessory setDoorbellChimeController:](self, "setDoorbellChimeController:", v8);

      -[HMDHAPAccessory doorbellChimeController](self, "doorbellChimeController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "configure");

      return 1;
    }
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@No service type doorbell, chime controller not created", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }
  return 0;
}

uint64_t __87__HMDHAPAccessory_DoorbellChimeController___handleUpdatedServicesForDoorbellController__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "serviceType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0CB9A08]);

  return v3;
}

- (void)writeValue:(id)a3 toCharacteristic:(id)a4 queue:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHAPAccessory *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, void *);
  void *v25;
  id v26;
  id v27;
  id location[4];

  location[3] = *(id *)MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  if (v11)
  {
    v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
    objc_msgSend(v11, "authorizationData");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:type:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:type:", v11, v10, v15, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "addObject:", v16);
    objc_initWeak(location, self);
    v22 = MEMORY[0x1E0C809B0];
    v23 = 3221225472;
    v24 = __71__HMDHAPAccessory_Write__writeValue_toCharacteristic_queue_completion___block_invoke;
    v25 = &unk_1E89C1648;
    objc_copyWeak(&v27, location);
    v26 = v13;
    v17 = _Block_copy(&v22);
    -[HMDHAPAccessory writeCharacteristicValues:source:queue:completionHandler:](self, "writeCharacteristicValues:source:queue:completionHandler:", v14, 7, v12, v17, v22, v23, v24, v25);

    objc_destroyWeak(&v27);
    objc_destroyWeak(location);
LABEL_7:

    goto LABEL_8;
  }
  v18 = (void *)MEMORY[0x1D17BA0A0]();
  v19 = self;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v21;
    _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Invalid characteristic to write", (uint8_t *)location, 0xCu);

  }
  objc_autoreleasePoolPop(v18);
  v14 = _Block_copy(v13);
  if (v14)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, void *))v14 + 2))(v14, v16);
    goto LABEL_7;
  }
LABEL_8:

}

void __71__HMDHAPAccessory_Write__writeValue_toCharacteristic_queue_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(v3, "firstObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (v7)
      {
        objc_msgSend(v5, "error");
        v8 = objc_claimAutoreleasedReturnValue();
LABEL_11:
        v13 = (void *)v8;
        (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, v8);

      }
    }
    else if (v7)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 74);
      v8 = objc_claimAutoreleasedReturnValue();
      goto LABEL_11;
    }
LABEL_12:

    goto LABEL_13;
  }
  v9 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543362;
    v15 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Accessory not found for writing target list characteristic", (uint8_t *)&v14, 0xCu);

  }
  objc_autoreleasePoolPop(v9);
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v6);
    goto LABEL_12;
  }
LABEL_13:

}

- (NSString)urlString
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory urlString](&v3, sel_urlString);
  return (NSString *)(id)objc_claimAutoreleasedReturnValue();
}

- (NSDictionary)assistantObject
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  objc_super v28;
  const __CFString *v29;
  void *v30;
  const __CFString *v31;
  void *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v28.receiver = self;
  v28.super_class = (Class)HMDHAPAccessory;
  -[HMDAccessory assistantObject](&v28, sel_assistantObject);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "mutableCopy");

  -[HMDHAPAccessory identifiersForBridgedAccessories](self, "identifiersForBridgedAccessories");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v5, "count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v25;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v25 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v11);
        -[HMDAccessory home](self, "home", (_QWORD)v24);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "accessoryWithUUID:", v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          objc_msgSend(v14, "urlString");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "addObject:", v15);

        }
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
    }
    while (v9);
  }

  if ((objc_msgSend(v6, "hmf_isEmpty") & 1) == 0)
  {
    v31 = CFSTR("objectRelatedIdentifiers");
    objc_msgSend(v6, "allObjects");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v16;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addEntriesFromDictionary:", v17);

  }
  -[HMDHAPAccessory primaryService](self, "primaryService", (_QWORD)v24);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    v29 = CFSTR("objectAccessoryPrimaryServiceIdentifier");
    -[HMDHAPAccessory primaryService](self, "primaryService");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "urlString");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v20;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addEntriesFromDictionary:", v21);

  }
  v22 = (void *)objc_msgSend(v4, "copy");

  return (NSDictionary *)v22;
}

- (int64_t)computeSiriEndpointCertification
{
  void *v3;
  void *v4;
  char v5;
  unint64_t v7;

  objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferenceForKey:", CFSTR("forceAllowSiriEndpoints"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "BOOLValue");

  if ((v5 & 1) != 0)
    return 3;
  if (-[HMDHAPAccessory certificationStatus](self, "certificationStatus") != 2)
    return 4;
  v7 = -[HMDHAPAccessory enhancedAuthMethod](self, "enhancedAuthMethod");
  if (v7 > 6)
    return 2;
  else
    return qword_1CDB8F780[v7];
}

- (BOOL)isCertifiedForSiriEndpoint
{
  return (unint64_t)(-[HMDHAPAccessory computeSiriEndpointCertification](self, "computeSiriEndpointCertification")- 7) < 0xFFFFFFFFFFFFFFFDLL;
}

- (BOOL)supportsSiriEndpoint
{
  _BOOL4 v3;
  int64_t v4;
  _BOOL8 v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  os_log_type_t v13;
  HMDHAPAccessory *v14;
  HMDHAPAccessory *v15;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = -[HMDHAPAccessory hasSiriEndpointService](self, "hasSiriEndpointService");
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    if (v3)
    {
      v6 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543362;
        v18 = v9;
        v10 = "%{public}@We don't support Siri Endpoints because the feature is disabled";
        v12 = v8;
        v13 = OS_LOG_TYPE_INFO;
LABEL_20:
        _os_log_impl(&dword_1CD062000, v12, v13, v10, (uint8_t *)&v17, 0xCu);

        goto LABEL_21;
      }
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v4 = -[HMDHAPAccessory computeSiriEndpointCertification](self, "computeSiriEndpointCertification");
  v5 = (unint64_t)(v4 - 7) < 0xFFFFFFFFFFFFFFFDLL && v3;
  if ((unint64_t)(v4 - 7) >= 0xFFFFFFFFFFFFFFFDLL && v3)
  {
    switch(v4)
    {
      case 6:
        v6 = (void *)MEMORY[0x1D17BA0A0](v5);
        v15 = self;
        HMFGetOSLogHandle();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = 138543362;
          v18 = v9;
          v10 = "%{public}@We don't support Siri Endpoints because the accessory doesn't support HW Auth IC with Enhanced Auth";
          goto LABEL_19;
        }
        goto LABEL_21;
      case 5:
        v6 = (void *)MEMORY[0x1D17BA0A0](v5);
        v14 = self;
        HMFGetOSLogHandle();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = 138543362;
          v18 = v9;
          v10 = "%{public}@We don't support Siri Endpoints because we aren't using hardware auth";
          goto LABEL_19;
        }
LABEL_21:

        objc_autoreleasePoolPop(v6);
        break;
      case 4:
        v6 = (void *)MEMORY[0x1D17BA0A0](v5);
        v7 = self;
        HMFGetOSLogHandle();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = 138543362;
          v18 = v9;
          v10 = "%{public}@We don't support Siri Endpoints because the accessory isn't certified";
LABEL_19:
          v12 = v8;
          v13 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_20;
        }
        goto LABEL_21;
    }
LABEL_22:
    LOBYTE(v5) = 0;
  }
  return v5;
}

- (HMDSiriEndpointProfile)siriEndpointProfile
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDAccessory accessoryProfiles](self, "accessoryProfiles", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v12 != v5)
        objc_enumerationMutation(v2);
      v7 = *(id *)(*((_QWORD *)&v11 + 1) + 8 * v6);
      objc_opt_class();
      v8 = (objc_opt_isKindOfClass() & 1) != 0 ? v7 : 0;
      v9 = v8;

      if (v9)
        break;
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v7 = 0;
  }

  return (HMDSiriEndpointProfile *)v7;
}

- (BOOL)hasSiriSettingsService
{
  void *v2;
  BOOL v3;

  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000133-0000-1000-8000-0026BB765291"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (BOOL)_handleUpdatedServicesForSiriEndpointProfile:(id)a3
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  HMDSiriEndpointProfile *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  void *v22;
  int v23;
  HMDHAPAccessory *v24;
  id v25;
  char v26;
  uint64_t v27;
  void *v28;
  HMDSiriEndpointProfile *v29;
  void *v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  void *v36;
  int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  int v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  char v56;
  HMDHAPAccessory *v57;
  uint64_t v58;
  void *v59;
  HMDHAPAccessory *v60;
  NSObject *v61;
  void *v62;
  const char *v63;
  HMDHAPAccessory *v64;
  HMDHAPAccessory *v65;
  void *v66;
  HMDHAPAccessory *v67;
  NSObject *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  id v75;
  id v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  id v80;
  char v81;
  uint64_t v82;
  id obj;
  HMDHAPAccessory *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[128];
  _BYTE v102[128];
  uint8_t v103[128];
  uint8_t buf[4];
  void *v105;
  __int16 v106;
  HMDSiriEndpointProfile *v107;
  _BYTE v108[128];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHAPAccessory _checkForSiriEndpointServiceChange](self, "_checkForSiriEndpointServiceChange");
  if (!-[HMDHAPAccessory supportsSiriEndpoint](self, "supportsSiriEndpoint"))
  {
    v10 = 0;
    goto LABEL_81;
  }
  v84 = self;
  -[HMDHAPAccessory siriEndpointProfile](self, "siriEndpointProfile");
  v6 = objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = (HMDSiriEndpointProfile *)v6;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    obj = v4;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v97, v108, 16);
    if (!v8)
    {
      v10 = 0;
      goto LABEL_80;
    }
    v9 = v8;
    v75 = v4;
    v10 = 0;
    v11 = *(_QWORD *)v98;
LABEL_5:
    v12 = 0;
    while (1)
    {
      if (*(_QWORD *)v98 != v11)
        objc_enumerationMutation(obj);
      v13 = *(void **)(*((_QWORD *)&v97 + 1) + 8 * v12);
      objc_msgSend(v13, "serviceType");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("00000133-0000-1000-8000-0026BB765291"));

      if (v15)
        break;
      objc_msgSend(v13, "serviceType");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "isEqualToString:", CFSTR("0000026A-0000-1000-8000-0026BB765291"));

      if (v23)
      {
        v16 = (void *)MEMORY[0x1D17BA0A0](-[HMDSiriEndpointProfile addService:](v7, "addService:", v13));
        v24 = v84;
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v105 = v19;
          v106 = 2112;
          v107 = v7;
          v20 = v18;
          v21 = "%{public}@Added Assistant service to current Siri Endpoint profile: %@";
LABEL_14:
          _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, v21, buf, 0x16u);

        }
LABEL_15:

        objc_autoreleasePoolPop(v16);
        v10 = 1;
      }
      if (v9 == ++v12)
      {
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v97, v108, 16);
        if (!v9)
        {
          v4 = v75;
          goto LABEL_80;
        }
        goto LABEL_5;
      }
    }
    v16 = (void *)MEMORY[0x1D17BA0A0](-[HMDSiriEndpointProfile addService:](v7, "addService:", v13));
    v17 = v84;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v105 = v19;
      v106 = 2112;
      v107 = v7;
      v20 = v18;
      v21 = "%{public}@Added Siri service to current Siri Endpoint profile: %@";
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  obj = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v25 = v4;
  v7 = (HMDSiriEndpointProfile *)objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v93, v103, 16);
  v10 = v7 != 0;
  if (!v7)
    goto LABEL_78;
  v76 = v4;
  v81 = 0;
  v26 = 0;
  v27 = *(_QWORD *)v94;
  v28 = v78;
  do
  {
    v29 = 0;
    do
    {
      if (*(_QWORD *)v94 != v27)
        objc_enumerationMutation(v25);
      v30 = *(void **)(*((_QWORD *)&v93 + 1) + 8 * (_QWORD)v29);
      objc_msgSend(v30, "serviceType");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v31, "isEqualToString:", CFSTR("00000253-0000-1000-8000-0026BB765291"));

      if ((v32 & 1) != 0)
      {
        v26 = 1;
LABEL_29:
        v35 = obj;
LABEL_30:
        objc_msgSend(v35, "addObject:", v30);
        goto LABEL_31;
      }
      objc_msgSend(v30, "serviceType");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend(v33, "isEqualToString:", CFSTR("00000133-0000-1000-8000-0026BB765291"));

      if ((v34 & 1) != 0)
      {
        v81 = 1;
        goto LABEL_29;
      }
      objc_msgSend(v30, "serviceType");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend(v36, "isEqualToString:", CFSTR("0000026A-0000-1000-8000-0026BB765291"));

      v35 = v78;
      if (v37)
        goto LABEL_30;
LABEL_31:
      v29 = (HMDSiriEndpointProfile *)((char *)v29 + 1);
    }
    while (v7 != v29);
    v38 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v93, v103, 16);
    v7 = (HMDSiriEndpointProfile *)v38;
  }
  while (v38);

  if ((v26 & 1) == 0)
  {
    v10 = 0;
    v7 = 0;
    v4 = v76;
    goto LABEL_79;
  }
  if ((v81 & 1) == 0)
  {
    -[HMDHAPAccessory findServiceWithServiceType:](v84, "findServiceWithServiceType:", CFSTR("00000133-0000-1000-8000-0026BB765291"));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    if (v39)
      objc_msgSend(obj, "addObject:", v39);

  }
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  -[HMDHAPAccessory services](v84, "services");
  v80 = (id)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v89, v102, 16);
  if (v40)
  {
    v41 = v40;
    v42 = *(_QWORD *)v90;
    v77 = *(_QWORD *)v90;
    do
    {
      v43 = 0;
      v79 = v41;
      do
      {
        if (*(_QWORD *)v90 != v42)
          objc_enumerationMutation(v80);
        v44 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * v43);
        objc_msgSend(v44, "serviceType");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = objc_msgSend(v45, "isEqualToString:", CFSTR("0000026A-0000-1000-8000-0026BB765291"));

        if (v46)
        {
          v82 = v43;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v47 = v28;
          v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v85, v101, 16);
          if (v48)
          {
            v49 = v48;
            v50 = *(_QWORD *)v86;
            do
            {
              for (i = 0; i != v49; ++i)
              {
                if (*(_QWORD *)v86 != v50)
                  objc_enumerationMutation(v47);
                v52 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * i);
                objc_msgSend(v52, "serviceType");
                v53 = (void *)objc_claimAutoreleasedReturnValue();
                if ((objc_msgSend(v53, "isEqualToString:", CFSTR("0000026A-0000-1000-8000-0026BB765291")) & 1) != 0)
                {
                  objc_msgSend(v52, "instanceID");
                  v54 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v44, "instanceID");
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  v56 = objc_msgSend(v54, "isEqual:", v55);

                  if ((v56 & 1) != 0)
                  {

                    goto LABEL_59;
                  }
                }
                else
                {

                }
              }
              v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v85, v101, 16);
            }
            while (v49);
          }

          objc_msgSend(v47, "addObject:", v44);
LABEL_59:
          v42 = v77;
          v28 = v78;
          v41 = v79;
          v43 = v82;
        }
        ++v43;
      }
      while (v43 != v41);
      v41 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v89, v102, 16);
    }
    while (v41);
  }

  objc_msgSend(obj, "addObjectsFromArray:", v28);
  v7 = -[HMDSiriEndpointProfile initWithSiriEndpointServices:]([HMDSiriEndpointProfile alloc], "initWithSiriEndpointServices:", obj);
  v57 = v84;
  v58 = -[HMDHAPAccessory computeSiriEndpointCertification](v84, "computeSiriEndpointCertification");
  switch(v58)
  {
    case 3:
      v59 = (void *)MEMORY[0x1D17BA0A0]();
      v64 = v84;
      HMFGetOSLogHandle();
      v61 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        goto LABEL_74;
      HMFGetLogIdentifier();
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v105 = v62;
      v63 = "%{public}@Allowing Siri Endpoint Profile creation because the force allow pref is on";
LABEL_73:
      _os_log_impl(&dword_1CD062000, v61, OS_LOG_TYPE_DEFAULT, v63, buf, 0xCu);

      goto LABEL_74;
    case 2:
      v59 = (void *)MEMORY[0x1D17BA0A0]();
      v65 = v84;
      HMFGetOSLogHandle();
      v61 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        goto LABEL_74;
      HMFGetLogIdentifier();
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v105 = v62;
      v63 = "%{public}@Allowing Siri Endpoint Profile creation because the extended auth feature flag is off";
      goto LABEL_73;
    case 1:
      v59 = (void *)MEMORY[0x1D17BA0A0]();
      v60 = v84;
      HMFGetOSLogHandle();
      v61 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v105 = v62;
        v63 = "%{public}@Allowing Siri Endpoint Profile creation because the accessory supports HW auth with Enhanced Auth";
        goto LABEL_73;
      }
LABEL_74:

      v57 = v84;
      objc_autoreleasePoolPop(v59);
      break;
  }
  v66 = (void *)MEMORY[0x1D17BA0A0]();
  v67 = v57;
  HMFGetOSLogHandle();
  v68 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v105 = v69;
    v106 = 2112;
    v107 = v7;
    _os_log_impl(&dword_1CD062000, v68, OS_LOG_TYPE_INFO, "%{public}@Adding new Siri Endpoint profile: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v66);
  -[HMDAccessory addAccessoryProfile:](v67, "addAccessoryProfile:", v7);
  -[HMDAccessory msgDispatcher](v67, "msgDispatcher");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessoryProfile configureWithMessageDispatcher:configurationTracker:](v7, "configureWithMessageDispatcher:configurationTracker:", v70, 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v71, "postNotificationName:object:userInfo:", CFSTR("HMDSiriEndpointProfileAddedNotification"), v67, 0);

  -[HMDHAPAccessory setDefaultPreferredMediaUserIfNeeded](v67, "setDefaultPreferredMediaUserIfNeeded");
  -[HMDAccessory home](v67, "home");
  v25 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "logEventSubmitter");
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "dailyScheduler");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory configureSiriEndpointProfileMetricsDispatcherWithFactory:logEventSubmitter:dailyScheduler:](v67, "configureSiriEndpointProfileMetricsDispatcherWithFactory:logEventSubmitter:dailyScheduler:", v67, v72, v73);

  v4 = v76;
  v10 = 1;
LABEL_78:

LABEL_79:
LABEL_80:

LABEL_81:
  return v10;
}

- (void)_checkForSiriEndpointServiceChange
{
  void *v3;
  BOOL v4;
  uint64_t v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000253-0000-1000-8000-0026BB765291"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = -[HMDHAPAccessory hasSiriEndpointService](self, "hasSiriEndpointService");
    v5 = -[HMDHAPAccessory setHasSiriEndpointService:](self, "setHasSiriEndpointService:", 1);
    if (!v4)
    {
      v6 = (void *)MEMORY[0x1D17BA0A0](v5);
      v7 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138543362;
        v12 = v9;
        _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Siri endpoint service observed before the profile is added. Sending out a notification.", (uint8_t *)&v11, 0xCu);

      }
      objc_autoreleasePoolPop(v6);
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "postNotificationName:object:userInfo:", CFSTR("HMDAccessorySiriEndpointServiceAddedNotification"), v7, 0);

    }
  }
  else
  {
    -[HMDHAPAccessory setHasSiriEndpointService:](self, "setHasSiriEndpointService:", 0);
  }
}

- (BOOL)supportsSiriEndpointOnBoarding
{
  void *v2;
  char v3;

  -[HMDAccessory home](self, "home");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportsSiriEndpointOnBoarding");

  return v3;
}

- (BOOL)isAssignedHubForSiriEndpoint
{
  NSObject *v3;
  void *v4;
  void *v5;
  char v6;

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHAPAccessory currentActiveSessionRestoreClients](self, "currentActiveSessionRestoreClients");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  HAPStringFromAccessoryServerSession();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "containsObject:", v5);

  return v6;
}

- (BOOL)_handleUpdatedServicesForLightProfiles:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  int v19;
  HMDLightProfile *v20;
  void *v21;
  HMDLightProfile *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  uint64_t v27;
  void *v28;
  HMDHAPAccessory *v29;
  NSObject *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t k;
  uint64_t v37;
  void *v38;
  HMDHAPAccessory *v39;
  NSObject *v40;
  void *v41;
  BOOL v42;
  void *v44;
  void *v45;
  id obj;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint8_t v60[128];
  uint8_t buf[4];
  void *v62;
  __int16 v63;
  uint64_t v64;
  _BYTE v65[128];
  _BYTE v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v62 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Handling services update for light profiles", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHAPAccessory lightProfiles](v6, "lightProfiles");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "mutableCopy");

  -[HMDHAPAccessory lightProfiles](v6, "lightProfiles");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = (void *)objc_msgSend(v11, "mutableCopy");

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  obj = v4;
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v66, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v57;
    v15 = *MEMORY[0x1E0CB9A70];
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v57 != v14)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * i);
        objc_msgSend(v17, "type");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "isEqual:", v15);

        if (v19)
        {
          v20 = [HMDLightProfile alloc];
          -[HMDAccessory workQueue](v6, "workQueue");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = -[HMDLightProfile initWithWorkQueue:lightService:accessory:](v20, "initWithWorkQueue:lightService:accessory:", v21, v17, v6);

          if ((objc_msgSend(v45, "containsObject:", v22) & 1) != 0)
            objc_msgSend(v10, "removeObject:", v22);
          else
            objc_msgSend(v44, "addObject:", v22);

        }
      }
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v66, 16);
    }
    while (v13);
  }

  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v47 = v10;
  v23 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v52, v65, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v53;
    do
    {
      for (j = 0; j != v24; ++j)
      {
        if (*(_QWORD *)v53 != v25)
          objc_enumerationMutation(v47);
        v27 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * j);
        v28 = (void *)MEMORY[0x1D17BA0A0]();
        v29 = v6;
        HMFGetOSLogHandle();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v62 = v31;
          v63 = 2112;
          v64 = v27;
          _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Removing light profile: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v28);
        -[HMDAccessory removeAccessoryProfile:](v29, "removeAccessoryProfile:", v27);
      }
      v24 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v52, v65, 16);
    }
    while (v24);
  }

  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v32 = v44;
  v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
  if (v33)
  {
    v34 = v33;
    v35 = *(_QWORD *)v49;
    do
    {
      for (k = 0; k != v34; ++k)
      {
        if (*(_QWORD *)v49 != v35)
          objc_enumerationMutation(v32);
        v37 = *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * k);
        v38 = (void *)MEMORY[0x1D17BA0A0]();
        v39 = v6;
        HMFGetOSLogHandle();
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v62 = v41;
          v63 = 2112;
          v64 = v37;
          _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@Adding light profile: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v38);
        -[HMDAccessory addAccessoryProfile:](v39, "addAccessoryProfile:", v37);
      }
      v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
    }
    while (v34);
  }

  if (objc_msgSend(v47, "count"))
    v42 = 1;
  else
    v42 = objc_msgSend(v32, "count") != 0;

  return v42;
}

- (void)updateBridgedAccessoryLightProfilesSettings
{
  HMDHAPAccessory *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHAPAccessory *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHAPAccessory *v23;
  void *v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  uint64_t v36;
  _BYTE v37[128];
  uint64_t v38;

  v2 = self;
  v38 = *MEMORY[0x1E0C80C00];
  if (-[HMDHAPAccessory isPrimary](self, "isPrimary"))
  {
    -[HMDHAPAccessory identifiersForBridgedAccessories](v2, "identifiersForBridgedAccessories");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "count");

    if (v4)
    {
      -[HMDAccessory home](v2, "home");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      -[HMDHAPAccessory identifiersForBridgedAccessories](v2, "identifiersForBridgedAccessories");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      if (v28)
      {
        v9 = *(_QWORD *)v30;
        *(_QWORD *)&v8 = 138543618;
        v25 = v8;
        v26 = v7;
        v27 = *(_QWORD *)v30;
        do
        {
          for (i = 0; i != v28; ++i)
          {
            if (*(_QWORD *)v30 != v9)
              objc_enumerationMutation(v7);
            v11 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * i);
            objc_msgSend(v5, "accessoryWithUUID:", v11, v25);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v13 = v12;
            else
              v13 = 0;
            v14 = v13;

            if (v14)
            {
              objc_msgSend(v14, "lightProfiles");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "na_filter:", &__block_literal_global_126034);
              v16 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v16, "allObjects");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v6, "addObjectsFromArray:", v17);

            }
            else
            {
              v18 = (void *)MEMORY[0x1D17BA0A0]();
              v19 = v2;
              HMFGetOSLogHandle();
              v20 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v21 = v6;
                v22 = v5;
                v23 = v2;
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v25;
                v34 = v24;
                v35 = 2112;
                v36 = v11;
                _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Cannot find hap accessory with uuid: %@", buf, 0x16u);

                v2 = v23;
                v5 = v22;
                v6 = v21;
                v7 = v26;
              }

              objc_autoreleasePoolPop(v18);
              v9 = v27;
            }

          }
          v28 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
        }
        while (v28);
      }

      objc_msgSend(v5, "updateLightProfilesSettings:", v6);
    }
  }
}

- (HMDLightProfile)lightProfileWithNaturalLighting
{
  void *v2;
  void *v3;

  -[HMDHAPAccessory lightProfiles](self, "lightProfiles");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "na_firstObjectPassingTest:", &__block_literal_global_4_126031);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDLightProfile *)v3;
}

uint64_t __57__HMDHAPAccessory_Light__lightProfileWithNaturalLighting__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "settings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "supportedFeatures") & 1;

  return v3;
}

BOOL __69__HMDHAPAccessory_Light__updateBridgedAccessoryLightProfilesSettings__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a2, "notificationEnabledCharacteristics");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

- (BOOL)isCameraRecordingFeatureSupported
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  -[HMDHAPAccessory cameraProfiles](self, "cameraProfiles", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v2);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * i), "isCameraRecordingFeatureSupported") & 1) != 0)
        {
          LOBYTE(v3) = 1;
          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  return v3;
}

- (BOOL)_handleUpdatedServicesForCameraProfiles:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  char v9;
  HMDCameraProfile *v10;
  uint64_t v11;
  uint64_t v12;
  HMDCameraProfile *v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  HMDCameraProfile *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  void *v26;
  uint64_t v27;
  void *v28;
  HMDHAPAccessory *v29;
  NSObject *v30;
  void *v31;
  HMDCameraProfile *v32;
  void *v33;
  HMDCameraProfile *v34;
  void *v35;
  HMDHAPAccessory *v36;
  NSObject *v37;
  void *v38;
  HMDHAPAccessory *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  HMDCameraProfile *v47;
  HMDCameraProfile *v48;
  HMDCameraProfile *v49;
  int v50;
  _BOOL4 v51;
  HMDCameraProfile *v52;
  void *v53;
  HMDHAPAccessory *v54;
  NSObject *v55;
  void *v56;
  HMDCameraProfile *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  HMDHAPAccessory *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  HMDHAPAccessory *v65;
  NSObject *v66;
  void *v67;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  HMDCameraProfile *v77;
  HMDCameraProfile *v78;
  uint64_t v79;
  id obj;
  HMDHAPAccessory *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint8_t v92[128];
  uint8_t buf[4];
  void *v94;
  __int16 v95;
  HMDCameraProfile *v96;
  __int16 v97;
  void *v98;
  _BYTE v99[128];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDAccessory home](self, "home");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v35 = (void *)MEMORY[0x1D17BA0A0]();
    v36 = self;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v94 = v38;
      _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Cannot create camera profile due to updated services: home is nil", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v35);
    LOBYTE(v35) = 0;
    goto LABEL_70;
  }
  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    v35 = (void *)MEMORY[0x1D17BA0A0]();
    v39 = self;
    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v94 = v41;
      _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@Cannot create camera profile due to updated services: message dispatcher is nil", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v35);
    LOBYTE(v35) = 0;
    goto LABEL_69;
  }
  v69 = v4;
  v71 = v6;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v8 = v4;
  v81 = self;
  v83 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v88, v99, 16);
  v72 = v7;
  if (!v83)
  {
    v10 = 0;
    v34 = 0;
    goto LABEL_37;
  }
  obj = v8;
  v9 = 0;
  v10 = 0;
  v82 = *(_QWORD *)v89;
  v11 = *MEMORY[0x1E0CB99D0];
  v79 = *MEMORY[0x1E0CB99C0];
  v75 = *MEMORY[0x1E0CB9AC0];
  v76 = *MEMORY[0x1E0CB9A88];
  v73 = *MEMORY[0x1E0CB99D8];
  do
  {
    v12 = 0;
    do
    {
      if (*(_QWORD *)v89 != v82)
        objc_enumerationMutation(obj);
      v13 = *(HMDCameraProfile **)(*((_QWORD *)&v88 + 1) + 8 * v12);
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v17 = v10;
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDCameraProfile serviceType](v13, "serviceType");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v94 = v18;
        v95 = 2112;
        v96 = v13;
        v97 = 2112;
        v98 = v19;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Found service: %@, %@", buf, 0x20u);

        v10 = v17;
        self = v81;
      }

      objc_autoreleasePoolPop(v14);
      -[HMDCameraProfile serviceType](v13, "serviceType");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v20, "isEqualToString:", v11) & 1) == 0)
      {
        -[HMDCameraProfile serviceType](v13, "serviceType");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v21, "isEqualToString:", v79) & 1) == 0)
        {
          -[HMDCameraProfile serviceType](v13, "serviceType");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v22, "isEqualToString:", v76) & 1) == 0)
          {
            v77 = v10;
            -[HMDCameraProfile serviceType](v13, "serviceType");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v23, "isEqualToString:", v75) & 1) == 0)
            {
              -[HMDCameraProfile serviceType](v13, "serviceType");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              v74 = objc_msgSend(v26, "isEqualToString:", v73);

              self = v81;
              v10 = v77;
              if ((v74 & 1) == 0)
                goto LABEL_21;
              goto LABEL_18;
            }

            v10 = v77;
          }

        }
      }

LABEL_18:
      if (!v10)
      {
        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 4);
        v10 = (HMDCameraProfile *)objc_claimAutoreleasedReturnValue();
      }
      -[HMDCameraProfile addObject:](v10, "addObject:", v13, v69);
LABEL_21:
      -[HMDCameraProfile serviceType](v13, "serviceType", v69);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "isEqualToString:", v11);

      v9 |= v25;
      ++v12;
    }
    while (v83 != v12);
    v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v99, 16);
    v83 = v27;
  }
  while (v27);

  if ((v9 & 1) != 0)
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = v15;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    v7 = v72;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v94 = v31;
      v95 = 2112;
      v96 = v10;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_DEBUG, "%{public}@Creating camera profile with services: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    v32 = [HMDCameraProfile alloc];
    -[HMDAccessory workQueue](v29, "workQueue");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory cameraProfileSettingsManager](v29, "cameraProfileSettingsManager");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = -[HMDCameraProfile initWithAccessory:services:msgDispatcher:workQueue:home:settingsManager:](v32, "initWithAccessory:services:msgDispatcher:workQueue:home:settingsManager:", v29, v10, v72, v8, v71, v33);

LABEL_37:
    v78 = v10;

  }
  else
  {
    v78 = v10;
    v34 = 0;
    v7 = v72;
  }
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  -[HMDAccessory accessoryProfiles](self, "accessoryProfiles", v69);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v84, v92, 16);
  if (v43)
  {
    v44 = v43;
    v45 = *(_QWORD *)v85;
    while (2)
    {
      for (i = 0; i != v44; ++i)
      {
        if (*(_QWORD *)v85 != v45)
          objc_enumerationMutation(v42);
        v47 = (HMDCameraProfile *)*(id *)(*((_QWORD *)&v84 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v48 = v47;
        else
          v48 = 0;
        v49 = v48;

        if (v49)
        {

          v51 = v34 != 0;
          v50 = 1;
          goto LABEL_53;
        }
      }
      v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v84, v92, 16);
      if (v44)
        continue;
      break;
    }
  }

  if (v34)
  {
    v50 = 0;
    v47 = 0;
    v51 = 1;
LABEL_53:
    v52 = v78;
    v53 = (void *)MEMORY[0x1D17BA0A0]();
    v54 = v81;
    HMFGetOSLogHandle();
    v55 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessoryProfile uniqueIdentifier](v47, "uniqueIdentifier");
      v57 = (HMDCameraProfile *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessoryProfile uniqueIdentifier](v34, "uniqueIdentifier");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v94 = v56;
      v95 = 2112;
      v96 = v57;
      v97 = 2112;
      v98 = v58;
      _os_log_impl(&dword_1CD062000, v55, OS_LOG_TYPE_DEBUG, "%{public}@Current CameraProfile %@, New CameraProfile %@", buf, 0x20u);

      v52 = v78;
    }

    objc_autoreleasePoolPop(v53);
    v59 = HMFEqualObjects();
    if ((v59 & 1) != 0)
    {
      LOBYTE(v35) = 0;
      v7 = v72;
      goto LABEL_68;
    }
    if (v51)
    {
      v60 = (void *)MEMORY[0x1D17BA0A0]();
      v61 = v54;
      HMFGetOSLogHandle();
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v94 = v63;
        v95 = 2112;
        v96 = v34;
        _os_log_impl(&dword_1CD062000, v62, OS_LOG_TYPE_INFO, "%{public}@Adding camera profile: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v60);
      -[HMDCameraProfile setUp](v34, "setUp");
      v59 = -[HMDAccessory addAccessoryProfile:](v61, "addAccessoryProfile:", v34);
      v7 = v72;
      v52 = v78;
      if ((v50 & 1) == 0)
      {
LABEL_66:
        LOBYTE(v35) = 1;
        goto LABEL_68;
      }
    }
    else
    {
      v7 = v72;
      if (!v50)
        goto LABEL_66;
    }
    v64 = (void *)MEMORY[0x1D17BA0A0](v59);
    v65 = v54;
    HMFGetOSLogHandle();
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v94 = v67;
      v95 = 2112;
      v96 = v47;
      _os_log_impl(&dword_1CD062000, v66, OS_LOG_TYPE_INFO, "%{public}@Removing camera profile: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v64);
    -[HMDCameraProfile tearDownWithReplacementCameraProfile:](v47, "tearDownWithReplacementCameraProfile:", v34);
    -[HMDAccessory removeAccessoryProfile:](v65, "removeAccessoryProfile:", v47);
    goto LABEL_66;
  }
  v47 = 0;
  LODWORD(v35) = HMFEqualObjects() ^ 1;
  v52 = v78;
LABEL_68:

  v4 = v70;
  v6 = v71;
LABEL_69:

LABEL_70:
  return (char)v35;
}

- (void)encodeCameraProfileNotificationSettingsWithCoder:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  if (objc_msgSend(v5, "hmd_isForLocalStore"))
  {
    -[HMDHAPAccessory cameraProfileNotificationSettings](self, "cameraProfileNotificationSettings");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "encodeObject:forKey:", v4, CFSTR("HAP.cpns"));

  }
}

- (id)cameraProfileNotificationSettingsFromCoder:(id)a3
{
  id v3;
  void *v4;

  v3 = a3;
  objc_msgSend(v3, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("HAP.cpns"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)updateCameraProfileNotificationSettings:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory cameraProfileNotificationSettings](self, "cameraProfileNotificationSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = HMFEqualObjects();

  if ((v6 & 1) == 0)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory cameraProfileNotificationSettings](v8, "cameraProfileNotificationSettings");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543874;
      v14 = v10;
      v15 = 2112;
      v16 = v11;
      v17 = 2112;
      v18 = v4;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating camera profile notification settings from %@ -> %@", (uint8_t *)&v13, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    -[HMDHAPAccessory setCameraProfileNotificationSettings:](v8, "setCameraProfileNotificationSettings:", v4);
    -[HMDAccessory home](v8, "home");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "saveToCurrentAccountWithReason:", CFSTR("HMDHAPAccessoryUpdateCameraProfileNotificationSettingsReason"));

  }
}

- (BOOL)supportsSiri
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  BOOL v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!-[HMDHAPAccessory supportsTargetController](self, "supportsTargetController"))
    return 0;
  if (-[HMDHAPAccessory certificationStatus](self, "certificationStatus") != 2)
  {
    objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "preferenceForKey:", CFSTR("allowSiriForUncertifiedAccessories"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "BOOLValue");

    if (!v5)
      return 0;
  }
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[HMDHAPAccessory services](self, "services", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)v24;
LABEL_6:
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v24 != v12)
        objc_enumerationMutation(v6);
      v14 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v13);
      objc_msgSend(v14, "type");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("00000129-0000-1000-8000-0026BB765291"));

      if ((v16 & 1) != 0)
      {
        v9 = 1;
        if ((v11 & 1) != 0)
          goto LABEL_16;
      }
      else
      {
        objc_msgSend(v14, "type");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "isEqualToString:", CFSTR("00000127-0000-1000-8000-0026BB765291"));

        if ((v18 & 1) != 0)
        {
          v10 = 1;
          if ((v11 & 1) != 0)
            goto LABEL_16;
        }
        else
        {
          objc_msgSend(v14, "type");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("00000133-0000-1000-8000-0026BB765291"));

          v11 |= v20;
          if ((v11 & 1) != 0)
          {
LABEL_16:
            if ((v10 & 1) != 0 && (v9 & 1) != 0)
            {
              v21 = 1;
              goto LABEL_23;
            }
          }
        }
      }
      if (v8 == ++v13)
      {
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        if (v8)
          goto LABEL_6;
        break;
      }
    }
  }
  v21 = 0;
LABEL_23:

  return v21;
}

- (void)getSupportedSiriAudioConfiguration:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __60__HMDHAPAccessory_Siri__getSupportedSiriAudioConfiguration___block_invoke;
  v7[3] = &unk_1E89C1D68;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (BOOL)_resolveAudioAbility:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  BOOL v16;
  BOOL v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHAPAccessory *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHAPAccessory *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  HMDHAPAccessory *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  HMDHAPAccessory *v49;
  NSObject *v50;
  void *v51;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  uint8_t buf[4];
  void *v65;
  __int16 v66;
  void *v67;
  __int16 v68;
  void *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000127-0000-1000-8000-0026BB765291"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "findCharacteristicWithType:", *MEMORY[0x1E0CB8A78]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_msgSend(v6, "findCharacteristicWithType:", *MEMORY[0x1E0CB8A10]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        v9 = (void *)MEMORY[0x1E0D165D0];
        objc_msgSend(v7, "value");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v63 = 0;
        objc_msgSend(v9, "parsedFromData:error:", v10, &v63);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v63;

        if (v12 || !v11)
        {
          v41 = (void *)MEMORY[0x1D17BA0A0]();
          v42 = self;
          HMFGetOSLogHandle();
          v43 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHAPAccessory name](v42, "name");
            v55 = v8;
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDAccessory uuid](v42, "uuid");
            v57 = v41;
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v46, "UUIDString");
            v60 = v11;
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v65 = v44;
            v66 = 2112;
            v67 = v45;
            v68 = 2112;
            v69 = v47;
            _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Failed to parse supported audio configurations (%@/%@)", buf, 0x20u);

            v41 = v57;
            v8 = v55;

            v11 = v60;
          }

          objc_autoreleasePoolPop(v41);
          v17 = 0;
        }
        else
        {
          v13 = (void *)MEMORY[0x1E0D165B8];
          objc_msgSend(v8, "value");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v62 = 0;
          objc_msgSend(v13, "parsedFromData:error:", v14, &v62);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = v62;

          if (v12)
            v16 = 1;
          else
            v16 = v15 == 0;
          v17 = !v16;
          if (v16)
          {
            v61 = v11;
            v48 = (void *)MEMORY[0x1D17BA0A0]();
            v49 = self;
            HMFGetOSLogHandle();
            v50 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHAPAccessory name](v49, "name");
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDAccessory uuid](v49, "uuid");
              v54 = v48;
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v51, "UUIDString");
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v65 = v58;
              v66 = 2112;
              v67 = v56;
              v68 = 2112;
              v69 = v53;
              _os_log_impl(&dword_1CD062000, v50, OS_LOG_TYPE_INFO, "%{public}@Failed to parse selected audio configuration (%@/%@)", buf, 0x20u);

              v48 = v54;
            }

            objc_autoreleasePoolPop(v48);
            v11 = v61;
          }
          else
          {
            objc_msgSend(v11, "configurations");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "setSupportedConfigurations:", v18);

            objc_msgSend(v15, "configuration");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "setSelectedConfiguration:", v19);

          }
        }

      }
      else
      {
        v34 = (void *)MEMORY[0x1D17BA0A0]();
        v35 = self;
        HMFGetOSLogHandle();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory name](v35, "name");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory uuid](v35, "uuid");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "UUIDString");
          v59 = v34;
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v65 = v37;
          v66 = 2112;
          v67 = v38;
          v68 = 2112;
          v69 = v40;
          _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@No selected audio configuration (%@/%@)", buf, 0x20u);

          v34 = v59;
        }

        objc_autoreleasePoolPop(v34);
        v17 = 0;
      }

    }
    else
    {
      v27 = (void *)MEMORY[0x1D17BA0A0]();
      v28 = self;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory name](v28, "name");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAccessory uuid](v28, "uuid");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "UUIDString");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v65 = v30;
        v66 = 2112;
        v67 = v31;
        v68 = 2112;
        v69 = v33;
        _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@No supported audio configuration (%@/%@)", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v27);
      v17 = 0;
    }

  }
  else
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = self;
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory name](v21, "name");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory uuid](v21, "uuid");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "UUIDString");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v65 = v23;
      v66 = 2112;
      v67 = v24;
      v68 = 2112;
      v69 = v26;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@No Audio services available (%@/%@)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v20);
    v17 = 0;
  }

  return v17;
}

- (BOOL)_resolveSupportedSiriInputType:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  BOOL v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHAPAccessory *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v34;
  void *v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000133-0000-1000-8000-0026BB765291"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "findCharacteristicWithType:", CFSTR("00000132-0000-1000-8000-0026BB765291"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      objc_msgSend(v7, "value");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v10 = v9;
      else
        v10 = 0;
      v11 = v10;

      v12 = v11 != 0;
      if (v11)
      {
        objc_msgSend(v4, "setSiriInputType:", objc_msgSend(v11, "integerValue"));
      }
      else
      {
        v27 = (void *)MEMORY[0x1D17BA0A0]();
        v28 = self;
        HMFGetOSLogHandle();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory name](v28, "name");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory uuid](v28, "uuid");
          v35 = v27;
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "UUIDString");
          *(_DWORD *)buf = 138543874;
          v37 = v34;
          v38 = 2112;
          v39 = v30;
          v40 = 2112;
          v41 = objc_claimAutoreleasedReturnValue();
          v32 = (void *)v41;
          _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@Unable to parse Siri Input Type (%@/%@)", buf, 0x20u);

          v27 = v35;
        }

        objc_autoreleasePoolPop(v27);
      }

    }
    else
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory name](v21, "name");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAccessory uuid](v21, "uuid");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "UUIDString");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v37 = v23;
        v38 = 2112;
        v39 = v24;
        v40 = 2112;
        v41 = (uint64_t)v26;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@No Siri Input Type (%@/%@)", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v20);
      v12 = 0;
    }

  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory name](v14, "name");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory uuid](v14, "uuid");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v37 = v16;
      v38 = 2112;
      v39 = v17;
      v40 = 2112;
      v41 = (uint64_t)v19;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@No Siri services available (%@/%@)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
    v12 = 0;
  }

  return v12;
}

- (void)setSelectedSiriAudioConfiguration:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHAPAccessory *v9;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __59__HMDHAPAccessory_Siri__setSelectedSiriAudioConfiguration___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_updateSiriAudioFormat:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHAPAccessory *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHAPAccessory *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *context;
  void *v34;
  _QWORD v35[4];
  id v36;
  id v37;
  void *v38;
  _BYTE location[12];
  __int16 v40;
  id v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000127-0000-1000-8000-0026BB765291"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "findCharacteristicWithType:", *MEMORY[0x1E0CB8A10]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v37 = 0;
      v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D165B8]), "initWithConfiguration:", v4);
      objc_msgSend(v34, "serializeWithError:", &v37);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v37;
      if (v9 || !v8)
      {
        context = (void *)MEMORY[0x1D17BA0A0]();
        v27 = self;
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHAPAccessory name](v27, "name");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDAccessory uuid](v27, "uuid");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "UUIDString");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)location = 138544130;
          *(_QWORD *)&location[4] = v32;
          v40 = 2112;
          v41 = v9;
          v42 = 2112;
          v43 = v29;
          v44 = 2112;
          v45 = v31;
          _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@[Updating Selected Audio] Failed to serialize charactersitic value; error=%@ (%@/%@)",
            location,
            0x2Au);

        }
        objc_autoreleasePoolPop(context);
      }
      else
      {
        +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:type:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:type:", v7, v8, 0, 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = v10;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v38, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_initWeak((id *)location, self);
        -[HMDAccessory workQueue](self, "workQueue");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v35[0] = MEMORY[0x1E0C809B0];
        v35[1] = 3221225472;
        v35[2] = __48__HMDHAPAccessory_Siri___updateSiriAudioFormat___block_invoke;
        v35[3] = &unk_1E89C17B0;
        objc_copyWeak(&v36, (id *)location);
        -[HMDHAPAccessory writeCharacteristicValues:source:queue:completionHandler:](self, "writeCharacteristicValues:source:queue:completionHandler:", v11, 7, v12, v35);

        objc_destroyWeak(&v36);
        objc_destroyWeak((id *)location);

      }
    }
    else
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory name](v21, "name");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAccessory uuid](v21, "uuid");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "UUIDString");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)location = 138543874;
        *(_QWORD *)&location[4] = v23;
        v40 = 2112;
        v41 = v24;
        v42 = 2112;
        v43 = v26;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@[Updating Selected Audio] No selected audio configuration (%@/%@)", location, 0x20u);

      }
      objc_autoreleasePoolPop(v20);
    }

  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory name](v14, "name");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory uuid](v14, "uuid");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)location = 138543874;
      *(_QWORD *)&location[4] = v16;
      v40 = 2112;
      v41 = v17;
      v42 = 2112;
      v43 = v19;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@[Updating Selected Audio] No Audio services available (%@/%@)", location, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

void __48__HMDHAPAccessory_Siri___updateSiriAudioFormat___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v3 && objc_msgSend(v3, "count"))
    {
      objc_msgSend(v3, "objectAtIndex:", 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "error");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      v7 = (void *)MEMORY[0x1D17BA0A0]();
      v8 = WeakRetained;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v9;
      if (v6)
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "error");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "name");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "uuid");
          v26 = v7;
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "UUIDString");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v28 = v11;
          v29 = 2112;
          v30 = v12;
          v31 = 2112;
          v32 = v13;
          v33 = 2112;
          v34 = v15;
          _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@[Updating Selected Audio] Failed to update characteristic value; error=%@ (%@/%@)",
            buf,
            0x2Au);

          v7 = v26;
LABEL_12:

        }
      }
      else if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "name");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "uuid");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "UUIDString");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v28 = v11;
        v29 = 2112;
        v30 = v23;
        v31 = 2112;
        v32 = v25;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@[Updating Selected Audio] Selected audio configuration set successfully (%@/%@)", buf, 0x20u);

        goto LABEL_12;
      }

      objc_autoreleasePoolPop(v7);
      goto LABEL_14;
    }
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = WeakRetained;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "name");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "uuid");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "UUIDString");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v28 = v19;
      v29 = 2112;
      v30 = v20;
      v31 = 2112;
      v32 = v22;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@[Updating Selected Audio] Failed to update characteristic value; no response (%@/%@)",
        buf,
        0x20u);

    }
    objc_autoreleasePoolPop(v16);
  }
LABEL_14:

}

uint64_t __59__HMDHAPAccessory_Siri__setSelectedSiriAudioConfiguration___block_invoke(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return objc_msgSend(*(id *)(result + 40), "_updateSiriAudioFormat:");
  return result;
}

void __60__HMDHAPAccessory_Siri__getSupportedSiriAudioConfiguration___block_invoke(uint64_t a1)
{
  HMDSupportedSiriAudioConfigurations *v2;
  HMDSupportedSiriAudioConfigurations *v3;

  v3 = objc_alloc_init(HMDSupportedSiriAudioConfigurations);
  if ((objc_msgSend(*(id *)(a1 + 32), "_resolveSupportedSiriInputType:") & 1) != 0)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "_resolveAudioAbility:", v3) & 1) != 0)
      v2 = v3;
    else
      v2 = 0;
    (*(void (**)(_QWORD, HMDSupportedSiriAudioConfigurations *))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v2);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

- (void)_handleUpdateMediaSourceDisplayOrder:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  id v25;
  id v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  void (**v32)(_QWORD, _QWORD, _QWORD);
  uint64_t v33;
  id v34;
  void *v35;
  void (**v36)(_QWORD, _QWORD, _QWORD);
  void *v37;
  void *v38;
  void (**v39)(_QWORD, _QWORD, _QWORD);
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void (**v44)(_QWORD, _QWORD, _QWORD);
  void *v45;
  void *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  HMDHAPAccessory *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void (**v54)(_QWORD, _QWORD, _QWORD);
  void *v55;
  void *v56;
  id obj;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  _QWORD v64[4];
  id v65;
  id v66;
  id v67;
  id v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[128];
  _BYTE v86[128];
  uint8_t v87[128];
  uint8_t buf[4];
  void *v89;
  __int16 v90;
  id v91;
  __int16 v92;
  uint64_t v93;
  _BYTE v94[128];
  uint8_t v95[32];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v63 = a3;
  objc_msgSend(v63, "numberForKey:", CFSTR("kServiceInstanceID"));
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v63, "arrayForKey:", *MEMORY[0x1E0CB9E30]);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  if (v62 && objc_msgSend(v61, "count"))
  {
    -[HMDHAPAccessory findService:](self, "findService:", v62);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v60
      || (objc_msgSend(v60, "serviceType"),
          v4 = (void *)objc_claimAutoreleasedReturnValue(),
          v5 = objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CB9AF0]),
          v4,
          (v5 & 1) == 0))
    {
      objc_msgSend(v63, "responseHandler");
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      if (v38)
      {
        objc_msgSend(v63, "responseHandler");
        v39 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v39)[2](v39, v40, 0);

      }
      goto LABEL_64;
    }
    objc_msgSend(v60, "findCharacteristicWithType:", CFSTR("00000136-0000-1000-8000-0026BB765291"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v56)
    {
      objc_msgSend(v63, "responseHandler", 0);
      v43 = (void *)objc_claimAutoreleasedReturnValue();

      if (v43)
      {
        objc_msgSend(v63, "responseHandler");
        v44 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v44)[2](v44, v45, 0);

      }
      goto LABEL_63;
    }
    v6 = (void *)MEMORY[0x1E0C99DE8];
    objc_msgSend(v60, "linkedServices");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "arrayWithCapacity:", objc_msgSend(v7, "count"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    objc_msgSend(v60, "linkedServices");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v77, v87, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v78;
      v12 = *MEMORY[0x1E0CB9A48];
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v78 != v11)
            objc_enumerationMutation(v9);
          -[HMDHAPAccessory findService:](self, "findService:", *(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * i), v56);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "serviceType");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v15, "isEqualToString:", v12);

          if (v16)
            objc_msgSend(v8, "addObject:", v14);

        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v77, v87, 16);
      }
      while (v10);
    }

    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    obj = v61;
    v59 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v86, 16);
    if (v59)
    {
      v58 = *(_QWORD *)v74;
      while (1)
      {
        v17 = 0;
LABEL_18:
        if (*(_QWORD *)v74 != v58)
          objc_enumerationMutation(obj);
        v18 = *(_QWORD *)(*((_QWORD *)&v73 + 1) + 8 * v17);
        v69 = 0u;
        v70 = 0u;
        v71 = 0u;
        v72 = 0u;
        v19 = v8;
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
        if (!v20)
          break;
        v21 = *(_QWORD *)v70;
LABEL_22:
        v22 = 0;
        while (1)
        {
          if (*(_QWORD *)v70 != v21)
            objc_enumerationMutation(v19);
          objc_msgSend(*(id *)(*((_QWORD *)&v69 + 1) + 8 * v22), "mediaSourceIdentifier", v56);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "isEqualToNumber:", v18);

          if ((v24 & 1) != 0)
            break;
          if (v20 == ++v22)
          {
            v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
            if (v20)
              goto LABEL_22;
            goto LABEL_47;
          }
        }

        if (++v17 != v59)
          goto LABEL_18;
        v59 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v86, 16);
        if (!v59)
          goto LABEL_31;
      }
LABEL_47:

      objc_msgSend(v63, "responseHandler");
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v41)
        goto LABEL_62;
      objc_msgSend(v63, "responseHandler");
      v32 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v32)[2](v32, v42, 0);

    }
    else
    {
LABEL_31:

      v25 = obj;
      objc_msgSend(v25, "count");
      v114 = 0u;
      v113 = 0u;
      v112 = 0u;
      v111 = 0u;
      v110 = 0u;
      v109 = 0u;
      v108 = 0u;
      v107 = 0u;
      v106 = 0u;
      v105 = 0u;
      v104 = 0u;
      v103 = 0u;
      v102 = 0u;
      v101 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      memset(v95, 0, sizeof(v95));
      TLV8BufferInit();
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v26 = v25;
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v81, v94, 16);
      if (v27)
      {
        v28 = 0;
        v29 = *(_QWORD *)v82;
        while (2)
        {
          for (j = 0; j != v27; ++j)
          {
            if (*(_QWORD *)v82 != v29)
              objc_enumerationMutation(v26);
            v31 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * j);
            if ((v28 & 1) != 0 && (LODWORD(v32) = TLV8BufferAppend(), (_DWORD)v32)
              || (objc_msgSend(v31, "unsignedIntegerValue", v56), LODWORD(v32) = TLV8BufferAppendUInt64(), (_DWORD)v32))
            {

              v33 = TLV8BufferFree();
              goto LABEL_52;
            }
            v28 = 1;
          }
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v81, v94, 16);
          if (v27)
            continue;
          break;
        }
      }

      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *(_QWORD *)v95, *(_QWORD *)&v95[8]);
      v32 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v33 = TLV8BufferFree();
      if (v32)
      {
        v34 = 0;
      }
      else
      {
LABEL_52:
        v46 = (void *)MEMORY[0x1D17BA0A0](v33);
        HMFGetOSLogHandle();
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v89 = v48;
          v90 = 2112;
          v91 = v26;
          v92 = 2048;
          v93 = (int)v32;
          _os_log_impl(&dword_1CD062000, v47, OS_LOG_TYPE_INFO, "%{public}@Failed to serialize display order %@ as TLV - status %ld", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v46);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        v32 = 0;
      }

      obj = v34;
      if (obj)
      {
        v49 = (void *)MEMORY[0x1D17BA0A0]();
        v50 = self;
        HMFGetOSLogHandle();
        v51 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v95 = 138543874;
          *(_QWORD *)&v95[4] = v52;
          *(_WORD *)&v95[12] = 2112;
          *(_QWORD *)&v95[14] = v26;
          *(_WORD *)&v95[22] = 2112;
          *(_QWORD *)&v95[24] = obj;
          _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@Failed to serialize request for updating display order to %@ - error %@", v95, 0x20u);

        }
        objc_autoreleasePoolPop(v49);
        objc_msgSend(v63, "responseHandler");
        v53 = (void *)objc_claimAutoreleasedReturnValue();

        if (v53)
        {
          objc_msgSend(v63, "responseHandler");
          v54 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, id, _QWORD))v54)[2](v54, obj, 0);

        }
      }
      else
      {
        objc_initWeak((id *)v95, self);
        -[HMDAccessory workQueue](self, "workQueue");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v64[0] = MEMORY[0x1E0C809B0];
        v64[1] = 3221225472;
        v64[2] = __68__HMDHAPAccessory_Television___handleUpdateMediaSourceDisplayOrder___block_invoke;
        v64[3] = &unk_1E89B94D0;
        objc_copyWeak(&v68, (id *)v95);
        v65 = v26;
        v66 = v63;
        v67 = v56;
        -[HMDHAPAccessory writeValue:toCharacteristic:queue:completion:](self, "writeValue:toCharacteristic:queue:completion:", v32, v67, v55, v64);

        objc_destroyWeak(&v68);
        objc_destroyWeak((id *)v95);
        obj = 0;
      }
    }

LABEL_62:
LABEL_63:

LABEL_64:
    goto LABEL_65;
  }
  objc_msgSend(v63, "responseHandler");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (v35)
  {
    objc_msgSend(v63, "responseHandler");
    v36 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v36)[2](v36, v37, 0);

  }
LABEL_65:

}

void __68__HMDHAPAccessory_Television___handleUpdateMediaSourceDisplayOrder___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    if (v3)
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      v6 = WeakRetained;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = *(_QWORD *)(a1 + 32);
        v11 = 138543874;
        v12 = v8;
        v13 = 2112;
        v14 = v9;
        v15 = 2112;
        v16 = v3;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Failed to write request for updating display order to %@ - error  %@", (uint8_t *)&v11, 0x20u);

      }
      objc_autoreleasePoolPop(v5);
      objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v3);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 48), "service");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "updateMediaSourceDisplayOrder:requestMessage:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

      objc_msgSend(*(id *)(a1 + 40), "respondWithPayload:", 0);
    }
  }

}

- (void)configureSiriEndpointProfileMetricsDispatcherWithFactory:(id)a3 logEventSubmitter:(id)a4 dailyScheduler:(id)a5
{
  id v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = (unint64_t)a4;
  v10 = (unint64_t)a5;
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
  if (v9 | v10)
  {
    if (v14)
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543362;
      v22 = v15;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Configuring siri endpoint profile metrics dispatcher", (uint8_t *)&v21, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    -[HMDAccessory uuid](v12, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory home](v12, "home");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "uuid");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "createSiriEndpointProfileMetricsDispatcherWithAccessoryUUID:homeUUID:logEventSubmitter:", v16, v18, v9);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "setDataSource:", v12);
    objc_msgSend((id)v10, "registerDailyTaskRunner:", v19);
    -[HMDHAPAccessory setSiriEndpointProfileMetricsDispatcher:](v12, "setSiriEndpointProfileMetricsDispatcher:", v19);

  }
  else
  {
    if (v14)
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543362;
      v22 = v20;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Metrics disabled for siri endpoint profile metrics dispatcher", (uint8_t *)&v21, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (id)createSiriEndpointProfileMetricsDispatcherWithAccessoryUUID:(id)a3 homeUUID:(id)a4 logEventSubmitter:(id)a5
{
  id v7;
  id v8;
  id v9;
  HMDSiriEndpointProfileMetricsDispatcher *v10;

  v7 = a5;
  v8 = a4;
  v9 = a3;
  v10 = -[HMDSiriEndpointProfileMetricsDispatcher initWithAccessoryUUID:homeUUID:logEventSubmitter:]([HMDSiriEndpointProfileMetricsDispatcher alloc], "initWithAccessoryUUID:homeUUID:logEventSubmitter:", v9, v8, v7);

  return v10;
}

- (HAPSocketInfo)socketInfo
{
  NSObject *v3;
  id v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = __Block_byref_object_copy__166946;
  v11 = __Block_byref_object_dispose__166947;
  v12 = 0;
  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __38__HMDHAPAccessory_Network__socketInfo__block_invoke;
  v6[3] = &unk_1E89C0800;
  v6[4] = self;
  v6[5] = &v7;
  dispatch_sync(v3, v6);

  v4 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  return (HAPSocketInfo *)v4;
}

- (NSDictionary)bonjourDeviceInfo
{
  NSObject *v3;
  id v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = __Block_byref_object_copy__166946;
  v11 = __Block_byref_object_dispose__166947;
  v12 = 0;
  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __45__HMDHAPAccessory_Network__bonjourDeviceInfo__block_invoke;
  v6[3] = &unk_1E89C0800;
  v6[4] = self;
  v6[5] = &v7;
  dispatch_sync(v3, v6);

  v4 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  return (NSDictionary *)v4;
}

- (void)assignBonjourDeviceInfo:(id)a3 socketInfo:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543874;
    v22 = v11;
    v23 = 2112;
    v24 = v6;
    v25 = 2112;
    v26 = v7;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Assigning bonjour device info: %@, socket info: %@", (uint8_t *)&v21, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHAPAccessory primaryIPServer](v9, "primaryIPServer");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = v9;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
  if (v12)
  {
    if (v16)
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543362;
      v22 = v17;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Accessory is reachable.  Assigning socket info to existing accessory server", (uint8_t *)&v21, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(v12, "setCachedSocketInfo:", v7);
  }
  else
  {
    if (v16)
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543362;
      v22 = v18;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@HAPAccessoryServerIP not available via IP browser.  Attempting to interject accessory is reachable via simulating bonjour update", (uint8_t *)&v21, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    -[HMDAccessory home](v14, "home");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "accessoryBrowser");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "handleConnectionUpdateWithBonjourDeviceInfo:socketInfo:", v6, v7);

  }
}

void __45__HMDHAPAccessory_Network__bonjourDeviceInfo__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  const char *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "primaryIPServer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543362;
      v14 = v11;
      v12 = "%{public}@Could not get bonjour device info: IP server does not exist";
      goto LABEL_7;
    }
LABEL_8:

    objc_autoreleasePoolPop(v8);
    goto LABEL_9;
  }
  objc_msgSend(v2, "bonjourDeviceInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "copy");
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543362;
      v14 = v11;
      v12 = "%{public}@Could not get bonjour device info: IP server not reachable via bonjour";
LABEL_7:
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, v12, (uint8_t *)&v13, 0xCu);

      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:

}

void __38__HMDHAPAccessory_Network__socketInfo__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "primaryIPServer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "currentSocketInfo");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Could not get peer socket address: IP server does not exist", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
  }

}

- (unsigned)threadCapabilities
{
  void *v2;
  unsigned __int16 v3;

  -[HMDHAPAccessory internalThreadCapabilities](self, "internalThreadCapabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedShortValue");

  return v3;
}

- (unsigned)threadStatus
{
  void *v2;
  unsigned __int16 v3;

  -[HMDHAPAccessory internalThreadStatus](self, "internalThreadStatus");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedShortValue");

  return v3;
}

- (BOOL)isThreadTheCurrentlyActiveTransport
{
  void *v2;
  char v3;

  -[HMDHAPAccessory internalThreadActive](self, "internalThreadActive");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  return v3;
}

- (BOOL)supportsThreadCommissioning
{
  NSObject *v3;
  void *v4;
  BOOL v5;

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  if (!-[HMDHAPAccessory hasBTLELink](self, "hasBTLELink"))
    return 0;
  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000701-0000-1000-8000-0026BB765291"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 != 0;

  return v5;
}

- (id)_findThreadControlPointCharacteristicWithError:(id *)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  void *v17;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000701-0000-1000-8000-0026BB765291"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "findCharacteristicWithType:", CFSTR("00000704-0000-1000-8000-0026BB765291"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      v9 = v7;
    }
    else
    {
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138543362;
        v20 = v17;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Unable to find thread control point characteristic", (uint8_t *)&v19, 0xCu);

      }
      objc_autoreleasePoolPop(v14);
      if (a3)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 66);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
    }

  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543362;
      v20 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Commissioning to a thread network is not possible with this accessory", (uint8_t *)&v19, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    if (a3)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      v8 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = 0;
    }
  }

  return v8;
}

- (void)_writeThreadControlPointCharacteristic:(id)a3 value:(id)a4 activity:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  HMDHAPAccessory *v19;
  id v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v10 = a5;
  v11 = a6;
  +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:](HMDCharacteristicWriteRequest, "writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:", a3, a4, 0, 0, 0, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v12;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory workQueue](self, "workQueue");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __102__HMDHAPAccessory_ThreadManagement___writeThreadControlPointCharacteristic_value_activity_completion___block_invoke;
  v17[3] = &unk_1E89BF138;
  v18 = v10;
  v19 = self;
  v20 = v11;
  v15 = v11;
  v16 = v10;
  -[HMDHAPAccessory writeCharacteristicValues:source:queue:completionHandler:](self, "writeCharacteristicValues:source:queue:completionHandler:", v13, 7, v14, v17);

}

- (BOOL)_validateCurrentThreadCredentials:(id)a3 metadata:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  BOOL v20;
  void *v21;
  HMDHAPAccessory *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  int v28;
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "networkName");
  v8 = objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)v8;
    objc_msgSend(v6, "extendedPanID");
    v10 = objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = (void *)v10;
      objc_msgSend(v6, "channel");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        objc_msgSend(v7, "name");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "networkName");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v13, "isEqualToString:", v14))
        {
          objc_msgSend(v7, "extendedPANID");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "extendedPanID");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v15, "isEqualToData:", v16))
          {
            v17 = objc_msgSend(v7, "channel");
            objc_msgSend(v6, "channel");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "value");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = objc_msgSend(v19, "unsignedIntValue") == v17;

          }
          else
          {
            v20 = 0;
          }

        }
        else
        {
          v20 = 0;
        }

        goto LABEL_15;
      }
    }
    else
    {

    }
  }
  v21 = (void *)MEMORY[0x1D17BA0A0]();
  v22 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "networkName");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "extendedPanID");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 138543874;
    v29 = v24;
    v30 = 2112;
    v31 = v25;
    v32 = 2112;
    v33 = v26;
    _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Cannot validate %@/%@", (uint8_t *)&v28, 0x20u);

  }
  objc_autoreleasePoolPop(v21);
  v20 = 0;
LABEL_15:

  return v20;
}

- (void)commissionToThreadNetworkWithPairingEvent:(id)a3 completion:(id)a4
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  id v15;
  _QWORD block[4];
  id v17;
  HMDHAPAccessory *v18;
  id v19;
  id v20;
  id v21;

  v7 = a3;
  v8 = a4;
  v9 = objc_alloc(MEMORY[0x1E0D28540]);
  v10 = (void *)MEMORY[0x1E0CB3940];
  MEMORY[0x1D17B8D08](self, a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringWithFormat:", CFSTR("%@, %s:%ld"), v11, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HMDHAPAccessory+ThreadManagement.m", 353);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (id)objc_msgSend(v9, "initWithName:", v12);

  -[HMDAccessory workQueue](self, "workQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __90__HMDHAPAccessory_ThreadManagement__commissionToThreadNetworkWithPairingEvent_completion___block_invoke;
  block[3] = &unk_1E89C0448;
  v17 = v21;
  v18 = self;
  v19 = v7;
  v20 = v8;
  v14 = v8;
  v15 = v7;
  dispatch_async(v13, block);

  __HMFActivityScopeLeave();
}

- (void)_commissionToThreadNetworkWithActivity:(id)a3 pairingEvent:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHAPAccessory *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMDHAPAccessory *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  HMDHAPAccessory *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  _QWORD aBlock[5];
  id v33;
  id v34;
  id v35;
  id v36;
  uint8_t buf[4];
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDAccessory workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v11);

  if (-[HMDHAPAccessory hasBTLELink](self, "hasBTLELink"))
  {
    -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000701-0000-1000-8000-0026BB765291"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12)
    {
      objc_msgSend(v12, "findCharacteristicWithType:", CFSTR("00000704-0000-1000-8000-0026BB765291"));
      v14 = objc_claimAutoreleasedReturnValue();
      if (v14)
      {
        v15 = (void *)v14;
        if (v9)
          objc_msgSend(v9, "setThreadAccessory:", 1);
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = __100__HMDHAPAccessory_ThreadManagement___commissionToThreadNetworkWithActivity_pairingEvent_completion___block_invoke;
        aBlock[3] = &unk_1E89BF188;
        aBlock[4] = self;
        v33 = v8;
        v36 = v10;
        v34 = v9;
        v16 = v15;
        v35 = v16;
        v17 = _Block_copy(aBlock);
        -[HMDAccessory home](self, "home");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "retrieveThreadNetworkMetadataWithCompletion:", v17);

      }
      else
      {
        v27 = (void *)MEMORY[0x1D17BA0A0]();
        v28 = self;
        HMFGetOSLogHandle();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v38 = v30;
          _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_ERROR, "%{public}@Unable to find thread control point characteristic", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v27);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 66);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, void *))v10 + 2))(v10, v31);

        v16 = 0;
      }
    }
    else
    {
      v23 = (void *)MEMORY[0x1D17BA0A0]();
      v24 = self;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v38 = v26;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@This accessory doesn't support thread", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      v16 = (id)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, id))v10 + 2))(v10, v16);
    }

  }
  else
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v38 = v22;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Commissioning to a thread network is only supported for bluetooth accessories", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v10 + 2))(v10, v13);
  }

}

- (void)_writeCredentialsForThreadNetworkWithActivity:(id)a3 pairingEvent:(id)a4 metadata:(id)a5 threadControlPointCharacteristic:(id)a6 completion:(id)a7
{
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  HMDHAPAccessory *v43;
  void *v44;
  void *v45;
  void *v46;
  HMDHAPAccessory *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  HMDHAPAccessory *v51;
  NSObject *v52;
  void *v53;
  void *context;
  id v55;
  id v56;
  void *v57;
  id v58;
  _QWORD v59[5];
  id v60;
  id v61;
  unsigned __int16 v62;
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  id v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v56 = a3;
  v12 = a4;
  v13 = a5;
  v55 = a6;
  v58 = a7;
  -[HMDAccessory workQueue](self, "workQueue");
  v14 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v14);

  v15 = v13;
  v16 = objc_alloc(MEMORY[0x1E0D16610]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", objc_msgSend(v15, "channel"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v16, "initWithValue:", v17);

  v62 = 0;
  objc_msgSend(v15, "PANID");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "length");

  v57 = v12;
  if (v20 == 2)
  {
    objc_msgSend(v15, "PANID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "getBytes:length:", &v62, 2);

    v62 = bswap32(v62) >> 16;
    v22 = objc_alloc(MEMORY[0x1E0D16610]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", v62);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_msgSend(v22, "initWithValue:", v23);

    v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D16610]), "initWithValue:", &unk_1E8B35100);
    v26 = objc_alloc(MEMORY[0x1E0D16358]);
    objc_msgSend(v15, "name");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "extendedPANID");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "masterKey");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = (void *)objc_msgSend(v26, "initWithNetworkName:channel:panID:extendedPanID:masterKey:reattachPeriod:", v27, v18, v24, v28, v29, v25);

  }
  else
  {
    v31 = (void *)MEMORY[0x1D17BA0A0]();
    objc_opt_class();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "PANID");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v64 = v34;
      v65 = 2112;
      v66 = v35;
      _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_ERROR, "%{public}@Invalid length for PANID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v31);
    v30 = 0;
  }

  if (v30)
  {
    v36 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D16360]), "initWithValue:", 1);
    v37 = objc_alloc(MEMORY[0x1E0D16610]);
    v38 = (void *)objc_msgSend(v37, "initWithValue:", MEMORY[0x1E0C9AAB0]);
    v39 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D16350]), "initWithOperationType:threadNetworkCredentials:formingAllowed:", v36, v30, v38);
    v61 = 0;
    objc_msgSend(v39, "serializeWithError:", &v61);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = v61;
    v42 = v57;
    if (v40)
    {
      if (v57)
        objc_msgSend(v57, "setBtCommissioned:", 1);
      -[HMDAccessory uuid](self, "uuid");

      v59[0] = MEMORY[0x1E0C809B0];
      v59[1] = 3221225472;
      v59[2] = __149__HMDHAPAccessory_ThreadManagement___writeCredentialsForThreadNetworkWithActivity_pairingEvent_metadata_threadControlPointCharacteristic_completion___block_invoke;
      v59[3] = &unk_1E89BF1D8;
      v59[4] = self;
      v60 = v58;
      v43 = self;
      v45 = v55;
      v44 = v56;
      -[HMDHAPAccessory _writeThreadControlPointCharacteristic:value:activity:completion:](v43, "_writeThreadControlPointCharacteristic:value:activity:completion:", v55, v40, v56, v59);

    }
    else
    {
      context = (void *)MEMORY[0x1D17BA0A0]();
      v51 = self;
      HMFGetOSLogHandle();
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v53;
        v65 = 2112;
        v66 = v41;
        _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_ERROR, "%{public}@Unable to serialize thread control point TLV: %@", buf, 0x16u);

        v42 = v57;
      }

      objc_autoreleasePoolPop(context);
      (*((void (**)(id, id))v58 + 2))(v58, v41);
      v45 = v55;
      v44 = v56;
    }

    v50 = v58;
  }
  else
  {
    v46 = (void *)MEMORY[0x1D17BA0A0]();
    v47 = self;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v64 = v49;
      _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_ERROR, "%{public}@Unable to create TLV for network credentials", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v46);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = v58;
    (*((void (**)(id, void *))v58 + 2))(v58, v36);
    v44 = v56;
    v42 = v57;
    v45 = v55;
  }

}

- (unsigned)metric_threadCapabilities
{
  int v3;
  void *v4;
  void *v5;
  void *v6;
  __int16 v7;

  v3 = -[HMDHAPAccessory threadCapabilities](self, "threadCapabilities");
  if (!v3)
  {
    -[HMDHAPAccessory findCharacteristicType:forServiceType:](self, "findCharacteristicType:forServiceType:", CFSTR("00000702-0000-1000-8000-0026BB765291"), CFSTR("00000701-0000-1000-8000-0026BB765291"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "value");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v4, "value");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }

    v7 = objc_msgSend(v6, "unsignedShortValue");
    LOWORD(v3) = v7;
  }
  return v3;
}

void __149__HMDHAPAccessory_ThreadManagement___writeCredentialsForThreadNetworkWithActivity_pairingEvent_metadata_threadControlPointCharacteristic_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void (*v7)(void);
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v11;
      v14 = 2112;
      v15 = MEMORY[0x1E0C9AAB0];
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Writing thread credentials succeeded - formingAllowed=%@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v7 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  v7();

}

void __100__HMDHAPAccessory_ThreadManagement___commissionToThreadNetworkWithActivity_pairingEvent_completion___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __100__HMDHAPAccessory_ThreadManagement___commissionToThreadNetworkWithActivity_pairingEvent_completion___block_invoke_2;
  block[3] = &unk_1E89BF160;
  v8 = a1[5];
  v9 = a1[4];
  v13 = v8;
  v14 = v9;
  v15 = v6;
  v16 = v5;
  v19 = a1[8];
  v17 = a1[6];
  v18 = a1[7];
  v10 = v5;
  v11 = v6;
  dispatch_async(v7, block);

}

void __100__HMDHAPAccessory_ThreadManagement___commissionToThreadNetworkWithActivity_pairingEvent_completion___block_invoke_2(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "begin");
  v20 = *(id *)(a1 + 32);
  v2 = *(id *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "uuid");

  objc_msgSend(*(id *)(a1 + 48), "code");
  if (*(_QWORD *)(a1 + 56))
    goto LABEL_2;
  if ((objc_msgSend(*(id *)(a1 + 40), "supportsCHIP") & 1) != 0)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v15 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v22 = v16;
      v23 = 2112;
      v24 = v17;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network with error %@", buf, 0x16u);

    }
LABEL_15:

    objc_autoreleasePoolPop(v13);
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
    goto LABEL_16;
  }
  if (objc_msgSend(*(id *)(a1 + 48), "code") == 92 || objc_msgSend(*(id *)(a1 + 48), "code") == 91)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v15 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      v22 = v18;
      v23 = 2112;
      v24 = v19;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Ignoring error for HAP accessories %@", buf, 0x16u);

    }
    goto LABEL_15;
  }
LABEL_2:
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v22 = v6;
    v23 = 2112;
    v24 = v7;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Retrieved metadata for thread network %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v22 = v11;
    v23 = 2112;
    v24 = v12;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Attempting to commission thread accessory to network '%@'", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 40), "_writeCredentialsForThreadNetworkWithActivity:pairingEvent:metadata:threadControlPointCharacteristic:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
LABEL_16:
  __HMFActivityScopeLeave();

}

void __90__HMDHAPAccessory_ThreadManagement__commissionToThreadNetworkWithPairingEvent_completion___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "begin");
  v2 = *(id *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "_commissionToThreadNetworkWithActivity:pairingEvent:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  __HMFActivityScopeLeave();

}

void __92__HMDHAPAccessory_ThreadManagement___maybeCommissionToThreadNetworkWithActivity_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(id *, void *, void *);
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v31 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Writing to the thread control point succeeded", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    if (v6)
    {
      v29 = 0;
      objc_msgSend(MEMORY[0x1E0D16350], "parsedFromData:error:", v6, &v29);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v29;
      if (v11)
      {
LABEL_12:
        v20 = MEMORY[0x1E0C809B0];
        v21 = 3221225472;
        v22 = __92__HMDHAPAccessory_ThreadManagement___maybeCommissionToThreadNetworkWithActivity_completion___block_invoke_16;
        v23 = &unk_1E89BF188;
        v16 = *(void **)(a1 + 40);
        v24 = *(_QWORD *)(a1 + 32);
        v25 = v16;
        v28 = *(id *)(a1 + 56);
        v26 = v11;
        v27 = *(id *)(a1 + 48);
        v17 = v11;
        v18 = _Block_copy(&v20);
        objc_msgSend(*(id *)(a1 + 32), "home", v20, v21, v22, v23, v24);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "retrieveThreadNetworkMetadataWithCompletion:", v18);

        goto LABEL_13;
      }
    }
    else
    {
      v5 = 0;
    }
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v15;
      v32 = 2112;
      v33 = v5;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Unable to parse returned credentials: %@. Recommissioning", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v11 = 0;
    goto LABEL_12;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
LABEL_13:

}

void __92__HMDHAPAccessory_ThreadManagement___maybeCommissionToThreadNetworkWithActivity_completion___block_invoke_16(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __92__HMDHAPAccessory_ThreadManagement___maybeCommissionToThreadNetworkWithActivity_completion___block_invoke_2;
  block[3] = &unk_1E89BF160;
  v8 = a1[5];
  v9 = a1[4];
  v13 = v8;
  v14 = v9;
  v15 = v6;
  v16 = v5;
  v19 = a1[8];
  v17 = a1[6];
  v18 = a1[7];
  v10 = v5;
  v11 = v6;
  dispatch_async(v7, block);

}

void __92__HMDHAPAccessory_ThreadManagement___maybeCommissionToThreadNetworkWithActivity_completion___block_invoke_2(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  id v27;
  void *v28;
  id v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "begin");
  v29 = *(id *)(a1 + 32);
  v2 = *(id *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "uuid");

  objc_msgSend(*(id *)(a1 + 48), "code");
  if (!*(_QWORD *)(a1 + 56))
  {
    if ((objc_msgSend(*(id *)(a1 + 40), "supportsCHIP") & 1) != 0)
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v21 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        v31 = v22;
        v32 = 2112;
        v33 = v23;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Unable to retrieve metadata for thread network with error %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      v24 = *(_QWORD *)(a1 + 80);
      v25 = *(_QWORD *)(a1 + 48);
      goto LABEL_13;
    }
LABEL_12:
    v25 = 0;
    v24 = *(_QWORD *)(a1 + 80);
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v24, v25);
    goto LABEL_17;
  }
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v31 = v6;
    v32 = 2112;
    v33 = v7;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Retrieved metadata for thread network %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  v8 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 64), "threadNetworkCredentials");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v8, "_validateCurrentThreadCredentials:metadata:", v9, *(_QWORD *)(a1 + 56));

  v11 = (void *)MEMORY[0x1D17BA0A0]();
  v12 = *(id *)(a1 + 40);
  if (v10)
  {
    HMFGetOSLogHandle();
    v13 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 64), "threadNetworkCredentials");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "networkName");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 64), "threadNetworkCredentials");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "extendedPanID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v31 = v14;
      v32 = 2112;
      v33 = v16;
      v34 = 2112;
      v35 = v18;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Accessory already has been commissioned to %@/%@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    goto LABEL_12;
  }
  HMFGetOSLogHandle();
  v26 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "name");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v31 = v27;
    v32 = 2112;
    v33 = v28;
    _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Attempting to commission thread accessory to network '%@'", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v11);
  objc_msgSend(*(id *)(a1 + 40), "_writeCredentialsForThreadNetworkWithActivity:pairingEvent:metadata:threadControlPointCharacteristic:completion:", *(_QWORD *)(a1 + 32), 0, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
LABEL_17:
  __HMFActivityScopeLeave();

}

void __102__HMDHAPAccessory_ThreadManagement___writeThreadControlPointCharacteristic_value_activity_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "begin");
  v18 = *(id *)(a1 + 32);
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(v3, "firstObject");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "error");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "firstObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "value");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v10 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v20 = v11;
        v21 = 2112;
        v22 = v5;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Writing to the thread control point failed: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
    }
    else
    {
      objc_msgSend(v3, "firstObject");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "value");
      v17 = objc_claimAutoreleasedReturnValue();

      v5 = 0;
      v7 = (void *)v17;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v14 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@No response found", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    v7 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  __HMFActivityScopeLeave();
}

void __91__HMDHAPAccessory_ThreadManagement___handleUpdatedServicesForThreadManagementWithActivity___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  int v10;
  id v11;

  v11 = a2;
  objc_msgSend(v11, "type");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("00000702-0000-1000-8000-0026BB765291"));

  if (v4)
  {
    objc_msgSend(v11, "value");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v11, "value");
      v6 = objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        objc_msgSend(*(id *)(a1 + 32), "setInternalThreadCapabilities:", v6);
LABEL_13:
        v5 = (void *)v6;
        goto LABEL_14;
      }
      goto LABEL_15;
    }
LABEL_14:

    goto LABEL_15;
  }
  objc_msgSend(v11, "type");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("00000703-0000-1000-8000-0026BB765291"));

  if (!v8)
  {
    objc_msgSend(v11, "type");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("0000022B-0000-1000-8000-0026BB765291"));

    if (!v10)
      goto LABEL_15;
    objc_msgSend(v11, "value");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v11, "value");
      v6 = objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        objc_msgSend(*(id *)(a1 + 32), "setInternalThreadActive:", v6);
        goto LABEL_13;
      }
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  objc_msgSend(v11, "value");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_14;
  objc_msgSend(v11, "value");
  v6 = objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "setInternalThreadStatus:", v6);
    goto LABEL_13;
  }
LABEL_15:

}

- (HMDMediaProfile)mediaProfile
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDAccessory accessoryProfiles](self, "accessoryProfiles", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v12 != v5)
        objc_enumerationMutation(v2);
      v7 = *(id *)(*((_QWORD *)&v11 + 1) + 8 * v6);
      objc_opt_class();
      v8 = (objc_opt_isKindOfClass() & 1) != 0 ? v7 : 0;
      v9 = v8;

      if (v9)
        break;
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v7 = 0;
  }

  return (HMDMediaProfile *)v7;
}

- (BOOL)_handleUpdatedServicesForMediaProfile:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  BOOL v14;
  HMDHAPMediaProfile *v15;
  void *v16;
  HMDHAPMediaProfile *v17;
  void *v18;
  HMDHAPAccessory *v19;
  NSObject *v20;
  void *v22;
  void *v23;
  void *v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  HMDHAPMediaProfile *v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v35, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v27;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v27 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
        objc_msgSend(v11, "serviceType", (_QWORD)v26);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v12, "isEqualToString:", CFSTR("00000228-0000-1000-8000-0026BB765291")) & 1) != 0)
        {
          -[HMDHAPAccessory mediaProfile](self, "mediaProfile");
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v13)
          {
            v15 = [HMDHAPMediaProfile alloc];
            v34 = v11;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v34, 1);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = -[HMDHAPMediaProfile initWithMediaServices:](v15, "initWithMediaServices:", v16);

            v18 = (void *)MEMORY[0x1D17BA0A0]();
            v19 = self;
            HMFGetOSLogHandle();
            v20 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v31 = v22;
              v32 = 2112;
              v33 = v17;
              _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Adding new media profile: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v18);
            -[HMDAccessory addAccessoryProfile:](v19, "addAccessoryProfile:", v17);
            -[HMDAccessory msgDispatcher](v19, "msgDispatcher");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDMediaProfile configureWithMessageDispatcher:configurationTracker:](v17, "configureWithMessageDispatcher:configurationTracker:", v23, 0);

            objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "postNotificationName:object:userInfo:", CFSTR("HMDHAPMediaProfileAddedNotification"), v19, 0);

            v14 = 1;
            goto LABEL_16;
          }
        }
        else
        {

        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v26, v35, 16);
      if (v8)
        continue;
      break;
    }
  }
  v14 = 0;
LABEL_16:

  return v14;
}

- (void)_handleUpdatedServicesForDataStreamController:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDDataStreamController *v9;
  void *v10;
  HMDDataStreamController *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  const char *v21;
  void *v22;
  HMDHAPAccessory *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!+[HMDDeviceCapabilities supportsHomeKitDataStream](HMDDeviceCapabilities, "supportsHomeKitDataStream"))
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543362;
      v30 = v20;
      v21 = "%{public}@Handling updated services for data stream controller, accessory does not support HDS.";
LABEL_12:
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, v21, (uint8_t *)&v29, 0xCu);

    }
LABEL_13:

    objc_autoreleasePoolPop(v18);
    goto LABEL_19;
  }
  -[HMDAccessory msgDispatcher](self, "msgDispatcher");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543362;
      v30 = v20;
      v21 = "%{public}@Message dispatcher isn't set, cannot create DataStream controller";
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000129-0000-1000-8000-0026BB765291"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory dataStreamController](self, "dataStreamController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v6)
  {

    if (!v8)
    {
      v9 = [HMDDataStreamController alloc];
      -[HMDAccessory workQueue](self, "workQueue");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[HMDDataStreamController initWithAccessory:service:workQueue:](v9, "initWithAccessory:service:workQueue:", self, v6, v10);
      -[HMDHAPAccessory setDataStreamController:](self, "setDataStreamController:", v11);

      -[HMDHAPAccessory dataStreamController](self, "dataStreamController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "registerForNotifications");

      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory dataStreamController](v14, "dataStreamController");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138543874;
        v30 = v16;
        v31 = 2112;
        v32 = v17;
        v33 = 2112;
        v34 = v6;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Created DataStream controller %@ with service: %@", (uint8_t *)&v29, 0x20u);

      }
      objc_autoreleasePoolPop(v13);
    }
  }
  else
  {

    if (v8)
    {
      v22 = (void *)MEMORY[0x1D17BA0A0]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory dataStreamController](v23, "dataStreamController");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138543618;
        v30 = v25;
        v31 = 2112;
        v32 = v26;
        _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Invalidating DataStream controller %@", (uint8_t *)&v29, 0x16u);

      }
      objc_autoreleasePoolPop(v22);
      -[HMDHAPAccessory dataStreamController](v23, "dataStreamController");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "deRegisterFromNotifications");

      -[HMDHAPAccessory dataStreamController](v23, "dataStreamController");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "invalidate");

      -[HMDHAPAccessory setDataStreamController:](v23, "setDataStreamController:", 0);
    }
  }

LABEL_19:
}

- (void)addDataStreamBulkSendListener:(id)a3 fileType:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDAccessory workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __78__HMDHAPAccessory_DataStreamBulkSend__addDataStreamBulkSendListener_fileType___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)removeDataStreamBulkSendListener:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __72__HMDHAPAccessory_DataStreamBulkSend__removeDataStreamBulkSendListener___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (BOOL)canAcceptBulkSendListeners
{
  HMDHAPAccessory *v2;
  NSObject *v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v2 = self;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __65__HMDHAPAccessory_DataStreamBulkSend__canAcceptBulkSendListeners__block_invoke;
  v5[3] = &unk_1E89C0800;
  v5[4] = v2;
  v5[5] = &v6;
  dispatch_sync(v3, v5);

  LOBYTE(v2) = *((_BYTE *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return (char)v2;
}

- (BOOL)canAcceptBulkSendListenersSync
{
  NSObject *v3;
  void *v4;
  void *v5;
  char v6;

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHAPAccessory dataStreamController](self, "dataStreamController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[HMDHAPAccessory dataStreamController](self, "dataStreamController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "canAcceptBulkSendListeners");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (BOOL)bulkSendListenersRequireCharacteristicReadsSync
{
  NSObject *v3;
  void *v4;
  void *v5;
  char v6;

  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHAPAccessory dataStreamController](self, "dataStreamController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[HMDHAPAccessory dataStreamController](self, "dataStreamController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "setupRequiresCharacteristicReads");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)sendTargetControlWhoAmIWithIdentifier:(unsigned int)a3
{
  NSObject *v5;
  _QWORD v6[5];
  unsigned int v7;

  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __77__HMDHAPAccessory_DataStreamBulkSend__sendTargetControlWhoAmIWithIdentifier___block_invoke;
  v6[3] = &unk_1E89C0400;
  v6[4] = self;
  v7 = a3;
  dispatch_async(v5, v6);

}

- (void)openBulkSendSessionForFileType:(id)a3 reason:(id)a4 metadata:(id)a5 queue:(id)a6 callback:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[5];
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  -[HMDAccessory workQueue](self, "workQueue");
  v17 = objc_claimAutoreleasedReturnValue();
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __101__HMDHAPAccessory_DataStreamBulkSend__openBulkSendSessionForFileType_reason_metadata_queue_callback___block_invoke;
  v23[3] = &unk_1E89C0790;
  v23[4] = self;
  v24 = v12;
  v25 = v13;
  v26 = v14;
  v27 = v15;
  v28 = v16;
  v18 = v15;
  v19 = v14;
  v20 = v13;
  v21 = v12;
  v22 = v16;
  dispatch_async(v17, v23);

}

void __101__HMDHAPAccessory_DataStreamBulkSend__openBulkSendSessionForFileType_reason_metadata_queue_callback___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  id v7;
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "dataStreamController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "dataStreamController");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "openBulkSendSessionForFileType:reason:metadata:queue:callback:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));

  }
  else
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v9 = v5;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@DataStream controller isn't set; cannot start bulk send session",
        buf,
        0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

  }
}

void __77__HMDHAPAccessory_DataStreamBulkSend__sendTargetControlWhoAmIWithIdentifier___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "dataStreamController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "dataStreamController");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "sendTargetControlWhoAmIWithIdentifier:", *(unsigned int *)(a1 + 40));

  }
  else
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "name");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v12 = v6;
      v13 = 2112;
      v14 = v7;
      v15 = 2112;
      v16 = v9;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Ignoring attempt to send target-control whomai due to no active data stream (%@/%@)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v3);
  }
}

void __65__HMDHAPAccessory_DataStreamBulkSend__canAcceptBulkSendListeners__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "dataStreamController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v4 = v2;
    objc_msgSend(*(id *)(a1 + 32), "dataStreamController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v3, "canAcceptBulkSendListeners");

    v2 = v4;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }

}

void __72__HMDHAPAccessory_DataStreamBulkSend__removeDataStreamBulkSendListener___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "dataStreamController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "dataStreamController");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "removeBulkSendListener:", *(_QWORD *)(a1 + 40));

  }
  else
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "name");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v13 = v6;
      v14 = 2112;
      v15 = v7;
      v16 = 2112;
      v17 = v9;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Cancelling listener registration due to no active data stream (%@/%@)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmInternalErrorWithCode:", 1063);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "accessory:didCloseDataStreamWithError:", *(_QWORD *)(a1 + 32), v10);

  }
}

void __78__HMDHAPAccessory_DataStreamBulkSend__addDataStreamBulkSendListener_fileType___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "dataStreamController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "dataStreamController");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addBulkSendListener:fileType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  else
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "name");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v13 = v6;
      v14 = 2112;
      v15 = v7;
      v16 = 2112;
      v17 = v9;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Cancelling listener registration due to no active data stream (%@/%@)", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmInternalErrorWithCode:", 1063);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "accessory:didCloseDataStreamWithError:", *(_QWORD *)(a1 + 32), v10);

  }
}

- (void)setDidConfigureCHIPAccessoryServer
{
  id v2;

  -[HMDHAPAccessory didConfigureCHIPAccessoryServerFuture](self, "didConfigureCHIPAccessoryServerFuture");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "finishWithNoResult");

}

- (id)waitForChipAccessoryServerWithFlow:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  _QWORD v22[5];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_alloc(MEMORY[0x1E0D28570]);
  -[HMDAccessory workQueue](self, "workQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v5, "initWithQueue:", v6);

  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory didConfigureCHIPAccessoryServerFuture](v9, "didConfigureCHIPAccessoryServerFuture");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory didConfigureCHIPAccessoryServerFuture](v9, "didConfigureCHIPAccessoryServerFuture");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "isFinished");
    HMFBooleanToString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v25 = v11;
    v26 = 2112;
    v27 = v12;
    v28 = 2112;
    v29 = v13;
    v30 = 2112;
    v31 = v15;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] didConfigureCHIPAccessoryServerFuture: %@, isFinished: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHAPAccessory didConfigureCHIPAccessoryServerFuture](v9, "didConfigureCHIPAccessoryServerFuture");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "hmfFuture");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "timeout:", 60.0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __60__HMDHAPAccessory_CHIP__waitForChipAccessoryServerWithFlow___block_invoke;
  v22[3] = &unk_1E89BFC10;
  v22[4] = v9;
  v23 = v4;
  v19 = v4;
  objc_msgSend(v18, "inContext:then:", v7, v22);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

- (id)waitForDoorLockClusterObjectWithFlow:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD v15[5];
  id v16;
  _QWORD v17[4];
  id v18;

  v4 = a3;
  v5 = objc_alloc(MEMORY[0x1E0D28570]);
  -[HMDAccessory workQueue](self, "workQueue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v5, "initWithQueue:", v6);

  -[HMDHAPAccessory waitForChipAccessoryServerWithFlow:](self, "waitForChipAccessoryServerWithFlow:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x1E0C809B0];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __62__HMDHAPAccessory_CHIP__waitForDoorLockClusterObjectWithFlow___block_invoke;
  v17[3] = &unk_1E89BFC38;
  v10 = v4;
  v18 = v10;
  objc_msgSend(v8, "inContext:then:", v7, v17);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v9;
  v15[1] = 3221225472;
  v15[2] = __62__HMDHAPAccessory_CHIP__waitForDoorLockClusterObjectWithFlow___block_invoke_2;
  v15[3] = &unk_1E89BFC60;
  v15[4] = self;
  v16 = v10;
  v12 = v10;
  objc_msgSend(v11, "inContext:recover:", v7, v15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

- (void)removeAllCHIPPairingsWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v16 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Removing all CHIP pairings", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __61__HMDHAPAccessory_CHIP__removeAllCHIPPairingsWithCompletion___block_invoke;
    v13[3] = &unk_1E89BFC88;
    v13[4] = v7;
    v14 = v4;
    objc_msgSend(v5, "removeAllPairingsWithCompletionHandler:", v13);

  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v16 = v11;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP accessory server to handle remove all CHIP pairings request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v4 + 2))(v4, v12);

  }
}

- (void)handleUpdatedCHIPPropertiesOnAccessoryModel:(id)a3 actions:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  _BOOL8 v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  void *v31;
  HMDHAPAccessory *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  void *v42;
  HMDHAPAccessory *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  char v55;
  void *v56;
  HMDHAPAccessory *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  HMDHAPAccessory *v67;
  NSObject *v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  char v85;
  void *v86;
  HMDHAPAccessory *v87;
  NSObject *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  HMDHAPAccessory *v96;
  NSObject *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  char v102;
  void *v103;
  uint8_t buf[4];
  void *v105;
  __int16 v106;
  void *v107;
  __int16 v108;
  void *v109;
  const __CFString *v110;
  _QWORD v111[2];

  v111[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHAPAccessory chipStorage](self, "chipStorage");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v8, "copy");

  -[HMDHAPAccessory chipStorage](self, "chipStorage");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "updateUsingAccessoryModel:", v6);

  if (v11)
  {
    objc_msgSend(v9, "pairings");
    v12 = objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v13 = (void *)v12;
      objc_msgSend(v9, "pairings");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory chipStorage](self, "chipStorage");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "pairings");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v14, "isEqualToSet:", v16);

      if ((v17 & 1) == 0)
      {
        -[HMDHAPAccessory chipStorage](self, "chipStorage");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "pairings");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "pairings");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory _handleUpdatedPairings:previousPairings:](self, "_handleUpdatedPairings:previousPairings:", v19, v20);

      }
    }
    v21 = (unint64_t)objc_msgSend(v7, "source") < 2;
    v110 = CFSTR("HMDAccessoryCHIPStorageIsLocalChangeNotificationKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v111[0] = v22;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v111, &v110, 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    logAndPostNotification(CFSTR("HMDAccessoryCHIPStorageUpdatedNotification"), self, v23);
    objc_msgSend(v7, "markChanged");

  }
  objc_msgSend(v6, "chipVendorID");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v24)
    goto LABEL_18;
  -[HMDHAPAccessory matterVendorID](self, "matterVendorID");
  v25 = objc_claimAutoreleasedReturnValue();
  if (v25)
  {
    v26 = (void *)v25;
    -[HMDHAPAccessory matterVendorID](self, "matterVendorID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v27, "isEqualToNumber:", &unk_1E8B35148) & 1) != 0)
    {
      -[HMDHAPAccessory matterVendorID](self, "matterVendorID");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "chipVendorID");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = HMFEqualObjects();

      if ((v30 & 1) == 0)
        goto LABEL_10;
    }
    else
    {

    }
    -[HMDHAPAccessory matterVendorID](self, "matterVendorID");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "chipVendorID");
    v41 = (void *)objc_claimAutoreleasedReturnValue();

    if (v40 != v41)
    {
      v42 = (void *)MEMORY[0x1D17BA0A0]();
      v43 = self;
      HMFGetOSLogHandle();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "chipVendorID");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory matterVendorID](v43, "matterVendorID");
        v47 = v9;
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v105 = v45;
        v106 = 2112;
        v107 = v46;
        v108 = 2112;
        v109 = v48;
        _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_ERROR, "%{public}@Matter accessory vendorID cannot be set to %@, is already set to %@", buf, 0x20u);

        v9 = v47;
      }

      objc_autoreleasePoolPop(v42);
    }
LABEL_18:
    v39 = 0;
    goto LABEL_19;
  }
LABEL_10:
  v31 = (void *)MEMORY[0x1D17BA0A0]();
  v32 = self;
  HMFGetOSLogHandle();
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory matterVendorID](v32, "matterVendorID");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "chipVendorID");
    v36 = v9;
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v105 = v34;
    v106 = 2112;
    v107 = v35;
    v108 = 2112;
    v109 = v37;
    _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Updating Matter accessory vendorID from %@ to %@", buf, 0x20u);

    v9 = v36;
  }

  objc_autoreleasePoolPop(v31);
  objc_msgSend(v6, "chipVendorID");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory setMatterVendorID:](v32, "setMatterVendorID:", v38);

  objc_msgSend(v7, "markChanged");
  v39 = 1;
LABEL_19:
  objc_msgSend(v6, "chipProductID");
  v49 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v49)
    goto LABEL_32;
  -[HMDHAPAccessory matterProductID](self, "matterProductID");
  v50 = objc_claimAutoreleasedReturnValue();
  if (v50)
  {
    v51 = (void *)v50;
    -[HMDHAPAccessory matterProductID](self, "matterProductID");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v52, "isEqualToNumber:", &unk_1E8B35148) & 1) != 0)
    {
      -[HMDHAPAccessory matterProductID](self, "matterProductID");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "chipProductID");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = HMFEqualObjects();

      if ((v55 & 1) == 0)
        goto LABEL_23;
    }
    else
    {

    }
    -[HMDHAPAccessory matterProductID](self, "matterProductID");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "chipProductID");
    v65 = (void *)objc_claimAutoreleasedReturnValue();

    if (v64 != v65)
    {
      v66 = (void *)MEMORY[0x1D17BA0A0]();
      v67 = self;
      HMFGetOSLogHandle();
      v68 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "chipProductID");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory matterProductID](v67, "matterProductID");
        v103 = v66;
        v71 = v7;
        v72 = v9;
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v105 = v69;
        v106 = 2112;
        v107 = v70;
        v108 = 2112;
        v109 = v73;
        _os_log_impl(&dword_1CD062000, v68, OS_LOG_TYPE_ERROR, "%{public}@Matter accessory productID cannot be set to %@, is already set to %@", buf, 0x20u);

        v9 = v72;
        v7 = v71;
        v66 = v103;

      }
      objc_autoreleasePoolPop(v66);
      if ((v39 & 1) == 0)
        goto LABEL_38;
      goto LABEL_33;
    }
LABEL_32:
    if (!v39)
      goto LABEL_38;
    goto LABEL_33;
  }
LABEL_23:
  v56 = (void *)MEMORY[0x1D17BA0A0]();
  v57 = self;
  HMFGetOSLogHandle();
  v58 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory matterProductID](v57, "matterProductID");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "chipProductID");
    v61 = v9;
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v105 = v59;
    v106 = 2112;
    v107 = v60;
    v108 = 2112;
    v109 = v62;
    _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_INFO, "%{public}@Updating Matter accessory productID from %@ to %@", buf, 0x20u);

    v9 = v61;
  }

  objc_autoreleasePoolPop(v56);
  objc_msgSend(v6, "chipProductID");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory setMatterProductID:](v57, "setMatterProductID:", v63);

  objc_msgSend(v7, "markChanged");
LABEL_33:
  -[HMDHAPAccessory matterVendorID](self, "matterVendorID");
  v74 = objc_claimAutoreleasedReturnValue();
  if (!v74)
    goto LABEL_38;
  v75 = (void *)v74;
  -[HMDHAPAccessory matterProductID](self, "matterProductID");
  v76 = objc_claimAutoreleasedReturnValue();
  if (!v76)
    goto LABEL_37;
  v77 = (void *)v76;
  -[HMDHAPAccessory matterVendorID](self, "matterVendorID");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v78, "isEqualToNumber:", &unk_1E8B35148))
  {

LABEL_37:
    goto LABEL_38;
  }
  -[HMDHAPAccessory matterProductID](self, "matterProductID");
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  v102 = objc_msgSend(v101, "isEqualToNumber:", &unk_1E8B35148);

  if ((v102 & 1) == 0)
    logAndPostNotification(CFSTR("HMDAccessoryVendorIDProductIDUpdatedNotification"), self, 0);
LABEL_38:
  objc_msgSend(v6, "supportedLinkLayerTypes");
  v79 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v79)
    goto LABEL_50;
  -[HMDHAPAccessory supportedLinkLayerTypes](self, "supportedLinkLayerTypes");
  v80 = objc_claimAutoreleasedReturnValue();
  if (!v80)
    goto LABEL_42;
  v81 = (void *)v80;
  -[HMDHAPAccessory supportedLinkLayerTypes](self, "supportedLinkLayerTypes");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v82, "isEqualToNumber:", &unk_1E8B35148) & 1) != 0)
  {
    -[HMDHAPAccessory supportedLinkLayerTypes](self, "supportedLinkLayerTypes");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "supportedLinkLayerTypes");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = HMFEqualObjects();

    if ((v85 & 1) == 0)
    {
LABEL_42:
      v86 = (void *)MEMORY[0x1D17BA0A0]();
      v87 = self;
      HMFGetOSLogHandle();
      v88 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory supportedLinkLayerTypes](v87, "supportedLinkLayerTypes");
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "supportedLinkLayerTypes");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v105 = v89;
        v106 = 2112;
        v107 = v90;
        v108 = 2112;
        v109 = v91;
        _os_log_impl(&dword_1CD062000, v88, OS_LOG_TYPE_INFO, "%{public}@Updating matter accessory supported link layer types from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v86);
      objc_msgSend(v6, "supportedLinkLayerTypes");
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory setSupportedLinkLayerTypes:](v87, "setSupportedLinkLayerTypes:", v92);

      objc_msgSend(v7, "markChanged");
      goto LABEL_50;
    }
  }
  else
  {

  }
  -[HMDHAPAccessory supportedLinkLayerTypes](self, "supportedLinkLayerTypes");
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "supportedLinkLayerTypes");
  v94 = (void *)objc_claimAutoreleasedReturnValue();

  if (v93 != v94)
  {
    v95 = (void *)MEMORY[0x1D17BA0A0]();
    v96 = self;
    HMFGetOSLogHandle();
    v97 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "supportedLinkLayerTypes");
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory supportedLinkLayerTypes](v96, "supportedLinkLayerTypes");
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v105 = v98;
      v106 = 2112;
      v107 = v99;
      v108 = 2112;
      v109 = v100;
      _os_log_impl(&dword_1CD062000, v97, OS_LOG_TYPE_ERROR, "%{public}@Matter accessory supported link layer types cannot be set to %@, is already set to %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v95);
  }
LABEL_50:

}

- (NSNumber)chipNodeId
{
  void *v2;
  void *v3;

  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chipNodeId");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSNumber *)v3;
}

- (void)handleCHIPSendRemoteRequestMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  id v12;

  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHAPAccessory handleCHIPSendRemoteRequestMessage:chipAccessoryServer:](self, "handleCHIPSendRemoteRequestMessage:chipAccessoryServer:", v4, v5);
  }
  else
  {
    -[HMDAccessory home](self, "home");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "homeManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "accessoryBrowser");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "chipAccessoryServerBrowser");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory matterNodeID](self, "matterNodeID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __60__HMDHAPAccessory_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke;
    v11[3] = &unk_1E89BFCB0;
    v11[4] = self;
    v12 = v4;
    objc_msgSend(v9, "discoverAccessoryServerWithNodeID:completion:", v10, v11);

  }
}

- (void)setCHIPReportHandler:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "setCHIPReportHandler:", v4);
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP accessory server to set report handler", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
  }

}

- (BOOL)isHMMTRAccessoryServer:(id)a3
{
  id v3;
  BOOL v4;

  v3 = a3;
  objc_opt_class();
  v4 = objc_opt_isKindOfClass() & (v3 != 0);

  return v4;
}

- (BOOL)hmmtrHasIPServer:(id)a3
{
  id v3;
  char isKindOfClass;
  BOOL v5;

  v3 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = 0;
  if (v3 && (isKindOfClass & 1) != 0)
    v5 = (unint64_t)(objc_msgSend(v3, "linkLayerType") - 1) < 2;

  return v5;
}

- (BOOL)hmmtrHasBLEServer:(id)a3
{
  id v3;
  char isKindOfClass;
  BOOL v5;

  v3 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = 0;
  if (v3 && (isKindOfClass & 1) != 0)
    v5 = objc_msgSend(v3, "linkLayerType") == 3;

  return v5;
}

- (BOOL)hmmtrHasThreadServer:(id)a3
{
  id v3;
  char isKindOfClass;
  BOOL v5;

  v3 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = 0;
  if (v3 && (isKindOfClass & 1) != 0)
    v5 = objc_msgSend(v3, "linkLayerType") == 4;

  return v5;
}

- (void)getLinkQualityForAccessory:(id)a3 forMessage:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  void *v24;
  HMDHAPAccessory *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  _QWORD v44[5];
  _QWORD v45[5];
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  __CFString *v55;
  __int16 v56;
  __CFString *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v8, "isReachable") & 1) != 0)
  {
    v42 = v7;
    objc_msgSend(v8, "getConnectNetworkIDForAccessory:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D332E8]);
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "getOperationalNetworkAddressForAccessory:", v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0D332E0]);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v8, "linkLayerType");
    v14 = v13;
    v40 = v11;
    v41 = v9;
    if (v13 == 4)
    {
      objc_msgSend(v8, "getThreadNetworkLinkQualityForAccessory:", v6);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "objectForKeyedSubscript:", *MEMORY[0x1E0D33328]);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = v18;
      objc_msgSend(v18, "objectForKeyedSubscript:", *MEMORY[0x1E0D33378]);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v19;
      if (v19)
      {
        v21 = v19;

        v10 = v21;
      }
      v37 = -[HMDHAPAccessory _threadRSSIToLinkQuality:](self, "_threadRSSIToLinkQuality:", v43);

      v38 = 0;
      v16 = 0;
      v14 = 4;
    }
    else if (v13 == 1)
    {
      objc_msgSend(v8, "getWiFiNetworkLinkQualityForAccessory:", v6);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0D33340]);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v38, "BOOLValue");
      v39 = v15;
      objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0D33370]);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = -[HMDHAPAccessory _wifiRSSIToLinkQuality:](self, "_wifiRSSIToLinkQuality:");
    }
    else
    {
      v37 = 0;
      v38 = 0;
      v43 = 0;
      v16 = 0;
      v39 = 0;
    }
    if (v10)
      v22 = v10;
    else
      v22 = &stru_1E89C3E38;
    if (v12)
      v23 = (__CFString *)v12;
    else
      v23 = &stru_1E89C3E38;
    v24 = (void *)MEMORY[0x1D17BA0A0]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      HAPLinkLayerTypeDescription();
      v35 = v6;
      v36 = v14;
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v29 = v16;
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544642;
      v47 = v27;
      v48 = 2112;
      v49 = v28;
      v50 = 2112;
      v51 = v30;
      v52 = 2112;
      v53 = v43;
      v54 = 2112;
      v55 = v22;
      v56 = 2112;
      v57 = v23;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@[LinkQuality] Read linkLayerType: %@, supported: %@ RSSI: %@, networkID: %@, hardwareAddress: %@", buf, 0x3Eu);

      v16 = v29;
      v6 = v35;
      v14 = v36;

    }
    objc_autoreleasePoolPop(v24);
    v44[0] = CFSTR("kAccessoryLinkQualitySupportedKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v16);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v45[0] = v31;
    v44[1] = CFSTR("kAccessoryLinkLayerTypeKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v14);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v45[1] = v32;
    v44[2] = CFSTR("kAccessoryLinkQualityKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v37);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v45[2] = v33;
    v45[3] = v22;
    v44[3] = CFSTR("kAccessoryNetworkNameKey");
    v44[4] = CFSTR("kAccessoryMacAddressKey");
    v45[4] = v23;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v45, v44, 5);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v42;
    objc_msgSend(v42, "respondWithPayload:", v34);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 4, CFSTR("Accessory is not reachable"), 0, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithError:", v17);

  }
}

- (unint64_t)_wifiRSSIToLinkQuality:(id)a3
{
  id v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = a3;
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "intValue");
    v6 = 3;
    v7 = 1;
    if (v5 > 0xFFFFFFBA)
      v7 = 2;
    if (v5 <= 0xFFFFFFBF)
      v6 = v7;
    if (v5 <= -55)
      v8 = v6;
    else
      v8 = 4;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (unint64_t)_threadRSSIToLinkQuality:(id)a3
{
  id v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = a3;
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "intValue");
    v6 = 3;
    v7 = 1;
    if (v5 > 0xFFFFFFAB)
      v7 = 2;
    if (v5 <= 0xFFFFFFBA)
      v6 = v7;
    if (v5 <= -55)
      v8 = v6;
    else
      v8 = 4;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (NSDictionary)accessoryDiagnosticCounters
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory identifier](self, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "collectDiagnosticsForAccessory:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSDictionary *)v6;
}

- (NSArray)accessoryDiagnosticEvents
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory identifier](self, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "readPastDiagnosticEventsFromAccessory:fromEventNumber:", v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v6;
}

- (void)resetAccessoryDiagnosticCounters
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    -[HMDAccessory identifier](self, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "resetThreadNetworkDiagnosticsCountForAccessory:", v4);

    -[HMDAccessory identifier](self, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:](self, "matchingHAPAccessoryWithServerIdentifier:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "resetWiFiNetworkDiagnosticsCountForAccessory:", v6);

  }
}

- (void)handleFetchCHIPPairingsMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  _QWORD v13[5];
  id v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory primaryResidentMessageRouter](self, "primaryResidentMessageRouter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)objc_msgSend(v4, "copy");
    v7 = MEMORY[0x1E0C809B0];
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __56__HMDHAPAccessory_CHIP__handleFetchCHIPPairingsMessage___block_invoke;
    v13[3] = &unk_1E89BFD00;
    v13[4] = self;
    v14 = v4;
    objc_msgSend(v6, "setResponseHandler:", v13);
    v12[0] = v7;
    v12[1] = 3221225472;
    v12[2] = __56__HMDHAPAccessory_CHIP__handleFetchCHIPPairingsMessage___block_invoke_2;
    v12[3] = &unk_1E89BFD28;
    v12[4] = self;
    objc_msgSend(v5, "routeMessage:localHandler:", v6, v12);

  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v16 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle fetch CHIP pairings message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v6);
  }

}

- (void)handleRemoveCHIPPairingsMessage:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[5];
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory primaryResidentMessageRouter](self, "primaryResidentMessageRouter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = *MEMORY[0x1E0CB79D8];
    v24[0] = objc_opt_class();
    v24[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "unarchivedObjectForKey:ofClasses:", v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      -[HMDHAPAccessory _removeSystemCommissionerPairingFromAccessoryPairings:completion:](self, "_removeSystemCommissionerPairingFromAccessoryPairings:completion:", v8, 0);
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __57__HMDHAPAccessory_CHIP__handleRemoveCHIPPairingsMessage___block_invoke;
      v19[3] = &unk_1E89BFD28;
      v19[4] = self;
      objc_msgSend(v5, "routeMessage:localHandler:", v4, v19);
    }
    else
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "messagePayload");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v21 = v16;
        v22 = 2112;
        v23 = v17;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Could not find pairings in CHIP pairings message payload: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v13);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v18);

      v8 = 0;
    }
  }
  else
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v12;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle remove CHIP pairings message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);
  }

}

- (void)handleActivateCHIPPairingModeMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory primaryResidentMessageRouter](self, "primaryResidentMessageRouter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __62__HMDHAPAccessory_CHIP__handleActivateCHIPPairingModeMessage___block_invoke;
    v12[3] = &unk_1E89BFD28;
    v12[4] = self;
    objc_msgSend(v5, "routeMessage:localHandler:", v4, v12);
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v14 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle activate CHIP pairing mode message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);

  }
}

- (void)handleActivateCHIPPairingModeAndCreateSetupPayloadStringMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory primaryResidentMessageRouter](self, "primaryResidentMessageRouter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __89__HMDHAPAccessory_CHIP__handleActivateCHIPPairingModeAndCreateSetupPayloadStringMessage___block_invoke;
    v12[3] = &unk_1E89BFD28;
    v12[4] = self;
    objc_msgSend(v5, "routeMessage:localHandler:", v4, v12);
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v14 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Could not find primary resident message router to handle activate CHIP pairing mode and create setup payload string message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);

  }
}

- (void)handleRemoveCorrespondingSystemCommissionerMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v4 = a3;
  -[HMDHAPAccessory chipStorage](self, "chipStorage");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pairings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  v9 = v8;

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __76__HMDHAPAccessory_CHIP__handleRemoveCorrespondingSystemCommissionerMessage___block_invoke;
  v11[3] = &unk_1E89C2350;
  v12 = v4;
  v10 = v4;
  -[HMDHAPAccessory _removeSystemCommissionerPairingFromAccessoryPairings:completion:](self, "_removeSystemCommissionerPairingFromAccessoryPairings:completion:", v9, v11);

}

- (void)handleGetAllUsersMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  id v18;

  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D28580], "untrackedPlaceholderFlow");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "createDoorLockClusterObjectWithFlow:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "naFuture");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "flatMap:", &__block_literal_global_176118);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_3_56;
  v17[3] = &unk_1E89BFE20;
  v11 = v4;
  v18 = v11;
  objc_msgSend(v9, "addSuccessBlock:", v17);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v10;
  v15[1] = 3221225472;
  v15[2] = __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_4;
  v15[3] = &unk_1E89C2350;
  v16 = v11;
  v13 = v11;
  v14 = (id)objc_msgSend(v12, "addFailureBlock:", v15);

}

- (void)handleClearUserMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;

  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D28580], "untrackedPlaceholderFlow");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "createDoorLockClusterObjectWithFlow:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "naFuture");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __48__HMDHAPAccessory_CHIP__handleClearUserMessage___block_invoke;
  v20[3] = &unk_1E89BFE48;
  v10 = v4;
  v21 = v10;
  objc_msgSend(v8, "flatMap:", v20);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v9;
  v18[1] = 3221225472;
  v18[2] = __48__HMDHAPAccessory_CHIP__handleClearUserMessage___block_invoke_2;
  v18[3] = &unk_1E89BFE70;
  v12 = v10;
  v19 = v12;
  objc_msgSend(v11, "addSuccessBlock:", v18);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = v9;
  v16[1] = 3221225472;
  v16[2] = __48__HMDHAPAccessory_CHIP__handleClearUserMessage___block_invoke_3;
  v16[3] = &unk_1E89C2350;
  v17 = v12;
  v14 = v12;
  v15 = (id)objc_msgSend(v13, "addFailureBlock:", v16);

}

- (void)handleClearCredentialMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;

  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D28580], "untrackedPlaceholderFlow");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "createDoorLockClusterObjectWithFlow:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "naFuture");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __54__HMDHAPAccessory_CHIP__handleClearCredentialMessage___block_invoke;
  v20[3] = &unk_1E89BFE48;
  v10 = v4;
  v21 = v10;
  objc_msgSend(v8, "flatMap:", v20);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v9;
  v18[1] = 3221225472;
  v18[2] = __54__HMDHAPAccessory_CHIP__handleClearCredentialMessage___block_invoke_2;
  v18[3] = &unk_1E89BFE70;
  v12 = v10;
  v19 = v12;
  objc_msgSend(v11, "addSuccessBlock:", v18);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = v9;
  v16[1] = 3221225472;
  v16[2] = __54__HMDHAPAccessory_CHIP__handleClearCredentialMessage___block_invoke_3;
  v16[3] = &unk_1E89C2350;
  v17 = v12;
  v14 = v12;
  v15 = (id)objc_msgSend(v13, "addFailureBlock:", v16);

}

- (void)handleSetStartUpColorTemperature:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  HMDHAPAccessory *v9;
  HMDHAPAccessory *v10;
  HMDHAPAccessory *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[5];
  id v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v24 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@handleSetStartUpColorTemperature", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  if (v11
    && (-[HMDHAPAccessory chipAccessoryServer](v9, "chipAccessoryServer"),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v12,
        v12))
  {
    objc_msgSend(v4, "messagePayload");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("kStartUpColorTemperatureKey"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      -[HMDHAPAccessory chipAccessoryServer](v9, "chipAccessoryServer");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "identifier");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory hapInstanceId](v9, "hapInstanceId");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:instanceID:](v9, "matchingHAPAccessoryWithServerIdentifier:instanceID:", v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDHAPAccessory chipAccessoryServer](v9, "chipAccessoryServer");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __58__HMDHAPAccessory_CHIP__handleSetStartUpColorTemperature___block_invoke;
      v20[3] = &unk_1E89BFE98;
      v20[4] = v9;
      v21 = v4;
      v22 = v14;
      objc_msgSend(v19, "fetchColorControlClusterForHapAccessory:completionHandler:", v18, v20);

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v18);
    }

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);
  }

}

- (void)handleGetStartUpColorTemperature:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  HMDHAPAccessory *v9;
  HMDHAPAccessory *v10;
  HMDHAPAccessory *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v21 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@handleGetStartUpColorTemperature", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  if (v11
    && (-[HMDHAPAccessory chipAccessoryServer](v9, "chipAccessoryServer"),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v12,
        v12))
  {
    -[HMDHAPAccessory chipAccessoryServer](v9, "chipAccessoryServer");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "identifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory hapInstanceId](v9, "hapInstanceId");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:instanceID:](v9, "matchingHAPAccessoryWithServerIdentifier:instanceID:", v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHAPAccessory chipAccessoryServer](v9, "chipAccessoryServer");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __58__HMDHAPAccessory_CHIP__handleGetStartUpColorTemperature___block_invoke;
    v18[3] = &unk_1E89BFEE8;
    v18[4] = v9;
    v19 = v4;
    objc_msgSend(v17, "fetchColorControlClusterForHapAccessory:completionHandler:", v16, v18);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v16);
  }

}

- (void)handleGetAccessoryDiagnosticCountersMessage:(id)a3
{
  id v4;
  HMDHAPAccessory *v5;
  HMDHAPAccessory *v6;
  HMDHAPAccessory *v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = self;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = v5;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543362;
    v18 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Handling GetAccessoryDiagnosticCountersMessage", (uint8_t *)&v17, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  if (v7 && -[HMDHAPAccessory communicationProtocol](v7, "communicationProtocol") == 2)
  {
    -[HMDHAPAccessory accessoryDiagnosticCounters](v7, "accessoryDiagnosticCounters");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = v9;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v16;
      v19 = 2112;
      v20 = v12;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Read accessory diagnostic: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(v4, "respondWithPayload:", v12);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 48, CFSTR("This Accessory type does not support diagnostic counters"), 0, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v12);
  }

}

- (void)handleGetAccessoryDiagnosticEventsMessage:(id)a3
{
  id v4;
  HMDHAPAccessory *v5;
  HMDHAPAccessory *v6;
  HMDHAPAccessory *v7;
  void *v8;
  HMDHAPAccessory *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = self;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = v5;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v21 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Handling GetAccessoryDiagnosticEvenetsMessage", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  if (v7 && -[HMDHAPAccessory communicationProtocol](v7, "communicationProtocol") == 2)
  {
    -[HMDHAPAccessory accessoryDiagnosticEvents](v7, "accessoryDiagnosticEvents");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = v9;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v16;
      v22 = 2112;
      v23 = v12;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Read accessory diagnostic events: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v18 = CFSTR("Events");
    v19 = v12;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithPayload:", v17);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 48, CFSTR("This Accessory type does not support diagnostic events"), 0, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v12);
  }

}

- (void)_removeSystemCommissionerPairingFromAccessoryPairings:(id)a3 completion:(id)a4
{
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  id v18;
  id v19;
  _QWORD v20[5];

  v6 = a4;
  v7 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __90__HMDHAPAccessory_CHIP___removeSystemCommissionerPairingFromAccessoryPairings_completion___block_invoke;
  v20[3] = &unk_1E89BFF10;
  v20[4] = self;
  objc_msgSend(a3, "na_firstObjectPassingTest:", v20);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDAccessory home](self, "home");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "homeManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "accessoryBrowserInternal");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "chipAccessoryServerBrowser");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "systemCommissionerPairingManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v16[0] = v7;
    v16[1] = 3221225472;
    v16[2] = __90__HMDHAPAccessory_CHIP___removeSystemCommissionerPairingFromAccessoryPairings_completion___block_invoke_2;
    v16[3] = &unk_1E89BFF60;
    v16[4] = self;
    v19 = v6;
    v17 = v8;
    v18 = v13;
    v14 = v13;
    objc_msgSend(v14, "fetchSystemCommissionerPairingsWithCompletionHandler:", v16);

  }
  else
  {
    v15 = _Block_copy(v6);
    v14 = v15;
    if (v15)
      (*((void (**)(void *, _QWORD))v15 + 2))(v15, 0);
  }

}

- (void)_handleFetchCHIPPairingsMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  HMDHAPAccessory *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Fetching locally cached CHIP pairings", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHAPAccessory bridge](v7, "bridge");
    v11 = (HMDHAPAccessory *)objc_claimAutoreleasedReturnValue();
    if (!v11)
      v11 = v7;
    -[HMDHAPAccessory chipStorage](v11, "chipStorage", *MEMORY[0x1E0CB79D8]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "pairings");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (!v13)
    {
      objc_msgSend(MEMORY[0x1E0C99E60], "set");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
    encodeRootObjectForIncomingXPCMessage(v14, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v15;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithPayload:", v16);

    if (!v13)
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v17;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP accessory server to handle fetch CHIP pairings message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v11 = (HMDHAPAccessory *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }

}

- (void)_handleRemoveCHIPPairingsMessage:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  HMDHAPAccessory *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  HMDHAPAccessory *v22;
  NSObject *v23;
  void *v24;
  id *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  HMDHAPAccessory *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id obj;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *group;
  HMDHAPAccessory *v41;
  void *v42;
  void *v43;
  uint64_t i;
  void *v45;
  _QWORD block[5];
  id v47;
  _BYTE *v48;
  _QWORD v49[6];
  _QWORD v50[2];
  _QWORD v51[6];
  _QWORD v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint8_t v57[4];
  void *v58;
  __int16 v59;
  void *v60;
  uint8_t v61[128];
  _BYTE buf[24];
  char v63;
  _QWORD v64[5];

  v64[2] = *MEMORY[0x1E0C80C00];
  v35 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37)
  {
    v64[0] = objc_opt_class();
    v64[1] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v64, 2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "unarchivedObjectForKey:ofClasses:", *MEMORY[0x1E0CB79D8], v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v41 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v5)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v5;
        _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing CHIP pairings: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v6);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v63 = 0;
      group = dispatch_group_create();
      v53 = 0u;
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      obj = v5;
      v10 = v41;
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v61, 16);
      if (v39)
      {
        v38 = *(_QWORD *)v54;
        do
        {
          for (i = 0; i != v39; ++i)
          {
            if (*(_QWORD *)v54 != v38)
              objc_enumerationMutation(obj);
            v45 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
            dispatch_group_enter(group);
            -[HMDAccessory home](v10, "home");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v42, "homeManager");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v45, "home");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "ecosystem");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "vendor");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v13, "isAppleVendor") & 1) == 0)
            {

LABEL_16:
              objc_msgSend(v45, "chipPluginPairing");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              v49[0] = MEMORY[0x1E0C809B0];
              v49[1] = 3221225472;
              v49[2] = __58__HMDHAPAccessory_CHIP___handleRemoveCHIPPairingsMessage___block_invoke_75;
              v49[3] = &unk_1E89BFF88;
              v49[4] = v41;
              v49[5] = v45;
              v50[1] = buf;
              v50[0] = group;
              objc_msgSend(v37, "removePairing:completionHandler:", v26, v49);

              v25 = (id *)v50;
              goto LABEL_17;
            }
            objc_msgSend(v45, "home");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "ecosystem");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "rootPublicKey");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "accessoryBrowser");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "chipAccessoryServerBrowser");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "appleHomeFabricRootPublicKey");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = objc_msgSend(v16, "isEqual:", v19);

            if (!v20)
              goto LABEL_16;
            v21 = (void *)MEMORY[0x1D17BA0A0]();
            v22 = v41;
            HMFGetOSLogHandle();
            v23 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v57 = 138543618;
              v58 = v24;
              v59 = 2112;
              v60 = v45;
              _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Pairing is from apple ecosystem, removing accessory from HomeKit: %@", v57, 0x16u);

            }
            objc_autoreleasePoolPop(v21);
            v51[0] = MEMORY[0x1E0C809B0];
            v51[1] = 3221225472;
            v51[2] = __58__HMDHAPAccessory_CHIP___handleRemoveCHIPPairingsMessage___block_invoke;
            v51[3] = &unk_1E89BFF88;
            v51[4] = v22;
            v51[5] = v45;
            v52[1] = buf;
            v52[0] = group;
            objc_msgSend(v42, "handleRemoveAccessory:completion:", v22, v51);
            v25 = (id *)v52;
LABEL_17:

            v10 = v41;
          }
          v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v61, 16);
        }
        while (v39);
      }

      -[HMDAccessory workQueue](v41, "workQueue");
      v27 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __58__HMDHAPAccessory_CHIP___handleRemoveCHIPPairingsMessage___block_invoke_76;
      block[3] = &unk_1E89C25A0;
      v48 = buf;
      block[4] = v41;
      v47 = v35;
      dispatch_group_notify(group, v27, block);

      _Block_object_dispose(buf, 8);
    }
    else
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "messagePayload");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v32;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v33;
        _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP pairings in remote CHIP pairings message payload: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v6);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "respondWithError:", v34);

      obj = 0;
    }
  }
  else
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = self;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v31;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP accessory server to handle remove CHIP pairings message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    obj = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "respondWithError:", obj);
  }

}

- (void)_handleActivateCHIPPairingModeMessage:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = objc_msgSend((id)objc_opt_class(), "chipPairingModeActiveDuration");
    v8 = v7;
    v9 = (void *)MEMORY[0x1D17BA0A0](v6);
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v12;
      v22 = 2048;
      v23 = v8;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Opening CHIP pairing window for duration: %fs", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __63__HMDHAPAccessory_CHIP___handleActivateCHIPPairingModeMessage___block_invoke;
    v18[3] = &unk_1E89C21C0;
    v18[4] = v10;
    v19 = v4;
    objc_msgSend(v5, "openPairingWindowForDuration:completionHandler:", v18, v8);

  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP accessory server to handle activate CHIP pairing mode message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v17);

  }
}

- (void)_handleActivateCHIPPairingModeAndCreateSetupPayloadStringMessage:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  HMDHAPAccessory *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = objc_msgSend((id)objc_opt_class(), "chipPairingModeActiveDuration");
    v8 = v7;
    v9 = (void *)MEMORY[0x1D17BA0A0](v6);
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v21 = v12;
      v22 = 2048;
      v23 = v8;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Opening CHIP pairing window with PIN for duration: %fs", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __90__HMDHAPAccessory_CHIP___handleActivateCHIPPairingModeAndCreateSetupPayloadStringMessage___block_invoke;
    v18[3] = &unk_1E89BFFB0;
    v18[4] = v10;
    v19 = v4;
    objc_msgSend(v5, "openPairingWindowWithPINForDuration:completionHandler:", v18, v8);

  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP accessory server to handle activate CHIP pairing mode and create setup payload string message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v17);

  }
}

- (void)_handleUpdatedPairings:(id)a3 previousPairings:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  void *v24;
  HMDHAPAccessory *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **p_cache;
  uint64_t v44;
  void *v45;
  void *v46;
  HMDHAPAccessory *v47;
  NSObject *v48;
  uint64_t v49;
  HMDHAPAccessory *v50;
  void *v51;
  void **v52;
  void *v53;
  void *v54;
  void *v55;
  HMDHAPAccessory *v56;
  NSObject *v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  id obj;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint8_t v82[128];
  uint8_t buf[4];
  void *v84;
  __int16 v85;
  void *v86;
  __int16 v87;
  void *v88;
  _BYTE v89[128];
  _BYTE v90[128];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v78, v90, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v79;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v79 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * i);
        objc_msgSend(v14, "UUID");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setObject:forKeyedSubscript:", v14, v15);

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v78, v90, 16);
    }
    while (v11);
  }

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v17 = v6;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v74, v89, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v75;
    do
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v75 != v20)
          objc_enumerationMutation(v17);
        v22 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * j);
        objc_msgSend(v22, "UUID");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "setObject:forKeyedSubscript:", v22, v23);

      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v74, v89, 16);
    }
    while (v19);
  }

  if ((objc_msgSend(v8, "isEqualToDictionary:", v16) & 1) == 0)
  {
    v24 = (void *)MEMORY[0x1D17BA0A0]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v84 = v27;
      v85 = 2112;
      v86 = v8;
      v87 = 2112;
      v88 = v16;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Pairings changed from %@ to %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v24);
    v28 = (void *)objc_msgSend(v16, "mutableCopy");
    objc_msgSend(v8, "allKeys");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "removeObjectsForKeys:", v29);

    v30 = (void *)MEMORY[0x1E0C99E60];
    v67 = v28;
    objc_msgSend(v28, "allValues");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "setWithArray:", v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    v66 = v32;
    objc_msgSend(v32, "na_filter:", &__block_literal_global_80_176072);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)objc_msgSend(v8, "mutableCopy");
    objc_msgSend(v16, "allKeys");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "removeObjectsForKeys:", v35);

    v36 = (void *)MEMORY[0x1E0C99E60];
    v64 = v34;
    objc_msgSend(v34, "allValues");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "setWithArray:", v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v38, "na_filter:", &__block_literal_global_81_176073);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = v33;
    v63 = v39;
    if (objc_msgSend(v33, "count") || objc_msgSend(v39, "count"))
    {
      v59 = v38;
      v60 = v17;
      v61 = v9;
      v62 = v8;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      obj = v33;
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v82, 16);
      if (v40)
      {
        v41 = v40;
        v42 = *(_QWORD *)v71;
        p_cache = HMDCameraVideoTierParameters.cache;
        do
        {
          v44 = 0;
          v68 = v41;
          do
          {
            if (*(_QWORD *)v71 != v42)
              objc_enumerationMutation(obj);
            v45 = (void *)objc_msgSend(objc_alloc((Class)(p_cache + 503)), "initWithAddedPairing:accessory:", *(_QWORD *)(*((_QWORD *)&v70 + 1) + 8 * v44), v25);
            v46 = (void *)MEMORY[0x1D17BA0A0]();
            v47 = v25;
            HMFGetOSLogHandle();
            v48 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v49 = v42;
              v50 = v25;
              v51 = v16;
              v52 = p_cache;
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v84 = v53;
              v85 = 2112;
              v86 = v45;
              _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_INFO, "%{public}@Inserting connected ecosystems changed bulletin: %@", buf, 0x16u);

              p_cache = v52;
              v16 = v51;
              v25 = v50;
              v42 = v49;
              v41 = v68;
            }

            objc_autoreleasePoolPop(v46);
            -[HMDHAPAccessory bulletinBoard](v47, "bulletinBoard");
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v54, "insertConnectedCHIPEcosystemsChangedBulletin:", v45);

            ++v44;
          }
          while (v41 != v44);
          v41 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v82, 16);
        }
        while (v41);
      }

      v9 = v61;
      v8 = v62;
      v38 = v59;
      v17 = v60;
      v39 = v63;
    }
    else
    {
      v55 = (void *)MEMORY[0x1D17BA0A0]();
      v56 = v25;
      HMFGetOSLogHandle();
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v84 = v58;
        _os_log_impl(&dword_1CD062000, v57, OS_LOG_TYPE_INFO, "%{public}@Not inserting connected ecosystems changed bulletin because all added/removed pairings are for Apple Home/System Commissioner", buf, 0xCu);

        v39 = v63;
      }

      objc_autoreleasePoolPop(v55);
    }

  }
}

- (void)_fetchPairingsAndUpdateTransaction
{
  void *v3;
  void *v4;
  HMDHAPAccessory *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  uint8_t buf[4];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = self;
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v12 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Fetching CHIP pairings", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __59__HMDHAPAccessory_CHIP___fetchPairingsAndUpdateTransaction__block_invoke;
    v10[3] = &unk_1E89C0078;
    v10[4] = v5;
    objc_msgSend(v3, "fetchPairingsWithCompletionHandler:", v10);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v12 = v9;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP accessory server", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }

}

- (void)_updateCHIPAccessoryWithFabricLabel:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v8)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v19 = v13;
      v20 = 2112;
      v21 = v6;
      v22 = 2112;
      v23 = v8;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating fabric label to %@ for accessory server %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __79__HMDHAPAccessory_CHIP___updateCHIPAccessoryWithFabricLabel_completionHandler___block_invoke;
    v16[3] = &unk_1E89C1A48;
    v17 = v7;
    objc_msgSend(v8, "updateFabricLabel:completionHandler:", v6, v16);
    v14 = v17;
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v15;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP accessory server to update fabric label to %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v7 + 2))(v7, v14);
  }

}

- (void)updateCHIPAccessoryName:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory chipAccessoryServer](self, "chipAccessoryServer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543874;
      v11 = v9;
      v12 = 2112;
      v13 = v4;
      v14 = 2112;
      v15 = v5;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Updating CHIP accessory name to %@ for accessory server %@", (uint8_t *)&v10, 0x20u);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v5, "updateAccessoryName:", v4);
  }

}

- (id)matchingSystemCommissionerPairingForCHIPPairings:(id)a3 amongSystemCommissionerPairings:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  id v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v38 = a4;
  -[HMDAccessory home](self, "home");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "homeManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "accessoryBrowser");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "chipAccessoryServerBrowser");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "systemCommissionerFabricRootPublicKey");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v12 = v6;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v44;
    v36 = v12;
    v37 = v11;
    v33 = *(_QWORD *)v44;
    do
    {
      v16 = 0;
      v34 = v14;
      do
      {
        if (*(_QWORD *)v44 != v15)
          objc_enumerationMutation(v12);
        v17 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * v16);
        objc_msgSend(v17, "operationalIdentity", v33);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "rootPublicKey");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "isEqual:", v11);

        if (v20)
        {
          v35 = v16;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v21 = v38;
          v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
          if (v22)
          {
            v23 = v22;
            v24 = *(_QWORD *)v40;
            while (2)
            {
              for (i = 0; i != v23; ++i)
              {
                if (*(_QWORD *)v40 != v24)
                  objc_enumerationMutation(v21);
                v26 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
                objc_msgSend(v26, "nodeID");
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "operationalIdentity");
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v28, "nodeID");
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                v30 = objc_msgSend(v27, "isEqual:", v29);

                if ((v30 & 1) != 0)
                {
                  v31 = v26;

                  v12 = v36;
                  v11 = v37;
                  goto LABEL_21;
                }
              }
              v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
              if (v23)
                continue;
              break;
            }
          }

          v12 = v36;
          v11 = v37;
          v15 = v33;
          v14 = v34;
          v16 = v35;
        }
        ++v16;
      }
      while (v16 != v14);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
      v31 = 0;
    }
    while (v14);
  }
  else
  {
    v31 = 0;
  }
LABEL_21:

  return v31;
}

- (void)respondToFetchCHIPPairingsMessage:(id)a3 pairings:(id)a4 systemCommissionerPairings:(id)a5 fetchError:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  HMDHAPAccessory *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  void *v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  objc_msgSend(v11, "allObjects");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHAPAccessory matchingSystemCommissionerPairingForCHIPPairings:amongSystemCommissionerPairings:](self, "matchingSystemCommissionerPairingForCHIPPairings:amongSystemCommissionerPairings:", v14, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = v11;
  v17 = v16;
  if (v15)
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "uuid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v21;
      v32 = 2112;
      v33 = v22;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Updating raw CHIP pairings with system commissioner pairing UUID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __106__HMDHAPAccessory_CHIP__respondToFetchCHIPPairingsMessage_pairings_systemCommissionerPairings_fetchError___block_invoke;
    v26[3] = &unk_1E89C00A0;
    v27 = v15;
    objc_msgSend(v16, "na_map:", v26);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v28 = *MEMORY[0x1E0CB79D8];
  v23 = v17;
  if (!v17)
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
  }
  encodeRootObjectForIncomingXPCMessage(v23, 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = v24;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "respondWithPayload:", v25);

  if (!v17)
}

- (void)handleCHIPSendRemoteRequestMessage:(id)a3 chipAccessoryServer:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHAPAccessory *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  HMDHAPAccessory *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (v7)
  {
    objc_msgSend(v6, "dictionaryForKey:", CFSTR("HMDHomeCHIPRequestMessageKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __80__HMDHAPAccessory_CHIP__handleCHIPSendRemoteRequestMessage_chipAccessoryServer___block_invoke;
      v19[3] = &unk_1E89C1030;
      v20 = v6;
      objc_msgSend(v7, "handleCHIPRemoteRequest:completion:", v8, v19);
      v9 = v20;
    }
    else
    {
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "messagePayload");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v22 = v17;
        v23 = 2112;
        v24 = v18;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Cannot find command in CHIP remote request message payload: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D27FC8], 2, 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "respondWithError:", v9);
    }

  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Could not find CHIP accessory server to handle remote request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "respondWithError:", v8);
  }

}

- (void)_handleHomeNameChangedNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __60__HMDHAPAccessory_CHIP___handleHomeNameChangedNotification___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)didUpdatePairingsForAccessoryServer:(id)a3
{
  id v4;
  _BOOL4 v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = -[HMDHAPAccessory isPrimary](self, "isPrimary");
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "primaryAccessory");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Received pairing change update for CHIP accessory %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    -[HMDHAPAccessory _fetchPairingsAndUpdateTransaction](v7, "_fetchPairingsAndUpdateTransaction");
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "primaryAccessory");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = v13;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Ignoring pairing change update for CHIP accessory %@ because current accessory is not primary", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }

}

- (void)didUpdateRequiresThreadRouterForAccessoryServer:(id)a3
{
  id v4;
  void *v5;
  HMDHAPAccessory *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  HMDHAPAccessory *v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "requiresThreadRouter");
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v16 = v8;
    v17 = 2112;
    v18 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating accessory requires thread router to %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDAccessory workQueue](v6, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __73__HMDHAPAccessory_CHIP__didUpdateRequiresThreadRouterForAccessoryServer___block_invoke;
  v12[3] = &unk_1E89C2328;
  v13 = v4;
  v14 = v6;
  v11 = v4;
  dispatch_async(v10, v12);

}

- (id)numberFromAttributeReport:(id)a3
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0CC1AF0]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if (v5)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0CC1B08]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
    v8 = v7;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (id)dataFromAttributeReport:(id)a3
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0CC1AF0]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if (v5)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0CC1B08]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = v6;
    else
      v7 = 0;
    v8 = v7;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (id)valueFromAttribute:(id)a3
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0CC1B08]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void __73__HMDHAPAccessory_CHIP__didUpdateRequiresThreadRouterForAccessoryServer___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v8 = *MEMORY[0x1E0CB7E00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "requiresThreadRouter"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "mutableCopy");

  objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:messagePayload:", *MEMORY[0x1E0CB7DF8], v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "msgDispatcher");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sendMessage:target:", v5, v7);

}

void __60__HMDHAPAccessory_CHIP___handleHomeNameChangedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  uint8_t buf[4];
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v11 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Handling home name changed notification", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 40), "userInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_stringForKey:", CFSTR("HMDHomeNameNotificationKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = *(void **)(a1 + 32);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __60__HMDHAPAccessory_CHIP___handleHomeNameChangedNotification___block_invoke_93;
  v9[3] = &unk_1E89C2350;
  v9[4] = v8;
  objc_msgSend(v8, "_updateCHIPAccessoryWithFabricLabel:completionHandler:", v7, v9);

}

void __60__HMDHAPAccessory_CHIP___handleHomeNameChangedNotification___block_invoke_93(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to update fabric label for accessory: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }

}

void __80__HMDHAPAccessory_CHIP__handleCHIPSendRemoteRequestMessage_chipAccessoryServer___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  id v5;
  void *v6;
  id v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a1 + 32);
  if (a3)
  {
    v5 = a2;
    objc_msgSend(v3, "respondWithError:", a3);
  }
  else
  {
    v8 = CFSTR("HMDHomeCHIPResponseMessageKey");
    v9[0] = a2;
    v6 = (void *)MEMORY[0x1E0C99D80];
    v7 = a2;
    objc_msgSend(v6, "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithPayload:", v5);

  }
}

id __106__HMDHAPAccessory_CHIP__respondToFetchCHIPPairingsMessage_pairings_systemCommissionerPairings_fetchError___block_invoke(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (objc_class *)MEMORY[0x1E0CBA6A8];
  v4 = a2;
  v5 = [v3 alloc];
  objc_msgSend(v4, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "home");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)objc_msgSend(v5, "initWithIdentifier:home:", v6, v7);
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setSystemCommissionerPairingUUID:", v9);

  return v8;
}

uint64_t __79__HMDHAPAccessory_CHIP___updateCHIPAccessoryWithFabricLabel_completionHandler___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __59__HMDHAPAccessory_CHIP___fetchPairingsAndUpdateTransaction__block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    v10 = (void *)MEMORY[0x1E0C99E60];
    objc_msgSend(v7, "na_map:", &__block_literal_global_85_176068);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setWithArray:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "chipStorage");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "pairings");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "isEqual:", v12);

    if ((v15 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "transactionWithObjectChangeType:", 2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "setChipPairings:", v12);
      objc_msgSend(*(id *)(a1 + 32), "home");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "backingStore");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "transaction:options:", CFSTR("CHIP pairings changed"), v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v20, "add:", v16);
      objc_msgSend(v20, "run");

    }
  }
  else
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v24;
      v27 = 2112;
      v28 = v8;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch pairings from CHIP accessory server: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
  }

}

id __59__HMDHAPAccessory_CHIP___fetchPairingsAndUpdateTransaction__block_invoke_83(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  void *v4;

  v2 = (objc_class *)MEMORY[0x1E0CBA380];
  v3 = a2;
  v4 = (void *)objc_msgSend([v2 alloc], "initWithHMMTRPairing:", v3);

  return v4;
}

uint64_t __65__HMDHAPAccessory_CHIP___handleUpdatedPairings_previousPairings___block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = a2;
  objc_msgSend(v2, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "ecosystem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "vendor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isAppleVendor") & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    objc_msgSend(v2, "home");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "ecosystem");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "vendor");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v9, "isSystemCommissionerVendor") ^ 1;

  }
  return v6;
}

uint64_t __65__HMDHAPAccessory_CHIP___handleUpdatedPairings_previousPairings___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = a2;
  objc_msgSend(v2, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "ecosystem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "vendor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "isAppleVendor") & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    objc_msgSend(v2, "home");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "ecosystem");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "vendor");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v9, "isSystemCommissionerVendor") ^ 1;

  }
  return v6;
}

void __90__HMDHAPAccessory_CHIP___handleActivateCHIPPairingModeAndCreateSetupPayloadStringMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = *(void **)(a1 + 40);
    v14 = *MEMORY[0x1E0CB79E0];
    v15 = v5;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "respondWithPayload:", v8);
  }
  else
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v17 = v12;
      v18 = 2112;
      v19 = v6;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to open CHIP pairing window with PIN: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v13 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithError:", v8);
  }

}

void __63__HMDHAPAccessory_CHIP___handleActivateCHIPPairingModeMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v7;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to open CHIP pairing window: %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    v8 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "respondWithError:", v9);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");
  }

}

void __58__HMDHAPAccessory_CHIP___handleRemoveCHIPPairingsMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v12 = 138543618;
      v13 = v8;
      v14 = 2112;
      v15 = v9;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove chip accessory from HomeKit: %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v12 = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully removed chip accessory from HomeKit: %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __58__HMDHAPAccessory_CHIP___handleRemoveCHIPPairingsMessage___block_invoke_75(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v12 = 138543874;
      v13 = v8;
      v14 = 2112;
      v15 = v9;
      v16 = 2112;
      v17 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove CHIP pairing %@: %@", (uint8_t *)&v12, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v12 = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully removed CHIP pairing: %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __58__HMDHAPAccessory_CHIP___handleRemoveCHIPPairingsMessage___block_invoke_76(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v2)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove some CHIP pairings", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    v8 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "respondWithError:", v9);

  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v10;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Successfully removed CHIP pairings", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");
  }
}

uint64_t __90__HMDHAPAccessory_CHIP___removeSystemCommissionerPairingFromAccessoryPairings_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v15;
  void *v16;
  void *v17;

  v3 = a2;
  objc_msgSend(v3, "home");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "ecosystem");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "vendor");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isSystemCommissionerVendor"))
  {
    objc_msgSend(v3, "home");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "ecosystem");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "rootPublicKey");
    v15 = v4;
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "home");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "homeManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "accessoryBrowser");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "chipAccessoryServerBrowser");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "systemCommissionerFabricRootPublicKey");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v7, "isEqual:", v12);

    v4 = v15;
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void __90__HMDHAPAccessory_CHIP___removeSystemCommissionerPairingFromAccessoryPairings_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void (**v23)(void *, void *);
  void *v24;
  _QWORD v25[5];
  id v26;
  _QWORD v27[4];
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = MEMORY[0x1E0C809B0];
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = __90__HMDHAPAccessory_CHIP___removeSystemCommissionerPairingFromAccessoryPairings_completion___block_invoke_72;
    v27[3] = &unk_1E89BFF38;
    v28 = *(id *)(a1 + 40);
    objc_msgSend(v5, "na_firstObjectPassingTest:", v27);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      v10 = *(void **)(a1 + 48);
      objc_msgSend(v8, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = v7;
      v25[1] = 3221225472;
      v25[2] = __90__HMDHAPAccessory_CHIP___removeSystemCommissionerPairingFromAccessoryPairings_completion___block_invoke_74;
      v25[3] = &unk_1E89BFC88;
      v25[4] = *(_QWORD *)(a1 + 32);
      v26 = *(id *)(a1 + 56);
      objc_msgSend(v10, "removeSystemCommissionerPairingWithUUID:completionHandler:", v11, v25);

    }
    else
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        v30 = v21;
        v31 = 2112;
        v32 = v22;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Could not find matching system commissioner pairing for accessory pairing: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      v23 = (void (**)(void *, void *))_Block_copy(*(const void **)(a1 + 56));
      if (v23)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v23[2](v23, v24);

      }
    }

    v17 = v28;
  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v30 = v15;
      v31 = 2112;
      v32 = v6;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch system commissioner pairings: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v16 = _Block_copy(*(const void **)(a1 + 56));
    v17 = v16;
    if (v16)
      (*((void (**)(void *, id))v16 + 2))(v16, v6);
  }

}

uint64_t __90__HMDHAPAccessory_CHIP___removeSystemCommissionerPairingFromAccessoryPairings_completion___block_invoke_72(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "nodeID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToNumber:", v4);

  return v5;
}

void __90__HMDHAPAccessory_CHIP___removeSystemCommissionerPairingFromAccessoryPairings_completion___block_invoke_74(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void (**v9)(void *, void *);
  void *v10;
  void *v11;
  void (**v12)(void *, void *);
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543618;
      v14 = v8;
      v15 = 2112;
      v16 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove system commissioner pairing from matter locker: %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    v9 = (void (**)(void *, void *))_Block_copy(*(const void **)(a1 + 40));
    if (v9)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v9[2](v9, v10);

    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543362;
      v14 = v11;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully removed system commissioner pairing from matter locker", (uint8_t *)&v13, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v12 = (void (**)(void *, void *))_Block_copy(*(const void **)(a1 + 40));
    v9 = v12;
    if (v12)
      v12[2](v12, 0);
  }

}

void __58__HMDHAPAccessory_CHIP__handleGetStartUpColorTemperature___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v12;
      v20 = 2112;
      v21 = v13;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch color control cluster from accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v14 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "respondWithError:", v15);

  }
  else
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __58__HMDHAPAccessory_CHIP__handleGetStartUpColorTemperature___block_invoke_62;
    v16[3] = &unk_1E89BFEC0;
    v8 = *(void **)(a1 + 40);
    v16[4] = *(_QWORD *)(a1 + 32);
    v17 = v8;
    objc_msgSend(v5, "readStartUpColorTemperatureWithCompletion:", v16);

  }
}

void __58__HMDHAPAccessory_CHIP__handleGetStartUpColorTemperature___block_invoke_62(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v17 = v10;
    v18 = 2112;
    v19 = v5;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@handleGetStartUpColorTemperature responding with startUpColorTemperature: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  v11 = *(void **)(a1 + 40);
  v14 = CFSTR("kStartUpColorTemperatureKey");
  v12 = v5;
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null", v14);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v15 = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "respondWithPayload:", v13);

  if (!v5)
}

void __58__HMDHAPAccessory_CHIP__handleSetStartUpColorTemperature___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v12;
      v21 = 2112;
      v22 = v13;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch color control cluster from accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v14 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "respondWithError:", v15);

  }
  else
  {
    v8 = *(void **)(a1 + 48);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __58__HMDHAPAccessory_CHIP__handleSetStartUpColorTemperature___block_invoke_60;
    v16[3] = &unk_1E89C0DA8;
    v16[4] = *(_QWORD *)(a1 + 32);
    v17 = v8;
    v18 = *(id *)(a1 + 40);
    objc_msgSend(v5, "writeStartUpColorTemperature:completion:", v17, v16);

  }
}

void __58__HMDHAPAccessory_CHIP__handleSetStartUpColorTemperature___block_invoke_60(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138544130;
    v12 = v7;
    v13 = 2112;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    v17 = 2112;
    v18 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Startup color temperature: %@ set on accessory: %@ with error: %@", (uint8_t *)&v11, 0x2Au);

  }
  objc_autoreleasePoolPop(v4);
  v10 = *(void **)(a1 + 48);
  if (v3)
    objc_msgSend(v10, "respondWithError:", v3);
  else
    objc_msgSend(v10, "respondWithSuccess");

}

id __54__HMDHAPAccessory_CHIP__handleClearCredentialMessage___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = *(void **)(a1 + 32);
  v4 = *MEMORY[0x1E0CB7B20];
  v5 = a2;
  objc_msgSend(v3, "numberForKey:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "numberForKey:", *MEMORY[0x1E0CB7B30]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v6, "integerValue");
  objc_msgSend(MEMORY[0x1E0D28580], "untrackedPlaceholderFlow");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "clearCredentialAtIndex:withCredentialType:flow:", v8, v7, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "naFuture");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

uint64_t __54__HMDHAPAccessory_CHIP__handleClearCredentialMessage___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithSuccess");
}

uint64_t __54__HMDHAPAccessory_CHIP__handleClearCredentialMessage___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
}

id __48__HMDHAPAccessory_CHIP__handleClearUserMessage___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 32);
  v3 = *MEMORY[0x1E0CB7B38];
  v4 = a2;
  objc_msgSend(v2, "numberForKey:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "integerValue");
  objc_msgSend(MEMORY[0x1E0D28580], "untrackedPlaceholderFlow");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "clearUserAtIndex:flow:", v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "naFuture");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

uint64_t __48__HMDHAPAccessory_CHIP__handleClearUserMessage___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithSuccess");
}

uint64_t __48__HMDHAPAccessory_CHIP__handleClearUserMessage___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
}

void __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_3_56(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v6 = *MEMORY[0x1E0CB7BF0];
  v7[0] = a2;
  v3 = (void *)MEMORY[0x1E0C99D80];
  v4 = a2;
  objc_msgSend(v3, "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "respondWithPayload:", v5);

}

uint64_t __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithError:", a2);
}

id __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v2 = a2;
  objc_msgSend(v2, "getAllUsers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "naFuture");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_2;
  v8[3] = &unk_1E89BFD90;
  v9 = v2;
  v5 = v2;
  objc_msgSend(v4, "flatMap:", v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_3;
  v7[3] = &unk_1E89BFDB8;
  v8 = *(id *)(a1 + 32);
  objc_msgSend(a2, "na_map:", v7);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "combineAllFutures");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "flatMap:", &__block_literal_global_53_176120);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v16[4];
  id v17;

  v3 = a2;
  objc_msgSend(v3, "userType");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqualToNumber:", &unk_1E8B35160);

  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    objc_msgSend(v3, "userIndex");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "integerValue");
    objc_msgSend(MEMORY[0x1E0D28580], "untrackedPlaceholderFlow");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "readSchedulesForUserIndex:flow:", v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "naFuture");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_43;
    v16[3] = &unk_1E89BFD90;
    v17 = v3;
    objc_msgSend(v11, "flatMap:", v16);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v13 = (void *)MEMORY[0x1E0D519C0];
    objc_msgSend(v3, "description");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "futureWithResult:", v14);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v12;
}

id __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_2_52(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0D519C0];
  objc_msgSend(a2, "componentsJoinedByString:", CFSTR("\n"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "futureWithResult:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id __50__HMDHAPAccessory_CHIP__handleGetAllUsersMessage___block_invoke_43(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)MEMORY[0x1E0D519C0];
  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(a2, "componentsJoinedByString:", CFSTR("\n\t"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@\n\t%@"), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "futureWithResult:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t __76__HMDHAPAccessory_CHIP__handleRemoveCorrespondingSystemCommissionerMessage___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithSuccess");
}

uint64_t __89__HMDHAPAccessory_CHIP__handleActivateCHIPPairingModeAndCreateSetupPayloadStringMessage___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleActivateCHIPPairingModeAndCreateSetupPayloadStringMessage:", a2);
}

uint64_t __62__HMDHAPAccessory_CHIP__handleActivateCHIPPairingModeMessage___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleActivateCHIPPairingModeMessage:", a2);
}

uint64_t __57__HMDHAPAccessory_CHIP__handleRemoveCHIPPairingsMessage___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleRemoveCHIPPairingsMessage:", a2);
}

void __56__HMDHAPAccessory_CHIP__handleFetchCHIPPairingsMessage___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  _QWORD v24[5];
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = *MEMORY[0x1E0CB79D8];
  v31[0] = objc_opt_class();
  v31[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_unarchivedObjectForKey:ofClasses:", v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v13;
    v29 = 2112;
    v30 = v9;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEBUG, "%{public}@Fetched raw CHIP pairings: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  objc_msgSend(*(id *)(a1 + 32), "home");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "homeManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend(v15, "accessoryBrowser");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "chipAccessoryServerBrowser");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "systemCommissionerPairingManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __56__HMDHAPAccessory_CHIP__handleFetchCHIPPairingsMessage___block_invoke_36;
    v24[3] = &unk_1E89BFCD8;
    v19 = *(void **)(a1 + 40);
    v24[4] = *(_QWORD *)(a1 + 32);
    v25 = v19;
    v26 = v9;
    objc_msgSend(v18, "fetchSystemCommissionerPairingsWithCompletionHandler:", v24);

  }
  else
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v23;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager was nil while determining system commissioner pairing UUID", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(*(id *)(a1 + 32), "respondToFetchCHIPPairingsMessage:pairings:systemCommissionerPairings:fetchError:", *(_QWORD *)(a1 + 40), v9, MEMORY[0x1E0C9AA60], 0);
  }

}

uint64_t __56__HMDHAPAccessory_CHIP__handleFetchCHIPPairingsMessage___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleFetchCHIPPairingsMessage:", a2);
}

uint64_t __56__HMDHAPAccessory_CHIP__handleFetchCHIPPairingsMessage___block_invoke_36(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondToFetchCHIPPairingsMessage:pairings:systemCommissionerPairings:fetchError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2, a3);
}

uint64_t __60__HMDHAPAccessory_CHIP__handleCHIPSendRemoteRequestMessage___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleCHIPSendRemoteRequestMessage:chipAccessoryServer:", *(_QWORD *)(a1 + 40), a2);
}

void __47__HMDHAPAccessory_CHIP__configureCHIPAccessory__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543618;
      v9 = v7;
      v10 = 2112;
      v11 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to update fabric label for accessory: %@", (uint8_t *)&v8, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  objc_msgSend(*(id *)(a1 + 32), "_fetchPairingsAndUpdateTransaction");

}

void __61__HMDHAPAccessory_CHIP__removeAllCHIPPairingsWithCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v8;
      v14 = 2112;
      v15 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove all CHIP pairings: %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    v9 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);

  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v11;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Successfully removed all CHIP pairings", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

uint64_t __62__HMDHAPAccessory_CHIP__waitForDoorLockClusterObjectWithFlow___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v7;

  v3 = a2;
  objc_msgSend(v3, "createDoorLockClusterObjectWithFlow:", *(_QWORD *)(a1 + 32));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = v4;

    return 3;
  }
  else
  {
    v7 = _HMFPreconditionFailure();
    return __62__HMDHAPAccessory_CHIP__waitForDoorLockClusterObjectWithFlow___block_invoke_2(v7);
  }
}

uint64_t __62__HMDHAPAccessory_CHIP__waitForDoorLockClusterObjectWithFlow___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "UUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543874;
    v14 = v7;
    v15 = 2112;
    v16 = v8;
    v17 = 2112;
    v18 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to fetch chipAccessoryServer and create doorLockCluster with error: %@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  v9 = v3;
  v10 = v9;
  if (v9)
  {
    v11 = v9;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfUnspecifiedError");
    objc_claimAutoreleasedReturnValue();
  }

  return 2;
}

uint64_t __60__HMDHAPAccessory_CHIP__waitForChipAccessoryServerWithFlow___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "chipAccessoryServer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138544130;
      v19 = v9;
      v20 = 2112;
      v21 = v10;
      v22 = 2048;
      v23 = v4;
      v24 = 2112;
      v25 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Found chipAccessoryServer: %p %@", (uint8_t *)&v18, 0x2Au);

    }
    objc_autoreleasePoolPop(v5);
    v4;
    v11 = 1;
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "UUID");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v12;
      v20 = 2112;
      v21 = v13;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Failed to find chipAccessoryServer after timeout", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14)
    {
      v16 = v14;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfUnspecifiedError");
      objc_claimAutoreleasedReturnValue();
    }

    v11 = 2;
  }

  return v11;
}

+ (double)chipPairingModeActiveDuration
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;

  objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "preferenceForKey:", CFSTR("chipPairingModeActiveDuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "numberValue");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "doubleValue");
  v6 = v5;

  return v6;
}

- (HMDLowPowerModeProfile)lpmProfile
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDAccessory accessoryProfiles](self, "accessoryProfiles", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v12 != v5)
        objc_enumerationMutation(v2);
      v7 = *(id *)(*((_QWORD *)&v11 + 1) + 8 * v6);
      objc_opt_class();
      v8 = (objc_opt_isKindOfClass() & 1) != 0 ? v7 : 0;
      v9 = v8;

      if (v9)
        break;
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v7 = 0;
  }

  return (HMDLowPowerModeProfile *)v7;
}

- (BOOL)canReturnCachedValueForCharacteristic:(id)a3
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  char v7;

  v3 = canReturnCachedValueForCharacteristic__onceToken;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&canReturnCachedValueForCharacteristic__onceToken, &__block_literal_global_177558);
  v5 = (void *)canReturnCachedValueForCharacteristic__characteristicTypes;
  objc_msgSend(v4, "type");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v5, "containsObject:", v6);
  return v7;
}

- (BOOL)shouldDiscoverSuspendCapableAccessoryServer:(id)a3
{
  id v4;
  void *v5;
  int v6;
  BOOL v7;
  void *v9;
  void *v10;
  NSObject *v11;
  _QWORD block[4];
  id v13;

  v4 = a3;
  if (objc_msgSend(v4, "wakeNumber"))
  {
    -[HMDHAPAccessory setReachableViaBSP:](self, "setReachableViaBSP:", 1);
LABEL_4:
    -[HMDHAPAccessory setSuspendedState:](self, "setSuspendedState:", 3);
    v7 = 0;
    goto LABEL_5;
  }
  -[HMDHAPAccessory setReachableViaBSP:](self, "setReachableViaBSP:", 0);
  objc_msgSend(v4, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "containsString:", *MEMORY[0x1E0D15E90]);

  if (v6)
    goto LABEL_4;
  if (-[HMDHAPAccessory isSuspended](self, "isSuspended"))
    -[HMDHAPAccessory setSuspendedState:](self, "setSuspendedState:", 1);
  -[HMDHAPAccessory lpmProfile](self, "lpmProfile");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "pendingWakeBlock");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[HMDAccessory workQueue](self, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __68__HMDHAPAccessory_WoL__shouldDiscoverSuspendCapableAccessoryServer___block_invoke;
    block[3] = &unk_1E89C0870;
    v13 = v10;
    dispatch_async(v11, block);

  }
  v7 = 1;
LABEL_5:

  return v7;
}

- (void)updateSuspendedStateWithWakeNumber:(id)a3 hapAccessory:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDAccessory workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __72__HMDHAPAccessory_WoL__updateSuspendedStateWithWakeNumber_hapAccessory___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (BOOL)_handleUpdatedServicesForLowPowerModeProfile
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  HMDLowPowerModeProfile *v6;
  int v7;
  void *v8;
  HMDLowPowerModeProfile *v9;
  void *v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  HMDHAPAccessory *v16;
  NSObject *v17;
  void *v18;
  HMDLowPowerModeProfile *v19;
  BOOL v20;
  int v22;
  void *v23;
  __int16 v24;
  HMDLowPowerModeProfile *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  -[HMDAccessory workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  v4 = -[HMDHAPAccessory supportsWoL](self, "supportsWoL");
  -[HMDHAPAccessory lpmProfile](self, "lpmProfile");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (HMDLowPowerModeProfile *)v5;
  v7 = !v4;
  if (v4 && !v5)
  {
    -[HMDHAPAccessory findServiceWithServiceType:](self, "findServiceWithServiceType:", CFSTR("00000221-0000-1000-8000-0026BB765291"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = [HMDLowPowerModeProfile alloc];
    -[HMDAccessory workQueue](self, "workQueue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[HMDLowPowerModeProfile initWithAccessory:powerManagementservice:workQueue:](v9, "initWithAccessory:powerManagementservice:workQueue:", self, v8, v10);

    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543618;
      v23 = v14;
      v24 = 2112;
      v25 = v6;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Adding new Low Power Mode profile: %@", (uint8_t *)&v22, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    -[HMDAccessory addAccessoryProfile:](v12, "addAccessoryProfile:", v6);
LABEL_13:

    goto LABEL_14;
  }
  if (!v5)
    v7 = 0;
  if (v7 != 1)
  {
    v20 = 0;
    goto LABEL_16;
  }
  -[HMDAccessory removeAccessoryProfile:](self, "removeAccessoryProfile:", v5);
  if (-[HMDAccessory isSuspendCapable](self, "isSuspendCapable"))
  {
    v15 = (void *)MEMORY[0x1D17BA0A0](-[HMDHAPAccessory setSuspendedState:](self, "setSuspendedState:", 0));
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDAccessory identifier](v16, "identifier");
      v19 = (HMDLowPowerModeProfile *)objc_claimAutoreleasedReturnValue();
      v22 = 138543618;
      v23 = v18;
      v24 = 2112;
      v25 = v19;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Updating accessory's suspended capability to NO for %@", (uint8_t *)&v22, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    -[HMDHAPAccessory transactionWithObjectChangeType:](v16, "transactionWithObjectChangeType:", 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setSuspendCapable:", MEMORY[0x1E0C9AAA0]);
    -[HMDHAPAccessory _wol_runAccessoryTransaction:localOnly:](v16, "_wol_runAccessoryTransaction:localOnly:", v8, 0);
    goto LABEL_13;
  }
LABEL_14:
  v20 = 1;
LABEL_16:

  return v20;
}

- (void)_wakeSuspendedHAPAccessoryToPerformOperation:(int64_t)a3 linkType:(int64_t)a4 operationBlock:(id)a5 errorBlock:(id)a6 activity:(id)a7
{
  id v12;
  id v13;
  id v14;
  void *v15;
  HMDHAPAccessory *v16;
  NSObject *v17;
  void *v18;
  __CFString *v19;
  __CFString *v20;
  id v21;
  int64_t v22;
  int64_t v23;
  id v24;
  const __CFString *v25;
  _BOOL4 v26;
  const __CFString *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  __CFString *v33;
  __CFString *v34;
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  id v40[3];
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  __CFString *v44;
  __int16 v45;
  __CFString *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  const __CFString *v50;
  __int16 v51;
  const __CFString *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v12 = a5;
  v13 = a6;
  v35 = a7;
  -[HMDAccessory uuid](self, "uuid");

  -[HMDHAPAccessory suspendedState](self, "suspendedState");
  v14 = (id)HAPAccessorySuspendedStateDescription();
  -[HMDAccessory isReachable](self, "isReachable");
  v15 = (void *)MEMORY[0x1D17BA0A0](-[HMDAccessory isRemotelyReachable](self, "isRemotelyReachable"));
  v16 = self;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)a4 >= 3)
      v19 = CFSTR("Undefined");
    else
      v19 = off_1E89ABEB0[a4];
    v33 = v19;
    if ((unint64_t)a3 > 0xA)
      v20 = CFSTR("Undefined");
    else
      v20 = off_1E89ABEC8[a3];
    v34 = v20;
    -[HMDHAPAccessory suspendedState](v16, "suspendedState");
    HAPAccessorySuspendedStateDescription();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v13;
    v22 = a4;
    v23 = a3;
    v24 = v12;
    if (-[HMDAccessory isReachable](v16, "isReachable"))
      v25 = CFSTR("YES");
    else
      v25 = CFSTR("NO");
    v26 = -[HMDAccessory isRemotelyReachable](v16, "isRemotelyReachable");
    *(_DWORD *)buf = 138544642;
    v27 = CFSTR("YES");
    if (!v26)
      v27 = CFSTR("NO");
    v42 = v18;
    v43 = 2112;
    v44 = v33;
    v45 = 2112;
    v46 = v34;
    v47 = 2112;
    v48 = v32;
    v49 = 2112;
    v50 = v25;
    v12 = v24;
    a3 = v23;
    a4 = v22;
    v13 = v21;
    v51 = 2112;
    v52 = v27;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Waking suspended accessory with linkType: %@, operation: %@, suspendedState: %@, reachable: %@, remotely reachable: %@", buf, 0x3Eu);

  }
  objc_autoreleasePoolPop(v15);
  objc_initWeak((id *)buf, v16);
  -[HMDHAPAccessory lpmProfile](v16, "lpmProfile");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = __113__HMDHAPAccessory_WoL___wakeSuspendedHAPAccessoryToPerformOperation_linkType_operationBlock_errorBlock_activity___block_invoke;
  v36[3] = &unk_1E89C08C0;
  v29 = v35;
  v37 = v29;
  objc_copyWeak(v40, (id *)buf);
  v40[1] = (id)a4;
  v40[2] = (id)a3;
  v30 = v13;
  v38 = v30;
  v31 = v12;
  v39 = v31;
  objc_msgSend(v28, "wakeSuspendedAccessoryWithCompletion:", v36);

  objc_destroyWeak(v40);
  objc_destroyWeak((id *)buf);

}

- (void)_wol_runAccessoryTransaction:(id)a3 localOnly:(BOOL)a4
{
  uint64_t v5;
  _BOOL8 v6;
  const __CFString *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  if (a4)
    v5 = 0;
  else
    v5 = 2;
  v6 = !a4;
  if (a4)
    v7 = CFSTR("HMDHAPAccessoryWoLUpdateLocallyLabel");
  else
    v7 = CFSTR("HMDHAPAccessoryWoLUpdateLabel");
  v8 = a3;
  +[HMDBackingStoreTransactionOptions optionsWithSource:destination:mustReplay:mustPush:](HMDBackingStoreTransactionOptions, "optionsWithSource:destination:mustReplay:mustPush:", v6, v5, 0, 0);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDAccessory home](self, "home");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "backingStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "transaction:options:", v7, v12);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "add:withMessage:", v8, 0);
  objc_msgSend(v11, "run");

}

- (void)_wol_updateSuspendCapableHAPAccessoryServer:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  HMDHAPAccessory *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHAPAccessory canWakeUpViaWoL](self, "canWakeUpViaWoL"))
  {
    objc_msgSend(v4, "suspendedAccessory");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      -[HMDHAPAccessory connectivityInfo](self, "connectivityInfo");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "woWLANInfo");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "wakeType") == 2;

      -[HMDHAPAccessory lpmProfile](self, "lpmProfile");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)objc_msgSend(v9, "newHAPSuspendedAccessoryFromAccessoryConnectivityInfoWithType:", v8);
      objc_msgSend(v4, "setSuspendedAccessory:", v10);

      v11 = v4;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v12 = v11;
      else
        v12 = 0;
      v13 = v12;

      if (v13)
      {
        v21 = 0;
        objc_msgSend(v13, "getBonjourDeviceDNSName:", &v21);
        v14 = v21;
        if (v14)
        {
          objc_msgSend(v13, "suspendedAccessory");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setDnsName:", v14);

        }
      }
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "suspendedAccessory");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v23 = v19;
        v24 = 2112;
        v25 = v20;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Updating the accessory server with HAPSuspendedAccessory: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v16);

    }
  }

}

- (void)_wol_processDidRemoveHPAccessoryServer:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  HMDHAPAccessory *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHAPAccessory canWakeUpViaWoL](self, "canWakeUpViaWoL"))
  {
    if (objc_msgSend(v4, "wakeNumber"))
    {
      if (-[HMDHAPAccessory isSuspended](self, "isSuspended"))
      {
        -[HMDAccessory home](self, "home");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = objc_msgSend(v5, "isCurrentDeviceAvailableResident");

        if (v6)
        {
          v7 = (void *)MEMORY[0x1D17BA0A0]();
          v8 = self;
          HMFGetOSLogHandle();
          v9 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDAccessory identifier](v8, "identifier");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v12 = 138543618;
            v13 = v10;
            v14 = 2112;
            v15 = v11;
            _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@The suspended accessory: '%@' is no longer reachable. Updating the suspended state.", (uint8_t *)&v12, 0x16u);

          }
          objc_autoreleasePoolPop(v7);
          -[HMDHAPAccessory setSuspendedState:](v8, "setSuspendedState:", 1);
        }
      }
    }
    if (objc_msgSend(v4, "wakeNumber"))
      -[HMDHAPAccessory setReachableViaBSP:](self, "setReachableViaBSP:", 0);
  }

}

- (void)_wol_processReadWriteResponseForCharacteristic:(id)a3 isRead:(BOOL)a4 error:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  BOOL v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  HMDHAPAccessory *v18;
  void *v19;
  const char *v20;
  void *v21;
  HMDHAPAccessory *v22;
  void *v23;
  char *v24;
  int v25;
  void *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v6 = a4;
  v31 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  if (-[HMDHAPAccessory isSuspended](self, "isSuspended"))
  {
    v10 = 0;
    if (v9)
      goto LABEL_14;
  }
  else
  {
    if (-[HMDAccessory isReachable](self, "isReachable"))
      goto LABEL_14;
    v10 = -[HMDHAPAccessory suspendedState](self, "suspendedState") < 2;
    if (v9)
      goto LABEL_14;
  }
  if (!v10)
  {
    if (!v6
      || !-[HMDHAPAccessory canReturnCachedValueForCharacteristic:](self, "canReturnCachedValueForCharacteristic:", v8))
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = 1;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v6)
          v16 = "read";
        else
          v16 = "write";
        -[HMDAccessory identifier](v12, "identifier");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v15;
        v27 = 2080;
        v28 = v16;
        v29 = 2112;
        v30 = v17;
        v14 = 1;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@The accessory is no longer suspended per the %s response. Updating the internal state for %@", (uint8_t *)&v25, 0x20u);

      }
      goto LABEL_28;
    }
    goto LABEL_29;
  }
LABEL_14:
  if (objc_msgSend(v9, "isHMError"))
  {
    if (!-[HMDHAPAccessory isSuspended](self, "isSuspended") && objc_msgSend(v9, "code") == 103)
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v6)
          v20 = "read";
        else
          v20 = "write";
        -[HMDAccessory identifier](v18, "identifier");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v19;
        v27 = 2080;
        v28 = v20;
        v29 = 2112;
        v30 = v21;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@The accessory is suspended per %s the response. Updating the internal state for %@", (uint8_t *)&v25, 0x20u);

      }
      v14 = 3;
LABEL_28:

      objc_autoreleasePoolPop(v11);
      -[HMDHAPAccessory setSuspendedState:](self, "setSuspendedState:", v14);
      goto LABEL_29;
    }
    if (-[HMDHAPAccessory isSuspended](self, "isSuspended")
      && (objc_msgSend(v9, "code") == 4 || objc_msgSend(v9, "code") == 54))
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = 1;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDAccessory identifier](v22, "identifier");
        v24 = (char *)objc_claimAutoreleasedReturnValue();
        v25 = 138543618;
        v26 = v23;
        v27 = 2112;
        v28 = v24;
        v14 = 1;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@The accessory is now unreachable. Updating the internal state for %@", (uint8_t *)&v25, 0x16u);

      }
      goto LABEL_28;
    }
  }
LABEL_29:

}

- (void)_wol_updateWakingViaCharacteristicForWriteRequests:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  if (-[HMDHAPAccessory isSuspended](self, "isSuspended"))
  {
    -[HMDHAPAccessory wakingViaCharacteristicWithIID](self, "wakingViaCharacteristicWithIID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
    {
      if (-[HMDHAPAccessory canWakeBasedOnCharacteristicRequests:](self, "canWakeBasedOnCharacteristicRequests:", v8))
      {
        objc_msgSend(v8, "firstObject");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "characteristic");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "instanceID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHAPAccessory setWakingViaCharacteristicWithIID:](self, "setWakingViaCharacteristicWithIID:", v7);

      }
    }
  }

}

- (void)_wol_updateWakingViaCharacteristicForWriteResponses:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHAPAccessory wakingViaCharacteristicWithIID](self, "wakingViaCharacteristicWithIID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = v4;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v19;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v19 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          -[HMDHAPAccessory wakingViaCharacteristicWithIID](self, "wakingViaCharacteristicWithIID");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "request");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "characteristic");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "instanceID");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v12, "isEqualToNumber:", v15);

          if (v16)
          {
            -[HMDHAPAccessory setWakingViaCharacteristicWithIID:](self, "setWakingViaCharacteristicWithIID:", 0);
            goto LABEL_12;
          }
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (v8)
          continue;
        break;
      }
    }
LABEL_12:

    v4 = v17;
  }

}

- (void)_registerForMessages_lowPowerMode
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if (-[HMDHAPAccessory supportsWoL](self, "supportsWoL"))
  {
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 261);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDAccessory msgDispatcher](self, "msgDispatcher");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *MEMORY[0x1E0CB8190];
    v7[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "registerForMessage:receiver:policies:selector:", v5, self, v6, sel__handleWakeSuspendedAccessoryMessage_);

  }
}

- (BOOL)_validateIncomingMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHAPAccessory *v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  void *v11;
  HMDHAPAccessory *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  __int16 v16;
  BOOL v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "responseHandler");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543874;
      v22 = v14;
      v23 = 2112;
      v24 = v4;
      v25 = 2080;
      v26 = "-[HMDHAPAccessory(WoL) _validateIncomingMessage:]";
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@No response handler in %@: %s", (uint8_t *)&v21, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    goto LABEL_16;
  }
  if (objc_msgSend(v4, "isRemote"))
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v9;
      v23 = 2112;
      v24 = v4;
      v10 = "%{public}@This message should only be sent over XPC: %@";
LABEL_14:
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v21, 0x16u);

      goto LABEL_15;
    }
    goto LABEL_15;
  }
  objc_msgSend(v4, "proxyConnection");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "entitlements");

  if (!objc_msgSend(v4, "isEntitledForAPIAccess")
    || !objc_msgSend(v4, "isEntitledForSPIAccess")
    || (v16 & 0x100) == 0)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v9;
      v23 = 2112;
      v24 = v4;
      v10 = "%{public}@Unable to process the request to insufficient privileges for message: %@";
      goto LABEL_14;
    }
LABEL_15:

    objc_autoreleasePoolPop(v6);
    objc_msgSend(v4, "responseHandler");
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v19, 0);

LABEL_16:
    v17 = 0;
    goto LABEL_17;
  }
  v17 = 1;
LABEL_17:

  return v17;
}

- (void)_handleWakeSuspendedAccessoryMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  HMDHAPAccessory *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHAPAccessory _validateIncomingMessage:](self, "_validateIncomingMessage:", v4))
  {
    objc_msgSend(v4, "numberForKey:", *MEMORY[0x1E0CB8198]);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      -[HMDHAPAccessory lpmProfile](self, "lpmProfile");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v5, "unsignedIntegerValue");
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __61__HMDHAPAccessory_WoL___handleWakeSuspendedAccessoryMessage___block_invoke;
      v14[3] = &unk_1E89C08E8;
      v15 = v4;
      objc_msgSend(v6, "wakeSuspendedAccessoryWithType:completion:", v7, v14);

      v8 = (void (**)(_QWORD, _QWORD, _QWORD))v15;
    }
    else
    {
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      v10 = self;
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v17 = v12;
        v18 = 2112;
        v19 = v4;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Unable to validate wake type from message: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(v4, "responseHandler");
      v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v13, 0);

    }
  }

}

- (void)profile:(id)a3 didUpdateAccessoryState:(unint64_t)a4
{
  NSObject *v6;

  -[HMDAccessory workQueue](self, "workQueue", a3);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v6);

  -[HMDHAPAccessory setSuspendedState:](self, "setSuspendedState:", a4);
}

- (void)profile:(id)a3 didUpdateWoWLANInfos:(id)a4
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  HMFConnectivityInfo *v11;
  void *v12;
  HMFConnectivityInfo *v13;
  void *v14;
  id v15;

  v5 = a4;
  -[HMDAccessory workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v6);

  -[HMDHAPAccessory connectivityInfo](self, "connectivityInfo");
  v15 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "accessoryIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = v7;
  }
  else
  {
    -[HMDAccessory identifier](self, "identifier");
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v9;

  v11 = [HMFConnectivityInfo alloc];
  objc_msgSend(v15, "woBLEInfo");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMFConnectivityInfo initWithAccessoryIdentifier:woBLEInfo:woWLANInfos:](v11, "initWithAccessoryIdentifier:woBLEInfo:woWLANInfos:", v10, v12, v5);

  if ((HMFEqualObjects() & 1) == 0)
  {
    -[HMDHAPAccessory transactionWithObjectChangeType:](self, "transactionWithObjectChangeType:", 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setConnectivityInfo:", v13);
    -[HMDHAPAccessory _wol_runAccessoryTransaction:localOnly:](self, "_wol_runAccessoryTransaction:localOnly:", v14, 0);

  }
}

void __61__HMDHAPAccessory_WoL___handleWakeSuspendedAccessoryMessage___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  id v4;
  void (**v5)(id, id, _QWORD);

  v3 = *(void **)(a1 + 32);
  v4 = a3;
  objc_msgSend(v3, "responseHandler");
  v5 = (void (**)(id, id, _QWORD))objc_claimAutoreleasedReturnValue();
  v5[2](v5, v4, 0);

}

void __113__HMDHAPAccessory_WoL___wakeSuspendedHAPAccessoryToPerformOperation_linkType_operationBlock_errorBlock_activity___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  NSObject *v9;
  id v10;
  unint64_t v11;
  __CFString *v12;
  __CFString *v13;
  unint64_t v14;
  __CFString *v15;
  __CFString *v16;
  id v17;
  int v18;
  const __CFString *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  NSObject *v28;
  id v29;
  void *v30;
  unint64_t v31;
  __CFString *v32;
  __CFString *v33;
  unint64_t v34;
  __CFString *v35;
  __CFString *v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  uint8_t buf[4];
  id v42;
  __int16 v43;
  id v44;
  __int16 v45;
  __CFString *v46;
  __int16 v47;
  __CFString *v48;
  __int16 v49;
  id v50;
  __int16 v51;
  const __CFString *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v37 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "begin");
  v38 = *(id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = WeakRetained;
    HMFGetOSLogHandle();
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (id)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 64);
      if (v11 > 2)
        v12 = CFSTR("Undefined");
      else
        v12 = off_1E89ABEB0[v11];
      v13 = v12;
      v14 = *(_QWORD *)(a1 + 72);
      if (v14 > 0xA)
        v15 = CFSTR("Undefined");
      else
        v15 = off_1E89ABEC8[v14];
      v16 = v15;
      objc_msgSend(v8, "suspendedState");
      HAPAccessorySuspendedStateDescription();
      v17 = (id)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v8, "isReachable");
      v19 = CFSTR("NO");
      *(_DWORD *)buf = 138544642;
      v42 = v10;
      v43 = 2112;
      if (v18)
        v19 = CFSTR("YES");
      v44 = v5;
      v45 = 2112;
      v46 = v13;
      v47 = 2112;
      v48 = v16;
      v49 = 2112;
      v50 = v17;
      v51 = 2112;
      v52 = v19;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Did configure / wake up the accessory with error: %@, linkType: %@, operation: %@, suspendedState: %@, reachable: %@ ", buf, 0x3Eu);

    }
    objc_autoreleasePoolPop(v7);
    v20 = *(id *)(a1 + 32);
    objc_msgSend(v8, "uuid");

    objc_msgSend(v8, "suspendedState");
    v21 = (id)HAPAccessorySuspendedStateDescription();
    objc_msgSend(v37, "isReachable");
    objc_msgSend(v5, "domain");

    objc_msgSend(v5, "code");
    if (v5)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v22 = (void *)MEMORY[0x1E0CB35C8];
        v39 = *MEMORY[0x1E0CB3388];
        v40 = v5;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "hmErrorWithCode:userInfo:", 4, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      }
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 48);
      if (v25)
      {
        if (v37)
        {
          (*(void (**)(void))(v25 + 16))();
        }
        else
        {
          v26 = (void *)MEMORY[0x1D17BA0A0]();
          v27 = v8;
          HMFGetOSLogHandle();
          v28 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v29 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "identifier");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = *(_QWORD *)(a1 + 72);
            if (v31 > 0xA)
              v32 = CFSTR("Undefined");
            else
              v32 = off_1E89ABEC8[v31];
            v33 = v32;
            v34 = *(_QWORD *)(a1 + 64);
            if (v34 > 2)
              v35 = CFSTR("Undefined");
            else
              v35 = off_1E89ABEB0[v34];
            v36 = v35;
            *(_DWORD *)buf = 138544130;
            v42 = v29;
            v43 = 2112;
            v44 = v30;
            v45 = 2112;
            v46 = v33;
            v47 = 2112;
            v48 = v36;
            _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Retrieving accessory: %@ for operation: '%@' over link: '%@'", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v26);
          objc_msgSend(v27, "_retrieveHAPAccessoryToPerformOperation:linkType:operationBlock:errorBlock:activity:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
        }
      }
    }
  }

  __HMFActivityScopeLeave();
}

void __72__HMDHAPAccessory_WoL__updateSuspendedStateWithWakeNumber_hapAccessory___block_invoke(id *a1)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void (**v20)(_QWORD, _QWORD);
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1[4], "suspendedState");
  v3 = objc_msgSend(a1[5], "unsignedIntValue");
  if (v3)
    v4 = 0;
  else
    v4 = v2 == 3;
  if (v4)
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = a1[4];
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = a1[5];
      HAPAccessorySuspendedStateDescription();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[6], "identifier");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138544130;
      v22 = v15;
      v23 = 2112;
      v24 = v16;
      v25 = 2112;
      v26 = v17;
      v27 = 2112;
      v28 = v18;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Received wake number update: '%@' from a '%@' accessory: %@", (uint8_t *)&v21, 0x2Au);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(a1[4], "setSuspendedState:", 1);
    objc_msgSend(a1[4], "lpmProfile");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "pendingWakeBlock");
    v20 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    if (v20)
      v20[2](v20, 0);

  }
  else if (v3)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = a1[4];
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = a1[5];
      HAPAccessorySuspendedStateDescription();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[6], "identifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138544130;
      v22 = v8;
      v23 = 2112;
      v24 = v9;
      v25 = 2112;
      v26 = v10;
      v27 = 2112;
      v28 = v11;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received wake number update: '%@' from a '%@' accessory: %@", (uint8_t *)&v21, 0x2Au);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(a1[4], "setSuspendedState:", 3);
  }
}

uint64_t __68__HMDHAPAccessory_WoL__shouldDiscoverSuspendCapableAccessoryServer___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __62__HMDHAPAccessory_WoL__canReturnCachedValueForCharacteristic___block_invoke()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  v2[0] = *MEMORY[0x1E0CB8790];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 1);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)canReturnCachedValueForCharacteristic__characteristicTypes;
  canReturnCachedValueForCharacteristic__characteristicTypes = v0;

}

- (void)wirelessResumeInit
{
  id v2;

  if (-[HMDHAPAccessory custom1WoBLE](self, "custom1WoBLE"))
    v2 = +[HMDBTLEAdvertiser initializeAdvertiser](HMDBTLEAdvertiser, "initializeAdvertiser");
}

- (void)powerOnComplete:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __51__HMDHAPAccessory_WirelessResume__powerOnComplete___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_wirelessPowerOn:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *aBlock;

  v4 = a3;
  if (v4)
  {
    aBlock = v4;
    if (-[HMDHAPAccessory custom1WoBLE](self, "custom1WoBLE"))
    {
      +[HMDBTLEAdvertiser sharedAdvertiser](HMDBTLEAdvertiser, "sharedAdvertiser");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHAPAccessory powerOnCompletionRoutines](self, "powerOnCompletionRoutines");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = _Block_copy(aBlock);
      objc_msgSend(v6, "addObject:", v7);

      objc_msgSend(v5, "powerOn:", self);
    }
    else
    {
      (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
    }
    v4 = aBlock;
  }

}

- (void)wirelessPowerOn:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDAccessory workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __51__HMDHAPAccessory_WirelessResume__wirelessPowerOn___block_invoke;
  v7[3] = &unk_1E89C1D68;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (BOOL)isPoweringOn
{
  void *v3;

  +[HMDBTLEAdvertiser sharedAdvertiser](HMDBTLEAdvertiser, "sharedAdvertiser");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(self) = objc_msgSend(v3, "isAdvertisingForAccessory:", self);

  return (char)self;
}

uint64_t __51__HMDHAPAccessory_WirelessResume__wirelessPowerOn___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_wirelessPowerOn:", *(_QWORD *)(a1 + 40));
}

void __51__HMDHAPAccessory_WirelessResume__powerOnComplete___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "powerOnCompletionRoutines", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6++) + 16))();
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 32), "powerOnCompletionRoutines");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeAllObjects");

}

@end
