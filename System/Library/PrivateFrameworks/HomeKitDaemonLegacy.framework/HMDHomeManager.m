@implementation HMDHomeManager

uint64_t __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke_1(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  if (v5)
  {
    objc_msgSend(v3, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void __51__HMDHomeManager__handleRequestRuntimeStateUpdate___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v4 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, id))v4)[2](v4, 0, v5);

  }
}

+ (id)logCategory
{
  if (logCategory__hmf_once_t14_166196 != -1)
    dispatch_once(&logCategory__hmf_once_t14_166196, &__block_literal_global_324);
  return (id)logCategory__hmf_once_v15_166197;
}

- (void)__handleRequestFetchHomeConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  double v22;
  _BOOL4 v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  double v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  int v54;
  void *v55;
  HMDHomeManager *v56;
  NSObject *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  NSObject *v61;
  void *v62;
  double v63;
  void *v64;
  unint64_t v65;
  int v66;
  _BOOL4 v67;
  void *v68;
  HMDHomeManager *v69;
  NSObject *v70;
  void *v71;
  double v72;
  void *v73;
  double v74;
  int v75;
  void *v76;
  HMDHomeManager *v77;
  NSObject *v78;
  void *v79;
  double v80;
  void *v81;
  double v82;
  const char *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  HMDHomeManager *v88;
  NSObject *v89;
  void *v90;
  double v91;
  void *v92;
  double v93;
  void *v94;
  HMDHomeManager *v95;
  NSObject *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  int v102;
  void *v103;
  void *v104;
  void *v105;
  HMDHomeManager *v106;
  void *v107;
  void *v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  char v117;
  uint64_t v118;
  void *v119;
  double v120;
  double v121;
  uint64_t v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  double v127;
  double v128;
  void *v129;
  HMDHomeManager *v130;
  NSObject *v131;
  uint64_t v132;
  double v133;
  void *v134;
  void *v135;
  void *v136;
  char *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  id v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  int v160;
  void *v161;
  HMDHomeManager *v162;
  NSObject *v163;
  _BOOL4 v164;
  void *v165;
  double v166;
  double v167;
  double v168;
  void *v169;
  void *v170;
  uint64_t v171;
  double v172;
  double v173;
  void *v174;
  HMDHomeManager *v175;
  NSObject *v176;
  void *v177;
  HMDHomeManager *v178;
  void *v179;
  double v180;
  int v181;
  void *v182;
  __CFString *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  __CFString *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  uint64_t v201;
  void *v202;
  void *v203;
  void *v204;
  id v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  uint64_t v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  _BOOL4 v217;
  int v218;
  void *v219;
  double v220;
  HMDHomeManager *v221;
  int v222;
  void *v223;
  void *v224;
  void *v225;
  _BOOL4 v226;
  int v227;
  int v228;
  HMDHomeManager *v229;
  void *v230;
  unsigned int v231;
  _QWORD block[5];
  id v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  id v238;
  uint64_t v239;
  double v240;
  uint8_t buf[4];
  uint64_t v242;
  __int16 v243;
  double v244;
  __int16 v245;
  void *v246;
  __int16 v247;
  double v248;
  __int16 v249;
  const char *v250;
  __int16 v251;
  void *v252;
  _BYTE v253[128];
  uint64_t v254;
  _QWORD v255[4];

  v255[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_msgSend(v4, "homeManagerOptions");
  v231 = objc_msgSend(v4, "isEntitledForSPIAccess");
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "clientName");
    v10 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
    HMHomeManagerOptionsShortDescription();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v242 = (uint64_t)v9;
    v243 = 2112;
    v244 = v10;
    v245 = 2112;
    v246 = v11;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Received fetch from client, %@, with options: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  v12 = (void *)MEMORY[0x1E0C99E08];
  v254 = *MEMORY[0x1E0CB9040];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v255[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v255, &v254, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "dictionaryWithDictionary:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v239 = 0;
  v16 = -[HMDHomeManager dataSyncInProgressWithState:withMessage:](v7, "dataSyncInProgressWithState:withMessage:", &v239, v4);
  v17 = (void *)MEMORY[0x1D17BA0A0]();
  v18 = v7;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = v15;
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v22 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
    HMHomeManagerDataSyncStateToString();
    v23 = v16;
    v24 = v4;
    v25 = v5;
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v242 = (uint64_t)v21;
    v243 = 2112;
    v244 = v22;
    v245 = 2112;
    v246 = v26;
    _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Handling fetch home configuration request, data sync in progress : %@ data sync state: %@", buf, 0x20u);

    v5 = v25;
    v4 = v24;
    v16 = v23;

    v15 = v20;
  }

  objc_autoreleasePoolPop(v17);
  if (!objc_msgSend(v4, "BOOLForKey:", CFSTR("kCanUseCachedHomeConfigurationKey")))
  {
    objc_msgSend(v4, "numberForKey:", CFSTR("kConfigGenerationCounterKey"));
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "numberForKey:", CFSTR("kHAPMetadataVersionKey"));
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = (void *)v35;
    if (!v34 || !v35)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v38 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
      objc_msgSend(v4, "respondWithError:", *(_QWORD *)&v38);
      goto LABEL_121;
    }
    if (isAppleTV() && v16)
    {
      v37 = (void *)MEMORY[0x1E0CB35C8];
      -[HMDHomeManager _statusPayloadForMessage:](v18, "_statusPayloadForMessage:", v4);
      v38 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
      objc_msgSend(v37, "hmErrorWithCode:userInfo:", 77, *(_QWORD *)&v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v39);

LABEL_121:
      goto LABEL_122;
    }
    v227 = v5;
    v230 = v15;
    objc_msgSend(v4, "proxyConnection");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "processInfo");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v238 = 0;
    objc_msgSend(v41, "clientIdentifierSalt:", &v238);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = COERCE_DOUBLE(v238);

    if (!v42)
    {
      v55 = (void *)MEMORY[0x1D17BA0A0]();
      v56 = v18;
      HMFGetOSLogHandle();
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v242 = (uint64_t)v58;
        v243 = 2112;
        v244 = v38;
        _os_log_impl(&dword_1CD062000, v57, OS_LOG_TYPE_ERROR, "%{public}@Cannot send out home data because client identifier salt could not be determined: %@", buf, 0x16u);

        v42 = 0;
      }

      objc_autoreleasePoolPop(v55);
      objc_msgSend(v4, "respondWithError:", *(_QWORD *)&v38);
      v15 = v230;
      goto LABEL_120;
    }
    objc_msgSend(v230, "setObject:forKeyedSubscript:", v42, CFSTR("kIdentifierSaltKey"));
    if (objc_msgSend(v4, "isEntitledForAssistantIdentifiers"))
    {
      -[HMDHomeManager _getAssistantHashingData](v18, "_getAssistantHashingData");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v230, "setObject:forKeyedSubscript:", v43, *MEMORY[0x1E0CB8E70]);

    }
    v226 = v16;
    v219 = v42;
    v220 = v38;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMDHomeManager generationCounter](v18, "generationCounter"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v230, "setObject:forKeyedSubscript:", v44, CFSTR("kConfigGenerationCounterKey"));

    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "version");
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    if (v46)
    {
      objc_msgSend(v45, "version");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v230, "setObject:forKeyedSubscript:", v47, CFSTR("kHAPMetadataVersionKey"));

    }
    -[HMDHomeManager _statusPayloadForMessage:](v18, "_statusPayloadForMessage:", v4);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v230, "addEntriesFromDictionary:", v48);

    v225 = v34;
    v49 = objc_msgSend(v34, "unsignedIntegerValue");
    v50 = -[HMDHomeManager generationCounter](v18, "generationCounter");
    v223 = v36;
    v51 = objc_msgSend(v36, "unsignedIntegerValue");
    v224 = v45;
    objc_msgSend(v45, "version");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = objc_msgSend(v52, "unsignedIntegerValue");

    if (v231)
      v54 = !-[HMDHomeManager cacheUseAllowed](v18, "cacheUseAllowed");
    else
      v54 = 0;
    v59 = -[HMDHomeManager hasClientRequestedMediaAccessoryControl:](v18, "hasClientRequestedMediaAccessoryControl:", v4);
    v229 = v18;
    v222 = v54;
    if (v54)
    {
      v218 = v59;
      v60 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v61 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v63 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        HMFBooleanToString();
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v242 = (uint64_t)v62;
        v243 = 2112;
        v244 = v63;
        v245 = 2112;
        v246 = v64;
        _os_log_impl(&dword_1CD062000, v61, OS_LOG_TYPE_INFO, "%{public}@Forcing SPI entitled client to not use cached home configuration homeCounterMatch %@  metadataVersionMatch %@", buf, 0x20u);

      }
      v217 = v51 != v53;

      objc_autoreleasePoolPop(v60);
      v65 = 0x1E0CB3000;
      v66 = v227;
      v67 = v226;
    }
    else
    {
      v66 = v227;
      if (v49 == v50 && v51 == v53)
      {
        v68 = (void *)MEMORY[0x1D17BA0A0](v59);
        v69 = v18;
        HMFGetOSLogHandle();
        v70 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = COERCE_DOUBLE(-[HMDHomeManager generationCounter](v69, "generationCounter"));
          objc_msgSend(v224, "version");
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "applicationBundleIdentifier");
          v74 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
          *(_DWORD *)buf = 138544130;
          v242 = (uint64_t)v71;
          v243 = 2048;
          v244 = v72;
          v245 = 2112;
          v246 = v73;
          v247 = 2112;
          v248 = v74;
          _os_log_impl(&dword_1CD062000, v70, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager generation counter %lu/metadata version %@ matches the client(%@)", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v68);
        v75 = 1;
        v65 = 0x1E0CB3000;
        v15 = v230;
        goto LABEL_101;
      }
      v217 = v51 != v53;
      v218 = v59;
      v65 = 0x1E0CB3000;
      v67 = v226;
      if (v49 == v50)
      {
LABEL_91:
        v75 = v218 & v66 & !v67;
        v15 = v230;
        if ((v217 | v222) == 1)
        {
          v160 = HMIsHAPMetadataNeededForHMHomeManagerOptions();
          v161 = (void *)MEMORY[0x1D17BA0A0]();
          v162 = v229;
          HMFGetOSLogHandle();
          v163 = objc_claimAutoreleasedReturnValue();
          v164 = os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT);
          if (v160)
          {
            v228 = v75;
            if (v164)
            {
              HMFGetLogIdentifier();
              v165 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v224, "version");
              v166 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
              *(_DWORD *)buf = 138543874;
              v242 = (uint64_t)v165;
              v243 = 2112;
              v244 = v166;
              v245 = 2112;
              v246 = v223;
              _os_log_impl(&dword_1CD062000, v163, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager HAP metadata version %@ does not match client's value of %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v161);
            objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
            v168 = v167;
            +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
            v169 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v169, "xpcData:", objc_msgSend(v4, "isEntitledForSPIAccess"));
            v170 = (void *)objc_claimAutoreleasedReturnValue();
            v171 = objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
            v173 = v172;
            v174 = (void *)MEMORY[0x1D17BA0A0](v171);
            v175 = v162;
            HMFGetOSLogHandle();
            v176 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v177 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v242 = (uint64_t)v177;
              v243 = 2048;
              v244 = v173 - v168;
              _os_log_impl(&dword_1CD062000, v176, OS_LOG_TYPE_DEFAULT, "%{public}@Time to encode metadata: %.4f s", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v174);
            objc_msgSend(v230, "setObject:forKeyedSubscript:", v170, CFSTR("kHAPMetadataDataKey"));
            v178 = v175;
            v15 = v230;
            -[HMDHomeManager setCacheUseAllowed:](v178, "setCacheUseAllowed:", 0);

            v75 = v228;
          }
          else
          {
            if (v164)
            {
              HMFGetLogIdentifier();
              v179 = (void *)objc_claimAutoreleasedReturnValue();
              HMHomeManagerOptionsToString();
              v180 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
              objc_msgSend(v4, "clientName");
              v181 = v75;
              v182 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v242 = (uint64_t)v179;
              v243 = 2112;
              v244 = v180;
              v245 = 2112;
              v246 = v182;
              _os_log_impl(&dword_1CD062000, v163, OS_LOG_TYPE_DEFAULT, "%{public}@Client has not requested access to HAP accessories (options %@) - not sending metadata to [%@]", buf, 0x20u);

              v75 = v181;
            }

            objc_autoreleasePoolPop(v161);
            v65 = 0x1E0CB3000uLL;
          }
        }
LABEL_101:
        if (v231)
        {
          v183 = CFSTR("com.apple.homekit-entitledclient.identifer");
          -[HMDHomeManager _runtimeState](v229, "_runtimeState");
          v184 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "addEntriesFromDictionary:", v184);

          objc_msgSend(v15, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("kCanCacheHomeConfigurationKey"));
          objc_msgSend(*(id *)(v65 + 2024), "numberWithBool:", -[HMDHomeManager cacheUseAllowed](v229, "cacheUseAllowed"));
          v185 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v185, CFSTR("kCanUseCachedHomeConfigurationKey"));

          if (!-[HMDHomeManager cacheUseAllowed](v229, "cacheUseAllowed"))
            -[HMDHomeManager setCacheUseAllowed:](v229, "setCacheUseAllowed:", 1);
          v186 = *(void **)(v65 + 2024);
          -[HMDHomeManager keyTransferAgent](v229, "keyTransferAgent");
          v187 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v186, "numberWithUnsignedInteger:", objc_msgSend(v187, "residentProvisioningStatus"));
          v188 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v188, CFSTR("kProvisioningStatusKey"));

          if (v75)
            objc_msgSend(v15, "setObject:forKey:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CB90B8]);
          v189 = CFSTR("com.apple.homekit-entitledclient.identifer");
        }
        else
        {
          objc_msgSend(v4, "applicationBundleIdentifier");
          v189 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        -[HMDHomeManager appData](v229, "appData");
        v190 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v190, "applicationDataForIdentifier:", v189);
        v191 = (void *)objc_claimAutoreleasedReturnValue();

        if (v191)
        {
          v192 = (void *)objc_msgSend(v191, "copy");
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v192, CFSTR("kAppDataInformationKey"));

        }
        objc_msgSend(*(id *)(v65 + 2024), "numberWithBool:", 0);
        v193 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setObject:forKeyedSubscript:", v193, *MEMORY[0x1E0CB8FD0]);

        -[HMDHomeManager hh2FrameworkSwitch](v229, "hh2FrameworkSwitch");
        v194 = (void *)objc_claimAutoreleasedReturnValue();

        if (v194)
        {
          v195 = *(void **)(v65 + 2024);
          -[HMDHomeManager hh2FrameworkSwitch](v229, "hh2FrameworkSwitch");
          v196 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v195, "numberWithBool:", objc_msgSend(v196, "checkExistenceOfHH2SentinelZone"));
          v197 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v197, *MEMORY[0x1E0CB9130]);

        }
        objc_msgSend(*(id *)(v65 + 2024), "numberWithBool:", -[HMDHomeManager isHH2MigrationInProgress](v229, "isHH2MigrationInProgress"));
        v198 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setObject:forKeyedSubscript:", v198, *MEMORY[0x1E0CB8FB0]);

        +[HMDHH2MigratorRecord lastMigrationFailure](HMDHH2MigratorRecord, "lastMigrationFailure");
        v199 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setObject:forKeyedSubscript:", v199, *MEMORY[0x1E0CB8FA8]);

        if (_os_feature_enabled_impl())
        {
          -[HMDHomeManager idsServerBag](v229, "idsServerBag");
          v200 = (void *)objc_claimAutoreleasedReturnValue();
          v201 = objc_msgSend(v200, "isHH2ManualMigrationEnabled");

        }
        else
        {
          v201 = 0;
        }
        objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
        v202 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v202, "preferenceForKey:", CFSTR("hh2ManualMigrationAvailableOverride"));
        v203 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v203, "value");
        v204 = (void *)objc_claimAutoreleasedReturnValue();

        if (v204)
        {
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __56__HMDHomeManager___handleRequestFetchHomeConfiguration___block_invoke;
          block[3] = &unk_1E89C2328;
          block[4] = v229;
          v205 = v203;
          v206 = v205;
          v233 = v205;
          if (__handleRequestFetchHomeConfiguration__onceToken == -1)
          {
            v207 = v205;
          }
          else
          {
            dispatch_once(&__handleRequestFetchHomeConfiguration__onceToken, block);
            v207 = v233;
          }
          v201 = objc_msgSend(v206, "BOOLValue");

        }
        objc_msgSend(*(id *)(v65 + 2024), "numberWithBool:", v201);
        v208 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setObject:forKeyedSubscript:", v208, *MEMORY[0x1E0CB8F98]);

        -[HMDHomeManager idsServerBag](v229, "idsServerBag");
        v209 = (void *)objc_claimAutoreleasedReturnValue();
        v210 = objc_msgSend(v209, "homeSafetySecurityEnabled");

        objc_msgSend(*(id *)(v65 + 2024), "numberWithBool:", v210);
        v211 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setObject:forKeyedSubscript:", v211, *MEMORY[0x1E0CB8FC8]);

        v212 = (void *)objc_msgSend(v15, "copy");
        objc_msgSend(v4, "respondWithPayload:", v212);

        v34 = v225;
        v36 = v223;
        v42 = v219;
        v38 = v220;
LABEL_120:

        goto LABEL_121;
      }
    }
    v76 = (void *)MEMORY[0x1D17BA0A0]();
    v77 = v229;
    HMFGetOSLogHandle();
    v78 = objc_claimAutoreleasedReturnValue();
    v221 = v77;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      v80 = COERCE_DOUBLE(-[HMDHomeManager generationCounter](v221, "generationCounter"));
      objc_msgSend(v4, "applicationBundleIdentifier");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      v82 = COERCE_DOUBLE(objc_msgSend(v225, "unsignedIntegerValue"));
      *(_DWORD *)buf = 138544386;
      v83 = "";
      v242 = (uint64_t)v79;
      if (v222)
        v83 = " (forced to update anyways)";
      v243 = 2048;
      v244 = v80;
      v66 = v227;
      v245 = 2112;
      v246 = v81;
      v247 = 2048;
      v248 = v82;
      v249 = 2080;
      v250 = v83;
      _os_log_impl(&dword_1CD062000, v78, OS_LOG_TYPE_DEFAULT, "%{public}@Home manager generation counter %lu does not match client's (%@) value of %lu%s.", buf, 0x34u);

      v67 = v226;
      v77 = v221;
    }

    objc_autoreleasePoolPop(v76);
    if ((v66 & 0x9FCD) == 0)
    {
      if ((v66 & 0x10) != 0)
      {
        -[HMDHomeManager _accessoryOfCurrentDevice](v77, "_accessoryOfCurrentDevice");
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v92, "home");
        v93 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

        if (v93 != 0.0)
        {
          v94 = (void *)MEMORY[0x1D17BA0A0]();
          v95 = v221;
          HMFGetOSLogHandle();
          v96 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v97 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v242 = (uint64_t)v97;
            v243 = 2112;
            v244 = v93;
            _os_log_impl(&dword_1CD062000, v96, OS_LOG_TYPE_INFO, "%{public}@Encoding home containing current device's accessory: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v94);
          v240 = v93;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v240, 1);
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          encodeRootObjectForIncomingXPCMessage(v98, v4);
          v99 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v230, "setObject:forKeyedSubscript:", v99, CFSTR("kHomeDataKey"));

          if (v231)
          {
            -[HMDHomeManager currentHomeUUID](v95, "currentHomeUUID");
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)&v93, "uuid");
            v101 = (void *)objc_claimAutoreleasedReturnValue();
            v102 = objc_msgSend(v100, "isEqual:", v101);

            if (v102)
            {
              -[HMDHomeManager currentHomeUUID](v95, "currentHomeUUID");
              v103 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v103, "UUIDString");
              v104 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v230, "setObject:forKeyedSubscript:", v104, CFSTR("kCurrentHomeUUIDKey"));

            }
          }
        }

        v67 = v226;
      }
      else
      {
        v87 = (void *)MEMORY[0x1D17BA0A0]();
        v88 = v77;
        HMFGetOSLogHandle();
        v89 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          HMHomeManagerOptionsToString();
          v91 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
          *(_DWORD *)buf = 138543618;
          v242 = (uint64_t)v90;
          v243 = 2112;
          v244 = v91;
          _os_log_impl(&dword_1CD062000, v89, OS_LOG_TYPE_DEFAULT, "%{public}@Not sending home data as the client has not requested it in their options: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v87);
      }
      goto LABEL_90;
    }
    -[HMDHomeManager homes](v77, "homes");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = v230;
    if (!isAppleTV() || (objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
    {
      v86 = v84;
      goto LABEL_74;
    }
    -[HMDHomeManager currentHomeUUID](v77, "currentHomeUUID");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    if (v105)
      -[HMDHomeManager currentHomeUUID](v77, "currentHomeUUID");
    else
      -[HMDHomeManager lastCurrentHomeUUID](v77, "lastCurrentHomeUUID");
    v106 = v77;
    v107 = (void *)objc_claimAutoreleasedReturnValue();

    v108 = (void *)MEMORY[0x1E0C99DE8];
    -[HMDHomeManager homes](v106, "homes");
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v108, "arrayWithCapacity:", objc_msgSend(v109, "count"));
    v86 = (void *)objc_claimAutoreleasedReturnValue();

    v236 = 0u;
    v237 = 0u;
    v234 = 0u;
    v235 = 0u;
    v110 = v84;
    v111 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v234, v253, 16);
    if (!v111)
    {
LABEL_73:

      v85 = v230;
      v66 = v227;
      v77 = v221;
LABEL_74:
      -[HMDHomeManager filterHomes:isSPIEntitled:](v77, "filterHomes:isSPIEntitled:", v86, v231);
      v119 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
      v121 = v120;
      v216 = v119;
      encodeRootObjectForIncomingXPCMessage(v119, v4);
      v122 = objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager incomingInvitations](v77, "incomingInvitations");
      v123 = (void *)objc_claimAutoreleasedReturnValue();
      v124 = (void *)objc_msgSend(v123, "copy");
      encodeRootObjectForIncomingXPCMessage(v124, 0);
      v125 = (void *)objc_claimAutoreleasedReturnValue();

      v126 = objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
      v128 = v127;
      v129 = (void *)MEMORY[0x1D17BA0A0](v126);
      v130 = v77;
      HMFGetOSLogHandle();
      v131 = objc_claimAutoreleasedReturnValue();
      v215 = (void *)v122;
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v132 = objc_claimAutoreleasedReturnValue();
        v214 = v129;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v216, "count"));
        v133 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        v134 = (void *)MEMORY[0x1E0CB37E8];
        -[HMDHomeManager homes](v130, "homes");
        v135 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v134, "numberWithUnsignedInteger:", objc_msgSend(v135, "count"));
        v136 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v125, "length") + objc_msgSend(v215, "length"));
        v137 = (char *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "applicationBundleIdentifier");
        v138 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544642;
        v242 = v132;
        v213 = v125;
        v139 = (void *)v132;
        v243 = 2112;
        v244 = v133;
        v245 = 2112;
        v246 = v136;
        v247 = 2048;
        v248 = v128 - v121;
        v249 = 2112;
        v250 = v137;
        v251 = 2112;
        v252 = v138;
        _os_log_impl(&dword_1CD062000, v131, OS_LOG_TYPE_DEFAULT, "%{public}@Number of homes - %@ / %@, Time to encode homes: %.4f s, Size: %@ bytes, client: %@", buf, 0x3Eu);

        v129 = v214;
        v66 = v227;

        v85 = v230;
        v122 = (uint64_t)v215;

        v125 = v213;
      }

      objc_autoreleasePoolPop(v129);
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v122, CFSTR("kHomeDataKey"));
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v125, CFSTR("kIncomingHomeInvitationsKey"));
      -[HMDHomeManager lastRemovedCurrentAccessoryUUID](v130, "lastRemovedCurrentAccessoryUUID");
      v140 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v140, "UUIDString");
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v141, *MEMORY[0x1E0CB9000]);

      -[HMDHomeManager userDefaults](v130, "userDefaults");
      v142 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v142, "objectForKey:", CFSTR("HMDHomeManagerSharedHomesNotYetMigratedKey"));
      v143 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v144 = v143;
      else
        v144 = 0;
      v145 = v144;

      objc_msgSend(v145, "allKeys");
      v146 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v85, "setObject:forKeyedSubscript:", v146, *MEMORY[0x1E0CB90E0]);
      -[HMDHomeManager primaryHomeUUID](v130, "primaryHomeUUID");
      v147 = (void *)objc_claimAutoreleasedReturnValue();

      v65 = 0x1E0CB3000uLL;
      v67 = v226;
      v148 = v125;
      v149 = v216;
      if (!v147)
        goto LABEL_85;
      -[HMDHomeManager primaryHomeUUID](v130, "primaryHomeUUID");
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v216, "hmf_firstObjectWithUUID:", v150);
      v151 = (void *)objc_claimAutoreleasedReturnValue();

      if (v151)
      {
        v152 = v85;
        -[HMDHomeManager primaryHomeUUID](v130, "primaryHomeUUID");
        v153 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v148 = v125;
        if (!objc_msgSend(v216, "count"))
        {
LABEL_85:
          if (v231)
          {
            -[HMDHomeManager currentHomeUUID](v130, "currentHomeUUID");
            v156 = (void *)objc_claimAutoreleasedReturnValue();

            if (v156)
            {
              -[HMDHomeManager currentHomeUUID](v130, "currentHomeUUID");
              v157 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v157, "UUIDString");
              v158 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v85, "setObject:forKeyedSubscript:", v158, CFSTR("kCurrentHomeUUIDKey"));

              v149 = v216;
            }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v149, "count"));
            v159 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v85, "setObject:forKeyedSubscript:", v159, CFSTR("kHomeCountKey"));

          }
LABEL_90:
          -[HMDHomeManager setCacheUseAllowed:](v221, "setCacheUseAllowed:", 0);
          goto LABEL_91;
        }
        v152 = v85;
        objc_msgSend(v216, "firstObject");
        v151 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v151, "uuid");
        v153 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v154 = v153;
      objc_msgSend(v153, "UUIDString");
      v155 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v152, "setObject:forKeyedSubscript:", v155, CFSTR("kPrimaryHomeUUIDKey"));

      v85 = v152;
      v148 = v125;
      v149 = v216;
      goto LABEL_85;
    }
    v112 = v111;
    v113 = *(_QWORD *)v235;
LABEL_62:
    v114 = 0;
    while (1)
    {
      if (*(_QWORD *)v235 != v113)
        objc_enumerationMutation(v110);
      v115 = *(void **)(*((_QWORD *)&v234 + 1) + 8 * v114);
      if (!v107)
        break;
      objc_msgSend(v115, "uuid");
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      v117 = objc_msgSend(v116, "isEqual:", v107);

      if ((v117 & 1) != 0)
        goto LABEL_67;
LABEL_68:
      if (v112 == ++v114)
      {
        v118 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v234, v253, 16);
        v112 = v118;
        if (!v118)
          goto LABEL_73;
        goto LABEL_62;
      }
    }
    if (!objc_msgSend(v115, "isOwnerUser"))
      goto LABEL_68;
LABEL_67:
    objc_msgSend(v86, "addObject:", v115);
    goto LABEL_68;
  }
  v27 = objc_msgSend(v4, "isEntitledForSPIAccess");
  if ((_DWORD)v27 && v5 != -1)
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = v18;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = v15;
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v242 = (uint64_t)v32;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Client has specified partial options, not using cache", buf, 0xCu);

      v15 = v31;
    }

    objc_autoreleasePoolPop(v28);
    v27 = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v27);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setObject:forKeyedSubscript:", v33, CFSTR("kCanUseCachedHomeConfigurationKey"));

  v34 = (void *)objc_msgSend(v15, "copy");
  objc_msgSend(v4, "respondWithPayload:", v34);
LABEL_122:

}

- (id)needsOnboardingForHomeUUID:(id)a3 accessoryUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  _BOOL8 v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, void *);
  void *v36;
  id v37;
  _QWORD v38[4];
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager homes](self, "homes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x1E0C809B0];
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke;
  v38[3] = &unk_1E89BD690;
  v10 = v6;
  v39 = v10;
  objc_msgSend(v8, "na_firstObjectPassingTest:", v38);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v11, "accessories");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v12, "copy");

    v33 = v9;
    v34 = 3221225472;
    v35 = __83__HMDHomeManager_SiriEndpointOnboarding__needsOnboardingForHomeUUID_accessoryUUID___block_invoke_1;
    v36 = &unk_1E89B53F8;
    v14 = v7;
    v37 = v14;
    objc_msgSend(v13, "na_firstObjectPassingTest:", &v33);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v19 = v18;
      else
        v19 = 0;
      v20 = v19;
      objc_msgSend(v20, "needsOnboarding", v33, v34, v35, v36);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
        v22 = objc_msgSend(v21, "integerValue") == 0;
      else
        v22 = 1;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v22);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v28 = (void *)MEMORY[0x1D17BA0A0](0, v15, v16, v17);
      v29 = self;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v31;
        v42 = 2112;
        v43 = v14;
        _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Accessory is not found. accessoryUUID: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v28);
      v27 = (void *)MEMORY[0x1E0C9AAB0];
    }

  }
  else
  {
    v23 = (void *)MEMORY[0x1D17BA0A0]();
    v24 = self;
    HMFGetOSLogHandle();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v26;
      v42 = 2112;
      v43 = v10;
      _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    v27 = 0;
  }

  return v27;
}

- (NSArray)homes
{
  os_unfair_lock_s *p_lock;
  void *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = (void *)-[NSMutableArray copy](self->_homes, "copy");
  os_unfair_lock_unlock(p_lock);
  return (NSArray *)v4;
}

- (HMDIDSServerBag)idsServerBag
{
  return (HMDIDSServerBag *)objc_getProperty(self, a2, 176, 1);
}

- (unint64_t)generationCounter
{
  os_unfair_lock_s *p_lock;
  unint64_t generationCounter;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  generationCounter = self->_generationCounter;
  os_unfair_lock_unlock(p_lock);
  return generationCounter;
}

- (BOOL)cacheUseAllowed
{
  return self->_cacheUseAllowed;
}

- (HMDHH2FrameworkSwitch)hh2FrameworkSwitch
{
  return self->_hh2FrameworkSwitch;
}

- (void)setCacheUseAllowed:(BOOL)a3
{
  self->_cacheUseAllowed = a3;
}

- (NSUserDefaults)userDefaults
{
  return self->_userDefaults;
}

- (NSUUID)primaryHomeUUID
{
  return self->_primaryHomeUUID;
}

- (NSUUID)lastRemovedCurrentAccessoryUUID
{
  return (NSUUID *)objc_getProperty(self, a2, 520, 1);
}

- (HMDKeyTransferAgent)keyTransferAgent
{
  return self->_keyTransferAgent;
}

- (BOOL)isHH2MigrationInProgress
{
  return self->_hh2MigrationInProgress;
}

- (NSMutableArray)incomingInvitations
{
  return self->_incomingInvitations;
}

- (BOOL)hasClientRequestedMediaAccessoryControl:(id)a3
{
  void *v4;
  void *v5;
  char v6;
  _QWORD v8[4];
  id v9;

  objc_msgSend(a3, "applicationBundleIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[HMDHomeManager homes](self, "homes");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __58__HMDHomeManager_hasClientRequestedMediaAccessoryControl___block_invoke;
    v8[3] = &unk_1E89BD690;
    v9 = v4;
    v6 = objc_msgSend(v5, "na_any:", v8);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)filterHomes:(id)a3 isSPIEntitled:(BOOL)a4
{
  _BOOL4 v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  _QWORD v10[5];

  v4 = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke;
  v10[3] = &unk_1E89BD690;
  v10[4] = self;
  objc_msgSend(a3, "na_filter:", v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
  {
    v7 = v5;
  }
  else
  {
    objc_msgSend(v5, "na_filter:", &__block_literal_global_915_165445);
    v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  v8 = v7;

  return v8;
}

- (HMDApplicationData)appData
{
  return self->_appData;
}

uint64_t __58__HMDHomeManager_hasClientRequestedMediaAccessoryControl___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isApplicationBundleIDSubscribedToAppleMediaAccessoryState:", *(_QWORD *)(a1 + 32));
}

- (id)_statusPayloadForMessage:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v28;
  _QWORD v29[4];
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v4 = a3;
  v5 = -[HMDHomeManager statusForMessage:](self, "statusForMessage:", v4);
  -[HMDHomeManager dataSyncInProgressWithState:withMessage:](self, "dataSyncInProgressWithState:withMessage:", &v28, v4);

  -[HMDHomeManager multiUserStatusController](self, "multiUserStatusController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "didUpdateDataSyncState:", v28);

  if (enableRetailDemoSetup || -[HMDHomeManager demoFinalized](self, "demoFinalized"))
  {
    v5 = 0;
    v28 = 1;
  }
  if (isInternalBuild())
  {
    objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "preferenceForKey:", CFSTR("HMDHomeManagerForceOverrideDataSyncStateAndStatus"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "BOOLValue");

    if (v9)
    {
      objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "preferenceForKey:", CFSTR("HMDHomeManagerDataSyncStateOverride"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "numberValue");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v12, "unsignedIntegerValue");

      objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "preferenceForKey:", CFSTR("HMDHomeManagerStatusOverride"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "numberValue");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v15, "unsignedIntegerValue");

    }
  }
  -[HMDHomeManager metricsManager](self, "metricsManager", v28);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "deviceStateManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "updateWithDataSyncState:", v28);

  -[HMDHomeManager metricsManager](self, "metricsManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "deviceStateManager");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "updateWithHomeManagerStatus:", v5);

  v29[0] = *MEMORY[0x1E0CB8EA8];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v28);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = v20;
  v29[1] = *MEMORY[0x1E0CB90F8];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v5);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v30[1] = v21;
  v29[2] = CFSTR("kConfigGenerationCounterKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", -[HMDHomeManager generationCounter](self, "generationCounter"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v30[2] = v22;
  v29[3] = *MEMORY[0x1E0CB9020];
  v23 = (void *)MEMORY[0x1E0CB37E8];
  -[HMDHomeManager multiUserStatusController](self, "multiUserStatusController");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "numberWithInteger:", objc_msgSend(v24, "multiUserState"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v30[3] = v25;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, v29, 4);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  return v26;
}

- (HMDMultiUserStatusController)multiUserStatusController
{
  return self->_multiUserStatusController;
}

- (HMDMetricsManager)metricsManager
{
  return self->_metricsManager;
}

- (BOOL)dataSyncInProgressWithState:(unint64_t *)a3 withMessage:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  char v9;

  v6 = a4;
  -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "dataSyncInProgressWithState:withMessage:", a3, v6);

  }
  else
  {
    v9 = 0;
    if (a3)
      *a3 = 1;
  }

  return v9;
}

- (HMDCloudDataSyncStateFilter)cloudDataSyncStateFilter
{
  return self->_cloudDataSyncStateFilter;
}

- (BOOL)areThereAnyTTSUSessionsOngoing
{
  os_unfair_lock_s *p_lock;
  uint64_t v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  int v15;
  id v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  p_lock = &self->_lock;
  v4 = os_unfair_lock_lock_with_options();
  v5 = (void *)MEMORY[0x1D17BA0A0](v4);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (id)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1E0CB37E8];
    -[HMDHomeManager deviceSetupSessions](v6, "deviceSetupSessions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "numberWithUnsignedInteger:", objc_msgSend(v10, "count"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v8;
    v17 = 2112;
    v18 = v11;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Ongoing TTSU sessions : %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager deviceSetupSessions](v6, "deviceSetupSessions");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "hmf_isEmpty");

  os_unfair_lock_unlock(p_lock);
  return v13 ^ 1;
}

- (NSMutableArray)deviceSetupSessions
{
  return self->_deviceSetupSessions;
}

- (BOOL)demoFinalized
{
  return self->_demoFinalized;
}

- (HMDAccessoryFirmwareUpdateManager)accessoryFirmwareUpdateManager
{
  return self->_accessoryFirmwareUpdateManager;
}

- (unint64_t)statusForMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  const char *v17;
  unint64_t v18;
  char v19;
  HMDHomeManager *v20;
  HMDHomeManager *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHomeManager *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "supportsDeviceSetup");

  if (!v7)
    goto LABEL_7;
  objc_msgSend(v5, "accountContext");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "getLocalPairingIdentity:", 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v42 = v16;
        v17 = "%{public}@Device setup required, no account pairing identity";
        goto LABEL_12;
      }
      goto LABEL_13;
    }
    -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "decryptionFailed");

    if (v12)
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = self;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v42 = v16;
        v17 = "%{public}@Device setup required, unable to decrypt cloud data";
LABEL_12:
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, v17, buf, 0xCu);

        goto LABEL_13;
      }
      goto LABEL_13;
    }
LABEL_7:
    v18 = 0;
    v19 = 1;
    goto LABEL_14;
  }
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v20 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v42 = v16;
    v17 = "%{public}@Device setup required, no active account";
    goto LABEL_12;
  }
LABEL_13:

  objc_autoreleasePoolPop(v13);
  v19 = 0;
  v18 = 16;
LABEL_14:
  v40 = 0;
  if (-[HMDHomeManager dataSyncInProgressWithState:withMessage:](self, "dataSyncInProgressWithState:withMessage:", &v40, v4))
  {
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    if ((v19 & 1) != 0)
    {
      if (v25)
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v42 = v26;
        _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Busy, data sync in progress", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v22);
      v18 |= 1uLL;
    }
    else
    {
      if (v25)
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v42 = v27;
        _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Suppressing busy status while device setup required", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v22);
    }
  }
  objc_msgSend(v5, "accountContext");
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v28)
  {
    v29 = (void *)MEMORY[0x1D17BA0A0]();
    v30 = self;
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v42 = v32;
      _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@No account", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v29);
    v18 |= 0x20uLL;
  }
  v33 = (void *)MEMORY[0x1D17BA0A0]();
  v34 = self;
  HMFGetOSLogHandle();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v18);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "isLoggedInToPrimaryAccount");
    HMFBooleanToString();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v42 = v36;
    v43 = 2112;
    v44 = v37;
    v45 = 2112;
    v46 = v38;
    _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@status : %@, %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v33);

  return v18;
}

- (HMDAppleAccountManager)appleAccountManager
{
  return self->_appleAccountManager;
}

- (id)_runtimeState
{
  void *v3;
  __CFString *v4;
  __CFString *v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[4];
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = CFSTR("kCurrentHomeUUIDKey");
    v5 = CFSTR("kCurrentHomeUUIDKey");
    -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = CFSTR("kNoCurrentHomeKey");
    v8 = CFSTR("kNoCurrentHomeKey");
    v7 = (void *)MEMORY[0x1E0C9AAB0];
  }
  v14[0] = CFSTR("kResidentCapableDeviceKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHomeManager isResidentCapable](self, "isResidentCapable"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v9;
  v14[1] = CFSTR("kResidentEnabledKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v15[1] = v10;
  v14[2] = CFSTR("kAccessAllowedWhenLockedKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14[3] = v4;
  v15[2] = v11;
  v15[3] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (NSUUID)currentHomeUUID
{
  os_unfair_lock_s *p_lock;
  NSUUID *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_currentHomeUUID;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (BOOL)isResidentEnabled
{
  _BOOL4 v3;

  v3 = -[HMDHomeManager isResidentCapable](self, "isResidentCapable");
  if (v3)
    LOBYTE(v3) = -[HMDHomeManager residentEnabledState](self, "residentEnabledState") == 2;
  return v3;
}

- (BOOL)isAccessAllowedWhenLocked
{
  HMDHomeManager *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_accessAllowedWhenLocked;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (BOOL)isResidentCapable
{
  void *v2;
  char v3;

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isResidentCapable");

  return v3;
}

void __40__HMDHomeManager___addActiveConnection___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Registering as home manager active because first active connection was added", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "browseAssertion");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "beginActiveAssertionWithReason:", CFSTR("Home Manager Active"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setBrowseAssertion:", v8);

  }
  objc_msgSend(*(id *)(a1 + 40), "applicationBundleIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 40), "applicationBundleIdentifier", CFSTR("HMDXPCConnectionBundleIdentifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerActiveNotification"), *(_QWORD *)(a1 + 32), v9);

}

- (void)setBrowseAssertion:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 448);
}

- (id)browseAssertion
{
  return objc_getProperty(self, a2, 448, 1);
}

- (HMDAccessoryBrowser)accessoryBrowserInternal
{
  return self->_accessoryBrowserInternal;
}

- (void)__addActiveConnection:(id)a3
{
  id v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[5];
  id v13;

  v4 = a3;
  os_unfair_lock_lock_with_options();
  v5 = -[NSMutableSet hmf_isEmpty](self->_activeConnections, "hmf_isEmpty");
  if ((-[NSMutableSet containsObject:](self->_activeConnections, "containsObject:", v4) & 1) == 0)
  {
    -[NSMutableSet addObject:](self->_activeConnections, "addObject:", v4);
    objc_msgSend(v4, "sendPolicyParameters");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v6, "mutableCopy");

    objc_msgSend(v7, "setActive:", 1);
    objc_msgSend(v4, "updateSendPolicyParameters:", v7);
    +[HMDActiveXPCConnectionLogEvent initWithNewXPCConnectionAdded:](HMDActiveXPCConnectionLogEvent, "initWithNewXPCConnectionAdded:", v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "submitLogEvent:", v8);

    -[HMDHomeManager notificationCenter](self, "notificationCenter");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "postNotificationName:object:", CFSTR("HMDHomeManagerConnectionActiveStateUpdatedNotification"), v4);

  }
  os_unfair_lock_unlock(&self->_lock);
  if ((v5 & 1) != 0)
  {
    -[HMDHomeManager workQueue](self, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __40__HMDHomeManager___addActiveConnection___block_invoke;
    v12[3] = &unk_1E89C2328;
    v12[4] = self;
    v13 = v4;
    dispatch_async(v11, v12);

  }
}

- (OS_dispatch_queue)workQueue
{
  return self->_workQueue;
}

- (HMMLogEventSubmitting)logEventSubmitter
{
  return self->_logEventSubmitter;
}

- (NSNotificationCenter)notificationCenter
{
  return self->_notificationCenter;
}

- (void)_handleRequestFetchHomeConfiguration:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  v6 = a3;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("homed.xpc.fetch.homeConfiguration."));
  -[HMDHomeManager __handleRequestFetchHomeConfiguration:](self, "__handleRequestFetchHomeConfiguration:", v6);

  objc_autoreleasePoolPop(v4);
}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_3(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "_runtimeState");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addEntriesFromDictionary:", v3);

  }
  v4 = *(_QWORD *)(a1 + 48);
  v5 = (id)objc_msgSend(*(id *)(a1 + 32), "copy");
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_2(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v2, *(_QWORD *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_2;
    v7[3] = &unk_1E89C07B8;
    v8 = v3;
    v9 = a1[4];
    v10 = a1[5];
    v11 = a1[6];
    dispatch_async(v6, v7);

  }
}

- (HMDCHIPDataSource)chipDataSource
{
  return (HMDCHIPDataSource *)objc_getProperty(self, a2, 160, 1);
}

- (void)_handleRequestRuntimeStateUpdate:(id)a3
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  v5 = objc_msgSend(v4, "homeManagerOptions");
  v6 = objc_msgSend(v4, "isEntitledForSPIAccess");
  if ((v5 & 0x8741) != 0)
  {
    v7 = v6;
    v8 = -[HMDHomeManager hasClientRequestedMediaAccessoryControl:](self, "hasClientRequestedMediaAccessoryControl:", v4);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __51__HMDHomeManager__handleRequestRuntimeStateUpdate___block_invoke;
    v9[3] = &unk_1E89BD748;
    v10 = v4;
    -[HMDHomeManager _getRuntimeStateUpdateForHomeManager:includeMediaAccessorySessionState:options:includeResidentDeviceState:completion:](self, "_getRuntimeStateUpdateForHomeManager:includeMediaAccessorySessionState:options:includeResidentDeviceState:completion:", v7, v8, v5, v7, v9);

  }
  else
  {
    objc_msgSend(v4, "respondWithPayload:", 0);
  }

}

- (void)_handleFetchDevicesMessage:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v13 = *MEMORY[0x1E0CB8EC8];
  v6 = (void *)MEMORY[0x1E0C99E60];
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "account");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "devices");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setWithArray:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  encodeRootObjectForIncomingXPCMessage(v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithPayload:", v12);

}

- (void)_getRuntimeStateUpdateForHomeManager:(BOOL)a3 includeMediaAccessorySessionState:(BOOL)a4 options:(unint64_t)a5 includeResidentDeviceState:(BOOL)a6 completion:(id)a7
{
  _BOOL8 v7;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  id v22;
  BOOL v23;
  id v24;
  id obj;
  _BOOL4 v27;
  HMDHomeManager *val;
  _QWORD block[4];
  id v30;
  HMDHomeManager *v31;
  id v32;
  BOOL v33;
  _QWORD v34[4];
  id v35;
  id v36;
  NSObject *v37;
  id v38;
  id location;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v27 = a6;
  v7 = a4;
  v45 = *MEMORY[0x1E0C80C00];
  v10 = a7;
  if (v10)
  {
    v23 = a3;
    v24 = v10;
    v11 = dispatch_group_create();
    val = self;
    -[HMDHomeManager homes](self, "homes");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v12, "count"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    obj = v12;
    v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v41;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v41 != v15)
            objc_enumerationMutation(obj);
          v17 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v16);
          dispatch_group_enter(v11);
          objc_msgSend(v17, "uuid");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "UUIDString");
          v19 = (void *)objc_claimAutoreleasedReturnValue();

          objc_initWeak(&location, val);
          v34[0] = MEMORY[0x1E0C809B0];
          v34[1] = 3221225472;
          v34[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke;
          v34[3] = &unk_1E89BD6F8;
          objc_copyWeak(&v38, &location);
          v35 = v13;
          v20 = v19;
          v36 = v20;
          v37 = v11;
          objc_msgSend(v17, "getRunTimeStateUpdateWithOptions:includeMediaAccessorySessionState:includeResidentDeviceState:completion:", a5, v7, v27, v34);

          objc_destroyWeak(&v38);
          objc_destroyWeak(&location);

          ++v16;
        }
        while (v14 != v16);
        v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      }
      while (v14);
    }

    -[HMDHomeManager workQueue](val, "workQueue");
    v21 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __135__HMDHomeManager__getRuntimeStateUpdateForHomeManager_includeMediaAccessorySessionState_options_includeResidentDeviceState_completion___block_invoke_3;
    block[3] = &unk_1E89BD720;
    v33 = v23;
    v30 = v13;
    v31 = val;
    v32 = v24;
    v22 = v13;
    dispatch_group_notify(v11, v21, block);

    v10 = v24;
  }

}

- (void)networkDetectQueryWithCompletionHandler:(id)a3
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  HMDHomeManager *v13;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED8C4388);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _Block_copy(a3);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = self;
  v10 = sub_1CDAB85A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = &unk_1EFA45B60;
  v11[5] = v9;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &unk_1EFA45B68;
  v12[5] = v11;
  v13 = self;
  sub_1CD0CC134((uint64_t)v7, (uint64_t)&unk_1EFA45B70, (uint64_t)v12);
  swift_release();
}

- (void)findAccessoriesNotOnWiFiWithCurrentWiFi:(HMFWiFiNetworkInfo *)a3 completionHandler:(id)a4
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  HMFWiFiNetworkInfo *v15;
  HMDHomeManager *v16;
  uint64_t v17;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED8C4388);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _Block_copy(a4);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a3;
  v11[3] = v10;
  v11[4] = self;
  v12 = sub_1CDAB85A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = &unk_1EFA45B30;
  v13[5] = v11;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = &unk_1EFA45AC8;
  v14[5] = v13;
  v15 = a3;
  v16 = self;
  sub_1CD0CC134((uint64_t)v9, (uint64_t)&unk_1EFA45AD0, (uint64_t)v14);
  swift_release();
}

- (void)registerForSignificantTimeChangeNotification
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Registering for Significant time change event.", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, v4, (CFNotificationCallback)significantTimeDidChangeNotification, CFSTR("SignificantTimeChangeNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

- (void)deregisterForSignificantTimeChangeNotification
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEBUG, "%{public}@De-Registering for Significant time change event.", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, v4, CFSTR("SignificantTimeChangeNotification"), 0);
}

- (void)_handleSignificantTimeChange
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

void __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  NSObject *v8;
  _QWORD block[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "homes");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v11;
    v5 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        objc_msgSend(v7, "workQueue");
        v8 = objc_claimAutoreleasedReturnValue();
        block[0] = v5;
        block[1] = 3221225472;
        block[2] = __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke_2;
        block[3] = &unk_1E89C2730;
        block[4] = v7;
        dispatch_async(v8, block);

      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v3);
  }

}

uint64_t __69__HMDHomeManager_SignificantTimeChange___handleSignificantTimeChange__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleSignificantTimeChange");
}

- (void)setLastUserAddRemoveTimestamp
{
  void *v3;
  void *v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager userDefaults](self, "userDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKey:", v4, CFSTR("hh1LastSharedUserAddRemoveTimestamp"));

  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating last shared user add/remove timestamp", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v5);

}

- (id)lastUserAddRemoveTimestamp
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  -[HMDHomeManager userDefaults](self, "userDefaults");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", CFSTR("hh1LastSharedUserAddRemoveTimestamp"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  return v5;
}

- (void)updatePowerAssertion
{
  void *v3;
  uint64_t v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager homes](self, "homes");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v8;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Setting network access required (power assertion) to %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager powerManager](v6, "powerManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setNetworkAccessRequired:", v4 != 0);

}

- (void)setNeedsOnboardingCompleteWitHomeUUID:(id)a3 accessoryUUID:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void (**v10)(id, _QWORD);
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  HMDHomeManager *v44;
  NSObject *v45;
  void *v46;
  id v47;
  id v48;
  _QWORD v49[5];
  void (**v50)(id, _QWORD);
  _QWORD v51[4];
  id v52;
  _QWORD v53[4];
  id v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  id v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = (void (**)(id, _QWORD))a5;
  -[HMDHomeManager homes](self, "homes");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = MEMORY[0x1E0C809B0];
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 3221225472;
  v53[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke;
  v53[3] = &unk_1E89BD690;
  v13 = v8;
  v54 = v13;
  objc_msgSend(v11, "na_firstObjectPassingTest:", v53);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(v14, "accessories");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v15, "copy");

    v51[0] = v12;
    v51[1] = 3221225472;
    v51[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_5;
    v51[3] = &unk_1E89B53F8;
    v17 = v9;
    v52 = v17;
    objc_msgSend(v16, "na_firstObjectPassingTest:", v51);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (v18)
    {
      v47 = v9;
      v20 = v18;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v21 = v20;
      else
        v21 = 0;
      v22 = v21;

      objc_msgSend(v22, "needsOnboarding");
      v23 = objc_claimAutoreleasedReturnValue();
      if (v23
        && (v24 = (void *)v23,
            objc_msgSend(v22, "needsOnboarding"),
            v25 = (void *)objc_claimAutoreleasedReturnValue(),
            v26 = objc_msgSend(v25, "integerValue"),
            v25,
            v24,
            v26 == 2))
      {
        v27 = (void *)MEMORY[0x1D17BA0A0]();
        v28 = self;
        HMFGetOSLogHandle();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v56 = v30;
          _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@Skipping needsOnboarding transaction since there's no change.", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v27);
        v10[2](v10, 0);
      }
      else
      {
        v35 = (void *)MEMORY[0x1D17BA0A0]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v56 = v38;
          _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Starting Updating needsOnboarding", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v35);
        objc_msgSend(v14, "backingStore");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "transaction:options:", CFSTR("Updating needsOnboarding"), v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v22, "transactionWithObjectChangeType:", 2);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "setNeedsOnboarding:", &unk_1E8B32D90);
        objc_msgSend(v41, "add:", v42);
        v49[0] = MEMORY[0x1E0C809B0];
        v49[1] = 3221225472;
        v49[2] = __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_9;
        v49[3] = &unk_1E89BFC88;
        v49[4] = v36;
        v50 = v10;
        objc_msgSend(v41, "run:", v49);

      }
      v9 = v47;
    }
    else
    {
      v43 = (void *)MEMORY[0x1D17BA0A0]();
      v44 = self;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v48 = v9;
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v56 = v46;
        v57 = 2112;
        v58 = v17;
        _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_ERROR, "%{public}@Accessory is not found. accessoryUUID: %@", buf, 0x16u);

        v9 = v48;
      }

      objc_autoreleasePoolPop(v43);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
      v22 = (id)objc_claimAutoreleasedReturnValue();
      ((void (**)(id, id))v10)[2](v10, v22);
    }

  }
  else
  {
    v31 = (void *)MEMORY[0x1D17BA0A0]();
    v32 = self;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v56 = v34;
      v57 = 2112;
      v58 = v13;
      _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v31);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, void *))v10)[2](v10, v16);
  }

}

- (void)applyOnboardingSelections:(id)a3 accessoryUUID:(id)a4 homeUUID:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138543618;
    v20 = v17;
    v21 = 2112;
    v22 = v10;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Apply onboarding selections to the controller manager: %@", (uint8_t *)&v19, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  -[HMDHomeManager compositeSettingsControllerManager](v15, "compositeSettingsControllerManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "applyOnboardingSelections:accessoryUUID:homeUUID:completion:", v10, v11, v12, v13);

}

- (id)accessoryWithHomeUUID:(id)a3 accessoryUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager homes](self, "homes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke;
  v22[3] = &unk_1E89BD690;
  v10 = v6;
  v23 = v10;
  objc_msgSend(v8, "na_firstObjectPassingTest:", v22);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v11, "accessories");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)objc_msgSend(v12, "copy");

    v20[0] = v9;
    v20[1] = 3221225472;
    v20[2] = __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke_11;
    v20[3] = &unk_1E89B53F8;
    v21 = v7;
    objc_msgSend(v13, "na_firstObjectPassingTest:", v20);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v18;
      v26 = 2112;
      v27 = v10;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Home is not found. homeUUID: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v14 = 0;
  }

  return v14;
}

- (id)hubAccessoriesWithHomeUUID:(id)a3 forSiriEndpointProfileMessageHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "hubAccessories");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v6;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to get hub accessories due to no home with uuid: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v10 = 0;
  }

  return v10;
}

- (void)enableUserListeningHistoryForHomeUUID:(id)a3 accessoryUUID:(id)a4 userUUID:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "enableUserListeningHistoryForAccessoryUUID:userUUID:", v9, v10);
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v16;
      v19 = 2112;
      v20 = v8;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to enable ULH due to no home with uuid: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

}

- (id)userUUIDForMessage:(id)a3 homeUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(v6, "userForHome:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543874;
        v21 = v13;
        v22 = 2112;
        v23 = v9;
        v24 = 2112;
        v25 = v6;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Getting user %@ from message %@", (uint8_t *)&v20, 0x20u);

      }
      objc_autoreleasePoolPop(v10);
      objc_msgSend(v9, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v14 = 0;
    }

  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v7;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to get user from message due to no home with uuid: %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v14 = 0;
  }

  return v14;
}

uint64_t __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __78__HMDHomeManager_SiriEndpointOnboarding__accessoryWithHomeUUID_accessoryUUID___block_invoke_11(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  if (v5)
  {
    objc_msgSend(v3, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

uint64_t __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_5(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;
  if (v5)
  {
    objc_msgSend(v3, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void __105__HMDHomeManager_SiriEndpointOnboarding__setNeedsOnboardingCompleteWitHomeUUID_accessoryUUID_completion___block_invoke_9(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_ERROR, "%{public}@Updating needsOnboarding reported error: %@", (uint8_t *)&v10, 0x16u);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543362;
    v11 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Updating needsOnboarding success", (uint8_t *)&v10, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

- (void)fetchSetupDiagnosticStateForAccessoryUUID:(id)a3 completion:(id)a4
{
  -[HMDHomeManager fetchSetupDiagnosticStateWithOptions:accessoryUUID:remoteMessageTimeout:remoteMessageRestriction:completion:](self, "fetchSetupDiagnosticStateWithOptions:accessoryUUID:remoteMessageTimeout:remoteMessageRestriction:completion:", 3, a3, 9, a4, 10.0);
}

- (void)fetchSetupDiagnosticStateWithOptions:(unint64_t)a3 accessoryUUID:(id)a4 remoteMessageTimeout:(double)a5 remoteMessageRestriction:(unint64_t)a6 completion:(id)a7
{
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  _QWORD v35[5];
  id v36;
  uint64_t v37;
  uint8_t buf[4];
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v12 = a4;
  v13 = a7;
  if (v12)
  {
    -[HMDHomeManager _mediaRouteIdentifierForAccessory:](self, "_mediaRouteIdentifierForAccessory:", v12);
    v14 = objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      v15 = (void *)v14;
      -[HMDHomeManager configuringStateController](self, "configuringStateController");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        -[HMDHomeManager accessoryWithUUID:](self, "accessoryWithUUID:", v12);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v18 = v17;
        else
          v18 = 0;
        v19 = v18;

        v37 = *MEMORY[0x1E0CB8EE8];
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v37, 1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v35[0] = MEMORY[0x1E0C809B0];
        v35[1] = 3221225472;
        v35[2] = __144__HMDHomeManager_ConfiguringState__fetchSetupDiagnosticStateWithOptions_accessoryUUID_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke;
        v35[3] = &unk_1E89AA0C0;
        v35[4] = self;
        v36 = v13;
        -[HMDHomeManager _handleAccessoryDiagnosticQueryWithOptions:accessory:accessoryUUID:mediaRouteID:additionalFetchKeys:remoteMessageTimeout:remoteMessageRestriction:completion:](self, "_handleAccessoryDiagnosticQueryWithOptions:accessory:accessoryUUID:mediaRouteID:additionalFetchKeys:remoteMessageTimeout:remoteMessageRestriction:completion:", a3, v19, v12, v15, v20, a6, a5, v35);

      }
      else
      {
        v30 = (void *)MEMORY[0x1D17BA0A0]();
        v31 = self;
        HMFGetOSLogHandle();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v39 = v33;
          _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as the controller is nil", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v30);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, _QWORD, void *))v13 + 2))(v13, 0, v34);

      }
    }
    else
    {
      v25 = (void *)MEMORY[0x1D17BA0A0]();
      v26 = self;
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v28;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as peer identifier is nil", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v25);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, void *))v13 + 2))(v13, 0, v29);

      v15 = 0;
    }
  }
  else
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v24;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Cannot query configuring state as accessory UUID is nil", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v13 + 2))(v13, 0, v15);
  }

}

- (void)_registerForConfiguringStateMessages
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *MEMORY[0x1E0CB8EC0];
    *(_DWORD *)buf = 138543618;
    v18 = v6;
    v19 = 2112;
    v20 = v7;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for %@ message for device setup configuring state query", buf, 0x16u);

  }
  else
  {
    v7 = *MEMORY[0x1E0CB8EC0];
  }

  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager messageDispatcher](v4, "messageDispatcher");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v16, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "registerForMessage:receiver:policies:selector:", v7, v4, v10, sel__handleDeviceSetupConfiguringStateQuery_);

  -[HMDHomeManager messageDispatcher](v4, "messageDispatcher");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *MEMORY[0x1E0CB8F58];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v13;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v15, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "registerForMessage:receiver:policies:selector:", v12, v4, v14, sel__handleAccessoryDiagnosticStateQuery_);

}

- (void)_handleDeviceSetupConfiguringStateQuery:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  const char *v17;
  void *v18;
  _QWORD v19[5];
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kAccessoryPeerIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v22 = v9;
    v23 = 2112;
    v24 = v4;
    v25 = 2112;
    v26 = v5;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Handle query message %@ with mediaRouteID %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  if (!v5)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = v7;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v16;
      v17 = "%{public}@mediaRouteIdentifier is nil";
LABEL_10:
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);

    }
LABEL_11:

    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v18);

    goto LABEL_12;
  }
  -[HMDHomeManager configuringStateController](v7, "configuringStateController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = v7;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v16;
      v17 = "%{public}@Configuring controller is nil";
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  -[HMDHomeManager configuringStateController](v7, "configuringStateController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke;
  v19[3] = &unk_1E89C19A8;
  v19[4] = v7;
  v20 = v4;
  objc_msgSend(v11, "queryConfiguringState:additionalKeys:withCompletion:", v12, MEMORY[0x1E0C9AA60], v19);

LABEL_12:
}

- (BOOL)_handleAccessoryDiagnosticStateQueryWithResponse:(id)a3 hasAdditionalRequest:(BOOL)a4 error:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  void (**v12)(id, void *, _QWORD);
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  BOOL v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v27;
  void *v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a5;
  v12 = (void (**)(id, void *, _QWORD))a6;
  if (!v11)
  {
    -[HMDHomeManager _diagnosticInfoFromRemoteResponse:](self, "_diagnosticInfoFromRemoteResponse:", v10);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v18 != 0;
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v18)
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v30 = v23;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Responding with diagnostic Info", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      v27 = *MEMORY[0x1E0CB8EF0];
      v28 = v18;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v12[2](v12, v24, 0);
    }
    else
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v30 = v25;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode the response", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      if (a4)
        goto LABEL_16;
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(id, void *, void *))v12)[2](v12, 0, v24);
    }

LABEL_16:
    goto LABEL_17;
  }
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v30 = v16;
    v31 = 2112;
    v32 = v11;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Query message failed, error: (%@): ", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  if (!a4)
    ((void (**)(id, void *, id))v12)[2](v12, 0, v11);
  v17 = 0;
LABEL_17:

  return v17;
}

- (void)_handleAccessoryDiagnosticStateQuery:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_numberForKey:", *MEMORY[0x1E0CB8EF8]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "integerValue");

  if (v7)
  {
    objc_msgSend(v4, "uuidForKey:", *MEMORY[0x1E0CB8ED8]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      -[HMDHomeManager accessoryWithUUID:](self, "accessoryWithUUID:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v10 = v9;
      else
        v10 = 0;
      v11 = v10;

      objc_msgSend(v11, "identifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (v12)
      {
        v26[0] = MEMORY[0x1E0C809B0];
        v26[1] = 3221225472;
        v26[2] = __73__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticStateQuery___block_invoke;
        v26[3] = &unk_1E89C1030;
        v27 = v4;
        -[HMDHomeManager _handleAccessoryDiagnosticQueryWithOptions:accessory:accessoryUUID:mediaRouteID:additionalFetchKeys:remoteMessageTimeout:remoteMessageRestriction:completion:](self, "_handleAccessoryDiagnosticQueryWithOptions:accessory:accessoryUUID:mediaRouteID:additionalFetchKeys:remoteMessageTimeout:remoteMessageRestriction:completion:", v7, v11, v8, v12, MEMORY[0x1E0C9AA60], 9, 10.0, v26);
        v13 = v27;
      }
      else
      {
        v22 = (void *)MEMORY[0x1D17BA0A0]();
        v23 = self;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v29 = v25;
          _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@mediaRouteIdentifier is nil", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v22);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v13);
      }

    }
    else
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v29 = v21;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Could not determine accessory UUID", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v11);
    }

  }
  else
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v17;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid fetch options", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);
  }

}

- (void)_handleAccessoryDiagnosticQueryWithOptions:(unint64_t)a3 accessory:(id)a4 accessoryUUID:(id)a5 mediaRouteID:(id)a6 additionalFetchKeys:(id)a7 remoteMessageTimeout:(double)a8 remoteMessageRestriction:(unint64_t)a9 completion:(id)a10
{
  char v14;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  const __CFString *v22;
  NSObject *v23;
  NSObject *v24;
  unint64_t v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  id v30;
  id v31;
  _QWORD v32[5];
  id v33;
  id v34;
  id v35;
  _QWORD *v36;
  _QWORD block[5];
  id v38;
  __CFString *v39;
  id v40;
  id v41;
  id v42;
  NSObject *v43;
  id v44;
  _QWORD *v45;
  unint64_t v46;
  double v47;
  char v48;
  _QWORD v49[3];
  char v50;

  v14 = a3;
  v16 = a4;
  v17 = a5;
  v31 = a6;
  v30 = a7;
  v18 = a10;
  objc_msgSend(v16, "deviceForDirectMessaging");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "home");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "currentUser");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = CFSTR("HMD.accessoryDiagnosticInfo.o");
  if (v21 && !objc_msgSend(v21, "isOwner"))
    v22 = CFSTR("HMD.accessoryDiagnosticInfo");
  v23 = dispatch_group_create();
  v24 = v23;
  v49[0] = 0;
  v49[1] = v49;
  v49[2] = 0x2020000000;
  v50 = 0;
  v25 = v14 & 2;
  if ((v14 & 1) != 0 && v19)
  {
    dispatch_group_enter(v23);
    -[HMDHomeManager workQueue](self, "workQueue");
    v26 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke;
    block[3] = &unk_1E89AA110;
    block[4] = self;
    v38 = v19;
    v39 = (__CFString *)v22;
    v40 = v17;
    v41 = v31;
    v47 = a8;
    v42 = v30;
    v45 = v49;
    v46 = a9;
    v48 = v25 >> 1;
    v44 = v18;
    v43 = v24;
    dispatch_async(v26, block);

    if (!v25)
      goto LABEL_11;
    goto LABEL_10;
  }
  if ((v14 & 2) != 0)
  {
LABEL_10:
    -[HMDHomeManager workQueue](self, "workQueue", a9);
    v28 = objc_claimAutoreleasedReturnValue();
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_2;
    v32[3] = &unk_1E89B62D8;
    v36 = v49;
    v32[4] = self;
    v33 = v17;
    v34 = v31;
    v35 = v18;
    dispatch_group_notify(v24, v28, v32);

    goto LABEL_11;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, void *))v18 + 2))(v18, 0, v27);

LABEL_11:
  _Block_object_dispose(v49, 8);

}

- (id)_diagnosticInfoFromRemoteResponse:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *MEMORY[0x1E0CB8BD8];
  objc_msgSend(v4, "hmf_dataForKey:", *MEMORY[0x1E0CB8BD8]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = v6;
  }
  else
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Response does not contain key %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }

  return v7;
}

- (id)_decodeDiagnosticInfoFromLocalResponse:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "hmf_dataForKey:", *MEMORY[0x1E0CB8EF0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBA208]), "initWithData:", v5);
  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *MEMORY[0x1E0CB8BD8];
      v13 = 138543618;
      v14 = v10;
      v15 = 2112;
      v16 = v11;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Response does not contain key %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v6 = 0;
  }

  return v6;
}

- (id)_mediaRouteIdentifierForAccessory:(id)a3
{
  void *v3;
  void *v4;
  void *v5;

  -[HMDHomeManager accessoryWithUUID:](self, "accessoryWithUUID:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke(uint64_t a1)
{
  HMDRemoteDeviceMessageDestination *v2;
  void *v3;
  HMDRemoteDeviceMessageDestination *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  __int128 v20;
  _QWORD v21[5];
  id v22;
  __int128 v23;
  char v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD v30[4];

  v30[3] = *MEMORY[0x1E0C80C00];
  v2 = [HMDRemoteDeviceMessageDestination alloc];
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v2, "initWithTarget:device:", v3, *(_QWORD *)(a1 + 40));

  v29[0] = CFSTR("uuid");
  v5 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 56), "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v30[0] = v6;
  v30[1] = v7;
  v9 = *MEMORY[0x1E0CB8EE0];
  v29[1] = CFSTR("identifier");
  v29[2] = v9;
  v30[2] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, v29, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessage secureMessageWithName:qualityOfService:destination:messagePayload:restriction:](HMDRemoteMessage, "secureMessageWithName:qualityOfService:destination:messagePayload:restriction:", v5, -1, v4, v10, *(_QWORD *)(a1 + 104));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v11, "mutableCopy");

  v13 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v12, "setTimeout:", *(double *)(a1 + 112)));
  v14 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138543618;
    v26 = v16;
    v27 = 2112;
    v28 = v17;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Performing accessory diagnostic fetch for accessory %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_18;
  v21[3] = &unk_1E89AA0E8;
  v21[4] = *(_QWORD *)(a1 + 32);
  v24 = *(_BYTE *)(a1 + 120);
  v20 = *(_OWORD *)(a1 + 88);
  v18 = (id)v20;
  v23 = v20;
  v22 = *(id *)(a1 + 80);
  objc_msgSend(v12, "setResponseHandler:", v21);
  objc_msgSend(*(id *)(a1 + 32), "messageDispatcher");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "sendMessage:", v12);

}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v12 = v5;
      v13 = 2112;
      v14 = v6;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Performing accessory diagnostic fetch using rapport %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 32), "configuringStateController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_20;
    v9[3] = &unk_1E89AA0C0;
    v9[4] = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 48);
    v10 = *(id *)(a1 + 56);
    objc_msgSend(v7, "queryConfiguringState:additionalKeys:withCompletion:", v8, MEMORY[0x1E0C9AA60], v9);

  }
}

uint64_t __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleAccessoryDiagnosticStateQueryWithResponse:hasAdditionalRequest:error:completion:", a2, 0, a3, *(_QWORD *)(a1 + 40));
}

void __193__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticQueryWithOptions_accessory_accessoryUUID_mediaRouteID_additionalFetchKeys_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke_18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "_handleAccessoryDiagnosticStateQueryWithResponse:hasAdditionalRequest:error:completion:", a3, *(unsigned __int8 *)(a1 + 64), a2, *(_QWORD *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t __73__HMDHomeManager_ConfiguringState___handleAccessoryDiagnosticStateQuery___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;

  v3 = *(void **)(a1 + 32);
  if (a3)
    return objc_msgSend(v3, "respondWithError:");
  else
    return objc_msgSend(v3, "respondWithPayload:", a2);
}

void __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke_2;
  v12[3] = &unk_1E89C07B8;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v15 = v9;
  v16 = v5;
  v10 = v5;
  v11 = v6;
  dispatch_async(v7, v12);

}

void __76__HMDHomeManager_ConfiguringState___handleDeviceSetupConfiguringStateQuery___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(void **)(a1 + 32);
      v17 = 138543618;
      v18 = v5;
      v19 = 2112;
      v20 = v6;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_ERROR, "%{public}@Query message failed, error: (%@): ", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 48), "respondWithError:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_diagnosticInfoFromRemoteResponse:", *(_QWORD *)(a1 + 56));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAppleMediaAccessoryDiagnosticInfoController diagnosticInfoDescriptionWithData:](HMDAppleMediaAccessoryDiagnosticInfoController, "diagnosticInfoDescriptionWithData:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543618;
        v18 = v13;
        v19 = 2112;
        v20 = v8;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Query message sent, response: %@", (uint8_t *)&v17, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(*(id *)(a1 + 48), "respondWithPayload:", v8);
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543362;
        v18 = v14;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to decode the response", (uint8_t *)&v17, 0xCu);

      }
      objc_autoreleasePoolPop(v9);
      v15 = *(void **)(a1 + 48);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "respondWithError:", v16);

    }
  }
}

void __144__HMDHomeManager_ConfiguringState__fetchSetupDiagnosticStateWithOptions_accessoryUUID_remoteMessageTimeout_remoteMessageRestriction_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v10;
      v19 = 2112;
      v20 = v6;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Query configuring state failed with error: (%@): ", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_decodeDiagnosticInfoFromLocalResponse:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v13 = (void *)MEMORY[0x1D17BA0A0](v12);
    v14 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v16;
      v19 = 2112;
      v20 = v11;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Query message sent, response: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v13);

  }
}

- (id)_legacyContainer
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc(MEMORY[0x1E0C94C40]);
  v3 = (void *)objc_msgSend(v2, "initWithContainerIdentifier:environment:", CFSTR("com.apple.willow.config"), cloudKitContainerEnvironment);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C94C28]), "initWithContainerID:", v3);

  return v4;
}

- (id)_legacyHomeZoneIDFromHomeUUID:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  HMDHomeManager *v10;
  SEL v11;
  id v12;

  v3 = a3;
  if (v3)
  {
    v4 = v3;
    +[HMDHome zoneIDFromHomeUUID:](HMDHome, "zoneIDFromHomeUUID:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_alloc(MEMORY[0x1E0C95098]);
    objc_msgSend(v5, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v6, "initWithZoneName:ownerName:", v7, *MEMORY[0x1E0C94730]);

    return v8;
  }
  else
  {
    v10 = (HMDHomeManager *)_HMFPreconditionFailure();
    return -[HMDHomeManager _legacyHomeAcceptedZoneIDFromHomeUUID:](v10, v11, v12);
  }
}

- (id)_legacyHomeAcceptedZoneIDFromHomeUUID:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id result;
  HMDHomeManager *v12;
  SEL v13;
  id v14;
  id v15;

  v3 = a3;
  if (v3)
  {
    v4 = v3;
    +[HMDHome zoneIDFromHomeUUID:](HMDHome, "zoneIDFromHomeUUID:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v5, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR("%@_accepted"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = objc_alloc(MEMORY[0x1E0C95098]);
    v10 = (void *)objc_msgSend(v9, "initWithZoneName:ownerName:", v8, *MEMORY[0x1E0C94730]);

    return v10;
  }
  else
  {
    v12 = (HMDHomeManager *)_HMFPreconditionFailure();
    -[HMDHomeManager _queryLegacyHomeAndAcceptedZoneExists:completion:](v12, v13, v14, v15);
  }
  return result;
}

- (void)_queryLegacyHomeAndAcceptedZoneExists:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void (**v29)(_QWORD, _QWORD, _QWORD);
  void *v30;
  void *v31;
  _QWORD v32[5];
  id v33;
  id v34;
  id v35;
  void (**v36)(_QWORD, _QWORD, _QWORD);
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  _QWORD v45[4];

  v45[2] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (!v6)
    _HMFPreconditionFailure();
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))v7;
  -[HMDHomeManager _legacyContainer](self, "_legacyContainer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "privateCloudDatabase");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _legacyHomeZoneIDFromHomeUUID:](self, "_legacyHomeZoneIDFromHomeUUID:", v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _legacyHomeAcceptedZoneIDFromHomeUUID:](self, "_legacyHomeAcceptedZoneIDFromHomeUUID:", v6);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  if (v11 && v12)
  {
    v31 = v9;
    v14 = objc_alloc(MEMORY[0x1E0C94E08]);
    v45[0] = v11;
    v45[1] = v13;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v45, 2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(v14, "initWithRecordZoneIDs:", v15);

    v30 = v10;
    objc_msgSend(v16, "setDatabase:", v10);
    objc_msgSend(v16, "operationID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = v8;
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "zoneName");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v38 = v21;
      v39 = 2112;
      v40 = v6;
      v41 = 2112;
      v42 = v22;
      v43 = 2112;
      v44 = v17;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Querying the legacy container for existing home/zone (%@/%@) with operation ID %@", buf, 0x2Au);

      v8 = v29;
    }

    objc_autoreleasePoolPop(v18);
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = __83__HMDHomeManager_LegacyHomeZone___queryLegacyHomeAndAcceptedZoneExists_completion___block_invoke;
    v32[3] = &unk_1E89AC090;
    v32[4] = v19;
    v33 = v17;
    v34 = v11;
    v35 = v13;
    v36 = v8;
    v23 = v17;
    objc_msgSend(v16, "setFetchRecordZonesCompletionBlock:", v32);
    v10 = v30;
    objc_msgSend(v30, "operationQueue");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "addOperation:", v16);

    v9 = v31;
  }
  else
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v28;
      v39 = 2112;
      v40 = v6;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Failed to determine legacy zoneID for home %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v25);
    v8[2](v8, 0, 0);
  }

}

- (void)_maybeCreateLegacyHomeAcceptedZone:(id)a3
{
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  int v8;
  _QWORD v9[5];
  id v10;

  v4 = a3;
  if (v4)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke;
    v9[3] = &unk_1E89AC0E0;
    v9[4] = self;
    v10 = v4;
    v5 = v4;
    -[HMDHomeManager _queryLegacyHomeAndAcceptedZoneExists:completion:](self, "_queryLegacyHomeAndAcceptedZoneExists:completion:", v5, v9);

  }
  else
  {
    v6 = _HMFPreconditionFailure();
    __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke(v6, v7, v8);
  }
}

void __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke(uint64_t a1, char a2, int a3)
{
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[5];
  id v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  _QWORD v47[2];

  v47[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v40 = v7;
      v41 = 2112;
      v42 = v10;
      v9 = "%{public}@Skip creating home accepted zone since no legacy home %@ was found";
      goto LABEL_7;
    }
LABEL_8:

    objc_autoreleasePoolPop(v4);
    return;
  }
  if (a3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v40 = v7;
      v41 = 2112;
      v42 = v8;
      v9 = "%{public}@Skip creating home accepted zone for home %@ since it already exists";
LABEL_7:
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, v9, buf, 0x16u);

      goto LABEL_8;
    }
    goto LABEL_8;
  }
  objc_msgSend(*(id *)(a1 + 32), "_legacyContainer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "privateCloudDatabase");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_alloc(MEMORY[0x1E0C95088]);
  objc_msgSend(*(id *)(a1 + 32), "_legacyHomeAcceptedZoneIDFromHomeUUID:", *(_QWORD *)(a1 + 40));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v13, "initWithZoneID:", v14);

  if (v15)
  {
    v16 = objc_alloc(MEMORY[0x1E0C94EF0]);
    v47[0] = v15;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v47, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(v16, "initWithRecordZonesToSave:recordZoneIDsToDelete:", v17, 0);

    v36 = v12;
    objc_msgSend(v18, "setDatabase:", v12);
    objc_msgSend(v18, "operationID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    v21 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v35 = v11;
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *(_QWORD *)(a1 + 40);
      objc_msgSend(v15, "zoneID");
      v34 = v20;
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "zoneName");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v40 = v23;
      v41 = 2112;
      v42 = v24;
      v43 = 2112;
      v44 = v26;
      v45 = 2112;
      v46 = v19;
      _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Saving legacy home accepted zone for home/zoneAccepted (%@/%@) with operation ID %@", buf, 0x2Au);

      v20 = v34;
      v11 = v35;
    }

    objc_autoreleasePoolPop(v20);
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3221225472;
    v37[2] = __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke_12;
    v37[3] = &unk_1E89AC0B8;
    v37[4] = *(_QWORD *)(a1 + 32);
    v38 = v19;
    v27 = v19;
    objc_msgSend(v18, "setModifyRecordZonesCompletionBlock:", v37);
    v12 = v36;
    objc_msgSend(v36, "operationQueue");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "addOperation:", v18);

  }
  else
  {
    v29 = (void *)MEMORY[0x1D17BA0A0]();
    v30 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v40 = v32;
      v41 = 2112;
      v42 = v33;
      _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@Failed to determine legacy accepted zoneID for home %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v29);
  }

}

void __69__HMDHomeManager_LegacyHomeZone___maybeCreateLegacyHomeAcceptedZone___block_invoke_12(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 40);
    v15 = 138543874;
    v16 = v13;
    v17 = 2112;
    v18 = v14;
    v19 = 2112;
    v20 = v9;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Completed saving legacy home accepted zone with operation ID %@ and error %@", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v10);

}

void __83__HMDHomeManager_LegacyHomeZone___queryLegacyHomeAndAcceptedZoneExists_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void (*v18)(void);
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543874;
    v25 = v10;
    v26 = 2112;
    v27 = v11;
    v28 = 2112;
    v29 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Completed fetching record zone with operation ID %@ and error %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  if (v5)
  {
    objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48));

    objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 56));
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v23 = v6;
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v25 = v15;
      v26 = 2112;
      v27 = v16;
      v28 = 2112;
      v29 = v17;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Legacy home zone exists = %@ and legacy home accepted zone = %@", buf, 0x20u);

      v6 = v23;
    }

    objc_autoreleasePoolPop(v12);
    v18 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
  }
  else
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v22;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Failed to determine legacy zones returning that neither home zone or home accepted zone exist", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
    v18 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
  }
  v18();

}

- (void)configureForWalletKey
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 131077);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *MEMORY[0x1E0CB8E80];
  v11[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "registerForMessage:receiver:policies:selector:", v5, self, v6, sel_handleAutoAddWalletKeySupressionAssertionAcquireMessage_);

  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *MEMORY[0x1E0CB8E88];
  v10 = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v10, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "registerForMessage:receiver:policies:selector:", v8, self, v9, sel_handleAutoAddWalletKeySupressionAssertionReleaseMessage_);

}

- (void)handleAutoAddWalletKeySupressionAssertionAcquireMessage:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  os_unfair_lock_s *p_lock;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  __int16 v32;
  id v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543874;
    v31 = v9;
    v32 = 2112;
    v33 = v4;
    v34 = 2112;
    v35 = v10;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling auto add wallet key suppression assertion acquire message: %@, payload: %@", (uint8_t *)&v30, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(v4, "transport");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  if (v13)
  {
    objc_msgSend(v4, "uuidForKey:", *MEMORY[0x1E0CB9010]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      p_lock = &v7->_lock;
      os_unfair_lock_lock_with_options();
      -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](v7, "homeUUIDsByWalletKeyAssertionXPCConnection");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "objectForKey:", v13);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v17)
      {
        objc_msgSend(MEMORY[0x1E0C99E20], "set");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](v7, "homeUUIDsByWalletKeyAssertionXPCConnection");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKey:", v17, v13);

      }
      objc_msgSend(v17, "addObject:", v14);

      os_unfair_lock_unlock(p_lock);
      objc_msgSend(v4, "respondWithSuccess");
    }
    else
    {
      v24 = (void *)MEMORY[0x1D17BA0A0]();
      v25 = v7;
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "messagePayload");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543618;
        v31 = v27;
        v32 = 2112;
        v33 = v28;
        _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_ERROR, "%{public}@Missing home uuid parameter in message payload: %@", (uint8_t *)&v30, 0x16u);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v29);

      v14 = 0;
    }
  }
  else
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = v7;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "transport");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = 138543618;
      v31 = v22;
      v32 = 2112;
      v33 = v23;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Received auto add wallet key suppression assertion acquire message from unknown transport: %@", (uint8_t *)&v30, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);
  }

}

- (void)handleAutoAddWalletKeySupressionAssertionReleaseMessage:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  char v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHomeManager *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  __int16 v44;
  id v45;
  __int16 v46;
  id v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = 138543874;
    v43 = v9;
    v44 = 2112;
    v45 = v4;
    v46 = 2112;
    v47 = v10;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Handling auto add wallet key suppression assertion release message: %@, payload: %@", (uint8_t *)&v42, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(v4, "transport");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  if (v13)
  {
    objc_msgSend(v4, "uuidForKey:", *MEMORY[0x1E0CB9010]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      os_unfair_lock_lock_with_options();
      -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](v7, "homeUUIDsByWalletKeyAssertionXPCConnection");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectForKey:", v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v17 = objc_msgSend(v16, "containsObject:", v14);
      v18 = v17;
      if (v17)
        objc_msgSend(v16, "removeObject:", v14);
      -[HMDHomeManager homeUUIDsWithAutoAddWalletKeySuppressedSync](v7, "homeUUIDsWithAutoAddWalletKeySuppressedSync");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "containsObject:", v14);

      os_unfair_lock_unlock(&v7->_lock);
      if ((v18 & 1) != 0)
      {
        v21 = objc_msgSend(v4, "respondWithSuccess");
        if (v20)
        {
          v22 = (void *)MEMORY[0x1D17BA0A0](v21);
          v23 = v7;
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v42 = 138543618;
            v43 = v25;
            v44 = 2112;
            v45 = v14;
            _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Not auto adding wallet key for home with uuid: %@ after assertion was released because of some other pending assertion", (uint8_t *)&v42, 0x16u);

          }
          objc_autoreleasePoolPop(v22);
        }
        else
        {
          -[HMDHomeManager addWalletKeyWithHomeUUID:reason:](v7, "addWalletKeyWithHomeUUID:reason:", v14, CFSTR("assertion released"));
        }
      }
      else
      {
        v37 = (void *)MEMORY[0x1D17BA0A0]();
        v38 = v7;
        HMFGetOSLogHandle();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = 138543874;
          v43 = v40;
          v44 = 2112;
          v45 = v14;
          v46 = 2112;
          v47 = v13;
          _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Could not find any any assertion for home with uuid: %@ for connection: %@", (uint8_t *)&v42, 0x20u);

        }
        objc_autoreleasePoolPop(v37);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithError:", v41);

      }
    }
    else
    {
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = v7;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "messagePayload");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = 138543618;
        v43 = v34;
        v44 = 2112;
        v45 = v35;
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_ERROR, "%{public}@Missing home uuid parameter in message payload: %@", (uint8_t *)&v42, 0x16u);

      }
      objc_autoreleasePoolPop(v31);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v36);

      v14 = 0;
    }
  }
  else
  {
    v26 = (void *)MEMORY[0x1D17BA0A0]();
    v27 = v7;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "transport");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138543618;
      v43 = v29;
      v44 = 2112;
      v45 = v30;
      _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Received auto add wallet key suppression assertion release message from unknown transport: %@", (uint8_t *)&v42, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);
  }

}

- (void)addWalletKeyWithHomeUUID:(id)a3 reason:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  id v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(MEMORY[0x1E0D28580], "internalOnlyInitializer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "UUID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v25 = v13;
      v26 = 2112;
      v27 = v14;
      v28 = 2112;
      v29 = v6;
      v30 = 2112;
      v31 = v7;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Auto adding for wallet key for home with uuid: %@ reason: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v8, "workQueue");
    v15 = objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __58__HMDHomeManager_Wallet__addWalletKeyWithHomeUUID_reason___block_invoke;
    v21[3] = &unk_1E89C2328;
    v22 = v8;
    v23 = v9;
    v16 = v9;
    dispatch_async(v15, v21);

  }
  else
  {
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v25 = v20;
      v26 = 2112;
      v27 = v6;
      v28 = 2112;
      v29 = v7;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Not auto adding wallet key for home with uuid: %@ reason: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v17);
  }

}

- (id)homeUUIDsWithAutoAddWalletKeySuppressedSync
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner(&self->_lock);
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](self, "homeUUIDsByWalletKeyAssertionXPCConnection", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v8);
        -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](self, "homeUUIDsByWalletKeyAssertionXPCConnection");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "objectForKey:", v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "allObjects");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObjectsFromArray:", v12);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  v13 = (void *)objc_msgSend(v3, "copy");
  return v13;
}

- (void)handleWalletKeyAssertionsXPCConnectionRemoved:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t v25[128];
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v8;
    v28 = 2112;
    v29 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Handling wallet key assertion when xpc connection was removed: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  os_unfair_lock_lock_with_options();
  -[HMDHomeManager homeUUIDsWithAutoAddWalletKeySuppressedSync](v6, "homeUUIDsWithAutoAddWalletKeySuppressedSync");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "mutableCopy");

  -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection](v6, "homeUUIDsByWalletKeyAssertionXPCConnection");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "removeObjectForKey:", v4);

  -[HMDHomeManager homeUUIDsWithAutoAddWalletKeySuppressedSync](v6, "homeUUIDsWithAutoAddWalletKeySuppressedSync");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "minusSet:", v12);

  os_unfair_lock_unlock(&v6->_lock);
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = v6;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v16;
    v28 = 2112;
    v29 = v10;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Auto adding wallet key for homes with uuids: %@, when xpc connection was removed", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v17 = v10;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v22;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v22 != v19)
          objc_enumerationMutation(v17);
        -[HMDHomeManager addWalletKeyWithHomeUUID:reason:](v14, "addWalletKeyWithHomeUUID:reason:", *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v20++), CFSTR("connection removed"), (_QWORD)v21);
      }
      while (v18 != v20);
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v18);
  }

}

- (NSSet)homeUUIDsWithAutoAddWalletKeySuppressed
{
  os_unfair_lock_s *p_lock;
  void *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  -[HMDHomeManager homeUUIDsWithAutoAddWalletKeySuppressedSync](self, "homeUUIDsWithAutoAddWalletKeySuppressedSync");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_unlock(p_lock);
  return (NSSet *)v4;
}

- (void)removeHomeWalletKeysExcludingSerialNumbers:(id)a3 flow:(id)a4
{
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  HMDWalletPassLibrary *v11;
  void *v12;
  HMDWalletPassLibrary *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  char v27;
  void *v28;
  HMDHomeManager *v29;
  HMDHomeManager *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  __int128 v36;
  HMDWalletPassLibrary *v37;
  id obj;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t v45[128];
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  id v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v40 = a3;
  v39 = a4;
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "UUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v47 = v9;
    v48 = 2112;
    v49 = v10;
    v50 = 2112;
    v51 = v40;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Removing home wallet keys with serial number not in: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  v11 = [HMDWalletPassLibrary alloc];
  -[HMDHomeManager workQueue](v7, "workQueue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDWalletPassLibrary initWithWorkQueue:](v11, "initWithWorkQueue:", v12);

  v37 = v13;
  -[HMDWalletPassLibrary walletKeys](v13, "walletKeys");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)MEMORY[0x1D17BA0A0]();
  v16 = v7;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "UUID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v47 = v18;
    v48 = 2112;
    v49 = v19;
    v50 = 2112;
    v51 = v14;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Existing home keys in wallet: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v15);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  obj = v14;
  v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
  if (v20)
  {
    v22 = v20;
    v23 = *(_QWORD *)v42;
    *(_QWORD *)&v21 = 138543874;
    v36 = v21;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v42 != v23)
          objc_enumerationMutation(obj);
        v25 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
        objc_msgSend(v25, "serialNumber", v36);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v40, "containsObject:", v26);

        if ((v27 & 1) == 0)
        {
          v28 = (void *)MEMORY[0x1D17BA0A0]();
          v29 = v16;
          v30 = v16;
          HMFGetOSLogHandle();
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "UUID");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v36;
            v47 = v32;
            v48 = 2112;
            v49 = v33;
            v50 = 2112;
            v51 = v25;
            _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Removing wallet key that doesn't belong to any home: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v28);
          objc_msgSend(v25, "typeIdentifier");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "serialNumber");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDWalletPassLibrary removePassWithTypeIdentifier:serialNumber:flow:](v37, "removePassWithTypeIdentifier:serialNumber:flow:", v34, v35, v39);

          v16 = v29;
        }
      }
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16);
    }
    while (v22);
  }

}

- (void)autoAddWalletKeysOncePerDeviceSetup
{
  HMDWalletPassLibrary *v3;
  void *v4;
  HMDWalletPassLibrary *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  NSObject *v21;
  void *v22;
  id obj;
  HMDHomeWalletDataSource *v24;
  _QWORD block[5];
  HMDHomeWalletDataSource *v26;
  HMDHomeManager *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t v33[128];
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v24 = objc_alloc_init(HMDHomeWalletDataSource);
  -[HMDHomeWalletDataSource numberValueFromNoBackupStoreWithKey:](v24, "numberValueFromNoBackupStoreWithKey:", CFSTR("HMDHomeManagerRecordInitialWalletKeysOncePerDevice"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v22, "BOOLValue") & 1) == 0)
  {
    v3 = [HMDWalletPassLibrary alloc];
    -[HMDHomeManager workQueue](self, "workQueue");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[HMDWalletPassLibrary initWithWorkQueue:](v3, "initWithWorkQueue:", v4);

    +[HMDHomeKeyDataRecorder sharedRecorder](HMDHomeKeyDataRecorder, "sharedRecorder");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDWalletPassLibrary walletKeys](v5, "walletKeys");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "allObjects");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "recordInitialWalletKeys:", v8);

    -[HMDHomeWalletDataSource persistNumberValueToNoBackupStore:withKey:](v24, "persistNumberValueToNoBackupStore:withKey:", MEMORY[0x1E0C9AAB0], CFSTR("HMDHomeManagerRecordInitialWalletKeysOncePerDevice"));
  }
  objc_msgSend(MEMORY[0x1E0D28580], "internalOnlyInitializer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v35 = v13;
    v36 = 2112;
    v37 = v14;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Auto add wallet keys once per device setup", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  -[HMDHomeManager homes](v11, "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v30;
    v18 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v30 != v17)
          objc_enumerationMutation(obj);
        v20 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        objc_msgSend(v20, "workQueue");
        v21 = objc_claimAutoreleasedReturnValue();
        block[0] = v18;
        block[1] = 3221225472;
        block[2] = __61__HMDHomeManager_Wallet__autoAddWalletKeysOncePerDeviceSetup__block_invoke;
        block[3] = &unk_1E89C07B8;
        block[4] = v20;
        v26 = v24;
        v27 = v11;
        v28 = v9;
        dispatch_async(v21, block);

      }
      v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v16);
  }

}

void __61__HMDHomeManager_Wallet__autoAddWalletKeysOncePerDeviceSetup__block_invoke(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  int v14;
  void *v15;
  id v16;
  NSObject *v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0CB3A28];
  objc_msgSend(a1[4], "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("D4F5EA54-226C-44B6-B7CD-45DA59BE5B1F"), "dataUsingEncoding:", 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_UUIDWithNamespace:data:", v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(a1[5], "numberValueFromNoBackupStoreWithKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = a1[6];
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[7], "UUID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = a1[4];
    v26 = 138544130;
    v27 = v11;
    v28 = 2112;
    v29 = v12;
    v30 = 2112;
    v31 = v13;
    v32 = 2112;
    v33 = v6;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Auto add wallet key preference key for home %@:%@", (uint8_t *)&v26, 0x2Au);

  }
  objc_autoreleasePoolPop(v8);
  v14 = objc_msgSend(v7, "BOOLValue");
  v15 = (void *)MEMORY[0x1D17BA0A0]();
  v16 = a1[6];
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
  if (v14)
  {
    if (v18)
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[7], "UUID");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = a1[4];
      v26 = 138543874;
      v27 = v19;
      v28 = 2112;
      v29 = v20;
      v30 = 2112;
      v31 = v21;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Already auto added wallet key once per device setup for home: %@", (uint8_t *)&v26, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
  }
  else
  {
    if (v18)
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[7], "UUID");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = a1[4];
      v26 = 138543874;
      v27 = v22;
      v28 = 2112;
      v29 = v23;
      v30 = 2112;
      v31 = v24;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@[Flow: %@] Auto adding wallet key once per device setup for home: %@", (uint8_t *)&v26, 0x20u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(a1[4], "walletKeyManager");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "autoAddWalletKeyWithFlow:", a1[7]);

    objc_msgSend(a1[5], "persistNumberValueToNoBackupStore:withKey:", MEMORY[0x1E0C9AAB0], v6);
  }

}

void __58__HMDHomeManager_Wallet__addWalletKeyWithHomeUUID_reason___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "walletKeyManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "autoAddWalletKeyWithFlow:", *(_QWORD *)(a1 + 40));

}

- (void)prepareForDiagnosticExtension:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  task_read_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  mach_port_t corpse_task_port;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v21 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Triggering memory exception.", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = *MEMORY[0x1E0C83DA0];
  corpse_task_port = 0;
  if (task_generate_corpse(v9, &corpse_task_port))
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v12;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Failed to generate a corpse task for memory exception reporting.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v13);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D28688], "processInfo");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "executableURL");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "path");
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend(v16, "UTF8String");
    dispatch_get_global_queue(-32768, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v4;
    ReportMemoryExceptionFromTask();

    v13 = v18;
  }

}

void __69__HMDHomeManager_DiagnosticExtension__prepareForDiagnosticExtension___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, v3));
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543618;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Memory exception reporting completed with error: %@", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(a1 + 40));

}

- (id)__generateAssistantTeamIdentifier
{
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hm_convertToData");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager _saveAssistantHashingData:](self, "_saveAssistantHashingData:", v4);
  -[HMDHomeManager setAssistantIdentifierChanged:](self, "setAssistantIdentifierChanged:", 1);
  return v4;
}

- (id)_getAssistantHashingData
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;

  v3 = (id)CFPreferencesCopyAppValue(CFSTR("kAssistantTeamIdentifier"), CFSTR("com.apple.homed.notbackedup"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  if (v5)
  {
    v6 = v5;
    v7 = v3;
  }
  else
  {
    -[HMDHomeManager __generateAssistantTeamIdentifier](self, "__generateAssistantTeamIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v7;
}

- (void)_saveAssistantHashingData:(id)a3
{
  id v4;

  v4 = a3;
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](self, "_setHomeConfigurationKey:value:applicationIdentifier:", CFSTR("kAssistantTeamIdentifier"), v4, CFSTR("com.apple.homed.notbackedup"));
  -[HMDHomeManager _setAssistantHashingData:](self, "_setAssistantHashingData:", v4);

}

- (void)_setAssistantHashingData:(id)a3
{
  objc_msgSend(MEMORY[0x1E0CB3A28], "hm_setAssistantIdentifierSalt:", a3);
}

- (void)_setHomekitAssistantConfigurationVersion:(unint64_t)a3
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", CFSTR("kAssistantConfigurationVersionKey"), v4);

}

- (void)_setHomekitAssistantNumEntities:(unint64_t)a3
{
  -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", CFSTR("kAssistantConfigurationNumberOfEntitiesKey"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3));
}

- (void)__setLastSyncedAssistantConfigurationVersion:(unint64_t)a3
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", CFSTR("kLastSyncedAssistantConfigurationVersionKey"), v4);

}

- (void)_incrementAssistantGenerationCounter
{
  NSObject *v3;

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHomeManager setAssistantGenerationCounter:](self, "setAssistantGenerationCounter:", -[HMDHomeManager assistantGenerationCounter](self, "assistantGenerationCounter") + 1);
  -[HMDHomeManager _setHomekitAssistantConfigurationVersion:](self, "_setHomekitAssistantConfigurationVersion:", -[HMDHomeManager assistantGenerationCounter](self, "assistantGenerationCounter"));
}

- (void)_generateAssistantSyncDataAndIncrementVersion:(BOOL)a3 requestSync:(BOOL)a4 urgent:(BOOL)a5 completion:(id)a6
{
  _BOOL4 v8;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  BOOL v25;
  BOOL v26;
  id location;

  v8 = a3;
  v10 = a6;
  -[HMDHomeManager workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v11);

  if (v8)
    -[HMDHomeManager _incrementAssistantGenerationCounter](self, "_incrementAssistantGenerationCounter");
  -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager siriSyncNotificationReasons](self, "siriSyncNotificationReasons");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "componentsJoinedByString:", CFSTR(","));
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(&location, self);
  -[HMDHomeManager gatherer](self, "gatherer");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __105__HMDHomeManager_Assistant___generateAssistantSyncDataAndIncrementVersion_requestSync_urgent_completion___block_invoke;
  v20[3] = &unk_1E89B4A20;
  objc_copyWeak(&v24, &location);
  v17 = v13;
  v21 = v17;
  v25 = a4;
  v18 = v15;
  v22 = v18;
  v26 = a5;
  v19 = v10;
  v23 = v19;
  objc_msgSend(v16, "gatherHomeKitObjectsWithCompletion:", v20);

  objc_destroyWeak(&v24);
  objc_destroyWeak(&location);

}

- (void)_assistantSyncDataChanged:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2((dispatch_queue_t)v5);

  -[HMDHomeManager _setAssistantSyncRequest:](self, "_setAssistantSyncRequest:", v4);
  -[HMDHomeManager debounceRegenerateAssistantSyncDataTimer](self, "debounceRegenerateAssistantSyncDataTimer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v5) = objc_msgSend(v6, "isRunning");

  if ((v5 & 1) == 0)
  {
    -[HMDHomeManager debounceRegenerateAssistantSyncDataTimer](self, "debounceRegenerateAssistantSyncDataTimer");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "resume");

  }
}

- (void)_setAssistantSyncRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v9;
    v18 = 2112;
    v19 = v4;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Assistant sync data re-generation requested due to reason: %@", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (!-[HMDHomeManager siriSyncNotificationTime](v7, "siriSyncNotificationTime"))
  {
    mach_absolute_time();
    -[HMDHomeManager setSiriSyncNotificationTime:](v7, "setSiriSyncNotificationTime:", UpTicksToMilliseconds());
  }
  if (v4)
  {
    -[HMDHomeManager siriSyncNotificationReasons](v7, "siriSyncNotificationReasons");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "addObject:", v4);

    if (objc_msgSend(v4, "isEqual:", CFSTR("SyncStateCompleted")))
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = v7;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = -[HMDHomeManager assistantGenerationCounter](v12, "assistantGenerationCounter");
        v16 = 138543874;
        v17 = v14;
        v18 = 2112;
        v19 = v4;
        v20 = 2048;
        v21 = v15;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Posting an urgent sync notification after %@: %tu", (uint8_t *)&v16, 0x20u);

      }
      objc_autoreleasePoolPop(v11);
      -[HMDHomeManager _generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:](v12, "_generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:", 1, 1, 1, 0);
    }
  }

}

- (void)_resetSiriSyncNotification
{
  NSObject *v3;
  id v4;

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHomeManager setSiriSyncNotificationTime:](self, "setSiriSyncNotificationTime:", 0);
  -[HMDHomeManager siriSyncNotificationReasons](self, "siriSyncNotificationReasons");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeAllObjects");

}

- (void)writeAssistantCurrentHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(v4, "urlString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "URLWithString:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager currentHomeUUID](v9, "currentHomeUUID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138544130;
    v16 = v11;
    v17 = 2112;
    v18 = v7;
    v19 = 2112;
    v20 = v12;
    v21 = 2112;
    v22 = v14;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Notifying assistant that current home updated to: %@ (%@/%@)", (uint8_t *)&v15, 0x2Au);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](v9, "_setHomeConfigurationKey:value:applicationIdentifier:", *MEMORY[0x1E0CBAAA8], objc_msgSend(v7, "absoluteString"), CFSTR("com.apple.homed.notbackedup"));
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](v9, "_setHomeConfigurationKey:value:applicationIdentifier:", *MEMORY[0x1E0CBAAB0], objc_msgSend(v4, "name"), CFSTR("com.apple.homed.notbackedup"));
  notify_post("com.apple.homed.current-home.changed");

}

- (void)_handleAssistantSyncDataRequest:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  __CFString *v11;
  void *v12;
  id v13;
  void (**v14)(_QWORD);
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD aBlock[5];
  id v25;
  id v26;
  id v27;
  uint8_t v28[128];
  uint8_t buf[4];
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  if (-[HMDHomeManager isDataSyncInProgressWithMessage:](self, "isDataSyncInProgressWithMessage:", v4))
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v30 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Data sync in progress - do not sync data to Siri servers", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v4, "respondWithPayload:", 0);
  }
  else
  {
    objc_msgSend(v4, "applicationBundleIdentifier");
    v10 = objc_claimAutoreleasedReturnValue();
    if (v10)
      v11 = (__CFString *)v10;
    else
      v11 = CFSTR("com.apple.homeutil");
    if ((hasAssistantHashingKeyChanged() & 1) != 0)
    {
      v12 = 0;
    }
    else
    {
      objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CBACB0]);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_initWeak((id *)buf, self);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke;
    aBlock[3] = &unk_1E89BF278;
    aBlock[4] = self;
    objc_copyWeak(&v27, (id *)buf);
    v13 = v12;
    v25 = v13;
    v26 = v4;
    v14 = (void (**)(_QWORD))_Block_copy(aBlock);
    if (v13 || isWatch())
    {
      v14[2](v14);
    }
    else
    {
      v15 = -[HMDHomeManager __generateAssistantTeamIdentifier](self, "__generateAssistantTeamIdentifier");
      -[HMDHomeManager _setAssistantSyncRequest:](self, "_setAssistantSyncRequest:", v11);
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      -[HMDHomeManager homes](self, "homes", 0);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
      if (v17)
      {
        v18 = *(_QWORD *)v21;
        do
        {
          v19 = 0;
          do
          {
            if (*(_QWORD *)v21 != v18)
              objc_enumerationMutation(v16);
            objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v19++), "resetAccessoryHashedRouteIdentifiers");
          }
          while (v17 != v19);
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        }
        while (v17);
      }

      -[HMDHomeManager _generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:](self, "_generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:", 1, 0, 0, v14);
    }

    objc_destroyWeak(&v27);
    objc_destroyWeak((id *)buf);

  }
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke(id *a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;

  objc_msgSend(a1[4], "gatherer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_2;
  v3[3] = &unk_1E89C1880;
  objc_copyWeak(&v6, a1 + 7);
  v4 = a1[5];
  v5 = a1[6];
  objc_msgSend(v2, "getSyncEntityObjectsWithCompletionHandler:", v3);

  objc_destroyWeak(&v6);
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_2(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_3;
    v7[3] = &unk_1E89C07B8;
    v7[4] = v5;
    v8 = a1[4];
    v9 = v3;
    v10 = a1[5];
    dispatch_async(v6, v7);

  }
}

void __61__HMDHomeManager_Assistant___handleAssistantSyncDataRequest___block_invoke_3(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  const __CFString *v29;
  uint64_t v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  getLastSyncedAssistantConfigurationVersion();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedIntegerValue");

  v4 = objc_msgSend(*(id *)(a1 + 32), "assistantGenerationCounter");
  v5 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(*(id *)(a1 + 32), "__setLastSyncedAssistantConfigurationVersion:", v4));
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "_getAssistantHashingData");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544130;
    v32 = v8;
    v33 = 2112;
    v34 = v9;
    v35 = 2048;
    v36 = v4;
    v37 = 2112;
    v38 = v10;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Siri sync validity %@, assistantConfigurationVersion %tu - assistant identifier %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v5);
  v11 = *(_QWORD *)(a1 + 48);
  v29 = CFSTR("kSiriSyncDataEntitiesKey");
  v30 = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 56), "respondWithPayload:", v12);
  v13 = *(void **)(a1 + 40);
  if (v13)
  {
    objc_msgSend(v13, "componentsSeparatedByString:", CFSTR(":"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "firstObject");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v15)
      v17 = atoll((const char *)objc_msgSend(objc_retainAutorelease(v15), "cStringUsingEncoding:", 4));
    else
      v17 = 0;

  }
  else
  {
    v17 = 0;
  }
  objc_msgSend(*(id *)(a1 + 32), "siriSyncNotificationReasons");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_msgSend(v18, "copy");

  if (objc_msgSend(*(id *)(a1 + 32), "siriSyncNotificationTime"))
  {
    mach_absolute_time();
    v20 = UpTicksToMilliseconds();
    v21 = v20 - objc_msgSend(*(id *)(a1 + 32), "siriSyncNotificationTime");
  }
  else
  {
    v21 = 0;
  }
  +[HMDSiriSyncEvent syncRequestWithDuration:serverConfigurationVersion:configurationVersion:lastSyncedConfigurationVersion:notificationReasons:](HMDSiriSyncEvent, "syncRequestWithDuration:serverConfigurationVersion:configurationVersion:lastSyncedConfigurationVersion:notificationReasons:", v21, v17, v4, v3, v19);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "_resetSiriSyncNotification");
  if (objc_msgSend(*(id *)(a1 + 32), "assistantIdentifierChanged"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setAssistantIdentifierChanged:", 0);
    v23 = *(void **)(a1 + 32);
    objc_msgSend(v23, "uuid");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("AssistantIdentifierChanged"), v24, 1);

  }
  objc_msgSend(*(id *)(a1 + 32), "logEventSubmitter");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "submitLogEvent:", v22);

  objc_msgSend(*(id *)(a1 + 32), "_signpostAssistantSyncDataRequestHandled");
  objc_msgSend(*(id *)(a1 + 32), "currentAccessorySetupMetricDispatcher");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "markSetupEndStage:error:", 8, 0);

  +[HMDHelper sharedHelper](HMDHelper, "sharedHelper");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "hashedRouteIDForIdentifier:", CFSTR("A77C551E-C3FA-414E-ACD8-A7DF3D64E9D6"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  CFPreferencesSetAppValue(CFSTR("HMDAssistantLastHashingKey"), v28, CFSTR("com.apple.homed"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.homed"));

}

void __105__HMDHomeManager_Assistant___generateAssistantSyncDataAndIncrementVersion_requestSync_urgent_completion___block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "writeAssistantCurrentHome:", *(_QWORD *)(a1 + 32));
  v5 = objc_msgSend(WeakRetained, "_setHomekitAssistantNumEntities:", a2);
  if (*(_BYTE *)(a1 + 64))
  {
    objc_msgSend(WeakRetained, "currentAccessorySetupMetricDispatcher");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "markSetupBeginStage:error:", 8, 0);

    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = WeakRetained;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 40);
      v19 = 138543874;
      v20 = v10;
      v21 = 2112;
      v22 = v11;
      v23 = 2048;
      v24 = objc_msgSend(v8, "assistantGenerationCounter");
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Generated sync data and posted sync data changed notification due to reason %@: %tu", (uint8_t *)&v19, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    if (*(_BYTE *)(a1 + 65))
      v12 = "com.apple.assistant.sync_homekit_urgent";
    else
      v12 = "com.apple.assistant.sync_homekit_now";
    notify_post(v12);
    objc_msgSend(v8, "_signpostAssistantSyncDataNotification");
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0](v5);
    v14 = WeakRetained;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = *(_QWORD *)(a1 + 40);
      v19 = 138543874;
      v20 = v16;
      v21 = 2112;
      v22 = v17;
      v23 = 2048;
      v24 = objc_msgSend(v14, "assistantGenerationCounter");
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Generated sync data due to reason(s) %@: %tu", (uint8_t *)&v19, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
  }
  v18 = *(_QWORD *)(a1 + 48);
  if (v18)
    (*(void (**)(void))(v18 + 16))();
  objc_msgSend(WeakRetained, "setPostSyncDataUpdatedNotification:", 1);

}

- (id)multiUserSettingsForMultiUserSettingsMetricsEventDispatcherDataSource
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id obj;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager homes](self, "homes");
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v25)
  {
    v27 = 0;
    v28 = 0;
    v26 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v24 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v25; ++i)
      {
        if (*(_QWORD *)v30 != v24)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "multiUserSettings");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "numSharedUsers");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v8 += objc_msgSend(v11, "unsignedIntValue");

        objc_msgSend(v10, "numUsersWithSettings");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v7 += objc_msgSend(v12, "unsignedIntValue");

        objc_msgSend(v10, "numUsersWithIdentifyVoiceOff");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v6 += objc_msgSend(v13, "unsignedIntValue");

        objc_msgSend(v10, "numUsersWithPlayBackInfluencesForYouOff");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v5 += objc_msgSend(v14, "unsignedIntValue");

        objc_msgSend(v10, "numUsersCloudShareTrustNotConfigured");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v28 += objc_msgSend(v15, "unsignedIntValue");

        objc_msgSend(v10, "numUsersSharedBackingStoreNotStarted");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v27 += objc_msgSend(v16, "unsignedIntValue");

        objc_msgSend(v10, "numUsersSharedBackingStoreRunning");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v26 += objc_msgSend(v17, "unsignedIntValue");

        objc_msgSend(v10, "numUsersSharedBackingStoreNotRunningDueToError");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v2 += objc_msgSend(v18, "unsignedIntValue");

        objc_msgSend(v10, "numUsersSharedBackingStoreNotRunningDueToStopped");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v3 += objc_msgSend(v19, "unsignedIntValue");

        objc_msgSend(v10, "numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v4 += objc_msgSend(v20, "unsignedIntValue");

      }
      v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v25);
  }
  else
  {
    v27 = 0;
    v28 = 0;
    v26 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CBA698]), "initWithNumSharedUsers:numUsersWithSettings:numUsersWithIdentifyVoiceOff:numUsersWithPlayBackInfluencesForYouOff:numUsersCloudShareTrustNotConfigured:numUsersSharedBackingStoreNotStarted:numUsersSharedBackingStoreRunning:numUsersSharedBackingStoreNotRunningDueToError:numUsersSharedBackingStoreNotRunningDueToStopped:numUsersSharedBackingStoreSharedZoneWaitingForShareInvitation:", v8, v7, v6, v5, v28, v27, v26, v2, v3, v4);

  return v21;
}

- (void)_handleResetConfiguration:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;

  v4 = a3;
  +[HMDResetConfigPostCleanup writePostCleanupRecordWithReason:steps:](HMDResetConfigPostCleanup, "writePostCleanupRecordWithReason:steps:", 1, -1);
  +[HMDHH2FrameworkSwitch setHH2EnablementPreferenceKey:](HMDHH2FrameworkSwitch, "setHH2EnablementPreferenceKey:", 0);
  v5 = objc_msgSend(v4, "BOOLForKey:", CFSTR("kResetConfigMetadataKey"));
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28540]), "initWithName:parent:options:", CFSTR("Reset Config"), 0, 1);
  objc_msgSend(v6, "begin");
  v7 = v6;
  v11 = v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __57__HMDHomeManager_ResetConfig___handleResetConfiguration___block_invoke;
  v9[3] = &unk_1E89C21C0;
  v9[4] = self;
  v8 = v4;
  v10 = v8;
  -[HMDHomeManager _eraseConfiguration:completionHandler:](self, "_eraseConfiguration:completionHandler:", v5, v9);

  __HMFActivityScopeLeave();
}

- (void)_eraseConfiguration:(BOOL)a3 completionHandler:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  int v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  BOOL v22;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v4 = a3;
  v25 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7 || isWatch())
  {

LABEL_5:
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v24 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration for all homes and all devices", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    -[HMDHomeManager workQueue](self, "workQueue");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke_78;
    v17[3] = &unk_1E89BB130;
    v18 = v6;
    -[HMDHomeManager _eraseLocalHomeConfigurationAndDeleteMetadata:completionQueue:completion:](self, "_eraseLocalHomeConfigurationAndDeleteMetadata:completionQueue:completion:", v4, v12, v17);

    goto LABEL_8;
  }
  v8 = disableCloudDataSync;

  if (v8)
    goto LABEL_5;
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v24 = v15;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local and cloud configuration for all homes and all devices for this iCloud account", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v13);
  objc_initWeak((id *)buf, self);
  -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke;
  v19[3] = &unk_1E89C0358;
  objc_copyWeak(&v21, (id *)buf);
  v20 = v6;
  v22 = v4;
  objc_msgSend(v16, "resetCloudDataAndDeleteMetadataForCurrentAccount:completionHandler:", v4, v19);

  objc_destroyWeak(&v21);
  objc_destroyWeak((id *)buf);
LABEL_8:

}

- (void)_eraseLocalHomeConfigurationWithReason:(unint64_t)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  char v43;
  void *v44;
  HMDHomeManager *v45;
  NSObject *v46;
  void *v47;
  void *v48;
  id v49;
  void *v51;
  HMDHomeManager *v52;
  void *v53;
  id v54;
  id v55;
  _QWORD v56[4];
  id v57;
  id location;
  _QWORD v59[4];
  id v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  id v65;
  _BYTE buf[12];
  __int16 v67;
  unint64_t v68;
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  +[HMDHomeManager _eraseAllAccessoryKeysAndIdentifiers](HMDHomeManager, "_eraseAllAccessoryKeysAndIdentifiers");
  v52 = self;
  -[HMDHomeManager keyTransferAgent](self, "keyTransferAgent");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "resetConfig");

  -[HMDHomeManager messageDispatcher](v52, "messageDispatcher");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "reset");

  -[HMDHomeManager identityRegistry](v52, "identityRegistry");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "reset");

  -[HMDHomeManager accountRegistry](v52, "accountRegistry");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "reset");

  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = 0;
  objc_msgSend(v51, "updateCurrentiCloudIdentifier:controllerPairingIdentifier:error:", 0, 0, &v65);
  v49 = v65;
  v8 = (void *)MEMORY[0x1E0C99DE8];
  -[HMDHomeManager homes](v52, "homes");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "arrayWithCapacity:", objc_msgSend(v9, "count"));
  v53 = (void *)objc_claimAutoreleasedReturnValue();

  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  -[HMDHomeManager homes](v52, "homes");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v61, v69, 16);
  v12 = MEMORY[0x1E0C809B0];
  if (v11)
  {
    v13 = *(_QWORD *)v62;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v62 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * v14);
        *(_QWORD *)buf = 0;
        objc_msgSend(MEMORY[0x1E0D28588], "futureWithPromise:", buf);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v59[0] = v12;
        v59[1] = 3221225472;
        v59[2] = __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke;
        v59[3] = &unk_1E89C2730;
        v60 = *(id *)buf;
        objc_msgSend(v15, "stopThreadNetworkWithCompletion:completion:", 1, v59);
        objc_msgSend(v53, "addObject:", v16);
        objc_msgSend(v15, "resetConfiguration");

        ++v14;
      }
      while (v11 != v14);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v61, v69, 16);
    }
    while (v11);
  }

  -[HMDHomeManager setHomes:](v52, "setHomes:", MEMORY[0x1E0C9AA60]);
  -[HMDHomeManager cloudDataSyncStateFilter](v52, "cloudDataSyncStateFilter");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager homes](v52, "homes");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "updateTotalHomes:", objc_msgSend(v18, "count"));

  -[HMDHomeManager accessoryBrowserInternal](v52, "accessoryBrowserInternal");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "resetConfiguration");

  v20 = (void *)MEMORY[0x1D17BA0A0]();
  v21 = v52;
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v23;
    v67 = 2048;
    v68 = a3;
    _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@_eraseLocalHomeConfigurationWithReason: ==== reason is... %lu", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v20);
  +[HMDPersistentStore resetConfiguration:](HMDPersistentStore, "resetConfiguration:", a3);
  -[HMDHomeManager lastEventStore](v21, "lastEventStore");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "resetEventStore");

  -[HMDHomeManager cloudZones](v21, "cloudZones");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "removeAllObjects");

  -[HMDHomeManager setAppData:](v21, "setAppData:", 0);
  objc_initWeak(&location, v21);
  -[HMDHomeManager msgFilterChain](v21, "msgFilterChain");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager workQueue](v21, "workQueue");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v56[0] = v12;
  v56[1] = 3221225472;
  v56[2] = __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke_85;
  v56[3] = &unk_1E89BE3F8;
  objc_copyWeak(&v57, &location);
  objc_msgSend(v26, "resetConfiguration:completionHandler:", v27, v56);

  -[HMDHomeManager pendingResponsesForAccessoryFinder](v21, "pendingResponsesForAccessoryFinder");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "removeAllObjects");

  -[HMDHomeManager associatedRemotePeers](v21, "associatedRemotePeers");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "removeAllObjects");

  -[HMDHomeManager unassociatedRemotePeers](v21, "unassociatedRemotePeers");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "removeAllObjects");

  -[HMDHomeManager pendingRemoteSessions](v21, "pendingRemoteSessions");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "removeAllObjects");

  -[HMDHomeManager pendingResidentSetupSessions](v21, "pendingResidentSetupSessions");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "removeAllObjects");

  -[HMDHomeManager uuidsOfRemovedHomes](v21, "uuidsOfRemovedHomes");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "removeAllObjects");

  -[HMDHomeManager incomingInvitations](v21, "incomingInvitations");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "removeAllObjects");

  -[HMDHomeManager updateHomeKitInUsePreferences](v21, "updateHomeKitInUsePreferences");
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "removeAllBulletins");
  objc_msgSend(v35, "refreshHomeBadgeNumber");
  -[HMDHomeManager _eraseLocalMetadata](v21, "_eraseLocalMetadata");
  -[HMDHomeManager _checkForRemotePeers](v21, "_checkForRemotePeers");
  -[HMDHomeManager assistantSyncDataChanged:](v21, "assistantSyncDataChanged:", CFSTR("kResetConfigRequestKey"));
  CFPreferencesSetAppValue(CFSTR("HMDAssistantLastHashingKey"), 0, CFSTR("com.apple.homed"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.homed"));
  -[HMDHomeManager uuid](v21, "uuid");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](v21, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("Erase local home configuration"), v36, 1);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "postNotificationName:object:", CFSTR("HMDHomeManagerLocalHomeDataRemovedNotification"), 0);

  v54 = 0;
  v55 = 0;
  v38 = (void *)MEMORY[0x1D17BA0A0]();
  v39 = v21;
  HMFGetOSLogHandle();
  v40 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v41;
    _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Waiting for thread network shutdown to complete", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v38);
  objc_msgSend(MEMORY[0x1E0D28588], "allSettled:", v53);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend(v42, "waitForResult:orError:withTimeout:", &v55, &v54, 4.0);

  v44 = (void *)MEMORY[0x1D17BA0A0]();
  v45 = v39;
  if ((v43 & 1) != 0)
  {
    HMFGetOSLogHandle();
    v46 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v47;
      _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_DEFAULT, "%{public}@Thread network shutdown completed - continuing with reset config", buf, 0xCu);

    }
  }
  else
  {
    HMFGetOSLogHandle();
    v46 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v48;
      _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_ERROR, "%{public}@Gave up waiting for thread network shutdown", buf, 0xCu);

    }
  }

  objc_autoreleasePoolPop(v44);
  objc_destroyWeak(&v57);
  objc_destroyWeak(&location);

}

- (void)_eraseLocalHomeConfiguration
{
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v30 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration and accessory keys for all homes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v25 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        objc_msgSend(v11, "name");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager uuid](self, "uuid");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = -[HMDHomeManager removeName:namespace:](self, "removeName:namespace:", v12, v13);

        -[HMDHomeManager nameValidator](self, "nameValidator");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "uuid");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = (id)objc_msgSend(v15, "removeNamespace:", v16);

        objc_msgSend(v11, "uuid");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _removeConfigurationVersionForHome:](self, "_removeConfigurationVersionForHome:", v18);

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v8);
  }

  -[HMDHomeManager setPrimaryHomeUUID:](self, "setPrimaryHomeUUID:", 0);
  -[HMDHomeManager setRecoveryVersion:](self, "setRecoveryVersion:", 0);
  -[HMDHomeManager _updateCurrentHomeIfNecessary](self, "_updateCurrentHomeIfNecessary");
  -[HMDHomeManager backingStore](self, "backingStore");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "lookup");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "resetObjects");

  v21 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager _eraseLocalHomeConfigurationWithReason:](self, "_eraseLocalHomeConfigurationWithReason:", 1));
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v30 = v23;
    _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Completed erasing local home configuration", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v21);
}

- (void)_eraseLocalHomeConfigurationAfterSignOut
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v23 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Erase local data on this device since we signed out of iCloud", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  +[HMDPersistentStore resetConfiguration:](HMDPersistentStore, "resetConfiguration:", 2);
  -[HMDHomeManager resetTTSUHH2SettingsMigrationKey](v4, "resetTTSUHH2SettingsMigrationKey");
  +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "cancelAllOperations");

  -[HMDHomeManager removeAllHomeKitPairingIdentitiesAfterSignOut](v4, "removeAllHomeKitPairingIdentitiesAfterSignOut");
  -[HMDHomeManager _eraseLocalHomeConfiguration](v4, "_eraseLocalHomeConfiguration");
  -[HMDHomeManager _eraseLocalMetadata](v4, "_eraseLocalMetadata");
  +[HMDBackingStore resetBackingStore](HMDBackingStore, "resetBackingStore");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = v4;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v12;
      v24 = 2112;
      v25 = v8;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : resetBackingStore completed with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
  }
  -[HMDHomeManager cloudDataSyncManager](v4, "cloudDataSyncManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_initWeak((id *)buf, v4);
    -[HMDHomeManager cloudDataSyncManager](v4, "cloudDataSyncManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __71__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAfterSignOut__block_invoke;
    v20[3] = &unk_1E89C0678;
    objc_copyWeak(&v21, (id *)buf);
    objc_msgSend(v14, "resetCloudCache:", v20);

    objc_destroyWeak(&v21);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = v4;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v23 = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Posting notification kCloudServerTokenDataResetNotification to clear server token data on the cloud data sync manager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "postNotificationName:object:", CFSTR("kCloudServerTokenDataResetNotification"), v16);

  }
  objc_msgSend((id)objc_opt_class(), "relaunchHomedDueToResetConfigurationWithDelay:", 2.0);

}

- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 completionQueue:(id)a4 completion:(id)a5
{
  -[HMDHomeManager _eraseLocalHomeConfigurationAndDeleteMetadata:reason:completionQueue:completion:](self, "_eraseLocalHomeConfigurationAndDeleteMetadata:reason:completionQueue:completion:", a3, 1, a4, a5);
}

- (void)_eraseLocalHomeConfigurationAndDeleteMetadata:(BOOL)a3 reason:(unint64_t)a4 completionQueue:(id)a5 completion:(id)a6
{
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24[2];
  _QWORD v25[4];
  NSObject *v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v9 = a5;
  v10 = a6;
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v29 = v13;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Resetting local configuration, users and keys for all homes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v11);
  v14 = dispatch_group_create();
  dispatch_group_enter(v14);
  objc_initWeak((id *)buf, self);
  -[HMDHomeManager syncManager](self, "syncManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke;
  v25[3] = &unk_1E89BE218;
  objc_copyWeak(&v27, (id *)buf);
  v17 = v14;
  v26 = v17;
  objc_msgSend(v15, "pauseAndWaitForCurrentOperationCompletion:", v25);

  -[HMDHomeManager workQueue](self, "workQueue");
  v18 = objc_claimAutoreleasedReturnValue();
  v21[0] = v16;
  v21[1] = 3221225472;
  v21[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_96;
  v21[3] = &unk_1E89BB180;
  objc_copyWeak(v24, (id *)buf);
  v24[1] = (id)a4;
  v22 = v9;
  v23 = v10;
  v19 = v9;
  v20 = v10;
  dispatch_group_notify(v17, v18, v21);

  objc_destroyWeak(v24);
  objc_destroyWeak(&v27);
  objc_destroyWeak((id *)buf);

}

- (void)_eraseLocalMetadata
{
  void *v2;

  -[HMDHomeManager mobileAssetManager](self, "mobileAssetManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "purgeAllInstalledAssets");

  +[HMDHAPMetadata updateLocalMetadataWithBuiltinMetadata](HMDHAPMetadata, "updateLocalMetadataWithBuiltinMetadata");
}

- (void)deleteZonesFromLegacyAndCameraContainers
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v10 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Asked to delete all zones from legacy & camera containers", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend((id)objc_opt_class(), "getContainersToCleanUp");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __71__HMDHomeManager_ResetConfig__deleteZonesFromLegacyAndCameraContainers__block_invoke;
  v8[3] = &unk_1E89BB1A8;
  v8[4] = v4;
  objc_msgSend(v7, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v8);

}

- (void)deleteAllZonesFromContainer:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  NSObject *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  id v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  id v43;
  _QWORD v44[5];
  NSObject *v45;
  _QWORD v46[5];
  id v47;
  id v48;
  id v49;
  _QWORD v50[5];
  id v51;
  id v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  id v56;
  __int16 v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v54 = v8;
    v55 = 2112;
    v56 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Asked to delete all the zones from container : [%@]", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager createCloudDatabaseAndPerformInitialSync:](v6, "createCloudDatabaseAndPerformInitialSync:", v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = v6;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v9, "privateZoneIDs");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "numberWithUnsignedInteger:", objc_msgSend(v16, "count"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v54 = v14;
      v55 = 2112;
      v56 = v4;
      v57 = 2112;
      v58 = v17;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] There are %@ zones", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "privateZoneIDs");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = MEMORY[0x1E0C809B0];
    v50[0] = MEMORY[0x1E0C809B0];
    v50[1] = 3221225472;
    v50[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke;
    v50[3] = &unk_1E89BB1D0;
    v50[4] = v11;
    v21 = v9;
    v51 = v21;
    v22 = v18;
    v52 = v22;
    objc_msgSend(v19, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v50);

    objc_msgSend(v21, "localDatabase");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "fetchZonesWithError:", 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v24, "count"))
    {
      v25 = dispatch_group_create();
      dispatch_group_enter(v25);
      v46[0] = v20;
      v46[1] = 3221225472;
      v46[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_105;
      v46[3] = &unk_1E89BB1F8;
      v46[4] = v11;
      v47 = v21;
      v43 = v4;
      v26 = v4;
      v48 = v26;
      v27 = v22;
      v49 = v27;
      objc_msgSend(v24, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v46);
      v28 = (void *)MEMORY[0x1E0D519C0];
      objc_msgSend(MEMORY[0x1E0D519E8], "immediateScheduler");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "combineAllFutures:ignoringErrors:scheduler:", v27, 1, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v44[0] = v20;
      v44[1] = 3221225472;
      v44[2] = __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_2;
      v44[3] = &unk_1E89C0D18;
      v44[4] = v11;
      v31 = v25;
      v45 = v31;
      v32 = (id)objc_msgSend(v30, "addCompletionBlock:", v44);

      v33 = (void *)MEMORY[0x1D17BA0A0]();
      v34 = v11;
      HMFGetOSLogHandle();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v54 = v36;
        v55 = 2112;
        v56 = v26;
        _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Finished deleting zones for container : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v33);
      dispatch_group_wait(v31, 0xFFFFFFFFFFFFFFFFLL);

      v4 = v43;
    }
    else
    {
      v38 = (void *)MEMORY[0x1D17BA0A0]();
      v39 = v11;
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "containerID");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v54 = v41;
        v55 = 2112;
        v56 = v42;
        _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] No local zones to delete", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v38);
    }

  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v54 = v37;
      v55 = 2112;
      v56 = v4;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Unable to create cloud database for container : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }

}

- (id)deleteLocalZone:(id)a3 localDatabase:(id)a4 containerID:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v26 = v14;
    v27 = 2112;
    v28 = v8;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Going to open local zone [%@] and delete it", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v11);
  v15 = objc_alloc_init(MEMORY[0x1E0D32CC8]);
  objc_msgSend(v15, "setCreateIfNeeded:", 0);
  v24 = 0;
  objc_msgSend(v9, "openZoneWithZoneID:configuration:error:", v8, v15, &v24);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v24;
  if (v16)
  {
    objc_msgSend(v9, "removeZone:", v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = v12;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v26 = v22;
      v27 = 2112;
      v28 = v8;
      v29 = 2112;
      v30 = v17;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Failed to open local zone with zoneID %@: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v19);
    v18 = 0;
  }

  return v18;
}

- (id)createCloudDatabaseAndPerformInitialSync:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  id v23;
  NSObject *v24;
  id v25;
  dispatch_time_t v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  id v31;
  void *v32;
  id v34;
  _QWORD v35[5];
  id v36;
  NSObject *v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v39 = v8;
    v40 = 2112;
    v41 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Creating cloud database from container : [%@]", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v9 = objc_alloc(MEMORY[0x1E0C94C40]);
  v10 = (void *)objc_msgSend(v9, "initWithContainerIdentifier:environment:", CFSTR("com.apple.willow.config"), cloudKitContainerEnvironment);
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D32C28]), "initWithContainerID:", v10);
  v12 = objc_alloc(MEMORY[0x1E0D32C20]);
  +[HMDDatabase defaultDatabase](HMDDatabase, "defaultDatabase");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "localDatabase");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v12, "initWithLocalDatabase:configuration:", v14, v11);

  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = v6;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (v15)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v20;
      v40 = 2112;
      v41 = v15;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Going to performInitialCloudSync for %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    v21 = dispatch_group_create();
    dispatch_group_enter(v21);
    objc_msgSend(v15, "performInitialCloudSync");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = __72__HMDHomeManager_ResetConfig__createCloudDatabaseAndPerformInitialSync___block_invoke;
    v35[3] = &unk_1E89BF480;
    v35[4] = v17;
    v23 = v15;
    v36 = v23;
    v24 = v21;
    v37 = v24;
    v25 = (id)objc_msgSend(v22, "addCompletionBlock:", v35);
    v26 = dispatch_time(0, 30000000000);
    if (dispatch_group_wait(v24, v26))
    {
      v27 = (void *)MEMORY[0x1D17BA0A0]();
      v28 = v17;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v34 = v4;
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v39 = v30;
        v40 = 2112;
        v41 = v23;
        _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Timed out while waiting to perform initial sync on %@", buf, 0x16u);

        v4 = v34;
      }

      objc_autoreleasePoolPop(v27);
    }
    v31 = v23;

  }
  else
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v32;
      v40 = 2112;
      v41 = v4;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Failed to create cloud database with containerID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
  }

  return v15;
}

- (void)resetTTSUHH2SettingsMigrationKey
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Going to delete the TTSU HH2 settings migration key", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager userDefaults](v4, "userDefaults");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeObjectForKey:", CFSTR("mi.hh2"));

}

void __72__HMDHomeManager_ResetConfig__createCloudDatabaseAndPerformInitialSync___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 40);
    v12 = 138543874;
    v13 = v10;
    v14 = 2112;
    v15 = v11;
    v16 = 2112;
    v17 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Initial cloud sync finished on %@ with error: %@", (uint8_t *)&v12, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "containerID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543874;
    v12 = v7;
    v13 = 2112;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : [%@] Going to delete [%@]", (uint8_t *)&v11, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(a1[5], "removePrivateZoneWithID:", v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[6], "addObject:", v10);

}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_105(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  v5 = a2;
  objc_msgSend(v4, "localDatabase");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "deleteLocalZone:localDatabase:containerID:", v5, v6, *(_QWORD *)(a1 + 48));
  v8 = (id)objc_claimAutoreleasedReturnValue();

  v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 56), "addObject:", v8);
    v7 = v8;
  }

}

void __59__HMDHomeManager_ResetConfig__deleteAllZonesFromContainer___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543618;
    v12 = v10;
    v13 = 2112;
    v14 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : >> Deleting cloud & local zones finished with error: %@", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t __71__HMDHomeManager_ResetConfig__deleteZonesFromLegacyAndCameraContainers__block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "deleteAllZonesFromContainer:", a2);
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id obj;
  _QWORD v14[5];
  id v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "cancelAllOperations");

    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(WeakRetained, "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v18;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v18 != v6)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v7);
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
          objc_msgSend(v8, "name");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = (void *)MEMORY[0x1E0D285D0];
          v14[0] = MEMORY[0x1E0C809B0];
          v14[1] = 3221225472;
          v14[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2;
          v14[3] = &unk_1E89BB158;
          v14[4] = WeakRetained;
          v15 = v9;
          v16 = *(id *)(a1 + 32);
          v11 = v9;
          objc_msgSend(v10, "messageWithName:messagePayload:responseHandler:", CFSTR("kResetConfigRequestKey"), 0, v14);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(WeakRetained, "_removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:", v8, v12, 0, 0, 1);

          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v5);
    }

    objc_msgSend(WeakRetained, "setHomeManagerZoneFirstFetch:", 1);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_96(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "setPrimaryHomeUUID:", 0);
    objc_msgSend(v4, "_updateCurrentHomeIfNecessary");
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "removeControllerKeyPairWithError:", 0);
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v6)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v33 = v10;
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Removed controller key", buf, 0xCu);

      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v33 = v11;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : Failed removing controller key", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(v4, "_eraseLocalHomeConfigurationWithReason:", *(_QWORD *)(a1 + 56));
    +[HMDBackingStore resetBackingStore](HMDBackingStore, "resetBackingStore");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      v13 = (void *)MEMORY[0x1D17BA0A0]();
      v14 = v4;
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v33 = v16;
        v34 = 2112;
        v35 = v12;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@[Reset Config] : resetBackingStore completed with error: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v13);
    }
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v33 = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Completed configuration reset", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(v4, "cloudDataSyncManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      objc_msgSend(v4, "cloudDataSyncManager");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_97;
      v28[3] = &unk_1E89C0650;
      objc_copyWeak(&v31, v2);
      v30 = *(id *)(a1 + 40);
      v29 = *(id *)(a1 + 32);
      objc_msgSend(v21, "resetCloudCache:", v28);

      objc_destroyWeak(&v31);
    }
    else
    {
      objc_msgSend(v4, "syncManager");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "cancelOperations");

      objc_msgSend(v4, "syncManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "resume");

      v24 = *(void **)(a1 + 40);
      if (v24)
      {
        v25 = *(NSObject **)(a1 + 32);
        if (v25)
        {
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 3221225472;
          v26[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_3;
          v26[3] = &unk_1E89C0870;
          v27 = v24;
          dispatch_async(v25, v26);

        }
      }
    }

  }
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_97(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  _QWORD block[4];
  id v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "syncManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "cancelOperations");

    objc_msgSend(v3, "syncManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "resume");

  }
  v6 = *(void **)(a1 + 40);
  if (v6)
  {
    v7 = *(NSObject **)(a1 + 32);
    if (v7)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2_98;
      block[3] = &unk_1E89C0870;
      v9 = v6;
      dispatch_async(v7, block);

    }
  }

}

uint64_t __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2_98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __111__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAndDeleteMetadata_reason_completionQueue_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 40);
    v12 = 138543874;
    v13 = v10;
    v14 = 2112;
    v15 = v11;
    v16 = 2112;
    v17 = v5;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Removed home %@ - error %@", (uint8_t *)&v12, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __71__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationAfterSignOut__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@[Reset Config] : Posting notification kCloudServerTokenDataResetNotification to clear server token data on the cloud data sync manager", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:", CFSTR("kCloudServerTokenDataResetNotification"), v6);

  }
}

uint64_t __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fulfillWithValue:", 0);
}

void __70__HMDHomeManager_ResetConfig___eraseLocalHomeConfigurationWithReason___block_invoke_85(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "cloudDataSyncManager");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "updateServerTokenStatusOnCloudFilter");

    WeakRetained = v3;
  }

}

void __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  _BOOL8 v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = v3;
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "hmd_conciseCKError");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "shortDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v8;
      v19 = 2112;
      v20 = v10;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Cloud reset completed with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    if (v5 && objc_msgSend(v5, "code") != 75)
    {
      if (objc_msgSend(v5, "code") != 78)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 67, 0);
        v13 = objc_claimAutoreleasedReturnValue();

        v5 = (id)v13;
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      v11 = *(_BYTE *)(a1 + 48) != 0;
      objc_msgSend(WeakRetained, "workQueue");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke_76;
      v14[3] = &unk_1E89BB108;
      objc_copyWeak(&v16, (id *)(a1 + 40));
      v15 = *(id *)(a1 + 32);
      objc_msgSend(WeakRetained, "_eraseLocalHomeConfigurationAndDeleteMetadata:completionQueue:completion:", v11, v12, v14);

      objc_destroyWeak(&v16);
    }

  }
}

uint64_t __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke_78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __69__HMDHomeManager_ResetConfig___eraseConfiguration_completionHandler___block_invoke_76(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "updateAccountAvailabilityChanged:", *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void __57__HMDHomeManager_ResetConfig___handleResetConfiguration___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "waitForHH2SentinelZoneToBeRemoved");
  objc_msgSend(*(id *)(a1 + 32), "logEventSubmitter");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDConfigurationResetLogEvent configurationReset](HMDConfigurationResetLogEvent, "configurationReset");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "submitLogEvent:error:", v5, v3);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v8;
    v11 = 2112;
    v12 = v3;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@[Reset Config] : Sending cloud reset status to client with error: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  objc_msgSend(*(id *)(a1 + 40), "respondWithPayload:error:", 0, v3);
  objc_msgSend((id)objc_opt_class(), "relaunchHomedDueToResetConfigurationWithDelay:", 2.0);

}

+ (void)_eraseAllAccessoryKeysAndIdentifiers
{
  void *v3;
  int v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint32_t v14;
  int v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = 0;
  v4 = objc_msgSend(v3, "removeAllAccessoryKeys:", &v26);
  v5 = v26;
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = a1;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v4)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v28 = v10;
    v11 = "%{public}@[Reset Config] : Removed all accessory keys from controller";
    v12 = v9;
    v13 = OS_LOG_TYPE_INFO;
    v14 = 12;
  }
  else
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v10;
    v29 = 2112;
    v30 = v5;
    v11 = "%{public}@[Reset Config] : Could not remove all accessory keys from controller (%@)";
    v12 = v9;
    v13 = OS_LOG_TYPE_ERROR;
    v14 = 22;
  }
  _os_log_impl(&dword_1CD062000, v12, v13, v11, buf, v14);

LABEL_7:
  objc_autoreleasePoolPop(v6);
  v25 = v5;
  v15 = objc_msgSend(v3, "deleteAllPeripheralIdentifiers:", &v25);
  v16 = v25;

  v17 = (void *)MEMORY[0x1D17BA0A0]();
  v18 = v7;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v20)
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v28 = v21;
      v22 = "%{public}@[Reset Config] : Removed all Bluetooth peripheral identifiers.";
      v23 = v19;
      v24 = 12;
LABEL_12:
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_DEFAULT, v22, buf, v24);

    }
  }
  else if (v20)
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v28 = v21;
    v29 = 2112;
    v30 = v16;
    v22 = "%{public}@[Reset Config] : Could not remove all Bluetooth peripheral identifiers (%@).";
    v23 = v19;
    v24 = 22;
    goto LABEL_12;
  }

  objc_autoreleasePoolPop(v17);
}

+ (void)relaunchHomedDueToResetConfigurationWithDelay:(double)a3
{
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  dispatch_time_t v9;
  _QWORD block[5];
  uint8_t buf[4];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1D17BA0A0](a1, a2);
  v6 = a1;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v12 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Scheduling homed relaunch due to reset configuration. (Either user logged out or user issued reset-config SPI", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v9 = dispatch_time(0, (uint64_t)a3);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __77__HMDHomeManager_ResetConfig__relaunchHomedDueToResetConfigurationWithDelay___block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v6;
  dispatch_after(v9, MEMORY[0x1E0C80D38], block);
}

+ (id)getContainersToCleanUp
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0C99E60];
  v6[0] = CFSTR("com.apple.homekit");
  v6[1] = CFSTR("com.apple.homekit.camera.clips");
  v6[2] = CFSTR("com.apple.willow.config");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setWithArray:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void __77__HMDHomeManager_ResetConfig__relaunchHomedDueToResetConfigurationWithDelay___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  +[HMDLaunchHandler sharedHandler](HMDLaunchHandler, "sharedHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
  objc_msgSend(v2, "registerRelaunchClientWithUUID:", v3);

  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v7;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Going to relaunch homed due to resetConfiguration", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v4);
  _Exit(0);
}

- (void)sendFragmentedMessageForData:(id)a3 objectUUID:(id)a4 withMessageName:(id)a5 toUser:(id)a6 destination:(id)a7 completionHandler:(id)a8
{
  id v14;
  id v15;
  id v16;
  void (**v17)(id, void *, _QWORD);
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  HMDHomeManager *v36;
  void *v37;
  void (**v38)(id, void *, _QWORD);
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[6];
  _QWORD v51[6];
  uint8_t v52[128];
  uint8_t buf[4];
  void *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v44 = a4;
  v43 = a5;
  v15 = a6;
  v16 = a7;
  v17 = (void (**)(id, void *, _QWORD))a8;
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "UUIDString");
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D16500], "fragmentationPacketsForData:maxLength:transactionIdentifier:", v14, maximumDataSyncFragmentSize, -[HMDHomeManager _nextTransactionIdentifier](self, "_nextTransactionIdentifier"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
  {
    v36 = self;
    v38 = v17;
    v39 = v16;
    v40 = v15;
    v41 = v14;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v37 = v19;
    v21 = v19;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
    if (v22)
    {
      v23 = v22;
      v42 = *(_QWORD *)v47;
      v24 = 1;
      do
      {
        for (i = 0; i != v23; ++i)
        {
          v26 = v20;
          if (*(_QWORD *)v47 != v42)
            objc_enumerationMutation(v21);
          v27 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
          v50[0] = CFSTR("kHomeUUID");
          v50[1] = CFSTR("kHomeDataFragmentIdentityKey");
          v51[0] = v44;
          v51[1] = v45;
          v50[2] = CFSTR("kHomeDataFragmentKey");
          objc_msgSend(v27, "serialize");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v51[2] = v28;
          v50[3] = CFSTR("kHomeDataFragmentNumberKey");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v24 + i);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v51[3] = v29;
          v50[4] = CFSTR("kHomeDataFragmentTotalCountKey");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v21, "count"));
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v50[5] = CFSTR("kDataFragmentMessageNameKey");
          v51[4] = v30;
          v51[5] = v43;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v51, v50, 6);
          v31 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:messagePayload:", CFSTR("kHomeDataFragmentedSyncRequestKey"), v31);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = v26;
          objc_msgSend(v26, "addObject:", v32);

        }
        v24 += i;
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
      }
      while (v23);
    }

    v16 = v39;
    v15 = v40;
    v17 = v38;
    -[HMDHomeManager _sendFragmentedMessage:messageIndex:messageIdentity:userID:destination:completionHandler:](v36, "_sendFragmentedMessage:messageIndex:messageIdentity:userID:destination:completionHandler:", v20, 0, v45, v40, v39, v38);
    v14 = v41;
    v19 = v37;
    goto LABEL_14;
  }
  v33 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v54 = v35;
    _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to fragment data sync, aborting", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v33);
  if (v17)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v17[2](v17, v20, 0);
LABEL_14:

  }
}

- (void)handleDataFragmentedSync:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  BOOL v9;
  id v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t *v44;
  const __CFString **v45;
  id v46;
  void *v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  int v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void (**v69)(_QWORD, _QWORD, _QWORD);
  void *v70;
  void *v71;
  void (**v72)(_QWORD, _QWORD, _QWORD);
  id v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  id v84;
  uint8_t v85[128];
  uint8_t buf[4];
  void *v87;
  __int16 v88;
  void *v89;
  __int16 v90;
  void *v91;
  const __CFString *v92;
  uint64_t v93;
  const __CFString *v94;
  uint64_t v95;
  const __CFString *v96;
  uint64_t v97;
  const __CFString *v98;
  uint64_t v99;
  const __CFString *v100;
  _QWORD v101[4];

  v101[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomeDataFragmentIdentityKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomeUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("kHomeDataFragmentNumberKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("kHomeDataFragmentTotalCountKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && v7)
  {
    v84 = 0;
    v9 = -[HMDHomeManager _shouldDecodeMessage:error:](self, "_shouldDecodeMessage:error:", v4, &v84);
    v10 = v84;
    if (!v9)
    {
      v26 = (void *)MEMORY[0x1D17BA0A0]();
      v27 = self;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v78 = v5;
        v29 = v6;
        v30 = v10;
        v31 = v8;
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "remoteUserPairingIdentity");
        v33 = v7;
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v87 = v32;
        v88 = 2112;
        v89 = v34;
        _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Rejecting home data sync - Sync not from trusted account %@", buf, 0x16u);

        v7 = v33;
        v8 = v31;
        v10 = v30;
        v6 = v29;
        v5 = v78;
      }

      objc_autoreleasePoolPop(v26);
      objc_msgSend(v4, "responseHandler");
      v35 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v35)
        goto LABEL_28;
      objc_msgSend(v4, "responseHandler");
      v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v98 = CFSTR("kDataSyncResponseCancelKey");
      v99 = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v99, &v98, 1);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, id, void *))v12)[2](v12, v10, v36);
      goto LABEL_26;
    }
    if (!objc_msgSend(v7, "unsignedIntegerValue"))
    {
      -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "objectForKeyedSubscript:", v5);
      v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        objc_msgSend(v12, "close");
        -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "removeObjectForKey:", v5);

        objc_msgSend(v4, "respondWithPayload:", 0);
      }
      goto LABEL_27;
    }
    if (v6 && v8)
    {
      -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectForKeyedSubscript:", v5);
      v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v7, "unsignedIntegerValue") == 1)
      {
        if (v12)
        {
          -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "objectForKeyedSubscript:", v5);
          v14 = v5;
          v15 = v6;
          v16 = v10;
          v17 = v8;
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "close");

          v8 = v17;
          v10 = v16;
          v6 = v15;
          v5 = v14;

          -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "removeObjectForKey:", v14);

        }
        +[HMDFragmentationStreamTuple tupleWithFragmentationStreamForObject:delegate:](HMDFragmentationStreamTuple, "tupleWithFragmentationStreamForObject:delegate:", v6, self);
        v20 = objc_claimAutoreleasedReturnValue();

        -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "setObject:forKeyedSubscript:", v20, v5);

        v12 = (void (**)(_QWORD, _QWORD, _QWORD))v20;
        goto LABEL_31;
      }
      if (v12)
      {
LABEL_31:
        v75 = v8;
        v76 = v7;
        v46 = objc_alloc(MEMORY[0x1E0D164F8]);
        objc_msgSend(v4, "dataForKey:", CFSTR("kHomeDataFragmentKey"));
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = objc_msgSend(v46, "initWithFragmentedPacketData:", v47);

        v49 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v50 = objc_claimAutoreleasedReturnValue();
        v51 = v50;
        if (v48)
        {
          v77 = (void *)v48;
          v73 = v10;
          v74 = v6;
          if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v87 = v52;
            v88 = 2112;
            v89 = v5;
            v90 = 2112;
            v91 = v77;
            _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@Processing fragmentation packet with identity %@: %@", buf, 0x20u);

          }
          v79 = v5;

          objc_autoreleasePoolPop(v49);
          objc_msgSend(v12, "setLastMessage:", v4);
          v72 = v12;
          objc_msgSend(v12, "fragmentationStream");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "receivedFragmentedPacket:", v77);

          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "allKeys");
          v55 = (void *)objc_claimAutoreleasedReturnValue();

          v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v80, v85, 16);
          if (v56)
          {
            v57 = v56;
            v58 = *(_QWORD *)v81;
            do
            {
              v59 = 0;
              do
              {
                if (*(_QWORD *)v81 != v58)
                  objc_enumerationMutation(v55);
                v60 = *(_QWORD *)(*((_QWORD *)&v80 + 1) + 8 * v59);
                -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
                v61 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v61, "objectForKeyedSubscript:", v60);
                v62 = (void *)objc_claimAutoreleasedReturnValue();
                v63 = objc_msgSend(v62, "isExpired");

                if (v63)
                {
                  -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
                  v64 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v64, "objectForKeyedSubscript:", v60);
                  v65 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v65, "close");

                  -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
                  v66 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v66, "removeObjectForKey:", v60);

                }
                ++v59;
              }
              while (v57 != v59);
              v57 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v80, v85, 16);
            }
            while (v57);
          }

          v7 = v76;
          v67 = objc_msgSend(v76, "unsignedIntegerValue");
          v8 = v75;
          if (v67 != objc_msgSend(v75, "unsignedIntegerValue"))
            objc_msgSend(v4, "respondWithPayload:", 0);
          v36 = v77;
          v5 = v79;
          v10 = v73;
          v6 = v74;
          v12 = v72;
        }
        else
        {
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v68 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v87 = v68;
            _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_ERROR, "%{public}@Received invalid fragmented payload", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v49);
          objc_msgSend(v4, "responseHandler");
          v36 = (void *)objc_claimAutoreleasedReturnValue();

          if (v36)
          {
            objc_msgSend(v4, "responseHandler");
            v69 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
            v92 = CFSTR("kDataSyncResponseCancelKey");
            v93 = MEMORY[0x1E0C9AAB0];
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v93, &v92, 1);
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            ((void (**)(_QWORD, _QWORD, void *))v69)[2](v69, 0, v70);

            v36 = 0;
          }
          v8 = v75;
          v7 = v76;
        }
        goto LABEL_26;
      }
      objc_msgSend(v4, "responseHandler");
      v71 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v71)
        goto LABEL_28;
      objc_msgSend(v4, "responseHandler");
      v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v94 = CFSTR("kDataSyncResponseCancelKey");
      v95 = MEMORY[0x1E0C9AAB0];
      v43 = (void *)MEMORY[0x1E0C99D80];
      v44 = &v95;
      v45 = &v94;
    }
    else
    {
      v39 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v87 = v41;
        _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_ERROR, "%{public}@Received fragmented message without an objectUUID or total count", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v39);
      objc_msgSend(v4, "responseHandler");
      v42 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v42)
        goto LABEL_28;
      objc_msgSend(v4, "responseHandler");
      v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v96 = CFSTR("kDataSyncResponseCancelKey");
      v97 = MEMORY[0x1E0C9AAB0];
      v43 = (void *)MEMORY[0x1E0C99D80];
      v44 = &v97;
      v45 = &v96;
    }
    objc_msgSend(v43, "dictionaryWithObjects:forKeys:count:", v44, v45, 1);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, void *))v12)[2](v12, 0, v36);
LABEL_26:

    goto LABEL_27;
  }
  v22 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v87 = v24;
    _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Received fragmented message with bad header", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v22);
  objc_msgSend(v4, "responseHandler");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (v25)
  {
    objc_msgSend(v4, "responseHandler");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    v100 = CFSTR("kDataSyncResponseCancelKey");
    v101[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v101, &v100, 1);
    v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v10 + 2))(v10, 0, v12);
LABEL_27:

LABEL_28:
  }

}

- (void)_fragmentationStream:(id)a3 didCloseWithError:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "allKeys");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (id)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  v9 = 0;
  if (v8)
  {
    v10 = *(_QWORD *)v18;
LABEL_3:
    v11 = 0;
    v12 = v9;
    while (1)
    {
      if (*(_QWORD *)v18 != v10)
        objc_enumerationMutation(v7);
      v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v11);
      -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectForKeyedSubscript:", v13);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "fragmentationStream");
      v15 = (id)objc_claimAutoreleasedReturnValue();

      if (v15 == v5)
        break;
      v11 = (char *)v11 + 1;
      v12 = v9;
      if (v8 == v11)
      {
        v8 = (id)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v8)
          goto LABEL_3;
        goto LABEL_15;
      }
    }
    v8 = v13;

    if (v8)
      v16 = v9 == 0;
    else
      v16 = 1;
    if (!v16)
    {
      objc_msgSend(v9, "close");
      -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "removeObjectForKey:", v8);
      goto LABEL_15;
    }
  }
  else
  {
LABEL_15:

  }
}

- (void)_fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  BOOL v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  const __CFString *v45;
  id v46;
  const __CFString *v47;
  id v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a6;
  if (v10)
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "allKeys");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = (id)objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
    if (v14)
    {
      v39 = v11;
      v40 = v10;
      v15 = 0;
      v16 = *(_QWORD *)v42;
LABEL_4:
      v17 = 0;
      v18 = v15;
      while (1)
      {
        if (*(_QWORD *)v42 != v16)
          objc_enumerationMutation(v13);
        v19 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v17);
        -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream", v39);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "objectForKeyedSubscript:", v19);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v15, "fragmentationStream");
        v21 = (id)objc_claimAutoreleasedReturnValue();

        if (v21 == v9)
          break;
        v17 = (char *)v17 + 1;
        v18 = v15;
        if (v14 == v17)
        {
          v14 = (id)objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
          if (v14)
            goto LABEL_4;
          v11 = v39;
          v10 = v40;
          goto LABEL_24;
        }
      }
      v14 = v19;

      if (v14)
        v22 = v15 == 0;
      else
        v22 = 1;
      if (v22)
      {
        v11 = v39;
        v10 = v40;
        goto LABEL_25;
      }
      v23 = (void *)MEMORY[0x1E0D285D0];
      objc_msgSend(v15, "lastMessage");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "messageWithMessage:messagePayload:", v24, 0);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)objc_msgSend(v25, "mutableCopy");

      objc_msgSend(v15, "lastMessage");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "destination");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setDestination:", v27);

      objc_msgSend(v15, "lastMessage");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "remoteSenderContext");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setRemoteSenderContext:", v29);

      objc_msgSend(v15, "close");
      -[HMDHomeManager pendingFragmentationStream](self, "pendingFragmentationStream");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "removeObjectForKey:", v14);

      objc_msgSend(v15, "lastMessage");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "stringForKey:", CFSTR("kDataFragmentMessageNameKey"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      v33 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v50 = v36;
        v51 = 2112;
        v52 = v32;
        _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Full message received with name %@, calling the handle method.", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v33);
      v10 = v40;
      if (objc_msgSend(v32, "isEqualToString:", CFSTR("kMetadataDataSyncRequestKey")))
      {
        v47 = CFSTR("kHAPMetadataDataKey");
        v48 = v40;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setMessagePayload:", v37);

        -[HMDHomeManager _handleMetadataSync:](self, "_handleMetadataSync:", v13);
      }
      else
      {
        v45 = CFSTR("kHomeDataKey");
        v46 = v40;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setMessagePayload:", v38);

        -[HMDHomeManager _handleHomeDataSync:](self, "_handleHomeDataSync:", v13);
      }
      v11 = v39;

    }
    else
    {
      v15 = 0;
    }
LABEL_24:

LABEL_25:
  }

}

- (void)_sendFragmentedMessage:(id)a3 messageIndex:(unint64_t)a4 messageIdentity:(id)a5 userID:(id)a6 destination:(id)a7 completionHandler:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34[2];
  id location;

  v14 = a3;
  v15 = a5;
  v16 = a6;
  v27 = a7;
  v17 = a8;
  objc_initWeak(&location, self);
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectAtIndexedSubscript:", a4);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](self, "uuid");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager workQueue](self, "workQueue");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __124__HMDHomeManager_FragmentMessage___sendFragmentedMessage_messageIndex_messageIdentity_userID_destination_completionHandler___block_invoke;
  v28[3] = &unk_1E89BB308;
  objc_copyWeak(v34, &location);
  v34[1] = (id)a4;
  v22 = v14;
  v29 = v22;
  v23 = v15;
  v30 = v23;
  v24 = v17;
  v33 = v24;
  v25 = v16;
  v31 = v25;
  v26 = v27;
  v32 = v26;
  objc_msgSend(v18, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v19, v20, v25, v26, v21, v28);

  objc_destroyWeak(v34);
  objc_destroyWeak(&location);

}

void __124__HMDHomeManager_FragmentMessage___sendFragmentedMessage_messageIndex_messageIdentity_userID_destination_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD v31[2];
  _QWORD v32[2];
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    v8 = *(_QWORD *)(a1 + 80);
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(*(id *)(a1 + 32), "count");
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138544130;
      v34 = v11;
      v35 = 2048;
      v36 = (void *)(v8 + 1);
      v37 = 2048;
      v38 = v12;
      v39 = 2112;
      v40 = v13;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Sent packet %tu/%tu with identity %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v9);
    if (v5)
    {
      v30 = v6;
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "localizedDescription");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138543874;
        v34 = v16;
        v35 = 2112;
        v36 = v17;
        v37 = 2112;
        v38 = v18;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Received %@ from user %@, cancel message", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
      v19 = *(_QWORD *)(a1 + 40);
      v31[0] = CFSTR("kHomeDataFragmentIdentityKey");
      v31[1] = CFSTR("kHomeDataFragmentNumberKey");
      v32[0] = v19;
      v32[1] = &unk_1E8B34E90;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, v31, 2);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:messagePayload:", CFSTR("kHomeDataFragmentedSyncRequestKey"), v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "messageDispatcher");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "uuid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *(_QWORD *)(a1 + 48);
      v25 = *(_QWORD *)(a1 + 56);
      objc_msgSend(WeakRetained, "workQueue");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v21, v23, v24, v25, v26, &__block_literal_global_154922);

      v27 = *(_QWORD *)(a1 + 64);
      v6 = v30;
      if (v27)
        (*(void (**)(uint64_t, id, id))(v27 + 16))(v27, v5, v30);

    }
    else
    {
      v28 = *(_QWORD *)(a1 + 80);
      if (v28 == objc_msgSend(*(id *)(a1 + 32), "count") - 1
        || objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseCancelKey")))
      {
        v29 = *(_QWORD *)(a1 + 64);
        if (v29)
          (*(void (**)(uint64_t, _QWORD, id))(v29 + 16))(v29, 0, v6);
      }
      else
      {
        objc_msgSend(WeakRetained, "_sendFragmentedMessage:messageIndex:messageIdentity:userID:destination:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 80) + 1, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
      }
    }
  }

}

- (HMDHomeManager)init
{
  HMDHomeManager *v2;
  NSObject *v3;
  dispatch_queue_t v4;
  OS_dispatch_queue *workQueue;
  uint64_t v6;
  NSMutableSet *activeConnections;
  uint64_t v8;
  NSUUID *uuid;
  uint64_t v10;
  NSMapTable *homeUUIDsByWalletKeyAssertionXPCConnection;
  uint64_t v12;
  NSMutableDictionary *currentHomeConfigurations;
  uint64_t v14;
  NSUserDefaults *userDefaults;
  HMDCHIPXPCListener *v16;
  HMDCHIPXPCListener *chipXPCListener;
  objc_super v19;

  v19.receiver = self;
  v19.super_class = (Class)HMDHomeManager;
  v2 = -[HMDHomeManager init](&v19, sel_init);
  if (v2)
  {
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = dispatch_queue_create("com.apple.hmd.hmgr", v3);
    workQueue = v2->_workQueue;
    v2->_workQueue = (OS_dispatch_queue *)v4;

    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v6 = objc_claimAutoreleasedReturnValue();
    activeConnections = v2->_activeConnections;
    v2->_activeConnections = (NSMutableSet *)v6;

    v2->_lock._os_unfair_lock_opaque = 0;
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
    uuid = v2->_uuid;
    v2->_uuid = (NSUUID *)v8;

    objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
    v10 = objc_claimAutoreleasedReturnValue();
    homeUUIDsByWalletKeyAssertionXPCConnection = v2->_homeUUIDsByWalletKeyAssertionXPCConnection;
    v2->_homeUUIDsByWalletKeyAssertionXPCConnection = (NSMapTable *)v10;

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v12 = objc_claimAutoreleasedReturnValue();
    currentHomeConfigurations = v2->_currentHomeConfigurations;
    v2->_currentHomeConfigurations = (NSMutableDictionary *)v12;

    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v14 = objc_claimAutoreleasedReturnValue();
    userDefaults = v2->_userDefaults;
    v2->_userDefaults = (NSUserDefaults *)v14;

    v16 = -[HMDCHIPXPCListener initWithHomeManager:]([HMDCHIPXPCListener alloc], "initWithHomeManager:", v2);
    chipXPCListener = v2->_chipXPCListener;
    v2->_chipXPCListener = v16;

  }
  return v2;
}

- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 configuringStateController:(id)a11 diagnosticInfoController:(id)a12 currentAccessorySetupMetricDispatcher:(id)a13 uncommittedTransactions:(id)a14
{
  objc_class *v18;
  id v19;
  void *v20;
  HMDWidgetConfigurationReader *v22;
  HMDBiomeEventManager *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _BOOL4 v36;
  HMDHomeManager *v37;
  void *v38;
  id v39;
  id v41;
  id v42;

  v36 = a7;
  v18 = (objc_class *)MEMORY[0x1E0CBA498];
  v34 = a14;
  v33 = a13;
  v32 = a12;
  v29 = a11;
  v19 = a10;
  v30 = a9;
  v31 = a8;
  v28 = a6;
  v27 = a5;
  v42 = a4;
  v41 = a3;
  v39 = objc_alloc_init(v18);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteAccountManager sharedManager](HMDRemoteAccountManager, "sharedManager");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_alloc_init(HMDBiomeEventManager);
  objc_msgSend(v19, "logEventSubmitter");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_alloc_init(HMDWidgetConfigurationReader);
  v37 = -[HMDHomeManager initWithMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:metricsManager:darwinNotificationProvider:notificationCenter:backingStoreFactory:appleAccountManager:remoteAccountManager:userDefaults:biomeEventManager:logEventSubmitter:widgetConfigurationReader:configuringStateController:diagnosticInfoController:currentAccessorySetupMetricDispatcher:uncommittedTransactions:](self, "initWithMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:metricsManager:darwinNotificationProvider:notificationCenter:backingStoreFactory:appleAccountManager:remoteAccountManager:userDefaults:biomeEventManager:logEventSubmitter:widgetConfigurationReader:configuringStateController:diagnosticInfoController:currentAccessorySetupMetricDispatcher:uncommittedTransactions:", v41, v42, v27, v28, v36, v31, v30, v19, v39, v38, &__block_literal_global_166160, v26, v25, v24,
          v23,
          v20,
          v22,
          v29,
          v32,
          v33,
          v34);

  return v37;
}

- (HMDHomeManager)initWithMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 metricsManager:(id)a10 darwinNotificationProvider:(id)a11 notificationCenter:(id)a12 backingStoreFactory:(id)a13 appleAccountManager:(id)a14 remoteAccountManager:(id)a15 userDefaults:(id)a16 biomeEventManager:(id)a17 logEventSubmitter:(id)a18 widgetConfigurationReader:(id)a19 configuringStateController:(id)a20 diagnosticInfoController:(id)a21 currentAccessorySetupMetricDispatcher:(id)a22 uncommittedTransactions:(id)a23
{
  id v26;
  double v27;
  double v28;
  HMDHomeManager *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  OS_os_log *logger;
  uint64_t v42;
  NSMutableArray *deviceSetupSessions;
  void *v44;
  void *v45;
  id v46;
  double v47;
  double v48;
  double v49;
  void *v50;
  os_unfair_lock_s *v51;
  NSObject *v52;
  _BOOL4 v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  double v59;
  double v60;
  double v61;
  void *v62;
  os_unfair_lock_s *v63;
  NSObject *v64;
  _BOOL4 v65;
  void *v66;
  void *v67;
  HMDMobileAssetManager *v68;
  HMDMobileAssetManager *mobileAssetManager;
  HMDUserCloudShareManager *v70;
  HMDUserCloudShareManager *userCloudShareManager;
  HMDMultiUserStatusController *v72;
  HMDMultiUserStatusController *multiUserStatusController;
  HMDIDSServerBag *v74;
  HMDIDSServerBag *idsServerBag;
  HMDCapabilitiesController *v76;
  HMDCapabilitiesController *capabilitiesController;
  HMDMemoryUtilizationTracker *v78;
  HMDMemoryUtilizationTracker *memoryTracker;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  NSUUID *lastRemovedCurrentAccessoryUUID;
  HMDCameraRecordingLoadBalancer *v84;
  id v85;
  HMDCameraRecordingLoadBalancer *v86;
  void *v87;
  uint64_t v88;
  HMFTimer *debounceHomesUpdateTimer;
  HMFTimer *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  double v95;
  uint64_t v96;
  HMFTimer *debounceRegenerateAssistantSyncDataTimer;
  HMFTimer *v98;
  void *v99;
  uint64_t v100;
  double v101;
  double v102;
  void *v103;
  HMDHomeManager *v104;
  NSObject *v105;
  void *v106;
  void *v107;
  id v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  HMDHomeManager *v117;
  NSObject *v118;
  void *v119;
  void *v120;
  double v121;
  void *v122;
  void *v123;
  id v124;
  void *v125;
  double v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  uint64_t v131;
  double v132;
  double v133;
  void *v134;
  HMDHomeManager *v135;
  NSObject *v136;
  void *v137;
  void *v138;
  id v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  HMDHomeManager *v145;
  NSObject *v146;
  void *v147;
  void *v148;
  double v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  id v155;
  void *v156;
  double v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t i;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  HMDHomeManager *v178;
  NSObject *v179;
  void *v180;
  void *v181;
  id v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  HMDHomeManager *v187;
  NSObject *v188;
  void *v189;
  void *v190;
  id v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  HMDHomeManager *v196;
  NSObject *v197;
  void *v198;
  void *v199;
  double v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  id v206;
  void *v207;
  double v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  uint64_t v217;
  HMDHomeManager *v218;
  _BOOL4 v219;
  id v221;
  id v222;
  id v223;
  id v224;
  id v225;
  id v226;
  id v227;
  id v228;
  id v229;
  id v230;
  id v231;
  id v232;
  id v233;
  id v234;
  id v235;
  id v236;
  id v237;
  id v238;
  id v240;
  id v241;
  id v242;
  id v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  const __CFString *v248;
  const __CFString *v249;
  const __CFString *v250;
  const __CFString *v251;
  uint8_t v252[128];
  uint8_t buf[4];
  void *v254;
  __int16 v255;
  const __CFString *v256;
  __int16 v257;
  const __CFString *v258;
  __int16 v259;
  const __CFString *v260;
  __int16 v261;
  const __CFString *v262;
  __int16 v263;
  const __CFString *v264;
  __int16 v265;
  void *v266;
  __int16 v267;
  const __CFString *v268;
  __int16 v269;
  void *v270;
  const __CFString *v271;
  const __CFString *v272;
  const __CFString *v273;
  const __CFString *v274;
  const __CFString *v275;
  _QWORD v276[4];

  v219 = a7;
  v276[1] = *MEMORY[0x1E0C80C00];
  v243 = a3;
  v26 = a4;
  v242 = a5;
  v241 = a6;
  v240 = a8;
  v238 = a9;
  v237 = a10;
  v232 = a11;
  v231 = a12;
  v236 = a13;
  v230 = a14;
  v229 = a15;
  v228 = a16;
  v227 = a17;
  v226 = a18;
  v225 = a19;
  v224 = a20;
  v223 = a21;
  v222 = a22;
  v235 = a23;
  HMFUptime();
  v28 = v27;
  v29 = -[HMDHomeManager init](self, "init");
  if (v29)
  {
    v221 = v26;
    v30 = (void *)MEMORY[0x1D17BA0A0]();
    v218 = v29;
    v31 = v29;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v254 = v33;
      v255 = 2114;
      v256 = CFSTR("homeManagerInitStart");
      v257 = 2112;
      v258 = CFSTR("Initializing HomeManager");
      v259 = 2114;
      v260 = CFSTR("state");
      v261 = 2112;
      v262 = CFSTR("start");
      _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_alloc(MEMORY[0x1E0D334C8]);
    v275 = CFSTR("state");
    v276[0] = CFSTR("start");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v276, &v275, 1);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = (void *)objc_msgSend(v35, "initWithTag:data:", CFSTR("homeManagerInitStart"), v36);
    objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "submitTaggedEvent:processorList:", v37, v38);

    objc_msgSend(v237, "setHomeManager:", v31);
    objc_storeStrong((id *)&v31->_metricsManager, a10);
    objc_storeStrong((id *)&v31->_darwinNotificationProvider, a11);
    objc_storeStrong((id *)&v31->_notificationCenter, a12);
    objc_storeStrong((id *)&v31->_appleAccountManager, a14);
    objc_storeStrong((id *)&v31->_remoteAccountManager, a15);
    objc_storeStrong((id *)&v31->_userDefaults, a16);
    objc_storeStrong((id *)&v31->_biomeEventManager, a17);
    objc_storeStrong((id *)&v31->_logEventSubmitter, a18);
    objc_storeStrong((id *)&v31->_widgetConfigurationReader, a19);
    objc_storeStrong((id *)&v31->_configuringStateController, a20);
    objc_storeStrong((id *)&v31->_appleMediaAccessoryDiagnosticInfoController, a21);
    objc_storeStrong((id *)&v31->_currentAccessorySetupMetricDispatcher, a22);
    v31->_hh2MigrationInProgress = 0;
    +[HMDBackingStoreSingleton sharedInstance](HMDBackingStoreSingleton, "sharedInstance");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "setHomeManager:", v31);

    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    logger = v31->_logger;
    v31->_logger = (OS_os_log *)v40;

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v42 = objc_claimAutoreleasedReturnValue();
    deviceSetupSessions = v31->_deviceSetupSessions;
    v31->_deviceSetupSessions = (NSMutableArray *)v42;

    dispatch_suspend((dispatch_object_t)v31->_workQueue);
    v31->_generationCounterToken = -1;
    -[NSUserDefaults objectForKey:](v31->_userDefaults, "objectForKey:", CFSTR("HMDCurrentAccessorySetupStartUptimeKey"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v45 = v44;
    else
      v45 = 0;
    v46 = v45;

    if (v46)
    {
      objc_msgSend(v46, "doubleValue");
      v48 = v47;
      if (fabs(v47) >= 2.22044605e-16)
      {
        v49 = (double)(clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) / 0x3B9ACA00);
        v50 = (void *)MEMORY[0x1D17BA0A0]();
        v51 = v31;
        HMFGetOSLogHandle();
        v52 = objc_claimAutoreleasedReturnValue();
        v53 = os_log_type_enabled(v52, OS_LOG_TYPE_INFO);
        if (v48 <= v49)
        {
          if (v53)
          {
            HMFGetLogIdentifier();
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v254 = v55;
            v255 = 2048;
            v256 = *(const __CFString **)&v48;
            _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_INFO, "%{public}@Loaded stored current accessory setup timestamp: %f", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v50);
          os_unfair_lock_lock_with_options();
          *(double *)&v51[26]._os_unfair_lock_opaque = v48;
          os_unfair_lock_unlock(v51 + 6);
        }
        else
        {
          if (v53)
          {
            HMFGetLogIdentifier();
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v254 = v54;
            _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_INFO, "%{public}@Resetting current accessory setup timestamp to 0 as a reboot was detected", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v50);
          -[os_unfair_lock_s setSetupStartTimestamp:](v51, "setSetupStartTimestamp:", 0.0);
        }
      }
    }

    -[NSUserDefaults objectForKey:](v31->_userDefaults, "objectForKey:", CFSTR("HMDCurrentAccessorySetupEndUptimeKey"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v57 = v56;
    else
      v57 = 0;
    v58 = v57;

    if (v58)
    {
      objc_msgSend(v58, "doubleValue");
      v60 = v59;
      if (fabs(v59) >= 2.22044605e-16)
      {
        v61 = (double)(clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) / 0x3B9ACA00);
        v62 = (void *)MEMORY[0x1D17BA0A0]();
        v63 = v31;
        HMFGetOSLogHandle();
        v64 = objc_claimAutoreleasedReturnValue();
        v65 = os_log_type_enabled(v64, OS_LOG_TYPE_INFO);
        if (v60 <= v61)
        {
          if (v65)
          {
            HMFGetLogIdentifier();
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v254 = v67;
            v255 = 2048;
            v256 = *(const __CFString **)&v60;
            _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_INFO, "%{public}@Loaded stored current accessory setup end timestamp: %f", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v62);
          os_unfair_lock_lock_with_options();
          *(double *)&v63[28]._os_unfair_lock_opaque = v60;
          os_unfair_lock_unlock(v63 + 6);
        }
        else
        {
          if (v65)
          {
            HMFGetLogIdentifier();
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v254 = v66;
            _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_INFO, "%{public}@Resetting current accessory setup end timestamp to 0 as a reboot was detected", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v62);
          -[os_unfair_lock_s setSetupEndTimestamp:](v63, "setSetupEndTimestamp:", 0.0);
        }
      }
    }

    v68 = objc_alloc_init(HMDMobileAssetManager);
    mobileAssetManager = v31->_mobileAssetManager;
    v31->_mobileAssetManager = v68;

    -[HMDMobileAssetManager setDelegate:](v31->_mobileAssetManager, "setDelegate:", v31);
    v70 = -[HMDUserCloudShareManager initWithHomeManager:]([HMDUserCloudShareManager alloc], "initWithHomeManager:", v31);
    userCloudShareManager = v31->_userCloudShareManager;
    v31->_userCloudShareManager = v70;

    v72 = -[HMDMultiUserStatusController initWithQueue:delegate:]([HMDMultiUserStatusController alloc], "initWithQueue:delegate:", v31->_workQueue, v31);
    multiUserStatusController = v31->_multiUserStatusController;
    v31->_multiUserStatusController = v72;

    v74 = objc_alloc_init(HMDIDSServerBag);
    idsServerBag = v31->_idsServerBag;
    v31->_idsServerBag = v74;

    -[HMDIDSServerBag setDelegate:](v31->_idsServerBag, "setDelegate:", v31);
    v76 = -[HMDCapabilitiesController initWithQueue:dataSource:]([HMDCapabilitiesController alloc], "initWithQueue:dataSource:", v31->_workQueue, v31);
    capabilitiesController = v31->_capabilitiesController;
    v31->_capabilitiesController = v76;

    v78 = objc_alloc_init(HMDMemoryUtilizationTracker);
    memoryTracker = v31->_memoryTracker;
    v31->_memoryTracker = v78;

    -[HMDHomeManager userDefaults](v31, "userDefaults");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "stringForKey:", CFSTR("HMDLastRemovedCurrentAccessoryUUIDKey"));
    v81 = objc_claimAutoreleasedReturnValue();

    if (v81)
    {
      v82 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v81);
      lastRemovedCurrentAccessoryUUID = v31->_lastRemovedCurrentAccessoryUUID;
      v31->_lastRemovedCurrentAccessoryUUID = (NSUUID *)v82;

    }
    v234 = (id)v81;
    v84 = [HMDCameraRecordingLoadBalancer alloc];
    v85 = objc_alloc_init(MEMORY[0x1E0D31AA8]);
    v86 = -[HMDCameraRecordingLoadBalancer initWithHomeManager:resourceUsageMonitor:](v84, "initWithHomeManager:resourceUsageMonitor:", v31, v85);
    -[HMDHomeManager setCameraLoadBalancer:](v31, "setCameraLoadBalancer:", v86);

    -[HMDHomeManager cameraLoadBalancer](v31, "cameraLoadBalancer");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v87, "start");

    v88 = objc_msgSend(objc_alloc(MEMORY[0x1E0D286C8]), "initWithTimeInterval:options:", 0, 5.0);
    debounceHomesUpdateTimer = v31->_debounceHomesUpdateTimer;
    v31->_debounceHomesUpdateTimer = (HMFTimer *)v88;

    -[HMFTimer setDelegate:](v31->_debounceHomesUpdateTimer, "setDelegate:", v31);
    v90 = v31->_debounceHomesUpdateTimer;
    -[HMDHomeManager workQueue](v31, "workQueue");
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMFTimer setDelegateQueue:](v90, "setDelegateQueue:", v91);

    objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v92, "preferenceForKey:", CFSTR("assistantSyncDataCoalescePeriodMilliseconds"));
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v93, "numberValue");
    v94 = (void *)objc_claimAutoreleasedReturnValue();

    v233 = v94;
    objc_msgSend(v94, "doubleValue");
    v96 = objc_msgSend(objc_alloc(MEMORY[0x1E0D286C8]), "initWithTimeInterval:options:", 0, v95 / 1000.0);
    debounceRegenerateAssistantSyncDataTimer = v31->_debounceRegenerateAssistantSyncDataTimer;
    v31->_debounceRegenerateAssistantSyncDataTimer = (HMFTimer *)v96;

    -[HMFTimer setDelegate:](v31->_debounceRegenerateAssistantSyncDataTimer, "setDelegate:", v31);
    v98 = v31->_debounceRegenerateAssistantSyncDataTimer;
    -[HMDHomeManager workQueue](v31, "workQueue");
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMFTimer setDelegateQueue:](v98, "setDelegateQueue:", v99);

    v100 = HMFUptime();
    v102 = v101;
    v103 = (void *)MEMORY[0x1D17BA0A0](v100);
    v104 = v31;
    HMFGetOSLogHandle();
    v105 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v254 = v106;
      v255 = 2114;
      v256 = CFSTR("homeManagerInitStart");
      v257 = 2112;
      v258 = CFSTR("Initialize HH2 FW switch");
      v259 = 2114;
      v260 = CFSTR("state");
      v261 = 2112;
      v262 = CFSTR("homeManagerHH2FWSwitch");
      _os_log_impl(&dword_1CD062000, v105, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v103);
    objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = objc_alloc(MEMORY[0x1E0D334C8]);
    v273 = CFSTR("state");
    v274 = CFSTR("homeManagerHH2FWSwitch");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v274, &v273, 1);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    v110 = (void *)objc_msgSend(v108, "initWithTag:data:", CFSTR("homeManagerInitStart"), v109);
    objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "submitTaggedEvent:processorList:", v110, v111);

    v112 = (void *)MEMORY[0x1D17BA0A0]();
    -[HMDHomeManager initializeHH2FrameworkSwitch](v104, "initializeHH2FrameworkSwitch");
    +[HMDDeviceSetupManager sharedManager](HMDDeviceSetupManager, "sharedManager");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "followUpManager");
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v114, "stopAdvertising:", 2);

    -[HMDHomeManager notificationCenter](v104, "notificationCenter");
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v115, "addObserver:selector:name:object:", v104, sel__handleHH2SentinelZonePresent_, CFSTR("HMDHomeManagerHH2SentinelZonePresent"), 0);

    v116 = (void *)MEMORY[0x1D17BA0A0]();
    v117 = v104;
    HMFGetOSLogHandle();
    v118 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      v120 = (void *)MEMORY[0x1E0CB3940];
      HMFUptime();
      objc_msgSend(v120, "stringWithFormat:", CFSTR("%.3f"), v121 - v102);
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544898;
      v254 = v119;
      v255 = 2114;
      v256 = CFSTR("homeManagerInitStart");
      v257 = 2112;
      v258 = CFSTR("Initialized HH2 FW switch");
      v259 = 2114;
      v260 = CFSTR("state");
      v261 = 2112;
      v262 = CFSTR("homeManagerHH2FWSwitchDone");
      v263 = 2114;
      v264 = CFSTR("duration");
      v265 = 2112;
      v266 = v122;
      _os_log_impl(&dword_1CD062000, v118, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

    }
    objc_autoreleasePoolPop(v116);
    objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    v124 = objc_alloc(MEMORY[0x1E0D334C8]);
    v125 = (void *)MEMORY[0x1E0CB3940];
    HMFUptime();
    objc_msgSend(v125, "stringWithFormat:", CFSTR("%.3f"), v126 - v102);
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    HMDTaggedLoggingCreateDictionary();
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    v129 = (void *)objc_msgSend(v124, "initWithTag:data:", CFSTR("homeManagerInitStart"), v128, CFSTR("state"), CFSTR("homeManagerHH2FWSwitchDone"), CFSTR("duration"), v127);
    objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v123, "submitTaggedEvent:processorList:", v129, v130);

    objc_autoreleasePoolPop(v112);
    v131 = HMFUptime();
    v133 = v132;
    v134 = (void *)MEMORY[0x1D17BA0A0](v131);
    v135 = v117;
    HMFGetOSLogHandle();
    v136 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v254 = v137;
      v255 = 2114;
      v256 = CFSTR("homeManagerInitStart");
      v257 = 2112;
      v258 = CFSTR("Loading Home Manager");
      v259 = 2114;
      v260 = CFSTR("state");
      v261 = 2112;
      v262 = CFSTR("homeManagerLoading");
      _os_log_impl(&dword_1CD062000, v136, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v134);
    objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    v139 = objc_alloc(MEMORY[0x1E0D334C8]);
    v271 = CFSTR("state");
    v272 = CFSTR("homeManagerLoading");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v272, &v271, 1);
    v140 = (void *)objc_claimAutoreleasedReturnValue();
    v141 = (void *)objc_msgSend(v139, "initWithTag:data:", CFSTR("homeManagerInitStart"), v140);
    objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v138, "submitTaggedEvent:processorList:", v141, v142);

    v143 = (void *)MEMORY[0x1D17BA0A0]();
    LOBYTE(v217) = 0;
    -[HMDHomeManager _loadMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:uncommittedTransactions:backingStoreFactory:reloadData:](v135, "_loadMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:uncommittedTransactions:backingStoreFactory:reloadData:", v243, v221, v242, v241, v219, v240, v238, v235, v236, v217);
    objc_autoreleasePoolPop(v143);
    v144 = (void *)MEMORY[0x1D17BA0A0]();
    v145 = v135;
    HMFGetOSLogHandle();
    v146 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v146, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v147 = (void *)objc_claimAutoreleasedReturnValue();
      v148 = (void *)MEMORY[0x1E0CB3940];
      HMFUptime();
      objc_msgSend(v148, "stringWithFormat:", CFSTR("%.3f"), v149 - v133);
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      v151 = (void *)MEMORY[0x1E0CB37E8];
      -[HMDHomeManager homes](v145, "homes");
      v152 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v151, "numberWithUnsignedInteger:", objc_msgSend(v152, "count"));
      v153 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138545410;
      v254 = v147;
      v255 = 2114;
      v256 = CFSTR("homeManagerInitStart");
      v257 = 2112;
      v258 = CFSTR("Loaded Home Manager, resuming work queue");
      v259 = 2114;
      v260 = CFSTR("state");
      v261 = 2112;
      v262 = CFSTR("homeManagerLoaded");
      v263 = 2114;
      v264 = CFSTR("duration");
      v265 = 2112;
      v266 = v150;
      v267 = 2114;
      v268 = CFSTR("homesCount");
      v269 = 2112;
      v270 = v153;
      _os_log_impl(&dword_1CD062000, v146, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

    }
    objc_autoreleasePoolPop(v144);
    objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    v155 = objc_alloc(MEMORY[0x1E0D334C8]);
    v156 = (void *)MEMORY[0x1E0CB3940];
    HMFUptime();
    objc_msgSend(v156, "stringWithFormat:", CFSTR("%.3f"), v157 - v133);
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    v159 = (void *)MEMORY[0x1E0CB37E8];
    -[HMDHomeManager homes](v145, "homes");
    v160 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v159, "numberWithUnsignedInteger:", objc_msgSend(v160, "count"));
    v161 = (void *)objc_claimAutoreleasedReturnValue();
    HMDTaggedLoggingCreateDictionary();
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    v163 = (void *)objc_msgSend(v155, "initWithTag:data:", CFSTR("homeManagerInitStart"), v162, CFSTR("state"), CFSTR("homeManagerLoaded"), CFSTR("duration"), v158, CFSTR("homesCount"), v161);
    objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
    v164 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v154, "submitTaggedEvent:processorList:", v163, v164);

    +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v165, "setHomeManager:", v145);
    v246 = 0u;
    v247 = 0u;
    v244 = 0u;
    v245 = 0u;
    objc_msgSend(v165, "operations");
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    v167 = objc_msgSend(v166, "countByEnumeratingWithState:objects:count:", &v244, v252, 16);
    if (v167)
    {
      v168 = v167;
      v169 = *(_QWORD *)v245;
      do
      {
        for (i = 0; i != v168; ++i)
        {
          if (*(_QWORD *)v245 != v169)
            objc_enumerationMutation(v166);
          objc_msgSend(*(id *)(*((_QWORD *)&v244 + 1) + 8 * i), "updateDelegate:", v145);
        }
        v168 = objc_msgSend(v166, "countByEnumeratingWithState:objects:count:", &v244, v252, 16);
      }
      while (v168);
    }

    dispatch_resume((dispatch_object_t)v31->_workQueue);
    -[HMDHomeManager notificationCenter](v145, "notificationCenter");
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v171, "addObserver:selector:name:object:", v145, sel_cloudHomeSettingsUpdated_, CFSTR("HMDAppleAccountSettingsHomeStateUpdatedNotification"), 0);

    -[HMDHomeManager notificationCenter](v145, "notificationCenter");
    v172 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v172, "addObserver:selector:name:object:", v145, sel___handleDeviceCapabilitiesUpdated_, CFSTR("HMDDeviceCapabilitiiesUpdatedNotification"), 0);

    -[HMDHomeManager notificationCenter](v145, "notificationCenter");
    v173 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager appleAccountManager](v145, "appleAccountManager");
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v173, "addObserver:selector:name:object:", v145, sel___handleUpdatedCurrentDevice_, CFSTR("HMDAppleAccountManagerDeviceUpdatedNotification"), v174);

    -[HMDHomeManager notificationCenter](v145, "notificationCenter");
    v175 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v175, "addObserver:selector:name:object:", v145, sel__handleCurrentAccessoryRemovedNotification_, CFSTR("HMDHomeManagerDidRemoveCurrentAccessoryNotification"), 0);

    -[HMDHomeManager notificationCenter](v145, "notificationCenter");
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v176, "addObserver:selector:name:object:", v145, sel__handleCurrentAccessoryAddedNotification_, CFSTR("HMDHomeManagerDidAddCurrentAccessoryNotification"), 0);

    -[HMDHomeManager registerForNPSPreferenceChanges](v145, "registerForNPSPreferenceChanges");
    -[HMDHomeManager checkForRemotePeers](v145, "checkForRemotePeers");
    v177 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager registerForSignificantTimeChangeNotification](v145, "registerForSignificantTimeChangeNotification"));
    v178 = v145;
    HMFGetOSLogHandle();
    v179 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v180 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v254 = v180;
      v255 = 2114;
      v256 = CFSTR("homeManagerInitStart");
      v257 = 2112;
      v258 = CFSTR("Fetch and update PCS status");
      v259 = 2114;
      v260 = CFSTR("state");
      v261 = 2112;
      v262 = CFSTR("homeManagerFetchPCS");
      _os_log_impl(&dword_1CD062000, v179, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v177);
    objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
    v181 = (void *)objc_claimAutoreleasedReturnValue();
    v182 = objc_alloc(MEMORY[0x1E0D334C8]);
    v250 = CFSTR("state");
    v251 = CFSTR("homeManagerFetchPCS");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v251, &v250, 1);
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    v184 = (void *)objc_msgSend(v182, "initWithTag:data:", CFSTR("homeManagerInitStart"), v183);
    objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
    v185 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v181, "submitTaggedEvent:processorList:", v184, v185);

    v186 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager fetchAndUpdatePCSStatus](v178, "fetchAndUpdatePCSStatus"));
    v187 = v178;
    HMFGetOSLogHandle();
    v188 = objc_claimAutoreleasedReturnValue();
    v26 = v221;
    if (os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v189 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v254 = v189;
      v255 = 2114;
      v256 = CFSTR("homeManagerInitStart");
      v257 = 2112;
      v258 = CFSTR("Fetched and updated PCS status");
      v259 = 2114;
      v260 = CFSTR("state");
      v261 = 2112;
      v262 = CFSTR("homeManagerFetchedPCS");
      _os_log_impl(&dword_1CD062000, v188, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v186);
    objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
    v190 = (void *)objc_claimAutoreleasedReturnValue();
    v191 = objc_alloc(MEMORY[0x1E0D334C8]);
    v248 = CFSTR("state");
    v249 = CFSTR("homeManagerFetchedPCS");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v249, &v248, 1);
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    v193 = (void *)objc_msgSend(v191, "initWithTag:data:", CFSTR("homeManagerInitStart"), v192);
    objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
    v194 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v190, "submitTaggedEvent:processorList:", v193, v194);

    v29 = v218;
  }
  v195 = (void *)MEMORY[0x1D17BA0A0]();
  v196 = v29;
  HMFGetOSLogHandle();
  v197 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v197, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v198 = (void *)objc_claimAutoreleasedReturnValue();
    v199 = (void *)MEMORY[0x1E0CB3940];
    HMFUptime();
    objc_msgSend(v199, "stringWithFormat:", CFSTR("%.3f"), v200 - v28);
    v201 = (void *)objc_claimAutoreleasedReturnValue();
    v202 = (void *)MEMORY[0x1E0CB37E8];
    -[HMDHomeManager homes](v196, "homes");
    v203 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v202, "numberWithUnsignedInteger:", objc_msgSend(v203, "count"));
    v204 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138545410;
    v254 = v198;
    v255 = 2114;
    v256 = CFSTR("homeManagerInitDone");
    v257 = 2112;
    v258 = CFSTR("Initialized HomeManager");
    v259 = 2114;
    v260 = CFSTR("state");
    v261 = 2112;
    v262 = CFSTR("end");
    v263 = 2114;
    v264 = CFSTR("duration");
    v265 = 2112;
    v266 = v201;
    v267 = 2114;
    v268 = CFSTR("homesCount");
    v269 = 2112;
    v270 = v204;
    _os_log_impl(&dword_1CD062000, v197, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x5Cu);

  }
  objc_autoreleasePoolPop(v195);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v205 = (void *)objc_claimAutoreleasedReturnValue();
  v206 = objc_alloc(MEMORY[0x1E0D334C8]);
  v207 = (void *)MEMORY[0x1E0CB3940];
  HMFUptime();
  objc_msgSend(v207, "stringWithFormat:", CFSTR("%.3f"), v208 - v28);
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  v210 = (void *)MEMORY[0x1E0CB37E8];
  -[HMDHomeManager homes](v196, "homes");
  v211 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v210, "numberWithUnsignedInteger:", objc_msgSend(v211, "count"));
  v212 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  v214 = (void *)objc_msgSend(v206, "initWithTag:data:", CFSTR("homeManagerInitDone"), v213, CFSTR("state"), CFSTR("end"), CFSTR("duration"), v209, CFSTR("homesCount"), v212);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v215 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v205, "submitTaggedEvent:processorList:", v214, v215);

  return v196;
}

- (void)dealloc
{
  objc_super v3;

  -[HMDHomeManager invalidate](self, "invalidate");
  v3.receiver = self;
  v3.super_class = (Class)HMDHomeManager;
  -[HMDHomeManager dealloc](&v3, sel_dealloc);
}

- (void)invalidate
{
  void *v3;
  void *v4;
  void *v5;

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeObserver:", self);

  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "deregisterReceiver:", self);

  if (self->_generationCounterToken != -1)
  {
    -[HMDHomeManager darwinNotificationProvider](self, "darwinNotificationProvider");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "notifyCancel:", self->_generationCounterToken);

  }
  -[HMDHomeManager deregisterForSignificantTimeChangeNotification](self, "deregisterForSignificantTimeChangeNotification");
}

- (NSString)currentEventSource
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "identifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUIDString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "UUIDString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("DeviceNotDetermined."), "stringByAppendingString:", v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return (NSString *)v5;
}

- (id)languageListProviderForHomeUUID:(id)a3
{
  void *v3;
  void *v4;

  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "unifiedLanguageValueListSettingDataProvider");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)settingsControllerForAccessoryUUID:(id)a3 homeUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;

  v6 = a4;
  v7 = a3;
  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v9 = v8;
  else
    v9 = 0;
  v10 = v9;

  objc_msgSend(v10, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "hmf_isEqualToUUID:", v7);

  if ((v12 & 1) == 0)
  {

    goto LABEL_8;
  }
  objc_msgSend(v10, "home");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "hmf_isEqualToUUID:", v6);

  if (!v15)
  {
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  objc_msgSend(v10, "currentAccessorySettingsController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v16;
}

- (void)_migrateUniqueIdentifierPrefsIfNeeded
{
  uint64_t v2;
  const __CFArray *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFDictionary *v6;
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  v2 = *MEMORY[0x1E0CBAAA8];
  v7[0] = CFSTR("kAssistantTeamIdentifier");
  v7[1] = v2;
  v7[2] = *MEMORY[0x1E0CBAAB0];
  v7[3] = CFSTR("kUniqueDeviceIdentifierSaltkey");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 4);
  v3 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
  v4 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v5 = (const __CFString *)*MEMORY[0x1E0C9B230];
  v6 = CFPreferencesCopyMultiple(v3, CFSTR("com.apple.homed"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (-[__CFDictionary count](v6, "count"))
  {
    CFPreferencesSetMultiple(0, v3, CFSTR("com.apple.homed"), v4, v5);
    CFPreferencesAppSynchronize(CFSTR("com.apple.homed"));
    CFPreferencesSetMultiple(v6, 0, CFSTR("com.apple.homed.notbackedup"), v4, v5);
    CFPreferencesAppSynchronize(CFSTR("com.apple.homed.notbackedup"));
  }

}

- (void)_loadMessageDispatcher:(id)a3 accessoryBrowser:(id)a4 messageFilterChain:(id)a5 homeData:(id)a6 localDataDecryptionFailed:(BOOL)a7 identityRegistry:(id)a8 accountRegistry:(id)a9 uncommittedTransactions:(id)a10 backingStoreFactory:(id)a11 reloadData:(BOOL)a12
{
  id v18;
  int *v19;
  unint64_t v20;
  HMDSyncOperationManager *v21;
  HMDSyncOperationManager *syncManager;
  HMDCloudAccount *v23;
  HMDCloudAccount *cloudAccount;
  NSMutableDictionary *v25;
  NSMutableDictionary *userPushCacheMap;
  HMFTimer *v27;
  HMFTimer *watchPushDelayTimer;
  HMFTimer *v29;
  void *v30;
  HMFTimer *v31;
  HMFTimer *sharedHomesPushDelayTimer;
  HMFTimer *v33;
  void *v34;
  HMDBiomeLogEventObserver *v35;
  HMDBiomeLogEventObserver *biomeLogEventObserver;
  HMDCompositeSettingsControllerManager *v37;
  HMDCompositeSettingsControllerManager *compositeSettingsControllerManager;
  HMDSiriEndpointOnboardingManager *v39;
  HMDSiriEndpointOnboardingManager *siriEndpointOnboardingManager;
  void *v41;
  HMDHomeManager *v42;
  NSObject *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  HMELastEventStore *lastEventStore;
  HMDLastEventStoreController *v49;
  HMDLastEventStoreController *lastEventStoreController;
  void *v51;
  HMDHomeManager *v52;
  NSObject *v53;
  id v54;
  id v55;
  void *v56;
  uint64_t v57;
  HMEDelegatingEventRouter *registrationForwardingEventRouter;
  id v59;
  void *v60;
  uint64_t v61;
  HMEMemoryEventBus *memoryEventRouter;
  HMEDelegatingEventRouter *v63;
  void *v64;
  HMDLoggingEventForwarder *v65;
  HMEMemoryEventBus *v66;
  void *v67;
  uint64_t v68;
  HMDLoggingEventForwarder *loggingMemoryEventForwarder;
  HMDRemoteEventRouterAssertionController *v70;
  void *v71;
  void *v72;
  HMDRemoteEventRouterAssertionController *v73;
  void *v74;
  uint64_t v75;
  NSMutableArray *homes;
  uint64_t v77;
  NSMutableSet *pendingHomesBeingRemoved;
  HMDPowerManager *v79;
  HMDPowerManager *powerManager;
  OS_dispatch_source *cloudOperationRetryTimer;
  uint64_t v82;
  NSDictionary *demoAccessories;
  void *v84;
  id v85;
  HMDPairedSync *v86;
  void *v87;
  uint64_t v88;
  HMDPairedSync *pairedSync;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  HMDSoftwareUpdateManager *v95;
  HMDSoftwareUpdateManager *softwareUpdateManager;
  void *v97;
  int v98;
  void *v99;
  void *v100;
  HMDHomeManager *v101;
  NSObject *v102;
  id v103;
  void *v104;
  void *v105;
  HMDHomeManager *v106;
  NSObject *v107;
  id v108;
  void *v109;
  HMDHomeManager *v110;
  NSObject *v111;
  id v112;
  uint64_t v113;
  NSMutableSet *unassociatedRemotePeers;
  uint64_t v115;
  NSMutableDictionary *associatedRemotePeers;
  uint64_t v117;
  NSMutableDictionary *associatedWatchPeers;
  uint64_t v119;
  NSMutableDictionary *watchSyncStateMap;
  uint64_t v121;
  NSMutableSet *fullSyncedWatchPeers;
  uint64_t v123;
  NSMutableDictionary *watchSyncRetryContextBySyncIdentifier;
  uint64_t v125;
  NSMapTable *watchSyncRetryContextByRetryTimer;
  uint64_t v127;
  NSMutableArray *pendingResponsesForAccessoryFinder;
  uint64_t v129;
  NSMutableDictionary *pendingRemoteSessions;
  uint64_t v131;
  NSMutableSet *pendingResidentSetupSessions;
  id v133;
  const char *v134;
  NSObject *v135;
  dispatch_queue_t v136;
  OS_dispatch_queue *clientConnectionQueue;
  HMDClientConnection *v138;
  HMDClientConnection *clientConnection;
  HMDAssistantGather *v140;
  HMDAssistantGather *gatherer;
  void *v142;
  void *v143;
  uint64_t v144;
  NSMutableDictionary *pendingFragmentationStream;
  uint64_t v146;
  NSMutableDictionary *pendingDataSyncAcks;
  uint64_t v148;
  NSMutableSet *dialogCancelationContexts;
  uint64_t v150;
  HMDLocation *locationHandler;
  uint64_t v152;
  HMDFMFHandler *fmfHandler;
  uint64_t v154;
  NSMutableArray *siriSyncNotificationReasons;
  HMDCHIPDataSource *v156;
  HMDCHIPDataSource *chipDataSource;
  HMDAccessorySetupManager *v158;
  HMDAccessorySetupManager *accessorySetupManager;
  HMDAccessorySetupCoordinator *v160;
  OS_dispatch_queue *workQueue;
  void *v162;
  void *v163;
  uint64_t v164;
  HMDAccessorySetupCoordinator *accessorySetupCoordinator;
  HMDMTSPairingServer *v166;
  HMDMTSDeviceSetupServer *v167;
  HMDMTSAuthorizationServer *v168;
  HMDMTSXPCServer *v169;
  HMDMTSXPCServer *mtsXPCServer;
  HMDMicroLocationManager *v171;
  HMDMicroLocationManager *microLocationManager;
  HMDMicroLocationLogEventObserver *v173;
  HMDMicroLocationLogEventObserver *microLocationLogEventObserver;
  void **p_cache;
  void *v176;
  int v177;
  HMDHH1IDSInvitationManager *v178;
  void *v179;
  HMDHH1IDSInvitationManager *v180;
  HMDHH1IDSInvitationManager *idsInvitationManager;
  NSMutableSet *v182;
  NSMutableSet *mergeIDsOfUsersOfRemovedSharedHomes;
  unint64_t v184;
  char v185;
  void *v186;
  void *v187;
  void *v188;
  NSMutableSet *v189;
  NSMutableSet *unprocessedOperationModelIdentifiers;
  void *v191;
  void *v192;
  NSMutableArray *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t i;
  void *v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t j;
  NSUUID *v205;
  NSUUID *primaryHomeUUID;
  void *v207;
  void *v208;
  NSMutableArray *v209;
  NSMutableArray *cloudZones;
  NSUUID *v211;
  NSUUID *lastCurrentHomeUUID;
  NSUUID *v213;
  NSUUID *dataTag;
  uint64_t v215;
  void *v216;
  BOOL v217;
  NSMutableArray *v218;
  void *v219;
  void *v220;
  NSMutableArray *v221;
  NSMutableArray *uuidsOfRemovedHomes;
  void *v223;
  uint64_t v224;
  void *v225;
  BOOL v226;
  NSMutableArray *v227;
  void *v228;
  void *v229;
  NSMutableArray *v230;
  NSMutableArray *v231;
  void *v232;
  int v233;
  void *v234;
  HMDHomeManager *v235;
  NSObject *v236;
  id v237;
  HMDAccessoryFirmwareUpdateManager *v238;
  HMDAccessoryFirmwareUpdateManager *accessoryFirmwareUpdateManager;
  HMDMatterSoftwareUpdateProviderDelegate *v240;
  HMDMatterSoftwareUpdateProviderDelegate *matterSoftwareUpdateProviderDelegate;
  void *v242;
  void *v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t k;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  uint64_t v253;
  void *v254;
  HMDHomeManager *v255;
  NSObject *v256;
  id v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  uint64_t v262;
  double v263;
  double v264;
  void *v265;
  HMDHomeManager *v266;
  NSObject *v267;
  id v268;
  void *v269;
  id v270;
  void *v271;
  void *v272;
  void *v273;
  uint64_t v274;
  HMDBackingStore *backingStore;
  void *v276;
  void *v277;
  void *v278;
  HMDHomeManager *v279;
  NSObject *v280;
  id v281;
  void *v282;
  double v283;
  id v284;
  void *v285;
  id v286;
  void *v287;
  double v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  NSObject *v295;
  id v296;
  NSMutableSet *v297;
  void *v298;
  NSObject *v299;
  id v300;
  void *v301;
  HMDIDSServerBag *v302;
  void *v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  _BOOL4 v307;
  HMDApplicationData *v308;
  void *v309;
  void *v310;
  HMDApplicationData *v311;
  HMDApplicationData *appData;
  void *v313;
  uint64_t v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  _BOOL8 v321;
  id v322;
  HMFTimer *v323;
  HMFTimer *remoteAccessHealthMonitorTimer;
  HMFTimer *v325;
  void *v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t m;
  void *v332;
  void *v333;
  HMDResidentMesh *residentMesh;
  void *v335;
  int v336;
  void *v337;
  HMDHomeManager *v338;
  NSObject *v339;
  id v340;
  id v341;
  HMDResidentMesh *v342;
  HMDResidentMesh *v343;
  void *v344;
  int v345;
  __objc2_class *v346;
  void *v347;
  int v348;
  HMDKeyTransferAgent *v349;
  HMDKeyTransferAgent *keyTransferAgent;
  void *v351;
  HMDHomeManager *v352;
  NSObject *v353;
  id v354;
  void *v355;
  uint64_t v356;
  void *v357;
  HMDHomeManager *v358;
  NSObject *v359;
  id v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t n;
  NSObject *v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t ii;
  void *v372;
  void *v373;
  void *v374;
  id v375;
  void *v376;
  void *v377;
  void *v378;
  void *v379;
  void *v380;
  HMDDuetPredictionSubscriber *v381;
  void *v382;
  void *v383;
  HMDDuetPredictionSubscriber *v384;
  void *v385;
  void *v386;
  void *v387;
  void *v388;
  void *v389;
  void *v390;
  void *v391;
  void *v392;
  void *v393;
  void *v394;
  void *v395;
  id *v396;
  NSObject *v397;
  id v398;
  HMDMultiUserSettingsMetricsEventDispatcher *v399;
  NSUUID *uuid;
  void *v401;
  void *v402;
  void *v403;
  void *v404;
  uint64_t v405;
  id v406;
  uint64_t v407;
  double v408;
  double v409;
  void *v410;
  HMDHomeManager *v411;
  NSObject *v412;
  id v413;
  void *v414;
  id v415;
  void *v416;
  void *v417;
  void *v418;
  void *v419;
  id *v420;
  NSObject *v421;
  id v422;
  void *v423;
  double v424;
  id v425;
  void *v426;
  id v427;
  void *v428;
  double v429;
  void *v430;
  void *v431;
  void *v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  void *v436;
  void *v437;
  void *v438;
  void *v439;
  void *v440;
  void *v441;
  HMDXPCEventRouterServer *v442;
  void *v443;
  void *v444;
  void *v445;
  id *v446;
  NSObject *v447;
  id v448;
  HMDSiriEndpointSettingsSyncManager *v449;
  void *v450;
  void *v451;
  void *v452;
  HMDSiriEndpointSettingsSyncManager *v453;
  void *v454;
  void *v455;
  void *v456;
  uint64_t v457;
  void *v458;
  HMDWidgetTimelineRefresher *v459;
  id v460;
  NSObject *v461;
  void *v462;
  _QWORD *v463;
  HMDCloudCache *v464;
  NSObject *v465;
  NSObject *v466;
  void *v467;
  NSObject *v468;
  id v469;
  void *v470;
  char v471;
  void *v472;
  NSObject *v473;
  id v474;
  void *v475;
  void *v476;
  void *v477;
  HMDHomeManager *v478;
  NSObject *v479;
  id v480;
  void *v481;
  NSObject *v482;
  id v483;
  void *v484;
  void *v485;
  HMDHomeManager *v486;
  NSObject *v487;
  id v488;
  void *v489;
  void *v490;
  _BOOL8 v491;
  HMDCloudCache *v492;
  void *v493;
  void *v494;
  _BOOL8 v495;
  void *v496;
  HMDCloudDataSyncStateFilter *v497;
  void *v498;
  void *v499;
  uint64_t v500;
  void *v501;
  HMDCloudDataSyncStateFilter *v502;
  void *v503;
  uint64_t v504;
  void *v505;
  NSObject *v506;
  id v507;
  void *v508;
  const char *v509;
  void *v510;
  HMDCloudManagerDataSource *v511;
  HMDCloudManagerDataSource *cloudDataSource;
  HMDCloudManager *v513;
  void *v514;
  void *v515;
  void *v516;
  uint64_t v517;
  HMDCloudManager *cloudDataSyncManager;
  void *v519;
  void *v520;
  uint64_t v521;
  unsigned int v522;
  void *v523;
  id obj;
  id v525;
  NSObject *v526;
  _BOOL4 v527;
  HMDXPCEventRouterServer *v528;
  id v529;
  id v530;
  id v531;
  id v532;
  void (**v533)(id, HMDHomeManager *, _QWORD);
  id v534;
  void *v535;
  id v536;
  void *v537;
  _QWORD v538[5];
  _QWORD v539[5];
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  _QWORD block[5];
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  _QWORD v553[4];
  NSObject *v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  uint64_t v567;
  const __CFString *v568;
  const __CFString *v569;
  _BYTE v570[128];
  _BYTE v571[128];
  uint8_t v572[128];
  _BYTE buf[24];
  const __CFString *v574;
  __int16 v575;
  const __CFString *v576;
  __int16 v577;
  const __CFString *v578;
  __int16 v579;
  const __CFString *v580;
  __int16 v581;
  id v582;
  const __CFString *v583;
  const __CFString *v584;
  _BYTE v585[128];
  _BYTE v586[128];
  _BYTE v587[128];
  uint64_t v588;

  v527 = a7;
  v588 = *MEMORY[0x1E0C80C00];
  v532 = a3;
  v534 = a4;
  obj = a5;
  v531 = a5;
  v18 = a6;
  v530 = a8;
  v529 = a9;
  v536 = a10;
  v533 = (void (**)(id, HMDHomeManager *, _QWORD))a11;
  v19 = &OBJC_IVAR___HMDHomeManager__hh2MigrationInProgress;
  v20 = 0x1E0C99000;
  v537 = v18;
  if (a12)
    goto LABEL_36;
  v21 = -[HMDSyncOperationManager initWithClientQueue:dataSource:]([HMDSyncOperationManager alloc], "initWithClientQueue:dataSource:", self->_workQueue, self);
  syncManager = self->_syncManager;
  self->_syncManager = v21;

  v23 = -[HMDCloudAccount initWithClientQueue:]([HMDCloudAccount alloc], "initWithClientQueue:", self->_workQueue);
  cloudAccount = self->_cloudAccount;
  self->_cloudAccount = v23;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v25 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();
  userPushCacheMap = self->_userPushCacheMap;
  self->_userPushCacheMap = v25;

  v27 = (HMFTimer *)objc_msgSend(objc_alloc(MEMORY[0x1E0D286C8]), "initWithTimeInterval:options:", 0, 10.0);
  watchPushDelayTimer = self->_watchPushDelayTimer;
  self->_watchPushDelayTimer = v27;

  -[HMFTimer setDelegate:](self->_watchPushDelayTimer, "setDelegate:", self);
  v29 = self->_watchPushDelayTimer;
  -[HMDHomeManager workQueue](self, "workQueue");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMFTimer setDelegateQueue:](v29, "setDelegateQueue:", v30);

  v31 = (HMFTimer *)objc_msgSend(objc_alloc(MEMORY[0x1E0D286C8]), "initWithTimeInterval:options:", 0, 10.0);
  sharedHomesPushDelayTimer = self->_sharedHomesPushDelayTimer;
  self->_sharedHomesPushDelayTimer = v31;

  -[HMFTimer setDelegate:](self->_sharedHomesPushDelayTimer, "setDelegate:", self);
  v33 = self->_sharedHomesPushDelayTimer;
  -[HMDHomeManager workQueue](self, "workQueue");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMFTimer setDelegateQueue:](v33, "setDelegateQueue:", v34);

  objc_storeStrong((id *)&self->_messageDispatcher, a3);
  v35 = -[HMDBiomeLogEventObserver initWithBiomeEventManager:dataSource:]([HMDBiomeLogEventObserver alloc], "initWithBiomeEventManager:dataSource:", self->_biomeEventManager, self);
  biomeLogEventObserver = self->_biomeLogEventObserver;
  self->_biomeLogEventObserver = v35;

  v37 = -[HMDCompositeSettingsControllerManager initWithDataSource:]([HMDCompositeSettingsControllerManager alloc], "initWithDataSource:", self);
  compositeSettingsControllerManager = self->_compositeSettingsControllerManager;
  self->_compositeSettingsControllerManager = v37;

  v39 = -[HMDSiriEndpointOnboardingManager initWithDataSource:]([HMDSiriEndpointOnboardingManager alloc], "initWithDataSource:", self);
  siriEndpointOnboardingManager = self->_siriEndpointOnboardingManager;
  self->_siriEndpointOnboardingManager = v39;

  v41 = (void *)MEMORY[0x1D17BA0A0]();
  v42 = self;
  HMFGetOSLogHandle();
  v43 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v44 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v44;
    _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Creating event router broker", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v41);
  v45 = objc_alloc(MEMORY[0x1E0D32D40]);
  v46 = (id)eventStorePath;
  v47 = objc_msgSend(v45, "initWithFileName:", v46);
  lastEventStore = v42->_lastEventStore;
  v42->_lastEventStore = (HMELastEventStore *)v47;

  if ((-[HMELastEventStore startup](v42->_lastEventStore, "startup") & 1) != 0)
  {
    v49 = -[HMDLastEventStoreController initWithWithEventStore:]([HMDLastEventStoreController alloc], "initWithWithEventStore:", v42->_lastEventStore);
    lastEventStoreController = v42->_lastEventStoreController;
    v42->_lastEventStoreController = v49;

  }
  else
  {
    v51 = (void *)MEMORY[0x1D17BA0A0]();
    v52 = v42;
    HMFGetOSLogHandle();
    v53 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v54 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v54;
      _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_FAULT, "%{public}@Unable to start event store", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v51);
  }
  v55 = objc_alloc(MEMORY[0x1E0D32D20]);
  -[HMDHomeManager workQueue](v42, "workQueue");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = objc_msgSend(v55, "initWithQueue:dataSource:storeReadHandle:logCategory:identifier:", v56, v42, v42->_lastEventStore, "Router.RegistrationForwarding", 0);
  registrationForwardingEventRouter = v42->_registrationForwardingEventRouter;
  v42->_registrationForwardingEventRouter = (HMEDelegatingEventRouter *)v57;

  v59 = objc_alloc(MEMORY[0x1E0D32D48]);
  -[HMDHomeManager workQueue](v42, "workQueue");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = objc_msgSend(v59, "initWithQueue:storeReadHandle:storeWriteHandle:logCategory:", v60, v42->_lastEventStore, v42->_lastEventStore, "Router.LocalMemory");
  memoryEventRouter = v42->_memoryEventRouter;
  v42->_memoryEventRouter = (HMEMemoryEventBus *)v61;

  -[HMEMemoryEventBus setDataSource:](v42->_memoryEventRouter, "setDataSource:", v42);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v63 = v42->_registrationForwardingEventRouter;
    -[HMEMemoryEventBus synchronousSubscriptionProvider](v42->_memoryEventRouter, "synchronousSubscriptionProvider");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMEDelegatingEventRouter registerSubRouter:](v63, "registerSubRouter:", v64);

  }
  v65 = [HMDLoggingEventForwarder alloc];
  v66 = v42->_memoryEventRouter;
  -[HMDHomeManager logEventSubmitter](v42, "logEventSubmitter");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = -[HMDLoggingEventForwarder initWithEventForwarder:logEventSubmitter:](v65, "initWithEventForwarder:logEventSubmitter:", v66, v67);
  loggingMemoryEventForwarder = v42->_loggingMemoryEventForwarder;
  v42->_loggingMemoryEventForwarder = (HMDLoggingEventForwarder *)v68;

  -[HMDHomeManager initalizeMediaGroupParticipantDataLocalStorage](v42, "initalizeMediaGroupParticipantDataLocalStorage");
  if (_os_feature_enabled_impl() && (isiOSDevice() || isWatch() || isMac()))
  {
    v70 = [HMDRemoteEventRouterAssertionController alloc];
    -[HMDHomeManager workQueue](v42, "workQueue");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager notificationCenter](v42, "notificationCenter");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = -[HMDRemoteEventRouterAssertionController initWithQueue:notificationCenter:](v70, "initWithQueue:notificationCenter:", v71, v72);
    -[HMDHomeManager setEventRouterAssertionController:](v42, "setEventRouterAssertionController:", v73);

    -[HMDHomeManager eventRouterAssertionController](v42, "eventRouterAssertionController");
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "configure");

  }
  objc_storeStrong((id *)&v42->_accessoryBrowserInternal, a4);
  -[HMDAccessoryBrowser setUnpairedAccessoryManagerDelegate:](v42->_accessoryBrowserInternal, "setUnpairedAccessoryManagerDelegate:", v42);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v75 = objc_claimAutoreleasedReturnValue();
  homes = v42->_homes;
  v42->_homes = (NSMutableArray *)v75;

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v77 = objc_claimAutoreleasedReturnValue();
  pendingHomesBeingRemoved = v42->_pendingHomesBeingRemoved;
  v42->_pendingHomesBeingRemoved = (NSMutableSet *)v77;

  v79 = objc_alloc_init(HMDPowerManager);
  powerManager = v42->_powerManager;
  v42->_powerManager = v79;

  v42->_accountActive = 0;
  v42->_accountStatusFailedDueToNetworkFailure = 0;
  v42->_uploadToCloudIsPending = 0;
  v42->_uploadHomeDataToCloud = 0;
  objc_storeStrong((id *)&v42->_identityRegistry, a8);
  cloudOperationRetryTimer = v42->_cloudOperationRetryTimer;
  v42->_cloudOperationRetryTimer = 0;

  v42->_lastAnswerForShouldCloudSyncData = 0;
  objc_storeStrong((id *)&v42->_msgFilterChain, obj);
  v42->_cloudOperationRetryCount = 0;
  v42->_backOffOperationInProgress = 0;
  objc_storeStrong((id *)&v42->_accountRegistry, a9);
  objc_msgSend(v537, "demoAccessories");
  v82 = objc_claimAutoreleasedReturnValue();
  demoAccessories = v42->_demoAccessories;
  v42->_demoAccessories = (NSDictionary *)v82;

  v42->_demoFinalized = objc_msgSend(v537, "demoFinalized");
  -[HMDHomeManager _migrateUniqueIdentifierPrefsIfNeeded](v42, "_migrateUniqueIdentifierPrefsIfNeeded");
  +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v84, "synchronize");

  v42->_companionReachable = 0;
  v85 = +[HMDWatchSystemState sharedState](HMDWatchSystemState, "sharedState");
  if (+[HMDDeviceCapabilities isCompanionCapable](HMDDeviceCapabilities, "isCompanionCapable"))
  {
    v86 = [HMDPairedSync alloc];
    -[HMDHomeManager workQueue](v42, "workQueue");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = -[HMDPairedSync initWithDelegate:queue:](v86, "initWithDelegate:queue:", v42, v87);
    pairedSync = v42->_pairedSync;
    v42->_pairedSync = (HMDPairedSync *)v88;

    +[HMDWatchManager sharedManager](HMDWatchManager, "sharedManager");
    v90 = objc_claimAutoreleasedReturnValue();
    v91 = 768;
LABEL_20:
    v94 = *(Class *)((char *)&v42->super.super.isa + v91);
    *(Class *)((char *)&v42->super.super.isa + v91) = (Class)v90;

    goto LABEL_21;
  }
  objc_msgSend(MEMORY[0x1E0D28690], "productInfo");
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  v93 = objc_msgSend(v92, "productPlatform");

  if (v93 == 3)
  {
    +[HMDCompanionManager sharedManager](HMDCompanionManager, "sharedManager");
    v90 = objc_claimAutoreleasedReturnValue();
    v91 = 272;
    goto LABEL_20;
  }
LABEL_21:
  if (+[HMDSoftwareUpdateManager isSupported](HMDSoftwareUpdateManager, "isSupported"))
  {
    v95 = objc_alloc_init(HMDSoftwareUpdateManager);
    softwareUpdateManager = v42->_softwareUpdateManager;
    v42->_softwareUpdateManager = v95;

  }
  v42->_uploadMetadataToCloud = 0;
  v42->_cloudkitAccountStatusDetermined = 0;
  v42->_generationCounter = 0;
  if (v42->_generationCounterToken == -1)
  {
    -[HMDHomeManager darwinNotificationProvider](v42, "darwinNotificationProvider");
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    v98 = objc_msgSend(v97, "notifyRegisterCheck:outToken:", *MEMORY[0x1E0CB8F90], &v42->_generationCounterToken);

    if (!v98)
    {
      v567 = 0;
      -[HMDHomeManager darwinNotificationProvider](v42, "darwinNotificationProvider");
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v99, "notifyGetState:state:", v42->_generationCounterToken, &v567);

      if (!v567)
      {
        v100 = (void *)MEMORY[0x1D17BA0A0]();
        v101 = v42;
        HMFGetOSLogHandle();
        v102 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v103 = (id)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v103;
          _os_log_impl(&dword_1CD062000, v102, OS_LOG_TYPE_DEFAULT, "%{public}@Generation counter for notification token is zero - refreshing from persisted configuration", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v100);
        -[HMDHomeManager userDefaults](v101, "userDefaults");
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        v567 = objc_msgSend(v104, "integerForKey:", CFSTR("HMDHomeManagerGenerationCounter"));

        if (!v567)
        {
          v105 = (void *)MEMORY[0x1D17BA0A0]();
          v106 = v101;
          HMFGetOSLogHandle();
          v107 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v108 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v108;
            _os_log_impl(&dword_1CD062000, v107, OS_LOG_TYPE_DEFAULT, "%{public}@Persisted generation counter is zero - need to invalidate client caches", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v105);
        }
      }
      v109 = (void *)MEMORY[0x1D17BA0A0]();
      v110 = v42;
      HMFGetOSLogHandle();
      v111 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v112 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v112;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v567;
        _os_log_impl(&dword_1CD062000, v111, OS_LOG_TYPE_DEFAULT, "%{public}@Initializing with generation counter %llu", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v109);
      v42->_generationCounter = v567;
    }
  }
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v113 = objc_claimAutoreleasedReturnValue();
  unassociatedRemotePeers = v42->_unassociatedRemotePeers;
  v42->_unassociatedRemotePeers = (NSMutableSet *)v113;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v115 = objc_claimAutoreleasedReturnValue();
  associatedRemotePeers = v42->_associatedRemotePeers;
  v42->_associatedRemotePeers = (NSMutableDictionary *)v115;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v117 = objc_claimAutoreleasedReturnValue();
  associatedWatchPeers = v42->_associatedWatchPeers;
  v42->_associatedWatchPeers = (NSMutableDictionary *)v117;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v119 = objc_claimAutoreleasedReturnValue();
  watchSyncStateMap = v42->_watchSyncStateMap;
  v42->_watchSyncStateMap = (NSMutableDictionary *)v119;

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v121 = objc_claimAutoreleasedReturnValue();
  fullSyncedWatchPeers = v42->_fullSyncedWatchPeers;
  v42->_fullSyncedWatchPeers = (NSMutableSet *)v121;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v123 = objc_claimAutoreleasedReturnValue();
  watchSyncRetryContextBySyncIdentifier = v42->_watchSyncRetryContextBySyncIdentifier;
  v42->_watchSyncRetryContextBySyncIdentifier = (NSMutableDictionary *)v123;

  objc_msgSend(MEMORY[0x1E0CB3748], "strongToStrongObjectsMapTable");
  v125 = objc_claimAutoreleasedReturnValue();
  watchSyncRetryContextByRetryTimer = v42->_watchSyncRetryContextByRetryTimer;
  v42->_watchSyncRetryContextByRetryTimer = (NSMapTable *)v125;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v127 = objc_claimAutoreleasedReturnValue();
  pendingResponsesForAccessoryFinder = v42->_pendingResponsesForAccessoryFinder;
  v42->_pendingResponsesForAccessoryFinder = (NSMutableArray *)v127;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v129 = objc_claimAutoreleasedReturnValue();
  pendingRemoteSessions = v42->_pendingRemoteSessions;
  v42->_pendingRemoteSessions = (NSMutableDictionary *)v129;

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v131 = objc_claimAutoreleasedReturnValue();
  pendingResidentSetupSessions = v42->_pendingResidentSetupSessions;
  v42->_pendingResidentSetupSessions = (NSMutableSet *)v131;

  HMDispatchQueueNameString();
  v133 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v134 = (const char *)objc_msgSend(v133, "UTF8String");
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v135 = objc_claimAutoreleasedReturnValue();
  v136 = dispatch_queue_create(v134, v135);
  clientConnectionQueue = v42->_clientConnectionQueue;
  v42->_clientConnectionQueue = (OS_dispatch_queue *)v136;

  v138 = -[HMDClientConnection initWithHomeManager:queue:messageDispatcher:]([HMDClientConnection alloc], "initWithHomeManager:queue:messageDispatcher:", v42, v42->_clientConnectionQueue, self->_messageDispatcher);
  clientConnection = v42->_clientConnection;
  v42->_clientConnection = v138;

  v140 = -[HMDAssistantGather initWithHomeManager:queue:]([HMDAssistantGather alloc], "initWithHomeManager:queue:", v42, v42->_clientConnectionQueue);
  gatherer = v42->_gatherer;
  v42->_gatherer = v140;

  -[HMDHomeManager _getAssistantHashingData](v42, "_getAssistantHashingData");
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _setAssistantHashingData:](v42, "_setAssistantHashingData:", v142);

  +[HMDLaunchHandler sharedHandler](HMDLaunchHandler, "sharedHandler");
  v143 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v143, "removePersistentRelaunchRegistrationsIfNecessary");

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v144 = objc_claimAutoreleasedReturnValue();
  pendingFragmentationStream = v42->_pendingFragmentationStream;
  v42->_pendingFragmentationStream = (NSMutableDictionary *)v144;

  +[HMDPersistentStore unarchiveIDSDataSyncJournal](HMDPersistentStore, "unarchiveIDSDataSyncJournal");
  v146 = objc_claimAutoreleasedReturnValue();
  pendingDataSyncAcks = v42->_pendingDataSyncAcks;
  v42->_pendingDataSyncAcks = (NSMutableDictionary *)v146;

  v42->_ignoreFirstTimeReachabilityChanged = 1;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v148 = objc_claimAutoreleasedReturnValue();
  dialogCancelationContexts = v42->_dialogCancelationContexts;
  v42->_dialogCancelationContexts = (NSMutableSet *)v148;

  +[HMDLocation sharedManager](HMDLocation, "sharedManager");
  v150 = objc_claimAutoreleasedReturnValue();
  locationHandler = v42->_locationHandler;
  v42->_locationHandler = (HMDLocation *)v150;

  +[HMDFMFHandler sharedHandler](HMDFMFHandler, "sharedHandler");
  v152 = objc_claimAutoreleasedReturnValue();
  fmfHandler = v42->_fmfHandler;
  v42->_fmfHandler = (HMDFMFHandler *)v152;

  v42->_needToCleanUpKeys = 0;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v154 = objc_claimAutoreleasedReturnValue();
  siriSyncNotificationReasons = v42->_siriSyncNotificationReasons;
  v42->_siriSyncNotificationReasons = (NSMutableArray *)v154;

  v156 = -[HMDCHIPDataSource initWithHomeManager:]([HMDCHIPDataSource alloc], "initWithHomeManager:", v42);
  chipDataSource = v42->_chipDataSource;
  v42->_chipDataSource = v156;

  v158 = -[HMDAccessorySetupManager initWithWorkQueue:homeManager:]([HMDAccessorySetupManager alloc], "initWithWorkQueue:homeManager:", self->_workQueue, v42);
  accessorySetupManager = v42->_accessorySetupManager;
  v42->_accessorySetupManager = v158;

  -[HMDAccessorySetupManager configure](v42->_accessorySetupManager, "configure");
  v160 = [HMDAccessorySetupCoordinator alloc];
  workQueue = self->_workQueue;
  -[HMDAccessorySetupManager messageDispatcher](v42->_accessorySetupManager, "messageDispatcher");
  v162 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDAccessoryBrowser chipAccessoryServerBrowser](v42->_accessoryBrowserInternal, "chipAccessoryServerBrowser");
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  v164 = -[HMDAccessorySetupCoordinator initWithWorkQueue:messageDispatcher:chipAccessoryServerBrowser:chipDataSource:](v160, "initWithWorkQueue:messageDispatcher:chipAccessoryServerBrowser:chipDataSource:", workQueue, v162, v163, v42->_chipDataSource);
  accessorySetupCoordinator = v42->_accessorySetupCoordinator;
  v42->_accessorySetupCoordinator = (HMDAccessorySetupCoordinator *)v164;

  -[HMDAccessorySetupCoordinator configure](v42->_accessorySetupCoordinator, "configure");
  -[HMDAccessorySetupManager setAccessorySetupCoordinator:](v42->_accessorySetupManager, "setAccessorySetupCoordinator:", v42->_accessorySetupCoordinator);
  v166 = -[HMDMTSPairingServer initWithAccessoryBrowser:]([HMDMTSPairingServer alloc], "initWithAccessoryBrowser:", v534);
  v167 = -[HMDMTSDeviceSetupServer initWithAccessorySetupManager:]([HMDMTSDeviceSetupServer alloc], "initWithAccessorySetupManager:", v42->_accessorySetupManager);
  v168 = -[HMDMTSAuthorizationServer initWithAccountManager:]([HMDMTSAuthorizationServer alloc], "initWithAccountManager:", v42->_appleAccountManager);
  v169 = -[HMDMTSXPCServer initWithPairingServer:deviceSetupServer:authorizationServer:]([HMDMTSXPCServer alloc], "initWithPairingServer:deviceSetupServer:authorizationServer:", v166, v167, v168);
  mtsXPCServer = v42->_mtsXPCServer;
  v42->_mtsXPCServer = v169;

  v20 = 0x1E0C99000uLL;
  -[HMDMTSXPCServer start](v42->_mtsXPCServer, "start");

  v19 = &OBJC_IVAR___HMDHomeManager__hh2MigrationInProgress;
  v18 = v537;
LABEL_36:
  v171 = -[HMDMicroLocationManager initWithLocationManager:]([HMDMicroLocationManager alloc], "initWithLocationManager:", *(Class *)((char *)&self->super.super.isa + v19[69]));
  microLocationManager = self->_microLocationManager;
  self->_microLocationManager = v171;

  v173 = -[HMDMicroLocationLogEventObserver initWithDataSource:microLocationManager:]([HMDMicroLocationLogEventObserver alloc], "initWithDataSource:microLocationManager:", self, self->_microLocationManager);
  microLocationLogEventObserver = self->_microLocationLogEventObserver;
  self->_microLocationLogEventObserver = v173;

  self->_siriSyncNotificationTime = 0;
  p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  v177 = objc_msgSend(v176, "supportsHomeInvitation");

  if (v177)
  {
    v178 = [HMDHH1IDSInvitationManager alloc];
    -[HMDHomeManager workQueue](self, "workQueue");
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    v180 = -[HMDHH1IDSInvitationManager initWithHomeManager:workQueue:](v178, "initWithHomeManager:workQueue:", self, v179);
    idsInvitationManager = self->_idsInvitationManager;
    self->_idsInvitationManager = v180;

  }
  objc_msgSend(*(id *)(v20 + 3616), "set");
  v182 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
  mergeIDsOfUsersOfRemovedSharedHomes = self->_mergeIDsOfUsersOfRemovedSharedHomes;
  self->_mergeIDsOfUsersOfRemovedSharedHomes = v182;

  self->_homeDataLoadedFromArchive = v18 != 0;
  v184 = 0x1E0C99000;
  if (v18)
    v185 = objc_msgSend(v18, "accessAllowedWhenLocked");
  else
    v185 = isiOSDevice();
  self->_accessAllowedWhenLocked = v185;
  objc_msgSend(v18, "unprocessedOperationIdentifiers");
  v186 = (void *)objc_claimAutoreleasedReturnValue();

  if (v186)
  {
    v187 = *(void **)(v20 + 3616);
    objc_msgSend(v18, "unprocessedOperationIdentifiers");
    v188 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v187, "setWithArray:", v188);
    v189 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
    unprocessedOperationModelIdentifiers = self->_unprocessedOperationModelIdentifiers;
    self->_unprocessedOperationModelIdentifiers = v189;

LABEL_43:
    goto LABEL_45;
  }
  if (!self->_unprocessedOperationModelIdentifiers)
  {
    objc_msgSend(*(id *)(v20 + 3616), "set");
    v297 = (NSMutableSet *)objc_claimAutoreleasedReturnValue();
    v188 = self->_unprocessedOperationModelIdentifiers;
    self->_unprocessedOperationModelIdentifiers = v297;
    goto LABEL_43;
  }
LABEL_45:
  objc_msgSend(v18, "homes");
  v191 = (void *)objc_claimAutoreleasedReturnValue();

  if (v191)
  {
    objc_msgSend(v18, "homes");
    v192 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager setHomes:](self, "setHomes:", v192);

  }
  if (objc_msgSend(v18, "dataVersion") <= 2)
  {
    v565 = 0u;
    v566 = 0u;
    v563 = 0u;
    v564 = 0u;
    v193 = self->_homes;
    v194 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v193, "countByEnumeratingWithState:objects:count:", &v563, v587, 16);
    if (v194)
    {
      v195 = v194;
      v196 = *(_QWORD *)v564;
      do
      {
        for (i = 0; i != v195; ++i)
        {
          if (*(_QWORD *)v564 != v196)
            objc_enumerationMutation(v193);
          v198 = *(void **)(*((_QWORD *)&v563 + 1) + 8 * i);
          v199 = objc_msgSend(v198, "allowsRemoteAccess");
          v559 = 0u;
          v560 = 0u;
          v561 = 0u;
          v562 = 0u;
          objc_msgSend(v198, "users");
          v200 = (void *)objc_claimAutoreleasedReturnValue();
          v201 = objc_msgSend(v200, "countByEnumeratingWithState:objects:count:", &v559, v586, 16);
          if (v201)
          {
            v202 = v201;
            v203 = *(_QWORD *)v560;
            do
            {
              for (j = 0; j != v202; ++j)
              {
                if (*(_QWORD *)v560 != v203)
                  objc_enumerationMutation(v200);
                objc_msgSend(*(id *)(*((_QWORD *)&v559 + 1) + 8 * j), "setRemoteAccessAllowed:", v199);
              }
              v202 = objc_msgSend(v200, "countByEnumeratingWithState:objects:count:", &v559, v586, 16);
            }
            while (v202);
          }

        }
        v195 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v193, "countByEnumeratingWithState:objects:count:", &v563, v587, 16);
      }
      while (v195);
    }

    v18 = v537;
    p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
    v184 = 0x1E0C99000uLL;
  }
  objc_msgSend(v18, "primaryHomeUUID");
  v205 = (NSUUID *)objc_claimAutoreleasedReturnValue();
  primaryHomeUUID = self->_primaryHomeUUID;
  self->_primaryHomeUUID = v205;

  self->_homeManagerZoneFirstFetch = 1;
  v207 = *(void **)(v184 + 3560);
  objc_msgSend(v18, "cloudZones");
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v207, "arrayWithArray:", v208);
  v209 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
  cloudZones = self->_cloudZones;
  self->_cloudZones = v209;

  objc_msgSend(v18, "lastCurrentHomeUUID");
  v211 = (NSUUID *)objc_claimAutoreleasedReturnValue();
  lastCurrentHomeUUID = self->_lastCurrentHomeUUID;
  self->_lastCurrentHomeUUID = v211;

  objc_msgSend(v18, "dataTag");
  v213 = (NSUUID *)objc_claimAutoreleasedReturnValue();
  dataTag = self->_dataTag;
  self->_dataTag = v213;

  objc_msgSend(v18, "UUIDsOfRemovedHomes");
  v215 = objc_claimAutoreleasedReturnValue();
  if (v215 && (v216 = (void *)v215, v217 = isWatch(), v216, !v217))
  {
    v220 = *(void **)(v184 + 3560);
    objc_msgSend(v18, "UUIDsOfRemovedHomes");
    v219 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v220, "arrayWithArray:", v219);
    v221 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    uuidsOfRemovedHomes = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v221;

  }
  else
  {
    objc_msgSend(*(id *)(v184 + 3560), "array");
    v218 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    v219 = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v218;
  }

  self->_residentEnabledState = objc_msgSend(v18, "residentEnabledState");
  getAssistantConfigurationVersion();
  v223 = (void *)objc_claimAutoreleasedReturnValue();
  self->_assistantGenerationCounter = objc_msgSend(v223, "unsignedIntegerValue");

  self->_homeDatabaseSize = 0;
  objc_msgSend(v18, "UUIDsOfRemovedHomes");
  v224 = objc_claimAutoreleasedReturnValue();
  if (v224 && (v225 = (void *)v224, v226 = isWatch(), v225, !v226))
  {
    v229 = *(void **)(v184 + 3560);
    objc_msgSend(v18, "UUIDsOfRemovedHomes");
    v228 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v229, "arrayWithArray:", v228);
    v230 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    v231 = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v230;

  }
  else
  {
    objc_msgSend(*(id *)(v184 + 3560), "array");
    v227 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    v228 = self->_uuidsOfRemovedHomes;
    self->_uuidsOfRemovedHomes = v227;
  }

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v232 = (void *)objc_claimAutoreleasedReturnValue();
  v233 = objc_msgSend(v232, "supportsFirmwareUpdate");

  if (v233)
  {
    v234 = (void *)MEMORY[0x1D17BA0A0]();
    v235 = self;
    HMFGetOSLogHandle();
    v236 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v236, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v237 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v237;
      _os_log_impl(&dword_1CD062000, v236, OS_LOG_TYPE_DEBUG, "%{public}@Starting AccessoryFirmwareUpdateManager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v234);
    v238 = -[HMDAccessoryFirmwareUpdateManager initWithHomeManager:]([HMDAccessoryFirmwareUpdateManager alloc], "initWithHomeManager:", v235);
    accessoryFirmwareUpdateManager = v235->_accessoryFirmwareUpdateManager;
    v235->_accessoryFirmwareUpdateManager = v238;

  }
  if ((_os_feature_enabled_impl() & 1) != 0
    || CFPreferencesGetAppBooleanValue(CFSTR("MatterOTA"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0))
  {
    v240 = -[HMDMatterSoftwareUpdateProviderDelegate initWithHomeManager:accessoryFirmwareUpdateManager:]([HMDMatterSoftwareUpdateProviderDelegate alloc], "initWithHomeManager:accessoryFirmwareUpdateManager:", self, self->_accessoryFirmwareUpdateManager);
    matterSoftwareUpdateProviderDelegate = self->_matterSoftwareUpdateProviderDelegate;
    self->_matterSoftwareUpdateProviderDelegate = v240;

  }
  objc_msgSend(v18, "accessories");
  v242 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "homes");
  v243 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _associateAccessories:withHomes:](self, "_associateAccessories:withHomes:", v242, v243);

  -[HMDHomeManager _auditKeychainEntries](self, "_auditKeychainEntries");
  if (-[HMDHomeManager _updateAccessoriesConfigured](self, "_updateAccessoriesConfigured"))
    -[HMDHomeManager _postPreferencesChangedNotification](self);
  v557 = 0u;
  v558 = 0u;
  v555 = 0u;
  v556 = 0u;
  objc_msgSend(v18, "homes");
  v244 = (void *)objc_claimAutoreleasedReturnValue();
  v245 = objc_msgSend(v244, "countByEnumeratingWithState:objects:count:", &v555, v585, 16);
  if (v245)
  {
    v246 = v245;
    v247 = *(_QWORD *)v556;
    do
    {
      for (k = 0; k != v246; ++k)
      {
        if (*(_QWORD *)v556 != v247)
          objc_enumerationMutation(v244);
        objc_msgSend(*(id *)(*((_QWORD *)&v555 + 1) + 8 * k), "fixupHomeAfterDecoding");
      }
      v246 = objc_msgSend(v244, "countByEnumeratingWithState:objects:count:", &v555, v585, 16);
    }
    while (v246);
  }

  objc_msgSend(v18, "incomingInvitations");
  v249 = (void *)objc_claimAutoreleasedReturnValue();
  v250 = (void *)objc_msgSend(v249, "mutableCopy");

  v251 = v250;
  if (!v250)
  {
    objc_msgSend(*(id *)(v184 + 3560), "array");
    v251 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_storeStrong((id *)&self->_incomingInvitations, v251);
  if (!v250)

  if (self->_residentEnabledState == 1)
  {
    objc_msgSend(MEMORY[0x1E0D28690], "productInfo");
    v252 = (void *)objc_claimAutoreleasedReturnValue();
    v253 = objc_msgSend(v252, "productClass");

    if (v253 == 4)
    {
      v254 = (void *)MEMORY[0x1D17BA0A0]();
      v255 = self;
      HMFGetOSLogHandle();
      v256 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v257 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v257;
        _os_log_impl(&dword_1CD062000, v256, OS_LOG_TYPE_DEFAULT, "%{public}@Force enabling as a resident", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v254);
      self->_residentEnabledState = 2;
    }
  }
  if (a12)
  {
    -[HMDHomeManager uuid](self, "uuid");
    v258 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("ReloadHomeData"), v258, 0);

    -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager homes](self, "homes");
    v260 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v259, "updateTotalHomes:", objc_msgSend(v260, "count"));

    -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
    v261 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v261, "updateLocalDataDecryptionFailed:", v527);

    goto LABEL_114;
  }
  v262 = HMFUptime();
  v264 = v263;
  v265 = (void *)MEMORY[0x1D17BA0A0](v262);
  v266 = self;
  HMFGetOSLogHandle();
  v267 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v267, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v268 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    *(_QWORD *)&buf[4] = v268;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
    *(_WORD *)&buf[22] = 2112;
    v574 = CFSTR("Start backing store setup");
    v575 = 2114;
    v576 = CFSTR("state");
    v577 = 2112;
    v578 = CFSTR("homeManagerLoadingBackingStore");
    _os_log_impl(&dword_1CD062000, v267, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v265);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v269 = (void *)objc_claimAutoreleasedReturnValue();
  v270 = objc_alloc(MEMORY[0x1E0D334C8]);
  v583 = CFSTR("state");
  v584 = CFSTR("homeManagerLoadingBackingStore");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v584, &v583, 1);
  v271 = (void *)objc_claimAutoreleasedReturnValue();
  v272 = (void *)objc_msgSend(v270, "initWithTag:data:", CFSTR("homeManagerInitStart"), v271);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v273 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v269, "submitTaggedEvent:processorList:", v272, v273);

  v533[2](v533, v266, 0);
  v274 = objc_claimAutoreleasedReturnValue();
  backingStore = v266->_backingStore;
  v266->_backingStore = (HMDBackingStore *)v274;

  -[HMDBackingStore setDelegate:](v266->_backingStore, "setDelegate:", v266);
  -[HMDHomeManager appleAccountManager](v266, "appleAccountManager");
  v276 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v276, "configureWithBackingStore:", v266->_backingStore);

  -[HMDHomeManager remoteAccountManager](v266, "remoteAccountManager");
  v277 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v277, "setBackingStore:", v266->_backingStore);

  v278 = (void *)MEMORY[0x1D17BA0A0]();
  v279 = v266;
  HMFGetOSLogHandle();
  v280 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v280, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v281 = (id)objc_claimAutoreleasedReturnValue();
    v282 = (void *)MEMORY[0x1E0CB3940];
    HMFUptime();
    objc_msgSend(v282, "stringWithFormat:", CFSTR("%.3f"), v283 - v264);
    v284 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    *(_QWORD *)&buf[4] = v281;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
    *(_WORD *)&buf[22] = 2112;
    v574 = CFSTR("Backing store setup done");
    v575 = 2114;
    v576 = CFSTR("state");
    v577 = 2112;
    v578 = CFSTR("homeManagerLoadedBackingStore");
    v579 = 2114;
    v580 = CFSTR("duration");
    v581 = 2112;
    v582 = v284;
    _os_log_impl(&dword_1CD062000, v280, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v278);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v285 = (void *)objc_claimAutoreleasedReturnValue();
  v286 = objc_alloc(MEMORY[0x1E0D334C8]);
  v287 = (void *)MEMORY[0x1E0CB3940];
  HMFUptime();
  objc_msgSend(v287, "stringWithFormat:", CFSTR("%.3f"), v288 - v264);
  v289 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v290 = (void *)objc_claimAutoreleasedReturnValue();
  v291 = (void *)objc_msgSend(v286, "initWithTag:data:", CFSTR("homeManagerInitStart"), v290, CFSTR("state"), CFSTR("homeManagerLoadedBackingStore"), CFSTR("duration"), v289);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v292 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v285, "submitTaggedEvent:processorList:", v291, v292);

  p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v293 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v291) = objc_msgSend(v293, "supportsCloudDataSync");

  v18 = v537;
  if ((_DWORD)v291)
  {
    if (disableCloudDataSync)
    {
      v294 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v295 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v295, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v296 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v296;
        _os_log_impl(&dword_1CD062000, v295, OS_LOG_TYPE_DEFAULT, "%{public}@Not creating the cloud data sync filter due to preference setting present on the device", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v294);
      v279->_accountActive = 1;
      goto LABEL_113;
    }
    if (enableRetailDemoSetup || v279->_demoFinalized)
    {
      v298 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v299 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v299, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v300 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v300;
        _os_log_impl(&dword_1CD062000, v299, OS_LOG_TYPE_DEFAULT, "%{public}@Not creating the cloud data sync filter because the device is in demo mode", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v298);
      v279->_accountActive = 1;
      -[HMDHomeManager homes](v279, "homes");
      v301 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v301, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_388);

      -[HMDHomeManager _scheduleSendHomeDataToAllWatches](v279, "_scheduleSendHomeDataToAllWatches");
      goto LABEL_113;
    }
    +[HMDPersistentStore removeServerTokenDataFile](HMDPersistentStore, "removeServerTokenDataFile");
    v464 = -[HMDCloudCache initWithBackingStore:workQueue:]([HMDCloudCache alloc], "initWithBackingStore:workQueue:", v266->_backingStore, v279->_workQueue);
    v465 = dispatch_group_create();
    dispatch_group_enter(v465);
    v553[0] = MEMORY[0x1E0C809B0];
    v553[1] = 3221225472;
    v553[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_2;
    v553[3] = &unk_1E89C2350;
    v466 = v465;
    v554 = v466;
    v467 = (void *)MEMORY[0x1D17BA0A0](-[HMDCloudCache createAndFetchZonesFromBackingStore:](v464, "createAndFetchZonesFromBackingStore:", v553));
    HMFGetOSLogHandle();
    v468 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v468, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v469 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v469;
      _os_log_impl(&dword_1CD062000, v468, OS_LOG_TYPE_INFO, "%{public}@Waiting for cloudCache to be created", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v467);
    dispatch_group_wait(v466, 0xFFFFFFFFFFFFFFFFLL);
    -[HMDCloudCache legacyZone](v464, "legacyZone");
    v470 = (void *)objc_claimAutoreleasedReturnValue();
    v471 = objc_msgSend(v470, "isHomeDataRecordAvailable");

    v526 = v466;
    if (v527)
    {
      v472 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v473 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v473, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v474 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v474;
        _os_log_impl(&dword_1CD062000, v473, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping locally cached legacy cloud record because local decryption has failed", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v472);
      -[HMDCloudCache legacyZone](v464, "legacyZone");
      v475 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v475, "setServerChangeToken:", 0);

      -[HMDCloudCache legacyZone](v464, "legacyZone");
      v476 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v476, "dropCachedRecords");

      v477 = (void *)MEMORY[0x1D17BA0A0]();
      v478 = v279;
      HMFGetOSLogHandle();
      v479 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v479, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v480 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v480;
        _os_log_impl(&dword_1CD062000, v479, OS_LOG_TYPE_INFO, "%{public}@Resetting databaseServerChangeToken because record conflict", buf, 0xCu);

        v18 = v537;
      }

      objc_autoreleasePoolPop(v477);
      -[HMDCloudCache setDatabaseServerChangeToken:](v464, "setDatabaseServerChangeToken:", 0);
      -[HMDCloudCache persistDatabaseServerChangeToken](v464, "persistDatabaseServerChangeToken");
    }
    else if ((v471 & 1) != 0)
    {
      v522 = 1;
LABEL_201:
      -[HMDCloudCache legacyZone](v464, "legacyZone");
      v489 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v489, "serverChangeToken");
      v490 = (void *)objc_claimAutoreleasedReturnValue();
      v491 = v490 != 0;

      v492 = v464;
      -[HMDCloudCache homeManagerZone](v464, "homeManagerZone");
      v493 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v493, "serverChangeToken");
      v494 = (void *)objc_claimAutoreleasedReturnValue();
      v495 = v494 != 0;

      -[HMDHomeManager appleAccountManager](v279, "appleAccountManager");
      v496 = (void *)objc_claimAutoreleasedReturnValue();
      v497 = [HMDCloudDataSyncStateFilter alloc];
      -[HMDHomeManager messageDispatcher](v279, "messageDispatcher");
      v498 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager homes](v279, "homes");
      v499 = (void *)objc_claimAutoreleasedReturnValue();
      v500 = objc_msgSend(v499, "count");
      v523 = v496;
      objc_msgSend(v496, "account");
      v501 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v521) = v527;
      v502 = -[HMDCloudDataSyncStateFilter initWithName:homeManager:messageDispatcher:serverTokenAvailable:homeDataHasBeenDecrypted:homeManagerServerTokenAvailable:localDataDecryptionFailed:totalHomes:currentAccount:](v497, "initWithName:homeManager:messageDispatcher:serverTokenAvailable:homeDataHasBeenDecrypted:homeManagerServerTokenAvailable:localDataDecryptionFailed:totalHomes:currentAccount:", CFSTR("CloudDataSync"), v279, v498, v491, v522, v495, v521, v500, v501);

      objc_msgSend(v531, "addMessageFilter:", v502);
      objc_storeStrong((id *)&v279->_cloudDataSyncStateFilter, v502);
      +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
      v503 = (void *)objc_claimAutoreleasedReturnValue();
      v504 = objc_msgSend(v503, "isHomeEnabled");

      v505 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v506 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v506, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v507 = (id)objc_claimAutoreleasedReturnValue();
        v508 = v507;
        v509 = "not ";
        if ((_DWORD)v504)
          v509 = "";
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v507;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v509;
        _os_log_impl(&dword_1CD062000, v506, OS_LOG_TYPE_DEFAULT, "%{public}@Updating the cloud sync filter state with iCloud switch state to: %senabled", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v505);
      -[HMDHomeManager cloudDataSyncStateFilter](v279, "cloudDataSyncStateFilter");
      v510 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v510, "updateiCloudSwitchState:", v504);

      v511 = -[HMDCloudManagerDataSource initWithHomeManager:]([HMDCloudManagerDataSource alloc], "initWithHomeManager:", v279);
      cloudDataSource = v279->_cloudDataSource;
      v279->_cloudDataSource = v511;

      v513 = [HMDCloudManager alloc];
      -[HMDHomeManager cloudDataSource](v279, "cloudDataSource");
      v514 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager syncManager](v279, "syncManager");
      v515 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager logEventSubmitter](v279, "logEventSubmitter");
      v516 = (void *)objc_claimAutoreleasedReturnValue();
      v517 = -[HMDCloudManager initWithMessageDispatcher:cloudDataSyncStateFilter:cloudCache:delegate:dataSource:syncManager:logEventSubmitter:callbackQueue:](v513, "initWithMessageDispatcher:cloudDataSyncStateFilter:cloudCache:delegate:dataSource:syncManager:logEventSubmitter:callbackQueue:", v532, v502, v492, v279, v514, v515, v516, v279->_workQueue);
      cloudDataSyncManager = v279->_cloudDataSyncManager;
      v279->_cloudDataSyncManager = (HMDCloudManager *)v517;

      if ((_DWORD)v504 && objc_msgSend(v523, "isLoggedInToPrimaryAccount"))
        -[HMDCloudManager registerForPushNotifications](v279->_cloudDataSyncManager, "registerForPushNotifications");
      -[HMDHomeManager appleAccountManager](v279, "appleAccountManager");
      v519 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDCloudManager cloudCache](v279->_cloudDataSyncManager, "cloudCache");
      v520 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v519, "setCloudCache:", v520);

      v18 = v537;
      p_cache = (void **)(HMDCloudSyncLegacyFetchLogEvent + 16);
      goto LABEL_113;
    }
    if (objc_msgSend(v18, "dataVersion") >= 4 && objc_msgSend(v18, "schemaVersion") <= 4)
    {
      v481 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v482 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v482, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v483 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v483;
        _os_log_impl(&dword_1CD062000, v482, OS_LOG_TYPE_DEFAULT, "%{public}@Resetting the legacy server token for migration", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v481);
      -[HMDCloudCache legacyZone](v464, "legacyZone");
      v484 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v484, "setServerChangeToken:", 0);

      v485 = (void *)MEMORY[0x1D17BA0A0]();
      v486 = v279;
      HMFGetOSLogHandle();
      v487 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v487, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v488 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v488;
        _os_log_impl(&dword_1CD062000, v487, OS_LOG_TYPE_INFO, "%{public}@Resetting databaseServerChangeToken for migration", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v485);
      -[HMDCloudCache setDatabaseServerChangeToken:](v464, "setDatabaseServerChangeToken:", 0);
      -[HMDCloudCache persistDatabaseServerChangeToken](v464, "persistDatabaseServerChangeToken");
    }
    v522 = 0;
    goto LABEL_201;
  }
LABEL_113:
  -[HMDHomeManager _registerForMessages](v279, "_registerForMessages");
  -[HMDHomeManager __checkForBootTimeLogout](v279, "__checkForBootTimeLogout");
LABEL_114:
  v302 = objc_alloc_init(HMDIDSServerBag);
  -[HMDHomeManager setIdsServerBag:](self, "setIdsServerBag:", v302);

  -[HMDHomeManager idsServerBag](self, "idsServerBag");
  v303 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v303, "setDelegate:", self);

  objc_msgSend(v18, "homes");
  v304 = objc_claimAutoreleasedReturnValue();
  v305 = (void *)v304;
  if (v304)
    v306 = v304;
  else
    v306 = MEMORY[0x1E0C9AA60];
  v307 = -[HMDHomeManager _configureHomes:uncommittedTransactions:](self, "_configureHomes:uncommittedTransactions:", v306, v536);

  -[HMDHomeManager setRecoveryVersion:](self, "setRecoveryVersion:", objc_msgSend(v18, "recoveryVersion"));
  -[HMDHomeManager migrateModelObjectsToCloud:schemaVersion:](self, "migrateModelObjectsToCloud:schemaVersion:", objc_msgSend(v18, "dataVersion"), objc_msgSend(v18, "schemaVersion"));
  v308 = [HMDApplicationData alloc];
  objc_msgSend(v18, "applicationData");
  v309 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v309, "dictionary");
  v310 = (void *)objc_claimAutoreleasedReturnValue();
  v311 = -[HMDApplicationData initWithDictionary:parentUUID:](v308, "initWithDictionary:parentUUID:", v310, self->_uuid);
  appData = self->_appData;
  self->_appData = v311;

  if (a12)
  {
    -[HMDHomeManager updatePowerAssertion](self, "updatePowerAssertion");
    objc_msgSend(v18, "accessories");
    v313 = (void *)objc_claimAutoreleasedReturnValue();
    v314 = objc_msgSend(v313, "count");

    if (v314)
    {
      -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
      v315 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v315, "startDiscoveringPairedAccessories");

    }
  }
  else
  {
    -[HMDPowerManager start](self->_powerManager, "start");
    -[HMDHomeManager updatePowerAssertion](self, "updatePowerAssertion");
    -[HMDHomeManager _monitorReachability](self, "_monitorReachability");
    -[HMDHomeManager _checkForAccountChanged](self, "_checkForAccountChanged");
    -[HMDHomeManager _fetchDataFromCloud](self, "_fetchDataFromCloud");
    -[HMDHomeManager mobileAssetManager](self, "mobileAssetManager");
    v316 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v316, "handleMetadataAssetUpdated");

    -[HMDHomeManager notificationCenter](self, "notificationCenter");
    v317 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v317, "addObserver:selector:name:object:", self, sel_accountAvailabilityChanged_, *MEMORY[0x1E0C94690], 0);

    -[HMDHomeManager notificationCenter](self, "notificationCenter");
    v318 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
    v319 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v318, "addObserver:selector:name:object:", self, sel_handleAccountSettingsUpdate_, CFSTR("HMDAppleAccountSettingsUpdatedNotification"), v319);

    -[HMDHomeManager _registerForXPCConnectionNotifications](self, "_registerForXPCConnectionNotifications");
    objc_msgSend(v18, "accessories");
    v320 = (void *)objc_claimAutoreleasedReturnValue();
    v321 = objc_msgSend(v320, "count") != 0;

    -[HMDAccessoryBrowser activate:](self->_accessoryBrowserInternal, "activate:", v321);
    if (isiOSDevice())
    {
      v322 = objc_alloc(MEMORY[0x1E0D286C8]);
      v323 = (HMFTimer *)objc_msgSend(v322, "initWithTimeInterval:options:", 4, (double)(unint64_t)checkRemoteAccessTimeout);
      remoteAccessHealthMonitorTimer = self->_remoteAccessHealthMonitorTimer;
      self->_remoteAccessHealthMonitorTimer = v323;

      -[HMFTimer setDelegate:](self->_remoteAccessHealthMonitorTimer, "setDelegate:", self);
      v325 = self->_remoteAccessHealthMonitorTimer;
      -[HMDHomeManager workQueue](self, "workQueue");
      v326 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMFTimer setDelegateQueue:](v325, "setDelegateQueue:", v326);

      -[HMFTimer resume](self->_remoteAccessHealthMonitorTimer, "resume");
    }
  }
  v551 = 0u;
  v552 = 0u;
  v549 = 0u;
  v550 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v327 = (void *)objc_claimAutoreleasedReturnValue();
  v328 = objc_msgSend(v327, "countByEnumeratingWithState:objects:count:", &v549, v572, 16);
  if (v328)
  {
    v329 = v328;
    v330 = *(_QWORD *)v550;
    do
    {
      for (m = 0; m != v329; ++m)
      {
        if (*(_QWORD *)v550 != v330)
          objc_enumerationMutation(v327);
        v332 = *(void **)(*((_QWORD *)&v549 + 1) + 8 * m);
        objc_msgSend(v332, "migrateOwnedTriggers");
        v333 = (void *)objc_claimAutoreleasedReturnValue();
        if (v333)
          -[HMDHomeManager _saveWithReason:information:postSyncNotification:](self, "_saveWithReason:information:postSyncNotification:", CFSTR("kAddTriggerRequestKey"), v333, 0);
        objc_msgSend(v332, "checkTimerTriggers");

      }
      v329 = objc_msgSend(v327, "countByEnumeratingWithState:objects:count:", &v549, v572, 16);
    }
    while (v329);
  }

  residentMesh = self->_residentMesh;
  self->_residentMesh = 0;

  objc_msgSend(p_cache + 128, "deviceCapabilities");
  v335 = (void *)objc_claimAutoreleasedReturnValue();
  v336 = objc_msgSend(v335, "isResidentCapable");

  if (v336)
  {
    v337 = (void *)MEMORY[0x1D17BA0A0]();
    v338 = self;
    HMFGetOSLogHandle();
    v339 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v339, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v340 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager isResidentEnabled](v338, "isResidentEnabled");
      HMFBooleanToString();
      v341 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v340;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v341;
      _os_log_impl(&dword_1CD062000, v339, OS_LOG_TYPE_DEFAULT, "%{public}@Initialize resident mesh: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v337);
    v342 = -[HMDResidentMesh initWithHomeManager:residentEnabled:]([HMDResidentMesh alloc], "initWithHomeManager:residentEnabled:", v338, -[HMDHomeManager isResidentEnabled](v338, "isResidentEnabled"));
    v343 = self->_residentMesh;
    self->_residentMesh = v342;

  }
  objc_msgSend(p_cache + 128, "deviceCapabilities");
  v344 = (void *)objc_claimAutoreleasedReturnValue();
  v345 = objc_msgSend(v344, "supportsKeyTransferServer");

  if (v345)
  {
    v346 = HMDKeyTransferAgentServer;
  }
  else
  {
    objc_msgSend(p_cache + 128, "deviceCapabilities");
    v347 = (void *)objc_claimAutoreleasedReturnValue();
    v348 = objc_msgSend(v347, "supportsKeyTransferClient");

    if (!v348)
      goto LABEL_140;
    v346 = HMDKeyTransferAgentClient;
  }
  v349 = (HMDKeyTransferAgent *)objc_msgSend([v346 alloc], "initWithHomeManager:", self);
  keyTransferAgent = self->_keyTransferAgent;
  self->_keyTransferAgent = v349;

LABEL_140:
  v351 = (void *)MEMORY[0x1D17BA0A0]();
  v352 = self;
  HMFGetOSLogHandle();
  v353 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v353, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v354 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v354;
    _os_log_impl(&dword_1CD062000, v353, OS_LOG_TYPE_INFO, "%{public}@Refreshing display names of the users and invites", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v351);
  -[HMDHomeManager _handleContactStoreChanged](v352, "_handleContactStoreChanged");
  if (v307)
    -[HMDHomeManager _saveWithReason:information:saveOptions:](v352, "_saveWithReason:information:saveOptions:", CFSTR("kHomeConfigInternalRequestKey"), 0, 3);
  if (+[HMDHAPMetadata shouldUploadToCloudAfterHomedReady](HMDHAPMetadata, "shouldUploadToCloudAfterHomedReady"))
  {
    -[HMDHomeManager homes](v352, "homes");
    v355 = (void *)objc_claimAutoreleasedReturnValue();
    v356 = objc_msgSend(v355, "count");

    if (v356)
    {
      v357 = (void *)MEMORY[0x1D17BA0A0]();
      v358 = v352;
      HMFGetOSLogHandle();
      v359 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v359, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v360 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v360;
        _os_log_impl(&dword_1CD062000, v359, OS_LOG_TYPE_INFO, "%{public}@Home manager is ready now and there is at least one home. Evaluating the necessity of uploading metadata to the cloud.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v357);
      -[HMDHomeManager evaluateToPushMetadataWhenHomeKitInUse](v358, "evaluateToPushMetadataWhenHomeKitInUse");
    }
  }
  if (hasAssistantHashingKeyChanged())
  {
    v547 = 0u;
    v548 = 0u;
    v545 = 0u;
    v546 = 0u;
    -[HMDHomeManager homes](v352, "homes");
    v361 = (void *)objc_claimAutoreleasedReturnValue();
    v362 = objc_msgSend(v361, "countByEnumeratingWithState:objects:count:", &v545, v571, 16);
    if (v362)
    {
      v363 = v362;
      v364 = *(_QWORD *)v546;
      do
      {
        for (n = 0; n != v363; ++n)
        {
          if (*(_QWORD *)v546 != v364)
            objc_enumerationMutation(v361);
          objc_msgSend(*(id *)(*((_QWORD *)&v545 + 1) + 8 * n), "resetAccessoryHashedRouteIdentifiers");
        }
        v363 = objc_msgSend(v361, "countByEnumeratingWithState:objects:count:", &v545, v571, 16);
      }
      while (v363);
    }

    -[HMDHomeManager assistantSyncDataChanged:](v352, "assistantSyncDataChanged:", CFSTR("HMDAssistantEncryptionKeyChanged"));
  }
  else
  {
    -[HMDHomeManager workQueue](v352, "workQueue");
    v366 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_409;
    block[3] = &unk_1E89C2730;
    block[4] = v352;
    dispatch_async(v366, block);

  }
  v542 = 0u;
  v543 = 0u;
  v540 = 0u;
  v541 = 0u;
  -[HMDHomeManager homes](v352, "homes");
  v367 = (void *)objc_claimAutoreleasedReturnValue();
  v368 = objc_msgSend(v367, "countByEnumeratingWithState:objects:count:", &v540, v570, 16);
  if (v368)
  {
    v369 = v368;
    v370 = *(_QWORD *)v541;
    do
    {
      for (ii = 0; ii != v369; ++ii)
      {
        if (*(_QWORD *)v541 != v370)
          objc_enumerationMutation(v367);
        objc_msgSend(*(id *)(*((_QWORD *)&v540 + 1) + 8 * ii), "updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:", 1);
      }
      v369 = objc_msgSend(v367, "countByEnumeratingWithState:objects:count:", &v540, v570, 16);
    }
    while (v369);
  }

  objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
  v372 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v372, "preferenceForKey:", CFSTR("memoryMonitorPeriod"));
  v373 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v373, "numberValue");
  v374 = (void *)objc_claimAutoreleasedReturnValue();

  v375 = objc_alloc(MEMORY[0x1E0D286C8]);
  v535 = v374;
  objc_msgSend(v374, "doubleValue");
  v376 = (void *)objc_msgSend(v375, "initWithTimeInterval:options:", 12);
  -[HMDHomeManager setMemoryMonitorLogEventTimer:](v352, "setMemoryMonitorLogEventTimer:", v376);

  -[HMDHomeManager memoryMonitorLogEventTimer](v352, "memoryMonitorLogEventTimer");
  v377 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v377, "setDelegate:", v352);

  -[HMDHomeManager memoryMonitorLogEventTimer](v352, "memoryMonitorLogEventTimer");
  v378 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager workQueue](v352, "workQueue");
  v379 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v378, "setDelegateQueue:", v379);

  -[HMDHomeManager memoryMonitorLogEventTimer](v352, "memoryMonitorLogEventTimer");
  v380 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v380, "resume");

  v381 = [HMDDuetPredictionSubscriber alloc];
  -[HMDHomeManager workQueue](v352, "workQueue");
  v382 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](v352, "messageDispatcher");
  v383 = (void *)objc_claimAutoreleasedReturnValue();
  v384 = -[HMDDuetPredictionSubscriber initWithWorkQueue:messageDispatcher:](v381, "initWithWorkQueue:messageDispatcher:", v382, v383);
  -[HMDHomeManager setDuetSubscriber:](v352, "setDuetSubscriber:", v384);

  -[HMDHomeManager duetSubscriber](v352, "duetSubscriber");
  v385 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v385, "setDataSource:", v352);

  -[HMDHomeManager duetSubscriber](v352, "duetSubscriber");
  v386 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v386, "configure");

  if (v352)
  {
    -[HMDHomeManager metricsManager](v352, "metricsManager");
    v387 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v387, "logEventDispatcher");
    v388 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager biomeLogEventObserver](v352, "biomeLogEventObserver");
    v389 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = objc_opt_class();
    *(_QWORD *)&buf[8] = objc_opt_class();
    *(_QWORD *)&buf[16] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 3);
    v390 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v388, "addObserver:forEventClasses:", v389, v390);

    -[HMDHomeManager metricsManager](v352, "metricsManager");
    v391 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v391, "logEventDispatcher");
    v392 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager microLocationLogEventObserver](v352, "microLocationLogEventObserver");
    v393 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = objc_opt_class();
    *(_QWORD *)&buf[8] = objc_opt_class();
    *(_QWORD *)&buf[16] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 3);
    v394 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v392, "addObserver:forEventClasses:", v393, v394);

  }
  -[HMDHomeManager _notifyMetricsManagerOfConfigurationChange](v352, "_notifyMetricsManagerOfConfigurationChange");
  if (-[HMDHomeManager isResidentEnabled](v352, "isResidentEnabled"))
  {
    v395 = (void *)MEMORY[0x1D17BA0A0]();
    v396 = v352;
    HMFGetOSLogHandle();
    v397 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v397, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v398 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v398;
      _os_log_impl(&dword_1CD062000, v397, OS_LOG_TYPE_INFO, "%{public}@Resident is enabled. Create multi user settings metric event dispatcher, and register for daily event.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v395);
    v399 = [HMDMultiUserSettingsMetricsEventDispatcher alloc];
    uuid = self->_uuid;
    objc_msgSend(v396, "metricsManager");
    v401 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v401, "logEventSubmitter");
    v402 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v396, "metricsManager");
    v403 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v403, "dailyScheduler");
    v404 = (void *)objc_claimAutoreleasedReturnValue();
    v405 = -[HMDMultiUserSettingsMetricsEventDispatcher initWithIdentifier:logEventSubmitter:dailyScheduler:](v399, "initWithIdentifier:logEventSubmitter:dailyScheduler:", uuid, v402, v404);
    v406 = v396[64];
    v396[64] = (id)v405;

    objc_msgSend(v396[64], "setDataSource:", v396);
    objc_msgSend(v396[64], "registerForDailyMultiUserSettingsEvents");
  }
  v407 = HMFUptime();
  v409 = v408;
  v410 = (void *)MEMORY[0x1D17BA0A0](v407);
  v411 = v352;
  HMFGetOSLogHandle();
  v412 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v412, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v413 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    *(_QWORD *)&buf[4] = v413;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
    *(_WORD *)&buf[22] = 2112;
    v574 = CFSTR("Handling Home invitations");
    v575 = 2114;
    v576 = CFSTR("state");
    v577 = 2112;
    v578 = CFSTR("homeManagerHandledlingInvites");
    _os_log_impl(&dword_1CD062000, v412, OS_LOG_TYPE_DEBUG, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v410);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v414 = (void *)objc_claimAutoreleasedReturnValue();
  v415 = objc_alloc(MEMORY[0x1E0D334C8]);
  v568 = CFSTR("state");
  v569 = CFSTR("homeManagerHandledlingInvites");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v569, &v568, 1);
  v416 = (void *)objc_claimAutoreleasedReturnValue();
  v417 = (void *)objc_msgSend(v415, "initWithTag:data:", CFSTR("homeManagerInitStart"), v416);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v418 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v414, "submitTaggedEvent:processorList:", v417, v418);

  v419 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager _pruneExpiredIncomingInvitations](v411, "_pruneExpiredIncomingInvitations"));
  v420 = v411;
  HMFGetOSLogHandle();
  v421 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v421, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v422 = (id)objc_claimAutoreleasedReturnValue();
    v423 = (void *)MEMORY[0x1E0CB3940];
    HMFUptime();
    objc_msgSend(v423, "stringWithFormat:", CFSTR("%.3f"), v424 - v409);
    v425 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544898;
    *(_QWORD *)&buf[4] = v422;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = CFSTR("homeManagerInitStart");
    *(_WORD *)&buf[22] = 2112;
    v574 = CFSTR("Handled Home invitations");
    v575 = 2114;
    v576 = CFSTR("state");
    v577 = 2112;
    v578 = CFSTR("homeManagerHandledInvites");
    v579 = 2114;
    v580 = CFSTR("duration");
    v581 = 2112;
    v582 = v425;
    _os_log_impl(&dword_1CD062000, v421, OS_LOG_TYPE_INFO, "%{public}@tag=\"%{public}@\" desc=\"%@\" %{public}@=\"%@\" %{public}@=\"%@\", buf, 0x48u);

  }
  objc_autoreleasePoolPop(v419);
  objc_msgSend(MEMORY[0x1E0D334B8], "sharedInstance");
  v426 = (void *)objc_claimAutoreleasedReturnValue();
  v427 = objc_alloc(MEMORY[0x1E0D334C8]);
  v428 = (void *)MEMORY[0x1E0CB3940];
  HMFUptime();
  objc_msgSend(v428, "stringWithFormat:", CFSTR("%.3f"), v429 - v409);
  v430 = (void *)objc_claimAutoreleasedReturnValue();
  HMDTaggedLoggingCreateDictionary();
  v431 = (void *)objc_claimAutoreleasedReturnValue();
  v432 = (void *)objc_msgSend(v427, "initWithTag:data:", CFSTR("homeManagerInitStart"), v431, CFSTR("state"), CFSTR("homeManagerHandledInvites"), CFSTR("duration"), v430);
  objc_msgSend(MEMORY[0x1E0D28540], "currentTagProcessorList");
  v433 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v426, "submitTaggedEvent:processorList:", v432, v433);

  v528 = [HMDXPCEventRouterServer alloc];
  objc_msgSend(v420, "messageTargetUUID");
  v525 = (id)objc_claimAutoreleasedReturnValue();
  v434 = *MEMORY[0x1E0CB8F48];
  v435 = *MEMORY[0x1E0CB8F50];
  objc_msgSend(v420, "messageDispatcher");
  v436 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v420, "workQueue");
  v437 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v420, "notificationCenter");
  v438 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v420, "registrationForwardingEventRouter");
  v439 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v420, "memoryEventRouter");
  v440 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v420, "lastEventStore");
  v441 = (void *)objc_claimAutoreleasedReturnValue();
  v442 = -[HMDXPCEventRouterServer initWithMessageUUID:dataSource:changeRegistrationsMessageName:updateEventsMessageName:messageDispatcher:queue:notificationCenter:subscriptionProvider:registrationEventRouter:storeReadHandle:](v528, "initWithMessageUUID:dataSource:changeRegistrationsMessageName:updateEventsMessageName:messageDispatcher:queue:notificationCenter:subscriptionProvider:registrationEventRouter:storeReadHandle:", v525, v420, v434, v435, v436, v437, v438, v439, v440, v441);
  objc_msgSend(v420, "setEventRouterXPCServer:", v442);

  objc_msgSend(v420, "eventRouterXPCServer");
  v443 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v443, "configure");

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v444 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v441) = objc_msgSend(v444, "isResidentCapable");

  if ((_DWORD)v441)
  {
    v445 = (void *)MEMORY[0x1D17BA0A0]();
    v446 = v420;
    HMFGetOSLogHandle();
    v447 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v447, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v448 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v448;
      _os_log_impl(&dword_1CD062000, v447, OS_LOG_TYPE_INFO, "%{public}@Creating siriEndPointSettingsSyncManager", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v445);
    v449 = [HMDSiriEndpointSettingsSyncManager alloc];
    objc_msgSend(v446, "memoryEventRouter");
    v450 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v446, "notificationCenter");
    v451 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v446, "workQueue");
    v452 = (void *)objc_claimAutoreleasedReturnValue();
    v453 = -[HMDSiriEndpointSettingsSyncManager initWithDataSource:subscriptionProvider:notificationCenter:workQueue:](v449, "initWithDataSource:subscriptionProvider:notificationCenter:workQueue:", v446, v450, v451, v452);
    objc_msgSend(v446, "setSiriEndPointSettingsSyncManager:", v453);

    objc_msgSend(v446, "siriEndPointSettingsSyncManager");
    v454 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v454, "configure");

  }
  +[HMDIDSServiceManager sharedManager](HMDIDSServiceManager, "sharedManager");
  v455 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v420, "workQueue");
  v456 = (void *)objc_claimAutoreleasedReturnValue();
  v457 = MEMORY[0x1E0C809B0];
  v539[0] = MEMORY[0x1E0C809B0];
  v539[1] = 3221225472;
  v539[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_419;
  v539[3] = &unk_1E89BC918;
  v539[4] = v420;
  objc_msgSend(v455, "retrieveFirewallWithQueue:completion:", v456, v539);

  objc_msgSend(v420, "setHasLoadedData:", 1);
  logAndPostNotification(CFSTR("HMDHomeManagerHomeDataLoadedNotification"), v420, 0);
  objc_msgSend(v420, "autoAddWalletKeysOncePerDeviceSetup");
  objc_msgSend(v420, "updateHomeKitInUsePreferences");
  objc_msgSend(v420, "capabilitiesController");
  v458 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v458, "didFinishConfiguringHomes");

  v459 = -[HMDWidgetTimelineRefresher initWithHomeManager:]([HMDWidgetTimelineRefresher alloc], "initWithHomeManager:", v420);
  v460 = v420[66];
  v420[66] = v459;

  objc_msgSend(v420[66], "configure");
  objc_msgSend(v420, "workQueue");
  v461 = objc_claimAutoreleasedReturnValue();
  v538[0] = v457;
  v538[1] = 3221225472;
  v538[2] = __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_424;
  v538[3] = &unk_1E89C2730;
  v538[4] = v420;
  dispatch_async(v461, v538);

  objc_msgSend(v420, "pairedAccessories");
  v462 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDCameraSnapshotManager cleanStaleSnapshotDirectoriesUsingCurrentAccessories:](HMDCameraSnapshotManager, "cleanStaleSnapshotDirectoriesUsingCurrentAccessories:", v462);

  v463 = (_QWORD *)MEMORY[0x1E0C9AE40];
  if (*((_BYTE *)v420 + 30))
    v463 = (_QWORD *)MEMORY[0x1E0C9AE50];
  objc_msgSend(v420, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CBAAF0], *v463);

}

- (void)_monitorMemoryUsage
{
  id v2;

  -[HMDHomeManager memoryTracker](self, "memoryTracker");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "trackMemoryUsageWithReason:", 1);

}

- (void)_updateHomesDiscoveredBonjourServicesMetrics
{
  void *v3;
  HMDBonjourBrowserHelper *v4;
  void *v5;
  void *v6;
  HMDBonjourBrowserHelper *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id location;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  if (!isWatch())
  {
    -[HMDHomeManager bonjourBrowser](self, "bonjourBrowser");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      v4 = [HMDBonjourBrowserHelper alloc];
      v27[0] = CFSTR("_sleep-proxy._udp.");
      v27[1] = CFSTR("_meshcop._udp.");
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v27, 2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager workQueue](self, "workQueue");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = -[HMDBonjourBrowserHelper initWithServicesOfTypes:browsingTimeInterval:browsingPeriodicity:workQueue:](v4, "initWithServicesOfTypes:browsingTimeInterval:browsingPeriodicity:workQueue:", v5, v6, 20.0, 0.0);
      -[HMDHomeManager setBonjourBrowser:](self, "setBonjourBrowser:", v7);

    }
  }
  -[HMDHomeManager bonjourBrowser](self, "bonjourBrowser");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHomeManager homes](self, "homes");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "count"))
    {
      -[HMDHomeManager bonjourBrowser](self, "bonjourBrowser");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "isStarted");

      if ((v11 & 1) == 0)
      {
        -[HMDHomeManager bonjourBrowserHelperLastCompletionDate](self, "bonjourBrowserHelperLastCompletionDate");
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v12)
          goto LABEL_9;
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager bonjourBrowserHelperLastCompletionDate](self, "bonjourBrowserHelperLastCompletionDate");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "timeIntervalSinceDate:", v14);
        v16 = v15;

        objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "preferenceForKey:", CFSTR("hapBonjourBrowserHelperPeriod"));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "numberValue");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "doubleValue");
        v21 = v20;

        if (v16 >= v21)
        {
LABEL_9:
          objc_initWeak(&location, self);
          -[HMDHomeManager bonjourBrowser](self, "bonjourBrowser");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v24[0] = MEMORY[0x1E0C809B0];
          v24[1] = 3221225472;
          v24[2] = __62__HMDHomeManager__updateHomesDiscoveredBonjourServicesMetrics__block_invoke;
          v24[3] = &unk_1E89C0678;
          objc_copyWeak(&v25, &location);
          objc_msgSend(v22, "startWithBrowsingCompletion:", v24);

          objc_msgSend(MEMORY[0x1E0C99D68], "date");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager setBonjourBrowserHelperLastCompletionDate:](self, "setBonjourBrowserHelperLastCompletionDate:", v23);

          objc_destroyWeak(&v25);
          objc_destroyWeak(&location);
        }
      }
    }
    else
    {

    }
  }
}

- (id)accessoryWithUUID:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "accessoryWithUUID:", v4);
        v10 = objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)v10;
          goto LABEL_11;
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_11:

  return v11;
}

- (id)accessoryWithIDSIdentifier:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  void *v14;
  void *v15;
  char v16;
  id v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v20)
  {
    v6 = *(_QWORD *)v26;
    v19 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v26 != v6)
          objc_enumerationMutation(v5);
        v8 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        objc_msgSend(v8, "appleMediaAccessories", v19);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v22;
          while (2)
          {
            for (j = 0; j != v11; ++j)
            {
              if (*(_QWORD *)v22 != v12)
                objc_enumerationMutation(v9);
              v14 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * j);
              objc_msgSend(v14, "idsIdentifier");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              v16 = objc_msgSend(v15, "hmf_isEqualToUUID:", v4);

              if ((v16 & 1) != 0)
              {
                v17 = v14;

                goto LABEL_19;
              }
            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
            if (v11)
              continue;
            break;
          }
        }

        v6 = v19;
      }
      v17 = 0;
      v20 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v20);
  }
  else
  {
    v17 = 0;
  }
LABEL_19:

  return v17;
}

- (void)reloadHomeDataFromLocalStore:(BOOL)a3
{
  NSObject *v5;
  _QWORD v6[5];
  BOOL v7;

  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __47__HMDHomeManager_reloadHomeDataFromLocalStore___block_invoke;
  v6[3] = &unk_1E89C2758;
  v6[4] = self;
  v7 = a3;
  dispatch_async(v5, v6);

}

- (void)_reloadHomeDataFromLocalStore:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  HMDBackingStoreFetchArchiveOperation *v21;
  HMDBackingStoreFetchArchiveOperation *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  void *v39;
  uint64_t v40;
  void *v41;
  HMDHomeManager *v42;
  NSObject *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[4];
  id v52;
  id v53;
  id v54;
  id obj;
  _QWORD v56[7];
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  uint8_t v61[128];
  uint8_t v62[4];
  id v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  void *v67;
  __int128 buf;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  void (*v71)(uint64_t);
  id v72;
  uint64_t v73;

  v3 = a3;
  v73 = *MEMORY[0x1E0C80C00];
  if (!-[HMDHomeManager homeDataLoadedFromArchive](self, "homeDataLoadedFromArchive"))
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Reload home data from archived file", (uint8_t *)&buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v57 = 0;
    v58 = &v57;
    v59 = 0x2020000000;
    v60 = 0;
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v69 = 0x3032000000;
    v70 = __Block_byref_object_copy__165094;
    v71 = __Block_byref_object_dispose__165095;
    v72 = 0;
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    if (isWatch())
    {
      v10 = *((_QWORD *)&buf + 1);
      v11 = *(void **)(*((_QWORD *)&buf + 1) + 40);
      v54 = 0;
      obj = v11;
      +[HMDPersistentStore unarchiveHomeData:decryptionFailed:successfulKeyUserName:](HMDPersistentStore, "unarchiveHomeData:decryptionFailed:successfulKeyUserName:", &obj, v58 + 3, &v54);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_storeStrong((id *)(v10 + 40), obj);
      v13 = v54;
      if (v12)
      {
        v14 = (void *)MEMORY[0x1D17BA0A0]();
        v15 = v6;
        HMFGetOSLogHandle();
        v16 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v46 = v14;
          HMFGetLogIdentifier();
          v17 = (id)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v12, "code");
          objc_msgSend(v12, "localizedDescription");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v62 = 138543874;
          v63 = v17;
          v64 = 2048;
          v65 = v18;
          v66 = 2112;
          v67 = v19;
          _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Could not load home data from archived file -- continuing with error %ld:%@", v62, 0x20u);

          v14 = v46;
        }

        objc_autoreleasePoolPop(v14);
      }
      else if (!*((_BYTE *)v58 + 24) && *(_QWORD *)(*((_QWORD *)&buf + 1) + 40))
      {
        objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "ensureControllerKeyExistsForAllViews");

      }
    }
    else
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = [HMDBackingStoreFetchArchiveOperation alloc];
      v56[0] = MEMORY[0x1E0C809B0];
      v56[1] = 3221225472;
      v56[2] = __48__HMDHomeManager__reloadHomeDataFromLocalStore___block_invoke;
      v56[3] = &unk_1E89BC940;
      v56[4] = v6;
      v56[5] = &buf;
      v56[6] = &v57;
      v22 = -[HMDBackingStoreFetchArchiveOperation initWithFetchResult:](v21, "initWithFetchResult:", v56);
      -[HMDHomeManager backingStore](v6, "backingStore");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "submit:", v22);

      -[HMDBackingStoreFetchArchiveOperation waitUntilFinished](v22, "waitUntilFinished");
      objc_autoreleasePoolPop(v20);
    }
    if (*((_BYTE *)v58 + 24) && v3)
    {
      -[HMDHomeManager syncManager](v6, "syncManager");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_initWeak((id *)v62, v6);
      v51[0] = MEMORY[0x1E0C809B0];
      v51[1] = 3221225472;
      v51[2] = __48__HMDHomeManager__reloadHomeDataFromLocalStore___block_invoke_430;
      v51[3] = &unk_1E89BE218;
      objc_copyWeak(&v53, (id *)v62);
      v26 = v25;
      v52 = v26;
      objc_msgSend(v26, "pauseAndWaitForCurrentOperationCompletion:", v51);

      objc_destroyWeak(&v53);
      objc_destroyWeak((id *)v62);

    }
    objc_autoreleasePoolPop(v9);
    if (*(_QWORD *)(*((_QWORD *)&buf + 1) + 40))
    {
      -[HMDHomeManager messageDispatcher](v6, "messageDispatcher");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager accessoryBrowserInternal](v6, "accessoryBrowserInternal");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager msgFilterChain](v6, "msgFilterChain");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
      v31 = *((unsigned __int8 *)v58 + 24);
      -[HMDHomeManager identityRegistry](v6, "identityRegistry");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager accountRegistry](v6, "accountRegistry");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v45) = 1;
      -[HMDHomeManager _loadMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:uncommittedTransactions:backingStoreFactory:reloadData:](v6, "_loadMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:uncommittedTransactions:backingStoreFactory:reloadData:", v27, v28, v29, v30, v31 != 0, v32, v33, MEMORY[0x1E0C9AA60], 0, v45);

      +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "setHomeManager:", v6);
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "pendingUserManagementOperations");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v47, v61, 16);
      if (v36)
      {
        v37 = *(_QWORD *)v48;
        do
        {
          for (i = 0; i != v36; ++i)
          {
            if (*(_QWORD *)v48 != v37)
              objc_enumerationMutation(v35);
            v39 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
            objc_msgSend(v39, "updateDelegate:", v6);
            objc_msgSend(v34, "addOperation:", v39);
          }
          v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v47, v61, 16);
        }
        while (v36);
      }

      -[HMDHomeManager _checkForRemotePeers](v6, "_checkForRemotePeers");
    }
    else
    {
      v40 = -[HMDHomeManager setAccessAllowedWhenLocked:](v6, "setAccessAllowedWhenLocked:", isiOSDevice());
      v41 = (void *)MEMORY[0x1D17BA0A0](v40);
      v42 = v6;
      HMFGetOSLogHandle();
      v43 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v62 = 138543362;
        v63 = v44;
        _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@No home data to reload from archived file", v62, 0xCu);

      }
      objc_autoreleasePoolPop(v41);
    }
    _Block_object_dispose(&buf, 8);

    _Block_object_dispose(&v57, 8);
  }
}

- (void)_findCloudHomeZonesToIgnore:(id)a3
{
  id v4;
  void *v5;
  HMDBackingStoreLogFetchOperation *v6;
  uint64_t v7;
  id v8;
  HMDBackingStoreLogFetchOperation *v9;
  id v10;
  id v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = [HMDBackingStoreLogFetchOperation alloc];
  v7 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __46__HMDHomeManager__findCloudHomeZonesToIgnore___block_invoke;
  v16[3] = &unk_1E89BC968;
  objc_copyWeak(&v18, &location);
  v8 = v5;
  v17 = v8;
  v9 = -[HMDBackingStoreLogFetchOperation initWithNeedsPushTo:result:](v6, "initWithNeedsPushTo:result:", 2, v16);
  v13[0] = v7;
  v13[1] = 3221225472;
  v13[2] = __46__HMDHomeManager__findCloudHomeZonesToIgnore___block_invoke_443;
  v13[3] = &unk_1E89BFC88;
  v10 = v4;
  v15 = v10;
  v11 = v8;
  v14 = v11;
  -[HMDBackingStoreOperation setResultBlock:](v9, "setResultBlock:", v13);
  -[HMDHomeManager backingStore](self, "backingStore");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "submit:", v9);

  objc_destroyWeak(&v18);
  objc_destroyWeak(&location);

}

- (void)_findZoneInformationWithoutHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  id location;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "homeManagerZone");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)MEMORY[0x1E0C99E20];
  -[HMDHomeManager homes](self, "homes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setWithCapacity:", objc_msgSend(v8, "count"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v27;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v27 != v12)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * v13), "zoneID");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "addObject:", v14);

        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v11);
  }

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  -[HMDHomeManager uuid](self, "uuid");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke;
  v20[3] = &unk_1E89BC9E0;
  objc_copyWeak(&v24, &location);
  v17 = v4;
  v23 = v17;
  v18 = v9;
  v21 = v18;
  v19 = v15;
  v22 = v19;
  objc_msgSend(v6, "cloudRecordsForParentID:completionHandler:", v16, v20);

  objc_destroyWeak(&v24);
  objc_destroyWeak(&location);

}

- (void)_cleanHomeManagerZoneInformationWithoutHome
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id location;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E20];
  -[HMDHomeManager homes](self, "homes");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setWithCapacity:", objc_msgSend(v4, "count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v23;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v9), "zoneID");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v10);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v7);
  }

  -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "homeManagerZone");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  -[HMDHomeManager uuid](self, "uuid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke;
  v17[3] = &unk_1E89C1738;
  objc_copyWeak(&v20, &location);
  v15 = v13;
  v18 = v15;
  v16 = v5;
  v19 = v16;
  objc_msgSend(v12, "cloudRecordsForParentID:completionHandler:", v14, v17);

  objc_destroyWeak(&v20);
  objc_destroyWeak(&location);

}

- (void)_loadHomeZonesFromCache:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id obj;
  uint64_t v29;
  NSObject *group;
  _QWORD block[4];
  id v32;
  _QWORD *v33;
  _QWORD v34[5];
  NSObject *v35;
  _QWORD *v36;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  id location;
  _QWORD v43[3];
  char v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v27 = v6;
  if (objc_msgSend(v6, "count"))
  {
    v26 = v7;
    group = dispatch_group_create();
    v43[0] = 0;
    v43[1] = v43;
    v43[2] = 0x2020000000;
    v44 = 0;
    objc_initWeak(&location, self);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    obj = v6;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v49, 16);
    if (v8)
    {
      v29 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v39 != v29)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
          -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager", v26);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "cloudCache");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "UUIDString");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "homeZoneWithName:", v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();

          if (v14)
          {
            dispatch_group_enter(group);
            v15 = (void *)MEMORY[0x1D17BA0A0]();
            v16 = self;
            HMFGetOSLogHandle();
            v17 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v46 = v18;
              v47 = 2112;
              v48 = v10;
              _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Fetching all cached records for home zone %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v15);
            v34[0] = MEMORY[0x1E0C809B0];
            v34[1] = 3221225472;
            v34[2] = __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke;
            v34[3] = &unk_1E89BCA80;
            objc_copyWeak(&v37, &location);
            v34[4] = v10;
            v36 = v43;
            v35 = group;
            objc_msgSend(v14, "fetchAllObjects:", v34);

            objc_destroyWeak(&v37);
          }
          else
          {
            v19 = (void *)MEMORY[0x1D17BA0A0]();
            v20 = self;
            HMFGetOSLogHandle();
            v21 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v46 = v22;
              v47 = 2112;
              v48 = v10;
              _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Cloud zone does not exist for home zone %@, ignoring", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v19);
          }

        }
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v49, 16);
      }
      while (v8);
    }

    -[HMDHomeManager workQueue](self, "workQueue");
    v23 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_453;
    block[3] = &unk_1E89BCAA8;
    v33 = v43;
    v32 = v26;
    dispatch_group_notify(group, v23, block);

    objc_destroyWeak(&location);
    _Block_object_dispose(v43, 8);

    v7 = v26;
  }
  else
  {
    v24 = _Block_copy(v7);
    v25 = v24;
    if (v24)
      (*((void (**)(void *, _QWORD))v24 + 2))(v24, 0);

  }
}

- (void)migrateModelObjectsToCloud:(int64_t)a3 schemaVersion:(int64_t)a4
{
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  char isKindOfClass;
  void *v32;
  NSObject *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  NSObject *v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  NSObject *v48;
  void *v49;
  NSObject *v50;
  id v51;
  void *v52;
  void *v53;
  NSObject *v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  NSObject *v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  NSObject *v67;
  id v68;
  void *v69;
  void *v70;
  HMDCloudZoneInformation *v71;
  void *v72;
  void *v73;
  HMDCloudZoneInformation *v74;
  void *v75;
  void *v76;
  void *v77;
  NSObject *v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t k;
  void *v88;
  void *v89;
  NSObject *v90;
  id v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t m;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  NSObject *v105;
  void *v106;
  NSObject *v107;
  void *v108;
  void *v109;
  void *v110;
  HMDHomeManager *v111;
  NSObject *v112;
  void *v113;
  void *v114;
  HMDHomeManager *v115;
  NSObject *v116;
  void *v117;
  HMDHomeSaveRequest *v118;
  void *v119;
  NSObject *v120;
  void *v121;
  HMDHomeSaveRequest *v122;
  void *context;
  void *v124;
  uint64_t v126;
  void *v127;
  uint64_t v129;
  uint64_t i;
  void *v132;
  void *v133;
  void *v134;
  id obj;
  id obja;
  NSObject *objb;
  _QWORD v138[4];
  id v139;
  _QWORD v140[4];
  NSObject *v141;
  id v142;
  id v143;
  _QWORD v144[5];
  NSObject *v145;
  _BYTE *v146;
  id v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _QWORD v156[5];
  NSObject *v157;
  _BYTE *v158;
  id v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  id location;
  _BYTE v169[128];
  uint8_t v170[128];
  uint8_t v171[4];
  id v172;
  __int16 v173;
  void *v174;
  __int16 v175;
  id v176;
  _BYTE v177[128];
  uint8_t v178[128];
  _BYTE buf[24];
  int64_t v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  if (!isWatch())
  {
    -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)&buf[4] = v7;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = a3;
        *(_WORD *)&buf[22] = 2048;
        v180 = a4;
        _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Beginning migration from version %ld, schema %ld", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v5);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      LOBYTE(v180) = 0;
      context = (void *)MEMORY[0x1D17BA0A0]();
      v124 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.v4-migrate."));
      objc_initWeak(&location, self);
      -[HMDHomeManager homes](self, "homes");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "count");
      v11 = a4 < 4 && v9 != 0;

      if (v11)
      {
        v12 = (void *)MEMORY[0x1E0C99DE8];
        -[HMDHomeManager homes](self, "homes", context, v124);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "arrayWithCapacity:", objc_msgSend(v13, "count"));
        v127 = (void *)objc_claimAutoreleasedReturnValue();

        v166 = 0u;
        v167 = 0u;
        v164 = 0u;
        v165 = 0u;
        -[HMDHomeManager homes](self, "homes");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v129 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v164, v178, 16);
        if (!v129)
          goto LABEL_53;
        v126 = *(_QWORD *)v165;
        v132 = v14;
        while (1)
        {
          for (i = 0; i != v129; ++i)
          {
            if (*(_QWORD *)v165 != v126)
              objc_enumerationMutation(v14);
            v15 = *(void **)(*((_QWORD *)&v164 + 1) + 8 * i);
            obj = v15;
            if (a3 <= 3)
            {
              v16 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v15, "setupBackingStore"));
              HMFGetOSLogHandle();
              v17 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v18 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(obj, "uuid");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v19, "UUIDString");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v171 = 138543618;
                v172 = v18;
                v173 = 2112;
                v174 = v20;
                _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Migrating Home %@", v171, 0x16u);

              }
              objc_autoreleasePoolPop(v16);
              -[HMDHomeManager backingStore](self, "backingStore");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "transaction:options:", CFSTR("homeMigration"), v22);
              v134 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(obj, "backingStore");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "transaction:options:", CFSTR("homeMigration"), v24);
              v133 = (void *)objc_claimAutoreleasedReturnValue();

              if (objc_msgSend(obj, "isOwnerUser"))
              {
                objc_msgSend(obj, "backingStoreObjects:", 4);
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                v162 = 0u;
                v163 = 0u;
                v160 = 0u;
                v161 = 0u;
                v26 = v25;
                v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v160, v177, 16);
                if (v27)
                {
                  v28 = *(_QWORD *)v161;
                  do
                  {
                    for (j = 0; j != v27; ++j)
                    {
                      if (*(_QWORD *)v161 != v28)
                        objc_enumerationMutation(v26);
                      v30 = *(void **)(*((_QWORD *)&v160 + 1) + 8 * j);
                      objc_opt_class();
                      isKindOfClass = objc_opt_isKindOfClass();
                      v32 = (void *)MEMORY[0x1D17BA0A0]();
                      if ((isKindOfClass & 1) != 0)
                      {
                        HMFGetOSLogHandle();
                        v33 = (id)objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                        {
                          HMFGetLogIdentifier();
                          v34 = (id)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(obj, "uuid");
                          v35 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v35, "UUIDString");
                          v36 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)v171 = 138543874;
                          v172 = v34;
                          v173 = 2112;
                          v174 = v36;
                          v175 = 2112;
                          v176 = v30;
                          _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_DEBUG, "%{public}@[Home Migration %@] Object Change (HomeManager Queue): %@", v171, 0x20u);

                          v14 = v132;
                        }

                        objc_autoreleasePoolPop(v32);
                        v37 = v134;
                      }
                      else
                      {
                        HMFGetOSLogHandle();
                        v38 = (id)objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
                        {
                          HMFGetLogIdentifier();
                          v39 = (id)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(obj, "uuid");
                          v40 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v40, "UUIDString");
                          v41 = (void *)objc_claimAutoreleasedReturnValue();
                          *(_DWORD *)v171 = 138543874;
                          v172 = v39;
                          v173 = 2112;
                          v174 = v41;
                          v175 = 2112;
                          v176 = v30;
                          _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_DEBUG, "%{public}@[Home Migration %@] Object Change: %@", v171, 0x20u);

                          v14 = v132;
                        }

                        objc_autoreleasePoolPop(v32);
                        v37 = v133;
                      }
                      objc_msgSend(v37, "add:withMessage:", v30, 0);
                    }
                    v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v160, v177, 16);
                  }
                  while (v27);
                }

              }
              else
              {
                objc_msgSend(obj, "sharedHomeModel");
                v26 = (id)objc_claimAutoreleasedReturnValue();
                v66 = (void *)MEMORY[0x1D17BA0A0]();
                HMFGetOSLogHandle();
                v67 = (id)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
                {
                  HMFGetLogIdentifier();
                  v68 = (id)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(obj, "uuid");
                  v69 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v69, "UUIDString");
                  v70 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)v171 = 138543874;
                  v172 = v68;
                  v173 = 2112;
                  v174 = v70;
                  v175 = 2112;
                  v176 = v26;
                  _os_log_impl(&dword_1CD062000, v67, OS_LOG_TYPE_DEBUG, "%{public}@[Home Migration %@] Object Change (HomeManager Queue): %@", v171, 0x20u);

                }
                objc_autoreleasePoolPop(v66);
                objc_msgSend(v134, "add:withMessage:", v26, 0);
              }

              objc_msgSend(v134, "save");
              objc_msgSend(v133, "save");
              objc_msgSend(obj, "zoneID");
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHomeManager uploadHomeToCloudZone:withDelay:](self, "uploadHomeToCloudZone:withDelay:", v65, 0.0);
LABEL_50:

              *(_BYTE *)(*(_QWORD *)&buf[8] + 24) = 1;
              v15 = obj;
              goto LABEL_51;
            }
            if (a4 < 3)
            {
              objc_msgSend(v15, "zoneID");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "UUIDString");
              v43 = (void *)objc_claimAutoreleasedReturnValue();

              v44 = dispatch_group_create();
              dispatch_group_enter(v44);
              -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v45, "cloudCache");
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(obj, "ownerName");
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              v156[0] = MEMORY[0x1E0C809B0];
              v156[1] = 3221225472;
              v156[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke;
              v156[3] = &unk_1E89BCAF8;
              objc_copyWeak(&v159, &location);
              v156[4] = obj;
              v158 = buf;
              v48 = v44;
              v157 = v48;
              objc_msgSend(v46, "homeZoneWithName:owner:completion:", v43, v47, v156);

              v49 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v50 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v51 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(obj, "uuid");
                v52 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v171 = 138543618;
                v172 = v51;
                v173 = 2112;
                v174 = v52;
                _os_log_impl(&dword_1CD062000, v50, OS_LOG_TYPE_INFO, "%{public}@Waiting for home fixup for %@", v171, 0x16u);

              }
              objc_autoreleasePoolPop(v49);
              dispatch_group_wait(v48, 0xFFFFFFFFFFFFFFFFLL);

              objc_destroyWeak(&v159);
              v15 = obj;
            }
            if (objc_msgSend(v15, "isOwnerUser"))
            {
              v53 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v15, "setupBackingStore"));
              HMFGetOSLogHandle();
              v54 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v55 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(obj, "uuid");
                v56 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v56, "UUIDString");
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v171 = 138543618;
                v172 = v55;
                v173 = 2112;
                v174 = v57;
                _os_log_impl(&dword_1CD062000, v54, OS_LOG_TYPE_INFO, "%{public}@Migrating Home %@", v171, 0x16u);

              }
              objc_autoreleasePoolPop(v53);
              objc_msgSend(obj, "backingStore");
              v58 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v58, "transaction:options:", CFSTR("homeMigration"), v59);
              v134 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(obj, "homeConfigurationModelObjectWithChangeType:", 1);
              v133 = (void *)objc_claimAutoreleasedReturnValue();
              v60 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v61 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
              {
                HMFGetLogIdentifier();
                v62 = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(obj, "uuid");
                v63 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v63, "UUIDString");
                v64 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v171 = 138543874;
                v172 = v62;
                v173 = 2112;
                v174 = v64;
                v175 = 2112;
                v176 = v133;
                _os_log_impl(&dword_1CD062000, v61, OS_LOG_TYPE_DEBUG, "%{public}@[Home Migration %@] Object Change: %@", v171, 0x20u);

              }
              objc_autoreleasePoolPop(v60);
              objc_msgSend(v134, "add:withMessage:", v133, 0);
              objc_msgSend(v134, "save");
              objc_msgSend(obj, "zoneID");
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHomeManager uploadHomeToCloudZone:withDelay:](self, "uploadHomeToCloudZone:withDelay:", v65, 0.0);
              goto LABEL_50;
            }
LABEL_51:
            v71 = [HMDCloudZoneInformation alloc];
            objc_msgSend(v15, "ownerName");
            v72 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "zoneID");
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            v74 = -[HMDCloudZoneInformation initWithOwnerName:uuid:](v71, "initWithOwnerName:uuid:", v72, v73);

            -[HMDCloudZoneInformation setSchemaVersion:](v74, "setSchemaVersion:", 3);
            -[HMDCloudZoneInformation setZoneCreated:](v74, "setZoneCreated:", 0);
            objc_msgSend(v127, "addObject:", v74);

          }
          v129 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v164, v178, 16);
          if (!v129)
          {
LABEL_53:

            if (a4 <= 1)
            {
              -[HMDHomeManager cloudZones](self, "cloudZones");
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v75, "removeObjectsInArray:", v127);

              -[HMDHomeManager cloudZones](self, "cloudZones");
              v76 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v76, "addObjectsFromArray:", v127);

              v77 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v78 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v79 = (id)objc_claimAutoreleasedReturnValue();
                -[HMDHomeManager uuid](self, "uuid");
                v80 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v80, "UUIDString");
                v81 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v171 = 138543618;
                v172 = v79;
                v173 = 2112;
                v174 = v81;
                _os_log_impl(&dword_1CD062000, v78, OS_LOG_TYPE_INFO, "%{public}@Migrating Home Manager %@", v171, 0x16u);

              }
              objc_autoreleasePoolPop(v77);
              -[HMDHomeManager backingStore](self, "backingStore");
              v82 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
              v83 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v82, "transaction:options:", CFSTR("homeManagerMigration"), v83);
              v84 = (void *)objc_claimAutoreleasedReturnValue();

              -[HMDHomeManager backingStoreObjects:](self, "backingStoreObjects:", 4);
              v154 = 0u;
              v155 = 0u;
              v152 = 0u;
              v153 = 0u;
              obja = (id)objc_claimAutoreleasedReturnValue();
              v85 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v152, v170, 16);
              if (v85)
              {
                v86 = *(_QWORD *)v153;
                do
                {
                  for (k = 0; k != v85; ++k)
                  {
                    if (*(_QWORD *)v153 != v86)
                      objc_enumerationMutation(obja);
                    v88 = *(void **)(*((_QWORD *)&v152 + 1) + 8 * k);
                    v89 = (void *)MEMORY[0x1D17BA0A0]();
                    HMFGetOSLogHandle();
                    v90 = (id)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
                    {
                      HMFGetLogIdentifier();
                      v91 = (id)objc_claimAutoreleasedReturnValue();
                      -[HMDHomeManager uuid](self, "uuid");
                      v92 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v92, "UUIDString");
                      v93 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)v171 = 138543874;
                      v172 = v91;
                      v173 = 2112;
                      v174 = v93;
                      v175 = 2112;
                      v176 = v88;
                      _os_log_impl(&dword_1CD062000, v90, OS_LOG_TYPE_DEBUG, "%{public}@[Home Manager Migration %@] Object Change: %@", v171, 0x20u);

                    }
                    objc_autoreleasePoolPop(v89);
                    objc_msgSend(v84, "add:withMessage:", v88, 0);
                  }
                  v85 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v152, v170, 16);
                }
                while (v85);
              }

              objc_msgSend(v84, "save");
              -[HMDHomeManager setForceFetchHomeManagerZone:](self, "setForceFetchHomeManagerZone:", 1);
              -[HMDHomeManager fetchHomeManagerCloudConflict:withDelay:](self, "fetchHomeManagerCloudConflict:withDelay:", 1, 0.0);

            }
            break;
          }
        }
      }
      objb = dispatch_group_create();
      v148 = 0u;
      v149 = 0u;
      v150 = 0u;
      v151 = 0u;
      -[HMDHomeManager homes](self, "homes");
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      v95 = objc_msgSend(v94, "countByEnumeratingWithState:objects:count:", &v148, v169, 16);
      if (v95)
      {
        v96 = *(_QWORD *)v149;
        do
        {
          for (m = 0; m != v95; ++m)
          {
            if (*(_QWORD *)v149 != v96)
              objc_enumerationMutation(v94);
            v98 = *(void **)(*((_QWORD *)&v148 + 1) + 8 * m);
            if (objc_msgSend(v98, "isOwnerUser", context))
            {
              dispatch_group_enter(objb);
              objc_msgSend(v98, "zoneID");
              v99 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v99, "UUIDString");
              v100 = (void *)objc_claimAutoreleasedReturnValue();

              -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
              v101 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v101, "cloudCache");
              v102 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v98, "ownerName");
              v103 = (void *)objc_claimAutoreleasedReturnValue();
              v144[0] = MEMORY[0x1E0C809B0];
              v144[1] = 3221225472;
              v144[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_464;
              v144[3] = &unk_1E89BCAF8;
              objc_copyWeak(&v147, &location);
              v144[4] = v98;
              v145 = objb;
              v146 = buf;
              objc_msgSend(v102, "homeZoneWithName:owner:completion:", v100, v103, v144);

              objc_destroyWeak(&v147);
            }
          }
          v95 = objc_msgSend(v94, "countByEnumeratingWithState:objects:count:", &v148, v169, 16);
        }
        while (v95);
      }

      v104 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v105 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v171 = 138543362;
        v172 = v106;
        _os_log_impl(&dword_1CD062000, v105, OS_LOG_TYPE_INFO, "%{public}@Waiting for homes migration to complete", v171, 0xCu);

      }
      objc_autoreleasePoolPop(v104);
      dispatch_group_wait(objb, 0xFFFFFFFFFFFFFFFFLL);
      v107 = dispatch_group_create();
      -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v108, "homeManagerZone");
      v109 = (void *)objc_claimAutoreleasedReturnValue();

      if (v109)
      {
        dispatch_group_enter(v107);
        v140[0] = MEMORY[0x1E0C809B0];
        v140[1] = 3221225472;
        v140[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_468;
        v140[3] = &unk_1E89C1738;
        objc_copyWeak(&v143, &location);
        v141 = v107;
        v142 = v109;
        objc_msgSend(v142, "fetchMigratedObjects:", v140);
        -[HMDHomeManager _cleanHomeManagerZoneInformationWithoutHome](self, "_cleanHomeManagerZoneInformationWithoutHome");
        if (-[HMDHomeManager recoveryVersion](self, "recoveryVersion") <= 0)
        {
          -[HMDHomeManager setRecoveryVersion:](self, "setRecoveryVersion:", 1);
          v118 = -[HMDHomeSaveRequest initWithReason:information:postSyncNotification:]([HMDHomeSaveRequest alloc], "initWithReason:information:postSyncNotification:", CFSTR("HMDHomeManagerRecoveryVersionUpdated"), 0, 0);
          -[HMDHomeManager saveWithRequest:](self, "saveWithRequest:", v118);
          v138[0] = MEMORY[0x1E0C809B0];
          v138[1] = 3221225472;
          v138[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_2_473;
          v138[3] = &unk_1E89BCB48;
          objc_copyWeak(&v139, &location);
          -[HMDHomeManager _findZoneInformationWithoutHome:](self, "_findZoneInformationWithoutHome:", v138);
          objc_destroyWeak(&v139);

        }
        else
        {
          v110 = (void *)MEMORY[0x1D17BA0A0]();
          v111 = self;
          HMFGetOSLogHandle();
          v112 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v171 = 138543362;
            v172 = v113;
            _os_log_impl(&dword_1CD062000, v112, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Recover already done, skipping", v171, 0xCu);

          }
          objc_autoreleasePoolPop(v110);
        }

        objc_destroyWeak(&v143);
      }
      else
      {
        v114 = (void *)MEMORY[0x1D17BA0A0]();
        v115 = self;
        HMFGetOSLogHandle();
        v116 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v117 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v171 = 138543362;
          v172 = v117;
          _os_log_impl(&dword_1CD062000, v116, OS_LOG_TYPE_ERROR, "%{public}@Cannot determine home manager zone to migrate", v171, 0xCu);

        }
        objc_autoreleasePoolPop(v114);
      }
      v119 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v120 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v121 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v171 = 138543362;
        v172 = v121;
        _os_log_impl(&dword_1CD062000, v120, OS_LOG_TYPE_INFO, "%{public}@Waiting for home manager migration to complete", v171, 0xCu);

      }
      objc_autoreleasePoolPop(v119);
      dispatch_group_wait(v107, 0xFFFFFFFFFFFFFFFFLL);

      objc_destroyWeak(&location);
      objc_autoreleasePoolPop(context);
      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      {
        v122 = -[HMDHomeSaveRequest initWithReason:information:postSyncNotification:]([HMDHomeSaveRequest alloc], "initWithReason:information:postSyncNotification:", CFSTR("kAddHomeRequestKey"), 0, 1);
        -[HMDHomeManager saveWithRequest:](self, "saveWithRequest:", v122);

      }
      _Block_object_dispose(buf, 8);
    }
  }
}

- (void)startWithCompletionHandler:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __45__HMDHomeManager_startWithCompletionHandler___block_invoke;
  v7[3] = &unk_1E89C1D68;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_accountAvailabilityChanged:(BOOL)a3
{
  NSObject *v5;
  _QWORD block[4];
  id v7;
  BOOL v8;
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __46__HMDHomeManager__accountAvailabilityChanged___block_invoke;
  block[3] = &unk_1E89BCB70;
  objc_copyWeak(&v7, &location);
  v8 = a3;
  dispatch_async(v5, block);

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

- (void)kickAccountAvailabilityCheck
{
  -[HMDHomeManager _accountAvailabilityChanged:](self, "_accountAvailabilityChanged:", 1);
}

- (void)fetchAndUpdatePCSStatus
{
  void *v3;
  _QWORD v4[5];

  getCKContainer();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke;
  v4[3] = &unk_1E89BCB98;
  v4[4] = self;
  objc_msgSend(v3, "accountInfoWithCompletionHandler:", v4);

}

- (void)accountAvailabilityChanged:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v8;
    v12 = 2114;
    v13 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received account availability changed notification: %{public}@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager fetchAndUpdatePCSStatus](v6, "fetchAndUpdatePCSStatus");
  -[HMDHomeManager _accountAvailabilityChanged:](v6, "_accountAvailabilityChanged:", 0);

}

- (void)_setAccountAvailabilityChanged
{
  void *v3;
  _QWORD v4[4];
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager cloudAccount](self, "cloudAccount");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __48__HMDHomeManager__setAccountAvailabilityChanged__block_invoke;
  v4[3] = &unk_1E89BCBC0;
  objc_copyWeak(&v5, &location);
  objc_msgSend(v3, "addAccountOperation:", v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (void)handleAccountSettingsUpdate:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __46__HMDHomeManager_handleAccountSettingsUpdate___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (BOOL)isActive
{
  HMDHomeManager *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = -[NSMutableSet count](v2->_activeConnections, "count") != 0;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)__handleActiveAssertion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  const __CFString *v19;
  uint64_t v20;
  const __CFString *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "proxyConnection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543618;
      v30 = v17;
      v31 = 2112;
      v32 = v4;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Could not find connection for active assertion message: %@", (uint8_t *)&v29, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    v18 = (void *)MEMORY[0x1E0CB35C8];
    v19 = CFSTR("Could not find connection");
    v20 = 2;
    v21 = 0;
    goto LABEL_13;
  }
  if ((objc_msgSend(v5, "isAdaptive") & 1) == 0)
  {
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543362;
      v30 = v25;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Cannot handle active assertion message: Client must be adaptive", (uint8_t *)&v29, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
    v18 = (void *)MEMORY[0x1E0CB35C8];
    v19 = CFSTR("Client must be adaptive to begin active assertions");
    v21 = CFSTR("Set adaptive to YES in HMHomeManagerConfiguration");
    v20 = 48;
LABEL_13:
    objc_msgSend(v18, "hmErrorWithCode:description:reason:suggestion:", v20, 0, v19, v21);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v26);

    goto LABEL_18;
  }
  v7 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB8258]);
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "shortDescription");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543618;
      v30 = v12;
      v31 = 2112;
      v32 = v13;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Marking connection as active: %@", (uint8_t *)&v29, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    -[HMDHomeManager __addActiveConnection:](v9, "__addActiveConnection:", v6);
  }
  else
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "shortDescription");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543618;
      v30 = v27;
      v31 = 2112;
      v32 = v28;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Marking connection as inactive: %@", (uint8_t *)&v29, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    -[HMDHomeManager __removeActiveConnection:](v9, "__removeActiveConnection:", v6);
  }
  objc_msgSend(v4, "respondWithSuccess");
LABEL_18:

}

- (void)_registerForXPCConnectionNotifications
{
  void *v3;
  id v4;

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObserver:selector:name:object:", self, sel__handleXPCConnectionActivatedNotification_, CFSTR("HMDXPCClientConnectionDidActivateNotification"), 0);

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObserver:selector:name:object:", self, sel__handleXPCConnectionDeactivatedNotification_, CFSTR("HMDXPCClientConnectionDidDeactivateNotification"), 0);

}

- (void)_handleXPCConnectionActivatedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  HMDHomeManagerXPCMessageSendPolicyParameters *v9;
  HMDHomeManagerXPCMessageSendPolicyParameters *v10;
  HMDHomeManagerXPCMessageSendPolicyParameters *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (!v7)
    _HMFPreconditionFailure();
  v8 = objc_msgSend(v7, "principalClass");
  if (v8 == objc_opt_class())
  {
    objc_msgSend(v7, "sendPolicyParameters");
    v9 = (HMDHomeManagerXPCMessageSendPolicyParameters *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v10 = v9;
    else
      v10 = 0;
    v11 = v10;

    if (!v11)
    {
      v12 = (void *)MEMORY[0x1D17BA0A0]();
      v13 = self;
      HMFGetOSLogHandle();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138543618;
        v20 = v15;
        v21 = 2112;
        v22 = v7;
        _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Setting initial home manager policy parameters on connection: %@", (uint8_t *)&v19, 0x16u);

      }
      objc_autoreleasePoolPop(v12);
      v9 = -[HMDHomeManagerXPCMessageSendPolicyParameters initWithEntitlements:options:]([HMDHomeManagerXPCMessageSendPolicyParameters alloc], "initWithEntitlements:options:", objc_msgSend(v7, "entitlements"), objc_msgSend(v7, "homeManagerOptions"));
      objc_msgSend(v7, "updateSendPolicyParameters:", v9);
    }
    if ((objc_msgSend(v7, "isAdaptive") & 1) == 0)
    {
      objc_msgSend(v7, "processInfo");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager notificationCenter](self, "notificationCenter");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "removeObserver:name:object:", self, CFSTR("HMDProcessInfoStateDidChangeNotification"), v16);

      -[HMDHomeManager notificationCenter](self, "notificationCenter");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObserver:selector:name:object:", self, sel___handleProcessInfoStateChangedNotification_, CFSTR("HMDProcessInfoStateDidChangeNotification"), v16);

      if (objc_msgSend(v16, "isForegrounded"))
        -[HMDHomeManager __addActiveConnection:](self, "__addActiveConnection:", v7);

    }
  }

}

- (void)_handleXPCConnectionDeactivatedNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (!v7)
    _HMFPreconditionFailure();
  v8 = objc_msgSend(v7, "principalClass");
  if (v8 == objc_opt_class())
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v12;
      v20 = 2112;
      v21 = v7;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Connection removed: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    -[HMDHomeManager __removeActiveConnection:](v10, "__removeActiveConnection:", v7);
    objc_msgSend(v7, "processInfo");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "connections");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "na_any:", &__block_literal_global_504_165911);

    if ((v15 & 1) == 0)
    {
      -[HMDHomeManager notificationCenter](v10, "notificationCenter");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "removeObserver:name:object:", v10, CFSTR("HMDProcessInfoStateDidChangeNotification"), v13);

      if (objc_msgSend(v7, "isAdaptive"))
      {
        -[HMDHomeManager notificationCenter](v10, "notificationCenter");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "postNotificationName:object:", CFSTR("HMDHomeManagerAdaptiveClientDisconnectedNotification"), v13);

      }
    }
    -[HMDHomeManager handleWalletKeyAssertionsXPCConnectionRemoved:](v10, "handleWalletKeyAssertionsXPCConnectionRemoved:", v7);

  }
}

- (void)__handleProcessInfoStateChangedNotification:(id)a3
{
  void *v4;
  void *v5;
  id v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a3, "object");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    v7 = objc_msgSend(v6, "isForegrounded");
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v6, "connections", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
          v14 = objc_msgSend(v13, "principalClass");
          if (v14 == objc_opt_class() && (objc_msgSend(v13, "isAdaptive") & 1) == 0)
          {
            if (v7)
              -[HMDHomeManager __addActiveConnection:](self, "__addActiveConnection:", v13);
            else
              -[HMDHomeManager __removeActiveConnection:](self, "__removeActiveConnection:", v13);
          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v10);
    }

  }
}

- (void)__removeActiveConnection:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[5];
  id v12;

  v4 = a3;
  os_unfair_lock_lock_with_options();
  if (-[NSMutableSet containsObject:](self->_activeConnections, "containsObject:", v4))
  {
    -[NSMutableSet removeObject:](self->_activeConnections, "removeObject:", v4);
    objc_msgSend(v4, "sendPolicyParameters");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend((id)v5, "mutableCopy");

    objc_msgSend(v6, "setActive:", 0);
    objc_msgSend(v4, "updateSendPolicyParameters:", v6);
    LOBYTE(v5) = -[NSMutableSet hmf_isEmpty](self->_activeConnections, "hmf_isEmpty");
    +[HMDActiveXPCConnectionLogEvent initWithXPCConnectionRemoved:](HMDActiveXPCConnectionLogEvent, "initWithXPCConnectionRemoved:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "submitLogEvent:", v7);

    -[HMDHomeManager notificationCenter](self, "notificationCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postNotificationName:object:", CFSTR("HMDHomeManagerConnectionActiveStateUpdatedNotification"), v4);

    os_unfair_lock_unlock(&self->_lock);
    if ((v5 & 1) != 0)
    {
      -[HMDHomeManager workQueue](self, "workQueue");
      v10 = objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __43__HMDHomeManager___removeActiveConnection___block_invoke;
      v11[3] = &unk_1E89C2328;
      v11[4] = self;
      v12 = v4;
      dispatch_async(v10, v11);

    }
  }
  else
  {
    os_unfair_lock_unlock(&self->_lock);
  }

}

- (id)accessoriesMatchingIdentifier:(id)a3
{
  id v4;
  void *v5;
  uint64_t i;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  void *v14;
  int v15;
  id obj;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    -[HMDHomeManager homes](self, "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    if (v19)
    {
      v18 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v25 != v18)
            objc_enumerationMutation(obj);
          v7 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
          v20 = 0u;
          v21 = 0u;
          v22 = 0u;
          v23 = 0u;
          objc_msgSend(v7, "accessories");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
          if (v9)
          {
            v10 = v9;
            v11 = *(_QWORD *)v21;
            do
            {
              for (j = 0; j != v10; ++j)
              {
                if (*(_QWORD *)v21 != v11)
                  objc_enumerationMutation(v8);
                v13 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * j);
                objc_msgSend(v13, "identifier");
                v14 = (void *)objc_claimAutoreleasedReturnValue();
                v15 = objc_msgSend(v4, "isEqual:", v14);

                if (v15)
                  objc_msgSend(v5, "addObject:", v13);
              }
              v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
            }
            while (v10);
          }

        }
        v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      }
      while (v19);
    }

  }
  else
  {
    v5 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v5;
}

- (id)pairedAccessories
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v8), "accessories");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObjectsFromArray:", v9);

        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }

  return v3;
}

- (BOOL)hasHAPAccessoryInAnyHome
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "hapAccessories");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "count");

        if (v7)
        {
          LOBYTE(v3) = 1;
          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  return v3;
}

- (BOOL)_removeLegacyHomeArchive:(id *)a3
{
  return +[HMDPersistentStore removeLegacyHomeArchive:](HMDPersistentStore, "removeLegacyHomeArchive:", a3);
}

- (void)_saveToPersistentStore:(BOOL)a3 reason:(id)a4
{
  _BOOL8 v4;
  id v6;
  NSObject *logger;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  int v23;
  id v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v4 = a3;
  v27 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    v23 = 138412290;
    v24 = v6;
    _os_signpost_emit_with_name_impl(&dword_1CD062000, logger, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "HMDSaveToPersistentStore", "reason=%{signpost.description:attribute}@ ", (uint8_t *)&v23, 0xCu);
  }
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543618;
    v24 = v11;
    v25 = 2112;
    v26 = v6;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Saving to persistent store began for reason : [%@]", (uint8_t *)&v23, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.save-to-store"));
  -[HMDHomeManager _homeDataForPersistentStoreIncrementingGeneration:reason:](v9, "_homeDataForPersistentStoreIncrementingGeneration:reason:", v4, v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDPersistentStore archiveHomeDataLegacy:](HMDPersistentStore, "archiveHomeDataLegacy:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15)
    v9->_homeDatabaseSize = objc_msgSend(v15, "integerValue");
  -[HMDHomeManager updatePowerAssertion](v9, "updatePowerAssertion");

  -[HMDHomeManager setHomeDataLoadedFromArchive:](v9, "setHomeDataLoadedFromArchive:", 1);
  -[HMDHomeManager cloudDataSyncStateFilter](v9, "cloudDataSyncStateFilter");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "updateLocalDataDecryptionFailed:", 0);

  objc_autoreleasePoolPop(v12);
  if (-[HMDHomeManager _updateAccessoriesConfigured](v9, "_updateAccessoriesConfigured"))
    -[HMDHomeManager _postPreferencesChangedNotification](v9);
  v18 = (void *)MEMORY[0x1D17BA0A0]();
  v19 = v9;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543618;
    v24 = v21;
    v25 = 2112;
    v26 = v6;
    _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@(A) Finished saving to persistent store : [%@]", (uint8_t *)&v23, 0x16u);

  }
  objc_autoreleasePoolPop(v18);
  v22 = self->_logger;
  if (os_signpost_enabled(v22))
  {
    LOWORD(v23) = 0;
    _os_signpost_emit_with_name_impl(&dword_1CD062000, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HMDSaveToPersistentStore", ", (uint8_t *)&v23, 2u);
  }

}

- (id)_dataForPersistentStoreIncrementingGeneration:(BOOL)a3 reason:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  NSObject *logger;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  _QWORD block[5];
  uint8_t buf[4];
  id v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v4 = a3;
  v29 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    *(_DWORD *)buf = 138412290;
    v26 = v6;
    _os_signpost_emit_with_name_impl(&dword_1CD062000, logger, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "HMDDataForPersistentStoreIncrementGenCounter", "reason=%{signpost.description:attribute}@ ", buf, 0xCu);
  }
  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v26 = v12;
    v27 = 2112;
    v28 = v6;
    _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Saving to dataForPersistentStoreIncrementingGeneration store began for reason : [%@]", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v9);
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.save-to-sqlstore"));
  -[HMDHomeManager _homeDataForPersistentStoreIncrementingGeneration:reason:](v10, "_homeDataForPersistentStoreIncrementingGeneration:reason:", v4, v6);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDPersistentStore archiveHomeDataForTransaction:](HMDPersistentStore, "archiveHomeDataForTransaction:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
    v10->_homeDatabaseSize = objc_msgSend(v15, "length");
  -[HMDHomeManager updatePowerAssertion](v10, "updatePowerAssertion");
  -[HMDHomeManager setHomeDataLoadedFromArchive:](v10, "setHomeDataLoadedFromArchive:", 1);
  -[HMDHomeManager cloudDataSyncStateFilter](v10, "cloudDataSyncStateFilter");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "updateLocalDataDecryptionFailed:", 0);

  -[HMDHomeManager workQueue](v10, "workQueue");
  v17 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __71__HMDHomeManager__dataForPersistentStoreIncrementingGeneration_reason___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = v10;
  dispatch_async(v17, block);

  v18 = (void *)MEMORY[0x1D17BA0A0]();
  v19 = v10;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v26 = v21;
    v27 = 2112;
    v28 = v6;
    _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@(B) Finished saving to persistent store : [%@]", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v18);
  v22 = self->_logger;
  if (os_signpost_enabled(v22))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1CD062000, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HMDDataForPersistentStoreIncrementGenCounter", ", buf, 2u);
  }

  objc_autoreleasePoolPop(v7);
  return v15;
}

- (id)_homeDataForPersistentStoreIncrementingGeneration:(BOOL)a3 reason:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDMutableHomeData *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  void *context;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t v47[128];
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  id v51;
  uint64_t v52;

  v4 = a3;
  v52 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  context = (void *)MEMORY[0x1D17BA0A0]();
  if (v6
    && +[HMDHomeManager doesSaveReasonAffectOnlyLocalData:](HMDHomeManager, "doesSaveReasonAffectOnlyLocalData:", v6)&& +[HMDHomeManager doesSaveReasonRequireForceSyncToWatch:](HMDHomeManager, "doesSaveReasonRequireForceSyncToWatch:", v6))
  {
    -[HMDHomeManager _scheduleSendHomeDataToAllWatches](self, "_scheduleSendHomeDataToAllWatches");
  }
  if (v4)
  {
    -[HMDHomeManager uuid](self, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", v6, v7, 0);

  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v49 = v11;
      v50 = 2112;
      v51 = v6;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Saving to persistent store. NOT INCREMENTING GENERATION COUNTER for reason %@.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  -[HMDHomeManager pairedAccessories](self, "pairedAccessories");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "operations");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = objc_alloc_init(HMDMutableHomeData);
  -[HMDHomeManager homes](self, "homes");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setHomes:](v15, "setHomes:", v16);

  -[HMDHomeData setAccessories:](v15, "setAccessories:", v12);
  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setPrimaryHomeUUID:](v15, "setPrimaryHomeUUID:", v17);

  -[HMDHomeManager lastCurrentHomeUUID](self, "lastCurrentHomeUUID");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setLastCurrentHomeUUID:](v15, "setLastCurrentHomeUUID:", v18);

  -[HMDHomeData setDataVersion:](v15, "setDataVersion:", 4);
  -[HMDHomeData setSchemaVersion:](v15, "setSchemaVersion:", 5);
  -[HMDHomeData setRecoveryVersion:](v15, "setRecoveryVersion:", -[HMDHomeManager recoveryVersion](self, "recoveryVersion"));
  -[HMDHomeManager dataTag](self, "dataTag");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setDataTag:](v15, "setDataTag:", v19);

  -[HMDHomeManager uuidsOfRemovedHomes](self, "uuidsOfRemovedHomes");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setUUIDsOfRemovedHomes:](v15, "setUUIDsOfRemovedHomes:", v20);

  -[HMDHomeManager cloudZones](self, "cloudZones");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setCloudZones:](v15, "setCloudZones:", v21);

  -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setIncomingInvitations:](v15, "setIncomingInvitations:", v22);

  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "device");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "identifier");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "UUIDString");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setCurrentDevice:](v15, "setCurrentDevice:", v26);

  -[HMDHomeData setPendingUserManagementOperations:](v15, "setPendingUserManagementOperations:", v14);
  -[HMDHomeManager unprocessedOperationModelIdentifiers](self, "unprocessedOperationModelIdentifiers");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "allObjects");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setUnprocessedOperationIdentifiers:](v15, "setUnprocessedOperationIdentifiers:", v28);

  -[HMDHomeManager appData](self, "appData");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setApplicationData:](v15, "setApplicationData:", v29);

  -[HMDHomeData setResidentEnabledState:](v15, "setResidentEnabledState:", -[HMDHomeManager residentEnabledState](self, "residentEnabledState"));
  -[HMDHomeData setAccessAllowedWhenLocked:](v15, "setAccessAllowedWhenLocked:", -[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked"));
  -[HMDHomeManager demoAccessories](self, "demoAccessories");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeData setDemoAccessories:](v15, "setDemoAccessories:", v30);

  -[HMDHomeData setDemoFinalized:](v15, "setDemoFinalized:", -[HMDHomeManager demoFinalized](self, "demoFinalized"));
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "account");
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v32, "shouldCache"))
  {
    -[HMDHomeData setAccount:](v15, "setAccount:", v32);
    objc_msgSend(v32, "primaryHandle");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeData setPrimaryAccountHandle:](v15, "setPrimaryAccountHandle:", v33);

  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  -[HMDHomeManager remoteAccountManager](self, "remoteAccountManager");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (v36)
  {
    v37 = v36;
    v38 = *(_QWORD *)v44;
    do
    {
      for (i = 0; i != v37; ++i)
      {
        if (*(_QWORD *)v44 != v38)
          objc_enumerationMutation(v35);
        v40 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
        if (objc_msgSend(v40, "shouldCache"))
          objc_msgSend(v34, "addObject:", v40);
      }
      v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    }
    while (v37);
  }

  if (v34)
    -[HMDHomeData setRemoteAccounts:](v15, "setRemoteAccounts:", v34);

  objc_autoreleasePoolPop(context);
  return v15;
}

- (int64_t)numberOfAccessoryWithNewFirmwareAvailable
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "namesOfServicesWithNewFirmwareAvailableInHome");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v5 += objc_msgSend(v8, "count");

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)_handleSaveRequest:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  objc_msgSend(v8, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(v8, "userInfo");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("HMDHomeManagerSaveReasonKey"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(v8, "userInfo");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "hmf_stringForKey:", CFSTR("HMDHomeManagerSaveReasonKey"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v4 = 0;
    }
  }
  -[HMDHomeManager _saveWithReason:information:saveOptions:](self, "_saveWithReason:information:saveOptions:", v4, 0, 0);

}

- (void)_saveWithReason:(id)a3 postSyncNotification:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  HMDHomeSaveRequest *v7;

  v4 = a4;
  v6 = a3;
  v7 = -[HMDHomeSaveRequest initWithReason:information:postSyncNotification:]([HMDHomeSaveRequest alloc], "initWithReason:information:postSyncNotification:", v6, 0, v4);

  -[HMDHomeManager _saveWithRequest:](self, "_saveWithRequest:", v7);
}

- (void)_saveWithReason:(id)a3 information:(id)a4 saveOptions:(unint64_t)a5
{
  id v8;
  id v9;
  HMDHomeSaveRequest *v10;

  v8 = a4;
  v9 = a3;
  v10 = -[HMDHomeSaveRequest initWithReason:information:saveOptions:]([HMDHomeSaveRequest alloc], "initWithReason:information:saveOptions:", v9, v8, a5);

  -[HMDHomeManager _saveWithRequest:](self, "_saveWithRequest:", v10);
}

- (void)_saveWithReason:(id)a3 information:(id)a4 postSyncNotification:(BOOL)a5
{
  _BOOL8 v5;
  id v8;
  id v9;
  HMDHomeSaveRequest *v10;

  v5 = a5;
  v8 = a4;
  v9 = a3;
  v10 = -[HMDHomeSaveRequest initWithReason:information:postSyncNotification:]([HMDHomeSaveRequest alloc], "initWithReason:information:postSyncNotification:", v9, v8, v5);

  -[HMDHomeManager _saveWithRequest:](self, "_saveWithRequest:", v10);
}

- (void)saveWithRequest:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __34__HMDHomeManager_saveWithRequest___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_saveWithRequest:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  BOOL v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const __CFString *v22;
  void *v23;
  int v24;
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isLocalDataDecryptionFailed");

  if (v6)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "reason");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543618;
      v25 = v10;
      v26 = 2112;
      v27 = v11;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping save because local data failed to decrypt: %@", (uint8_t *)&v24, 0x16u);

LABEL_15:
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  objc_msgSend(v4, "reason");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = +[HMDHomeManager doesSaveReasonNotAffectLocalData:](HMDHomeManager, "doesSaveReasonNotAffectLocalData:", v12);

  if (!v13)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "reason");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543618;
      v25 = v17;
      v26 = 2112;
      v27 = v18;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Saving to persistent store due to reason: %@", (uint8_t *)&v24, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    -[HMDHomeManager backingStore](v15, "backingStore");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "reason");
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = (void *)v20;
    if (v20)
      v22 = (const __CFString *)v20;
    else
      v22 = CFSTR("unknown");
    objc_msgSend(v19, "saveToPersistentStoreWithReason:incrementGeneration:", v22, objc_msgSend(v4, "incrementGeneration"));

  }
  objc_msgSend(v4, "reason");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v23)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543362;
      v25 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Save reason must be specified to process further", (uint8_t *)&v24, 0xCu);
      goto LABEL_15;
    }
LABEL_16:

    objc_autoreleasePoolPop(v7);
    goto LABEL_17;
  }
  -[HMDHomeManager _performPostSaveRequestActionsWithRequest:](self, "_performPostSaveRequestActionsWithRequest:", v4);
LABEL_17:

}

- (void)performPostSaveRequestActionsWithReason:(id)a3
{
  id v4;
  HMDHomeSaveRequest *v5;

  v4 = a3;
  v5 = -[HMDHomeSaveRequest initWithReason:information:postSyncNotification:]([HMDHomeSaveRequest alloc], "initWithReason:information:postSyncNotification:", v4, 0, 0);

  -[HMDHomeManager performPostSaveRequestActionsWithRequest:](self, "performPostSaveRequestActionsWithRequest:", v5);
}

- (void)performPostSaveRequestActionsWithRequest:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __59__HMDHomeManager_performPostSaveRequestActionsWithRequest___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_performPostSaveRequestActionsWithRequest:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  void *v18;
  id v19;

  v19 = a3;
  objc_msgSend(v19, "reason");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeManager convertSaveReasonToTransationReason:](HMDHomeManager, "convertSaveReasonToTransationReason:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v19, "saveOptions") & 2) != 0)
  {
    objc_msgSend(v19, "reason");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager assistantSyncDataChanged:](self, "assistantSyncDataChanged:", v6);

  }
  if ((objc_msgSend(v19, "saveOptions") & 1) != 0)
  {
    -[HMDHomeManager setUploadHomeDataToCloud:](self, "setUploadHomeDataToCloud:", 1);
    objc_msgSend(v19, "reason");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqual:", CFSTR("MetadataUpdate"));

    if (v8)
      -[HMDHomeManager setUploadMetadataToCloud:](self, "setUploadMetadataToCloud:", 1);
    -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCloudSyncUploadReasonLogEvent uploadReason:acceptedLegacyPush:](HMDCloudSyncUploadReasonLogEvent, "uploadReason:acceptedLegacyPush:", v5, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "submitLogEvent:", v10);

    -[HMDHomeManager _pushChangesToCloud:withDelay:reason:](self, "_pushChangesToCloud:withDelay:reason:", 0, v5, 0.0);
    if (objc_msgSend(v19, "objectChange"))
    {
      objc_msgSend(v19, "home");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11)
      {
        -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDCloudSyncUploadReasonLogEvent uploadReason:acceptedHomeZonePush:](HMDCloudSyncUploadReasonLogEvent, "uploadReason:acceptedHomeZonePush:", v5, 1);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "submitLogEvent:", v13);

        objc_msgSend(v19, "home");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _uploadHomeToCloud:withDelay:](self, "_uploadHomeToCloud:withDelay:", v14, 0.0);

      }
    }
  }
  objc_msgSend(v19, "reason");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = +[HMDHomeManager doesSaveReasonAffectHomeManager:](HMDHomeManager, "doesSaveReasonAffectHomeManager:", v15);

  if (v16)
  {
    -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCloudSyncUploadReasonLogEvent uploadReason:acceptedHomeManagerZonePush:](HMDCloudSyncUploadReasonLogEvent, "uploadReason:acceptedHomeManagerZonePush:", v5, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "submitLogEvent:", v18);

    -[HMDHomeManager _uploadHomeManagerToCloudWithDelay:](self, "_uploadHomeManagerToCloudWithDelay:", 0.0);
  }

}

- (void)_pushMetadataToCloud
{
  -[HMDHomeManager setUploadMetadataToCloud:](self, "setUploadMetadataToCloud:", 1);
  -[HMDHomeManager _pushChangesToCloud:withDelay:](self, "_pushChangesToCloud:withDelay:", 0, 0.0);
}

- (void)updateUserPushCachedForUser:(id)a3 device:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __53__HMDHomeManager_updateUserPushCachedForUser_device___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_updateUserPushCachedForUser:(id)a3 device:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDUserPushCache *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7 && v8)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "userID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v11;
      v18 = 2112;
      v19 = v12;
      v20 = 2112;
      v21 = v7;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Caching destination device for %@ to %@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    v13 = -[HMDUserPushCache initWithDevice:]([HMDUserPushCache alloc], "initWithDevice:", v7);
    -[HMDHomeManager userPushCacheMap](self, "userPushCacheMap");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, v15);

  }
}

- (id)_userPushCachedGetDeviceForUser:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = a3;
  objc_msgSend(v4, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[HMDHomeManager userPushCacheMap](self, "userPushCacheMap");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKeyedSubscript:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      if (!objc_msgSend(v8, "isExpired"))
      {
        objc_msgSend(v8, "device");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_8;
      }
      -[HMDHomeManager userPushCacheMap](self, "userPushCacheMap");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setObject:forKeyedSubscript:", 0, v10);

    }
    v11 = 0;
LABEL_8:

    goto LABEL_9;
  }
  v11 = 0;
LABEL_9:

  return v11;
}

- (void)_schedulePushChangesToAllUsersOfAllHomes
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (+[HMDDeviceCapabilities supportsSyncingToSharedUsers](HMDDeviceCapabilities, "supportsSyncingToSharedUsers"))
  {
    -[HMDHomeManager sharedHomesPushDelayTimer](self, "sharedHomesPushDelayTimer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "resume");

    v4 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Kicking shared home push delay", (uint8_t *)&v7, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }
}

- (id)_pushChangesToAllUsersOfAllHomesForMigration
{
  void *v4;
  NSObject *v5;
  _QWORD block[5];
  id v7;
  id v8;

  if (isWatch())
  {
    objc_msgSend(MEMORY[0x1E0D28588], "futureWithNoValue");
    return (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
    objc_msgSend(MEMORY[0x1E0D28588], "futureWithPromise:", &v8);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager workQueue](self, "workQueue");
    v5 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __62__HMDHomeManager__pushChangesToAllUsersOfAllHomesForMigration__block_invoke;
    block[3] = &unk_1E89C2328;
    block[4] = self;
    v7 = v8;
    dispatch_async(v5, block);

    return v4;
  }
}

- (void)_pushChangesToAllUsersOfAllHomes
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  id v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager sharedHomesPushDelayTimer](self, "sharedHomesPushDelayTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "suspend");

  if (!isWatch())
  {
    -[HMDHomeManager _scheduleSendHomeDataToAllWatches](self, "_scheduleSendHomeDataToAllWatches");
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 0;
    v23 = 0;
    objc_msgSend(v4, "getControllerPublicKey:secretKey:username:allowCreation:error:", 0, 0, &v23, 0, &v22);
    v5 = v23;
    v6 = v22;

    -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "removeAllObjects");

    -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = +[HMDPersistentStore archiveIDSDataSyncJournal:](HMDPersistentStore, "archiveIDSDataSyncJournal:", v8);

    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    -[HMDHomeManager homes](self, "homes", 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v19 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          objc_msgSend(v15, "ownerName");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "isEqualToString:", v5);

          if (v17)
          {
            -[HMDHomeManager _pushChangesToUsers:forHome:](self, "_pushChangesToUsers:forHome:", 0, v15);
            -[HMDHomeManager _pushUserRemovedForHome:](self, "_pushUserRemovedForHome:", v15);
          }
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
      }
      while (v12);
    }

  }
}

- (void)_pushChangesToUsersThatHaveNotAcknowledged
{
  HMDHomeManager *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  HMDHomeManager *v19;
  id obj;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  _BYTE v31[128];
  uint64_t v32;

  v2 = self;
  v32 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v31, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v22;
    v6 = 0x1E0CB3000uLL;
    v19 = v2;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v22 != v5)
          objc_enumerationMutation(obj);
        v8 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i);
        v9 = (void *)objc_msgSend(objc_alloc(*(Class *)(v6 + 2600)), "initWithUUIDString:", v8);
        -[HMDHomeManager _homeWithUUID:](v2, "_homeWithUUID:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          -[HMDHomeManager pendingDataSyncAcks](v2, "pendingDataSyncAcks");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "objectForKeyedSubscript:", v8);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          v13 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v15 = v4;
            v16 = v5;
            v17 = v6;
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v26 = v18;
            v27 = 2112;
            v28 = v10;
            v29 = 2112;
            v30 = v12;
            _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Re-pushing home configuration for home %@ to users %@", buf, 0x20u);

            v6 = v17;
            v5 = v16;
            v4 = v15;
            v2 = v19;
          }

          objc_autoreleasePoolPop(v13);
          -[HMDHomeManager _pushChangesToUsers:forHome:](v2, "_pushChangesToUsers:forHome:", v12, v10);

        }
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v31, 16);
    }
    while (v4);
  }

}

- (void)_pushChangesToUsers:(id)a3 forHome:(id)a4
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  __CFString *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  __CFString *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  __CFString *v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  __CFString *v32;
  HMDHomeDataPushDestination *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  int v37;
  void *v38;
  NSObject *v39;
  _BOOL4 v40;
  void *v41;
  __CFString *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  __int128 v46;
  void *v47;
  void *v48;
  void *v49;
  void *v51;
  void *v52;
  id obj;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  const __CFString *v61;
  __int16 v62;
  const __CFString *v63;
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v49 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "name");
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v59 = v9;
    v60 = 2112;
    v61 = v10;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Pushing data sync changes to all users of home %@", buf, 0x16u);

    v6 = v49;
  }

  objc_autoreleasePoolPop(v7);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  objc_msgSend(v6, "users");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
  if (v11)
  {
    v13 = v11;
    v14 = *(_QWORD *)v55;
    *(_QWORD *)&v12 = 138543874;
    v46 = v12;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v55 != v14)
          objc_enumerationMutation(obj);
        v16 = *(__CFString **)(*((_QWORD *)&v54 + 1) + 8 * i);
        -[__CFString userID](v16, "userID", v46);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
        {
          v18 = v17;
          if (v5)
          {
            -[__CFString userID](v16, "userID");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = objc_msgSend(v5, "containsObject:", v19);

            if (!v20)
              continue;
          }
          else
          {

          }
          if (!-[__CFString isRemoteGateway](v16, "isRemoteGateway"))
          {
            -[__CFString uuid](v16, "uuid");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "currentUser");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "uuid");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = objc_msgSend(v26, "isEqual:", v28);

            if ((v29 & 1) != 0)
              continue;
            -[HMDHomeManager _userPushCachedGetDeviceForUser:](self, "_userPushCachedGetDeviceForUser:", v16);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = v30;
            if (v30)
              objc_msgSend(v30, "remoteDestinationString");
            else
              -[__CFString userID](v16, "userID");
            v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
            if (v32)
            {
              v33 = [HMDHomeDataPushDestination alloc];
              objc_msgSend(v31, "remoteDestinationString");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              v35 = -[HMDHomeDataPushDestination initWithUser:destination:](v33, "initWithUser:destination:", v16, v34);

              if (-[__CFString isAdministrator](v16, "isAdministrator"))
                v36 = v47;
              else
                v36 = v48;
              v51 = (void *)v35;
              objc_msgSend(v36, "addObject:", v35);
              v37 = shouldLogPrivateInformation();
              v38 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v39 = objc_claimAutoreleasedReturnValue();
              v40 = os_log_type_enabled(v39, OS_LOG_TYPE_INFO);
              if (v37)
              {
                if (v40)
                {
                  HMFGetLogIdentifier();
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  -[__CFString userID](v16, "userID");
                  v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = v46;
                  v59 = v41;
                  v60 = 2112;
                  v61 = v42;
                  v62 = 2112;
                  v63 = v32;
                  _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Will push to user %@/%@", buf, 0x20u);

                  goto LABEL_33;
                }
              }
              else if (v40)
              {
                HMFGetLogIdentifier();
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v46;
                v59 = v41;
                v60 = 2112;
                v61 = CFSTR("...");
                v62 = 2112;
                v63 = CFSTR("...");
                _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Will push to user %@/%@", buf, 0x20u);
LABEL_33:

              }
              objc_autoreleasePoolPop(v38);

              v6 = v49;
            }
            else
            {
              v43 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v44 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                HMFGetLogIdentifier();
                v45 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v59 = v45;
                v60 = 2112;
                v61 = v16;
                _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_ERROR, "%{public}@Ignoring the user %@ as it doesn't have device or userID.", buf, 0x16u);

                v6 = v49;
              }

              objc_autoreleasePoolPop(v43);
            }

            continue;
          }
          -[__CFString userID](v16, "userID");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "addObject:", v21);

          v22 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            -[__CFString userID](v16, "userID");
            v25 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v59 = v24;
            v60 = 2112;
            v61 = v25;
            _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Will push to remote gateway %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v22);
        }
      }
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v64, 16);
    }
    while (v13);
  }

  -[HMDHomeManager _pushChangesForHome:toRemoteDevicesOnSameAccount:addedUser:](self, "_pushChangesForHome:toRemoteDevicesOnSameAccount:addedUser:", v6, v52, 0);
  -[HMDHomeManager _pushChangesForHome:toRegularUsersOfHome:adminUsersOfHome:](self, "_pushChangesForHome:toRegularUsersOfHome:adminUsersOfHome:", v6, v48, v47);

}

- (void)_pushUserRemovedForHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id obj;
  _QWORD v30[6];
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t v36[128];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "removedUsers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v38 = v10;
    v39 = 2112;
    v40 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Attempting to resend remove message to removed users: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  obj = v6;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v33 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
        if (objc_msgSend(v14, "isExpired"))
        {
          v15 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v38 = v17;
            v39 = 2112;
            v40 = v14;
            _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Removed user has expired: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v15);
          objc_msgSend(v4, "removedUsers");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "removeObject:", v14);

        }
        else if (objc_msgSend(v14, "isRemovalInProgress"))
        {
          v19 = (void *)MEMORY[0x1D17BA0A0]();
          v20 = v8;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v38 = v22;
            v39 = 2112;
            v40 = v14;
            _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Skipping resending message to user whose removal is already in progress: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v19);
        }
        else
        {
          v23 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v14, "setRemovalInProgress:", 1));
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v38 = v25;
            v39 = 2112;
            v40 = v14;
            _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Resending message to removed user: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v23);
          objc_initWeak((id *)buf, v4);
          objc_msgSend(v14, "user");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "user");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "pairingUsername");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v30[0] = MEMORY[0x1E0C809B0];
          v30[1] = 3221225472;
          v30[2] = __42__HMDHomeManager__pushUserRemovedForHome___block_invoke;
          v30[3] = &unk_1E89C1698;
          v30[4] = v14;
          objc_copyWeak(&v31, (id *)buf);
          v30[5] = v8;
          -[HMDHomeManager sendUserRemoved:fromHome:pairingUsername:pushToCloud:completionHandler:](v8, "sendUserRemoved:fromHome:pairingUsername:pushToCloud:completionHandler:", v26, v4, v28, 0, v30);

          objc_destroyWeak(&v31);
          objc_destroyWeak((id *)buf);
        }
      }
      v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v11);
  }

}

- (unsigned)_nextTransactionIdentifier
{
  unsigned __int16 nextRequestTransactionIdentifier;

  nextRequestTransactionIdentifier = self->_nextRequestTransactionIdentifier;
  self->_nextRequestTransactionIdentifier = nextRequestTransactionIdentifier + 1;
  return nextRequestTransactionIdentifier;
}

- (void)_pushChangesForHome:(id)a3 toRemoteDevicesOnSameAccount:(id)a4 addedUser:(id)a5
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  char v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *context;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  id obj;
  NSObject *group;
  uint64_t v51;
  uint64_t v52;
  uint64_t i;
  _QWORD block[5];
  _QWORD v56[6];
  id v57;
  id v58;
  id v59;
  id v60;
  NSObject *v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  id location;
  _QWORD v72[5];
  id v73;
  _BYTE v74[128];
  _BYTE v75[128];
  _QWORD v76[5];
  _QWORD v77[5];
  const __CFString *v78;
  void *v79;
  const __CFString *v80;
  void *v81;
  uint8_t buf[4];
  void *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v48 = a3;
  v43 = a4;
  v47 = a5;
  if (!isWatch() && objc_msgSend(v43, "count"))
  {
    context = (void *)MEMORY[0x1D17BA0A0]();
    v72[0] = 0;
    v72[1] = v72;
    v72[2] = 0x3032000000;
    v72[3] = __Block_byref_object_copy__165094;
    v72[4] = __Block_byref_object_dispose__165095;
    v73 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.push-home-to-gateways"));
    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v7 = objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[HMDHomeManager _prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:](self, "_prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:", v48, 1, 0);
      v42 = (void *)v7;
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "objectForKeyedSubscript:", CFSTR("kHomeDataKey"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "hmd_compressedData");
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:messagePayload:", CFSTR("kHomeDataSyncRequestKey"), v40);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      if (v39)
      {
        v80 = CFSTR("kHomeDataKey");
        v81 = v39;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v81, &v80, 1);
        v9 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:messagePayload:", CFSTR("kHomeDataSyncRequestKey"), v9);
        v45 = (id)objc_claimAutoreleasedReturnValue();
        v38 = (void *)v9;
      }
      else
      {
        v45 = v46;
        v38 = 0;
      }
      objc_initWeak(&location, self);
      group = dispatch_group_create();
      v78 = CFSTR("kRequestedCapabilitiesKey");
      v76[0] = CFSTR("kMetadataInfoVersionKey");
      objc_msgSend(v42, "version");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v77[0] = v14;
      v76[1] = CFSTR("kMetadataInfoSchemaVersionKey");
      objc_msgSend(v42, "schemaVersion");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v77[1] = v15;
      v76[2] = CFSTR("kMetadataInfoCompletenessKey");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v42, "incomplete") ^ 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v77[2] = v16;
      v77[3] = &unk_1E8B32298;
      v76[3] = CFSTR("kHomedSupportedFeaturesKey");
      v76[4] = CFSTR("kHomedVersionKey");
      v17 = (id)homedVersion;
      v77[4] = v17;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v77, v76, 5);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v79 = v18;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v78, 1);
      v44 = (void *)objc_claimAutoreleasedReturnValue();

      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      obj = v43;
      v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v75, 16);
      if (v52)
      {
        v51 = *(_QWORD *)v68;
        do
        {
          for (i = 0; i != v52; ++i)
          {
            if (*(_QWORD *)v68 != v51)
              objc_enumerationMutation(obj);
            v19 = *(_QWORD *)(*((_QWORD *)&v67 + 1) + 8 * i);
            -[HMDHomeManager appleAccountManager](self, "appleAccountManager", v38);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "account");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "devices");
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v23 = v22;
            v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v63, v74, 16);
            if (v24)
            {
              v25 = *(_QWORD *)v64;
              while (2)
              {
                for (j = 0; j != v24; ++j)
                {
                  if (*(_QWORD *)v64 != v25)
                    objc_enumerationMutation(v23);
                  v27 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * j);
                  objc_msgSend(v27, "remoteDestinationString");
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  if ((objc_msgSend(v28, "isEqualToString:", v19) & 1) != 0)
                  {
                    objc_msgSend(v27, "version");
                    v29 = (void *)objc_claimAutoreleasedReturnValue();
                    v30 = (id)minimumSupportedResidentHomeKitVersion;
                    v31 = objc_msgSend(v29, "isAtLeastVersion:", v30);

                    if ((v31 & 1) != 0)
                    {

                      v33 = (void *)MEMORY[0x1D17BA0A0]();
                      HMFGetOSLogHandle();
                      v34 = (id)objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        v36 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138543362;
                        v83 = v36;
                        _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Resident syncs through cloud, don't send data through IDS.", buf, 0xCu);

                      }
                      objc_autoreleasePoolPop(v33);
                      goto LABEL_30;
                    }
                  }
                  else
                  {

                  }
                }
                v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v63, v74, 16);
                if (v24)
                  continue;
                break;
              }
            }

            dispatch_group_enter(group);
            -[HMDHomeManager workQueue](self, "workQueue");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v56[0] = MEMORY[0x1E0C809B0];
            v56[1] = 3221225472;
            v56[2] = __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke;
            v56[3] = &unk_1E89BCD80;
            v56[4] = self;
            v56[5] = v19;
            v57 = v48;
            v58 = v46;
            v59 = v45;
            v60 = v47;
            v61 = group;
            objc_copyWeak(&v62, &location);
            -[HMDHomeManager electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:](self, "electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:", v19, v19, v44, v32, v56);

            objc_destroyWeak(&v62);
LABEL_30:

          }
          v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v75, 16);
        }
        while (v52);
      }

      -[HMDHomeManager workQueue](self, "workQueue");
      v37 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_559;
      block[3] = &unk_1E89BCDA8;
      block[4] = v72;
      dispatch_group_notify(group, v37, block);

      objc_destroyWeak(&location);
      v10 = v42;
    }
    else
    {
      v10 = 0;
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v12 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v83 = v13;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@No metadata to push changes for Home", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
    }

    _Block_object_dispose(v72, 8);
    objc_autoreleasePoolPop(context);
  }

}

- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5
{
  return -[HMDHomeManager _prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:migrateToHH2:](self, "_prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:migrateToHH2:", a3, a4, a5, 0);
}

- (id)_prepareDataForDevicesOnSameAccountForHome:(id)a3 remoteGateway:(BOOL)a4 isAtLeastV4:(BOOL)a5 migrateToHH2:(BOOL)a6
{
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  const __CFString *v25;
  _QWORD v26[2];

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v26[1] = *MEMORY[0x1E0C80C00];
  v10 = (void *)MEMORY[0x1E0C99E08];
  v11 = a3;
  objc_msgSend(v10, "dictionary");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "hapAccessoriesForLegacyDataBlobEncoding");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("kAccessoriesDataBlobKey"));

  objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, CFSTR("kHomeDataBlobKey"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", &unk_1E8B34F98, CFSTR("kHomeDataVersionKey"));
  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v15, CFSTR("kPrimaryHomeUUIDKey"));

  v16 = (void *)objc_msgSend(v12, "copy");
  v17 = v16;
  if (v8)
  {
    v18 = v16;
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.hmdutil.encode-remote-gateway."));
    v21 = -[HMDRemoteKeyedArchiver initForWritingWithRemoteDeviceIsOnSameAccount:remoteGateway:remoteUserIsAdministrator:user:supportedFeatures:]([HMDRemoteKeyedArchiver alloc], "initForWritingWithRemoteDeviceIsOnSameAccount:remoteGateway:remoteUserIsAdministrator:user:supportedFeatures:", 1, 1, 0, 0, 0);
    objc_msgSend(v21, "encodeObject:forKey:", v18, *MEMORY[0x1E0CB2CD0]);
    objc_msgSend(v21, "finishEncoding");
    objc_msgSend(v21, "encodedData");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    objc_autoreleasePoolPop(v19);
  }
  else
  {
    encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v16, v7, v6);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v25 = CFSTR("kHomeDataKey");
  v26[0] = v22;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  return v23;
}

- (void)_pushChangesToWatch:(id)a3 payload:(id)a4 group:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(id *, uint64_t, void *);
  void *v26;
  NSObject *v27;
  id v28;
  id v29;
  id location;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  dispatch_group_enter(v12);
  -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "objectForKey:", v10);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "metadataConfig");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager checkAndPushMetadataToUser:destination:userInfo:](self, "checkAndPushMetadataToUser:destination:userInfo:", v10, v10, v16);

  -[HMDHomeManager uuid](self, "uuid");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", v17, 0, v10, 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:qualityOfService:destination:payload:", CFSTR("kHomeDataSyncRequestKey"), 17, v18, v11);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setSecureRemote:", 1);
  objc_msgSend(v19, "setRemoteRestriction:", 4);
  objc_initWeak(&location, self);
  v23 = MEMORY[0x1E0C809B0];
  v24 = 3221225472;
  v25 = __70__HMDHomeManager__pushChangesToWatch_payload_group_completionHandler___block_invoke;
  v26 = &unk_1E89BCDD0;
  objc_copyWeak(&v29, &location);
  v20 = v12;
  v27 = v20;
  v21 = v13;
  v28 = v21;
  objc_msgSend(v19, "setResponseHandler:", &v23);
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher", v23, v24, v25, v26);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "sendMessage:completionHandler:", v19, 0);

  objc_destroyWeak(&v29);
  objc_destroyWeak(&location);

}

- (id)generateDataForSharedHomeModel:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v8[0] = CFSTR("kAccessoriesDataBlobKey");
  v3 = a3;
  objc_msgSend(v3, "hapAccessoriesForLegacyDataBlobEncoding");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v4;
  v9[1] = v3;
  v8[1] = CFSTR("kHomeDataBlobKey");
  v8[2] = CFSTR("kHomeDataVersionKey");
  v9[2] = &unk_1E8B34F98;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v5, 1, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)generatePayloadFromHome:(id)a3 forAdmin:(BOOL)a4 user:(id)a5 supportedFeatures:(id)a6
{
  _BOOL4 v8;
  id v10;
  id v11;
  id v12;
  void *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void *context;
  const __CFString *v34;
  void *v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  id v39;
  _QWORD v40[3];
  _QWORD v41[3];
  _QWORD v42[4];
  _QWORD v43[6];

  v8 = a4;
  v43[4] = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a5;
  v12 = a6;
  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = 0x1E0C99000uLL;
  if (v13)
  {
    v42[0] = CFSTR("kAccessoriesDataBlobKey");
    objc_msgSend(v10, "hapAccessoriesForLegacyDataBlobEncoding");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v43[0] = v15;
    v42[1] = CFSTR("kPrimaryHomeUUIDKey");
    -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "UUIDString");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v43[1] = v17;
    v43[2] = v10;
    v42[2] = CFSTR("kHomeDataBlobKey");
    v42[3] = CFSTR("kHomeDataVersionKey");
    v43[3] = &unk_1E8B34F98;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v43, v42, 4);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v40[0] = CFSTR("kAccessoriesDataBlobKey");
    objc_msgSend(v10, "hapAccessoriesForLegacyDataBlobEncoding");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v41[0] = v15;
    v41[1] = v10;
    v40[1] = CFSTR("kHomeDataBlobKey");
    v40[2] = CFSTR("kHomeDataVersionKey");
    v41[2] = &unk_1E8B34F98;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v19 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v21;
    v38 = 2112;
    v39 = v11;
    _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@generatePayloadFromHome: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v19);
  if (v8)
  {
    v22 = v18;
    v23 = v11;
    v24 = v12;
    context = (void *)MEMORY[0x1D17BA0A0]();
    v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.hmdutil.encode-remote-admin."));
    v26 = v10;
    v27 = v11;
    v28 = v12;
    v29 = -[HMDRemoteKeyedArchiver initForWritingWithRemoteDeviceIsOnSameAccount:remoteGateway:remoteUserIsAdministrator:user:supportedFeatures:]([HMDRemoteKeyedArchiver alloc], "initForWritingWithRemoteDeviceIsOnSameAccount:remoteGateway:remoteUserIsAdministrator:user:supportedFeatures:", 0, 0, 1, v23, v24);
    objc_msgSend(v29, "encodeObject:forKey:", v22, *MEMORY[0x1E0CB2CD0]);
    objc_msgSend(v29, "finishEncoding");
    objc_msgSend(v29, "encodedData");
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = v28;
    v11 = v27;
    v10 = v26;

    v14 = 0x1E0C99000;
    objc_autoreleasePoolPop(context);

  }
  else
  {
    encodeRootObjectForRemote(v18, v11, v12);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v34 = CFSTR("kHomeDataKey");
  v35 = v30;
  objc_msgSend(*(id *)(v14 + 3456), "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  return v31;
}

- (id)_compressHomeData:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a3, "objectForKey:", CFSTR("kHomeDataKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v8 = CFSTR("kHomeDataKey");
    objc_msgSend(v3, "hmd_compressedData");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)_pushChangesForHome:(id)a3 toRegularUsersOfHome:(id)a4 adminUsersOfHome:(id)a5
{
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  NSObject *v35;
  void *v36;
  void *context;
  void *v38;
  id v39;
  id obj;
  void *v41;
  void *v42;
  HMDHomeManager *v43;
  id v44;
  id v45;
  _QWORD block[6];
  _QWORD v47[4];
  id v48;
  void *v49;
  HMDHomeManager *v50;
  id v51;
  id v52;
  NSObject *v53;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  id location;
  _QWORD v60[5];
  id v61;
  _BYTE v62[128];
  _QWORD v63[7];
  _QWORD v64[7];
  const __CFString *v65;
  const __CFString *v66;
  _QWORD v67[2];
  _QWORD v68[2];
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  id v72;
  __int16 v73;
  id v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v44 = a3;
  v39 = a4;
  v45 = a5;
  if (!isWatch() && (objc_msgSend(v39, "count") || objc_msgSend(v45, "count")))
  {
    context = (void *)MEMORY[0x1D17BA0A0]();
    v60[0] = 0;
    v60[1] = v60;
    v60[2] = 0x3032000000;
    v60[3] = __Block_byref_object_copy__165094;
    v60[4] = __Block_byref_object_dispose__165095;
    v61 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.push-home-to-users"));
    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    if (v38)
    {
      HMFGetOSLogHandle();
      v43 = v9;
      v10 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v70 = v11;
        v71 = 2112;
        v72 = v45;
        v73 = 2112;
        v74 = v39;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Pushing home changes to admins: %@ and regular users: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v8);
      v65 = CFSTR("kDeviceClassTypeKey");
      v66 = CFSTR("kDeviceClassTypeTransient");
      v67[0] = CFSTR("kRequiredCapabilitiesKey");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v66, &v65, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v67[1] = CFSTR("kRequestedCapabilitiesKey");
      v68[0] = v12;
      v63[0] = CFSTR("kHomedVersionKey");
      v13 = (id)homedVersion;
      v64[0] = v13;
      v64[1] = &unk_1E8B322B0;
      v63[1] = CFSTR("kHomedSupportedFeaturesKey");
      v63[2] = CFSTR("kHomeUUID");
      objc_msgSend(v44, "uuid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v64[2] = v15;
      v63[3] = CFSTR("kHomeConfigurationVersionKey");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v44, "configurationVersion"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v64[3] = v16;
      v63[4] = CFSTR("kMetadataInfoVersionKey");
      objc_msgSend(v38, "version");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v64[4] = v17;
      v63[5] = CFSTR("kMetadataInfoSchemaVersionKey");
      objc_msgSend(v38, "schemaVersion");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v64[5] = v18;
      v63[6] = CFSTR("kMetadataInfoCompletenessKey");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v38, "incomplete") ^ 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v64[6] = v19;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v64, v63, 7);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v68[1] = v20;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v68, v67, 2);
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      v21 = dispatch_group_create();
      objc_msgSend(v39, "arrayByAddingObjectsFromArray:", v45);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _getListOfUsersToPushMetadataChangesTo](v43, "_getListOfUsersToPushMetadataChangesTo");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_initWeak(&location, v43);
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      obj = v22;
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v62, 16);
      if (v23)
      {
        v24 = *(_QWORD *)v56;
        do
        {
          for (i = 0; i != v23; ++i)
          {
            if (*(_QWORD *)v56 != v24)
              objc_enumerationMutation(obj);
            v26 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
            v27 = (void *)MEMORY[0x1D17BA0A0]();
            v28 = v43;
            HMFGetOSLogHandle();
            v29 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v70 = v30;
              v71 = 2112;
              v72 = v26;
              _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@Pushing home changes to shared user: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v27);
            dispatch_group_enter(v21);
            objc_msgSend(v26, "pushDestination");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "destination");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHomeManager workQueue](v28, "workQueue");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v47[0] = MEMORY[0x1E0C809B0];
            v47[1] = 3221225472;
            v47[2] = __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke;
            v47[3] = &unk_1E89BCDF8;
            v48 = v42;
            v49 = v26;
            v50 = v28;
            v51 = v44;
            v52 = v45;
            v53 = v21;
            objc_copyWeak(&v54, &location);
            -[HMDHomeManager electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:](v28, "electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:", v31, v32, v41, v33, v47);

            objc_destroyWeak(&v54);
          }
          v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v62, 16);
        }
        while (v23);
      }

      -[HMDHomeManager workQueue](v43, "workQueue");
      v34 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_570;
      block[3] = &unk_1E89C0800;
      block[4] = v43;
      block[5] = v60;
      dispatch_group_notify(v21, v34, block);

      objc_destroyWeak(&location);
    }
    else
    {
      HMFGetOSLogHandle();
      v35 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v70 = v36;
        _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_ERROR, "%{public}@No metadata to push changes for home", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
    }

    _Block_object_dispose(v60, 8);
    objc_autoreleasePoolPop(context);
  }

}

- (void)_archiveSyncDataForHome:(id)a3
{
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t v24[128];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "name");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v26 = v6;
    v27 = 2112;
    v28 = v7;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Archiving home [%@] for all users", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  objc_msgSend(v3, "users");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v21 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_msgSend(v13, "userID");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          if ((objc_msgSend(v13, "isRemoteGateway") & 1) == 0)
          {
            objc_msgSend(v13, "uuid");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "currentUser");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "uuid");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v18 = objc_msgSend(v15, "isEqual:", v17);

            if ((v18 & 1) == 0)
              -[HMDHomeManager _archiveSyncDataForHome:toUser:](self, "_archiveSyncDataForHome:toUser:", v3, v13);
          }
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v10);
  }

}

- (void)_archiveSyncDataForHome:(id)a3 toUser:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  v6 = a4;
  if (!isWatch())
  {
    -[HMDHomeManager generatePayloadFromHome:forAdmin:user:supportedFeatures:](self, "generatePayloadFromHome:forAdmin:user:supportedFeatures:", v11, objc_msgSend(v6, "isAdministrator"), v6, &unk_1E8B322C8);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKey:", CFSTR("kHomeDataKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      objc_msgSend(v8, "hmd_compressedData");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "saveSyncDataToLocalDisk:", v10);

    }
  }

}

- (void)checkAndPushMetadataToUser:(id)a3 destination:(id)a4 userInfo:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  BOOL v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  HMDHomeManager *v30;
  NSObject *v31;
  void *v32;
  _BOOL4 v33;
  void *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  NSObject *v51;
  id v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *context;
  void *contexta;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  _QWORD v64[4];
  id v65;
  uint64_t *v66;
  id v67;
  _QWORD v68[4];
  id v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  void (*v75)(uint64_t);
  id v76;
  uint8_t buf[4];
  id v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  id v82;
  __int16 v83;
  id v84;
  __int16 v85;
  void *v86;
  __int16 v87;
  void *v88;
  __int16 v89;
  void *v90;
  __int16 v91;
  void *v92;
  __int16 v93;
  uint64_t v94;
  const __CFString *v95;
  _QWORD v96[4];

  v96[1] = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (!isWatch())
  {
    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "hmf_numberForKey:", CFSTR("kMetadataInfoVersionKey"));
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "hmf_numberForKey:", CFSTR("kMetadataInfoSchemaVersionKey"));
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11 && v63 && v62)
    {
      objc_msgSend(v11, "schemaVersion");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v12, "isEqualToNumber:", v63))
      {
        objc_msgSend(v11, "version");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "unsignedIntegerValue");
        v15 = v14 > objc_msgSend(v62, "unsignedIntegerValue");

      }
      else
      {
        v15 = 0;
      }

      objc_msgSend(v10, "hmf_numberForKey:", CFSTR("kMetadataInfoCompletenessKey"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      if (v16)
      {
        v18 = objc_msgSend(v16, "BOOLValue");
        if ((objc_msgSend(v11, "incomplete") & 1) == 0 && (v18 & 1) == 0)
        {
          objc_msgSend(v11, "schemaVersion");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v19, "isEqualToNumber:", v63) & 1) != 0)
          {
            objc_msgSend(v11, "version");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = objc_msgSend(v20, "unsignedIntegerValue");
            v21 = v11;
            v22 = v8;
            v23 = v9;
            v24 = objc_msgSend(v62, "unsignedIntegerValue");

            v25 = v60 == v24;
            v9 = v23;
            v8 = v22;
            v11 = v21;
            if (v25)
            {
              v26 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v27 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543362;
                v78 = v28;
                _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Remote metadata is incomplete, local metadata is complete - sending...", buf, 0xCu);

              }
              objc_autoreleasePoolPop(v26);

              goto LABEL_20;
            }
          }
          else
          {

          }
        }
      }
      else
      {
        objc_msgSend(v11, "incomplete");
      }

      if (v15)
      {
LABEL_20:
        v29 = (void *)MEMORY[0x1D17BA0A0]();
        v30 = self;
        HMFGetOSLogHandle();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v78 = v32;
          _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Push metadata changes to the user", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v29);
        context = (void *)MEMORY[0x1D17BA0A0]();
        v71 = 0;
        v72 = &v71;
        v73 = 0x3032000000;
        v74 = __Block_byref_object_copy__165094;
        v75 = __Block_byref_object_dispose__165095;
        v76 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.push-metadata"));
        objc_msgSend(v10, "hmf_numberForKey:", CFSTR("kHomedVersionKey"));
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = +[HMDHAPMetadata isHomedVersionSupported:](HMDHAPMetadata, "isHomedVersionSupported:");
        v34 = (void *)MEMORY[0x1D17BA0A0]();
        if (v33)
        {
          HMFGetOSLogHandle();
          v35 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v78 = v36;
            v79 = 2112;
            v80 = (uint64_t)v8;
            v81 = 2112;
            v82 = v59;
            _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Push metadata dictionary to user %@ as its version %@ is supported.", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v34);
          v37 = (void *)MEMORY[0x1E0CB36F8];
          +[HMDPersistentStore loadPlainMetadataDictionary](HMDPersistentStore, "loadPlainMetadataDictionary", context);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "archivedDataWithRootObject:requiringSecureCoding:error:", v38, 1, 0);
          v39 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v39, "hmd_compressedData");
          v61 = (void *)objc_claimAutoreleasedReturnValue();

          +[HMDHAPMetadataModel metadataModelObjectUUID](HMDHAPMetadataModel, "metadataModelObjectUUID");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "UUIDString");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v68[0] = MEMORY[0x1E0C809B0];
          v68[1] = 3221225472;
          v68[2] = __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke;
          v68[3] = &unk_1E89BCE20;
          v69 = v8;
          v70 = &v71;
          -[HMDHomeManager sendFragmentedMessageForData:objectUUID:withMessageName:toUser:destination:completionHandler:](v30, "sendFragmentedMessageForData:objectUUID:withMessageName:toUser:destination:completionHandler:", v61, v41, CFSTR("kMetadataDataSyncRequestKey"), v69, v9, v68);

          v42 = v69;
        }
        else
        {
          HMFGetOSLogHandle();
          v43 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v78 = v44;
            v79 = 2112;
            v80 = (uint64_t)v8;
            v81 = 2112;
            v82 = v59;
            _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Sending old metadata data to %@ as it is a legacy device %@.", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v34);
          +[HMDHAPMetadata legacyV3DataForIDS](HMDHAPMetadata, "legacyV3DataForIDS", context);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = (void *)MEMORY[0x1E0D285D0];
          v95 = CFSTR("kHAPMetadataDataKey");
          v96[0] = v61;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v96, &v95, 1);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "internalMessageWithName:messagePayload:", CFSTR("kMetadataDataSyncRequestKey"), v46);
          v42 = (void *)objc_claimAutoreleasedReturnValue();

          objc_initWeak((id *)buf, v30);
          -[HMDHomeManager messageDispatcher](v30, "messageDispatcher");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager uuid](v30, "uuid");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager workQueue](v30, "workQueue");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v64[0] = MEMORY[0x1E0C809B0];
          v64[1] = 3221225472;
          v64[2] = __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke_577;
          v64[3] = &unk_1E89BCE48;
          objc_copyWeak(&v67, (id *)buf);
          v65 = v8;
          v66 = &v71;
          objc_msgSend(v47, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v42, v48, v65, v9, v49, v64);

          objc_destroyWeak(&v67);
          objc_destroyWeak((id *)buf);
        }

        v50 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v51 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v52 = (id)objc_claimAutoreleasedReturnValue();
          v53 = objc_msgSend(v61, "length");
          objc_msgSend(v11, "schemaVersion");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "version");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          v56 = v72[5];
          *(_DWORD *)buf = 138545410;
          v78 = v52;
          v79 = 2048;
          v80 = v53;
          v81 = 2112;
          v82 = v8;
          v83 = 2112;
          v84 = v9;
          v85 = 2112;
          v86 = v54;
          v87 = 2112;
          v88 = v55;
          v89 = 2112;
          v90 = v63;
          v91 = 2112;
          v92 = v62;
          v93 = 2112;
          v94 = v56;
          _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@Pushing metadata(%lu bytes) change to user %@ (%@) - local %@/%@  remote %@/%@ - creating transaction %@", buf, 0x5Cu);

        }
        objc_autoreleasePoolPop(v50);

        _Block_object_dispose(&v71, 8);
        objc_autoreleasePoolPop(contexta);
      }
    }

  }
}

- (id)_getListOfUsersToPushMetadataChangesTo
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id obj;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  id v41;
  id v42;
  _BYTE v43[128];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = 0;
  v42 = 0;
  objc_msgSend(v3, "getControllerPublicKey:secretKey:username:allowCreation:error:", 0, 0, &v42, 0, &v41);
  v4 = v42;
  v27 = v41;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  -[HMDHomeManager homes](self, "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v38;
    v9 = MEMORY[0x1E0C9AAB0];
    v28 = *(_QWORD *)v38;
    v29 = v4;
    do
    {
      v10 = 0;
      v30 = v7;
      do
      {
        if (*(_QWORD *)v38 != v8)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v10);
        objc_msgSend(v11, "ownerName", v27);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "isEqualToString:", v4);

        if (v13)
        {
          v32 = v10;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          objc_msgSend(v11, "users");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
          if (!v15)
            goto LABEL_20;
          v16 = v15;
          v17 = *(_QWORD *)v34;
          while (1)
          {
            for (i = 0; i != v16; ++i)
            {
              if (*(_QWORD *)v34 != v17)
                objc_enumerationMutation(v14);
              v19 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
              objc_msgSend(v19, "userID");
              v20 = (void *)objc_claimAutoreleasedReturnValue();

              if (v20)
              {
                if (objc_msgSend(v19, "isRemoteGateway"))
                {
                  objc_msgSend(v19, "userID");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = v5;
                  v23 = v9;
                }
                else
                {
                  objc_msgSend(v11, "currentUser");
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  v25 = objc_msgSend(v19, "isEqual:", v24);

                  if ((v25 & 1) != 0)
                    continue;
                  objc_msgSend(v19, "userID");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = v5;
                  v23 = MEMORY[0x1E0C9AAA0];
                }
                objc_msgSend(v22, "setObject:forKeyedSubscript:", v23, v21);

              }
            }
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
            if (!v16)
            {
LABEL_20:

              v8 = v28;
              v4 = v29;
              v7 = v30;
              v10 = v32;
              break;
            }
          }
        }
        ++v10;
      }
      while (v10 != v7);
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
    }
    while (v7);
  }

  return v5;
}

- (void)_pushMetadataChangesToUsers
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  id v46;
  void *v47;
  HMDHomeManager *v48;
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  id location;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  id v60;
  _BYTE v61[128];
  _QWORD v62[4];
  _QWORD v63[4];
  const __CFString *v64;
  const __CFString *v65;
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[4];
  _QWORD v69[4];
  const __CFString *v70;
  _QWORD v71[4];

  v71[1] = *MEMORY[0x1E0C80C00];
  if (isWatch())
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v56 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Cannot push metadata changes from watch or simulator to other users.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }
  else
  {
    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (v40)
    {
      -[HMDHomeManager _getListOfUsersToPushMetadataChangesTo](self, "_getListOfUsersToPushMetadataChangesTo");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v39, "count")
        || (-[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers"),
            v7 = (void *)objc_claimAutoreleasedReturnValue(),
            v8 = objc_msgSend(v7, "count"),
            v7,
            v8))
      {
        v70 = CFSTR("kRequestedCapabilitiesKey");
        v68[0] = CFSTR("kMetadataInfoVersionKey");
        objc_msgSend(v40, "version");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v69[0] = v9;
        v68[1] = CFSTR("kMetadataInfoSchemaVersionKey");
        objc_msgSend(v40, "schemaVersion");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v69[1] = v10;
        v68[2] = CFSTR("kMetadataInfoCompletenessKey");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v40, "incomplete") ^ 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v69[2] = v11;
        v68[3] = CFSTR("kHomedVersionKey");
        v12 = (id)homedVersion;
        v69[3] = v12;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v69, v68, 4);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v71[0] = v13;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v71, &v70, 1);
        v42 = (void *)objc_claimAutoreleasedReturnValue();

        v64 = CFSTR("kDeviceClassTypeKey");
        v65 = CFSTR("kDeviceClassTypeTransient");
        v66[0] = CFSTR("kRequiredCapabilitiesKey");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v66[1] = CFSTR("kRequestedCapabilitiesKey");
        v67[0] = v14;
        v62[0] = CFSTR("kMetadataInfoVersionKey");
        objc_msgSend(v40, "version");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v63[0] = v15;
        v62[1] = CFSTR("kMetadataInfoSchemaVersionKey");
        objc_msgSend(v40, "schemaVersion");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v63[1] = v16;
        v62[2] = CFSTR("kMetadataInfoCompletenessKey");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v40, "incomplete") ^ 1);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v63[2] = v17;
        v62[3] = CFSTR("kHomedVersionKey");
        v18 = (id)homedVersion;
        v63[3] = v18;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v63, v62, 4);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v67[1] = v19;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v67, v66, 2);
        v41 = (void *)objc_claimAutoreleasedReturnValue();

        objc_initWeak(&location, self);
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v20 = v39;
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
        if (v21)
        {
          v43 = *(_QWORD *)v51;
          do
          {
            v44 = v21;
            for (i = 0; i != v44; ++i)
            {
              if (*(_QWORD *)v51 != v43)
                objc_enumerationMutation(v20);
              v23 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * i);
              if (objc_msgSend(v20, "hmf_BOOLForKey:", v23))
              {
                v24 = v23;
                v25 = v42;
              }
              else
              {
                v24 = 0;
                v25 = v41;
              }
              v26 = v25;
              v27 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v28 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v56 = v29;
                v57 = 2112;
                v58 = v23;
                v59 = 2112;
                v60 = v24;
                _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Preparing for metadata push to user: %@ with destination: %@", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v27);
              -[HMDHomeManager workQueue](self, "workQueue");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              v45[0] = MEMORY[0x1E0C809B0];
              v45[1] = 3221225472;
              v45[2] = __45__HMDHomeManager__pushMetadataChangesToUsers__block_invoke;
              v45[3] = &unk_1E89BCE70;
              objc_copyWeak(&v49, &location);
              v31 = v20;
              v46 = v31;
              v47 = v23;
              v48 = self;
              -[HMDHomeManager electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:](self, "electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:", v23, v24, v26, v30, v45);

              objc_destroyWeak(&v49);
            }
            v21 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
          }
          while (v21);
        }

        objc_destroyWeak(&location);
      }
      else
      {
        v35 = (void *)MEMORY[0x1D17BA0A0]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v56 = v38;
          _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Not pushing metadata changes to anybody as either there are no users or there are no associated watches with this account.", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v35);
      }

    }
    else
    {
      v32 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v56 = v34;
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_ERROR, "%{public}@No metadata to push changes to shared users.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v32);
    }

  }
}

- (void)pushMetadataToAllWatches
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v7);
        -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "objectForKey:", v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "metadataConfig");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager checkAndPushMetadataToUser:destination:userInfo:](self, "checkAndPushMetadataToUser:destination:userInfo:", v8, v8, v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

}

- (void)_addPendingDataSyncAcksForUser:(id)a3 forHome:(id)a4
{
  __CFString *v6;
  id v7;
  int v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  int v21;
  void *v22;
  __int16 v23;
  __CFString *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = (__CFString *)a3;
  v7 = a4;
  v8 = shouldLogPrivateInformation();
  v9 = CFSTR("...");
  if (v8)
    v9 = v6;
  v10 = v9;
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543874;
    v22 = v13;
    v23 = 2112;
    v24 = v10;
    v25 = 2112;
    v26 = v14;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Adding pending data sync ack for user %@ for data corresponding to home %@", (uint8_t *)&v21, 0x20u);

  }
  objc_autoreleasePoolPop(v11);
  objc_msgSend(v7, "UUIDString");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "objectForKeyedSubscript:", v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v17)
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v17, v15);

  }
  objc_msgSend(v17, "addObject:", v6);
  -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = +[HMDPersistentStore archiveIDSDataSyncJournal:](HMDPersistentStore, "archiveIDSDataSyncJournal:", v19);

}

- (void)_removePendingDataSyncAcksForUser:(id)a3 forHome:(id)a4
{
  __CFString *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  __CFString *v12;
  __CFString *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  __CFString *v22;
  void *v23;
  id v24;
  int v25;
  void *v26;
  __int16 v27;
  __CFString *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = (__CFString *)a3;
  v7 = a4;
  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKeyedSubscript:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(v10, "removeObject:", v6);
    if (!objc_msgSend(v10, "count"))
    {
      v11 = shouldLogPrivateInformation();
      v12 = CFSTR("...");
      if (v11)
        v12 = v6;
      v13 = v12;
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "UUIDString");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543874;
        v26 = v16;
        v27 = 2112;
        v28 = v13;
        v29 = 2112;
        v30 = v17;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Removing pending data sync ack for user %@ for data corresponding to home %@", (uint8_t *)&v25, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
      -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "removeObjectForKey:", v8);

    }
  }
  v19 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
    v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v25 = 138543618;
    v26 = v21;
    v27 = 2112;
    v28 = v22;
    _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Remaining pending data sync acks %@", (uint8_t *)&v25, 0x16u);

  }
  objc_autoreleasePoolPop(v19);
  -[HMDHomeManager pendingDataSyncAcks](self, "pendingDataSyncAcks");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = +[HMDPersistentStore archiveIDSDataSyncJournal:](HMDPersistentStore, "archiveIDSDataSyncJournal:", v23);

}

- (void)_pushChangesToCloud:(BOOL)a3 withDelay:(double)a4
{
  -[HMDHomeManager _pushChangesToCloud:withDelay:reason:](self, "_pushChangesToCloud:withDelay:reason:", a3, 0, a4);
}

- (void)_pushChangesToCloud:(BOOL)a3 withDelay:(double)a4 reason:(id)a5
{
  _BOOL8 v6;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  char v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  const __CFString *v32;
  uint64_t v33;

  v6 = a3;
  v33 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  if (!-[HMDHomeManager accountActive](self, "accountActive") || isWatch() || disableCloudDataSync)
  {
    -[HMDHomeManager setBackOffOperationInProgress:](self, "setBackOffOperationInProgress:", 0);
    goto LABEL_19;
  }
  -[HMDHomeManager msgFilterChain](self, "msgFilterChain");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "shouldCloudSyncData");

  if ((_DWORD)v10 != -[HMDHomeManager lastAnswerForShouldCloudSyncData](self, "lastAnswerForShouldCloudSyncData"))
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = (void *)v13;
      v15 = CFSTR("No");
      if ((_DWORD)v10)
        v15 = CFSTR("Yes");
      v29 = 138543618;
      v30 = v13;
      v31 = 2112;
      v32 = v15;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Filter chain result for shouldCloudSyncData: %@", (uint8_t *)&v29, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    -[HMDHomeManager setLastAnswerForShouldCloudSyncData:](self, "setLastAnswerForShouldCloudSyncData:", v10);
  }
  if ((v10 & 1) != 0)
  {
    -[HMDHomeManager reachabilityMonitor](self, "reachabilityMonitor");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "isReachable");

    if ((v17 & 1) != 0)
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138543362;
        v30 = (uint64_t)v20;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Scheduling cloud push", (uint8_t *)&v29, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      if (-[HMDHomeManager accountStatusFailedDueToNetworkFailure](self, "accountStatusFailedDueToNetworkFailure"))
      {
        v21 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = 138543362;
          v30 = (uint64_t)v23;
          _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping push to the cloud since failed to determine account status because of network failure", (uint8_t *)&v29, 0xCu);

        }
        objc_autoreleasePoolPop(v21);
      }
      else
      {
        -[HMDHomeManager _uploadHomeConfigToCloud:withDelay:reason:](self, "_uploadHomeConfigToCloud:withDelay:reason:", v6, v8, a4);
      }
      goto LABEL_20;
    }
    v26 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager setBackOffOperationInProgress:](self, "setBackOffOperationInProgress:", 0));
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138543362;
      v30 = (uint64_t)v28;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping push to the cloud since internet is not reachable, but trying to update watches", (uint8_t *)&v29, 0xCu);

    }
    objc_autoreleasePoolPop(v26);
LABEL_19:
    -[HMDHomeManager _scheduleSendHomeDataToAllWatches](self, "_scheduleSendHomeDataToAllWatches");
    goto LABEL_20;
  }
  if (-[HMDHomeManager uploadMetadataToCloud](self, "uploadMetadataToCloud"))
  {
    -[HMDHomeManager _pushMetadataChangesToUsers](self, "_pushMetadataChangesToUsers");
    -[HMDHomeManager setUploadMetadataToCloud:](self, "setUploadMetadataToCloud:", 0);
  }
  -[HMDHomeManager _schedulePushChangesToAllUsersOfAllHomes](self, "_schedulePushChangesToAllUsersOfAllHomes");
  -[HMDHomeManager setBackOffOperationInProgress:](self, "setBackOffOperationInProgress:", 0);
  if (v8)
  {
    -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCloudSyncUploadReasonLogEvent uploadReason:acceptedLegacyPush:](HMDCloudSyncUploadReasonLogEvent, "uploadReason:acceptedLegacyPush:", v8, 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "submitLogEvent:", v25);

  }
LABEL_20:

}

- (void)uploadHomeConfigToCloud:(BOOL)a3 withDelay:(double)a4
{
  NSObject *v7;
  _QWORD v8[4];
  id v9[2];
  BOOL v10;
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __52__HMDHomeManager_uploadHomeConfigToCloud_withDelay___block_invoke;
  v8[3] = &unk_1E89BCE98;
  objc_copyWeak(v9, &location);
  v10 = a3;
  v9[1] = *(id *)&a4;
  dispatch_async(v7, v8);

  objc_destroyWeak(v9);
  objc_destroyWeak(&location);
}

- (void)_uploadHomeConfigToCloud:(BOOL)a3 withDelay:(double)a4
{
  -[HMDHomeManager _uploadHomeConfigToCloud:withDelay:reason:](self, "_uploadHomeConfigToCloud:withDelay:reason:", a3, 0, a4);
}

- (void)_uploadHomeConfigToCloud:(BOOL)a3 withDelay:(double)a4 reason:(id)a5
{
  _BOOL4 v6;
  id v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD aBlock[4];
  id v17;
  id v18;
  BOOL v19;
  id location[4];

  v6 = a3;
  location[3] = *(id *)MEMORY[0x1E0C80C00];
  v8 = a5;
  if (!disableLegacyCloudDataSync)
  {
    if (-[HMDHomeManager hasiCloudAndControllerKey](self, "hasiCloudAndControllerKey"))
    {
      objc_initWeak(location, self);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __60__HMDHomeManager__uploadHomeConfigToCloud_withDelay_reason___block_invoke;
      aBlock[3] = &unk_1E89BCEC0;
      objc_copyWeak(&v18, location);
      v19 = v6;
      v17 = v8;
      v9 = _Block_copy(aBlock);
      if (v6)
        +[HMDSyncOperation cloudForcePushSyncOperationWithBlock:](HMDSyncOperation, "cloudForcePushSyncOperationWithBlock:", v9);
      else
        +[HMDSyncOperation cloudPushSyncOperationWithBlock:](HMDSyncOperation, "cloudPushSyncOperationWithBlock:", v9);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager syncManager](self, "syncManager");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "addOperation:withDelay:", v14, a4);

      objc_destroyWeak(&v18);
      objc_destroyWeak(location);
    }
    else
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(location[0]) = 138543362;
        *(id *)((char *)location + 4) = v13;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Not pushing changes to the cloud since cannot push under current conditions.", (uint8_t *)location, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
    }
  }

}

- (void)_runUploadHomeConfigToCloudForcePush:(BOOL)a3 reason:(id)a4 syncCompletion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  HMDCloudTransaction *v13;
  void *v14;
  HMDCloudTransaction *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  _QWORD v20[4];
  HMDCloudTransaction *v21;
  id v22;
  id v23;
  id v24;
  BOOL v25;
  id location[4];

  location[3] = *(id *)MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  if (-[HMDHomeManager hasiCloudAndControllerKey](self, "hasiCloudAndControllerKey"))
  {
    -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "cloudCache");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "legacyZone");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[HMDCloudTransaction initWithType:temporaryCache:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:", 1, 0);
    -[HMDCloudTransaction updateCloudZone:](v13, "updateCloudZone:", v12);
    v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.push-to-cloud"));
    -[HMDCloudTransaction setOsTransaction:](v13, "setOsTransaction:", v14);

    objc_initWeak(location, self);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __77__HMDHomeManager__runUploadHomeConfigToCloudForcePush_reason_syncCompletion___block_invoke;
    v20[3] = &unk_1E89BCEE8;
    objc_copyWeak(&v24, location);
    v15 = v13;
    v21 = v15;
    v22 = v8;
    v23 = v9;
    v25 = a3;
    -[HMDHomeManager _determineLegacyLocalChanges:](self, "_determineLegacyLocalChanges:", v20);

    objc_destroyWeak(&v24);
    objc_destroyWeak(location);

LABEL_7:
    goto LABEL_8;
  }
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v19;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Not pushing changes to the cloud.", (uint8_t *)location, 0xCu);

  }
  objc_autoreleasePoolPop(v16);
  if (v9)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 75, CFSTR("Operation was cancelled before it could run"), CFSTR("iCloud & Controller key was not available"), CFSTR("Make sure that you are signed into iCloud account"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *))v9 + 2))(v9, v11);
    goto LABEL_7;
  }
LABEL_8:

}

- (void)_runUploadHomeConfigToCloud:(id)a3 rowIDs:(id)a4 reasons:(id)a5 forcePush:(BOOL)a6 syncCompletion:(id)a7
{
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  HMDMutableHomeData *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  HMDHomeManager *v44;
  NSObject *v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  char v52;
  void *v53;
  HMDHomeManager *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  NSObject *v58;
  void *v59;
  void (**v60)(id, _QWORD);
  NSObject *v61;
  void *v62;
  _BOOL4 v63;
  void *context;
  id v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  void (**v72)(id, _QWORD);
  void *v73;
  void *v74;
  _QWORD aBlock[4];
  id v76;
  id v77;
  id v78;
  id v79;
  BOOL v80;
  id location;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  const __CFString *v86;
  void *v87;
  uint8_t v88[128];
  uint8_t buf[4];
  id v90;
  __int16 v91;
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v67 = a3;
  v69 = a4;
  v11 = a5;
  v65 = a7;
  context = (void *)MEMORY[0x1D17BA0A0]();
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v90 = v14;
    v91 = 2112;
    v92 = (uint64_t)v11;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Pushing changes up to the legacy cloud with reasons %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "cloudCache");
  v73 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v73, "legacyZone");
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v11, "count"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v17 = v11;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v82, v88, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v83;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v83 != v19)
          objc_enumerationMutation(v17);
        v21 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * i);
        if ((objc_msgSend(v21, "isEqualToString:", CFSTR("kHomeConfigurationVersionKey")) & 1) == 0)
        {
          v86 = CFSTR("HM.saveReasonKey");
          v87 = v21;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v87, &v86, 1);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "addObject:", v22);

        }
      }
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v82, v88, 16);
    }
    while (v18);
  }

  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __86__HMDHomeManager__runUploadHomeConfigToCloud_rowIDs_reasons_forcePush_syncCompletion___block_invoke;
  aBlock[3] = &unk_1E89BD460;
  objc_copyWeak(&v79, &location);
  v23 = v67;
  v76 = v23;
  v80 = a6;
  v70 = v69;
  v77 = v70;
  v66 = v65;
  v78 = v66;
  v72 = (void (**)(id, _QWORD))_Block_copy(aBlock);
  if (-[HMDHomeManager uploadHomeDataToCloud](self, "uploadHomeDataToCloud") || objc_msgSend(v70, "count"))
  {
    -[HMDHomeManager pairedAccessories](self, "pairedAccessories");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager setDataTag:](self, "setDataTag:", v24);

    v25 = objc_alloc_init(HMDMutableHomeData);
    -[HMDHomeManager homes](self, "homes");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeData setHomes:](v25, "setHomes:", v26);

    -[HMDHomeData setAccessories:](v25, "setAccessories:", v68);
    -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeData setPrimaryHomeUUID:](v25, "setPrimaryHomeUUID:", v27);

    -[HMDHomeManager lastCurrentHomeUUID](self, "lastCurrentHomeUUID");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeData setLastCurrentHomeUUID:](v25, "setLastCurrentHomeUUID:", v28);

    -[HMDHomeData setDataVersion:](v25, "setDataVersion:", 4);
    -[HMDHomeData setSchemaVersion:](v25, "setSchemaVersion:", 5);
    -[HMDHomeData setRecoveryVersion:](v25, "setRecoveryVersion:", -[HMDHomeManager recoveryVersion](self, "recoveryVersion"));
    -[HMDHomeManager dataTag](self, "dataTag");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeData setDataTag:](v25, "setDataTag:", v29);

    -[HMDHomeManager uuidsOfRemovedHomes](self, "uuidsOfRemovedHomes");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeData setUUIDsOfRemovedHomes:](v25, "setUUIDsOfRemovedHomes:", v30);

    -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeData setIncomingInvitations:](v25, "setIncomingInvitations:", v31);

    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "device");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "identifier");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "UUIDString");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeData setCurrentDevice:](v25, "setCurrentDevice:", v35);

    v36 = (void *)objc_msgSend(v16, "copy");
    -[HMDHomeData setPendingReasonSaved:](v25, "setPendingReasonSaved:", v36);

    -[HMDHomeManager appData](self, "appData");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeData setApplicationData:](v25, "setApplicationData:", v37);

    -[HMDHomeData setResidentEnabledState:](v25, "setResidentEnabledState:", -[HMDHomeManager residentEnabledState](self, "residentEnabledState"));
    -[HMDHomeData setAccessAllowedWhenLocked:](v25, "setAccessAllowedWhenLocked:", -[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked"));
    -[HMDHomeManager demoAccessories](self, "demoAccessories");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeData setDemoAccessories:](v25, "setDemoAccessories:", v38);

    -[HMDHomeData setDemoFinalized:](v25, "setDemoFinalized:", -[HMDHomeManager demoFinalized](self, "demoFinalized"));
    v39 = (void *)-[HMDMutableHomeData copy](v25, "copy");
    +[HMDPersistentStore serializeHomeData:localStorage:remoteDeviceOnSameAccount:](HMDPersistentStore, "serializeHomeData:localStorage:remoteDeviceOnSameAccount:", v39, 0, 1);
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    v41 = objc_msgSend(v40, "length");
    v42 = +[HMDHomeManager legacyDataSizeLimit](HMDHomeManager, "legacyDataSizeLimit");
    v63 = v41 > v42;
    if (v41 > v42)
    {
      v43 = (void *)MEMORY[0x1D17BA0A0]();
      v44 = self;
      HMFGetOSLogHandle();
      v45 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v46 = (id)objc_claimAutoreleasedReturnValue();
        v47 = objc_msgSend(v40, "length");
        *(_DWORD *)buf = 138543618;
        v90 = v46;
        v91 = 2048;
        v92 = v47;
        _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_INFO, "%{public}@Home Data size if well beyond what can be pushed to legacy zone: %lu", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v43);
    }
    else
    {
      objc_msgSend(v74, "homeDataModelWithPushDataPush:", v40);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "addChangeWithObjectChange:", v48);

      objc_msgSend(v74, "homeDataV3ModelWithPushDataPush:", v40);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "addChangeWithObjectChange:", v49);

    }
  }
  else
  {
    v63 = 0;
  }
  if (-[HMDHomeManager uploadMetadataToCloud](self, "uploadMetadataToCloud"))
  {
    +[HMDHAPMetadata legacyV3DataForCloud](HMDHAPMetadata, "legacyV3DataForCloud");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v74, "metadataModelWithPushDataPush:", v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "addChangeWithObjectChange:", v51);

  }
  v52 = objc_msgSend(v23, "hasValidChanges");
  v53 = (void *)MEMORY[0x1D17BA0A0]();
  v54 = self;
  if ((v52 & 1) != 0)
  {
    HMFGetOSLogHandle();
    v55 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v90 = v56;
      _os_log_impl(&dword_1CD062000, v55, OS_LOG_TYPE_INFO, "%{public}@Attempting to upload new data to legacy zone", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v53);
    -[HMDHomeManager cloudDataSyncManager](v54, "cloudDataSyncManager");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "uploadLegacyTransaction:completionHandler:", v23, v72);

    goto LABEL_34;
  }
  if (v63)
  {
    HMFGetOSLogHandle();
    v58 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v90 = v59;
      _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_INFO, "%{public}@Legacy data is too large to push to the cloud. Cleaning up local data as if legacy push was successful", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v53);
    v60 = v72;
LABEL_33:
    v60[2](v60, 0);
    goto LABEL_34;
  }
  HMFGetOSLogHandle();
  v61 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v90 = v62;
    _os_log_impl(&dword_1CD062000, v61, OS_LOG_TYPE_INFO, "%{public}@Determined there is not data to push to legacy zone", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v53);
  objc_msgSend(v23, "setOsTransaction:", 0);
  v60 = (void (**)(id, _QWORD))v66;
  if (v66)
    goto LABEL_33;
LABEL_34:

  objc_destroyWeak(&v79);
  objc_destroyWeak(&location);

  objc_autoreleasePoolPop(context);
}

- (void)_startCloudOperationRetryWithTimeout:(unint64_t)a3 completionHandler:(id)a4
{
  id v6;
  NSObject *v7;
  dispatch_source_t v8;
  NSObject *v9;
  dispatch_time_t v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMDHomeManager _stopCloudOperationRetryTimer](self, "_stopCloudOperationRetryTimer");
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v7);
  -[HMDHomeManager setCloudOperationRetryTimer:](self, "setCloudOperationRetryTimer:", v8);

  -[HMDHomeManager cloudOperationRetryTimer](self, "cloudOperationRetryTimer");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = dispatch_time(0, 1000000000 * a3);
  dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0x2540BE400uLL);

  -[HMDHomeManager cloudOperationRetryTimer](self, "cloudOperationRetryTimer");
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_source_set_event_handler(v11, v6);

  -[HMDHomeManager cloudOperationRetryTimer](self, "cloudOperationRetryTimer");
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_resume(v12);

  v13 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v15;
    v18 = 2048;
    v19 = a3;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Starting cloud operation retry timer for %ld secs", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v13);

}

- (void)_stopCloudOperationRetryTimer
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager cloudOperationRetryTimer](self, "cloudOperationRetryTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Cancelling cloud operation retry timer", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHomeManager cloudOperationRetryTimer](self, "cloudOperationRetryTimer");
    v7 = objc_claimAutoreleasedReturnValue();
    dispatch_source_cancel(v7);

    -[HMDHomeManager setCloudOperationRetryTimer:](self, "setCloudOperationRetryTimer:", 0);
  }
}

- (void)_resetCloudOperationRetryCounters
{
  void *v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Resetting cloud operation retry tracking counters", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager setCloudOperationRetryCount:](self, "setCloudOperationRetryCount:", 0);
  -[HMDHomeManager _stopCloudOperationRetryTimer](self, "_stopCloudOperationRetryTimer");
}

- (void)dataSyncInProgressUpdatedNotification:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __56__HMDHomeManager_dataSyncInProgressUpdatedNotification___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)postFinishSetupForCurrentAccessoryFollowUpIfNeeded
{
  NSObject *v3;
  void *v4;
  id v5;

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  if (isAppleTV())
  {
    if (-[HMDHomeManager shouldClearDeviceSetupFollowUp](self, "shouldClearDeviceSetupFollowUp"))
    {
      +[HMDDeviceSetupManager sharedManager](HMDDeviceSetupManager, "sharedManager");
      v5 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "followUpManager");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "stopAdvertising:", 1);

    }
  }
}

- (BOOL)shouldClearDeviceSetupFollowUp
{
  void *v2;
  void *v3;
  BOOL v4;

  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "accountContext");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == 0;

  return v4;
}

- (BOOL)isDataSyncInProgress
{
  return -[HMDHomeManager isDataSyncInProgressWithMessage:](self, "isDataSyncInProgressWithMessage:", 0);
}

- (BOOL)isDataSyncInProgressWithMessage:(id)a3
{
  return -[HMDHomeManager dataSyncInProgressWithState:withMessage:](self, "dataSyncInProgressWithState:withMessage:", 0, a3);
}

- (void)forcePushLocalDataToCloud:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __44__HMDHomeManager_forcePushLocalDataToCloud___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_handleAccountStatusDeterminedWithError:(id)a3 homeDataRecordExists:(BOOL)a4 metadataRecordExists:(BOOL)a5 completion:(id)a6
{
  id v10;
  void (**v11)(_QWORD);
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  HMDHomeManager *v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  HMDHomeManager *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  HMDHomeManager *v48;
  NSObject *v49;
  _BOOL4 v50;
  void *v51;
  void *v52;
  void *v53;
  HMDHomeManager *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  int v58;
  id v59;
  id v60;
  int v61;
  void *v62;
  HMDHomeManager *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  _BOOL4 v69;
  void *v70;
  HMDHomeManager *v71;
  NSObject *v72;
  _BOOL4 v73;
  void *v74;
  void *v75;
  _QWORD v76[4];
  id v77;
  id v78;
  id v79;
  uint8_t buf[4];
  void *v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  unint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = (void (**)(_QWORD))a6;
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v81 = v15;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Account status determined, clearing that we were in a backoff operation", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v12);
  v16 = -[HMDHomeManager setBackOffOperationInProgress:](v13, "setBackOffOperationInProgress:", 0);
  if (v10)
  {
    v17 = (void *)MEMORY[0x1D17BA0A0](v16);
    v18 = v13;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "hmd_conciseCKError");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "shortDescription");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v81 = v20;
      v82 = 2114;
      v83 = (uint64_t)v22;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to detect account status due to error: %{public}@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    -[HMDHomeManager setCloudkitAccountStatusDetermined:](v18, "setCloudkitAccountStatusDetermined:", 0);
    -[HMDHomeManager multiUserStatusController](v18, "multiUserStatusController");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "didChangeHasActiveAccountState:", 0);

    if (-[HMDHomeManager accountActive](v18, "accountActive"))
    {
      if (objc_msgSend(v10, "code") == 78
        || (objc_msgSend(v10, "hmd_convertedCKError"),
            v24 = (void *)objc_claimAutoreleasedReturnValue(),
            v25 = v24 == 0,
            v24,
            !v25))
      {
        -[HMDHomeManager setAccountStatusFailedDueToNetworkFailure:](v18, "setAccountStatusFailedDueToNetworkFailure:", 1);
        -[HMDHomeManager setCloudOperationRetryCount:](v18, "setCloudOperationRetryCount:", -[HMDHomeManager cloudOperationRetryCount](v18, "cloudOperationRetryCount") + 1);
        v26 = maxCloudOperationRetries;
        +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(v27, "supportsStandaloneMode");

        if (v26 >= 0)
          v29 = v26;
        else
          v29 = v26 + 1;
        v30 = v29 >> 1;
        if (v28)
          v31 = v30;
        else
          v31 = v26;
        v32 = (void *)MEMORY[0x1D17BA0A0]();
        v33 = v18;
        HMFGetOSLogHandle();
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = -[HMDHomeManager cloudOperationRetryCount](v33, "cloudOperationRetryCount");
          *(_DWORD *)buf = 138543874;
          v81 = v35;
          v82 = 2048;
          v83 = v36;
          v84 = 2048;
          v85 = v31;
          _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Current cloud operation retry count: %lu/%lu", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v32);
        if (-[HMDHomeManager cloudOperationRetryCount](v33, "cloudOperationRetryCount") < v31)
        {
          objc_initWeak((id *)buf, v33);
          v76[0] = MEMORY[0x1E0C809B0];
          v76[1] = 3221225472;
          v76[2] = __111__HMDHomeManager__handleAccountStatusDeterminedWithError_homeDataRecordExists_metadataRecordExists_completion___block_invoke;
          v76[3] = &unk_1E89BE3F8;
          objc_copyWeak(&v77, (id *)buf);
          -[HMDHomeManager _retryCloudOperationWithName:completionHandler:](v33, "_retryCloudOperationWithName:completionHandler:", CFSTR("query account status after one time failure"), v76);
          objc_destroyWeak(&v77);
          objc_destroyWeak((id *)buf);
        }
      }
    }
  }
  else
  {
    -[HMDHomeManager setAccountStatusFailedDueToNetworkFailure:](v13, "setAccountStatusFailedDueToNetworkFailure:", 0);
    -[HMDHomeManager setCloudkitAccountStatusDetermined:](v13, "setCloudkitAccountStatusDetermined:", 1);
    -[HMDHomeManager multiUserStatusController](v13, "multiUserStatusController");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "didChangeHasActiveAccountState:", 1);

    v38 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager _resetCloudOperationRetryCounters](v13, "_resetCloudOperationRetryCounters"));
    v39 = v13;
    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v81 = v41;
      _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Account status detected and we have an active account", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v38);
    v42 = -[HMDHomeManager _determineLocalChangesAndSchedulePush](v39, "_determineLocalChangesAndSchedulePush");
    if (!a5)
    {
      v43 = (void *)MEMORY[0x1D17BA0A0](v42);
      v44 = v39;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v81 = v46;
        _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_DEFAULT, "%{public}@There is no meta data in the cloud, creating default and pushing to the cloud", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v43);
      v42 = -[HMDHomeManager _pushMetadataToCloud](v44, "_pushMetadataToCloud");
    }
    v47 = (void *)MEMORY[0x1D17BA0A0](v42);
    v48 = v39;
    HMFGetOSLogHandle();
    v49 = objc_claimAutoreleasedReturnValue();
    v50 = os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
    if (a4)
    {
      if (v50)
      {
        HMFGetLogIdentifier();
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v81 = v51;
        _os_log_impl(&dword_1CD062000, v49, OS_LOG_TYPE_DEFAULT, "%{public}@Set missing home data record = NO", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v47);
      -[HMDHomeManager setMissingHomeDataRecord:](v48, "setMissingHomeDataRecord:", 0);
    }
    else
    {
      if (v50)
      {
        HMFGetLogIdentifier();
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v81 = v52;
        _os_log_impl(&dword_1CD062000, v49, OS_LOG_TYPE_DEFAULT, "%{public}@No homeDataRecord found", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v47);
      v53 = (void *)MEMORY[0x1D17BA0A0]();
      v54 = v48;
      HMFGetOSLogHandle();
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v81 = v56;
        _os_log_impl(&dword_1CD062000, v55, OS_LOG_TYPE_DEFAULT, "%{public}@Set missing home data record = YES", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v53);
      -[HMDHomeManager setMissingHomeDataRecord:](v54, "setMissingHomeDataRecord:", 1);
      objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v78 = 0;
      v79 = 0;
      v58 = objc_msgSend(v57, "getAllAvailableControllerPublicKeys:secretKeys:userNames:error:", 0, 0, &v79, &v78);
      v59 = v79;
      v60 = v78;

      if (v60)
        v61 = 0;
      else
        v61 = v58;
      if (v61 == 1 && v59 && (unint64_t)objc_msgSend(v59, "count") >= 2)
      {
        v62 = (void *)MEMORY[0x1D17BA0A0]();
        v63 = v54;
        HMFGetOSLogHandle();
        v64 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "objectAtIndexedSubscript:", 0);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v81 = v65;
          v82 = 2112;
          v83 = (uint64_t)v66;
          _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_DEFAULT, "%{public}@Found multiple controller keys, and we have no data in the cloud, using first entry as the controller username: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v62);
        objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "objectAtIndexedSubscript:", 0);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "updateActiveControllerPairingIdentifier:", v68);

      }
      else
      {
        v69 = objc_msgSend(v59, "count") == 0;
        v70 = (void *)MEMORY[0x1D17BA0A0]();
        v71 = v54;
        HMFGetOSLogHandle();
        v72 = objc_claimAutoreleasedReturnValue();
        v73 = os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
        if (v69)
        {
          if (v73)
          {
            HMFGetLogIdentifier();
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v81 = v75;
            _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_DEFAULT, "%{public}@No controller keys found can create one.", buf, 0xCu);

          }
        }
        else if (v73)
        {
          HMFGetLogIdentifier();
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v81 = v74;
          _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_DEFAULT, "%{public}@Have exactly one controller key.", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v70);
      }

    }
  }
  if (v11)
    v11[2](v11);

}

- (void)setAccessAllowedWhenLocked:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_accessAllowedWhenLocked = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)setGenerationCounter:(unint64_t)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_generationCounter = a3;
  os_unfair_lock_unlock(p_lock);
}

- (BOOL)_shouldNotifyClientsAboutGenerationCounterUpdate
{
  return 1;
}

- (void)updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5
{
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  id v14;
  id v15;
  BOOL v16;

  v8 = a3;
  v9 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __83__HMDHomeManager_updateGenerationCounterWithReason_sourceUUID_shouldNotifyClients___block_invoke;
  v13[3] = &unk_1E89BCF10;
  v13[4] = self;
  v14 = v8;
  v15 = v9;
  v16 = a5;
  v11 = v9;
  v12 = v8;
  dispatch_async(v10, v13);

}

- (void)_updateGenerationCounterWithReason:(id)a3 sourceUUID:(id)a4 shouldNotifyClients:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDIncrementGenerationCounterLogEvent *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _BOOL4 v30;
  __int16 v31;
  id v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v5 = a5;
  v35 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v10 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v10);

  v11 = (void *)MEMORY[0x1D17BA0A0]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138544386;
    v26 = v14;
    v27 = 2048;
    v28 = -[HMDHomeManager generationCounter](v12, "generationCounter") + 1;
    v29 = 1024;
    v30 = v5;
    v31 = 2114;
    v32 = v8;
    v33 = 2114;
    v34 = v9;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Updating generation counter to %llu (shouldNotifyClients is %d): %{public}@-%{public}@", (uint8_t *)&v25, 0x30u);

  }
  objc_autoreleasePoolPop(v11);
  -[HMDHomeManager setGenerationCounter:](v12, "setGenerationCounter:", -[HMDHomeManager generationCounter](v12, "generationCounter") + 1);
  -[HMDHomeManager userDefaults](v12, "userDefaults");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setInteger:forKey:", -[HMDHomeManager generationCounter](v12, "generationCounter"), CFSTR("HMDHomeManagerGenerationCounter"));

  if (-[HMDHomeManager generationCounterToken](v12, "generationCounterToken") != -1
    && -[HMDHomeManager _shouldNotifyClientsAboutGenerationCounterUpdate](v12, "_shouldNotifyClientsAboutGenerationCounterUpdate"))
  {
    -[HMDHomeManager darwinNotificationProvider](v12, "darwinNotificationProvider");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "notifySetState:state:", -[HMDHomeManager generationCounterToken](v12, "generationCounterToken"), -[HMDHomeManager generationCounter](v12, "generationCounter"));

    -[HMDHomeManager darwinNotificationProvider](v12, "darwinNotificationProvider");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "notifyPost:", *MEMORY[0x1E0CB8F90]);

  }
  if (-[HMDHomeManager postSyncDataUpdatedNotification](v12, "postSyncDataUpdatedNotification"))
  {
    v18 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager setPostSyncDataUpdatedNotification:](v12, "setPostSyncDataUpdatedNotification:", 0));
    v19 = v12;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v21;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Posting sync data updated notification after updating generation counter", (uint8_t *)&v25, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    notify_post((const char *)*MEMORY[0x1E0CB8348]);
  }
  -[HMDHomeManager logEventSubmitter](v12, "logEventSubmitter");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_alloc_init(HMDIncrementGenerationCounterLogEvent);
  objc_msgSend(v22, "submitLogEvent:", v23);

  if (v5)
  {
    -[HMDHomeManager debounceHomesUpdateTimer](v12, "debounceHomesUpdateTimer");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "resume");

  }
}

- (void)_notifyXPCClientsOfHomeConfigurationChange
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  HMDNotifyXPCClientsOfHomeConfigurationChangeLogEvent *v8;
  id v9;

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  if (-[HMDHomeManager _shouldNotifyClientsAboutGenerationCounterUpdate](self, "_shouldNotifyClientsAboutGenerationCounterUpdate"))
  {
    v4 = (void *)MEMORY[0x1E0D285D0];
    -[HMDHomeManager messageDestination](self, "messageDestination");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messageWithName:qualityOfService:destination:payload:", CFSTR("kHomesDidUpdateNotificationKey"), 9, v5, 0);
    v9 = (id)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "sendMessage:", v9);

    -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_alloc_init(HMDNotifyXPCClientsOfHomeConfigurationChangeLogEvent);
    objc_msgSend(v7, "submitLogEvent:", v8);

    -[HMDHomeManager _notifyMetricsManagerOfConfigurationChange](self, "_notifyMetricsManagerOfConfigurationChange");
    logAndPostNotification(CFSTR("HMDHomeManagerNotifiedXPCClientsOfHomeConfigurationChangeNotification"), self, 0);

  }
}

- (void)notifyClientsOfUserSettingsChangeWithReason:(id)a3 sourceUUID:(id)a4
{
  void *v6;
  id v7;
  void *v8;
  id v9;

  v6 = (void *)MEMORY[0x1E0CB37D0];
  v7 = a4;
  v9 = a3;
  objc_msgSend(v6, "defaultCenter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "postNotificationName:object:", CFSTR("HMDUserSettingsUpdatedNotificationKey"), 0);

  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", v9, v7, 1);
}

- (void)sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_sendUserAdded_destination_toHome___block_invoke;
  block[3] = &unk_1E89BF278;
  objc_copyWeak(&v19, &location);
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = v10;
  v13 = v9;
  v14 = v8;
  dispatch_async(v11, block);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

- (void)sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD block[4];
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  BOOL v27;
  id location;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a7;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v16 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __89__HMDHomeManager_sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke;
  block[3] = &unk_1E89BCF38;
  objc_copyWeak(&v26, &location);
  v22 = v12;
  v23 = v13;
  v27 = a6;
  v24 = v14;
  v25 = v15;
  v17 = v15;
  v18 = v14;
  v19 = v13;
  v20 = v12;
  dispatch_async(v16, block);

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
}

- (void)electDeviceForUser:(id)a3 destination:(id)a4 deviceCapabilities:(id)a5 queue:(id)a6 completionHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;

  v12 = a7;
  v13 = a6;
  v14 = a5;
  v15 = a4;
  v16 = a3;
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v17 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "electDeviceForHH1User:destination:deviceCapabilities:responseTimeout:responseQueue:responseHandler:", v16, v15, v14, v13, v12, 0.0);

}

- (void)sendSecureMessage:(id)a3 target:(id)a4 userID:(id)a5 destination:(id)a6 responseQueue:(id)a7 responseHandler:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v14 = a8;
  v15 = a7;
  v16 = a6;
  v17 = a5;
  v18 = a4;
  v19 = a3;
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v20 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v19, v18, v17, v16, v15, v14);

}

- (void)sendUnsecureMessage:(id)a3 target:(id)a4 userID:(id)a5 responseQueue:(id)a6 responseHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *, void *);
  void *v21;
  id v22;
  id v23;

  v12 = a3;
  v13 = a6;
  v14 = a7;
  +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", a4, a5, 0, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setDestination:", v15);
  objc_msgSend(v12, "responseHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14 && !v16)
  {
    v18 = MEMORY[0x1E0C809B0];
    v19 = 3221225472;
    v20 = __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke;
    v21 = &unk_1E89BE018;
    v22 = v13;
    v23 = v14;
    objc_msgSend(v12, "setResponseHandler:", &v18);

  }
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher", v18, v19, v20, v21);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "sendMessage:completionHandler:", v12, 0);

}

- (void)uploadHomeManagerToCloudWithDelay:(double)a3
{
  NSObject *v5;
  _QWORD block[4];
  id v7[2];
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __52__HMDHomeManager_uploadHomeManagerToCloudWithDelay___block_invoke;
  block[3] = &unk_1E89BCF60;
  objc_copyWeak(v7, &location);
  v7[1] = *(id *)&a3;
  dispatch_async(v5, block);

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

- (void)_uploadHomeManagerToCloudWithDelay:(double)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  _QWORD aBlock[4];
  id v18;
  id location[4];

  location[3] = *(id *)MEMORY[0x1E0C80C00];
  if (-[HMDHomeManager hasiCloudAndControllerKey](self, "hasiCloudAndControllerKey"))
  {
    objc_initWeak(location, self);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __53__HMDHomeManager__uploadHomeManagerToCloudWithDelay___block_invoke;
    aBlock[3] = &unk_1E89BCF88;
    objc_copyWeak(&v18, location);
    v5 = _Block_copy(aBlock);
    -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "homeManagerZone");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "zone");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "zoneID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "zoneName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDSyncOperation cloudZonePushSyncOperation:block:](HMDSyncOperation, "cloudZonePushSyncOperation:block:", v10, v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager syncManager](self, "syncManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addOperation:withDelay:", v11, a3);

    objc_destroyWeak(&v18);
    objc_destroyWeak(location);
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Not scheduling home manager zone push.", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
  }
}

- (void)_processRemoveHomeModels:(id)a3 processIndex:(unint64_t)a4 completion:(id)a5
{
  id v8;
  void (**v9)(_QWORD);
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  _QWORD v18[5];
  id v19;
  id v20;
  id v21;
  void (**v22)(_QWORD);
  unint64_t v23;

  v8 = a3;
  v9 = (void (**)(_QWORD))a5;
  if (objc_msgSend(v8, "count") <= a4)
  {
    if (v9)
      v9[2](v9);
  }
  else
  {
    objc_msgSend(v8, "objectAtIndexedSubscript:", a4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "cloudCache");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHome zoneIDFromHomeUUID:](HMDHome, "zoneIDFromHomeUUID:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "UUIDString");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke;
    v18[3] = &unk_1E89BCFD8;
    v18[4] = self;
    v19 = v10;
    v20 = v15;
    v21 = v8;
    v23 = a4;
    v22 = v9;
    v16 = v15;
    v17 = v10;
    objc_msgSend(v12, "homeZoneWithName:owner:completion:", v16, &stru_1E89C3E38, v18);

  }
}

- (void)_uploadHomeManagerToCloudSyncCompletion:(id)a3
{
  id v4;
  BOOL v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDCloudTransaction *v14;
  void *v15;
  HMDCloudTransaction *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];
  HMDCloudTransaction *v22;
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = -[HMDHomeManager hasiCloudAndControllerKey](self, "hasiCloudAndControllerKey");
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  if (v5)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v26 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Pushing changes up to the cloud", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    -[HMDHomeManager cloudDataSyncManager](v8, "cloudDataSyncManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "cloudCache");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "homeManagerZone");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = -[HMDCloudTransaction initWithType:temporaryCache:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:", 3, 0);
    -[HMDCloudTransaction updateCloudZone:](v14, "updateCloudZone:", v13);
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.push-to-hmzone"));
    -[HMDCloudTransaction setOsTransaction:](v14, "setOsTransaction:", v15);

    objc_initWeak((id *)buf, v8);
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke;
    v21[3] = &unk_1E89BD050;
    objc_copyWeak(&v24, (id *)buf);
    v16 = v14;
    v22 = v16;
    v23 = v4;
    -[HMDHomeManager _loadHomeManagerTransactionsToPush:mustReplay:forLegacyPush:includeAllChanges:completion:](v8, "_loadHomeManagerTransactionsToPush:mustReplay:forLegacyPush:includeAllChanges:completion:", v16, 0, 0, 0, v21);

    objc_destroyWeak(&v24);
    objc_destroyWeak((id *)buf);

    objc_autoreleasePoolPop(v6);
  }
  else
  {
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v26 = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping home manager zone push.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 75, CFSTR("Operation was cancelled before it could run"), CFSTR("iCloud & Controller key was not available"), CFSTR("Make sure that you are signed into iCloud account"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v4 + 2))(v4, v20);

    }
  }

}

- (void)_loadHomeManagerTransactionsToPush:(id)a3 mustReplay:(id)a4 forLegacyPush:(BOOL)a5 includeAllChanges:(BOOL)a6 completion:(id)a7
{
  _BOOL4 v9;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  HMDBackingStoreLogFetchOperation *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  HMDBackingStoreLogFetchOperation *v27;
  id v28;
  id v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  NSObject *v39;
  id v40;
  id v41;
  _QWORD v42[4];
  id v43;
  id v44;
  id v45;
  __int128 *v46;
  id v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51;
  id v52;
  HMDHomeManager *v53;
  id v54;
  __int128 *v55;
  BOOL v56;
  id location;
  _QWORD block[4];
  id v59;
  uint8_t buf[4];
  void *v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v9 = a5;
  v65 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v41 = a4;
  v13 = a7;
  if (v12)
  {
    v40 = v13;
    if (v9)
      v14 = 1;
    else
      v14 = 2;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)&v62 + 1) = &v62;
    v63 = 0x2020000000;
    v64 = 0;
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v61 = v21;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Find all home manager changes in datastore", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    objc_initWeak(&location, v19);
    v22 = [HMDBackingStoreLogFetchOperation alloc];
    v23 = MEMORY[0x1E0C809B0];
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 3221225472;
    v48[2] = __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_610;
    v48[3] = &unk_1E89BD078;
    v56 = a6;
    v49 = v12;
    v50 = v41;
    v24 = v16;
    v51 = v24;
    v25 = v15;
    v52 = v25;
    v53 = v19;
    v26 = v17;
    v54 = v26;
    v55 = &v62;
    v27 = -[HMDBackingStoreLogFetchOperation initWithNeedsPushTo:result:](v22, "initWithNeedsPushTo:result:", v14, v48);
    v42[0] = v23;
    v42[1] = 3221225472;
    v42[2] = __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_611;
    v42[3] = &unk_1E89BE108;
    objc_copyWeak(&v47, &location);
    v28 = v26;
    v43 = v28;
    v45 = v40;
    v29 = v24;
    v44 = v29;
    v46 = &v62;
    v30 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v27, "setResultBlock:", v42));
    v31 = v19;
    HMFGetOSLogHandle();
    v32 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v61 = v33;
      _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Load transactions from home manager datastore", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v30);
    -[HMDHomeManager backingStore](v31, "backingStore");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "submit:", v27);

    objc_destroyWeak(&v47);
    objc_destroyWeak(&location);
    _Block_object_dispose(&v62, 8);

LABEL_14:
    v13 = v40;
    goto LABEL_15;
  }
  if (v13)
  {
    v40 = v13;
    v35 = (void *)MEMORY[0x1D17BA0A0]();
    v36 = self;
    HMFGetOSLogHandle();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v62) = 138543362;
      *(_QWORD *)((char *)&v62 + 4) = v38;
      _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_ERROR, "%{public}@A cloudTransaction is required query datastore", (uint8_t *)&v62, 0xCu);

    }
    objc_autoreleasePoolPop(v35);
    -[HMDHomeManager workQueue](v36, "workQueue");
    v39 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke;
    block[3] = &unk_1E89C0870;
    v59 = v40;
    dispatch_async(v39, block);

    v25 = v59;
    goto LABEL_14;
  }
LABEL_15:

}

- (void)_updateHomeManagerModelChangesAsPushed:(id)a3 legacyPush:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  uint64_t v7;
  NSObject *v8;
  HMDBackingStoreLogUpdateOperation *v9;
  NSObject *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  NSObject *v17;
  id v18;
  id location;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v4 = a4;
  v22 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (objc_msgSend(v6, "count"))
  {
    if (v4)
      v7 = 1;
    else
      v7 = 2;
    v8 = dispatch_group_create();
    dispatch_group_enter(v8);
    v9 = -[HMDBackingStoreLogUpdateOperation initWithRowIDs:successfullyPushedTo:]([HMDBackingStoreLogUpdateOperation alloc], "initWithRowIDs:successfullyPushedTo:", v6, v7);
    objc_initWeak(&location, self);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __68__HMDHomeManager__updateHomeManagerModelChangesAsPushed_legacyPush___block_invoke;
    v16[3] = &unk_1E89BF250;
    objc_copyWeak(&v18, &location);
    v10 = v8;
    v17 = v10;
    v11 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v9, "setResultBlock:", v16));
    v12 = self;
    HMFGetOSLogHandle();
    v13 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Update homemanager datastore items pushed started", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    -[HMDHomeManager backingStore](v12, "backingStore");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "submit:", v9);

    dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
    objc_destroyWeak(&v18);
    objc_destroyWeak(&location);

  }
}

- (void)_updateHomeManagerModelChangesAsPushed:(id)a3 pushMask:(unint64_t)a4 completion:(id)a5
{
  id v8;
  id v9;
  HMDBackingStoreLogUpdateOperation *v10;
  id v11;
  void *v12;
  _QWORD v13[4];
  id v14;

  v8 = a5;
  v9 = a3;
  v10 = -[HMDBackingStoreLogUpdateOperation initWithRowIDs:successfullyPushedTo:]([HMDBackingStoreLogUpdateOperation alloc], "initWithRowIDs:successfullyPushedTo:", v9, a4);

  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __77__HMDHomeManager__updateHomeManagerModelChangesAsPushed_pushMask_completion___block_invoke;
  v13[3] = &unk_1E89C1A48;
  v14 = v8;
  v11 = v8;
  -[HMDBackingStoreOperation setResultBlock:](v10, "setResultBlock:", v13);
  -[HMDHomeManager backingStore](self, "backingStore");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "submit:", v10);

}

- (void)fetchHomeManagerCloudConflict:(BOOL)a3 withDelay:(double)a4
{
  NSObject *v6;
  _QWORD block[4];
  id v8;
  BOOL v9;
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __58__HMDHomeManager_fetchHomeManagerCloudConflict_withDelay___block_invoke;
  block[3] = &unk_1E89BCB70;
  objc_copyWeak(&v8, &location);
  v9 = a3;
  dispatch_async(v6, block);

  objc_destroyWeak(&v8);
  objc_destroyWeak(&location);
}

- (void)_fetchHomeManagerCloundConflict:(BOOL)a3 withDelay:(double)a4 completionHandler:(id)a5
{
  _BOOL8 v6;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  _QWORD aBlock[4];
  id v24;
  id v25;
  id location[4];

  v6 = a3;
  location[3] = *(id *)MEMORY[0x1E0C80C00];
  v8 = a5;
  if (-[HMDHomeManager hasiCloudAndControllerKey](self, "hasiCloudAndControllerKey"))
  {
    objc_initWeak(location, self);
    aBlock[1] = 3221225472;
    aBlock[2] = __78__HMDHomeManager__fetchHomeManagerCloundConflict_withDelay_completionHandler___block_invoke;
    aBlock[3] = &unk_1E89BD0C8;
    aBlock[0] = MEMORY[0x1E0C809B0];
    objc_copyWeak(&v25, location);
    v9 = v8;
    v24 = v9;
    v10 = _Block_copy(aBlock);
    -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "homeManagerZone");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "zone");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "zoneID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "zoneName");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDSyncOperation cloudZoneFetchSyncOperation:cloudConflict:block:completion:](HMDSyncOperation, "cloudZoneFetchSyncOperation:cloudConflict:block:completion:", v15, v6, v10, v9);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager syncManager](self, "syncManager");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "addOperation:withDelay:", v16, a4);

    objc_destroyWeak(&v25);
    objc_destroyWeak(location);
  }
  else
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v21;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Not scheduling home manager zone fetch", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    if (v8)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 75, CFSTR("Operation was cancelled before it could run"), CFSTR("iCloud & Controller key was not available"), CFSTR("Make sure that you are signed into iCloud account"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v8 + 2))(v8, v22);

    }
  }

}

- (void)_runFetchHomeManagerCloudConflict:(BOOL)a3 syncCompletion:(id)a4
{
  id v6;
  BOOL v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  _QWORD v32[4];
  id v33;
  id v34;
  __int128 *p_buf;
  id v36;
  BOOL v37;
  id location;
  __int128 buf;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t);
  HMDCloudTransaction *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = -[HMDHomeManager hasiCloudAndControllerKey](self, "hasiCloudAndControllerKey");
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  if (v7)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v12;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Fetching home manager zone changes from the cloud", (uint8_t *)&buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    -[HMDHomeManager cloudDataSyncManager](v10, "cloudDataSyncManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "cloudCache");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "homeManagerZone");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[HMDHomeManager forceFetchHomeManagerZone](v10, "forceFetchHomeManagerZone"))
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = v10;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf) = 138543362;
        *(_QWORD *)((char *)&buf + 4) = v19;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Resetting server change token for home manager zone", (uint8_t *)&buf, 0xCu);

      }
      objc_autoreleasePoolPop(v16);
      objc_msgSend(v15, "setServerChangeToken:", 0);
      v20 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager setForceFetchHomeManagerZone:](v17, "setForceFetchHomeManagerZone:", 0));
      v21 = v17;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf) = 138543362;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Resetting databaseServerChangeToken because home manager was reset", (uint8_t *)&buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(v14, "setDatabaseServerChangeToken:", 0);
      objc_msgSend(v14, "persistDatabaseServerChangeToken");
    }
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v40 = 0x3032000000;
    v41 = __Block_byref_object_copy__165094;
    v42 = __Block_byref_object_dispose__165095;
    v43 = -[HMDCloudTransaction initWithType:temporaryCache:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:", 3, 0);
    objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "updateCloudZone:", v15);
    v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.fetch-from-hmzone"));
    objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "setOsTransaction:", v24);

    objc_initWeak(&location, v10);
    -[HMDHomeManager cloudDataSyncManager](v10, "cloudDataSyncManager");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke;
    v32[3] = &unk_1E89BD140;
    objc_copyWeak(&v36, &location);
    p_buf = &buf;
    v34 = v6;
    v27 = v15;
    v33 = v27;
    v37 = a3;
    objc_msgSend(v25, "fetchTransaction:completionHandler:", v26, v32);

    objc_destroyWeak(&v36);
    objc_destroyWeak(&location);
    _Block_object_dispose(&buf, 8);

    objc_autoreleasePoolPop(v8);
  }
  else
  {
    v28 = self;
    HMFGetOSLogHandle();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v30;
      _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping home manager zone fetch", (uint8_t *)&buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 75, CFSTR("Operation was cancelled before it could run"), CFSTR("iCloud & Controller key was not available"), CFSTR("Make sure that you are signed into iCloud account"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v6 + 2))(v6, v31);

    }
  }

}

- (void)_handleHomeManagerTransactionsFetched:(id)a3 stagedTransaction:(id)a4 mustReplay:(id)a5 cloudConflict:(BOOL)a6 transactionError:(id)a7 syncCompletion:(id)a8
{
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void (**v20)(void);
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  int v29;
  char v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  void *v41;
  HMDHomeManager *v42;
  NSObject *v43;
  id v44;
  void *v45;
  void *v46;
  void *v47;
  HMDHomeManager *v48;
  NSObject *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  HMDHomeManager *v54;
  NSObject *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void (**v60)(void);
  id v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  HMDHomeManager *v66;
  char v67;
  void *v68;
  id obj;
  void *v70;
  _QWORD v71[4];
  id v72;
  id v73;
  id v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _QWORD block[4];
  id v80;
  HMDHomeManager *v81;
  id v82;
  _QWORD aBlock[4];
  id v84;
  id v85;
  id v86;
  void (**v87)(void);
  id v88;
  BOOL v89;
  id location;
  uint8_t v91[128];
  uint8_t buf[4];
  id v93;
  __int16 v94;
  void *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v61 = a3;
  v62 = a4;
  v63 = a5;
  v64 = a7;
  v60 = (void (**)(void))a8;
  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "hmd_conciseCKError");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "shortDescription");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v93 = v17;
    v94 = 2112;
    v95 = v19;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Fetched data from home manager zone with error status: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  if (v64)
  {
    objc_msgSend(v63, "setOsTransaction:", 0);
    objc_msgSend(v62, "setOsTransaction:", 0);
    objc_msgSend(v61, "setOsTransaction:", 0);
    v20 = v60;
    if (v60)
    {
      v60[2]();
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  if (-[HMDHomeManager backOffOperationInProgress](v15, "backOffOperationInProgress"))
  {
    v21 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager setBackOffOperationInProgress:](v15, "setBackOffOperationInProgress:", 0));
    v22 = v15;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v93 = v24;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_DEFAULT, "%{public}@Clearing that we were in a backoff operation", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
  }
  -[HMDHomeManager _resetCloudOperationRetryCounters](v15, "_resetCloudOperationRetryCounters");
  -[HMDHomeManager setHomeDataLoadedFromArchive:](v15, "setHomeDataLoadedFromArchive:", 1);
  -[HMDHomeManager cloudDataSyncStateFilter](v15, "cloudDataSyncStateFilter");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "updateLocalDataDecryptionFailed:", 0);

  objc_initWeak(&location, v15);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke;
  aBlock[3] = &unk_1E89BD168;
  objc_copyWeak(&v88, &location);
  v26 = v61;
  v84 = v26;
  v89 = a6;
  v27 = v63;
  v85 = v27;
  v28 = v62;
  v86 = v28;
  v87 = v60;
  v58 = _Block_copy(aBlock);
  objc_msgSend(v26, "replayTransaction:stagedTransaction:", v27, v28);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v59, "count"))
  {
    -[HMDHomeManager workQueue](v15, "workQueue");
    v33 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_625;
    block[3] = &unk_1E89C1B48;
    v80 = v26;
    v81 = v15;
    v82 = v58;
    dispatch_async(v33, block);

    v34 = v80;
    goto LABEL_38;
  }
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v26, "isLegacyTransaction");
  v30 = v29;
  if (v29)
  {
    -[HMDHomeManager backingStore](v15, "backingStore");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultLegacyCloudOptions](HMDBackingStoreTransactionOptions, "defaultLegacyCloudOptions");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "transaction:options:", CFSTR("kTransactionUpdate"), v32);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v68 = 0;
  }
  else
  {
    -[HMDHomeManager backingStore](v15, "backingStore");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultCloudOptions](HMDBackingStoreTransactionOptions, "defaultCloudOptions");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "transaction:options:", CFSTR("kTransactionUpdate"), v36);
    v70 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager backingStore](v15, "backingStore");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions cloudRequiresPushOptions](HMDBackingStoreTransactionOptions, "cloudRequiresPushOptions");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "transaction:options:", CFSTR("kTransactionUpdate"), v32);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  obj = v59;
  v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v91, 16);
  if (!v37)
  {

    goto LABEL_37;
  }
  v67 = 0;
  v38 = *(_QWORD *)v76;
  v66 = v15;
  do
  {
    for (i = 0; i != v37; ++i)
    {
      if (*(_QWORD *)v76 != v38)
        objc_enumerationMutation(obj);
      v40 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * i);
      if ((v30 & 1) == 0)
      {
        if (objc_msgSend(*(id *)(*((_QWORD *)&v75 + 1) + 8 * i), "isPushAfterApply"))
        {
          v41 = (void *)MEMORY[0x1D17BA0A0]();
          v42 = v15;
          HMFGetOSLogHandle();
          v43 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v44 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "objectID");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v93 = v44;
            v94 = 2112;
            v95 = v45;
            _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Change should be pushed after being applied: %@", buf, 0x16u);

            v15 = v66;
          }

          objc_autoreleasePoolPop(v41);
          objc_msgSend(v40, "objectChange");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "add:withMessage:", v46, 0);
          v67 = 1;
        }
        else
        {
          if (!objc_msgSend(v40, "isDropStagedAfterApply"))
            goto LABEL_30;
          v47 = (void *)MEMORY[0x1D17BA0A0]();
          v48 = v15;
          HMFGetOSLogHandle();
          v49 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v50 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "objectID");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v93 = v50;
            v94 = 2112;
            v95 = v51;
            _os_log_impl(&dword_1CD062000, v49, OS_LOG_TYPE_INFO, "%{public}@Object conflict, drop all staged changes for object: %@", buf, 0x16u);

            v15 = v66;
          }

          objc_autoreleasePoolPop(v47);
          objc_msgSend(v40, "rowIDs");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v65, "addObjectsFromArray:", v46);
        }

      }
LABEL_30:
      objc_msgSend(v40, "objectChange");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v70, "add:withMessage:", v52, 0);

    }
    v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v91, 16);
  }
  while (v37);

  if ((v67 & 1) != 0)
  {
    v53 = (void *)MEMORY[0x1D17BA0A0]();
    v54 = v15;
    HMFGetOSLogHandle();
    v55 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v93 = v56;
      _os_log_impl(&dword_1CD062000, v55, OS_LOG_TYPE_INFO, "%{public}@Saving changes to push after applying", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v53);
    objc_msgSend(v68, "save");
    -[HMDHomeManager _uploadHomeManagerToCloudWithDelay:](v54, "_uploadHomeManagerToCloudWithDelay:", 0.0);
  }
LABEL_37:
  v71[0] = MEMORY[0x1E0C809B0];
  v71[1] = 3221225472;
  v71[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_628;
  v71[3] = &unk_1E89C0650;
  objc_copyWeak(&v74, &location);
  v57 = v65;
  v72 = v57;
  v73 = v58;
  objc_msgSend(v70, "run:", v71);

  objc_destroyWeak(&v74);
  v34 = v70;
LABEL_38:

  objc_destroyWeak(&v88);
  objc_destroyWeak(&location);
LABEL_39:
  v20 = v60;
LABEL_40:

}

- (void)uploadHomeToCloudZone:(id)a3 withDelay:(double)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11[2];
  id location;

  v6 = a3;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __50__HMDHomeManager_uploadHomeToCloudZone_withDelay___block_invoke;
  v9[3] = &unk_1E89BD1B8;
  objc_copyWeak(v11, &location);
  v10 = v6;
  v11[1] = *(id *)&a4;
  v8 = v6;
  dispatch_async(v7, v9);

  objc_destroyWeak(v11);
  objc_destroyWeak(&location);
}

- (void)_uploadHomeToCloud:(id)a3 withDelay:(double)a4
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  _QWORD aBlock[4];
  id v24;
  id v25;
  id location;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (-[HMDHomeManager hasiCloudAndControllerKey](self, "hasiCloudAndControllerKey"))
  {
    objc_msgSend(v6, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, self);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __47__HMDHomeManager__uploadHomeToCloud_withDelay___block_invoke;
    aBlock[3] = &unk_1E89BD1E0;
    objc_copyWeak(&v25, &location);
    v8 = v7;
    v24 = v8;
    v9 = _Block_copy(aBlock);
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v13;
      v29 = 2112;
      v30 = v6;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Uploading object changes for home %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v6, "zoneID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "UUIDString");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDSyncOperation cloudZonePushSyncOperation:block:](HMDSyncOperation, "cloudZonePushSyncOperation:block:", v15, v9);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager syncManager](v11, "syncManager");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "addOperation:withDelay:", v16, a4);

    objc_destroyWeak(&v25);
    objc_destroyWeak(&location);

  }
  else
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v21;
      v29 = 2112;
      v30 = v22;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@Not scheduling zone push for %@.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
  }

}

- (void)_loadHomeManagerHomeModelChanges:(id)a3 mustReplay:(id)a4 legacyPush:(BOOL)a5 home:(id)a6 completion:(id)a7
{
  _BOOL4 v9;
  id v12;
  id v13;
  id v14;
  void (**v15)(_QWORD, _QWORD);
  uint64_t v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDBackingStoreLogFetchOperation *v23;
  uint64_t v24;
  id v25;
  HMDBackingStoreLogFetchOperation *v26;
  id v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  void *v36;
  id v37;
  _QWORD v38[4];
  id v39;
  void (**v40)(_QWORD, _QWORD);
  id v41;
  _QWORD v42[4];
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id location;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;
  uint64_t v53;

  v9 = a5;
  v53 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v37 = a4;
  v13 = a6;
  v14 = a7;
  v15 = (void (**)(_QWORD, _QWORD))v14;
  if (v12 && v13)
  {
    if (v9)
      v16 = 1;
    else
      v16 = 2;
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "name");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v50 = v20;
      v51 = 2112;
      v52 = v21;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEBUG, "%{public}@Find all home change for home %@ in home manager's datastore", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, v18);
    v23 = [HMDBackingStoreLogFetchOperation alloc];
    v24 = MEMORY[0x1E0C809B0];
    v42[0] = MEMORY[0x1E0C809B0];
    v42[1] = 3221225472;
    v42[2] = __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke;
    v42[3] = &unk_1E89BD208;
    objc_copyWeak(&v47, &location);
    v43 = v13;
    v25 = v22;
    v44 = v25;
    v45 = v12;
    v46 = v37;
    v26 = -[HMDBackingStoreLogFetchOperation initWithNeedsPushTo:result:](v23, "initWithNeedsPushTo:result:", v16, v42);
    v38[0] = v24;
    v38[1] = 3221225472;
    v38[2] = __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_631;
    v38[3] = &unk_1E89C0650;
    objc_copyWeak(&v41, &location);
    v27 = v25;
    v39 = v27;
    v40 = v15;
    v28 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v26, "setResultBlock:", v38));
    v29 = v18;
    HMFGetOSLogHandle();
    v30 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v50 = v31;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_DEBUG, "%{public}@Load home change from homemanager datastore started", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v28);
    -[HMDHomeManager backingStore](v29, "backingStore");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "submit:", v26);

    objc_destroyWeak(&v41);
    objc_destroyWeak(&v47);
    objc_destroyWeak(&location);
LABEL_15:

    goto LABEL_16;
  }
  if (v14)
  {
    v33 = (void *)MEMORY[0x1D17BA0A0]();
    v34 = self;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v50 = v36;
      _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_ERROR, "%{public}@A cloudTransaction and home when querying for home changes in home manager datastore", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v33);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id))v15)[2](v15, v27);
    goto LABEL_15;
  }
LABEL_16:

}

- (void)_loadHomeModelChanges:(id)a3 mustReplay:(id)a4 legacyPush:(BOOL)a5 home:(id)a6 completion:(id)a7
{
  _BOOL8 v9;
  id v12;
  id v13;
  id v14;
  void (**v15)(_QWORD, _QWORD);
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  id v23;
  _QWORD v24[4];
  id v25;
  HMDHomeManager *v26;
  id v27;
  id v28;
  id v29;
  void (**v30)(_QWORD, _QWORD);
  id v31[2];
  id location[4];

  v9 = a5;
  location[3] = *(id *)MEMORY[0x1E0C80C00];
  v12 = a3;
  v23 = a4;
  v13 = a6;
  v14 = a7;
  v15 = (void (**)(_QWORD, _QWORD))v14;
  if (v12 && v13)
  {
    if (v9)
      v16 = 1;
    else
      v16 = 2;
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(location, self);
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke;
    v24[3] = &unk_1E89BD258;
    v30 = v15;
    v31[1] = (id)v16;
    v25 = v13;
    v26 = self;
    v27 = v12;
    v28 = v23;
    v18 = v17;
    v29 = v18;
    objc_copyWeak(v31, location);
    -[HMDHomeManager _loadHomeManagerHomeModelChanges:mustReplay:legacyPush:home:completion:](self, "_loadHomeManagerHomeModelChanges:mustReplay:legacyPush:home:completion:", v27, v28, v9, v25, v24);
    objc_destroyWeak(v31);

    objc_destroyWeak(location);
LABEL_11:

    goto LABEL_12;
  }
  if (v14)
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(location[0]) = 138543362;
      *(id *)((char *)location + 4) = v22;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@A cloudTransaction and home when querying for home changes in datastore", (uint8_t *)location, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v18 = (id)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id))v15)[2](v15, v18);
    goto LABEL_11;
  }
LABEL_12:

}

- (void)_updateModelChangesAsPushed:(id)a3 home:(id)a4 pushMask:(unint64_t)a5 completion:(id)a6
{
  id v9;
  id v10;
  id v11;
  HMDBackingStoreLogUpdateOperation *v12;
  id v13;
  void *v14;
  _QWORD v15[4];
  id v16;

  v9 = a6;
  v10 = a4;
  v11 = a3;
  v12 = -[HMDBackingStoreLogUpdateOperation initWithRowIDs:successfullyPushedTo:]([HMDBackingStoreLogUpdateOperation alloc], "initWithRowIDs:successfullyPushedTo:", v11, a5);

  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __71__HMDHomeManager__updateModelChangesAsPushed_home_pushMask_completion___block_invoke;
  v15[3] = &unk_1E89C1A48;
  v16 = v9;
  v13 = v9;
  -[HMDBackingStoreOperation setResultBlock:](v12, "setResultBlock:", v15);
  objc_msgSend(v10, "backingStore");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "submit:", v12);
}

- (void)_pushZoneInfromationForHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "cloudCache");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "homeManagerZone");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 && v7)
  {
    objc_msgSend(v4, "zoneID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _zoneInformationWithUUID:](self, "_zoneInformationWithUUID:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
      goto LABEL_7;
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "zoneID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v32 = v13;
      v33 = 2112;
      v34 = v14;
      v35 = 2112;
      v36 = v15;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Local zone information missing for home/zone %@/%@, creating", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v4, "zoneID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "ownerName");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _addCloudZone:ownerName:](v11, "_addCloudZone:ownerName:", v16, v17);

    objc_msgSend(v4, "zoneID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _zoneInformationWithUUID:](v11, "_zoneInformationWithUUID:", v18);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
LABEL_7:
      objc_initWeak((id *)buf, self);
      objc_msgSend(v4, "zoneID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = __46__HMDHomeManager__pushZoneInfromationForHome___block_invoke;
      v27[3] = &unk_1E89BD2A8;
      objc_copyWeak(&v30, (id *)buf);
      v28 = v4;
      v20 = v9;
      v29 = v20;
      objc_msgSend(v7, "cloudRecordWithObjectID:completionHandler:", v19, v27);

      objc_destroyWeak(&v30);
      objc_destroyWeak((id *)buf);

    }
    else
    {
      v21 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = v11;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "name");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "zoneID");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v32 = v24;
        v33 = 2112;
        v34 = v25;
        v35 = 2112;
        v36 = v26;
        _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to create local zone information for home/zone %@/%@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v21);
    }
  }

}

- (void)_uploadTransaction:(id)a3 home:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_initWeak(&location, self);
  -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __53__HMDHomeManager__uploadTransaction_home_completion___block_invoke;
  v15[3] = &unk_1E89BDA00;
  objc_copyWeak(&v19, &location);
  v12 = v9;
  v16 = v12;
  v13 = v8;
  v17 = v13;
  v14 = v10;
  v18 = v14;
  objc_msgSend(v11, "uploadTransaction:completionHandler:", v13, v15);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

}

- (void)_runUploadHomeToCloud:(id)a3 syncCompletion:(id)a4
{
  id v6;
  id v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD v31[5];
  id v32;
  id v33;
  id v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (-[HMDHomeManager hasiCloudAndControllerKey](self, "hasiCloudAndControllerKey"))
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (v8
      && (-[HMDHomeManager pendingHomesBeingRemoved](self, "pendingHomesBeingRemoved"),
          v9 = (void *)objc_claimAutoreleasedReturnValue(),
          v10 = objc_msgSend(v9, "containsObject:", v6),
          v9,
          !v10))
    {
      v22 = (void *)MEMORY[0x1D17BA0A0]();
      v23 = (void *)MEMORY[0x1D17BA0A0]();
      v24 = self;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v36 = v26;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Pushing changes up to the cloud", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      -[HMDHomeManager cloudDataSyncManager](v24, "cloudDataSyncManager");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "cloudCache");
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      objc_initWeak((id *)buf, v24);
      objc_msgSend(v8, "zoneID");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "UUIDString");
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke;
      v31[3] = &unk_1E89BD2D0;
      v31[4] = v24;
      v8 = v8;
      v32 = v8;
      objc_copyWeak(&v34, (id *)buf);
      v33 = v7;
      objc_msgSend(v28, "homeZoneWithName:owner:completion:", v30, &stru_1E89C3E38, v31);

      objc_destroyWeak(&v34);
      objc_destroyWeak((id *)buf);

      objc_autoreleasePoolPop(v22);
    }
    else
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "UUIDString");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v36 = v14;
        v37 = 2112;
        v38 = v15;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Cannot push home %@ data to the cloud because it was removed", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v11);
      if (v7)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 52, CFSTR("Operation not allowed because home was removed"), CFSTR("HMDHomeManager not allowing operation"), 0);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id, void *))v7 + 2))(v7, v16);

      }
    }
    goto LABEL_15;
  }
  v17 = (void *)MEMORY[0x1D17BA0A0]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUIDString");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v36 = v20;
    v37 = 2112;
    v38 = v21;
    _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping zone push to %@.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v17);
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 75, CFSTR("Operation was cancelled before it could run"), CFSTR("iCloud & Controller key was not available"), CFSTR("Make sure that you are signed into iCloud account"));
    v8 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id))v7 + 2))(v7, v8);
LABEL_15:

  }
}

- (void)fetchAllZones
{
  -[HMDHomeManager _fetchAllZones:](self, "_fetchAllZones:", 0);
}

- (void)_fetchAllZones:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __33__HMDHomeManager__fetchAllZones___block_invoke;
  block[3] = &unk_1E89BD190;
  objc_copyWeak(&v9, &location);
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, block);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

- (void)_schedulePostFetch
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, void *, uint64_t, int);
  void *v9;
  id v10;
  id location;

  objc_initWeak(&location, self);
  v6 = MEMORY[0x1E0C809B0];
  v7 = 3221225472;
  v8 = __36__HMDHomeManager__schedulePostFetch__block_invoke;
  v9 = &unk_1E89BCF88;
  objc_copyWeak(&v10, &location);
  v3 = _Block_copy(&v6);
  +[HMDSyncOperation postFetchOperationWithBlock:](HMDSyncOperation, "postFetchOperationWithBlock:", v3, v6, v7, v8, v9);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager syncManager](self, "syncManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addOperation:", v4);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

- (void)schedulePostFetch
{
  NSObject *v3;
  _QWORD v4[4];
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __35__HMDHomeManager_schedulePostFetch__block_invoke;
  v4[3] = &unk_1E89BE3F8;
  objc_copyWeak(&v5, &location);
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (void)notifyZonesCloudZoneReady:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __44__HMDHomeManager_notifyZonesCloudZoneReady___block_invoke;
  block[3] = &unk_1E89BE218;
  objc_copyWeak(&v9, &location);
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, block);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

- (void)fetchHomeFromCloudZone:(id)a3 cloudConflict:(BOOL)a4 withDelay:(double)a5
{
  id v8;
  NSObject *v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13[2];
  BOOL v14;
  id location;

  v8 = a3;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v9 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __65__HMDHomeManager_fetchHomeFromCloudZone_cloudConflict_withDelay___block_invoke;
  block[3] = &unk_1E89BD370;
  objc_copyWeak(v13, &location);
  v12 = v8;
  v14 = a4;
  v13[1] = *(id *)&a5;
  v10 = v8;
  dispatch_async(v9, block);

  objc_destroyWeak(v13);
  objc_destroyWeak(&location);
}

- (void)_fetchHomeFromCloudZone:(id)a3 cloudConflict:(BOOL)a4 withDelay:(double)a5 completionHandler:(id)a6
{
  _BOOL8 v8;
  id v10;
  id v11;
  BOOL v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD aBlock[4];
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v8 = a4;
  v35 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a6;
  v12 = -[HMDHomeManager hasiCloudAndControllerKey](self, "hasiCloudAndControllerKey");
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v12)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v17;
      v33 = 2112;
      v34 = v10;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Will add operation to fetch home zone %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_initWeak((id *)buf, v14);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __84__HMDHomeManager__fetchHomeFromCloudZone_cloudConflict_withDelay_completionHandler___block_invoke;
    aBlock[3] = &unk_1E89BD398;
    objc_copyWeak(&v30, (id *)buf);
    v18 = v10;
    v28 = v18;
    v19 = v11;
    v29 = v19;
    v20 = _Block_copy(aBlock);
    objc_msgSend(v18, "UUIDString");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDSyncOperation cloudZoneFetchSyncOperation:cloudConflict:block:completion:](HMDSyncOperation, "cloudZoneFetchSyncOperation:cloudConflict:block:completion:", v21, v8, v20, v19);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager syncManager](v14, "syncManager");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "addOperation:withDelay:", v22, a5);

    objc_destroyWeak(&v30);
    objc_destroyWeak((id *)buf);
  }
  else
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "UUIDString");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v24;
      v33 = 2112;
      v34 = v25;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Not scheduling zone fetch for %@ cannot fetch under current conditions.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled before it could run"), CFSTR("iCloud & Controller key was not available"), CFSTR("Make sure that you are signed into iCloud account"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
      (*((void (**)(id, void *))v11 + 2))(v11, v26);

  }
}

- (BOOL)hasiCloudAndControllerKey
{
  void *v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;
  char v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isiCloudSwitchEnabled");

  -[HMDHomeManager cloudDataSource](self, "cloudDataSource");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isControllerKeyAvailable");

  v7 = v4 & v6;
  if ((v4 & v6 & 1) == 0)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v11;
      v17 = 2112;
      v18 = v12;
      v19 = 2112;
      v20 = v13;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@iCloud Switch is:%@, controller key is available: %@", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
  }
  return v7;
}

- (BOOL)hasValidControllerKeyToSave
{
  void *v2;
  char v3;

  -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isLocalDataDecryptionFailed");

  return v3 ^ 1;
}

- (void)_runFetchHomeFromCloudZone:(id)a3 cloudConflict:(BOOL)a4 syncCompletion:(id)a5
{
  id v8;
  id v9;
  BOOL v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v25[5];
  id v26;
  id v27;
  id v28;
  BOOL v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  v10 = -[HMDHomeManager hasiCloudAndControllerKey](self, "hasiCloudAndControllerKey");
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  if (v10)
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v15;
      v32 = 2112;
      v33 = v8;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Fetching home zone changes from the cloud: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    -[HMDHomeManager cloudDataSyncManager](v13, "cloudDataSyncManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "cloudCache");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "UUIDString");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke;
    v25[3] = &unk_1E89BD438;
    v25[4] = v13;
    v26 = v8;
    v27 = v18;
    v28 = v9;
    v29 = a4;
    v19 = v18;
    objc_msgSend(v17, "homeZoneWithName:owner:completion:", v19, &stru_1E89C3E38, v25);

    objc_autoreleasePoolPop(v11);
  }
  else
  {
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v22;
      v32 = 2112;
      v33 = v23;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Dropping zone fetch to %@.", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    if (v9)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 75, CFSTR("Operation was cancelled before it could run"), CFSTR("iCloud & Controller key was not available"), CFSTR("Make sure that you are signed into iCloud account"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *))v9 + 2))(v9, v24);

    }
  }

}

- (void)_handleFetchModifyHome:(id)a3 isLegacyTransaction:(BOOL)a4 completion:(id)a5
{
  _BOOL4 v6;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  _QWORD v41[4];
  id v42;
  id v43;
  id v44;
  id v45;
  _QWORD block[4];
  id v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v6 = a4;
  v52 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  if (!v8)
  {
    -[HMDHomeManager workQueue](self, "workQueue");
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke;
    block[3] = &unk_1E89C0870;
    v47 = v9;
    dispatch_async(v10, block);

  }
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager backingStore](self, "backingStore");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    +[HMDBackingStoreTransactionOptions defaultLegacyCloudOptions](HMDBackingStoreTransactionOptions, "defaultLegacyCloudOptions");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "transaction:options:", CFSTR("kTransactionUpdate"), v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = 0;
    v15 = 0;
LABEL_13:

    goto LABEL_14;
  }
  +[HMDBackingStoreTransactionOptions defaultCloudOptions](HMDBackingStoreTransactionOptions, "defaultCloudOptions");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "transaction:options:", CFSTR("kTransactionUpdate"), v16);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager backingStore](self, "backingStore");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions cloudRequiresPushOptions](HMDBackingStoreTransactionOptions, "cloudRequiresPushOptions");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "transaction:options:", CFSTR("kTransactionUpdate"), v18);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v8, "isPushAfterApply"))
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "objectID");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v49 = v22;
      v50 = 2112;
      v51 = v23;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Change should be pushed after being applied: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    objc_msgSend(v8, "objectChange");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "add:withMessage:", v11, 0);
    v14 = 1;
    goto LABEL_13;
  }
  if (objc_msgSend(v8, "isDropStagedAfterApply"))
  {
    v24 = (void *)MEMORY[0x1D17BA0A0]();
    v25 = self;
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "objectID");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v49 = v27;
      v50 = 2112;
      v51 = v28;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Object conflict, drop all staged changes for object: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(v8, "rowIDs");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "addObjectsFromArray:", v11);
    v14 = 0;
    goto LABEL_13;
  }
  v14 = 0;
LABEL_14:
  objc_msgSend(v8, "objectChange");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "add:withMessage:", v29, 0);

  if (v14)
  {
    v30 = (void *)MEMORY[0x1D17BA0A0]();
    v31 = self;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v49 = v33;
      _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@Saving changes to push after applying", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(v15, "save");
    objc_msgSend(v8, "objectChange");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "uuid");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](v31, "_homeWithUUID:", v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    if (v36)
      -[HMDHomeManager _uploadHomeToCloud:withDelay:](v31, "_uploadHomeToCloud:withDelay:", v36, 0.0);

  }
  objc_initWeak((id *)buf, self);
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 3221225472;
  v41[2] = __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_659;
  v41[3] = &unk_1E89BDA00;
  objc_copyWeak(&v45, (id *)buf);
  v37 = v9;
  v44 = v37;
  v38 = v8;
  v42 = v38;
  v39 = v40;
  v43 = v39;
  objc_msgSend(v13, "run:", v41);

  objc_destroyWeak(&v45);
  objc_destroyWeak((id *)buf);

}

- (void)_handleFetchObjectChange:(id)a3 home:(id)a4 isLegacyTransaction:(BOOL)a5 completion:(id)a6
{
  id v9;
  id v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHomeManager *v35;
  NSObject *v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void (**v41)(id, _QWORD);
  void *v42;
  char v43;
  void *v44;
  void *v45;
  HMDHomeManager *val;
  id obj;
  _BOOL4 v48;
  _QWORD v49[4];
  id v50;
  id v51;
  void (**v52)(id, _QWORD);
  id v53;
  BOOL v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  void *v62;
  _BYTE v63[128];
  uint64_t v64;

  v48 = a5;
  v64 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v40 = v9;
  v41 = (void (**)(id, _QWORD))a6;
  v45 = v10;
  if (!objc_msgSend(v9, "count"))
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v60 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Nothing to applied", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    if (v41)
      v41[2](v41, 0);
    goto LABEL_36;
  }
  val = self;
  if (v10)
    objc_msgSend(v10, "backingStore");
  else
    -[HMDHomeManager backingStore](self, "backingStore");
  objc_msgSend(MEMORY[0x1E0C99E20], "set", objc_claimAutoreleasedReturnValue());
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  if (v48)
  {
    +[HMDBackingStoreTransactionOptions defaultLegacyCloudOptions](HMDBackingStoreTransactionOptions, "defaultLegacyCloudOptions");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "transaction:options:", CFSTR("kTransactionUpdate"), v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = 0;
  }
  else
  {
    +[HMDBackingStoreTransactionOptions defaultCloudOptions](HMDBackingStoreTransactionOptions, "defaultCloudOptions");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "transaction:options:", CFSTR("kTransactionUpdate"), v17);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    +[HMDBackingStoreTransactionOptions cloudRequiresPushOptions](HMDBackingStoreTransactionOptions, "cloudRequiresPushOptions");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "transaction:options:", CFSTR("kTransactionUpdate"), v15);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  obj = v9;
  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
  if (!v18)
  {

    goto LABEL_35;
  }
  v43 = 0;
  v19 = *(_QWORD *)v56;
  do
  {
    for (i = 0; i != v18; ++i)
    {
      if (*(_QWORD *)v56 != v19)
        objc_enumerationMutation(obj);
      v21 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * i);
      if (!v48)
      {
        if (objc_msgSend(*(id *)(*((_QWORD *)&v55 + 1) + 8 * i), "isPushAfterApply"))
        {
          v22 = (void *)MEMORY[0x1D17BA0A0]();
          v23 = val;
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "objectID");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v60 = v25;
            v61 = 2112;
            v62 = v26;
            _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Change should be pushed after being applied: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v22);
          objc_msgSend(v21, "objectChange");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "add:withMessage:", v27, 0);
          v43 = 1;
        }
        else
        {
          if (((v45 != 0) & objc_msgSend(v21, "isDropStagedAfterApply")) != 1)
            goto LABEL_27;
          v28 = (void *)MEMORY[0x1D17BA0A0]();
          v29 = val;
          HMFGetOSLogHandle();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "objectID");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v60 = v31;
            v61 = 2112;
            v62 = v32;
            _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Object conflict, drop all staged changes for object: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v28);
          objc_msgSend(v21, "rowIDs");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "addObjectsFromArray:", v27);
        }

      }
LABEL_27:
      objc_msgSend(v21, "objectChange");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "add:withMessage:", v33, 0);

    }
    v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v63, 16);
  }
  while (v18);

  if ((v43 & 1) != 0)
  {
    v34 = (void *)MEMORY[0x1D17BA0A0]();
    v35 = val;
    HMFGetOSLogHandle();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v60 = v37;
      _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@Saving changes to push after applying", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v34);
    objc_msgSend(v44, "save");
    if (v45)
      -[HMDHomeManager _uploadHomeToCloud:withDelay:](v35, "_uploadHomeToCloud:withDelay:", v45, 0.0);
  }
LABEL_35:
  objc_initWeak((id *)buf, val);
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 3221225472;
  v49[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke;
  v49[3] = &unk_1E89BD460;
  objc_copyWeak(&v53, (id *)buf);
  v50 = v45;
  v54 = v48;
  v52 = v41;
  v38 = v42;
  v51 = v38;
  objc_msgSend(v16, "run:", v49);

  objc_destroyWeak(&v53);
  objc_destroyWeak((id *)buf);

LABEL_36:
}

- (void)_handleTransactionsFetched:(id)a3 stagedTransaction:(id)a4 mustReplay:(id)a5 zoneID:(id)a6 cloudConflict:(BOOL)a7 transactionError:(id)a8 syncCompletion:(id)a9
{
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void (**v19)(void);
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  void *v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  HMDHomeManager *v49;
  NSObject *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  void *v56;
  void *v57;
  int v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  NSObject *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t j;
  void *v70;
  void *v71;
  HMDHomeManager *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  char v78;
  void *v79;
  HMDHomeManager *v80;
  NSObject *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  void (**v96)(void);
  void *v97;
  uint64_t v98;
  void *v99;
  HMDHomeManager *v100;
  NSObject *v101;
  void *v102;
  void *v103;
  id v104;
  void *v105;
  HMDHomeManager *v106;
  id obj;
  void *v108;
  void *v109;
  void *v110;
  _BOOL4 v111;
  void *v112;
  void *v113;
  void (**v114)(void);
  id v115;
  id v116;
  id v117;
  id v118;
  void *v119;
  id v120;
  HMDHomeManager *val;
  _QWORD v122[4];
  id v123;
  id v124;
  id v125;
  id v126;
  void (**v127)(void);
  id v128;
  id v129;
  id location;
  _QWORD aBlock[4];
  id v132;
  HMDHomeManager *v133;
  id v134;
  id v135;
  id v136;
  void (**v137)(void);
  BOOL v138;
  BOOL v139;
  _QWORD v140[4];
  id v141;
  HMDHomeManager *v142;
  id v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint8_t buf[4];
  void *v153;
  __int16 v154;
  id v155;
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  _BYTE v162[128];
  _BYTE v163[128];
  uint64_t v164;

  v111 = a7;
  v164 = *MEMORY[0x1E0C80C00];
  v116 = a3;
  v118 = a4;
  v117 = a5;
  v115 = a6;
  v120 = a8;
  v114 = (void (**)(void))a9;
  v14 = (void *)MEMORY[0x1D17BA0A0]();
  val = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v120, "hmd_conciseCKError");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "shortDescription");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v153 = v16;
    v154 = 2112;
    v155 = v115;
    v156 = 2112;
    v157 = (uint64_t)v18;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Fetched data from zone %@ with error status: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v14);
  if (!v120)
  {
    if (-[HMDHomeManager backOffOperationInProgress](val, "backOffOperationInProgress"))
    {
      v20 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager setBackOffOperationInProgress:](val, "setBackOffOperationInProgress:", 0));
      v21 = val;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v153 = v23;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Clearing that we were in a backoff operation", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
    }
    -[HMDHomeManager _resetCloudOperationRetryCounters](val, "_resetCloudOperationRetryCounters");
    -[HMDHomeManager setHomeDataLoadedFromArchive:](val, "setHomeDataLoadedFromArchive:", 1);
    -[HMDHomeManager cloudDataSyncStateFilter](val, "cloudDataSyncStateFilter");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "updateLocalDataDecryptionFailed:", 0);

    objc_msgSend(v116, "replayTransaction:stagedTransaction:", v117, v118);
    v108 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _findHomeModelChange:](val, "_findHomeModelChange:", v108);
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithZoneID:](val, "_homeWithZoneID:", v115);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v113)
    {
      v113 = 0;
      v26 = v108;
LABEL_88:
      v88 = v26;
      -[HMDHomeManager _findHomeConfigurationModelChange:](val, "_findHomeConfigurationModelChange:");
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      v90 = v89;
      if (v89)
      {
        objc_msgSend(v89, "objectChange");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v92 = v91;
        else
          v92 = 0;
        v93 = v92;

        if (v93 && objc_msgSend(v118, "hasValidChanges"))
          objc_msgSend(v93, "setHomeHasLocalChanges:", 1);

      }
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke_673;
      aBlock[3] = &unk_1E89BD4B0;
      v94 = v116;
      v132 = v94;
      v133 = val;
      v95 = v115;
      v134 = v95;
      v138 = v111;
      v135 = v117;
      v136 = v118;
      v139 = v109 != 0;
      v96 = v114;
      v137 = v96;
      v97 = _Block_copy(aBlock);
      objc_initWeak(&location, val);
      if (v113)
      {
        v98 = objc_msgSend(v94, "isLegacyTransaction");
        v122[0] = MEMORY[0x1E0C809B0];
        v122[1] = 3221225472;
        v122[2] = __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke_674;
        v122[3] = &unk_1E89BD4D8;
        objc_copyWeak(&v129, &location);
        v123 = v113;
        v124 = v88;
        v125 = v95;
        v127 = v96;
        v128 = v97;
        v126 = v94;
        -[HMDHomeManager _handleFetchModifyHome:isLegacyTransaction:completion:](val, "_handleFetchModifyHome:isLegacyTransaction:completion:", v123, v98, v122);

        objc_destroyWeak(&v129);
      }
      else if (objc_msgSend(v88, "count") || !v111)
      {
        -[HMDHomeManager _handleFetchObjectChange:home:isLegacyTransaction:completion:](val, "_handleFetchObjectChange:home:isLegacyTransaction:completion:", v88, v109, objc_msgSend(v94, "isLegacyTransaction"), v97);
      }
      else
      {
        v99 = (void *)MEMORY[0x1D17BA0A0]();
        v100 = val;
        HMFGetOSLogHandle();
        v101 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v153 = v102;
          _os_log_impl(&dword_1CD062000, v101, OS_LOG_TYPE_INFO, "%{public}@Nothing to applied on cloud conflict fetch, force server token to nil", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v99);
        objc_msgSend(v94, "setUpdatedServerChangeToken:", 0);
        if (v97)
          (*((void (**)(void *, _QWORD))v97 + 2))(v97, 0);
      }
      objc_destroyWeak(&location);

      goto LABEL_106;
    }
    if ((objc_msgSend(v113, "isDeleted") & 1) != 0)
    {
      v110 = (void *)MEMORY[0x1E0C9AA60];
      v25 = v108;
LABEL_87:

      v26 = v110;
      goto LABEL_88;
    }
    objc_msgSend(v113, "objectID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v118, "changeWithObjectID:", v27);
    v105 = (void *)objc_claimAutoreleasedReturnValue();

    if (v105 && objc_msgSend(v105, "isDeleted"))
    {
      v28 = (void *)MEMORY[0x1D17BA0A0]();
      v29 = val;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v113, "objectID");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v153 = v31;
        v154 = 2112;
        v155 = v32;
        _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Dropping home %@ because it was deleted locally and has not yet been pushed", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v28);
      v104 = 0;
      v110 = (void *)MEMORY[0x1E0C9AA60];
      v33 = v113;
      v103 = v108;
LABEL_42:
      v113 = 0;
LABEL_85:

      v25 = v104;
      goto LABEL_86;
    }
    objc_msgSend(v113, "objectChange");
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v34 = v25;
    else
      v34 = 0;
    v104 = v34;

    if (!v104)
    {
      objc_msgSend(v113, "objectChange");
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v35 = v103;
      else
        v35 = 0;
      v25 = v35;

      if (v25)
      {
        if (!v109)
          goto LABEL_41;
        objc_msgSend(v25, "setProperties");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = objc_msgSend(v36, "containsObject:", CFSTR("configurationVersion"));

        if (!v37)
          goto LABEL_41;
        objc_msgSend(v25, "configurationVersion");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = objc_msgSend(v38, "integerValue");

        if (v39 < objc_msgSend(v109, "configurationVersion")
          || objc_msgSend(v109, "expectedConfigurationVersion")
          && objc_msgSend(v109, "expectedConfigurationVersion") > v39)
        {
          v40 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v41 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v109, "name");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            v44 = objc_msgSend(v109, "configurationVersion");
            v45 = objc_msgSend(v109, "expectedConfigurationVersion");
            *(_DWORD *)buf = 138544386;
            v153 = v42;
            v154 = 2112;
            v155 = v43;
            v156 = 2048;
            v157 = v44;
            v158 = 2048;
            v159 = v45;
            v160 = 2048;
            v161 = v39;
            _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Dropping shared home %@ merge because local configuration version %lu or expected configuration version %lu is less that remote %lu", buf, 0x34u);

          }
          objc_autoreleasePoolPop(v40);

          v104 = 0;
          v110 = (void *)MEMORY[0x1E0C9AA60];
          v33 = v113;
        }
        else
        {
LABEL_41:
          v104 = 0;
          v33 = v113;
          v110 = v108;
        }
        goto LABEL_42;
      }
LABEL_37:
      v110 = v108;
LABEL_86:

      goto LABEL_87;
    }
    if (v109)
    {

      objc_msgSend(v118, "hasValidChanges");
      v113 = 0;
      goto LABEL_37;
    }
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", v108);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v110, "removeObject:", v113);
    -[HMDHomeManager _findHomeOwnerModelChange:](val, "_findHomeOwnerModelChange:", v108);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v103)
    {
LABEL_82:
      -[HMDHomeManager _findHomeSharedUserModelChange:](val, "_findHomeSharedUserModelChange:", v108);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      if (v33)
      {
        v140[0] = MEMORY[0x1E0C809B0];
        v140[1] = 3221225472;
        v140[2] = __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke;
        v140[3] = &unk_1E89BD488;
        v141 = v104;
        v142 = val;
        v143 = v110;
        objc_msgSend(v33, "enumerateKeysAndObjectsUsingBlock:", v140);

      }
      goto LABEL_85;
    }
    v46 = objc_alloc(MEMORY[0x1E0CB3A28]);
    objc_msgSend(v104, "ownerUUID");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v112 = (void *)objc_msgSend(v46, "initWithUUIDString:", v47);

    if (objc_msgSend(v103, "count") == 1)
    {
      objc_msgSend(v103, "firstObject");
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_75;
    }
    if ((unint64_t)objc_msgSend(v103, "count") < 2)
      goto LABEL_80;
    v48 = (void *)MEMORY[0x1D17BA0A0]();
    v49 = val;
    HMFGetOSLogHandle();
    v50 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v153 = v51;
      _os_log_impl(&dword_1CD062000, v50, OS_LOG_TYPE_INFO, "%{public}@Found duplicate owner models", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v48);
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v52 = v103;
    v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v148, v163, 16);
    if (v53)
    {
      v119 = 0;
      v54 = *(_QWORD *)v149;
      do
      {
        for (i = 0; i != v53; ++i)
        {
          if (*(_QWORD *)v149 != v54)
            objc_enumerationMutation(v52);
          v56 = *(void **)(*((_QWORD *)&v148 + 1) + 8 * i);
          objc_msgSend(v56, "objectID");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          v58 = objc_msgSend(v57, "isEqual:", v112);

          if (v58)
          {
            v59 = v56;

            v119 = v59;
          }
          objc_msgSend(v56, "objectChange");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          v61 = v60;
          if (v60)
            objc_msgSend(v60, "dumpDebug:", CFSTR(" DUPLICATE: "));

        }
        v53 = objc_msgSend(v52, "countByEnumeratingWithState:objects:count:", &v148, v163, 16);
      }
      while (v53);

      if (v119)
        goto LABEL_61;
    }
    else
    {

    }
    objc_msgSend(v52, "lastObject");
    v119 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_61:
    v62 = (void *)MEMORY[0x1D17BA0A0]();
    v106 = v49;
    HMFGetOSLogHandle();
    v63 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v119, "objectID");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "UUIDString");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v153 = v64;
      v154 = 2112;
      v155 = v66;
      _os_log_impl(&dword_1CD062000, v63, OS_LOG_TYPE_INFO, "%{public}@Selecting as owner model %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v62);
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    obj = v52;
    v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v144, v162, 16);
    if (v67)
    {
      v68 = *(_QWORD *)v145;
      do
      {
        for (j = 0; j != v67; ++j)
        {
          if (*(_QWORD *)v145 != v68)
            objc_enumerationMutation(obj);
          v70 = *(void **)(*((_QWORD *)&v144 + 1) + 8 * j);
          if ((objc_msgSend(v70, "isEqual:", v119) & 1) == 0)
          {
            v71 = (void *)MEMORY[0x1D17BA0A0]();
            v72 = v106;
            HMFGetOSLogHandle();
            v73 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v74 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v70, "objectID");
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v75, "UUIDString");
              v76 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v153 = v74;
              v154 = 2112;
              v155 = v76;
              _os_log_impl(&dword_1CD062000, v73, OS_LOG_TYPE_INFO, "%{public}@Dropping user model from processing %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v71);
            objc_msgSend(v110, "removeObject:", v70);
          }
        }
        v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v144, v162, 16);
      }
      while (v67);
    }

LABEL_75:
    if (v119)
    {
      objc_msgSend(v119, "objectID");
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      v78 = objc_msgSend(v77, "isEqual:", v112);

      if ((v78 & 1) == 0)
      {
        v79 = (void *)MEMORY[0x1D17BA0A0]();
        v80 = val;
        HMFGetOSLogHandle();
        v81 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v104, "ownerUUID");
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v119, "objectID");
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v84, "UUIDString");
          v85 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v153 = v82;
          v154 = 2112;
          v155 = v83;
          v156 = 2112;
          v157 = (uint64_t)v85;
          _os_log_impl(&dword_1CD062000, v81, OS_LOG_TYPE_INFO, "%{public}@Fixing up home ownerUUID from %@ to %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v79);
        objc_msgSend(v119, "objectID");
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v86, "UUIDString");
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v104, "setOwnerUUID:", v87);

      }
      goto LABEL_81;
    }
LABEL_80:
    v119 = 0;
LABEL_81:

    goto LABEL_82;
  }
  objc_msgSend(v117, "setOsTransaction:", 0);
  objc_msgSend(v118, "setOsTransaction:", 0);
  objc_msgSend(v116, "setOsTransaction:", 0);
  v19 = v114;
  if (v114)
  {
    v114[2]();
LABEL_106:
    v19 = v114;
  }

}

- (void)determineLocalChangesAndSchedulePush
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __54__HMDHomeManager_determineLocalChangesAndSchedulePush__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_determineLocalChangesAndSchedulePush
{
  HMDBackingStoreLogChangesExistFetchOperation *v3;
  uint64_t v4;
  HMDBackingStoreLogChangesExistFetchOperation *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  HMDBackingStoreLogChangesExistFetchOperation *v11;
  HMDBackingStoreLogChangesExistFetchOperation *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  id location;
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  objc_initWeak(&location, self);
  v3 = [HMDBackingStoreLogChangesExistFetchOperation alloc];
  v4 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke;
  v20[3] = &unk_1E89BD500;
  objc_copyWeak(&v21, &location);
  v5 = -[HMDBackingStoreLogChangesExistFetchOperation initWithNeedsPushTo:result:](v3, "initWithNeedsPushTo:result:", 2, v20);
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v24 = v9;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEBUG, "%{public}@Fetching datastore for existing V4 changes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  -[HMDHomeManager backingStore](v7, "backingStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "submit:", v5);

  v11 = [HMDBackingStoreLogChangesExistFetchOperation alloc];
  v18[0] = v4;
  v18[1] = 3221225472;
  v18[2] = __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_678;
  v18[3] = &unk_1E89BD500;
  objc_copyWeak(&v19, &location);
  v12 = -[HMDBackingStoreLogChangesExistFetchOperation initWithNeedsPushTo:result:](v11, "initWithNeedsPushTo:result:", 1, v18);
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = v7;
  HMFGetOSLogHandle();
  v15 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v24 = v16;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Fetching datastore for existing V3 changes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v13);
  -[HMDHomeManager backingStore](v14, "backingStore");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "submit:", v12);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&location);
}

- (void)_determineLegacyLocalChanges:(id)a3
{
  id v4;
  HMDBackingStoreLogChangesExistFetchOperation *v5;
  HMDBackingStoreLogChangesExistFetchOperation *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id location;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    objc_initWeak(&location, self);
    v5 = [HMDBackingStoreLogChangesExistFetchOperation alloc];
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke;
    v16[3] = &unk_1E89BD528;
    objc_copyWeak(&v18, &location);
    v17 = v4;
    v6 = -[HMDBackingStoreLogChangesExistFetchOperation initWithNeedsPushTo:result:](v5, "initWithNeedsPushTo:result:", 1, v16);
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Fetching datastore for existing V3 changes", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    -[HMDHomeManager backingStore](v8, "backingStore");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "submit:", v6);

    objc_destroyWeak(&v18);
    objc_destroyWeak(&location);
  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Completion block must be specified", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
  }

}

- (void)makeSureWeAreRunningInRightEnvironment:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  void *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;
  uint64_t v16;

  v3 = a3;
  v16 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    v10 = CFSTR("not known to exist yet");
    if (v3)
      v10 = CFSTR("exists");
    v12 = 138543618;
    v13 = v8;
    v14 = 2112;
    v15 = v10;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Make sure we are running in the right environment after determining sentinel zone %@", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager hh2FrameworkSwitch](v6, "hh2FrameworkSwitch");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "makeSureWeAreRunningInRightEnvironment:", v3);

}

- (NSUUID)currentHomeUUIDOverride
{
  os_unfair_lock_s *p_lock;
  NSUUID *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_currentHomeUUIDOverride;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setCurrentHomeUUIDOverride:(id)a3
{
  NSUUID *v4;
  NSUUID *currentHomeUUIDOverride;

  v4 = (NSUUID *)a3;
  os_unfair_lock_lock_with_options();
  currentHomeUUIDOverride = self->_currentHomeUUIDOverride;
  self->_currentHomeUUIDOverride = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (HMFBoolean)overrideCurrentHomeUUIDToNil
{
  os_unfair_lock_s *p_lock;
  HMFBoolean *v4;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  v4 = self->_overrideCurrentHomeUUIDToNil;
  os_unfair_lock_unlock(p_lock);
  return v4;
}

- (void)setOverrideCurrentHomeUUIDToNil:(id)a3
{
  HMFBoolean *v4;
  HMFBoolean *overrideCurrentHomeUUIDToNil;

  v4 = (HMFBoolean *)a3;
  os_unfair_lock_lock_with_options();
  overrideCurrentHomeUUIDToNil = self->_overrideCurrentHomeUUIDToNil;
  self->_overrideCurrentHomeUUIDToNil = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setCurrentHomeUUID:(id)a3
{
  HMFBoolean *overrideCurrentHomeUUIDToNil;
  NSUUID *currentHomeUUIDOverride;
  NSUUID *v6;
  NSUUID *currentHomeUUID;
  NSUUID *v8;

  v8 = (NSUUID *)a3;
  os_unfair_lock_lock_with_options();
  overrideCurrentHomeUUIDToNil = self->_overrideCurrentHomeUUIDToNil;
  currentHomeUUIDOverride = v8;
  if (overrideCurrentHomeUUIDToNil)
  {
    if ((-[HMFBoolean BOOLValue](overrideCurrentHomeUUIDToNil, "BOOLValue") & 1) != 0)
      currentHomeUUIDOverride = 0;
    else
      currentHomeUUIDOverride = self->_currentHomeUUIDOverride;
  }
  v6 = currentHomeUUIDOverride;
  currentHomeUUID = self->_currentHomeUUID;
  self->_currentHomeUUID = v6;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)setHomes:(id)a3
{
  NSMutableArray *v4;
  NSMutableArray *homes;
  id v6;

  v6 = a3;
  os_unfair_lock_lock_with_options();
  v4 = (NSMutableArray *)objc_msgSend(v6, "mutableCopy");
  homes = self->_homes;
  self->_homes = v4;

  os_unfair_lock_unlock(&self->_lock);
}

- (void)addHome:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_lock_lock_with_options();
  -[NSMutableArray addObject:](self->_homes, "addObject:", v4);
  os_unfair_lock_unlock(&self->_lock);

}

- (void)removeHome:(id)a3
{
  id v4;

  v4 = a3;
  os_unfair_lock_lock_with_options();
  -[NSMutableArray removeObject:](self->_homes, "removeObject:", v4);
  os_unfair_lock_unlock(&self->_lock);

}

- (void)_trackRemovedHomeUserMergeId:(id)a3
{
  id v4;
  os_unfair_lock_s *p_lock;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (v4
    && (-[NSMutableSet containsObject:](self->_mergeIDsOfUsersOfRemovedSharedHomes, "containsObject:", v4) & 1) == 0)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0](-[NSMutableSet addObject:](self->_mergeIDsOfUsersOfRemovedSharedHomes, "addObject:", v4));
    v7 = self;
    HMFGetOSLogHandle();
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding user with mergeID %@ to mergeID of homes removed locally", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }
  os_unfair_lock_unlock(p_lock);

}

- (void)_stopTrackingRemovedHomeUserMergeId:(id)a3
{
  id v4;
  os_unfair_lock_s *p_lock;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (v4
    && -[NSMutableSet containsObject:](self->_mergeIDsOfUsersOfRemovedSharedHomes, "containsObject:", v4))
  {
    v6 = (void *)MEMORY[0x1D17BA0A0](-[NSMutableSet removeObject:](self->_mergeIDsOfUsersOfRemovedSharedHomes, "removeObject:", v4));
    v7 = self;
    HMFGetOSLogHandle();
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v9;
      v12 = 2112;
      v13 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Removing user with mergeID %@ from list of mergeIDs of homes removed locally", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
  }
  os_unfair_lock_unlock(p_lock);

}

- (void)_handleQueryHomeNamespace:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  BOOL v26;
  id v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9080]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "messagePayload");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v16;
      v35 = 2112;
      v36 = v17;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@No name found in query home namespace message payload: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v12 = 20;
    goto LABEL_9;
  }
  v6 = HMMaxLengthForNaming();
  if (objc_msgSend(v5, "length") > v6)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v12 = 46;
LABEL_9:
    objc_msgSend(v11, "hmErrorWithCode:", v12);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v18);
    goto LABEL_18;
  }
  objc_msgSend(v4, "numberForKey:", *MEMORY[0x1E0CB9028]);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "unsignedIntegerValue");

  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)MEMORY[0x1D17BA0A0]();
  v22 = self;
  HMFGetOSLogHandle();
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    HMHomeManagerNameValidationOptionsToString();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v34 = v24;
    v35 = 2112;
    v36 = v18;
    v37 = 2112;
    v38 = v25;
    _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Validating name for home UUID %@ with options: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v21);
  v32 = 0;
  v26 = -[HMDHomeManager checkConflictInHomeNamespaceWithName:options:namespaceUUID:error:](v22, "checkConflictInHomeNamespaceWithName:options:namespaceUUID:error:", v5, v20, v18, &v32);
  v27 = v32;
  if (v26)
  {
    objc_msgSend(v4, "respondWithSuccess");
  }
  else
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = v22;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v31;
      v35 = 2112;
      v36 = v27;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Name validation failed: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(v4, "respondWithError:", v27);
  }

LABEL_18:
}

- (BOOL)checkConflictInHomeNamespaceWithName:(id)a3 options:(unint64_t)a4 namespaceUUID:(id)a5 error:(id *)a6
{
  char v8;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  BOOL v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v8 = a4;
  v34 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a5;
  v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((v8 & 0xD) != 0)
  {
    if ((v8 & 1) == 0
      || (-[HMDHomeManager nameValidator](self, "nameValidator"),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v13, "validateName:", v10),
          v14 = (void *)objc_claimAutoreleasedReturnValue(),
          v13,
          !v14))
    {
      if (v11)
      {
        objc_msgSend(v12, "addObject:", v11);
        if ((v8 & 4) == 0)
          goto LABEL_26;
      }
      else if ((v8 & 2) != 0)
      {
        v28 = v10;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        -[HMDHomeManager homes](self, "homes");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD *)v30;
          do
          {
            for (i = 0; i != v19; ++i)
            {
              if (*(_QWORD *)v30 != v20)
                objc_enumerationMutation(v17);
              objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "uuid");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "addObject:", v22);

            }
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
          }
          while (v19);
        }

        v10 = v28;
        if ((v8 & 4) == 0)
          goto LABEL_26;
        -[HMDHomeManager uuid](self, "uuid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "addObject:", v23);

      }
      else
      {
        -[HMDHomeManager uuid](self, "uuid");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "addObject:", v16);

        if ((v8 & 4) == 0)
        {
LABEL_26:
          if ((v8 & 8) == 0
            || (-[HMDHomeManager _checkActionSetNameConflict:withNamespaceUUIDs:](self, "_checkActionSetNameConflict:withNamespaceUUIDs:", v10, v12), (v25 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
          {
            v15 = 1;
            goto LABEL_33;
          }
          v26 = v25;
          if (a6)
            *a6 = objc_retainAutorelease(v25);

          goto LABEL_31;
        }
      }
      -[HMDHomeManager _checkNameConflict:withNamespaceUUIDs:](self, "_checkNameConflict:withNamespaceUUIDs:", v10, v12);
      v24 = objc_claimAutoreleasedReturnValue();
      if (!v24)
        goto LABEL_26;
      v14 = (void *)v24;
    }
    if (a6)
      *a6 = objc_retainAutorelease(v14);

LABEL_31:
    v15 = 0;
    goto LABEL_33;
  }
  if (!a6)
    goto LABEL_31;
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
  v15 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_33:

  return v15;
}

- (id)_homeWithName:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __32__HMDHomeManager__homeWithName___block_invoke;
  v9[3] = &unk_1E89BD550;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "hmf_objectPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)_homesWithName:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __33__HMDHomeManager__homesWithName___block_invoke;
  v9[3] = &unk_1E89BD550;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v5, "hmf_objectsPassingTest:", v9);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)_homeWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  if (v4)
  {
    -[HMDHomeManager homes](self, "homes");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __32__HMDHomeManager__homeWithUUID___block_invoke;
    v8[3] = &unk_1E89BD550;
    v9 = v4;
    objc_msgSend(v5, "hmf_objectPassingTest:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)_homeWithUniqueIdentifier:(id)a3 forClientIdentifierSalt:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id v15;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager homes](self, "homes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __68__HMDHomeManager__homeWithUniqueIdentifier_forClientIdentifierSalt___block_invoke;
  v13[3] = &unk_1E89BD578;
  v14 = v7;
  v15 = v6;
  v9 = v6;
  v10 = v7;
  objc_msgSend(v8, "na_firstObjectPassingTest:", v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (id)_homeWithAssistantIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  if (v4)
  {
    -[HMDHomeManager homes](self, "homes");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __47__HMDHomeManager__homeWithAssistantIdentifier___block_invoke;
    v8[3] = &unk_1E89BD550;
    v9 = v4;
    objc_msgSend(v5, "hmf_objectPassingTest:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)_homeWithZoneID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithZoneID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)_zoneInformationWithUUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  -[HMDHomeManager cloudZones](self, "cloudZones");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_firstObjectWithUUID:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)_homeFromEventIdentifier:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  objc_msgSend(a3, "componentsSeparatedByString:", CFSTR("/"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v5);
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (id)addName:(id)a3 namespace:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;

  v6 = a4;
  v7 = a3;
  -[HMDHomeManager nameValidator](self, "nameValidator");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addName:namespace:", v7, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)removeName:(id)a3 namespace:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;

  v6 = a4;
  v7 = a3;
  -[HMDHomeManager nameValidator](self, "nameValidator");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "removeName:namespace:", v7, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

- (id)replaceName:(id)a3 withNewName:(id)a4 inNamespaces:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  -[HMDHomeManager nameValidator](self, "nameValidator");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "replaceName:withNewName:inNamespaces:", v10, v9, v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4 applicationIdentifier:(__CFString *)a5
{
  CFPreferencesSetAppValue((CFStringRef)a3, a4, a5);
  CFPreferencesAppSynchronize(a5);
}

- (void)_setHomeConfigurationKey:(id)a3 value:(void *)a4
{
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](self, "_setHomeConfigurationKey:value:applicationIdentifier:", a3, a4, CFSTR("com.apple.homed"));
}

- (BOOL)_updateHomesConfigured
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  void *v14;

  if (-[HMDHomeManager hasLoadedData](self, "hasLoadedData"))
  {
    v4 = objc_alloc(MEMORY[0x1E0D28540]);
    v5 = (void *)MEMORY[0x1E0CB3940];
    MEMORY[0x1D17B8D08](self, a2);
    v6 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("%@, %s:%ld"), v6, "/Library/Caches/com.apple.xbs/Sources/HomeKit_executables_legacy/Sources/homed/HomeManager/HMDHomeManager.m", 8389);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D28540], "currentActivity");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)objc_msgSend(v4, "initWithName:parent:", v7, v8);

    LODWORD(v6) = areHomesConfigured();
    -[HMDHomeManager homes](self, "homes");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "count");

    v11 = v6 ^ (v10 != 0);
    if (v11 == 1)
    {
      v12 = (_QWORD *)MEMORY[0x1E0C9AE40];
      if (v10)
        v12 = (_QWORD *)MEMORY[0x1E0C9AE50];
      -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CBAB50], *v12);
    }
    __HMFActivityScopeLeave();

  }
  else
  {
    LOBYTE(v11) = 0;
  }
  return v11;
}

- (BOOL)_updateIncomingInvitesPresent
{
  _BOOL4 v3;
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  v3 = -[HMDHomeManager hasLoadedData](self, "hasLoadedData");
  if (v3)
  {
    v4 = areIncomingInvitesPresent();
    -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");

    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "refreshHomeBadgeNumber");

    if (v4 == (v6 != 0))
    {
      LOBYTE(v3) = 0;
    }
    else
    {
      v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
      if (v6)
        v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
      -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CBAB58], *v8);
      LOBYTE(v3) = 1;
    }
  }
  return v3;
}

- (void)updateHomeKitInUsePreferences
{
  BOOL v3;
  _BOOL4 v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (-[HMDHomeManager hasLoadedData](self, "hasLoadedData"))
  {
    v3 = -[HMDHomeManager _updateIncomingInvitesPresent](self, "_updateIncomingInvitesPresent");
    v4 = -[HMDHomeManager _updateHomesConfigured](self, "_updateHomesConfigured");
    if (-[HMDHomeManager _updateAccessoriesConfigured](self, "_updateAccessoriesConfigured") || v3 || v4)
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      v6 = self;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138544130;
        v13 = v8;
        v14 = 2112;
        v15 = v9;
        v16 = 2112;
        v17 = v10;
        v18 = 2112;
        v19 = v11;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Posting preferences changed notification due to change in incomingInvites: %@  accessoriesConfigured: %@  homesConfigured: %@", (uint8_t *)&v12, 0x2Au);

      }
      objc_autoreleasePoolPop(v5);
      -[HMDHomeManager _postPreferencesChangedNotification](v6);
    }
  }
}

- (void)setHomePodsPresent:(BOOL)a3 inOwnedHomes:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[6];
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v4 = a4;
  v5 = a3;
  v26 = *MEMORY[0x1E0C80C00];
  if (-[HMDHomeManager speakersAreConfigured](self, "speakersAreConfigured") != a3)
    -[HMDHomeManager setSpeakersAreConfigured:](self, "setSpeakersAreConfigured:", v5);
  if (+[HMDDeviceCapabilities supportsHomeApp](HMDDeviceCapabilities, "supportsHomeApp")
    && -[HMDHomeManager speakersAreConfiguredInOwnedHomes](self, "speakersAreConfiguredInOwnedHomes") != v4)
  {
    v7 = -[HMDHomeManager setSpeakersAreConfiguredInOwnedHomes:](self, "setSpeakersAreConfiguredInOwnedHomes:", v4);
    if (v4)
      v8 = 2;
    else
      v8 = 1;
    v9 = (void *)MEMORY[0x1D17BA0A0](v7);
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      IXStringForAppRemovability();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager speakersAreConfiguredInOwnedHomes](v10, "speakersAreConfiguredInOwnedHomes");
      HMFBooleanToString();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v19 = v12;
      v20 = 2112;
      v21 = v13;
      v22 = 2112;
      v23 = v14;
      v24 = 2112;
      v25 = v15;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Setting Home app removability to %@ because HomePods present in owned homes changed from %@ -> %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v9);
    v16 = *MEMORY[0x1E0CB8D08];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __50__HMDHomeManager_setHomePodsPresent_inOwnedHomes___block_invoke;
    v17[3] = &unk_1E89C2170;
    v17[4] = v10;
    v17[5] = v8;
    objc_msgSend(MEMORY[0x1E0D3AC78], "setRemovability:forAppWithBundleID:completion:", v8, v16, v17);
  }
}

- (BOOL)_updateAccessoriesConfigured
{
  int v3;
  char v4;
  __objc2_class_ro **p_info;
  void **p_cache;
  __objc2_class *v7;
  uint64_t i;
  void *v9;
  uint64_t j;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  int v19;
  __objc2_class *v20;
  void **v21;
  __objc2_class_ro **v22;
  int v23;
  int v24;
  id v25;
  void *v26;
  id v27;
  int v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  HMDHomeManager *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  HMDHomeManager *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  HMDHomeManager *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  HMDHomeManager *v55;
  NSObject *v56;
  void *v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  HMDHomeManager *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  HMDHomeManager *v66;
  NSObject *v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  HMDHomeManager *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *v76;
  HMDHomeManager *v77;
  NSObject *v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  HMDHomeManager *v84;
  NSObject *v85;
  void *v86;
  void *v87;
  void *v88;
  HMDHomeManager *v89;
  NSObject *v90;
  void *v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  void *v95;
  HMDHomeManager *v96;
  NSObject *v97;
  void *v98;
  void *v99;
  void *v100;
  HMDHomeManager *v101;
  NSObject *v102;
  void *v103;
  void *v104;
  _QWORD *v105;
  HMDHomeManager *v107;
  id obj;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  id v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint8_t buf[4];
  void *v131;
  __int16 v132;
  void *v133;
  _BYTE v134[128];
  _BYTE v135[128];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  if (-[HMDHomeManager hasLoadedData](self, "hasLoadedData"))
  {
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v107 = self;
    -[HMDHomeManager homes](self, "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v110 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v126, v135, 16);
    if (v110)
    {
      v119 = 0;
      v3 = 0;
      v116 = 0;
      v113 = 0;
      v112 = 0;
      v4 = 0;
      v109 = *(_QWORD *)v127;
      v115 = *MEMORY[0x1E0CB7A18];
      p_info = HMDIDSActivityMonitorHomeManagerDataSource.info;
      p_cache = HMDCloudSyncLegacyFetchLogEvent.cache;
      v7 = HMDAggregationAnalysisLogEvent;
      do
      {
        for (i = 0; i != v110; ++i)
        {
          if (*(_QWORD *)v127 != v109)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * i);
          v122 = 0u;
          v123 = 0u;
          v124 = 0u;
          v125 = 0u;
          v114 = v9;
          objc_msgSend(v9, "accessories");
          v117 = (id)objc_claimAutoreleasedReturnValue();
          v121 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v122, v134, 16);
          if (v121)
          {
            v111 = i;
            v120 = *(_QWORD *)v123;
            do
            {
              for (j = 0; j != v121; ++j)
              {
                if (*(_QWORD *)v123 != v120)
                  objc_enumerationMutation(v117);
                v11 = *(id *)(*((_QWORD *)&v122 + 1) + 8 * j);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v12 = v11;
                else
                  v12 = 0;
                v13 = v12;

                if (v13)
                {
                  v14 = v11;
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                    v15 = v14;
                  else
                    v15 = 0;
                  v16 = v15;

                  if (objc_msgSend(v16, "isHomePod"))
                  {
                    switch(objc_msgSend(v16, "homePodVariant"))
                    {
                      case 0:
                      case 3:
                        BYTE4(v113) = 1;
                        break;
                      case 1:
                        LOBYTE(v113) = 1;
                        break;
                      case 2:
                        v112 = 1;
                        break;
                      default:
                        break;
                    }
                    if (objc_msgSend(v16, "requiresHomeAppForManagement"))
                      LODWORD(v116) = objc_msgSend(v114, "isOwnerUser") | v116;
                    BYTE4(v116) = 1;
                  }
                  else
                  {
                    objc_msgSend(v16, "category");
                    v17 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v17, "categoryType");
                    v18 = (void *)objc_claimAutoreleasedReturnValue();
                    v118 = v13;
                    v19 = v3;
                    v20 = v7;
                    v21 = p_cache;
                    v22 = p_info;
                    v23 = objc_msgSend(v18, "isEqual:", v115);

                    v24 = v23 | v119;
                    p_info = v22;
                    p_cache = v21;
                    v7 = v20;
                    v3 = v19;
                    v13 = v118;
                    v119 = v24;
                  }

                }
                v25 = v11;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v26 = v25;
                else
                  v26 = 0;
                v27 = v26;

                v28 = objc_msgSend(v27, "hasTelevisionService");
                v3 |= v28;

              }
              v121 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v122, v134, 16);
            }
            while (v121);
            v4 = 1;
            i = v111;
          }

        }
        v110 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v126, v135, 16);
      }
      while (v110);
    }
    else
    {
      LOBYTE(v119) = 0;
      LOBYTE(v3) = 0;
      v116 = 0;
      v113 = 0;
      v112 = 0;
      v4 = 0;
    }

    v29 = BYTE4(v116) ^ HMHomeManagerAreAnySpeakersConfigured();
    v30 = (_QWORD *)MEMORY[0x1E0C9AE50];
    v31 = (_QWORD *)MEMORY[0x1E0C9AE40];
    if ((v29 & 1) != 0)
    {
      v32 = (void *)MEMORY[0x1D17BA0A0]();
      v33 = v107;
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v35;
        v132 = 2112;
        v133 = v36;
        _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for speakers configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x1E0C9AE50];
      }

      objc_autoreleasePoolPop(v32);
      if ((v116 & 0x100000000) != 0)
        v37 = v30;
      else
        v37 = v31;
      v38 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager _setHomeConfigurationKey:value:](v33, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CBACC8], *v37));
      v39 = v33;
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v131 = v41;
        _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Posting speakers configured changed notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v38);
      -[HMDHomeManager darwinNotificationProvider](v39, "darwinNotificationProvider");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "notifyPost:", *MEMORY[0x1E0CB90F0]);

    }
    if ((v112 & 1) != areAnyHomePodMiniConfigured())
    {
      v43 = (void *)MEMORY[0x1D17BA0A0]();
      v44 = v107;
      HMFGetOSLogHandle();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v46;
        v132 = 2112;
        v133 = v47;
        _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for HomePod Mini configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x1E0C9AE50];
      }

      objc_autoreleasePoolPop(v43);
      if ((v112 & 1) != 0)
        v48 = v30;
      else
        v48 = v31;
      v49 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager _setHomeConfigurationKey:value:](v44, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CB91B0], *v48));
      v50 = v44;
      HMFGetOSLogHandle();
      v51 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v131 = v52;
        _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_DEFAULT, "%{public}@Posting HomePod Mini configured changed notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v49);
      -[HMDHomeManager darwinNotificationProvider](v50, "darwinNotificationProvider");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "notifyPost:", *MEMORY[0x1E0CB8FB8]);

      v29 = 1;
    }
    if ((BYTE4(v113) & 1) != areAnyLargeHomePodConfigured())
    {
      v54 = (void *)MEMORY[0x1D17BA0A0]();
      v55 = v107;
      HMFGetOSLogHandle();
      v56 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v57;
        v132 = 2112;
        v133 = v58;
        _os_log_impl(&dword_1CD062000, v56, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for 2nd Gen HomePods configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x1E0C9AE50];
      }

      objc_autoreleasePoolPop(v54);
      if ((v113 & 0x100000000) != 0)
        v59 = v30;
      else
        v59 = v31;
      v60 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager _setHomeConfigurationKey:value:](v55, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CB93F8], *v59));
      v61 = v55;
      HMFGetOSLogHandle();
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v131 = v63;
        _os_log_impl(&dword_1CD062000, v62, OS_LOG_TYPE_DEFAULT, "%{public}@Posting 2nd Gen HomePods configured changed notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v60);
      -[HMDHomeManager darwinNotificationProvider](v61, "darwinNotificationProvider");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v64, "notifyPost:", *MEMORY[0x1E0CB8FF8]);

      v29 = 1;
    }
    if ((v113 & 1) != areAnyHomePodsConfigured())
    {
      v65 = (void *)MEMORY[0x1D17BA0A0]();
      v66 = v107;
      HMFGetOSLogHandle();
      v67 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v68;
        v132 = 2112;
        v133 = v69;
        _os_log_impl(&dword_1CD062000, v67, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for HomePods configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x1E0C9AE50];
      }

      objc_autoreleasePoolPop(v65);
      if ((v113 & 1) != 0)
        v70 = v30;
      else
        v70 = v31;
      v71 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager _setHomeConfigurationKey:value:](v66, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CB91C0], *v70));
      v72 = v66;
      HMFGetOSLogHandle();
      v73 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v131 = v74;
        _os_log_impl(&dword_1CD062000, v73, OS_LOG_TYPE_DEFAULT, "%{public}@Posting HomePods present configured changed notification", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v71);
      -[HMDHomeManager darwinNotificationProvider](v72, "darwinNotificationProvider");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "notifyPost:", *MEMORY[0x1E0CB8FC0]);

      v29 = 1;
    }
    -[HMDHomeManager setHomePodsPresent:inOwnedHomes:](v107, "setHomePodsPresent:inOwnedHomes:", BYTE4(v116) & 1, v116 & 1);
    if ((v3 & 1) != HMHomeManagerAreAnyTelevisionAccessoriesConfigured())
    {
      v76 = (void *)MEMORY[0x1D17BA0A0]();
      v77 = v107;
      HMFGetOSLogHandle();
      v78 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v79;
        v132 = 2112;
        v133 = v80;
        _os_log_impl(&dword_1CD062000, v78, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for televisions configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x1E0C9AE50];
      }

      objc_autoreleasePoolPop(v76);
      if ((v3 & 1) != 0)
        v81 = v30;
      else
        v81 = v31;
      v82 = -[HMDHomeManager _setHomeConfigurationKey:value:](v77, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CB9E28], *v81);
      if ((v3 & 1) != 0)
      {
        v83 = (void *)MEMORY[0x1D17BA0A0](v82);
        v84 = v77;
        HMFGetOSLogHandle();
        v85 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v86 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v131 = v86;
          _os_log_impl(&dword_1CD062000, v85, OS_LOG_TYPE_DEFAULT, "%{public}@Posting Television accessories added notification", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v83);
        -[HMDHomeManager darwinNotificationProvider](v84, "darwinNotificationProvider");
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v87, "notifyPost:", *MEMORY[0x1E0CB9108]);

      }
      v29 = 1;
    }
    if ((v119 & 1) != HMHomeManagerAreAnyAppleTVAccessoriesConfigured())
    {
      v88 = (void *)MEMORY[0x1D17BA0A0]();
      v89 = v107;
      HMFGetOSLogHandle();
      v90 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v91;
        v132 = 2112;
        v133 = v92;
        _os_log_impl(&dword_1CD062000, v90, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for Apple TV accessories configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x1E0C9AE50];
      }

      objc_autoreleasePoolPop(v88);
      if ((v119 & 1) != 0)
        v93 = v30;
      else
        v93 = v31;
      v94 = -[HMDHomeManager _setHomeConfigurationKey:value:](v89, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CB82C0], *v93);
      if ((v119 & 1) != 0)
      {
        v95 = (void *)MEMORY[0x1D17BA0A0](v94);
        v96 = v89;
        HMFGetOSLogHandle();
        v97 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v131 = v98;
          _os_log_impl(&dword_1CD062000, v97, OS_LOG_TYPE_DEFAULT, "%{public}@Posting Apple TV accessories added notification", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v95);
        -[HMDHomeManager darwinNotificationProvider](v96, "darwinNotificationProvider");
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v99, "notifyPost:", *MEMORY[0x1E0CB8E48]);

      }
      v29 = 1;
    }
    if ((v4 & 1) != HMHomeManagerAreAnyAccessoriesConfigured())
    {
      v100 = (void *)MEMORY[0x1D17BA0A0]();
      v101 = v107;
      HMFGetOSLogHandle();
      v102 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        HMFBooleanToString();
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v131 = v103;
        v132 = 2112;
        v133 = v104;
        _os_log_impl(&dword_1CD062000, v102, OS_LOG_TYPE_INFO, "%{public}@Saving and sending the preference for accessories configured: %@", buf, 0x16u);

        v30 = (_QWORD *)MEMORY[0x1E0C9AE50];
      }

      objc_autoreleasePoolPop(v100);
      if ((v4 & 1) != 0)
        v105 = v30;
      else
        v105 = v31;
      -[HMDHomeManager _setHomeConfigurationKey:value:](v101, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CBAA50], *v105);
      v29 = 1;
    }
  }
  else
  {
    v29 = 0;
  }
  return v29 & 1;
}

- (void)_setUniqueDeviceIdSalt:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v7;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Saving the device identifier salt", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:](self, "_setHomeConfigurationKey:value:applicationIdentifier:", CFSTR("kUniqueDeviceIdentifierSaltkey"), v4, CFSTR("com.apple.homed.notbackedup"));

}

- (void)accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  BOOL v11;

  v6 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __74__HMDHomeManager_accessoriesAreLocallyReachableOnTransientDevice_forHome___block_invoke;
  block[3] = &unk_1E89C0898;
  v11 = a3;
  block[4] = self;
  v10 = v6;
  v8 = v6;
  dispatch_async(v7, block);

}

- (id)messageDestination
{
  id v3;
  void *v4;
  void *v5;

  v3 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMDHomeManager messageTargetUUID](self, "messageTargetUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v3, "initWithTarget:", v4);

  return v5;
}

- (void)startLocalTransport
{
  void *v3;
  void *v4;
  HMDHTTPDevice *v5;
  void *v6;
  HMDHTTPDevice *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  HMDHTTPDevice *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "device");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    v5 = [HMDHTTPDevice alloc];
    objc_msgSend(v4, "identifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[HMDHTTPDevice initWithIdentifier:](v5, "initWithIdentifier:", v6);

    v8 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543618;
      v14 = v10;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEBUG, "%{public}@Starting local transport for %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    if (-[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"))
    {
      -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "enableMessageServer");

    }
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "configureHTTPTransport:", v7);

  }
}

- (void)stopLocalTransport
{
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Stopping local transport", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "configureHTTPTransport:", 0);

}

- (id)_checkNameConflict:(id)a3 withNamespaceUUIDs:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = a4;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v17 != v10)
        objc_enumerationMutation(v7);
      v12 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v11);
      -[HMDHomeManager nameValidator](self, "nameValidator", (_QWORD)v16);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "checkForConflict:namespace:", v6, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14)
        break;
      if (v9 == ++v11)
      {
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v9)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v14 = 0;
  }

  return v14;
}

- (id)_checkActionSetNameConflict:(id)a3 withNamespaceUUIDs:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v24;
  id obj;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager nameValidator](self, "nameValidator");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v6;
  objc_msgSend(v8, "despaceName:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = v7;
  v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (!v27)
  {
    v21 = 0;
    goto LABEL_24;
  }
  v26 = *(_QWORD *)v34;
  while (2)
  {
    for (i = 0; i != v27; ++i)
    {
      if (*(_QWORD *)v34 != v26)
        objc_enumerationMutation(obj);
      -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * i));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v11)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 0;
LABEL_23:

        goto LABEL_24;
      }
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v28 = v11;
      objc_msgSend(v11, "actionSets");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v30;
LABEL_9:
        v16 = 0;
        while (1)
        {
          if (*(_QWORD *)v30 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v16);
          -[HMDHomeManager nameValidator](self, "nameValidator");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "name");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "despaceName:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if ((objc_msgSend(v9, "isEqualToString:", v20) & 1) != 0)
            break;

          if (v14 == ++v16)
          {
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
            if (v14)
              goto LABEL_9;
            goto LABEL_15;
          }
        }
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 31);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v21)
          goto LABEL_17;
        v22 = v28;
        goto LABEL_23;
      }
LABEL_15:

LABEL_17:
    }
    v21 = 0;
    v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
    if (v27)
      continue;
    break;
  }
LABEL_24:

  return v21;
}

- (BOOL)_configureHomes:(id)a3 uncommittedTransactions:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  BOOL v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v18[4];
  NSObject *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager startLocalTransport](self, "startLocalTransport");
  v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  +[HMDLocation sharedManager](HMDLocation, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __58__HMDHomeManager__configureHomes_uncommittedTransactions___block_invoke;
  v18[3] = &unk_1E89C2730;
  v10 = v8;
  v19 = v10;
  objc_msgSend(v9, "beingConfigured:completionHandler:", 1, v18);

  dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
  v11 = -[HMDHomeManager _configureHomesImpl:uncommittedTransactions:](self, "_configureHomesImpl:uncommittedTransactions:", v6, v7);
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v21 = v14;
    v22 = 2112;
    v23 = v15;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Configured homes with result: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  +[HMDLocation sharedManager](HMDLocation, "sharedManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "beingConfigured:completionHandler:", 0, 0);

  return v11;
}

- (BOOL)_configureHomesImpl:(id)a3 uncommittedTransactions:(id)a4
{
  id v6;
  HMDNameValidator *v7;
  void *v8;
  HMDNameValidator *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  int v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  void *v44;
  char v45;
  HMDHomeManager *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  int v51;
  NSObject *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  _BOOL4 v57;
  _BOOL8 v58;
  void *v59;
  __int128 v61;
  BOOL v62;
  void *context;
  HMDHomeManager *v64;
  int v65;
  void *v66;
  id v67;
  id obj;
  void *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint8_t buf[4];
  void *v75;
  __int16 v76;
  id v77;
  __int16 v78;
  void *v79;
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v67 = a4;
  -[HMDHomeManager setHomes:](self, "setHomes:", v6);
  v7 = [HMDNameValidator alloc];
  -[HMDHomeManager uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HMDNameValidator initWithUUID:](v7, "initWithUUID:", v8);
  -[HMDHomeManager setNameValidator:](self, "setNameValidator:", v9);

  -[HMDHomeManager notificationCenter](self, "notificationCenter");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "removeObserver:name:object:", self, CFSTR("HMDHomeCurrentDeviceHasReachableAccessories"), 0);

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled");
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  obj = v6;
  v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v80, 16);
  if (!v11)
  {
    LOBYTE(v14) = 0;
    goto LABEL_35;
  }
  v13 = v11;
  v14 = 0;
  v15 = *(_QWORD *)v71;
  *(_QWORD *)&v12 = 138543618;
  v61 = v12;
  v64 = self;
  do
  {
    v16 = 0;
    do
    {
      if (*(_QWORD *)v71 != v15)
        objc_enumerationMutation(obj);
      v17 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * v16);
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v69 = v18;
        v19 = v17;
        v20 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v22 = v13;
          v23 = v15;
          v24 = v14;
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "name");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "ownerName");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v75 = v25;
          v76 = 2112;
          v77 = v26;
          v78 = 2112;
          v79 = v27;
          _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Found home %@ with administrator %@", buf, 0x20u);

          v14 = v24;
          v15 = v23;
          v13 = v22;
          self = v64;
        }

        objc_autoreleasePoolPop(v20);
        -[HMDHomeManager nameValidator](self, "nameValidator");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "uuid");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = (id)objc_msgSend(v28, "addNamespace:", v29);

        v14 |= objc_msgSend(v19, "configureWithHomeManager:accessoriesPresent:uncommittedTransactions:source:", self, v66, v67, 0);
        objc_msgSend(v19, "name");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager uuid](self, "uuid");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = -[HMDHomeManager addName:namespace:](self, "addName:namespace:", v31, v32);

        objc_msgSend(v19, "uuid");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _updateHome:configurationVersion:](self, "_updateHome:configurationVersion:", v34, objc_msgSend(v19, "configurationVersion"));

        if (objc_msgSend(v19, "isOwnerUser")
          && (+[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities"),
              v35 = (void *)objc_claimAutoreleasedReturnValue(),
              v36 = objc_msgSend(v35, "isResidentCapable"),
              v35,
              v36))
        {
          v65 = v14;
          -[HMDHomeManager notificationCenter](self, "notificationCenter");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "addObserver:selector:name:object:", self, sel_handleHomeCurrentDeviceResidentEligibleNotification_, CFSTR("HMDHomeCurrentDeviceHasReachableAccessories"), v19);

          -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "device");
          v39 = objc_claimAutoreleasedReturnValue();

          -[HMDHomeManager capabilitiesController](self, "capabilitiesController");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "currentResidentCapabilities");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          if (v41 && -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"))
          {
            v42 = objc_msgSend(v19, "hasReachableAccessories");

            if (v42)
            {
              objc_msgSend(v19, "residentCapableDevices");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              v44 = (void *)v39;
              v45 = objc_msgSend(v43, "containsObject:", v39);

              v14 = v65;
              if ((v45 & 1) == 0)
              {
                context = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v19, "addResidentCapableDevice:", v44));
                HMFGetOSLogHandle();
                v46 = (HMDHomeManager *)objc_claimAutoreleasedReturnValue();
                v65 = 1;
                if (os_log_type_enabled(&v46->super.super, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v47 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v44, "name");
                  v48 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v19, "name");
                  v49 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v75 = v47;
                  v76 = 2112;
                  v77 = v48;
                  v78 = 2112;
                  v79 = v49;
                  v65 = 1;
                  _os_log_impl(&dword_1CD062000, &v46->super.super, OS_LOG_TYPE_INFO, "%{public}@Configuration changed: add resident capable device %@ to %@", buf, 0x20u);

                }
                goto LABEL_25;
              }
              goto LABEL_26;
            }
          }
          else
          {

          }
          v14 = v65;
          if (-[HMDHomeManager isResidentEnabled](self, "isResidentEnabled", v61))
          {
            v44 = (void *)v39;
            goto LABEL_26;
          }
          objc_msgSend(v19, "residentCapableDevices");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = (void *)v39;
          v51 = objc_msgSend(v50, "containsObject:", v39);

          if (v51)
          {
            context = (void *)MEMORY[0x1D17BA0A0]();
            v46 = self;
            HMFGetOSLogHandle();
            v52 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v61;
              v75 = v53;
              v76 = 2112;
              v77 = v19;
              _os_log_impl(&dword_1CD062000, v52, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in home, %@, enabling ourselves as a resident device", buf, 0x16u);

            }
            v62 = 1;
LABEL_25:
            v18 = v69;

            objc_autoreleasePoolPop(context);
            v14 = v65;
          }
          else
          {
LABEL_26:
            v18 = v69;
          }

        }
        else
        {
          v18 = v69;
        }

      }
      objc_autoreleasePoolPop(v18);
      ++v16;
    }
    while (v13 != v16);
    v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v80, 16);
    v13 = v54;
  }
  while (v54);
LABEL_35:

  -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager homes](self, "homes");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v55, "updateTotalHomes:", objc_msgSend(v56, "count"));

  v57 = -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled");
  v58 = v62;
  if (v58 != v57)
    -[HMDHomeManager _updateResidentEnabledOnThisDevice:forceNotify:message:](self, "_updateResidentEnabledOnThisDevice:forceNotify:message:", v58, 0, 0);
  -[HMDHomeManager idsServerBag](self, "idsServerBag", v61);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "configure");

  return v14 & 1;
}

- (void)initalizeMediaGroupParticipantDataLocalStorage
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  HMDMediaGroupsAggregatorBackupReceiver *v8;
  HMDMediaGroupParticipantLocalDataStorage *v9;
  HMDMediaGroupParticipantLocalDataStorage *mediaGroupParticipantDataLocalStorage;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager uuid](self, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager userDefaults](self, "userDefaults");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager eventForwarder](self, "eventForwarder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager eventStoreReadHandle](self, "eventStoreReadHandle");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v3 && v4 && v5 && v6)
  {
    v8 = objc_alloc_init(HMDMediaGroupsAggregatorBackupReceiver);
    v9 = -[HMDMediaGroupParticipantLocalDataStorage initWithIdentifier:backUpReciever:userDefaults:eventForwarder:eventStoreReadHandle:]([HMDMediaGroupParticipantLocalDataStorage alloc], "initWithIdentifier:backUpReciever:userDefaults:eventForwarder:eventStoreReadHandle:", v3, v8, v4, v5, v7);
    -[HMDMediaGroupsAggregatorBackupReceiver setDelegate:](v8, "setDelegate:", v9);
    -[HMDMediaGroupParticipantLocalDataStorage setDataSource:](v9, "setDataSource:", self);
    -[HMDMediaGroupParticipantLocalDataStorage setDelegate:](v9, "setDelegate:", self);
    mediaGroupParticipantDataLocalStorage = self->_mediaGroupParticipantDataLocalStorage;
    self->_mediaGroupParticipantDataLocalStorage = v9;

  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138544386;
      v16 = v14;
      v17 = 2112;
      v18 = v3;
      v19 = 2112;
      v20 = v4;
      v21 = 2112;
      v22 = v5;
      v23 = 2112;
      v24 = v7;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure media group participant data local storage with dependencies homeManagerUUID: %@ userDefaults: %@ eventForwarder: %@ eventStoreReadHandle: %@", (uint8_t *)&v15, 0x34u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)migrateLocalMediaGroupParticipantData
{
  void *v3;
  void *v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager _appleMediaAccessoryOfCurrentDevice](self, "_appleMediaAccessoryOfCurrentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[HMDHomeManager mediaSystemForAppleMediaAccessory:](self, "mediaSystemForAppleMediaAccessory:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = self;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v8;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Migrating local media group participant data for current accessory: %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    -[HMDHomeManager migrateLocalHomeTheaterDataForCurrentAccessory:currentMediaSystem:](v6, "migrateLocalHomeTheaterDataForCurrentAccessory:currentMediaSystem:", v3, v4);
    if (v4)
      -[HMDHomeManager migrateLocalStereoPairDataForCurrentMediaSystem:](v6, "migrateLocalStereoPairDataForCurrentMediaSystem:", v4);
    -[HMDHomeManager saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:](v6, "saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:", v3);

  }
}

- (void)migrateLocalHomeTheaterDataForCurrentAccessory:(id)a3 currentMediaSystem:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "audioDestinationControllerData");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v12;
      v25 = 2112;
      v26 = v8;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Migrating current destination controller data: %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    -[HMDHomeManager mediaGroupParticipantDataLocalStorage](v10, "mediaGroupParticipantDataLocalStorage");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "updateDestinationControllerData:", v8);

  }
  objc_msgSend(v6, "audioDestination");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v14, "mutableCopy");

  if (v15)
  {
    objc_msgSend(v7, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      objc_msgSend(v15, "setAudioGroupIdentifier:", v16);
    }
    else
    {
      objc_msgSend(v15, "audioGroupIdentifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setAudioGroupIdentifier:", v17);

    }
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = self;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v21;
      v25 = 2112;
      v26 = v15;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Migrating current destination: %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    -[HMDHomeManager mediaGroupParticipantDataLocalStorage](v19, "mediaGroupParticipantDataLocalStorage");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "updateMediaDestination:", v15);

  }
}

- (void)migrateLocalStereoPairDataForCurrentMediaSystem:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v37 = v8;
    v38 = 2112;
    v39 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Migrating current media system: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "configuredName");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v9)
  {
    v11 = v9;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CBA680], "roomNameSentinel");
    v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  v12 = v11;
  objc_msgSend(v4, "audioDestination");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "audioGroupIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager destinationIdentifierForMediaSystem:role:](v6, "destinationIdentifierForMediaSystem:role:", v4, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager destinationIdentifierForMediaSystem:role:](v6, "destinationIdentifierForMediaSystem:role:", v4, 2);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "home");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "uuid");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 && v16 && v18)
  {
    v33 = v14;
    v19 = v12;
    v20 = objc_alloc(MEMORY[0x1E0CBA680]);
    objc_msgSend(v4, "uuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)objc_msgSend(v20, "initWithIdentifier:parentIdentifier:name:defaultName:associatedGroupIdentifier:leftDestinationIdentifier:rightDestinationIdentifier:", v21, v18, v12, v10 == 0, v33, v15, v16);

    -[HMDHomeManager mediaGroupParticipantDataLocalStorage](v6, "mediaGroupParticipantDataLocalStorage");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuid");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "updateAudioGroupIdentifier:", v24);

    -[HMDHomeManager mediaGroupParticipantDataLocalStorage](v6, "mediaGroupParticipantDataLocalStorage");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "encodeToProtoBufferData");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = v26;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v35, 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "updateBackupGroupData:", v27);

    v12 = v19;
    v14 = v33;

  }
  else
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = v6;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v34 = v14;
      v31 = v12;
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v37 = v32;
      v38 = 2112;
      v39 = v15;
      v40 = 2112;
      v41 = v16;
      v42 = 2112;
      v43 = v18;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to migrate current media system due to missing group data dependencies leftDestinationIdentifier: %@ rightDestinationIdentifier: %@ homeIdentifier: %@", buf, 0x2Au);

      v12 = v31;
      v14 = v34;
    }

    objc_autoreleasePoolPop(v28);
  }

}

- (void)saveAssociatedGroupDataForPostMigrationStagingWithCurrentAccessory:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  HMDMediaGroupsStageManager *v9;
  void *v10;
  HMDMediaGroupsStageManager *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "home");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uuid");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager userDefaults](self, "userDefaults");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (v6 && v7)
  {
    v9 = [HMDMediaGroupsStageManager alloc];
    -[HMDHomeManager userDefaults](self, "userDefaults");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[HMDMediaGroupsStageManager initWithIdentifier:userDefaults:](v9, "initWithIdentifier:userDefaults:", v6, v10);

    -[HMDMediaGroupsStageManager saveAssociatedGroupDataForLegacyCurrentAccessory:](v11, "saveAssociatedGroupDataForLegacyCurrentAccessory:", v4);
  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543874;
      v17 = v15;
      v18 = 2112;
      v19 = v6;
      v20 = 2112;
      v21 = v8;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed to save associated group data due to missing homeUUID: %@ userDefaults: %@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v12);
  }

}

- (id)destinationIdentifierForMediaSystem:(id)a3 role:(unint64_t)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  __int16 v41;
  id v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  objc_msgSend(v6, "components", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v34;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v34 != v10)
        objc_enumerationMutation(v7);
      v12 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v11);
      objc_msgSend(v12, "role");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "type");

      if (v14 == a4)
        break;
      if (v9 == ++v11)
      {
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
        if (v9)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v15 = v12;

    if (!v15)
      goto LABEL_16;
    objc_msgSend(v15, "accessory");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v17 = v16;
    else
      v17 = 0;
    v18 = v17;

    objc_msgSend(v18, "audioDestination");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "uniqueIdentifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      v21 = v20;
    }
    else
    {
      v28 = (void *)MEMORY[0x1D17BA0A0]();
      v29 = self;
      HMFGetOSLogHandle();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v38 = v31;
        v39 = 2112;
        v40 = v15;
        v41 = 2112;
        v42 = v18;
        _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to get destination identifier on component: %@ accessory: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v28);
    }

  }
  else
  {
LABEL_9:

LABEL_16:
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = self;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      HMMediaSystemRoleTypeAsString();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "components");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v38 = v25;
      v39 = 2112;
      v40 = v26;
      v41 = 2112;
      v42 = v27;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to get destination identifier due to no component with role: %@ components: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v22);
    v20 = 0;
  }

  return v20;
}

- (id)mediaSystemForAppleMediaAccessory:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "mediaSystemForAppleMediaAccessory:", v4);
        v10 = objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          v11 = (void *)v10;
          goto LABEL_11;
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_11:

  return v11;
}

- (void)_checkForAccountChanged
{
  void *v3;
  void *v4;
  int v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager activeAccountIdentifier](self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v5 = objc_msgSend(v4, "getCurrentiCloudIdentifier:controllerPairingIdentifier:error:", &v19, &v18, &v17);
  v6 = v19;
  v7 = v18;
  v8 = v17;
  if (v5 && objc_msgSend(v6, "length") && objc_msgSend(v7, "length") && objc_msgSend(v3, "length"))
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v21 = v11;
      v22 = 2112;
      v23 = v3;
      v24 = 2112;
      v25 = v6;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Checking for account changed on bootup, current account identifier %@, last known account identifier %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v9);
    if ((objc_msgSend(v6, "isEqualToIgnoringCase:", v3) & 1) == 0
      && (objc_msgSend(v6, "isEqualToString:", CFSTR("__HomeKit_NoAccount_Identifier__")) & 1) == 0)
    {
      v12 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v21 = v14;
        v22 = 2112;
        v23 = v7;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Current account is different since the last time known, removing controller key for identifier %@ and deleting local home data", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v12);
      v16 = v8;
      objc_msgSend(v4, "removeControllerKeyPairForIdentifier:leaveTombstone:error:", v7, 0, &v16);
      v15 = v16;

      -[HMDHomeManager _eraseLocalHomeConfiguration](self, "_eraseLocalHomeConfiguration");
      v8 = v15;
    }
  }

}

- (void)_postMergeWatchPush
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  void *v48;
  id obj;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  uint8_t v68[128];
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  void *v74;
  _BYTE v75[128];
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (isiOSDevice())
  {
    v3 = (void *)MEMORY[0x1E0C99DE8];
    -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "arrayWithCapacity:", objc_msgSend(v4, "count"));
    v48 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = (void *)MEMORY[0x1E0C99DE8];
    -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v6, "count"));
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = (void *)MEMORY[0x1E0C99E20];
    -[HMDHomeManager homes](self, "homes");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setWithCapacity:", objc_msgSend(v8, "count"));
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    -[HMDHomeManager homes](self, "homes");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v63, v76, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v64;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v64 != v12)
            objc_enumerationMutation(v9);
          objc_msgSend(*(id *)(*((_QWORD *)&v63 + 1) + 8 * v13), "uuid");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "addObject:", v14);

          ++v13;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v63, v76, 16);
      }
      while (v11);
    }

    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v75, 16);
    if (v15)
    {
      v17 = v15;
      v18 = *(_QWORD *)v60;
      *(_QWORD *)&v16 = 138543874;
      v46 = v16;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v60 != v18)
            objc_enumerationMutation(obj);
          v20 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v19);
          -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers", v46);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "objectForKeyedSubscript:", v20);
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          v23 = (void *)MEMORY[0x1E0C99E20];
          objc_msgSend(v22, "homeConfig");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "allKeys");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "setWithArray:", v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v26, "minusSet:", v50);
          if (objc_msgSend(v26, "count"))
          {
            v27 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v46;
              v70 = v29;
              v71 = 2112;
              v72 = v20;
              v73 = 2112;
              v74 = v26;
              _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Complete sync to watch %@ is required because the following homes have been removed: %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v27);
            -[HMDHomeManager watchManager](self, "watchManager");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "connectedWatchFromDeviceID:", v20);
            v31 = (void *)objc_claimAutoreleasedReturnValue();

            if (v31)
              objc_msgSend(v48, "addObject:", v31);

          }
          else
          {
            objc_msgSend(v47, "addObject:", v20);
          }

          ++v19;
        }
        while (v17 != v19);
        v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v75, 16);
      }
      while (v17);
    }

    if (objc_msgSend(v48, "count"))
    {
      -[HMDHomeManager watchPushDelayTimer](self, "watchPushDelayTimer");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "suspend");

      v33 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v70 = v35;
        _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Removing scheduled watch push delay and pushing immediately", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v33);
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v36 = v47;
      v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v55, v68, 16);
      if (v37)
      {
        v38 = v37;
        v39 = *(_QWORD *)v56;
        do
        {
          v40 = 0;
          do
          {
            if (*(_QWORD *)v56 != v39)
              objc_enumerationMutation(v36);
            -[HMDHomeManager _sendHomeDataToWatch:completionHandler:](self, "_sendHomeDataToWatch:completionHandler:", *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * v40++), 0);
          }
          while (v38 != v40);
          v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v55, v68, 16);
        }
        while (v38);
      }

      -[HMDHomeManager _checkAndAddWatchDevices:resend:requestFromWatch:](self, "_checkAndAddWatchDevices:resend:requestFromWatch:", v48, 1, 0);
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      -[HMDHomeManager homes](self, "homes");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v51, v67, 16);
      if (v42)
      {
        v43 = v42;
        v44 = *(_QWORD *)v52;
        do
        {
          v45 = 0;
          do
          {
            if (*(_QWORD *)v52 != v44)
              objc_enumerationMutation(v41);
            objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * v45++), "setWatchSkipVersionCheck:", 0);
          }
          while (v43 != v45);
          v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v51, v67, 16);
        }
        while (v43);
      }

    }
    else
    {
      -[HMDHomeManager _scheduleSendHomeDataToAllWatches](self, "_scheduleSendHomeDataToAllWatches");
    }

  }
}

- (void)_fetchDataFromCloud
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  id location;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!disableCloudDataSync)
  {
    +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v3, "supportsCloudDataSync") & 1) != 0)
    {
      objc_initWeak(&location, self);
      -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = MEMORY[0x1E0C809B0];
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke;
      v20[3] = &unk_1E89BE3F8;
      objc_copyWeak(&v21, &location);
      objc_msgSend(v4, "setCloudDataDeletedNotificationBlock:", v20);

      -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v18[0] = v5;
      v18[1] = 3221225472;
      v18[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke_706;
      v18[3] = &unk_1E89BE3F8;
      objc_copyWeak(&v19, &location);
      objc_msgSend(v6, "setCloudMetadataDeletedNotificationBlock:", v18);

      -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v16[0] = v5;
      v16[1] = 3221225472;
      v16[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke_707;
      v16[3] = &unk_1E89BE3F8;
      objc_copyWeak(&v17, &location);
      objc_msgSend(v7, "setControllerKeyAvailableNotificationBlock:", v16);

      -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = v5;
      v14[1] = 3221225472;
      v14[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke_708;
      v14[3] = &unk_1E89BE3F8;
      objc_copyWeak(&v15, &location);
      objc_msgSend(v8, "setDataDecryptionFailedHandler:", v14);

      -[HMDHomeManager activeAccountIdentifier](self);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v11 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v24 = v12;
        v25 = 2112;
        v26 = v9;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Current user account identifier is %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      -[HMDHomeManager _updateCloudDataSyncWithAccountState:](self, "_updateCloudDataSyncWithAccountState:", v9 != 0);
      -[HMDHomeManager _postiCloudSigninState:](self, "_postiCloudSigninState:", v9 != 0);

      objc_destroyWeak(&v15);
      objc_destroyWeak(&v17);
      objc_destroyWeak(&v19);
      objc_destroyWeak(&v21);
      objc_destroyWeak(&location);
    }
    else
    {
      -[HMDHomeManager activeAccountIdentifier](self);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _postiCloudSigninState:](self, "_postiCloudSigninState:", v13 != 0);

    }
  }
}

- (void)verifyHomeDataFromCloud:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __42__HMDHomeManager_verifyHomeDataFromCloud___block_invoke;
  block[3] = &unk_1E89BD190;
  objc_copyWeak(&v9, &location);
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, block);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

- (void)fetchHomeDataFromCloudWithCloudConflict:(BOOL)a3 withDelay:(double)a4
{
  NSObject *v7;
  _QWORD v8[4];
  id v9[2];
  BOOL v10;
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __68__HMDHomeManager_fetchHomeDataFromCloudWithCloudConflict_withDelay___block_invoke;
  v8[3] = &unk_1E89BCE98;
  objc_copyWeak(v9, &location);
  v10 = a3;
  v9[1] = *(id *)&a4;
  dispatch_async(v7, v8);

  objc_destroyWeak(v9);
  objc_destroyWeak(&location);
}

- (void)_fetchHomeDataFromCloudWithCloudConflict:(BOOL)a3 forceFetch:(BOOL)a4 withDelay:(double)a5 accountCompletion:(id)a6
{
  _BOOL8 v8;
  id v10;
  void *v11;
  int v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  id v17;
  void *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, void *, void *, int);
  void *v35;
  id v36;
  id v37;
  BOOL v38;
  id location;
  uint8_t buf[4];
  void *v41;
  uint64_t v42;

  v8 = a3;
  v42 = *MEMORY[0x1E0C80C00];
  v10 = a6;
  if (v8
    && (-[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter"),
        v11 = (void *)objc_claimAutoreleasedReturnValue(),
        v12 = objc_msgSend(v11, "decryptionFailed"),
        v11,
        v12))
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Dropping request to fetch home config due to conflict since decryption failed", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
  }
  else
  {
    objc_initWeak(&location, self);
    v32 = MEMORY[0x1E0C809B0];
    v33 = 3221225472;
    v34 = __98__HMDHomeManager__fetchHomeDataFromCloudWithCloudConflict_forceFetch_withDelay_accountCompletion___block_invoke;
    v35 = &unk_1E89BD5A0;
    v17 = v10;
    v36 = v17;
    objc_copyWeak(&v37, &location);
    v38 = a4;
    v18 = _Block_copy(&v32);
    v19 = v17 == 0;
    v23 = (void *)MEMORY[0x1D17BA0A0](v18, v20, v21, v22);
    v24 = self;
    if (v19)
    {
      HMFGetOSLogHandle();
      v28 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v41 = v29;
        _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Scheduling fetch changes", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      +[HMDSyncOperation cloudFetchSyncOperationWithCloudConflict:block:](HMDSyncOperation, "cloudFetchSyncOperationWithCloudConflict:block:", v8, v18, v32, v33, v34, v35, v36);
      v27 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      HMFGetOSLogHandle();
      v25 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v41 = v26;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Scheduling account verification fetch", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      +[HMDSyncOperation cloudVerifyAccountSyncOperationWithBlock:](HMDSyncOperation, "cloudVerifyAccountSyncOperationWithBlock:", v18, v32, v33, v34, v35, v36);
      v27 = objc_claimAutoreleasedReturnValue();
    }
    v30 = (void *)v27;
    -[HMDHomeManager syncManager](v24, "syncManager");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "addOperation:withDelay:", v30, a5);

    objc_destroyWeak(&v37);
    objc_destroyWeak(&location);
  }

}

- (void)_runFetchHomeDataFromCloudWithCloudConflict:(BOOL)a3 forceFetch:(BOOL)a4 accountCompletion:(id)a5 syncCompletion:(id)a6
{
  _BOOL8 v7;
  id v10;
  id v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDCloudTransaction *v20;
  void *v21;
  void *v22;
  id v23;
  HMDCloudTransaction *v24;
  id v25;
  id v26;
  _QWORD v27[5];
  HMDCloudTransaction *v28;
  id v29;
  id v30;
  id v31;
  __int128 *p_buf;
  id v33;
  BOOL v34;
  BOOL v35;
  id location;
  __int128 buf;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v7 = a4;
  v40 = *MEMORY[0x1E0C80C00];
  v10 = a5;
  v11 = a6;
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v16;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Fetching changes from the cloud", (uint8_t *)&buf, 0xCu);

  }
  objc_autoreleasePoolPop(v13);
  -[HMDHomeManager cloudDataSyncManager](v14, "cloudDataSyncManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "cloudCache");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v18, "legacyZone");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HMDCloudTransaction initWithType:temporaryCache:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:", 1, 0);
  -[HMDCloudTransaction updateCloudZone:](v20, "updateCloudZone:", v19);
  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.fetch-from-legacyzone"));
  -[HMDCloudTransaction setOsTransaction:](v20, "setOsTransaction:", v21);

  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v38 = 0x2020000000;
  v39 = 0;
  objc_initWeak(&location, v14);
  -[HMDHomeManager cloudDataSyncManager](v14, "cloudDataSyncManager");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __106__HMDHomeManager__runFetchHomeDataFromCloudWithCloudConflict_forceFetch_accountCompletion_syncCompletion___block_invoke;
  v27[3] = &unk_1E89BD5F0;
  v27[4] = v14;
  objc_copyWeak(&v33, &location);
  v23 = v10;
  v30 = v23;
  v34 = a3;
  v35 = v7;
  v24 = v20;
  v28 = v24;
  v25 = v11;
  v31 = v25;
  v26 = v19;
  v29 = v26;
  p_buf = &buf;
  objc_msgSend(v22, "fetchLegacyTransaction:forceFetch:accountCompletionHandler:dataCompletionHandler:", v24, v7, v23, v27);

  objc_destroyWeak(&v33);
  objc_destroyWeak(&location);
  _Block_object_dispose(&buf, 8);

  objc_autoreleasePoolPop(v12);
}

- (void)_requestHomeDataSync
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
        if ((objc_msgSend(v7, "isOwnerUser") & 1) == 0)
        {
          objc_msgSend(v7, "sharedHomeUpdateHandler");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "requestHomeDataSync");

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

- (void)forceCloudFetch
{
  NSObject *v3;
  _QWORD block[5];
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __33__HMDHomeManager_forceCloudFetch__block_invoke;
  block[3] = &unk_1E89BE218;
  objc_copyWeak(&v5, &location);
  block[4] = self;
  dispatch_async(v3, block);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (void)_updateCloudDataSyncWithAccountState:(BOOL)a3
{
  void *v5;
  _QWORD v6[4];
  id v7;
  BOOL v8;
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager cloudAccount](self, "cloudAccount");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __55__HMDHomeManager__updateCloudDataSyncWithAccountState___block_invoke;
  v6[3] = &unk_1E89BD618;
  objc_copyWeak(&v7, &location);
  v8 = a3;
  objc_msgSend(v5, "addAccountOperation:", v6);

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

- (void)_updateCloudDataSyncWithAccountState:(BOOL)a3 completion:(id)a4
{
  _BOOL8 v4;
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  void (**v17)(_QWORD);
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v4 = a3;
  v21 = *MEMORY[0x1E0C80C00];
  v6 = (void (**)(_QWORD))a4;
  -[HMDHomeManager keyTransferAgent](self, "keyTransferAgent");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  objc_msgSend(v9, "progressState");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Not updating Cloud Data Sync. Key Transfer in Progress.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    if (v6)
      v6[2](v6);
  }
  else
  {
    -[HMDHomeManager setAccountActive:](self, "setAccountActive:", v4);
    objc_initWeak((id *)buf, self);
    -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __66__HMDHomeManager__updateCloudDataSyncWithAccountState_completion___block_invoke;
    v16[3] = &unk_1E89BD640;
    objc_copyWeak(&v18, (id *)buf);
    v17 = v6;
    objc_msgSend(v15, "updateAccountStatusChanged:completionHandler:", v4, v16);

    objc_destroyWeak(&v18);
    objc_destroyWeak((id *)buf);
  }

}

- (id)identifiersOfAccessoriesForHome:(id)a3
{
  void *v4;
  void *v5;

  objc_msgSend(a3, "accessories");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager identifiersOfAccessories:](self, "identifiersOfAccessories:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (id)identifiersOfAccessories:(id)a3
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v17;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(v5);
        v10 = *(id *)(*((_QWORD *)&v16 + 1) + 8 * v9);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v12)
        {
          objc_msgSend(v12, "uniqueIdentifier", (_QWORD)v16);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v13);

        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v7);
  }

  v14 = (void *)objc_msgSend(v4, "copy");
  return v14;
}

- (id)_filterAccessories:(id)a3 withIdentifiers:(id)a4
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  int v16;
  void *v17;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v5, "count"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v21;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v21 != v10)
          objc_enumerationMutation(v7);
        v12 = *(id *)(*((_QWORD *)&v20 + 1) + 8 * v11);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v13 = v12;
        else
          v13 = 0;
        v14 = v13;

        if (v14)
        {
          objc_msgSend(v14, "uniqueIdentifier");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v6, "containsObject:", v15);

          if (v16)
            objc_msgSend(v19, "addObject:", v12);
        }

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v9);
  }

  v17 = (void *)objc_msgSend(v19, "copy");
  return v17;
}

- (id)_filterAccessories:(id)a3 inHome:(id)a4
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v12, "home");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v14, "isEqual:", v15);

        if (v16)
          objc_msgSend(v18, "addObject:", v12);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v9);
  }

  return v18;
}

- (void)_suspendXPCWithCompletionHanlder:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id location;

  v4 = a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("AE859292-8964-4709-9224-FD5860339189"));
  objc_initWeak(&location, self);
  v6 = (void *)MEMORY[0x1E0D285D0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __51__HMDHomeManager__suspendXPCWithCompletionHanlder___block_invoke;
  v10[3] = &unk_1E89C1B70;
  objc_copyWeak(&v12, &location);
  v7 = v4;
  v11 = v7;
  objc_msgSend(v6, "internalMessageWithName:messagePayload:responseHandler:", CFSTR("kSuspendXPCConnectionRequestKey"), 0, v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "dispatchMessage:target:", v8, v5);

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);

}

- (void)_resumeXPCWithCompletionHanlder:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id location;

  v4 = a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("AE859292-8964-4709-9224-FD5860339189"));
  objc_initWeak(&location, self);
  v6 = (void *)MEMORY[0x1E0D285D0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __50__HMDHomeManager__resumeXPCWithCompletionHanlder___block_invoke;
  v10[3] = &unk_1E89C1B70;
  objc_copyWeak(&v12, &location);
  v7 = v4;
  v11 = v7;
  objc_msgSend(v6, "internalMessageWithName:messagePayload:responseHandler:", CFSTR("kResumeXPCConnectionRequestKey"), 0, v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "dispatchMessage:target:", v8, v5);

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);

}

- (id)_deviceForIdentifier:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v4);
  if (v5)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "account");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "devices");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (id)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v17;
      while (2)
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v17 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v12, "identifier");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v5, "isEqual:", v13);

          if (v14)
          {
            v9 = v12;
            goto LABEL_12;
          }
        }
        v9 = (id)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v9)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (void)_auditKeychainEntries
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  void *v40;
  void *v41;
  HMDHomeManager *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  HMDHomeManager *v47;
  NSObject *v48;
  void *v49;
  id obj;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  HMDHomeManager *v57;
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint8_t v71[128];
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  id v75;
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = self;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  -[HMDHomeManager homes](self, "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v77, 16);
  if (v52)
  {
    v51 = *(_QWORD *)v68;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v68 != v51)
          objc_enumerationMutation(obj);
        v53 = v3;
        v4 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * v3);
        v63 = 0u;
        v64 = 0u;
        v65 = 0u;
        v66 = 0u;
        objc_msgSend(v4, "accessories");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v63, v76, 16);
        if (v5)
        {
          v6 = v5;
          v7 = *(_QWORD *)v64;
          do
          {
            for (i = 0; i != v6; ++i)
            {
              if (*(_QWORD *)v64 != v7)
                objc_enumerationMutation(v58);
              v9 = *(id *)(*((_QWORD *)&v63 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v10 = v9;
              else
                v10 = 0;
              v11 = v10;

              if (!v11)
              {
                v15 = v9;
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                  v16 = v15;
                else
                  v16 = 0;
                v12 = v16;

                if (v12)
                {
                  objc_msgSend(v12, "identifier");
                  v17 = (void *)objc_claimAutoreleasedReturnValue();

                  if (!v17)
                  {
                    v18 = (void *)MEMORY[0x1D17BA0A0]();
                    v19 = v57;
                    HMFGetOSLogHandle();
                    v20 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                    {
                      HMFGetLogIdentifier();
                      v21 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543618;
                      v73 = v21;
                      v74 = 2112;
                      v75 = v12;
                      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to add accessory %@ to the audit accessory list since identifier is nil", buf, 0x16u);

                    }
                    objc_autoreleasePoolPop(v18);
                  }
                }
                goto LABEL_27;
              }
              objc_msgSend(v11, "pairingUsername");
              v12 = (id)objc_claimAutoreleasedReturnValue();
              if (v12 || (objc_msgSend(v11, "identifier"), (v12 = (id)objc_claimAutoreleasedReturnValue()) != 0))
              {
                objc_msgSend(v11, "publicKey");
                v13 = (void *)objc_claimAutoreleasedReturnValue();

                if (v13)
                {
                  objc_msgSend(v11, "publicKey");
                  v14 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v56, "setObject:forKey:", v14, v12);

LABEL_27:
                  goto LABEL_34;
                }
                v22 = (void *)MEMORY[0x1D17BA0A0]();
                v23 = v57;
                HMFGetOSLogHandle();
                v24 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v11, "name");
                  v26 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v73 = v25;
                  v74 = 2112;
                  v75 = v26;
                  _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@A HAP accessory '%@' with a public key - removing from list of of keychain entries", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v22);

              }
              else
              {
                v27 = (void *)MEMORY[0x1D17BA0A0]();
                v28 = v57;
                HMFGetOSLogHandle();
                v29 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v11, "name");
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v73 = v30;
                  v74 = 2112;
                  v75 = v31;
                  _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_ERROR, "%{public}@Failed to add accessory %@ to the audit accessory list for keychain cleanup", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v27);
              }
LABEL_34:

            }
            v6 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v63, v76, 16);
          }
          while (v6);
        }

        v3 = v53 + 1;
      }
      while (v53 + 1 != v52);
      v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v77, 16);
    }
    while (v52);
  }

  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "auditKeysOfManagedAccessories:", v56);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v33;
  if (v33)
  {
    v54 = v33;
    v55 = v32;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v35 = v33;
    v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
    if (v36)
    {
      v37 = v36;
      v38 = *(_QWORD *)v60;
      do
      {
        for (j = 0; j != v37; ++j)
        {
          if (*(_QWORD *)v60 != v38)
            objc_enumerationMutation(v35);
          v40 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * j);
          v41 = (void *)MEMORY[0x1D17BA0A0]();
          v42 = v57;
          HMFGetOSLogHandle();
          v43 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "description");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v73 = v44;
            v74 = 2112;
            v75 = v45;
            _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_DEFAULT, "%{public}@Removed spurious keychain entry: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v41);
        }
        v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
      }
      while (v37);
    }

    v34 = v54;
    v32 = v55;
  }
  else
  {
    v46 = (void *)MEMORY[0x1D17BA0A0]();
    v47 = v57;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v73 = v49;
      _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Audit keychain entries failed", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v46);
  }

}

- (BOOL)_associateAccessories:(id)a3 withHomes:(id)a4
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t v41[128];
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v32 = a4;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    v11 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v38 != v11)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
        objc_msgSend(v13, "home");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "uuid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          objc_msgSend(v6, "hmf_mutableArrayForKey:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v16)
          {
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "setObject:forKey:", v16, v15);
          }
          objc_msgSend(v16, "addObject:", v13);

        }
        else
        {
          v17 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v43 = v19;
            v44 = 2112;
            v45 = v13;
            _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEFAULT, "%{public}@###### Unassociated accessory %@ - dropping", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v17);
          v10 = 1;
        }

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v37, v46, 16);
    }
    while (v9);
  }
  else
  {
    v10 = 0;
  }

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v20 = v32;
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v34;
    do
    {
      for (j = 0; j != v22; ++j)
      {
        if (*(_QWORD *)v34 != v23)
          objc_enumerationMutation(v20);
        v25 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * j);
        objc_msgSend(v25, "accessories");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v26, "count");

        if (!v27)
        {
          objc_msgSend(v25, "uuid");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "hmf_mutableArrayForKey:", v28);
          v29 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v25, "setAccessories:", v29);
          objc_msgSend(v25, "uuid");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "removeObjectForKey:", v30);

        }
      }
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    }
    while (v22);
  }

  return v10 & 1;
}

- (BOOL)_setPrimaryHome:(id)a3 idsDataSync:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v4 = a4;
  v31 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v6;
  -[HMDHomeManager homes](self, "homes");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "count");

  if (!v10)
  {

    v11 = 0;
    if ((HMFEqualObjects() & 1) == 0)
      goto LABEL_12;
LABEL_8:
    v12 = 0;
    goto LABEL_15;
  }
  if (v8 && (!v4 || isWatch()))
  {
    v11 = v8;
    if ((HMFEqualObjects() & 1) == 0)
      goto LABEL_12;
LABEL_10:
    v12 = 0;
    v11 = v8;
    goto LABEL_15;
  }
  -[HMDHomeManager homes](self, "homes");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "hmf_firstObjectWithUUID:", v7);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
    goto LABEL_10;
  -[HMDHomeManager homes](self, "homes");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "firstObject");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "uuid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = HMFEqualObjects();
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_12:
  v18 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "UUIDString");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "UUIDString");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = 138543874;
    v26 = v20;
    v27 = 2112;
    v28 = v21;
    v29 = 2112;
    v30 = v22;
    _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Updating the primary home from %@ to %@", (uint8_t *)&v25, 0x20u);

  }
  objc_autoreleasePoolPop(v18);
  -[HMDHomeManager setPrimaryHomeUUID:](self, "setPrimaryHomeUUID:", v11);
  v23 = -[HMDHomeManager _nominateCurrentHomeUUID](self, "_nominateCurrentHomeUUID");
  v12 = 1;
LABEL_15:

  return v12;
}

- (void)_registerForMessages
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  HMDRemoteAccountMessageFilter *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  int v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  HMDHH2AutoMigrationEligibilityChecker *v106;
  void *v107;
  uint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  void *v129;
  void *v130;
  void *v131;
  uint64_t v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  void *v137;
  void *v138;
  void *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  uint64_t v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  uint64_t v163;
  void *v164;
  void *v165;
  void *v166;
  uint64_t v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  void *v172;
  void *v173;
  void *v174;
  uint64_t v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  uint64_t v188;
  void *v189;
  void *v190;
  void *v191;
  uint64_t v192;
  void *v193;
  void *v194;
  void *v195;
  uint64_t v196;
  void *v197;
  void *v198;
  void *v199;
  uint64_t v200;
  void *v201;
  void *v202;
  void *v203;
  uint64_t v204;
  void *v205;
  void *v206;
  void *v207;
  uint64_t v208;
  void *v209;
  void *v210;
  void *v211;
  uint64_t v212;
  void *v213;
  void *v214;
  void *v215;
  uint64_t v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  uint64_t v226;
  void *v227;
  void *v228;
  void *v229;
  uint64_t v230;
  void *v231;
  void *v232;
  void *v233;
  uint64_t v234;
  void *v235;
  void *v236;
  void *v237;
  void *v238;
  uint64_t v239;
  void *v240;
  void *v241;
  void *v242;
  uint64_t v243;
  void *v244;
  void *v245;
  void *v246;
  uint64_t v247;
  void *v248;
  void *v249;
  void *v250;
  uint64_t v251;
  void *v252;
  void *v253;
  void *v254;
  uint64_t v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  uint64_t v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  _QWORD v293[2];
  void *v294;
  void *v295;
  _QWORD v296[2];
  _QWORD v297[2];
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  _QWORD v313[2];
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  _QWORD v323[2];
  _QWORD v324[2];
  _QWORD v325[2];
  _QWORD v326[2];
  void *v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  _QWORD v341[2];
  void *v342;
  void *v343;
  void *v344;
  void *v345;
  void *v346;
  void *v347;
  _QWORD v348[2];
  _QWORD v349[2];
  _QWORD v350[2];
  _QWORD v351[2];
  _QWORD v352[3];
  _QWORD v353[2];
  _QWORD v354[7];
  uint8_t buf[4];
  void *v356;
  uint64_t v357;

  v357 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v356 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEBUG, "%{public}@Registering for contact store change notifications", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager notificationCenter](v4, "notificationCenter");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObserver:selector:name:object:", v4, sel_handleContactStoreChanged_, *MEMORY[0x1E0C96870], 0);

  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = v4;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v356 = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Registering remote account message filter", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  v12 = [HMDRemoteAccountMessageFilter alloc];
  -[HMDHomeManager messageDestination](v9, "messageDestination");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v354[0] = CFSTR("kAccessHomeInviteRequestKey");
  v354[1] = CFSTR("kHomeDataSyncRequestKey");
  v354[2] = CFSTR("kHomeDataFragmentedSyncRequestKey");
  v354[3] = CFSTR("kUpdateHomeInvitationStateInternalRequestKey");
  v354[4] = CFSTR("kUserRemovedRequestKey");
  v354[5] = CFSTR("kUserResetHomeConfigRequestKey");
  v354[6] = CFSTR("kElectDeviceForIDSSessionKey");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v354, 7);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[HMDRemoteAccountMessageFilter initWithTarget:allowedMessages:](v12, "initWithTarget:allowedMessages:", v13, v14);

  -[HMDHomeManager msgFilterChain](v9, "msgFilterChain");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v285 = (void *)v15;
  objc_msgSend(v16, "addMessageFilter:", v15);

  +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setRequiresSecureMessage:", 0);
  objc_msgSend(v17, "setRequiresAccountMessage:", 0);
  objc_msgSend(v17, "setTransportRestriction:", -1);
  v284 = v17;
  v286 = (void *)objc_msgSend(v17, "copy");
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = *MEMORY[0x1E0CB8250];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v353[0] = v20;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v353[1] = v21;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v353, 2);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "registerForMessage:receiver:policies:selector:", v19, v9, v22, sel___handleActiveAssertion_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = *MEMORY[0x1E0CB8F78];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v352[0] = v25;
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:](HMDXPCBackgroundMessagePolicy, "policyWithEntitlementRequirement:", 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v352[1] = v26;
  v281 = *MEMORY[0x1E0CB9310];
  v27 = *MEMORY[0x1E0CB9310];
  v282 = *MEMORY[0x1E0CB8D08];
  v351[0] = *MEMORY[0x1E0CB8D08];
  v351[1] = v27;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v351, 2);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:](HMDXPCiCloudSwitchMessagePolicy, "policyWithBundleIdentifiers:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v352[2] = v29;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v352, 3);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "registerForMessage:receiver:policies:selector:", v24, v9, v30, sel__handleRequestFetchHomeConfiguration_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v350[0] = v32;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v350[1] = v33;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v350, 2);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoveHomeRequestKey"), v9, v34, sel__handleRequestRemoveHome_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v349[0] = v36;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v349[1] = v37;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v349, 2);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "registerForMessage:receiver:policies:selector:", CFSTR("kAddHomeRequestKey"), v9, v38, sel__handleRequestAddHome_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 2);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v348[0] = v40;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v348[1] = v41;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v348, 2);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "registerForMessage:receiver:policies:selector:", CFSTR("kSetPrimaryHomeRequestKey"), v9, v42, sel__handleRequestSetPrimaryHome_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v347 = v44;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v347, 1);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "registerForMessage:receiver:policies:selector:", CFSTR("kQueryHomeKitUsageStateRequestKey"), v9, v45, sel__handleRequestIsUserUsingHomeKit_);

  +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setRequiresSecureMessage:", 0);
  objc_msgSend(v46, "setAllowsAnonymousMessage:", 1);
  v283 = v46;
  v47 = (void *)objc_msgSend(v46, "copy");
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v346 = v47;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v346, 1);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "registerForMessage:receiver:policies:selector:", CFSTR("kElectDeviceForIDSSessionKey"), v9, v49, sel__handleElectDeviceForIDSSession_);

  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v49) = objc_msgSend(v50, "supportsHomeInvitation");

  if ((_DWORD)v49)
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v345 = v286;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v345, 1);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "registerForMessage:receiver:policies:selector:", CFSTR("kAccessHomeInviteRequestKey"), v9, v52, sel__handleAccessHomeInvite_);

  }
  if (isAppleTV())
  {
    +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "setRequiresSecureMessage:", 0);
    objc_msgSend(v53, "setRequiresAccountMessage:", 1);
    objc_msgSend(v53, "setTransportRestriction:", -1);
    v54 = (void *)objc_msgSend(v53, "copy");
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v344 = v54;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v344, 1);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "registerForMessage:receiver:policies:selector:", CFSTR("kAddRemoteAccessRequestKey"), v9, v56, sel__handleAddRemoteAccessRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v343 = v54;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v343, 1);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "registerForMessage:receiver:policies:selector:", CFSTR("kDoYouSeeUnpairedAccessoriesKey"), v9, v58, sel__handleDoYouSeeUnpairedAccessories_);

    +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "setAllowsAnonymousMessage:", 1);
    v60 = (void *)objc_msgSend(v59, "copy");
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v342 = v60;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v342, 1);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "registerForMessage:receiver:policies:selector:", CFSTR("kAreYouAtHomeRequestKey"), v9, v62, sel__handleAreYouAtHome_);

  }
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = objc_msgSend(v63, "isResidentCapable");

  if (v64)
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 7);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v341[0] = v66;
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    v341[1] = v67;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v341, 2);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateResidentEnabledOnThisDeviceRequestKey"), v9, v68, sel__handleEnableResidentForThisDeviceRequest_);

  }
  if (+[HMDDeviceCapabilities supportsDismissUserNotificationAndDialog](HMDDeviceCapabilities, "supportsDismissUserNotificationAndDialog"))
  {
    +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "setRequiresSecureMessage:", 0);
    objc_msgSend(v69, "setRequiresAccountMessage:", 1);
    objc_msgSend(v69, "setTransportRestriction:", -1);
    v70 = (void *)objc_msgSend(v69, "copy");
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v340 = v70;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v340, 1);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "registerForMessage:receiver:policies:selector:", CFSTR("kDismissBulletinInternalRequestKey"), v9, v72, sel__handleDismissBulletinRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    v339 = v70;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v339, 1);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v73, "registerForMessage:receiver:policies:selector:", CFSTR("kDismissDialogInternalRequestKey"), v9, v74, sel__handleDismissDialogRequest_);

  }
  if (isiOSDevice() || isWatch())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v338 = v76;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v338, 1);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateAccessAllowedWhenLockedRequestKey"), v9, v77, sel__handleAccessAllowedWhenLockedRequest_);

  }
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDMutableRemoteMessagePolicy, "defaultSecurePolicy");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v78, "setAllowsAnonymousMessage:", 1);
  v79 = (void *)objc_msgSend(v78, "copy");
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  v337 = v79;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v337, 1);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v80, "registerForMessage:receiver:policies:selector:", CFSTR("kHomeDataSyncRequestKey"), v9, v81, sel__handleHomeDataSync_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  v336 = v79;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v336, 1);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v82, "registerForMessage:receiver:policies:selector:", CFSTR("kHomeDataFragmentedSyncRequestKey"), v9, v83, sel_handleDataFragmentedSync_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v335 = v79;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v335, 1);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v84, "registerForMessage:receiver:policies:selector:", CFSTR("kUserRemovedRequestKey"), v9, v85, sel__handleUserRemoved_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  v334 = v79;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v334, 1);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v86, "registerForMessage:receiver:policies:selector:", CFSTR("kUserResetHomeConfigRequestKey"), v9, v87, sel__handleResetHome_);

  if (isWatch())
  {
    +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v88, "setRequiresSecureMessage:", 1);
    objc_msgSend(v88, "setRoles:", 1);
    v89 = (void *)objc_msgSend(v88, "copy");
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    v333 = v89;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v333, 1);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v90, "registerForMessage:receiver:policies:selector:", CFSTR("kCompanionKeysSyncInternalRequestKey"), v9, v91, sel__handleCompanionKeysSync_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    v332 = v89;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v332, 1);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v92, "registerForMessage:receiver:policies:selector:", CFSTR("kHomeConfigInternalRequestKey"), v9, v93, sel__handleHomesConfigSync_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    v331 = v89;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v331, 1);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v94, "registerForMessage:receiver:policies:selector:", CFSTR("kCurrentHomeChangedNotificationKey"), v9, v95, sel__handleCurrentHomeChanged_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    v330 = v89;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v330, 1);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v96, "registerForMessage:receiver:policies:selector:", CFSTR("kMetadataDataSyncRequestKey"), v9, v97, sel__handleMetadataSync_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v329 = v89;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v329, 1);
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "registerForMessage:receiver:policies:selector:", CFSTR("HMDHomeManagerSyncWalletKeysPassSerialNumbersMessage"), v9, v99, sel__handleHomeManagerSyncWalletKeysPassSerialNumbersMessage_);

  }
  if (isiOSDevice())
  {
    +[HMDRemoteMessagePolicy defaultPolicy](HMDMutableRemoteMessagePolicy, "defaultPolicy");
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setRequiresSecureMessage:", 1);
    objc_msgSend(v100, "setRoles:", 2);
    v101 = (void *)objc_msgSend(v100, "copy");
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    v328 = v101;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v328, 1);
    v103 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v102, "registerForMessage:receiver:policies:selector:", CFSTR("kRequestForCompanionKeysSyncInternalRequestKey"), v9, v103, sel__handleRequestForCompanionKeysSync_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    v327 = v101;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v327, 1);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "registerForMessage:receiver:policies:selector:", CFSTR("kRetrieveVendorIdentifierInternalKey"), v9, v105, sel__handleRetrieveVendorIdentifier_);

  }
  v106 = -[HMDHH2AutoMigrationEligibilityChecker initWithHomeManager:]([HMDHH2AutoMigrationEligibilityChecker alloc], "initWithHomeManager:", v9);
  -[HMDHomeManager setHh2AutoMigrationEligibilityChecker:](v9, "setHh2AutoMigrationEligibilityChecker:", v106);

  -[HMDHomeManager _registerForFrameworkSwitch](v9, "_registerForFrameworkSwitch");
  if (+[HMDAppleAccountSettings supportsCloudSettings](HMDAppleAccountSettings, "supportsCloudSettings"))
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = *MEMORY[0x1E0CB9090];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    v325[0] = v282;
    v325[1] = v281;
    v326[0] = v109;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v325, 2);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:](HMDXPCiCloudSwitchMessagePolicy, "policyWithBundleIdentifiers:", v110);
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    v326[1] = v111;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v326, 2);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v107, "registerForMessage:receiver:policies:selector:", v108, v9, v112, sel__handleQueryiCloudSwitchState_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    v114 = *MEMORY[0x1E0CB9120];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    v323[1] = v281;
    v324[0] = v115;
    v323[0] = v282;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v323, 2);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCiCloudSwitchMessagePolicy policyWithBundleIdentifiers:](HMDXPCiCloudSwitchMessagePolicy, "policyWithBundleIdentifiers:", v116);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    v324[1] = v117;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v324, 2);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "registerForMessage:receiver:policies:selector:", v114, v9, v118, sel__handleUpdateiCloudSwitchState_);

  }
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  v120 = *MEMORY[0x1E0CB9070];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  v322 = v121;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v322, 1);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v119, "registerForMessage:receiver:policies:selector:", v120, v9, v122, sel__handleQueryHomeNamespace_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v123 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  v321 = v124;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v321, 1);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v123, "registerForMessage:receiver:policies:selector:", CFSTR("kResetConfigRequestKey"), v9, v125, sel__handleResetConfiguration_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v126, "registerForMessage:receiver:policies:selector:", CFSTR("kRemoteSessionTornDownNotificationKey"), v9, MEMORY[0x1E0C9AA60], sel__handleRemoteSessionTornDown_);

  objc_msgSend(MEMORY[0x1E0D28690], "productInfo");
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  v128 = objc_msgSend(v127, "productVariant");

  if (v128 == 3)
  {
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    v320 = v129;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v320, 1);
    v130 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    v132 = *MEMORY[0x1E0CB9078];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    v319 = v133;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v319, 1);
    v134 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v131, "registerForMessage:receiver:policies:selector:", v132, v9, v134, sel__handleQueryMetadata_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v135 = (void *)objc_claimAutoreleasedReturnValue();
    v136 = *MEMORY[0x1E0CB90D0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    v318 = v137;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v318, 1);
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v135, "registerForMessage:receiver:policies:selector:", v136, v9, v138, sel__handleSetMetadata_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    v140 = *MEMORY[0x1E0CB9088];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    v317 = v141;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v317, 1);
    v142 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v139, "registerForMessage:receiver:policies:selector:", v140, v9, v142, sel__handleQueryVersionInformation_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v143 = (void *)objc_claimAutoreleasedReturnValue();
    v144 = *MEMORY[0x1E0CB8F20];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v145 = (void *)objc_claimAutoreleasedReturnValue();
    v316 = v145;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v316, 1);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v143, "registerForMessage:receiver:policies:selector:", v144, v9, v146, sel__handleDumpState_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v147, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB8F60], v9, v130, sel__handleDiagnosticInfo_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v148 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v148, "registerForMessage:receiver:policies:selector:", *MEMORY[0x1E0CB9038], v9, v130, sel__handleNetworkMismatchInfo_);

  }
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v149 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  v315 = v150;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v315, 1);
  v151 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v149, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateInvitationStateRequestKey"), v9, v151, sel__handleRequestToUpdateHomeInvitationFromLocalUser_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v152 = (void *)objc_claimAutoreleasedReturnValue();
  v314 = v286;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v314, 1);
  v153 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v152, "registerForMessage:receiver:policies:selector:", CFSTR("kUpdateHomeInvitationStateInternalRequestKey"), v9, v153, sel__handleRequestToUpdateHomeInvitationFromInviter_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v154 = (void *)objc_claimAutoreleasedReturnValue();
  v155 = *MEMORY[0x1E0CB90C8];
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 7);
  v156 = (void *)objc_claimAutoreleasedReturnValue();
  v313[0] = v156;
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v157 = (void *)objc_claimAutoreleasedReturnValue();
  v313[1] = v157;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v313, 2);
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v154, "registerForMessage:receiver:policies:selector:", v155, v9, v158, sel__handleSetAppData_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v159 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDRemoteMessagePolicy defaultSecurePolicy](HMDRemoteMessagePolicy, "defaultSecurePolicy");
  v160 = (void *)objc_claimAutoreleasedReturnValue();
  v312 = v160;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v312, 1);
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v159, "registerForMessage:receiver:policies:selector:", CFSTR("kSystemLogCaptureRequestKey"), v9, v161, sel__handleSysdiagnoseRequest_);

  if (!isWatch())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    v163 = *MEMORY[0x1E0CB8C18];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v164 = (void *)objc_claimAutoreleasedReturnValue();
    v311 = v164;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v311, 1);
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v162, "registerForMessage:receiver:policies:selector:", v163, v9, v165, sel__handleDeviceSetupSessionOpen_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    v167 = *MEMORY[0x1E0CB8BF0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    v310 = v168;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v310, 1);
    v169 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v166, "registerForMessage:receiver:policies:selector:", v167, v9, v169, sel__handleDeviceSetupSessionClose_);

  }
  -[HMDHomeManager _registerForConfiguringStateMessages](v9, "_registerForConfiguringStateMessages");
  if (isInternalBuild())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    v171 = *MEMORY[0x1E0CB90A0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v172 = (void *)objc_claimAutoreleasedReturnValue();
    v309 = v172;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v309, 1);
    v173 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v170, "registerForMessage:receiver:policies:selector:", v171, v9, v173, sel__handleResolveAccount_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v174 = (void *)objc_claimAutoreleasedReturnValue();
    v175 = *MEMORY[0x1E0CB9098];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    v308 = v176;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v308, 1);
    v177 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v174, "registerForMessage:receiver:policies:selector:", v175, v9, v177, sel__handleRemoveAccount_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v178 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    v307 = v179;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v307, 1);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v178, "registerForMessage:receiver:policies:selector:", CFSTR("kPingInternalRequestKey"), v9, v180, sel__handlePing_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v181 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v182 = (void *)objc_claimAutoreleasedReturnValue();
    v306 = v182;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v306, 1);
    v183 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v181, "registerForMessage:receiver:policies:selector:", CFSTR("kConfigTestingMode"), v9, v183, sel__handleTestModeConfigRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v184 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v185 = (void *)objc_claimAutoreleasedReturnValue();
    v305 = v185;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v305, 1);
    v186 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v184, "registerForMessage:receiver:policies:selector:", CFSTR("HomeUtilRemoteMessageRequestMessage"), v9, v186, sel__handleHomeUtilRemoteMessageRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v187 = (void *)objc_claimAutoreleasedReturnValue();
    v188 = *MEMORY[0x1E0CB9118];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v189 = (void *)objc_claimAutoreleasedReturnValue();
    v304 = v189;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v304, 1);
    v190 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v187, "registerForMessage:receiver:policies:selector:", v188, v9, v190, sel__handleUpdateMobileAssetsRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v191 = (void *)objc_claimAutoreleasedReturnValue();
    v192 = *MEMORY[0x1E0CB8E90];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v193 = (void *)objc_claimAutoreleasedReturnValue();
    v303 = v193;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v303, 1);
    v194 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v191, "registerForMessage:receiver:policies:selector:", v192, v9, v194, sel__handleClearMobileAssetsInfoRequest_);

  }
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v195 = (void *)objc_claimAutoreleasedReturnValue();
  v196 = *MEMORY[0x1E0CB90B0];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 1);
  v197 = (void *)objc_claimAutoreleasedReturnValue();
  v302 = v197;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v302, 1);
  v198 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v195, "registerForMessage:receiver:policies:selector:", v196, v9, v198, sel__handleRequestRuntimeStateUpdate_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v199 = (void *)objc_claimAutoreleasedReturnValue();
  v200 = *MEMORY[0x1E0CB9058];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 13);
  v201 = (void *)objc_claimAutoreleasedReturnValue();
  v301 = v201;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v301, 1);
  v202 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v199, "registerForMessage:receiver:policies:selector:", v200, v9, v202, sel__handlePairingIdentityRequest_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  v204 = *MEMORY[0x1E0CB8F68];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 13);
  v205 = (void *)objc_claimAutoreleasedReturnValue();
  v300 = v205;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v300, 1);
  v206 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v203, "registerForMessage:receiver:policies:selector:", v204, v9, v206, sel__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest_);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  v208 = *MEMORY[0x1E0CB8F70];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  v299 = v209;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v299, 1);
  v210 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v207, "registerForMessage:receiver:policies:selector:", v208, v9, v210, sel__handleFetchDevicesMessage_);

  if (isInternalBuild())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v211 = (void *)objc_claimAutoreleasedReturnValue();
    v212 = *MEMORY[0x1E0CB9688];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v213 = (void *)objc_claimAutoreleasedReturnValue();
    v298 = v213;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v298, 1);
    v214 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v211, "registerForMessage:receiver:policies:selector:", v212, v9, v214, sel__handleNetworkFirewallDumpCloudRecordsRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v215 = (void *)objc_claimAutoreleasedReturnValue();
    v216 = *MEMORY[0x1E0CB9670];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v217 = (void *)objc_claimAutoreleasedReturnValue();
    v297[0] = v217;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 3);
    v218 = (void *)objc_claimAutoreleasedReturnValue();
    v297[1] = v218;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v297, 2);
    v219 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v215, "registerForMessage:receiver:policies:selector:", v216, v9, v219, sel__handleNetworkFirewallAddOverridesRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v220 = (void *)objc_claimAutoreleasedReturnValue();
    v221 = *MEMORY[0x1E0CB9740];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v222 = (void *)objc_claimAutoreleasedReturnValue();
    v296[0] = v222;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
    v223 = (void *)objc_claimAutoreleasedReturnValue();
    v296[1] = v223;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v296, 2);
    v224 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v220, "registerForMessage:receiver:policies:selector:", v221, v9, v224, sel__handleNetworkFirewallRemoveOverridesRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    v226 = *MEMORY[0x1E0CB96C8];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v227 = (void *)objc_claimAutoreleasedReturnValue();
    v295 = v227;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v295, 1);
    v228 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v225, "registerForMessage:receiver:policies:selector:", v226, v9, v228, sel__handleNetworkFirewallDumpLocalRulesRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v229 = (void *)objc_claimAutoreleasedReturnValue();
    v230 = *MEMORY[0x1E0CB9700];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v231 = (void *)objc_claimAutoreleasedReturnValue();
    v294 = v231;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v294, 1);
    v232 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v229, "registerForMessage:receiver:policies:selector:", v230, v9, v232, sel__handleNetworkFirewallDumpPairedMetadataRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v233 = (void *)objc_claimAutoreleasedReturnValue();
    v234 = *MEMORY[0x1E0CB9738];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    v293[0] = v235;
    +[HMDConfigurationMessagePolicy policyWithOperationTypes:](HMDConfigurationMessagePolicy, "policyWithOperationTypes:", 4);
    v236 = (void *)objc_claimAutoreleasedReturnValue();
    v293[1] = v236;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v293, 2);
    v237 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v233, "registerForMessage:receiver:policies:selector:", v234, v9, v237, sel__handleNetworkFirewallRemoveLocalRulesRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v238 = (void *)objc_claimAutoreleasedReturnValue();
    v239 = *MEMORY[0x1E0CB9730];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v240 = (void *)objc_claimAutoreleasedReturnValue();
    v292 = v240;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v292, 1);
    v241 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v238, "registerForMessage:receiver:policies:selector:", v239, v9, v241, sel__handleNetworkFirewallFetchCloudChangesRequest_);

    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v242 = (void *)objc_claimAutoreleasedReturnValue();
    v243 = *MEMORY[0x1E0CB8EA0];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v244 = (void *)objc_claimAutoreleasedReturnValue();
    v291 = v244;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v291, 1);
    v245 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v242, "registerForMessage:receiver:policies:selector:", v243, v9, v245, sel__handleGetTLVForJSON_);

  }
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v246 = (void *)objc_claimAutoreleasedReturnValue();
  v247 = *MEMORY[0x1E0CB8F38];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v248 = (void *)objc_claimAutoreleasedReturnValue();
  v290 = v248;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v290, 1);
  v249 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v246, "registerForMessage:receiver:policies:selector:", v247, v9, v249, sel__handleEnableUARPPacketCaptureRequest_);

  if (isInternalBuild())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v250 = (void *)objc_claimAutoreleasedReturnValue();
    v251 = *MEMORY[0x1E0CB8F00];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v252 = (void *)objc_claimAutoreleasedReturnValue();
    v289 = v252;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v289, 1);
    v253 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v250, "registerForMessage:receiver:policies:selector:", v251, v9, v253, sel__handleDumpDatabase_);

  }
  if (isInternalBuild())
  {
    -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
    v254 = (void *)objc_claimAutoreleasedReturnValue();
    v255 = *MEMORY[0x1E0CB9068];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v256 = (void *)objc_claimAutoreleasedReturnValue();
    v288 = v256;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v288, 1);
    v257 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v254, "registerForMessage:receiver:policies:selector:", v255, v9, v257, sel__handlePrepareForDiagnosticExtension_);

  }
  -[HMDHomeManager userCloudShareManager](v9, "userCloudShareManager");
  v258 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v259 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v258, "configureWithMessageDispatcher:", v259);

  -[HMDHomeManager messageDispatcher](v9, "messageDispatcher");
  v260 = (void *)objc_claimAutoreleasedReturnValue();
  v261 = *MEMORY[0x1E0CB8E98];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 261);
  v262 = (void *)objc_claimAutoreleasedReturnValue();
  v287 = v262;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v287, 1);
  v263 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v260, "registerForMessage:receiver:policies:selector:", v261, v9, v263, sel__handleConnectivityInfoRequest_);

  if (!-[HMDHomeManager stateHandle](v9, "stateHandle"))
    -[HMDHomeManager registerStateHandler](v9, "registerStateHandler");
  if (isiOSDevice())
  {
    -[HMDHomeManager notificationCenter](v9, "notificationCenter");
    v264 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v264, "addObserver:selector:name:object:", v9, sel_controllerKeyPairGenerated_, *MEMORY[0x1E0D16670], 0);

    -[HMDHomeManager notificationCenter](v9, "notificationCenter");
    v265 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v265, "addObserver:selector:name:object:", v9, sel_forcePushLocalDataToCloud_, CFSTR("kCloudDataSyncTimerExpiredNotification"), 0);

  }
  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v266 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v266, "addObserver:selector:name:object:", v9, sel_dataSyncInProgressUpdatedNotification_, CFSTR("kCloudDataSyncInProgressUpdatedNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v267 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v267, "addObserver:selector:name:object:", v9, sel__handleSaveRequest_, CFSTR("HMDHomeManagerSaveRequestNotificationKey"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v268 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v268, "addObserver:selector:name:object:", v9, sel_handleVendorInfoUpdated_, CFSTR("kHMDVendorInfoUpdatedNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v269 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v269, "addObserver:selector:name:object:", v9, sel_auditDuplicatePreviouslyAddedAccessory_, CFSTR("HMDHomeThisOwnerDeviceAddedAccessoryNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v270 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v270, "addObserver:selector:name:object:", v9, sel___handleInitialFetch_, CFSTR("HMDCloudZoneReadyNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v271 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v271, "addObserver:selector:name:object:", v9, sel___handleAppleAccountUpdated_, CFSTR("HMDAppleAccountManagerAccountUpdatedNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v272 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v273 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v272, "addObserver:selector:name:object:", v9, sel___accountRegistryAddedAccount_, CFSTR("HMDAccountRegistryAddedAccountNotification"), v273);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v274 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v275 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v274, "addObserver:selector:name:object:", v9, sel___accountRegistryRemovedAccount_, CFSTR("HMDAccountRegistryRemovedAccountNotification"), v275);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v276 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v276, "addObserver:selector:name:object:", v9, sel___accountAddedDevice_, CFSTR("HMDAccountAddedDeviceNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v277 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v277, "addObserver:selector:name:object:", v9, sel___handleDeviceUpdatedNotification_, CFSTR("HMDDeviceUpdatedNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v278 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v278, "addObserver:selector:name:object:", v9, sel___accountRemovedDevice_, CFSTR("HMDAccountRemovedDeviceNotification"), 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v279 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v279, "addObserver:selector:name:object:", v9, sel___handleProcessMemoryPressureEvent_, *MEMORY[0x1E0D28008], 0);

  -[HMDHomeManager notificationCenter](v9, "notificationCenter");
  v280 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v280, "addObserver:selector:name:object:", v9, sel___handleHMDFMFStatusUpdateNotification_, CFSTR("HMDFMFStatusUpdateNotification"), 0);

  -[HMDHomeManager registerNotificationsForPowerManagement](v9, "registerNotificationsForPowerManagement");
  -[HMDHomeManager configureForWalletKey](v9, "configureForWalletKey");

}

- (void)_notifyMetricsManagerOfConfigurationChange
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D28540]), "initWithName:", CFSTR("Generate Home Configuration Log Event"));
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = self;
  HMFGetOSLogHandle();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "shortDescription");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v16 = v6;
    v17 = 2114;
    v18 = v8;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Home Configuration got updated. Scheduling of new log event generation.", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  objc_initWeak((id *)buf, v4);
  objc_msgSend(MEMORY[0x1E0D28698], "defaultScheduler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __60__HMDHomeManager__notifyMetricsManagerOfConfigurationChange__block_invoke;
  v11[3] = &unk_1E89BE218;
  objc_copyWeak(&v13, (id *)buf);
  v12 = v14;
  v10 = (id)objc_msgSend(v9, "performWithQualityOfService:block:", 9, v11);

  objc_destroyWeak(&v13);
  objc_destroyWeak((id *)buf);
  __HMFActivityScopeLeave();

}

- (void)_startTimerToResetCloudOperationRetryCounter
{
  _QWORD v3[4];
  id v4;
  id location;

  objc_initWeak(&location, self);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __62__HMDHomeManager__startTimerToResetCloudOperationRetryCounter__block_invoke;
  v3[3] = &unk_1E89BE3F8;
  objc_copyWeak(&v4, &location);
  -[HMDHomeManager _startCloudOperationRetryWithTimeout:completionHandler:](self, "_startCloudOperationRetryWithTimeout:completionHandler:", 7200, v3);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

- (void)_retryCloudOperationWithName:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  NSObject *v21;
  _BOOL4 v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = -[HMDHomeManager cloudOperationRetryCount](self, "cloudOperationRetryCount");
  v9 = maxCloudOperationRetries;
  if ((unint64_t)maxCloudOperationRetries >= 7)
    v9 = 7;
  if (v8 >= v9)
  {
    -[HMDHomeManager cloudOperationRetryTimer](self, "cloudOperationRetryTimer");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v29 = v17;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@We have an outstanding max retry reset timer, ignoring this reachability change", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v15);
    }
    else
    {
      +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "supportsKeychainSync");

      v20 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
      if ((v19 & 1) != 0)
      {
        if (v22)
        {
          HMFGetLogIdentifier();
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v29 = v23;
          v30 = 2112;
          v31 = v6;
          _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Exceeded the total number of attempts for cloud operation: %@, kicking counter reset-timer", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v20);
        -[HMDHomeManager _startTimerToResetCloudOperationRetryCounter](self, "_startTimerToResetCloudOperationRetryCounter");
      }
      else
      {
        if (v22)
        {
          HMFGetLogIdentifier();
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v29 = v24;
          v30 = 2112;
          v31 = v6;
          _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Exceeded the total number of attempts for cloud operation: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v20);
        -[HMDHomeManager setBackOffOperationInProgress:](self, "setBackOffOperationInProgress:", 0);
        -[HMDHomeManager _resetCloudOperationRetryCounters](self, "_resetCloudOperationRetryCounters");
      }
    }
  }
  else if (!-[HMDHomeManager backOffOperationInProgress](self, "backOffOperationInProgress"))
  {
    v10 = _retryCloudOperationWithName_completionHandler__retryIntervalInSeconds[-[HMDHomeManager cloudOperationRetryCount](self, "cloudOperationRetryCount")];
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v29 = v13;
      v30 = 2112;
      v31 = v6;
      v32 = 2048;
      v33 = v10;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Going to re-try cloud operation: %@ in %ld secs", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    -[HMDHomeManager setBackOffOperationInProgress:](self, "setBackOffOperationInProgress:", 1);
    objc_initWeak((id *)buf, self);
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __65__HMDHomeManager__retryCloudOperationWithName_completionHandler___block_invoke;
    v25[3] = &unk_1E89BD190;
    objc_copyWeak(&v27, (id *)buf);
    v26 = v7;
    -[HMDHomeManager _startCloudOperationRetryWithTimeout:completionHandler:](self, "_startCloudOperationRetryWithTimeout:completionHandler:", v10, v25);

    objc_destroyWeak(&v27);
    objc_destroyWeak((id *)buf);
  }

}

- (id)homesToSendForNonSPIClients
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v8[4];
  id v9;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager homes](self, "homes");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __45__HMDHomeManager_homesToSendForNonSPIClients__block_invoke;
  v8[3] = &unk_1E89BD668;
  v9 = v3;
  v5 = v3;
  objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v8);

  v6 = (void *)objc_msgSend(v5, "copy");
  return v6;
}

- (id)_accessoryOfCurrentDevice
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  id v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v21 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        objc_msgSend(v7, "accessories", 0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v17;
          while (2)
          {
            for (j = 0; j != v10; ++j)
            {
              if (*(_QWORD *)v17 != v11)
                objc_enumerationMutation(v8);
              v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * j);
              if ((objc_msgSend(v13, "isCurrentAccessory") & 1) != 0)
              {
                v14 = v13;

                goto LABEL_19;
              }
            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
            if (v10)
              continue;
            break;
          }
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
      v14 = 0;
    }
    while (v4);
  }
  else
  {
    v14 = 0;
  }
LABEL_19:

  return v14;
}

- (id)_appleMediaAccessoryOfCurrentDevice
{
  void *v3;
  void *v4;
  id v5;
  int v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    objc_opt_class();
    v6 = objc_opt_isKindOfClass() & 1;
    if (v6)
      v7 = v5;
    else
      v7 = 0;
    v8 = v7;

    if (v6)
    {
      v9 = v5;
    }
    else
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138543618;
        v16 = v13;
        v17 = 2112;
        v18 = v5;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Failed to get apple media accessory for current accessory: %@", (uint8_t *)&v15, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      v9 = 0;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (void)sendPairingIdentity:(id)a3 includePrivateKey:(BOOL)a4 requestMessage:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  if (a4)
  {
    v10 = v8;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v11 = v10;
    else
      v11 = 0;
    v12 = v11;

    if (v12)
    {
      v13 = objc_alloc(MEMORY[0x1E0D28650]);
      objc_msgSend(v12, "identifier");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "publicKey");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "privateKey");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (id)objc_msgSend(v13, "initWithIdentifier:publicKey:privateKey:", v14, v15, v16);

    }
    else
    {
      v17 = v10;
    }

  }
  else
  {
    objc_msgSend(v8, "publicPairingIdentity");
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = (void *)MEMORY[0x1D17BA0A0]();
  v19 = self;
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
  if (v17)
  {
    if (v21)
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v22;
      v35 = 2112;
      v36 = v8;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Sending the pairing identity %@ to client", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    encodeRootObject();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = (void *)v23;
    if (v23)
    {
      v31 = *MEMORY[0x1E0CB7D60];
      v32 = v23;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "respondWithPayload:", v25);
    }
    else
    {
      v27 = (void *)MEMORY[0x1D17BA0A0]();
      v28 = v19;
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v34 = v30;
        v35 = 2112;
        v36 = v8;
        _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_ERROR, "%{public}@Unable to encode the pairing identity : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v27);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 52);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "respondWithError:", v25);
    }

  }
  else
  {
    if (v21)
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v26;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve pairing identity", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "respondWithError:", v24);
  }

}

- (void)_handlePairingIdentityRequest:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t k;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  HMDHomeManager *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  HMDHomeManager *v43;
  NSObject *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  HMDHomeManager *v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  _BYTE v64[128];
  uint8_t v65[128];
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  id v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "proxyConnection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "entitlements");

  objc_msgSend(v4, "stringForKey:", CFSTR("kIdentifierKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v48 = v6;
    v50 = v4;
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v67 = v11;
      v68 = 2112;
      v69 = v7;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve pairing identity for identifier : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v49 = v9;
    -[HMDHomeManager homes](v9, "homes");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
    if (v47)
    {
      v13 = *(_QWORD *)v60;
      v46 = *(_QWORD *)v60;
      do
      {
        for (i = 0; i != v47; ++i)
        {
          if (*(_QWORD *)v60 != v13)
            objc_enumerationMutation(v12);
          v15 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * i);
          v55 = 0u;
          v56 = 0u;
          v57 = 0u;
          v58 = 0u;
          objc_msgSend(v15, "accessories");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = (void *)objc_msgSend(v16, "copy");

          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v55, v64, 16);
          if (v18)
          {
            v19 = v18;
            v20 = *(_QWORD *)v56;
            while (2)
            {
              for (j = 0; j != v19; ++j)
              {
                if (*(_QWORD *)v56 != v20)
                  objc_enumerationMutation(v17);
                __pairingIdentityForAccessory(*(void **)(*((_QWORD *)&v55 + 1) + 8 * j));
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v22, "identifier");
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                v24 = HMFAreStringsEqualIgnoringCase();

                if (v24)
                {
                  v4 = v50;
                  -[HMDHomeManager sendPairingIdentity:includePrivateKey:requestMessage:](v49, "sendPairingIdentity:includePrivateKey:requestMessage:", v22, (v48 >> 4) & 1, v50);

                  goto LABEL_38;
                }

              }
              v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v55, v64, 16);
              if (v19)
                continue;
              break;
            }
          }

          v13 = v46;
        }
        v47 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
      }
      while (v47);
    }

    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "operations");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v26 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v63, 16);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v52;
      while (2)
      {
        for (k = 0; k != v27; ++k)
        {
          if (*(_QWORD *)v52 != v28)
            objc_enumerationMutation(v12);
          objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * k), "accessory");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          __pairingIdentityForAccessory(v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "identifier");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = HMFAreStringsEqualIgnoringCase();

          if (v33)
          {
            v42 = (void *)MEMORY[0x1D17BA0A0]();
            v43 = v49;
            HMFGetOSLogHandle();
            v44 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v67 = v45;
              v68 = 2112;
              v69 = v7;
              _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_INFO, "%{public}@Found accessory with pairing identifier %@ in user management operations", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v42);
            v4 = v50;
            -[HMDHomeManager sendPairingIdentity:includePrivateKey:requestMessage:](v43, "sendPairingIdentity:includePrivateKey:requestMessage:", v31, (v48 >> 4) & 1, v50);

            goto LABEL_38;
          }

        }
        v27 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v51, v63, 16);
        if (v27)
          continue;
        break;
      }
    }

    v34 = (void *)MEMORY[0x1D17BA0A0]();
    v35 = v49;
    HMFGetOSLogHandle();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v67 = v37;
      v68 = 2112;
      v69 = v7;
      _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve pairing identity for accessory: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v34);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v50;
  }
  else
  {
    v38 = (void *)MEMORY[0x1D17BA0A0]();
    v39 = self;
    HMFGetOSLogHandle();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v67 = v41;
      v68 = 2112;
      v69 = v4;
      _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve identifier from message: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v38);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v4, "respondWithError:", v12);
LABEL_38:

}

- (void)_handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHomeManager homes](self, "homes");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __90__HMDHomeManager__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest___block_invoke;
    v25[3] = &unk_1E89BD690;
    v7 = v5;
    v26 = v7;
    objc_msgSend(v6, "na_firstObjectPassingTest:", v25);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v8, "currentUser");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
      if (v9)
      {
        if (v13)
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v28 = v14;
          v29 = 2112;
          v30 = v9;
          v31 = 2112;
          v32 = v8;
          v33 = 2112;
          v34 = v7;
          _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve pairing identity for current user (%@) in home (%@) with accessory identifier : %@", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v10);
        objc_msgSend(v9, "fetchPairingIdentityForClientWithMessage:", v4);
      }
      else
      {
        if (v13)
        {
          HMFGetLogIdentifier();
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v28 = v24;
          v29 = 2112;
          v30 = v8;
          _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@No current user in home: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v10);
        v9 = 0;
      }
    }
    else
    {
      v20 = (void *)MEMORY[0x1D17BA0A0]();
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v28 = v23;
        v29 = 2112;
        v30 = v7;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Unable to find accessory (%@) in any home", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v20);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v9);
    }

    v19 = v26;
  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = self;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v28 = v18;
      v29 = 2112;
      v30 = v4;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve accessory unique identifier from message: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v19);
  }

}

- (void)_handleConnectivityInfoRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void (**v17)(_QWORD, _QWORD, _QWORD);
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  __int16 v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  _BOOL4 v24;
  void *v25;
  uint64_t i;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  int v38;
  void *v39;
  uint64_t v40;
  void *v41;
  HMDHomeManager *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void (**v49)(_QWORD, _QWORD, _QWORD);
  void *v50;
  HMDHomeManager *v51;
  void *v52;
  id obj;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  void *v65;
  _BYTE v66[128];
  uint8_t v67[128];
  uint8_t buf[4];
  void *v69;
  __int16 v70;
  id v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "responseHandler");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    if ((objc_msgSend(v4, "isEntitledForSPIAccess") & 1) != 0)
    {
      if (objc_msgSend(v4, "isRemote"))
      {
        v6 = (void *)MEMORY[0x1D17BA0A0]();
        v7 = self;
        HMFGetOSLogHandle();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v69 = v9;
          v70 = 2112;
          v71 = v4;
          v10 = "%{public}@This message should only be passed over XPC: %@";
          v11 = v8;
          v12 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
          _os_log_impl(&dword_1CD062000, v11, v12, v10, buf, 0x16u);

        }
LABEL_13:

        objc_autoreleasePoolPop(v6);
        objc_msgSend(v4, "responseHandler");
        v17 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
        v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v17[2](v17, v18, 0);
LABEL_14:

        goto LABEL_15;
      }
      objc_msgSend(v4, "proxyConnection");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "entitlements");

      if ((v20 & 0x100) != 0)
      {
        objc_msgSend(v4, "stringForKey:", CFSTR("kIdentifierKey"));
        v17 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v21 = (void *)MEMORY[0x1D17BA0A0]();
        v22 = self;
        HMFGetOSLogHandle();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
        if (v17)
        {
          v52 = v4;
          if (v24)
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v69 = v25;
            v70 = 2112;
            v71 = v17;
            _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Received request to retrieve connectivity info for identifier : %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v21);
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v51 = v22;
          -[HMDHomeManager homes](v22, "homes");
          obj = (id)objc_claimAutoreleasedReturnValue();
          v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
          if (v55)
          {
            v54 = *(_QWORD *)v61;
            while (2)
            {
              for (i = 0; i != v55; ++i)
              {
                if (*(_QWORD *)v61 != v54)
                  objc_enumerationMutation(obj);
                v27 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
                v56 = 0u;
                v57 = 0u;
                v58 = 0u;
                v59 = 0u;
                objc_msgSend(v27, "accessories");
                v28 = (void *)objc_claimAutoreleasedReturnValue();
                v29 = (void *)objc_msgSend(v28, "copy");

                v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v56, v66, 16);
                if (v30)
                {
                  v31 = v30;
                  v32 = *(_QWORD *)v57;
LABEL_29:
                  v33 = 0;
                  while (1)
                  {
                    if (*(_QWORD *)v57 != v32)
                      objc_enumerationMutation(v29);
                    v34 = *(id *)(*((_QWORD *)&v56 + 1) + 8 * v33);
                    objc_opt_class();
                    v35 = (objc_opt_isKindOfClass() & 1) != 0 ? v34 : 0;
                    v36 = v35;

                    objc_msgSend(v36, "identifier");
                    v37 = (void *)objc_claimAutoreleasedReturnValue();
                    v38 = HMFAreStringsEqualIgnoringCase();

                    if (v38)
                      break;

                    if (v31 == ++v33)
                    {
                      v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v56, v66, 16);
                      if (v31)
                        goto LABEL_29;
                      goto LABEL_41;
                    }
                  }
                  objc_msgSend(v36, "connectivityInfo");
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  encodeRootObject();
                  v40 = objc_claimAutoreleasedReturnValue();
                  if (!v40)
                  {

                    goto LABEL_41;
                  }
                  v48 = (void *)v40;
                  v4 = v52;
                  objc_msgSend(v52, "responseHandler");
                  v49 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
                  v64 = *MEMORY[0x1E0CB7B70];
                  v65 = v48;
                  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1);
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  ((void (**)(_QWORD, _QWORD, void *))v49)[2](v49, 0, v50);

                  v18 = (void (**)(_QWORD, _QWORD, _QWORD))obj;
                  goto LABEL_51;
                }
LABEL_41:

              }
              v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
              if (v55)
                continue;
              break;
            }
          }

          v41 = (void *)MEMORY[0x1D17BA0A0]();
          v42 = v51;
          HMFGetOSLogHandle();
          v43 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v69 = v44;
            v70 = 2112;
            v71 = v17;
            _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Unable to get connectivity info accessory identifier: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v41);
          v4 = v52;
          objc_msgSend(v52, "responseHandler");
          v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          v45 = (void *)MEMORY[0x1E0CB35C8];
          v46 = 2;
        }
        else
        {
          if (v24)
          {
            HMFGetLogIdentifier();
            v47 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v69 = v47;
            v70 = 2112;
            v71 = v4;
            _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Unable to retrieve identifier from message: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v21);
          objc_msgSend(v4, "responseHandler");
          v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          v45 = (void *)MEMORY[0x1E0CB35C8];
          v46 = 3;
        }
        objc_msgSend(v45, "hmErrorWithCode:", v46);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v29, 0);
LABEL_51:

        goto LABEL_14;
      }
      v6 = (void *)MEMORY[0x1D17BA0A0]();
      v7 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v69 = v9;
      v70 = 2112;
      v71 = v4;
      v10 = "%{public}@Unable to retrieve connectivity info due to insufficient privileges for message: %@";
    }
    else
    {
      v6 = (void *)MEMORY[0x1D17BA0A0]();
      v7 = self;
      HMFGetOSLogHandle();
      v8 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v69 = v9;
      v70 = 2112;
      v71 = v4;
      v10 = "%{public}@Unable to retrieve connectivity info due to insufficient internal privileges for message: %@";
    }
    v11 = v8;
    v12 = OS_LOG_TYPE_INFO;
    goto LABEL_12;
  }
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v69 = v16;
    v70 = 2112;
    v71 = v4;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@No response handler in _handleConnectivityInfoRequest: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
LABEL_15:

}

- (id)__nominateCurrentHomeUUID
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint8_t v44[128];
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager overrideCurrentHomeUUIDToNil](self, "overrideCurrentHomeUUIDToNil");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    if ((objc_msgSend(v3, "BOOLValue") & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      -[HMDHomeManager currentHomeUUIDOverride](self, "currentHomeUUIDOverride");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    -[HMDHomeManager _appleMediaAccessoryOfCurrentDevice](self, "_appleMediaAccessoryOfCurrentDevice");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "home");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = self;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v46 = v11;
        v47 = 2112;
        v48 = v7;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Returning current accessory home %@ as current home", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(v7, "uuid");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v39 = v6;
      v12 = objc_alloc(MEMORY[0x1E0C99DE8]);
      -[HMDHomeManager homes](self, "homes");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)objc_msgSend(v12, "initWithCapacity:", objc_msgSend(v13, "count"));

      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      -[HMDHomeManager homes](self, "homes");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v41;
        while (2)
        {
          for (i = 0; i != v17; ++i)
          {
            if (*(_QWORD *)v41 != v18)
              objc_enumerationMutation(v15);
            v20 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
            if (objc_msgSend(v20, "homeLocation") == 3 || objc_msgSend(v20, "homeLocation") == 1)
            {
              objc_msgSend(v20, "uuid");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v23 = objc_msgSend(v21, "isEqual:", v22);

              if (v23)
              {
                v30 = (void *)MEMORY[0x1D17BA0A0]();
                v31 = self;
                HMFGetOSLogHandle();
                v32 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v33 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v46 = v33;
                  v47 = 2112;
                  v48 = v20;
                  _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@New nominated current home is primary home : %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v30);
                objc_msgSend(v20, "uuid");
                v5 = (void *)objc_claimAutoreleasedReturnValue();

                goto LABEL_27;
              }
              objc_msgSend(v14, "addObject:", v20);
            }
          }
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
          if (v17)
            continue;
          break;
        }
      }

      if (objc_msgSend(v14, "count"))
      {
        v24 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v14, "sortUsingComparator:", &__block_literal_global_927));
        v25 = self;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "firstObject");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v46 = v27;
          v47 = 2112;
          v48 = v28;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@New nominated current home is %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v24);
        objc_msgSend(v14, "firstObject");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "uuid");
        v5 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v35 = (void *)MEMORY[0x1D17BA0A0]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v46 = v38;
          _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@There is no current home", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v35);
        v5 = 0;
      }
LABEL_27:
      v6 = v39;
      v4 = 0;
      v7 = 0;

    }
  }

  return v5;
}

- (id)_nominateCurrentHomeUUID
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  int v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "homeLocation") != 1)
  {
LABEL_10:
    -[HMDHomeManager __nominateCurrentHomeUUID](self, "__nominateCurrentHomeUUID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
  -[HMDHomeManager _appleMediaAccessoryOfCurrentDevice](self, "_appleMediaAccessoryOfCurrentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "home");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v8, "hmf_isEqualToUUID:", v9);

    if (!v10)
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543362;
        v22 = v19;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Current home does not match current accessory home, recalculating...", (uint8_t *)&v21, 0xCu);

      }
      objc_autoreleasePoolPop(v16);

      goto LABEL_10;
    }
  }
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543362;
    v22 = v14;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Last current home still has AtHome status, stay as current home", (uint8_t *)&v21, 0xCu);

  }
  objc_autoreleasePoolPop(v11);
  objc_msgSend(v4, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_11:
  return v15;
}

- (void)_updateCurrentHomeIfNecessary
{
  id v3;

  -[HMDHomeManager _nominateCurrentHomeUUID](self, "_nominateCurrentHomeUUID");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _notifyCurrentHomeUpdated:isLocalUpdate:](self, "_notifyCurrentHomeUpdated:isLocalUpdate:", v3, 1);

}

- (void)_notifyCurrentHomeUpdated:(id)a3 isLocalUpdate:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  const char *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  const __CFString *v38;
  uint64_t v39;
  const __CFString *v40;
  void *v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  id v45;
  __int16 v46;
  id v47;
  uint64_t v48;

  v4 = a4;
  v48 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!HMFEqualObjects())
  {
    if (v6)
    {
      -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (isAppleTV() && v11 && (objc_msgSend(v11, "isOwnerUser") & 1) == 0)
      {
        v12 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "UUIDString");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v43 = v14;
          v44 = 2112;
          v45 = v15;
          v16 = "%{public}@Not updating current home since user is not owner of home %@";
LABEL_17:
          _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, v16, buf, 0x16u);

          goto LABEL_18;
        }
        goto LABEL_18;
      }
    }
    else
    {
      v11 = 0;
    }
    if (!isWatch() || !-[HMDHomeManager companionReachable](self, "companionReachable") || !v4)
    {
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v43 = v19;
        v44 = 2112;
        v45 = v7;
        v46 = 2112;
        v47 = v6;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Updating the current home from %@ to %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v17);
      -[HMDHomeManager setCurrentHomeUUID:](self, "setCurrentHomeUUID:", v6);
      if (v6)
      {
        -[HMDHomeManager setLastCurrentHomeUUID:](self, "setLastCurrentHomeUUID:", v6);
        v40 = CFSTR("kCurrentHomeUUIDKey");
        objc_msgSend(v6, "UUIDString");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v20;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v38 = CFSTR("kNoCurrentHomeKey");
        v39 = MEMORY[0x1E0C9AAB0];
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(MEMORY[0x1E0D285D0], "entitledMessageWithName:messagePayload:", CFSTR("kCurrentHomeChangedNotificationKey"), v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager uuid](self, "uuid");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "sendMessage:target:", v22, v24);

      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      -[HMDHomeManager watchManager](self, "watchManager", 0);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "watches");
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
      if (v27)
      {
        v28 = v27;
        v29 = *(_QWORD *)v34;
        do
        {
          for (i = 0; i != v28; ++i)
          {
            if (*(_QWORD *)v34 != v29)
              objc_enumerationMutation(v26);
            -[HMDHomeManager _sendCurrentHomeToWatch:](self, "_sendCurrentHomeToWatch:", *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * i));
          }
          v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
        }
        while (v28);
      }

      -[HMDHomeManager writeAssistantCurrentHome:](self, "writeAssistantCurrentHome:", v11);
      v31 = (void *)objc_opt_new();
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v6, CFSTR("HMDCurrentHomeUUIDKey"));
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v7, CFSTR("HMDPreviousHomeUUIDKey"));
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "postNotificationName:object:userInfo:", CFSTR("HMDNotificationCurrentHomeDidChange"), self, v31);

      goto LABEL_32;
    }
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v43 = v14;
      v44 = 2112;
      v45 = v15;
      v16 = "%{public}@Rejecting locally updated current home (%@) on watch since companion is in range";
      goto LABEL_17;
    }
LABEL_18:

    objc_autoreleasePoolPop(v12);
LABEL_32:

    goto LABEL_33;
  }
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v43 = v10;
    v44 = 2112;
    v45 = v6;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Current home is already %@, not notifying", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
LABEL_33:

}

- (void)_sendCurrentHomeToWatch:(id)a3
{
  id v4;
  void *v5;
  HMDHomeKitVersion *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  HMDRemoteDeviceMessageDestination *v15;
  void *v16;
  HMDRemoteDeviceMessageDestination *v17;
  void *v18;
  void *v19;
  const __CFString *v20;
  uint64_t v21;
  const __CFString *v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "version");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("3.0"));
  v7 = objc_msgSend(v5, "isAtLeastVersion:", v6);

  if ((v7 & 1) != 0)
  {
    -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v22 = CFSTR("kCurrentHomeUUIDKey");
      -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "UUIDString");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v10;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v20 = CFSTR("kNoCurrentHomeKey");
      v21 = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v15 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHomeManager uuid](self, "uuid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v15, "initWithTarget:device:", v16, v4);

    objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:qualityOfService:destination:payload:", CFSTR("kCurrentHomeChangedNotificationKey"), 9, v17, v11);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "sendMessage:completionHandler:", v18, 0);

  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v25 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Not sending current home update to legacy watch", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
  }

}

- (void)_handleCurrentHomeChanged:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  id v8;

  v8 = a3;
  objc_msgSend(v8, "messagePayload");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("kCurrentHomeUUIDKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager _notifyCurrentHomeUpdated:isLocalUpdate:](self, "_notifyCurrentHomeUpdated:isLocalUpdate:", v5, 0);
  objc_msgSend(v8, "responseHandler");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v8, "responseHandler");
    v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v7[2](v7, 0, 0);

  }
}

- (id)_findHomeModelChange:(id)a3
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  char isKindOfClass;
  id v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v3 = a3;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v8, "objectChange", (_QWORD)v16);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v10 = v9;
        else
          v10 = 0;
        v11 = v10;

        if (v11)
        {

LABEL_17:
          v14 = v8;
          goto LABEL_18;
        }
        objc_msgSend(v8, "objectChange");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v12)
          goto LABEL_17;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      v14 = 0;
      if (v5)
        continue;
      break;
    }
  }
  else
  {
    v14 = 0;
  }
LABEL_18:

  return v14;
}

- (id)_findHomeOwnerModelChange:(id)a3
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v18 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_msgSend(v10, "objectChange", (_QWORD)v17);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v12 = v11;
        else
          v12 = 0;
        v13 = v12;

        if (v13)
        {
          objc_msgSend(v13, "privilege");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v14, "integerValue");

          if (v15 == 3)
            objc_msgSend(v4, "addObject:", v10);
        }

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v7);
  }

  return v4;
}

- (id)_findHomeSharedUserModelChange:(id)a3
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v26;
  id v27;
  void *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v27 = (id)objc_claimAutoreleasedReturnValue();
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v31;
    v26 = v4;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v31 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
        objc_msgSend(v9, "objectChange", v26);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v11 = v10;
        else
          v11 = 0;
        v12 = v11;

        if (v12)
        {
          v13 = objc_opt_class();
          if (v13 == objc_opt_class())
          {
            objc_msgSend(v12, "privilege");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v14, "integerValue");

            if (v15 != 3)
            {
              objc_msgSend(v12, "pairingIdentity");
              v16 = (void *)objc_claimAutoreleasedReturnValue();

              if (v16)
              {
                v17 = (void *)MEMORY[0x1E0D165A8];
                objc_msgSend(v12, "pairingIdentity");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "hmd_pairingIdentityWithDictionary:", v18);
                v19 = (void *)objc_claimAutoreleasedReturnValue();

                if (v19)
                {
                  v29 = objc_alloc(MEMORY[0x1E0D28650]);
                  objc_msgSend(v19, "identifier");
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v19, "publicKey");
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v19, "privateKey");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = objc_msgSend(v29, "initWithIdentifier:publicKey:privateKey:", v28, v20, v21);

                  v23 = (void *)v22;
                  objc_msgSend(v27, "objectForKeyedSubscript:", v22);
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  if (!v24)
                  {
                    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                    v24 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v27, "setObject:forKeyedSubscript:", v24, v23);
                  }
                  objc_msgSend(v24, "addObject:", v9);

                  v4 = v26;
                }
              }
            }
          }
        }

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v6);
  }

  return v27;
}

- (id)_findHomeModel:(id)a3
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  id v10;
  uint64_t isKindOfClass;
  id v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a3;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v9 = v8;
        else
          v9 = 0;
        v10 = v9;

        if (v10)
        {

LABEL_17:
          v12 = v8;
          goto LABEL_18;
        }
        v8 = v8;
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v8)
          goto LABEL_17;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v12 = 0;
      if (v5)
        continue;
      break;
    }
  }
  else
  {
    v12 = 0;
  }
LABEL_18:

  return v12;
}

- (id)_findHomeConfigurationModelChange:(id)a3
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  char isKindOfClass;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = a3;
  v4 = (id)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v7, "objectChange", (_QWORD)v11);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0 && v8)
        {
          v4 = v7;
          goto LABEL_12;
        }
      }
      v4 = (id)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_12:

  return v4;
}

- (void)_handleRequestAddHome:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  char v16;
  void *v17;
  id v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  _BOOL4 v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  HMDHomeManager *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  HMDHomeManager *v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  HMDHome *v58;
  void *v59;
  HMDHome *v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  HMDHomeManager *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *v76;
  BOOL v77;
  void *v78;
  HMDHomeManager *v79;
  NSObject *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  _QWORD v86[5];
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  uint8_t buf[4];
  void *v93;
  __int16 v94;
  id v95;
  __int16 v96;
  void *v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager hh2FrameworkSwitch](self, "hh2FrameworkSwitch");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "checkExistenceOfHH2SentinelZone");

  if (!v6)
  {
    if (isWatch())
      goto LABEL_32;
    -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isiCloudSwitchEnabled");

    -[HMDHomeManager cloudDataSource](self, "cloudDataSource");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "isControllerKeyAvailable");

    if (v14)
    {
      if ((v16 & 1) == 0)
      {
        -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v76, "isFirstDBQueryRun"))
        {
          v77 = -[HMDHomeManager missingHomeDataRecord](self, "missingHomeDataRecord");

          if (v77)
          {
            v18 = 0;
            goto LABEL_31;
          }
        }
        else
        {

        }
        v78 = (void *)MEMORY[0x1D17BA0A0]();
        v79 = self;
        HMFGetOSLogHandle();
        v80 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager cloudDataSyncManager](v79, "cloudDataSyncManager");
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v82, "isFirstDBQueryRun");
          HMFBooleanToString();
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager missingHomeDataRecord](v79, "missingHomeDataRecord");
          HMFBooleanToString();
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v93 = v81;
          v94 = 2112;
          v95 = v83;
          v96 = 2112;
          v97 = v84;
          _os_log_impl(&dword_1CD062000, v80, OS_LOG_TYPE_ERROR, "%{public}@Cannot create controller key without all conditions good dbquery: %@, homerecord: %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v78);
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v11 = objc_claimAutoreleasedReturnValue();
        goto LABEL_5;
      }
      objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v91 = 0;
      objc_msgSend(v17, "getControllerPublicKey:secretKey:username:allowCreation:forAccessory:error:", 0, 0, &v91, 0, 0, 0);
      v18 = v91;

      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v93 = v22;
        v94 = 2112;
        v95 = v18;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Got the active controller pairing identifier : %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v19);
      -[HMDHomeManager cloudDataSyncManager](v20, "cloudDataSyncManager");
      v23 = (id)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v23, "isFirstDBQueryRun")
        && -[HMDHomeManager cloudkitAccountStatusDetermined](v20, "cloudkitAccountStatusDetermined")
        && -[HMDHomeManager missingHomeDataRecord](v20, "missingHomeDataRecord"))
      {
        objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "activeControllerPairingIdentifier");
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        if (v25 || !v18)
          goto LABEL_31;
        v26 = (void *)MEMORY[0x1D17BA0A0]();
        v27 = v20;
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v93 = v29;
          v94 = 2112;
          v95 = v18;
          _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_DEFAULT, "%{public}@Setting the active controller pairing identifier : %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v26);
        objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
        v23 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "updateActiveControllerPairingIdentifier:", v18);
      }
    }
    else
    {
      v30 = (void *)MEMORY[0x1D17BA0A0]();
      v31 = self;
      HMFGetOSLogHandle();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v93 = v33;
        _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_ERROR, "%{public}@Don't have icloud switch enabled will allow creation of new controller key", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v30);
      v89 = 0;
      v90 = 0;
      v88 = 0;
      v34 = -[HMDHomeManager getOrCreateControllerPublicKey:controllerUsername:error:](v31, "getOrCreateControllerPublicKey:controllerUsername:error:", &v90, &v89, &v88);
      v23 = v90;
      v18 = v89;
      v35 = v88;
      if (v34)
      {
        objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "activeControllerPairingIdentifier");
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v37)
        {
          v38 = (void *)MEMORY[0x1D17BA0A0]();
          v39 = v31;
          HMFGetOSLogHandle();
          v40 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v93 = v41;
            _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@No active controller username when icloud switch off", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v38);
          if (v18)
          {
            v42 = (void *)MEMORY[0x1D17BA0A0]();
            v43 = v39;
            HMFGetOSLogHandle();
            v44 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v93 = v45;
              v94 = 2112;
              v95 = v18;
              _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Setting the active controller pairing identifier with icloud switch off : %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v42);
            objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v46, "updateActiveControllerPairingIdentifier:", v18);

          }
        }
      }

    }
LABEL_31:

LABEL_32:
    objc_msgSend(v4, "stringForKey:", CFSTR("kHomeName"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      -[HMDHomeManager homes](self, "homes");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = objc_msgSend(v47, "count");
      v49 = maximumHomes;

      if (v48 < v49)
      {
        -[HMDHomeManager validateHomeName:](self, "validateHomeName:", v12);
        v50 = objc_claimAutoreleasedReturnValue();
        if (!v50)
        {
          v51 = (void *)MEMORY[0x1D17BA0A0]();
          v52 = self;
          HMFGetOSLogHandle();
          v53 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v93 = v54;
            v94 = 2112;
            v95 = v12;
            _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_INFO, "%{public}@Added home:%@ to namespace", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v51);
          objc_msgSend(v4, "uuidForKey:", CFSTR("kNewObjectUUIDKey"));
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          +[HMDUser ownerWithUserID:home:pairingIdentity:homeManager:](HMDUser, "ownerWithUserID:home:pairingIdentity:homeManager:", 0, 0, 0, v52);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          if (v56)
          {
            +[HMDUser UUIDWithUserID:forHomeIdentifier:uuid:pairingIdentity:](HMDUser, "UUIDWithUserID:forHomeIdentifier:uuid:pairingIdentity:", 0, v55, 0, 0);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v56, "setUUID:", v57);

            v58 = [HMDHome alloc];
            objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:](v58, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:", v12, v55, v59, v56, v52, 0);

            -[HMDHome modelObjectWithChangeType:](v60, "modelObjectWithChangeType:", 1);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v62 = v61;
            else
              v62 = 0;
            v63 = v62;

            if (v63)
            {
              v64 = objc_alloc_init(MEMORY[0x1E0C99D68]);
              objc_msgSend(v63, "setCreationDate:", v64);

              -[HMDHomeManager backingStore](v52, "backingStore");
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v4, "name");
              v85 = v55;
              v66 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v65, "transaction:options:", v66, v67);
              v68 = (void *)objc_claimAutoreleasedReturnValue();

              v55 = v85;
              objc_msgSend(v68, "add:withMessage:", v63, v4);
              v86[0] = MEMORY[0x1E0C809B0];
              v86[1] = 3221225472;
              v86[2] = __40__HMDHomeManager__handleRequestAddHome___block_invoke;
              v86[3] = &unk_1E89C21C0;
              v86[4] = v52;
              v87 = v12;
              objc_msgSend(v68, "run:", v86);

            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
            v60 = (HMDHome *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "respondWithError:", v60);
          }

          v75 = 0;
          goto LABEL_50;
        }
LABEL_49:
        v75 = (void *)v50;
        objc_msgSend(v4, "respondWithError:", v50);
LABEL_50:

        goto LABEL_51;
      }
      v71 = (void *)MEMORY[0x1D17BA0A0]();
      v72 = self;
      HMFGetOSLogHandle();
      v73 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v93 = v74;
        v94 = 2112;
        v95 = v12;
        _os_log_impl(&dword_1CD062000, v73, OS_LOG_TYPE_INFO, "%{public}@Can't add home %@; already at maximum homes",
          buf,
          0x16u);

      }
      objc_autoreleasePoolPop(v71);
      v69 = (void *)MEMORY[0x1E0CB35C8];
      v70 = 49;
    }
    else
    {
      v69 = (void *)MEMORY[0x1E0CB35C8];
      v70 = 20;
    }
    objc_msgSend(v69, "hmErrorWithCode:", v70);
    v50 = objc_claimAutoreleasedReturnValue();
    goto LABEL_49;
  }
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v93 = v10;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@HH2 sentinel zone exist but we are not running in HH2 mode. Creating a new home is not allowed in this case", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 9009);
  v11 = objc_claimAutoreleasedReturnValue();
LABEL_5:
  v12 = (void *)v11;
  objc_msgSend(v4, "respondWithError:", v11);
LABEL_51:

}

- (id)validateHomeName:(id)a3
{
  id v4;
  unint64_t v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = HMMaxLengthForNaming();
  if (objc_msgSend(v4, "length") > v5)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@New name is longer than the pre-defined max length", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v10 = (void *)MEMORY[0x1E0CB35C8];
    v11 = 46;
    goto LABEL_7;
  }
  -[HMDHomeManager _homeWithName:](self, "_homeWithName:", v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v10 = (void *)MEMORY[0x1E0CB35C8];
    v11 = 32;
LABEL_7:
    objc_msgSend(v10, "hmErrorWithCode:", v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  -[HMDHomeManager uuid](self, "uuid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager addName:namespace:](self, "addName:namespace:", v4, v15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13 && objc_msgSend(v13, "code") == 31)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 32);
    v16 = objc_claimAutoreleasedReturnValue();

    v13 = (void *)v16;
  }
LABEL_8:

  return v13;
}

- (void)processHomeModelAdd:(id)a3 message:(id)a4
{
  id v6;
  NSObject *logger;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  __CFString *v37;
  int v38;
  id v39;
  void *v40;
  HMDHomeManager *v41;
  NSObject *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void (**v51)(_QWORD, _QWORD, _QWORD);
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  const __CFString *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  HMDHomeManager *v62;
  void *v63;
  const __CFString *v64;
  id v65;
  void *v66;
  NSObject *v67;
  NSObject *v68;
  void *v69;
  NSObject *v70;
  void *v71;
  HMDHomeManager *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void (**v78)(_QWORD, _QWORD, _QWORD);
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  HMDHomeManager *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  const __CFString *v87;
  id v88;
  void *v89;
  NSObject *v90;
  NSObject *v91;
  void *v92;
  NSObject *v93;
  void *v94;
  void *v95;
  void *v96;
  HMDHome *v97;
  void *v98;
  HMDHome *v99;
  void *v100;
  void *v101;
  id v102;
  void *v103;
  void *v104;
  id v105;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  void *v110;
  HMDHomeManager *v111;
  NSObject *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  HMDHomeManager *v117;
  NSObject *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t i;
  id v130;
  char isKindOfClass;
  uint64_t v132;
  void *v133;
  int v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  HMDHomeManager *v139;
  void *v140;
  uint64_t v141;
  void *v142;
  _BOOL4 v143;
  void *v144;
  char v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  id v150;
  HMDHomeSaveRequest *v151;
  void *v152;
  uint64_t v153;
  void *v154;
  void *v155;
  void *v156;
  HMDHomeManager *v157;
  NSObject *v158;
  void *v159;
  void *v160;
  HMDHome *v161;
  void *v162;
  void *v163;
  void *v164;
  int v165;
  void *v166;
  void *v167;
  void *v168;
  HMDHomeManager *v169;
  NSObject *v170;
  void *v171;
  HMDHomeManager *v172;
  void *v173;
  id v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t j;
  void *v189;
  HMDActionSetModel *v190;
  void *v191;
  void *v192;
  HMDActionSetModel *v193;
  void *v194;
  void *v195;
  void *v196;
  HMDHomeManager *v197;
  void *v198;
  NSObject *v199;
  void *v200;
  void *v201;
  id v202;
  HMDHomeManager *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  _BOOL4 v208;
  HMDHomeManager *v209;
  void *v210;
  void *v211;
  void *v212;
  id v213;
  id obj;
  void *v215;
  HMDHome *v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  id v225;
  id v226;
  _BYTE v227[128];
  _QWORD v228[2];
  _QWORD v229[2];
  uint8_t v230[128];
  uint8_t buf[4];
  void *v232;
  __int16 v233;
  void *v234;
  __int16 v235;
  void *v236;
  _QWORD v237[2];
  _QWORD v238[2];
  _QWORD v239[3];
  _QWORD v240[3];
  const __CFString *v241;
  _QWORD v242[4];

  v242[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v213 = a4;
  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    v8 = logger;
    objc_msgSend(v6, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "parentUUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v232 = v9;
    v233 = 2112;
    v234 = v10;
    _os_signpost_emit_with_name_impl(&dword_1CD062000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "identifier=%{signpost.description:attribute}@ parentIdentifier=%{signpost.description:attribute}@ ", buf, 0x16u);

  }
  -[HMDHomeManager setupActivity](self, "setupActivity");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    -[HMDHomeManager setupActivity](self, "setupActivity");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v241 = CFSTR("HMDHomeModelUUID");
    objc_msgSend(v6, "uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HMDailyRotatedUUID();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "UUIDString");
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)v15;
    v17 = CFSTR("no uuid");
    if (v15)
      v17 = (const __CFString *)v15;
    v242[0] = v17;
    v18 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v242, &v241, 1);

    -[HMDHomeManager setupActivity](self, "setupActivity");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "markWithReason:", CFSTR("HMDHomeManager.processHomeModelAdd.processHomeModelAdd"));

  }
  objc_msgSend(v6, "name");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    v21 = objc_alloc(MEMORY[0x1E0D28658]);
    objc_msgSend(v6, "ownerPublicKey");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (void *)objc_msgSend(v21, "initWithPairingKeyData:", v22);

    v24 = objc_alloc(MEMORY[0x1E0D28650]);
    objc_msgSend(v6, "ownerName");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)objc_msgSend(v24, "initWithIdentifier:publicKey:privateKey:", v25, v23, 0);

    objc_msgSend(v6, "ownerUserID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDUser ownerWithUserID:home:pairingIdentity:homeManager:](HMDUser, "ownerWithUserID:home:pairingIdentity:homeManager:", v27, 0, v26, self);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    v212 = v20;
    v207 = v28;
    if (v28)
    {
      objc_msgSend(v6, "ownerUUID");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (v29)
      {
        v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v29);
        objc_msgSend(v28, "setUUID:", v30);

      }
      objc_msgSend(v213, "transactionResult");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      v210 = v23;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions stringForHMDBackingStoreTransactionSource:](HMDBackingStoreTransactionOptions, "stringForHMDBackingStoreTransactionSource:", objc_msgSend(v23, "source"));
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v232 = v34;
        v233 = 2112;
        v234 = v35;
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Process Home Model Add source: %@", buf, 0x16u);

        v23 = v210;
      }

      objc_autoreleasePoolPop(v31);
      v203 = self;
      if (objc_msgSend(v23, "source") == 1)
      {
        objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager activeAccountIdentifier](v32);
        v37 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (!v37)
        {
          v225 = 0;
          v226 = 0;
          v38 = objc_msgSend(v36, "getCurrentiCloudIdentifier:controllerPairingIdentifier:error:", &v226, &v225, 0);
          v37 = (__CFString *)v226;
          v39 = v225;
          if (!v38 || !-[__CFString length](v37, "length") || !objc_msgSend(v39, "length"))
          {
            v40 = (void *)MEMORY[0x1D17BA0A0]();
            v41 = v32;
            HMFGetOSLogHandle();
            v42 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v43 = v6;
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v232 = v44;
              _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_INFO, "%{public}@We don't have an active iCloud account, using the sentinel account identifier to remember the controller key", buf, 0xCu);

              v6 = v43;
              v28 = v207;
            }

            objc_autoreleasePoolPop(v40);
            v37 = CFSTR("__HomeKit_NoAccount_Identifier__");
            self = v203;
          }

        }
        objc_msgSend(v28, "pairingUsername");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "updateCurrentiCloudIdentifier:controllerPairingIdentifier:error:", v37, v45, 0);

        v23 = v210;
      }
      objc_msgSend(v6, "defaultRoomUUID");
      v46 = (void *)objc_claimAutoreleasedReturnValue();

      if (v46)
      {
        v47 = objc_alloc(MEMORY[0x1E0CB3A28]);
        objc_msgSend(v6, "defaultRoomUUID");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = objc_msgSend(v47, "initWithUUIDString:", v48);

      }
      else
      {
        v49 = 0;
      }
      v94 = (void *)MEMORY[0x1E0CBA950];
      objc_msgSend(v6, "presenceAuthorizationStatus");
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v94, "authWithNumber:", v95);
      v96 = (void *)objc_claimAutoreleasedReturnValue();

      v97 = [HMDHome alloc];
      objc_msgSend(v6, "uuid");
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      v206 = (void *)v49;
      v20 = v212;
      v99 = -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:](v97, "initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:");

      -[HMDHomeManager nameValidator](v32, "nameValidator");
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v99, "uuid");
      v101 = (void *)objc_claimAutoreleasedReturnValue();
      v102 = (id)objc_msgSend(v100, "addNamespace:", v101);

      -[HMDHome name](v99, "name");
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager uuid](v32, "uuid");
      v104 = (void *)objc_claimAutoreleasedReturnValue();
      v105 = -[HMDHomeManager addName:namespace:](v32, "addName:namespace:", v103, v104);

      -[HMDHome roomForEntireHome](v99, "roomForEntireHome");
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v106, "name");
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      v216 = v99;
      -[HMDHome uuid](v99, "uuid");
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      v109 = -[HMDHomeManager addName:namespace:](v32, "addName:namespace:", v107, v108);

      v110 = (void *)MEMORY[0x1D17BA0A0]();
      v111 = v32;
      HMFGetOSLogHandle();
      v112 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "pairingUsername");
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v232 = v113;
        v233 = 2112;
        v234 = v212;
        v235 = 2112;
        v236 = v114;
        _os_log_impl(&dword_1CD062000, v112, OS_LOG_TYPE_INFO, "%{public}@Created home %@ with administrator %@", buf, 0x20u);

        v23 = v210;
      }

      objc_autoreleasePoolPop(v110);
      -[HMDHome uuid](v216, "uuid");
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _updateHome:configurationVersion:](v111, "_updateHome:configurationVersion:", v115, -[HMDHome configurationVersion](v216, "configurationVersion"));

      -[HMDHomeManager addHome:](v111, "addHome:", v216);
      -[HMDHome refreshUserDisplayNames](v216, "refreshUserDisplayNames");
      if (objc_msgSend(v23, "source") == 1)
      {
        v202 = v6;
        v116 = (void *)MEMORY[0x1D17BA0A0]();
        v117 = v111;
        HMFGetOSLogHandle();
        v118 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v119 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome name](v216, "name");
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v232 = v119;
          v233 = 2112;
          v234 = v120;
          _os_log_impl(&dword_1CD062000, v118, OS_LOG_TYPE_INFO, "%{public}@Saving addition objects created during creation of home %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v116);
        -[HMDHome setupBackingStore](v216, "setupBackingStore");
        -[HMDHome backingStore](v216, "backingStore");
        v121 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v213, "name");
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v121, "transaction:options:", v122, v123);
        v124 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHome backingStoreObjects:](v216, "backingStoreObjects:", 4);
        v125 = (void *)objc_claimAutoreleasedReturnValue();
        v221 = 0u;
        v222 = 0u;
        v223 = 0u;
        v224 = 0u;
        v126 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v221, v230, 16);
        if (v126)
        {
          v127 = v126;
          v128 = *(_QWORD *)v222;
          do
          {
            for (i = 0; i != v127; ++i)
            {
              if (*(_QWORD *)v222 != v128)
                objc_enumerationMutation(v125);
              v130 = *(id *)(*((_QWORD *)&v221 + 1) + 8 * i);
              objc_opt_class();
              isKindOfClass = objc_opt_isKindOfClass();

              if ((isKindOfClass & 1) == 0 || !v130)
                objc_msgSend(v124, "add:withMessage:", v130, 0);
            }
            v127 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v221, v230, 16);
          }
          while (v127);
        }
        objc_msgSend(v124, "save");

        v6 = v202;
        self = v203;
        v23 = v210;
        v20 = v212;
      }
      v132 = objc_msgSend(v23, "source");
      -[HMDHome configureWithHomeManager:accessoriesPresent:uncommittedTransactions:source:](v216, "configureWithHomeManager:accessoriesPresent:uncommittedTransactions:source:", v111, 0, MEMORY[0x1E0C9AA60], v132);
      if (-[HMDHome isOwnerUser](v216, "isOwnerUser"))
      {
        +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
        v133 = (void *)objc_claimAutoreleasedReturnValue();
        v134 = objc_msgSend(v133, "isResidentCapable");

        if (v134)
        {
          -[HMDHomeManager notificationCenter](v111, "notificationCenter");
          v135 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v135, "addObserver:selector:name:object:", v111, sel_handleHomeCurrentDeviceResidentEligibleNotification_, CFSTR("HMDHomeCurrentDeviceHasReachableAccessories"), v216);

          -[HMDHomeManager appleAccountManager](v111, "appleAccountManager");
          v136 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v136, "device");
          v137 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v213, "name");
          v138 = (void *)objc_claimAutoreleasedReturnValue();
          v139 = self;
          if ((objc_msgSend(v138, "isEqualToString:", CFSTR("kAddHomeRequestKey")) & 1) != 0)
          {
            -[HMDHomeManager capabilitiesController](v111, "capabilitiesController");
            v140 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v140, "currentResidentCapabilities");
            v141 = objc_claimAutoreleasedReturnValue();
            if (v141)
            {
              v142 = (void *)v141;
              v143 = -[HMDHomeManager isResidentEnabled](v111, "isResidentEnabled");

              v23 = v210;
              if (v143)
              {
                -[HMDHome residentCapableDevices](v216, "residentCapableDevices");
                v144 = (void *)objc_claimAutoreleasedReturnValue();
                v145 = objc_msgSend(v144, "containsObject:", v137);

                if ((v145 & 1) == 0)
                  -[HMDHome addResidentCapableDevice:](v216, "addResidentCapableDevice:", v137);
              }
            }
            else
            {

              v23 = v210;
            }
          }
          else
          {

          }
          self = v139;
        }
      }
      -[HMDHomeManager updateHomeKitInUsePreferences](v111, "updateHomeKitInUsePreferences");
      -[HMDHomeManager cloudDataSyncStateFilter](v111, "cloudDataSyncStateFilter");
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager homes](v111, "homes");
      v147 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v146, "updateTotalHomes:", objc_msgSend(v147, "count"));

      v148 = (void *)objc_msgSend(v213, "mutableCopy");
      objc_msgSend(v148, "setResponseHandler:", 0);
      v205 = v148;
      v149 = (void *)objc_msgSend(v148, "copy");
      v150 = -[HMDHome updateHomeWithModel:message:](v216, "updateHomeWithModel:message:", v6, v149);

      v151 = [HMDHomeSaveRequest alloc];
      objc_msgSend(v213, "name");
      v152 = (void *)objc_claimAutoreleasedReturnValue();
      v153 = -[HMDHomeSaveRequest initWithHome:reason:information:postSyncNotification:objectChange:](v151, "initWithHome:reason:information:postSyncNotification:objectChange:", v216, v152, 0, 1, 1);

      v204 = (void *)v153;
      -[HMDHomeManager _saveWithRequest:](v111, "_saveWithRequest:", v153);
      -[HMDHome zoneID](v216, "zoneID");
      v154 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome ownerName](v216, "ownerName");
      v155 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _addCloudZone:ownerName:](v111, "_addCloudZone:ownerName:", v154, v155);

      v156 = (void *)MEMORY[0x1D17BA0A0]();
      v157 = v111;
      HMFGetOSLogHandle();
      v158 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v158, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v159 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v232 = v159;
        v233 = 2112;
        v234 = v20;
        _os_log_impl(&dword_1CD062000, v158, OS_LOG_TYPE_INFO, "%{public}@Add home: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v156);
      -[HMDHomeManager homes](v157, "homes");
      v160 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v160, "count") == 1)
      {
        v208 = 1;
        v161 = v216;
      }
      else
      {
        -[HMDHomeManager primaryHomeUUID](v157, "primaryHomeUUID");
        v162 = (void *)objc_claimAutoreleasedReturnValue();
        if (v162)
          v208 = 0;
        else
          v208 = objc_msgSend(v23, "source") != 1;
        v161 = v216;

      }
      -[HMDHomeManager uuidsOfRemovedHomes](v157, "uuidsOfRemovedHomes");
      v163 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHome uuid](v161, "uuid");
      v164 = (void *)objc_claimAutoreleasedReturnValue();
      v165 = objc_msgSend(v163, "containsObject:", v164);

      v209 = v157;
      if (v165)
      {
        -[HMDHomeManager uuidsOfRemovedHomes](v157, "uuidsOfRemovedHomes");
        v166 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHome uuid](v161, "uuid");
        v167 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v166, "removeObject:", v167);

        v168 = (void *)MEMORY[0x1D17BA0A0]();
        v169 = v157;
        HMFGetOSLogHandle();
        v170 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v170, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v171 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHome uuid](v161, "uuid");
          v172 = self;
          v173 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v173, "UUIDString");
          v174 = v6;
          v175 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v232 = v171;
          v233 = 2112;
          v234 = v175;
          _os_log_impl(&dword_1CD062000, v170, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

          self = v172;
          v20 = v212;

          v6 = v174;
          v157 = v209;

          v23 = v210;
        }

        objc_autoreleasePoolPop(v168);
      }
      -[HMDHome owner](v161, "owner");
      v176 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v176, "account");
      v177 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v177, "senderCorrelationIdentifier");
      v178 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _stopTrackingRemovedHomeUserMergeId:](v157, "_stopTrackingRemovedHomeUserMergeId:", v178);

      v228[0] = CFSTR("kHomeDataKey");
      if (objc_msgSend(v213, "isEntitledForSPIAccess"))
        encodeRootObjectForSPIClients(v161);
      else
        encodeRootObjectForIncomingXPCMessage(v161, 0);
      v179 = (void *)objc_claimAutoreleasedReturnValue();
      v229[0] = v179;
      v228[1] = *MEMORY[0x1E0CB8FD8];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v208);
      v180 = (void *)objc_claimAutoreleasedReturnValue();
      v229[1] = v180;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v229, v228, 2);
      v181 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v213, "respondWithPayload:", v181);

      if (-[HMDHome isOwnerUser](v161, "isOwnerUser") && objc_msgSend(v23, "source") == 1)
      {
        v201 = v96;
        -[HMDHome backingStore](v161, "backingStore");
        v182 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v183 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v182, "transaction:options:", CFSTR("kBuiltinActionSetsKey"), v183);
        v184 = (void *)objc_claimAutoreleasedReturnValue();

        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        -[HMDHome builtInActionSetInfo](v161, "builtInActionSetInfo");
        obj = (id)objc_claimAutoreleasedReturnValue();
        v185 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v217, v227, 16);
        if (v185)
        {
          v186 = v185;
          v187 = *(_QWORD *)v218;
          do
          {
            for (j = 0; j != v186; ++j)
            {
              if (*(_QWORD *)v218 != v187)
                objc_enumerationMutation(obj);
              v189 = *(void **)(*((_QWORD *)&v217 + 1) + 8 * j);
              v190 = [HMDActionSetModel alloc];
              objc_msgSend(v189, "hmf_UUIDForKey:", CFSTR("kActionSetUUID"));
              v191 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHome uuid](v216, "uuid");
              v192 = (void *)objc_claimAutoreleasedReturnValue();
              v193 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v190, "initWithObjectChangeType:uuid:parentUUID:", 1, v191, v192);

              objc_msgSend(v189, "hmf_stringForKey:", CFSTR("kActionSetName"));
              v194 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDActionSetModel setName:](v193, "setName:", v194);

              objc_msgSend(v189, "hmf_stringForKey:", CFSTR("kActionSetType"));
              v195 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDActionSetModel setType:](v193, "setType:", v195);

              objc_msgSend(v184, "add:withMessage:", v193, 0);
            }
            v186 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v217, v227, 16);
          }
          while (v186);
        }

        objc_msgSend(v184, "save");
        self = v203;
        v23 = v210;
        v20 = v212;
        v96 = v201;
        v161 = v216;
        v157 = v209;
      }
      -[HMDHomeManager notificationCenter](v157, "notificationCenter");
      v196 = (void *)objc_claimAutoreleasedReturnValue();
      v197 = v157;
      v198 = v196;
      objc_msgSend(v196, "postNotificationName:object:userInfo:", CFSTR("HMDHomeAddedNotification"), v197, 0);

      v199 = self->_logger;
      if (os_signpost_enabled(v199))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1CD062000, v199, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", ", buf, 2u);
      }
      v26 = v206;
      if (v208)
      {
        -[HMDHome uuid](v161, "uuid");
        v200 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _changePrimaryHome:](v209, "_changePrimaryHome:", v200);

        -[HMDHomeManager _updateCurrentHomeIfNecessary](v209, "_updateCurrentHomeIfNecessary");
      }
      -[HMDHomeManager updateCurrentUserEligibleForOwnerToAutoMigration](v209, "updateCurrentUserEligibleForOwnerToAutoMigration");

      v28 = v207;
    }
    else
    {
      v71 = (void *)MEMORY[0x1D17BA0A0]();
      v72 = self;
      HMFGetOSLogHandle();
      v73 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v74 = v26;
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v232 = v75;
        v233 = 2112;
        v234 = v20;
        _os_log_impl(&dword_1CD062000, v73, OS_LOG_TYPE_ERROR, "%{public}@Failed to create owner user while trying to create home with name %@", buf, 0x16u);

        v26 = v74;
      }

      objc_autoreleasePoolPop(v71);
      objc_msgSend(v213, "responseHandler");
      v76 = (void *)objc_claimAutoreleasedReturnValue();

      if (v76)
      {
        v211 = v23;
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v213, "responseHandler");
        v78 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v78)[2](v78, v77, 0);

        -[HMDHomeManager setupActivity](v72, "setupActivity");
        v79 = (void *)objc_claimAutoreleasedReturnValue();

        if (v79)
        {
          -[HMDHomeManager setupActivity](v72, "setupActivity");
          v215 = (void *)objc_claimAutoreleasedReturnValue();
          v237[0] = CFSTR("errorCode");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v77, "code"));
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          v237[1] = CFSTR("HMDHomeModelUUID");
          v238[0] = v80;
          objc_msgSend(v6, "uuid");
          v81 = v26;
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          HMDailyRotatedUUID();
          v83 = self;
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v84, "UUIDString");
          v85 = objc_claimAutoreleasedReturnValue();
          v86 = (void *)v85;
          v87 = CFSTR("no uuid");
          if (v85)
            v87 = (const __CFString *)v85;
          v238[1] = v87;
          v88 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v238, v237, 2);

          v28 = 0;
          self = v83;
          v20 = v212;

          v26 = v81;
          -[HMDHomeManager setupActivity](v72, "setupActivity");
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v89, "markWithReason:", CFSTR("HMDHomeManager.processHomeModelAdd.processHomeModelAdd"));

          v90 = self->_logger;
          if (os_signpost_enabled(v90))
          {
            v91 = v90;
            objc_msgSend(v77, "stringValueSafe");
            v92 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v232 = v92;
            _os_signpost_emit_with_name_impl(&dword_1CD062000, v91, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "Error=%{signpost.description:attribute}@ ", buf, 0xCu);

          }
        }

        v23 = v211;
      }
      v93 = self->_logger;
      if (os_signpost_enabled(v93))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1CD062000, v93, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", ", buf, 2u);
      }
    }

LABEL_105:
    goto LABEL_106;
  }
  objc_msgSend(v213, "responseHandler");
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  if (v50)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v213, "responseHandler");
    v51 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v51)[2](v51, v28, 0);

    -[HMDHomeManager setupActivity](self, "setupActivity");
    v52 = (void *)objc_claimAutoreleasedReturnValue();

    if (v52)
    {
      -[HMDHomeManager setupActivity](self, "setupActivity");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v239[0] = CFSTR("errorCode");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v28, "code"));
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v240[0] = v54;
      v239[1] = CFSTR("domain");
      objc_msgSend(v28, "domain");
      v55 = objc_claimAutoreleasedReturnValue();
      v56 = (void *)v55;
      v57 = &stru_1E89C3E38;
      if (v55)
        v57 = (const __CFString *)v55;
      v240[1] = v57;
      v239[2] = CFSTR("HMDHomeModelUUID");
      objc_msgSend(v6, "uuid");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      HMDailyRotatedUUID();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "UUIDString");
      v60 = objc_claimAutoreleasedReturnValue();
      v61 = v28;
      v62 = self;
      v63 = (void *)v60;
      v64 = CFSTR("no uuid");
      if (v60)
        v64 = (const __CFString *)v60;
      v240[2] = v64;
      v65 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v240, v239, 3);

      self = v62;
      v28 = v61;

      -[HMDHomeManager setupActivity](self, "setupActivity");
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v66, "markWithReason:", CFSTR("HMDHomeManager.processHomeModelAdd.processHomeModelAdd"));

      v67 = self->_logger;
      if (os_signpost_enabled(v67))
      {
        v68 = v67;
        objc_msgSend(v28, "stringValueSafe");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v232 = v69;
        _os_signpost_emit_with_name_impl(&dword_1CD062000, v68, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", "Error=%{signpost.description:attribute}@ ", buf, 0xCu);

      }
    }
    v70 = self->_logger;
    if (os_signpost_enabled(v70))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1CD062000, v70, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "HomeModelAdd", ", buf, 2u);
    }
    v20 = 0;
    goto LABEL_105;
  }
LABEL_106:

}

- (void)_removeHome:(id)a3 withMessage:(id)a4 saveToStore:(BOOL)a5 notifyUsers:(BOOL)a6 shouldRemovePairings:(BOOL)a7
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  BOOL v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  BOOL v30;
  void *v31;
  _BOOL4 v32;
  _QWORD v33[5];
  id v34;
  id v35;
  id v36;
  id v37;
  BOOL v38;
  BOOL v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v32 = a7;
  v44 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = a4;
  objc_msgSend(v11, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "owner");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "account");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "senderCorrelationIdentifier");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager pendingHomesBeingRemoved](self, "pendingHomesBeingRemoved");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "addObject:", v13);

  objc_msgSend(v12, "transactionResult");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v18, "markChanged"));
  v20 = self;
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v31 = v18;
    v30 = a5;
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "name");
    v23 = a6;
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v41 = v22;
    v42 = 2112;
    v43 = v24;
    _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Removing all accessories for home %@", buf, 0x16u);

    a6 = v23;
    a5 = v30;
    v18 = v31;
  }

  objc_autoreleasePoolPop(v19);
  -[HMDHomeManager workQueue](v20, "workQueue");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke;
  v33[3] = &unk_1E89BD7D0;
  v33[4] = v20;
  v34 = v11;
  v38 = a6;
  v35 = v13;
  v36 = v16;
  v39 = a5;
  v37 = v12;
  v26 = v12;
  v27 = v16;
  v28 = v13;
  v29 = v11;
  objc_msgSend(v29, "removeAllHomeContentsAndAccessoryPairings:queue:completionHandler:", v32, v25, v33);

}

- (void)scheduleRemovalForHome:(id)a3 message:(id)a4 options:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  __CFString *v16;
  __CFString *v17;
  void *v18;
  id v19;
  __CFString *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  __CFString *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id location[4];

  location[3] = *(id *)MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (v8)
  {
    v11 = v8;
    objc_msgSend(v11, "name");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "zoneID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "name");
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = (void *)v14;
    v16 = CFSTR("kHomeManagerUpdatedKey");
    if (v14)
      v16 = (__CFString *)v14;
    v17 = v16;

    -[HMDHomeManager syncManager](self, "syncManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(location, self);
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke;
    v29[3] = &unk_1E89BD820;
    objc_copyWeak(&v37, location);
    v19 = v11;
    v30 = v19;
    v20 = v17;
    v31 = v20;
    v32 = v10;
    v33 = v9;
    v21 = v13;
    v34 = v21;
    v22 = v12;
    v35 = v22;
    v23 = v18;
    v36 = v23;
    objc_msgSend(v23, "pauseAndWaitForCurrentOperationCompletion:", v29);

    objc_destroyWeak(&v37);
    objc_destroyWeak(location);

    goto LABEL_9;
  }
  v24 = (void *)MEMORY[0x1D17BA0A0]();
  v25 = self;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(location[0]) = 138543362;
    *(id *)((char *)location + 4) = v27;
    _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_ERROR, "%{public}@Cannot schedule removal of home because the home was not specified", (uint8_t *)location, 0xCu);

  }
  objc_autoreleasePoolPop(v24);
  objc_msgSend(v9, "responseHandler");
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (v28)
  {
    objc_msgSend(v9, "responseHandler");
    v19 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, id, _QWORD))v19 + 2))(v19, v22, 0);
LABEL_9:

  }
}

- (void)_handleRemoveHomeOperation:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  id v8;

  v6 = a4;
  v7 = a3;
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager scheduleRemovalForHome:message:options:](self, "scheduleRemovalForHome:message:options:", v7, v6, v8);

}

- (void)_handleRequestRemoveHome:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  id v18;
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    if (objc_msgSend(v4, "isEntitledForSPIAccess"))
    {
      -[HMDHomeManager _handleRemoveHomeOperation:message:](self, "_handleRemoveHomeOperation:message:", v6, v4);
    }
    else
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v22 = v13;
        v23 = 2112;
        v24 = v6;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Presenting delete home confirmation dialog to user for %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      +[HMDUIDialogPresenter sharedUIDialogPresenter](HMDUIDialogPresenter, "sharedUIDialogPresenter");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "name");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager workQueue](v11, "workQueue");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = __43__HMDHomeManager__handleRequestRemoveHome___block_invoke;
      v17[3] = &unk_1E89BD848;
      v17[4] = v11;
      v18 = v5;
      v19 = v6;
      v20 = v4;
      objc_msgSend(v14, "requestUserPermissionForDeletionOfHomeWithName:withContext:queue:completionHandler:", v15, v18, v16, v17);

    }
  }
  else
  {
    objc_msgSend(v4, "responseHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v4, "responseHandler");
      v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v9, 0);

    }
  }

}

- (void)processHomeModelRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _BOOL8 v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  int v22;
  void *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543874;
    v23 = v11;
    v24 = 2112;
    v25 = v6;
    v26 = 2112;
    v27 = v7;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Removing home model : %@ due to message: %@", (uint8_t *)&v22, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v6, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    -[HMDHomeManager _homeWithUUID:](v9, "_homeWithUUID:", v12);
    v13 = objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v14 = (void *)v13;
      objc_msgSend(v7, "transactionResult");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "source") == 1;

      -[HMDHomeManager _removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:](v9, "_removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:", v14, v7, 1, 1, v16);
    }
    else
    {
      objc_msgSend(v7, "responseHandler");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (v19)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "responseHandler");
        v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v21)[2](v21, v20, 0);

      }
      v14 = 0;
    }
    goto LABEL_11;
  }
  objc_msgSend(v7, "responseHandler");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v14, 0);

LABEL_11:
  }

}

- (void)_handleRequestSetPrimaryHome:(id)a3
{
  void *v4;
  void *v5;
  HMDHomeManagerModel *v6;
  void *v7;
  HMDHomeManagerModel *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  void *v14;
  void *v15;
  id v16;

  v16 = a3;
  objc_msgSend(v16, "uuidForKey:", CFSTR("kHomeUUID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = [HMDHomeManagerModel alloc];
      -[HMDHomeManager uuid](self, "uuid");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v6, "initWithObjectChangeType:uuid:parentUUID:", 1, v7, 0);

      objc_msgSend(v4, "UUIDString");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManagerModel setPrimaryHomeUUID:](v8, "setPrimaryHomeUUID:", v9);

      -[HMDHomeManager backingStore](self, "backingStore");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "transaction:options:", v11, v12);
      v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      objc_msgSend(v13, "add:withMessage:", v8, v16);
      objc_msgSend(v13, "run");
    }
    else
    {
      objc_msgSend(v16, "responseHandler");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v15)
      {
        v5 = 0;
        goto LABEL_10;
      }
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v8 = (HMDHomeManagerModel *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "responseHandler");
      v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, HMDHomeManagerModel *, _QWORD))v13)[2](v13, v8, 0);
    }

LABEL_9:
LABEL_10:

    goto LABEL_11;
  }
  objc_msgSend(v16, "responseHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "responseHandler");
    v8 = (HMDHomeManagerModel *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(HMDHomeManagerModel *, void *, _QWORD))&v8->super._bsoDataVersionOverride)(v8, v5, 0);
    goto LABEL_9;
  }
LABEL_11:

}

- (void)_changePrimaryHome:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  HMDHomeManagerModel *v12;
  void *v13;
  HMDHomeManagerModel *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = HMFEqualObjects();

    if ((v6 & 1) == 0)
    {
      v7 = (void *)MEMORY[0x1D17BA0A0]();
      v8 = self;
      HMFGetOSLogHandle();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager primaryHomeUUID](v8, "primaryHomeUUID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138543874;
        v20 = v10;
        v21 = 2112;
        v22 = v11;
        v23 = 2112;
        v24 = v4;
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Updating the primary home from %@ to %@", (uint8_t *)&v19, 0x20u);

      }
      objc_autoreleasePoolPop(v7);
      v12 = [HMDHomeManagerModel alloc];
      -[HMDHomeManager uuid](v8, "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v12, "initWithObjectChangeType:uuid:parentUUID:", 1, v13, 0);

      objc_msgSend(v4, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManagerModel setPrimaryHomeUUID:](v14, "setPrimaryHomeUUID:", v15);

      -[HMDHomeManager backingStore](v8, "backingStore");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "transaction:options:", CFSTR("HMD.hm"), v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v18, "add:withMessage:", v14, 0);
      objc_msgSend(v18, "run");

    }
  }

}

- (void)processHomeManagerModelUpdate:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v6, "propertyWasSet:", CFSTR("primaryHomeUUID")))
  {
    objc_msgSend(v6, "primaryHomeUUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v9 = objc_alloc(MEMORY[0x1E0CB3A28]);
      objc_msgSend(v6, "primaryHomeUUID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = (void *)objc_msgSend(v9, "initWithUUIDString:", v10);

      -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = HMFEqualObjects();

      if ((v13 & 1) == 0)
      {
        v14 = (void *)MEMORY[0x1D17BA0A0]();
        v15 = self;
        HMFGetOSLogHandle();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = 138543618;
          v23 = v17;
          v24 = 2112;
          v25 = v11;
          _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Applying primary home UUID: %@", (uint8_t *)&v22, 0x16u);

        }
        objc_autoreleasePoolPop(v14);
        -[HMDHomeManager setPrimaryHomeUUID:](v15, "setPrimaryHomeUUID:", v11);
        v18 = (void *)objc_opt_new();
        -[HMDHomeManager primaryHomeUUID](v15, "primaryHomeUUID");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v19, CFSTR("HMDPrimaryHomeUUIDKey"));

        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "postNotificationName:object:userInfo:", CFSTR("HMDNotificationPrimaryHomeDidChange"), v15, v18);

      }
    }
  }
  objc_msgSend(v7, "transactionResult");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "markChanged");
  objc_msgSend(v7, "respondWithSuccess");

}

- (BOOL)_zonesFetched
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  BOOL v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHomeManager cloudZones](self, "cloudZones", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "isFirstFetch") & 1) != 0)
        {
          v8 = 0;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }
  v8 = 1;
LABEL_11:

  return v8;
}

- (BOOL)zoneFetchFailed
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  -[HMDHomeManager cloudZones](self, "cloudZones", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v3);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "didFetchFailed") & 1) != 0)
        {
          LOBYTE(v4) = 1;
          goto LABEL_11;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_11:

  return v4;
}

- (void)_addCloudZone:(id)a3 ownerName:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDCloudZoneInformation *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = v7;
  if (v6)
  {
    if (v7)
    {
      -[HMDHomeManager _zoneInformationWithUUID:](self, "_zoneInformationWithUUID:", v6);
      v9 = (HMDCloudZoneInformation *)objc_claimAutoreleasedReturnValue();
      if (!v9)
      {
        v9 = -[HMDCloudZoneInformation initWithOwnerName:uuid:]([HMDCloudZoneInformation alloc], "initWithOwnerName:uuid:", v8, v6);
        -[HMDHomeManager cloudZones](self, "cloudZones");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "addObject:", v9);

      }
    }
    else
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "UUIDString");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543618;
        v17 = v14;
        v18 = 2112;
        v19 = v15;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Cannot add zone because the ownerName was not specified, %@", (uint8_t *)&v16, 0x16u);

      }
      objc_autoreleasePoolPop(v11);
    }
  }

}

- (void)addTransactionAfterPush:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDCloudZoneInformationModel *v7;
  void *v8;
  void *v9;
  HMDCloudZoneInformationModel *v10;
  void *v11;
  id v12;

  if (a3)
  {
    v4 = a3;
    -[HMDHomeManager backingStore](self, "backingStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "transaction:options:", CFSTR("kHomeManagerCloudZoneAddedKey"), v6);
    v12 = (id)objc_claimAutoreleasedReturnValue();

    v7 = [HMDCloudZoneInformationModel alloc];
    objc_msgSend(v4, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager uuid](self, "uuid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v7, "initWithObjectChangeType:uuid:parentUUID:", 1, v8, v9);

    objc_msgSend(v4, "ownerName");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDCloudZoneInformationModel setOwnerName:](v10, "setOwnerName:", v11);
    -[HMDCloudZoneInformationModel setRequiresHomeManagerUpdate:](v10, "setRequiresHomeManagerUpdate:", 1);
    objc_msgSend(v12, "add:withMessage:", v10, 0);
    objc_msgSend(v12, "run");

  }
}

- (void)_removeCloudZone:(id)a3 updateHomeManager:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDCloudZoneInformationModel *v11;
  void *v12;
  HMDCloudZoneInformationModel *v13;
  id v14;

  v4 = a4;
  v6 = a3;
  if (v6)
  {
    v14 = v6;
    -[HMDHomeManager _zoneInformationWithUUID:](self, "_zoneInformationWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[HMDHomeManager backingStore](self, "backingStore");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "transaction:options:", CFSTR("kHomeManagerCloudZoneRemovedKey"), v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      v11 = [HMDCloudZoneInformationModel alloc];
      -[HMDHomeManager uuid](self, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v11, "initWithObjectChangeType:uuid:parentUUID:", 3, v14, v12);

      -[HMDCloudZoneInformationModel setRequiresHomeManagerUpdate:](v13, "setRequiresHomeManagerUpdate:", v4);
      objc_msgSend(v10, "add:withMessage:", v13, 0);
      objc_msgSend(v10, "run");

    }
    v6 = v14;
  }

}

- (void)processCloudZoneModelAdd:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDCloudZoneInformation *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDCloudZoneInformation *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  HMDHomeManagerModel *v30;
  void *v31;
  HMDHomeManagerModel *v32;
  void *v33;
  void *v34;
  _QWORD v35[4];
  id v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _zoneInformationWithUUID:](self, "_zoneInformationWithUUID:", v8);
  v9 = (HMDCloudZoneInformation *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (v9)
  {
    if (v13)
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "ownerName");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v14;
      v39 = 2112;
      v40 = v15;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Processing zone model update %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    -[HMDCloudZoneInformation updateCloudZoneInformationWithModel:message:](v9, "updateCloudZoneInformationWithModel:message:", v6, v7);
  }
  else
  {
    if (v13)
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "ownerName");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v16;
      v39 = 2112;
      v40 = v17;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Processing zone model add %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    v18 = [HMDCloudZoneInformation alloc];
    objc_msgSend(v6, "ownerName");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDCloudZoneInformation initWithOwnerName:uuid:](v18, "initWithOwnerName:uuid:", v19, v20);

    -[HMDCloudZoneInformation updateCloudZoneInformationWithModel:message:](v9, "updateCloudZoneInformationWithModel:message:", v6, v7);
    -[HMDHomeManager cloudZones](v11, "cloudZones");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "addObject:", v9);

    -[HMDHomeManager cloudDataSyncManager](v11, "cloudDataSyncManager");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDCloudZoneInformation uuid](v9, "uuid");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "UUIDString");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDCloudZoneInformation ownerName](v9, "ownerName");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addHomeZoneName:owner:", v24, v25);

  }
  objc_msgSend(v7, "transactionResult");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "markChanged");
  if (objc_msgSend(v6, "requiresHomeManagerUpdate"))
  {
    -[HMDHomeManager backingStore](v11, "backingStore");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "transaction:options:", CFSTR("kHomeManagerUpdatedKey"), v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    v30 = [HMDHomeManagerModel alloc];
    -[HMDHomeManager uuid](v11, "uuid");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v30, "initWithObjectChangeType:uuid:parentUUID:", 1, v31, 0);

    -[HMDHomeManager cloudZones](v11, "cloudZones");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:](HMDCloudZoneInformation, "cloudZoneInformationWithCloudZones:", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManagerModel setCloudZoneInformation:](v32, "setCloudZoneInformation:", v34);

    objc_msgSend(v29, "add:withMessage:", v32, 0);
    objc_initWeak((id *)buf, v11);
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = __51__HMDHomeManager_processCloudZoneModelAdd_message___block_invoke;
    v35[3] = &unk_1E89C0678;
    objc_copyWeak(&v36, (id *)buf);
    objc_msgSend(v29, "save:", v35);
    objc_destroyWeak(&v36);
    objc_destroyWeak((id *)buf);

  }
  objc_msgSend(v7, "respondWithPayload:", 0);

}

- (void)processCloudZoneModelRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHomeManagerModel *v22;
  void *v23;
  HMDHomeManagerModel *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, void *);
  void *v30;
  id v31;
  id location;

  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _zoneInformationWithUUID:](self, "_zoneInformationWithUUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[HMDHomeManager cloudZones](self, "cloudZones");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeObject:", v9);

    objc_msgSend(v7, "transactionResult");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "markChanged");
    objc_msgSend(v9, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithZoneID:](self, "_homeWithZoneID:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      +[HMDBackingStoreTransactionOptions defaultCloudOptions](HMDBackingStoreTransactionOptions, "defaultCloudOptions");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager scheduleRemovalForHome:message:options:](self, "scheduleRemovalForHome:message:options:", v13, 0, v14);
    }
    else
    {
      -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "UUIDString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "removeHomeZoneName:", v18);

    }
    if (objc_msgSend(v6, "requiresHomeManagerUpdate"))
    {
      -[HMDHomeManager backingStore](self, "backingStore");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "transaction:options:", CFSTR("kHomeManagerUpdatedKey"), v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      v22 = [HMDHomeManagerModel alloc];
      -[HMDHomeManager uuid](self, "uuid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v22, "initWithObjectChangeType:uuid:parentUUID:", 1, v23, 0);

      -[HMDHomeManager cloudZones](self, "cloudZones");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:](HMDCloudZoneInformation, "cloudZoneInformationWithCloudZones:", v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManagerModel setCloudZoneInformation:](v24, "setCloudZoneInformation:", v26);

      objc_msgSend(v21, "add:withMessage:", v24, 0);
      objc_initWeak(&location, self);
      v27 = MEMORY[0x1E0C809B0];
      v28 = 3221225472;
      v29 = __55__HMDHomeManager_processCloudZoneModelRemoved_message___block_invoke;
      v30 = &unk_1E89C0678;
      objc_copyWeak(&v31, &location);
      objc_msgSend(v21, "save:", &v27);
      objc_destroyWeak(&v31);
      objc_destroyWeak(&location);

    }
    objc_msgSend(v7, "respondWithPayload:", 0, v27, v28, v29, v30);

    goto LABEL_10;
  }
  objc_msgSend(v7, "responseHandler");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v16)[2](v16, v11, 0);

LABEL_10:
  }

}

- (void)_handleRequestIsUserUsingHomeKit:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    v12[0] = CFSTR("kHomeKitInUseKey");
    v12[1] = CFSTR("kHomeKitUsingCloudKey");
    v13[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHomeManager accountActive](self, "accountActive"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v13[1] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10[0] = CFSTR("kHomeKitInUseKey");
    v10[1] = CFSTR("kHomeKitUsingCloudKey");
    v11[0] = MEMORY[0x1E0C9AAA0];
    v11[1] = MEMORY[0x1E0C9AAA0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v4, "responseHandler");
  v9 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v8);
}

- (void)_updateHome:(id)a3 configurationVersion:(int64_t)a4
{
  id v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  int64_t v11;

  v6 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager__updateHome_configurationVersion___block_invoke;
  block[3] = &unk_1E89BE2F0;
  block[4] = self;
  v10 = v6;
  v11 = a4;
  v8 = v6;
  dispatch_async(v7, block);

}

- (void)_removeConfigurationVersionForHome:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __53__HMDHomeManager__removeConfigurationVersionForHome___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (BOOL)_capabilitiesAreSupported:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  void *v33;
  BOOL v34;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v40;
  HMDHomeManager *v41;
  NSObject *v42;
  void *v43;
  uint64_t v44;
  HMDHomeManager *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t v54[128];
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  id v58;
  __int16 v59;
  id v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v56 = v8;
    v57 = 2114;
    v58 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Checking for capabilities %{public}@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v9 = v4;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v51;
    v44 = *(_QWORD *)v51;
    v45 = v6;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v51 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * i);
        if (objc_msgSend(v14, "isEqualToString:", CFSTR("kDeviceClassTypeKey"), v44, v45))
        {
          objc_msgSend(v9, "hmf_stringForKey:", CFSTR("kDeviceClassTypeKey"));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          getDeviceClass();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "isEqualToString:", v16);

          if ((v17 & 1) == 0)
            goto LABEL_38;
        }
        else if (objc_msgSend(v14, "isEqualToString:", CFSTR("kHomedVersionKey")))
        {
          objc_msgSend(v9, "hmf_numberForKey:", CFSTR("kHomedVersionKey"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = (id)homedVersion;
          v20 = objc_msgSend(v18, "compare:", v19);

          if (v20 == 1)
            goto LABEL_38;
        }
        else
        {
          if (objc_msgSend(v14, "isEqualToString:", CFSTR("kHomeUUID")))
          {
            objc_msgSend(v9, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
            v21 = (id)objc_claimAutoreleasedReturnValue();
            -[HMDHomeManager currentHomeConfigurations](v6, "currentHomeConfigurations");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "objectForKeyedSubscript:", v21);
            v23 = (id)objc_claimAutoreleasedReturnValue();

            if (!v21 || !v23)
            {
              v40 = (void *)MEMORY[0x1D17BA0A0]();
              v41 = v6;
              HMFGetOSLogHandle();
              v42 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v56 = v43;
                v57 = 2114;
                v58 = v21;
                v59 = 2114;
                v60 = v23;
                _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_INFO, "%{public}@Home UUID %{public}@ or Configuration Version %{public}@ is nil", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v40);
LABEL_37:

LABEL_38:
              v34 = 0;
              goto LABEL_40;
            }
          }
          else
          {
            if (!objc_msgSend(v14, "isEqualToString:", CFSTR("kHomedSupportedFeaturesKey")))
              goto LABEL_38;
            objc_msgSend(v9, "hmf_arrayForKey:", CFSTR("kHomedSupportedFeaturesKey"));
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = (id)homedSupportedFeatures;
            v25 = (void *)MEMORY[0x1D17BA0A0]();
            v26 = v6;
            HMFGetOSLogHandle();
            v27 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v56 = v28;
              v57 = 2114;
              v58 = v24;
              v59 = 2114;
              v60 = v23;
              _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEBUG, "%{public}@Checking for required features: %{public}@, ours: %{public}@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v25);
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            v21 = v24;
            v29 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
            if (v29)
            {
              v30 = v29;
              v31 = *(_QWORD *)v47;
              while (2)
              {
                for (j = 0; j != v30; ++j)
                {
                  if (*(_QWORD *)v47 != v31)
                    objc_enumerationMutation(v21);
                  v33 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
                  if ((objc_msgSend(v23, "containsObject:", v33) & 1) == 0)
                  {
                    v35 = (void *)MEMORY[0x1D17BA0A0]();
                    v36 = v26;
                    HMFGetOSLogHandle();
                    v37 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v38 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543618;
                      v56 = v38;
                      v57 = 2114;
                      v58 = v33;
                      _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@### Feature: %{public}@ not supported", buf, 0x16u);

                    }
                    objc_autoreleasePoolPop(v35);

                    goto LABEL_37;
                  }
                }
                v30 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
                if (v30)
                  continue;
                break;
              }
            }

            v12 = v44;
            v6 = v45;
          }

        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
      v34 = 1;
      if (v11)
        continue;
      break;
    }
  }
  else
  {
    v34 = 1;
  }
LABEL_40:

  return v34;
}

- (id)_prepareAnswerForRequestedCapabilities:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("kDeviceClassTypeKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    getDeviceClass();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("kDeviceClassTypeKey"));

  }
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("kHomedVersionKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (id)homedVersion;
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, CFSTR("kHomedVersionKey"));

  }
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("kHomeConfigurationVersionKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager currentHomeConfigurations](self, "currentHomeConfigurations");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12 && v14)
    {
      objc_msgSend(v12, "UUIDString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setObject:forKeyedSubscript:", v15, CFSTR("kHomeUUID"));

      objc_msgSend(v5, "setObject:forKeyedSubscript:", v14, CFSTR("kHomeConfigurationVersionKey"));
    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = 138543874;
        v28 = v19;
        v29 = 2114;
        v30 = v12;
        v31 = 2114;
        v32 = v14;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Home UUID %{public}@ or Configuration Version %{public}@ is nil", (uint8_t *)&v27, 0x20u);

      }
      objc_autoreleasePoolPop(v16);
    }

  }
  if (v6)
  {
    objc_msgSend(v6, "version");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v20, CFSTR("kMetadataInfoVersionKey"));

    objc_msgSend(v6, "schemaVersion");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v21, CFSTR("kMetadataInfoSchemaVersionKey"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v6, "incomplete") ^ 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v22, CFSTR("kMetadataInfoCompletenessKey"));

  }
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("kHomedSupportedFeaturesKey"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    v24 = (id)homedSupportedFeatures;
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v24, CFSTR("kHomedSupportedFeaturesKey"));

  }
  v25 = (void *)objc_msgSend(v5, "copy");

  return v25;
}

- (id)_scrubRequestedCapabilities:(id)a3 fromMessage:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)objc_msgSend(v6, "mutableCopy");
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("kHomeConfigurationVersionKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      objc_msgSend(v7, "userForHome:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v12)
      {
        v13 = (void *)MEMORY[0x1D17BA0A0]();
        v14 = self;
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = 138543362;
          v20 = v16;
          _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Purging home info request for capabilities from user that is not a part of the home", (uint8_t *)&v19, 0xCu);

        }
        objc_autoreleasePoolPop(v13);
        objc_msgSend(v8, "removeObjectForKey:", CFSTR("kHomeUUID"));
        objc_msgSend(v8, "removeObjectForKey:", CFSTR("kHomeConfigurationVersionKey"));
      }
    }

  }
  v17 = (void *)objc_msgSend(v8, "copy");

  return v17;
}

- (void)_handleElectDeviceForIDSSession:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  int v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *context;
  _QWORD v39[4];
  id v40;
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hmf_dictionaryForKey:", CFSTR("kRequiredCapabilitiesKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "messagePayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_dictionaryForKey:", CFSTR("kRequestedCapabilitiesKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (isWatch())
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v42 = v12;
      v13 = "%{public}@### Watch is current device so ignoring IDS Elect";
      v14 = v11;
      v15 = OS_LOG_TYPE_DEBUG;
LABEL_13:
      _os_log_impl(&dword_1CD062000, v14, v15, v13, buf, 0xCu);

    }
LABEL_14:

    objc_autoreleasePoolPop(v9);
    goto LABEL_15;
  }
  -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "dataSyncInProgressWithState:withMessage:", 0, 0);

  if (v17)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      goto LABEL_14;
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v42 = v12;
    v13 = "%{public}@### Cloud data sync is in progress so ignoring IDS Elect";
LABEL_12:
    v14 = v11;
    v15 = OS_LOG_TYPE_INFO;
    goto LABEL_13;
  }
  if (!-[HMDHomeManager _capabilitiesAreSupported:](self, "_capabilitiesAreSupported:", v6))
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      goto LABEL_14;
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v42 = v12;
    v13 = "%{public}@### All capabilities are not met so ignoring IDS Elect";
    goto LABEL_12;
  }
  -[HMDHomeManager homes](self, "homes");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = __50__HMDHomeManager__handleElectDeviceForIDSSession___block_invoke;
  v39[3] = &unk_1E89BD550;
  v19 = v4;
  v40 = v19;
  objc_msgSend(v18, "hmf_objectPassingTest:", v39);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v19, "remoteSenderContext");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "accountIdentifier");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "identitiesForAccountIdentifier:", v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v24 = (void *)MEMORY[0x1E0C9AA60];
  }
  v25 = objc_msgSend(v24, "count");
  if (v20 || v25)
  {
    -[HMDHomeManager _scrubRequestedCapabilities:fromMessage:](self, "_scrubRequestedCapabilities:fromMessage:", v8, v19);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _prepareAnswerForRequestedCapabilities:](self, "_prepareAnswerForRequestedCapabilities:", v31);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    context = (void *)MEMORY[0x1D17BA0A0]();
    v32 = self;
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v36 = v24;
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "shortDescription");
      v37 = v20;
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v42 = v34;
      v43 = 2114;
      v44 = v35;
      v45 = 2112;
      v46 = v30;
      _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Answering %{public}@ request with response: %@", buf, 0x20u);

      v20 = v37;
      v24 = v36;
    }

    objc_autoreleasePoolPop(context);
    objc_msgSend(v19, "respondWithPayload:", v30);
  }
  else
  {
    v26 = (void *)MEMORY[0x1D17BA0A0]();
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v42 = v29;
      _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@### Message user not allowed to perform this request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v26);
    v30 = 0;
  }

LABEL_15:
}

- (void)handleVendorInfoUpdated:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)reprocessUserManagementModels
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  HMDBackingStoreCacheFetchModelObjects *v7;
  void *v8;
  void *v9;
  HMDBackingStoreCacheFetchModelObjects *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void *, void *);
  void *v14;
  id v15;
  id location;

  -[HMDHomeManager unprocessedOperationModelIdentifiers](self, "unprocessedOperationModelIdentifiers");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    objc_initWeak(&location, self);
    v11 = MEMORY[0x1E0C809B0];
    v12 = 3221225472;
    v13 = __47__HMDHomeManager_reprocessUserManagementModels__block_invoke;
    v14 = &unk_1E89BD898;
    objc_copyWeak(&v15, &location);
    v5 = _Block_copy(&v11);
    -[HMDHomeManager backingStore](self, "backingStore", v11, v12, v13, v14);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = [HMDBackingStoreCacheFetchModelObjects alloc];
    -[HMDHomeManager unprocessedOperationModelIdentifiers](self, "unprocessedOperationModelIdentifiers");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "allObjects");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDBackingStoreCacheFetchModelObjects initWithUUIDs:fetchResult:](v7, "initWithUUIDs:fetchResult:", v9, v5);
    objc_msgSend(v6, "submit:", v10);

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

- (void)_processUserManagementOperationModel:(id)a3 message:(id)a4
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  char isKindOfClass;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __CFString *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  char v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  __CFString *v49;
  HMDHomeManager *v50;
  void *v51;
  HMDHomeManager *v52;
  NSObject *v53;
  void *v54;
  void *v55;
  HMDHomeManager *v56;
  NSObject *v57;
  void *v58;
  void *v59;
  void *v60;
  void (**v61)(_QWORD, _QWORD, _QWORD);
  void *v62;
  HMDHomeManager *v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t j;
  __CFString *v73;
  __CFString *v74;
  __CFString *v75;
  void *v76;
  char v77;
  __CFString *v78;
  void *v79;
  void *v80;
  int v81;
  __CFString *v82;
  __CFString *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  char v91;
  void *v92;
  HMDHomeManager *v93;
  NSObject *v94;
  void *v95;
  __CFString *v96;
  const char *v97;
  NSObject *v98;
  uint32_t v99;
  id v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t k;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  int v111;
  void *v112;
  HMDHomeManager *v113;
  NSObject *v114;
  NSObject *v115;
  void *v116;
  void *v117;
  void (**v118)(_QWORD, _QWORD, _QWORD);
  void *v119;
  int v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  __CFString *v125;
  __CFString *v126;
  HMDHomeManager *v127;
  void *v128;
  void *v129;
  void *v130;
  id v131;
  void (**v132)(_QWORD, _QWORD, _QWORD);
  uint64_t v133;
  __CFString *v134;
  __CFString *v135;
  id v136;
  id v137;
  id v138;
  void *v139;
  HMDHomeManager *v141;
  HMDHomeManager *v142;
  void *v143;
  id obj;
  id obja;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  id v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  id v159;
  id v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint8_t buf[4];
  void *v166;
  __int16 v167;
  __CFString *v168;
  __int16 v169;
  __CFString *v170;
  __int16 v171;
  void (**v172)(_QWORD, _QWORD, _QWORD);
  _BYTE v173[128];
  _BYTE v174[128];
  _BYTE v175[128];
  _BYTE v176[128];
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  v161 = 0u;
  v162 = 0u;
  v163 = 0u;
  v164 = 0u;
  +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "operations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v161, v176, 16);
  if (!v9)
  {

    goto LABEL_13;
  }
  v10 = v9;
  v136 = v6;
  v11 = 0;
  v12 = *(_QWORD *)v162;
  do
  {
    for (i = 0; i != v10; ++i)
    {
      if (*(_QWORD *)v162 != v12)
        objc_enumerationMutation(v8);
      v14 = *(void **)(*((_QWORD *)&v161 + 1) + 8 * i);
      objc_msgSend(v14, "identifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "uuid");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v15, "isEqual:", v16);

      if (v17)
      {
        v18 = v14;

        v11 = v18;
      }
    }
    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v161, v176, 16);
  }
  while (v10);

  v6 = v136;
  if (!v11)
  {
LABEL_13:
    objc_msgSend(v5, "expirationDate");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v20)
      goto LABEL_15;
    objc_msgSend(v5, "expirationDate");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "timeIntervalSinceDate:", v22);
    v24 = v23;

    if (v24 <= 0.0)
    {
      v55 = (void *)MEMORY[0x1D17BA0A0]();
      v56 = self;
      HMFGetOSLogHandle();
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v166 = v58;
        _os_log_impl(&dword_1CD062000, v57, OS_LOG_TYPE_INFO, "%{public}@UserManagementOperation has already expired, deleting", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v55);
      -[HMDHomeManager backingStore](v56, "backingStore");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "transaction:options:", CFSTR("kUserManagementOperationRemovedKey"), v60);
      v61 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      objc_msgSend(v5, "setObjectChangeType:", 3);
      objc_msgSend(v61, "add:", v5);
      objc_msgSend(v61, "run");
      objc_msgSend(v6, "respondWithPayload:", 0);
    }
    else
    {
LABEL_15:
      -[HMDHomeManager unprocessedOperationModelIdentifiers](self, "unprocessedOperationModelIdentifiers");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "uuid");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "addObject:", v26);

      objc_msgSend(v5, "operationType");
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (v27)
      {
        objc_msgSend(v6, "transactionResult");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "markChanged");

        objc_msgSend(v5, "operationType");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v133 = objc_msgSend(v29, "integerValue");

        objc_msgSend(v5, "accessoryPairingIdentity");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "accessoryPairingIdentity");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0)
        {
          v33 = (void *)MEMORY[0x1E0CB3710];
          v34 = objc_opt_class();
          objc_msgSend(v5, "accessoryPairingIdentity");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v160 = 0;
          objc_msgSend(v33, "unarchivedObjectOfClass:fromData:error:", v34, v35, &v160);
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = (__CFString *)v160;

          if (!v36)
          {
            v38 = (void *)MEMORY[0x1D17BA0A0]();
            v39 = self;
            HMFGetOSLogHandle();
            v40 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v166 = v41;
              v167 = 2112;
              v168 = v37;
              _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive accessory pairing identity from the model's accessory pairing identity data: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v38);
          }

          v30 = (void *)v36;
        }
        objc_msgSend(v5, "userPairingIdentity");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "userPairingIdentity");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        v44 = objc_opt_isKindOfClass();

        if ((v44 & 1) != 0)
        {
          v45 = (void *)MEMORY[0x1E0CB3710];
          v46 = objc_opt_class();
          objc_msgSend(v5, "userPairingIdentity");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          v159 = 0;
          objc_msgSend(v45, "unarchivedObjectOfClass:fromData:error:", v46, v47, &v159);
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = (__CFString *)v159;

          v50 = self;
          if (!v48)
          {
            v51 = (void *)MEMORY[0x1D17BA0A0]();
            v52 = self;
            HMFGetOSLogHandle();
            v53 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v166 = v54;
              v167 = 2112;
              v168 = v49;
              _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive user pairing identity from the model's user pairing identity data: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v51);
            v50 = self;
          }

          v139 = (void *)v48;
        }
        else
        {
          v139 = v42;
          v50 = self;
        }
        v143 = v30;
        if (v30)
        {
          v137 = v6;
          v157 = 0u;
          v158 = 0u;
          v155 = 0u;
          v156 = 0u;
          -[HMDHomeManager pairedAccessories](v50, "pairedAccessories");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          v69 = objc_msgSend(v68, "countByEnumeratingWithState:objects:count:", &v155, v175, 16);
          if (v69)
          {
            v70 = v69;
            v71 = *(_QWORD *)v156;
            while (2)
            {
              for (j = 0; j != v70; ++j)
              {
                if (*(_QWORD *)v156 != v71)
                  objc_enumerationMutation(v68);
                v73 = (__CFString *)*(id *)(*((_QWORD *)&v155 + 1) + 8 * j);
                if (-[__CFString conformsToProtocol:](v73, "conformsToProtocol:", &unk_1EFABB088))
                  v74 = v73;
                else
                  v74 = 0;
                v75 = v74;

                if (v75)
                {
                  -[__CFString pairingIdentity](v75, "pairingIdentity");
                  v76 = (void *)objc_claimAutoreleasedReturnValue();
                  v77 = objc_msgSend(v143, "isEqual:", v76);

                  if ((v77 & 1) != 0)
                    goto LABEL_56;
                }
                else
                {
                  v78 = v73;
                  -[__CFString identifier](v73, "identifier");
                  v79 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v143, "identifier");
                  v80 = (void *)objc_claimAutoreleasedReturnValue();
                  v81 = objc_msgSend(v79, "isEqualToString:", v80);

                  if (v81)
                  {
                    v73 = v78;
                    goto LABEL_56;
                  }
                }

              }
              v70 = objc_msgSend(v68, "countByEnumeratingWithState:objects:count:", &v155, v175, 16);
              if (v70)
                continue;
              break;
            }
          }
          v73 = 0;
LABEL_56:

          v6 = v137;
          v50 = self;
        }
        else
        {
          v73 = 0;
        }
        -[__CFString home](v73, "home");
        v82 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v83 = v82;
        v134 = v73;
        v135 = v82;
        if (v73 && v82)
        {
          if (v139)
          {
            -[__CFString users](v82, "users");
            v151 = 0u;
            v152 = 0u;
            v153 = 0u;
            v154 = 0u;
            v84 = (id)objc_claimAutoreleasedReturnValue();
            v85 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v151, v174, 16);
            if (v85)
            {
              v86 = v85;
              v87 = *(_QWORD *)v152;
LABEL_62:
              v88 = 0;
              while (1)
              {
                if (*(_QWORD *)v152 != v87)
                  objc_enumerationMutation(v84);
                v89 = *(void **)(*((_QWORD *)&v151 + 1) + 8 * v88);
                objc_msgSend(v89, "pairingIdentity");
                v90 = (void *)objc_claimAutoreleasedReturnValue();
                v91 = objc_msgSend(v90, "isEqual:", v139);

                if ((v91 & 1) != 0)
                  break;
                if (v86 == ++v88)
                {
                  v86 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v151, v174, 16);
                  if (v86)
                    goto LABEL_62;
                  goto LABEL_68;
                }
              }
              v100 = v89;

              v50 = self;
              if (!v100)
                goto LABEL_85;
              v138 = v6;
              v150 = 0;
              v132 = (void (**)(_QWORD, _QWORD, _QWORD))v100;
              -[__CFString prepareUserManagementOperationForUser:accessory:type:model:error:](v135, "prepareUserManagementOperationForUser:accessory:type:model:error:", v100, v134, v133, v5, &v150);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              v131 = v150;
              v146 = 0u;
              v147 = 0u;
              v148 = 0u;
              v149 = 0u;
              +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
              v101 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v101, "operations");
              v102 = (void *)objc_claimAutoreleasedReturnValue();

              obj = v102;
              v103 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v146, v173, 16);
              if (v103)
              {
                v104 = v103;
                v105 = *(_QWORD *)v147;
                do
                {
                  for (k = 0; k != v104; ++k)
                  {
                    if (*(_QWORD *)v147 != v105)
                      objc_enumerationMutation(obj);
                    v107 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * k);
                    objc_msgSend(v5, "dependencies");
                    v108 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v107, "identifier");
                    v109 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v109, "UUIDString");
                    v110 = (void *)objc_claimAutoreleasedReturnValue();
                    v111 = objc_msgSend(v108, "containsObject:", v110);

                    if (v111)
                      objc_msgSend(v11, "addDependency:", v107);
                  }
                  v104 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v146, v173, 16);
                }
                while (v104);
              }

              objc_msgSend(v5, "ownerPairingIdentity");
              v112 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "setOwnerPairingIdentity:", v112);

              obja = (id)MEMORY[0x1D17BA0A0]();
              v113 = self;
              HMFGetOSLogHandle();
              v114 = objc_claimAutoreleasedReturnValue();
              v115 = v114;
              v116 = v143;
              v19 = v131;
              if (v131)
              {
                v6 = v138;
                v117 = v139;
                v118 = v132;
                if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
                {
                  HMFGetLogIdentifier();
                  v141 = v113;
                  v119 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543874;
                  v166 = v119;
                  v167 = 2112;
                  v168 = v134;
                  v169 = 2112;
                  v170 = (__CFString *)v132;
                  _os_log_impl(&dword_1CD062000, v115, OS_LOG_TYPE_ERROR, "%{public}@Add UserManagementOperation: Failed to add accessory pairing - accessory %@, user %@", buf, 0x20u);

                  v113 = v141;
                }

                objc_autoreleasePoolPop(obja);
                v120 = 0;
              }
              else
              {
                v6 = v138;
                v117 = v139;
                v118 = v132;
                if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
                {
                  HMFGetLogIdentifier();
                  v124 = (void *)objc_claimAutoreleasedReturnValue();
                  v142 = v113;
                  if ((unint64_t)(v133 - 1) > 2)
                    v125 = CFSTR("unknown");
                  else
                    v125 = off_1E89B34E0[v133 - 1];
                  v126 = v125;
                  *(_DWORD *)buf = 138544130;
                  v166 = v124;
                  v167 = 2112;
                  v168 = v126;
                  v169 = 2112;
                  v170 = v134;
                  v171 = 2112;
                  v172 = v132;
                  _os_log_impl(&dword_1CD062000, v115, OS_LOG_TYPE_DEFAULT, "%{public}@Add UserManagementOperation: Successfully added operation - type: %@, accessory %@, user %@", buf, 0x2Au);

                  v113 = v142;
                }

                objc_autoreleasePoolPop(obja);
                objc_msgSend(v11, "updateDelegate:", v113);
                +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
                v127 = v113;
                v128 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v128, "addOperation:", v11);

                -[HMDHomeManager unprocessedOperationModelIdentifiers](v127, "unprocessedOperationModelIdentifiers");
                v129 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v5, "uuid");
                v130 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v129, "removeObject:", v130);

                v120 = 0;
                v19 = 0;
              }
              goto LABEL_90;
            }
LABEL_68:

            v50 = self;
          }
LABEL_85:
          v92 = (void *)MEMORY[0x1D17BA0A0]();
          v93 = v50;
          HMFGetOSLogHandle();
          v94 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v139, "identifier");
            v96 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v166 = v95;
            v167 = 2112;
            v168 = v96;
            v97 = "%{public}@Add UserManagementOperation: Invalid parameter - user %@";
            v98 = v94;
            v99 = 22;
            goto LABEL_87;
          }
        }
        else
        {
          v92 = (void *)MEMORY[0x1D17BA0A0]();
          v93 = v50;
          HMFGetOSLogHandle();
          v94 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v143, "identifier");
            v96 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v166 = v95;
            v167 = 2112;
            v168 = v96;
            v169 = 2112;
            v170 = v83;
            v97 = "%{public}@Add UserManagementOperation: Invalid parameter - accessory: %@, home: %@";
            v98 = v94;
            v99 = 32;
LABEL_87:
            _os_log_impl(&dword_1CD062000, v98, OS_LOG_TYPE_ERROR, v97, buf, v99);

          }
        }

        objc_autoreleasePoolPop(v92);
        objc_msgSend(v6, "responseHandler");
        v121 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v121)
        {
          v11 = 0;
          v19 = 0;
          v120 = 1;
          v116 = v143;
          v117 = v139;
LABEL_92:

          if (v120)
            goto LABEL_96;
          goto LABEL_93;
        }
        objc_msgSend(v6, "responseHandler");
        v118 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v118)[2](v118, v122, 0);

        v11 = 0;
        v19 = 0;
        v120 = 1;
        v116 = v143;
        v117 = v139;
LABEL_90:

        goto LABEL_92;
      }
      v62 = (void *)MEMORY[0x1D17BA0A0]();
      v63 = self;
      HMFGetOSLogHandle();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v166 = v65;
        _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_ERROR, "%{public}@Add UserManagementOperation: Nil parameter - operationType", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v62);
      objc_msgSend(v6, "responseHandler");
      v66 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v66)
      {
        v11 = 0;
        v19 = 0;
        goto LABEL_96;
      }
      objc_msgSend(v6, "responseHandler");
      v61 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v61)[2](v61, v67, 0);

    }
    v11 = 0;
    v19 = 0;
LABEL_95:

    goto LABEL_96;
  }
  objc_msgSend(v11, "setDelegate:", self);
  v19 = 0;
LABEL_93:
  objc_msgSend(v6, "responseHandler");
  v123 = (void *)objc_claimAutoreleasedReturnValue();

  if (v123)
  {
    objc_msgSend(v6, "responseHandler");
    v61 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v61)[2](v61, v19, 0);
    goto LABEL_95;
  }
LABEL_96:

}

- (void)_processRemoveUserManagementOperationModel:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "operations");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (id)objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v10)
  {
    v26 = self;
    v11 = *(_QWORD *)v28;
    while (2)
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v13, "identifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v14, "isEqual:", v15);

        if (v16)
        {
          v10 = v13;
          goto LABEL_11;
        }
      }
      v10 = (id)objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
      if (v10)
        continue;
      break;
    }
LABEL_11:
    self = v26;
  }

  objc_msgSend(v7, "transactionResult");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "markChanged");

  if (v10)
  {
    if ((objc_msgSend(v10, "isFinished") & 1) == 0)
      objc_msgSend(v10, "cancel");
    +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "removeOperation:", v10);
  }
  else
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "UUIDString");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v22;
      v33 = 2112;
      v34 = v24;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Remove UserManagementOperation: Could not match operation with identifier %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    -[HMDHomeManager unprocessedOperationModelIdentifiers](v20, "unprocessedOperationModelIdentifiers");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "removeObject:", v25);

  }
  objc_msgSend(v7, "respondWithPayload:", 0);

}

- (BOOL)operationsWithIdentifiers:(id)a3 outOperations:(id *)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  int v23;
  BOOL v24;
  id *v26;
  id v27;
  void *v28;
  uint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  id obj;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (objc_msgSend(v6, "count"))
  {
    v26 = a4;
    +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "operations");
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v6, "count"));
    v27 = v6;
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    obj = v6;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
    if (v8)
    {
      v9 = v8;
      v30 = 0;
      v10 = *(_QWORD *)v39;
      v11 = 0x1E0CB3000uLL;
      v29 = *(_QWORD *)v39;
      do
      {
        v12 = 0;
        v32 = v9;
        do
        {
          if (*(_QWORD *)v39 != v10)
            objc_enumerationMutation(obj);
          v13 = (void *)objc_msgSend(objc_alloc(*(Class *)(v11 + 2600)), "initWithUUIDString:", *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * v12));
          -[HMDHomeManager unprocessedOperationModelIdentifiers](self, "unprocessedOperationModelIdentifiers");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v14, "containsObject:", v13);

          if ((v15 & 1) != 0)
          {
            v30 = 1;
          }
          else
          {
            v36 = 0u;
            v37 = 0u;
            v34 = 0u;
            v35 = 0u;
            v16 = v31;
            v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
            if (v17)
            {
              v18 = v17;
              v19 = *(_QWORD *)v35;
              while (2)
              {
                for (i = 0; i != v18; ++i)
                {
                  if (*(_QWORD *)v35 != v19)
                    objc_enumerationMutation(v16);
                  v21 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
                  objc_msgSend(v21, "identifier");
                  v22 = (void *)objc_claimAutoreleasedReturnValue();
                  v23 = objc_msgSend(v13, "isEqual:", v22);

                  if (v23)
                  {
                    if ((objc_msgSend(v21, "isFinished") & 1) == 0)
                      objc_msgSend(v28, "addObject:", v21);
                    goto LABEL_20;
                  }
                }
                v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
                if (v18)
                  continue;
                break;
              }
            }
LABEL_20:

            v10 = v29;
            v11 = 0x1E0CB3000;
            v9 = v32;
          }

          ++v12;
        }
        while (v12 != v9);
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
      }
      while (v9);
    }
    else
    {
      v30 = 0;
    }

    if (v26 && objc_msgSend(v28, "count"))
      *v26 = objc_retainAutorelease(v28);
    v24 = (v30 & 1) != 0 || objc_msgSend(v28, "count") != 0;
    v6 = v27;

  }
  else
  {
    v24 = 0;
  }

  return v24;
}

- (void)cleanupOperationsForAccessory:(id)a3 user:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHomeManager workQueue](self, "workQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke;
  v15[3] = &unk_1E89C0448;
  v15[4] = self;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v12 = v10;
  v13 = v9;
  v14 = v8;
  dispatch_async(v11, v15);

}

- (void)userManagementOperationDidFinish:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __51__HMDHomeManager_userManagementOperationDidFinish___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (id)currentAccessory
{
  void *v2;
  void *v3;
  id v4;

  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

- (id)eventRouterServerDiagnosticInfo
{
  void *v2;
  void *v3;
  void *v4;

  -[HMDHomeManager currentAccessory](self, "currentAccessory");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "eventRouterServerDiagnosticInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)_monitorReachability
{
  void *v3;
  void *v4;
  HMDHomeManager *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  __CFString *v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  int v26;
  void *v27;
  __int16 v28;
  __CFString *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager reachabilityMonitor](self, "reachabilityMonitor");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543362;
      v27 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Creating network reachability monitor", (uint8_t *)&v26, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28610]), "initWithNetAddress:", 0);
    -[HMDHomeManager setReachabilityMonitor:](v5, "setReachabilityMonitor:", v8);

    -[HMDHomeManager reachabilityMonitor](v5, "reachabilityMonitor");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setDelegate:", v5);

    -[HMDHomeManager reachabilityMonitor](v5, "reachabilityMonitor");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isReachable");

    if (v11)
      -[HMDHomeManager _reachabilityMonitorChanged:](v5, "_reachabilityMonitorChanged:", 1);
  }
  -[HMDHomeManager cloudReachabilityMonitor](self, "cloudReachabilityMonitor");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "preferenceForKey:", CFSTR("cloudReachabilityMonitorHostname"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringValue");
    v15 = objc_claimAutoreleasedReturnValue();

    if (v15)
      v16 = (__CFString *)v15;
    else
      v16 = CFSTR("gateway.icloud.com");
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543618;
      v27 = v20;
      v28 = 2112;
      v29 = v16;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Creating cloud network reachability monitor for host: %@", (uint8_t *)&v26, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28600]), "initWithHostname:", v16);
    v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28610]), "initWithNetAddress:", v21);
    -[HMDHomeManager setCloudReachabilityMonitor:](v18, "setCloudReachabilityMonitor:", v22);

    -[HMDHomeManager cloudReachabilityMonitor](v18, "cloudReachabilityMonitor");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setDelegate:", v18);

    -[HMDHomeManager cloudReachabilityMonitor](v18, "cloudReachabilityMonitor");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "isReachable");

    if (v25)
      -[HMDHomeManager _cloudReachabilityMonitorChanged:](v18, "_cloudReachabilityMonitorChanged:", 1);

  }
}

- (void)_reachabilityMonitorChanged:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v3 = a3;
  v14 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v8;
    v12 = 2112;
    v13 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received network reachability change from system configuration, notifying homes, reachable: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  if (v3 && !-[HMDHomeManager ignoreFirstTimeReachabilityChanged](v6, "ignoreFirstTimeReachabilityChanged"))
    -[HMDHomeManager _electRemoteGatewayForHomesAfterReachabilityChanges](v6, "_electRemoteGatewayForHomesAfterReachabilityChanges");
  -[HMDHomeManager _updateHomesAboutNetworkConnectivity:](v6, "_updateHomesAboutNetworkConnectivity:", v3);
  -[HMDHomeManager setIgnoreFirstTimeReachabilityChanged:](v6, "setIgnoreFirstTimeReachabilityChanged:", 0);
}

- (void)_cloudReachabilityMonitorChanged:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  id location;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v3 = a3;
  v25 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v22 = v8;
    v23 = 2112;
    v24 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received cloud network reachability change from system configuration, reachable: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  if (v3)
  {
    objc_initWeak(&location, v6);
    if (-[HMDHomeManager accountStatusFailedDueToNetworkFailure](v6, "accountStatusFailedDueToNetworkFailure"))
    {
      -[HMDHomeManager setBackOffOperationInProgress:](v6, "setBackOffOperationInProgress:", 0);
      -[HMDHomeManager _resetCloudOperationRetryCounters](v6, "_resetCloudOperationRetryCounters");
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = __51__HMDHomeManager__cloudReachabilityMonitorChanged___block_invoke;
      v18[3] = &unk_1E89BE3F8;
      v10 = &v19;
      objc_copyWeak(&v19, &location);
      -[HMDHomeManager _retryCloudOperationWithName:completionHandler:](v6, "_retryCloudOperationWithName:completionHandler:", CFSTR("query account status"), v18);
    }
    else
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = v6;
      HMFGetOSLogHandle();
      v13 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v22 = v14;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Pushing any pending cloud data and shared user data sync that were not acked", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      -[HMDHomeManager _pushChangesToUsersThatHaveNotAcknowledged](v12, "_pushChangesToUsersThatHaveNotAcknowledged");
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __51__HMDHomeManager__cloudReachabilityMonitorChanged___block_invoke_1024;
      v16[3] = &unk_1E89BE3F8;
      v10 = &v17;
      objc_copyWeak(&v17, &location);
      -[HMDHomeManager _retryCloudOperationWithName:completionHandler:](v12, "_retryCloudOperationWithName:completionHandler:", CFSTR("push data to cloud"), v16);
    }
    objc_destroyWeak(v10);
    objc_destroyWeak(&location);
  }
  -[HMDHomeManager cloudDataSyncStateFilter](v6, "cloudDataSyncStateFilter");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "updateNetworkConnectivity:", v3);

}

- (void)networkMonitorIsReachable:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __44__HMDHomeManager_networkMonitorIsReachable___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)networkMonitorIsUnreachable:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __46__HMDHomeManager_networkMonitorIsUnreachable___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_startAccessoryFinderTimer
{
  NSObject *v3;
  dispatch_source_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  id location;

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v3);
  -[HMDHomeManager setAccessoryFinderTimer:](self, "setAccessoryFinderTimer:", v4);

  -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = dispatch_time(0, 10000000000);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);

  objc_initWeak(&location, self);
  -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer");
  v7 = objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v11 = 3221225472;
  v12 = __44__HMDHomeManager__startAccessoryFinderTimer__block_invoke;
  v13 = &unk_1E89BE3F8;
  objc_copyWeak(&v14, &location);
  dispatch_source_set_event_handler(v7, &v10);

  -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer", v10, v11, v12, v13);
  v8 = objc_claimAutoreleasedReturnValue();
  dispatch_resume(v8);

  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setManagerDelegate:", self);

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

- (void)_startAccessoryFinderTimerExpired
{
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Timer expired, and stopping request to discover accessories", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager _processAnyPendingRequestsForRemoteAccess:](self, "_processAnyPendingRequestsForRemoteAccess:", 1);
  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stopDiscoveringAccessories");

  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setManagerDelegate:", 0);

}

- (void)_cancelAccessoryFinderTimer
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Cancelling accessory finder timer", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer");
    v7 = objc_claimAutoreleasedReturnValue();
    dispatch_source_cancel(v7);

    -[HMDHomeManager setAccessoryFinderTimer:](self, "setAccessoryFinderTimer:", 0);
    -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stopDiscoveringAccessories");

    -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setManagerDelegate:", 0);

  }
}

- (void)processAnyPendingRequestsForRemoteAccess
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __58__HMDHomeManager_processAnyPendingRequestsForRemoteAccess__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_processAnyPendingRequestsForRemoteAccess:(BOOL)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t j;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  char v20;
  id v21;
  void (**v22)(_QWORD, _QWORD, _QWORD);
  _BOOL8 v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  void (**v36)(_QWORD, _QWORD, _QWORD);
  void *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  NSObject *v46;
  void *v47;
  uint64_t v48;
  HMDHomeManager *v49;
  void *v50;
  id obj;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint8_t buf[4];
  void *v65;
  __int16 v66;
  id v67;
  __int16 v68;
  void *v69;
  _QWORD v70[3];
  _QWORD v71[3];
  _BYTE v72[128];
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v60, v73, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v61;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v61 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v60 + 1) + 8 * i), "hapAccessoryServerIdentifiers");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "unionSet:", v10);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v60, v73, 16);
    }
    while (v7);
  }

  v11 = (void *)objc_msgSend(v4, "mutableCopy");
  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "discoveredAccessoryServers");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "unionSet:", v13);

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  -[HMDHomeManager pendingResponsesForAccessoryFinder](self, "pendingResponsesForAccessoryFinder");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v50 = v11;
  v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v72, 16);
  if (v55)
  {
    v54 = *(_QWORD *)v57;
    v48 = *MEMORY[0x1E0CB8C70];
    v49 = self;
    do
    {
      for (j = 0; j != v55; ++j)
      {
        if (*(_QWORD *)v57 != v54)
          objc_enumerationMutation(obj);
        v15 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * j);
        objc_msgSend(v15, "name");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "isEqualToString:", CFSTR("kDoYouSeeUnpairedAccessoriesKey"));

        v18 = v11;
        if ((v17 & 1) != 0
          || (objc_msgSend(v15, "name"),
              v19 = (void *)objc_claimAutoreleasedReturnValue(),
              v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("kAreYouAtHomeRequestKey")),
              v19,
              v18 = v4,
              (v20 & 1) != 0))
        {
          v21 = v18;
          objc_msgSend(v15, "arrayForKey:", CFSTR("kAccessoryIdentitiesKey"));
          v22 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          v23 = -[HMDHomeManager _findAnyAccessoryWithIdentities:inAccessoryServers:](self, "_findAnyAccessoryWithIdentities:inAccessoryServers:", v22, v21);
          if (v23 || a3)
          {
            v27 = v4;
            v70[0] = CFSTR("kAtHomeStateKey");
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v23);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v71[0] = v28;
            v70[1] = CFSTR("kHomedVersionKey");
            v29 = (id)homedVersion;
            v71[1] = v29;
            v70[2] = CFSTR("kDeviceNameKey");
            deviceName();
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v71[2] = v30;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v71, v70, 3);
            v31 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v15, "stringForKey:", CFSTR("kHomeUUID"));
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v34 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v65 = v35;
              v66 = 2112;
              v67 = v31;
              v68 = 2112;
              v69 = v32;
              _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Sending response %@ for home %@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(v33);
            objc_msgSend(v15, "responseHandler");
            v36 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
            ((void (**)(_QWORD, _QWORD, void *))v36)[2](v36, 0, v31);

            objc_msgSend(v53, "addObject:", v15);
            v4 = v27;
            self = v49;
            v11 = v50;
          }
          else
          {
            v24 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v25 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v65 = v26;
              v66 = 2112;
              v67 = v21;
              _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_DEFAULT, "%{public}@Did not find any of the accessories in the list %@ but there is a timer pending, continuing to scan", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v24);
          }
          goto LABEL_27;
        }
        v37 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v53, "addObject:", v15));
        HMFGetOSLogHandle();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "name");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v65 = v39;
          v66 = 2112;
          v67 = v40;
          _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_DEFAULT, "%{public}@There is an invalid message in the pending responses for accessory finder %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v37);
        objc_msgSend(v15, "responseHandler");
        v41 = (void *)objc_claimAutoreleasedReturnValue();

        if (v41)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", v48, 3, 0);
          v21 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "responseHandler");
          v22 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, id, _QWORD))v22)[2](v22, v21, 0);
LABEL_27:

          continue;
        }
      }
      v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v72, 16);
    }
    while (v55);
  }

  -[HMDHomeManager pendingResponsesForAccessoryFinder](self, "pendingResponsesForAccessoryFinder");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "removeObjectsInArray:", v53);

  -[HMDHomeManager pendingResponsesForAccessoryFinder](self, "pendingResponsesForAccessoryFinder");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend(v43, "count");

  if (!v44)
  {
    v45 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v46 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v65 = v47;
      _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_DEFAULT, "%{public}@Processed all requests for accessory scan for remote access, stopping scan timer", buf, 0xCu);

      v11 = v50;
    }

    objc_autoreleasePoolPop(v45);
    -[HMDHomeManager _cancelAccessoryFinderTimer](self, "_cancelAccessoryFinderTimer");
  }

}

- (void)_startScanningForAccessories:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543874;
    v18 = v8;
    v19 = 2112;
    v20 = v5;
    v21 = 2112;
    v22 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received request to determine if we are at home %@ for message %@", (uint8_t *)&v17, 0x20u);

  }
  objc_autoreleasePoolPop(v6);
  -[HMDHomeManager accessoryFinderTimer](self, "accessoryFinderTimer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    -[HMDHomeManager _startAccessoryFinderTimer](self, "_startAccessoryFinderTimer");
    -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stopDiscoveringAccessories");

    -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "startDiscoveringAccessories");

    v13 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Starting timer to discover all accessories", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
  }
  -[HMDHomeManager pendingResponsesForAccessoryFinder](self, "pendingResponsesForAccessoryFinder");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v4);

}

- (BOOL)_findAnyAccessoryWithIdentities:(id)a3 inAccessoryServers:(id)a4
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  if (objc_msgSend(v5, "count") && objc_msgSend(v6, "count"))
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = v5;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v15;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v15 != v9)
            objc_enumerationMutation(v7);
          objc_msgSend(MEMORY[0x1E0D163A8], "serverIdentifierWithUniqueIdentifier:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i), (_QWORD)v14);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v6, "containsObject:", v11);

          if ((v12 & 1) != 0)
          {
            LOBYTE(v8) = 1;
            goto LABEL_14;
          }
        }
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v8)
          continue;
        break;
      }
    }
LABEL_14:

  }
  else
  {
    LOBYTE(v8) = 0;
  }

  return v8;
}

- (void)_handleDoYouSeeUnpairedAccessories:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void (**v22)(_QWORD, _QWORD, _QWORD);
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void (**v27)(_QWORD, _QWORD, _QWORD);
  _QWORD v28[2];
  _QWORD v29[2];
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v31 = v8;
    v32 = 2112;
    v33 = v5;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received request to determine if we are at home %@ for unpaired accessories", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isResidentCapable");

  if (!v10)
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v31 = v20;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@This device is not capable to access as a remote access point", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v18);
    v15 = (void *)MEMORY[0x1E0CB35C8];
    v16 = *MEMORY[0x1E0CB8C70];
    v17 = 10;
    goto LABEL_11;
  }
  if (+[HMDKeyTransferAgentServer isPeerAvailable](HMDKeyTransferAgentServer, "isPeerAvailable"))
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v31 = v14;
      v32 = 2112;
      v33 = v4;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Rejecting remote access request, key transfer peer is available: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = (void *)MEMORY[0x1E0CB35C8];
    v16 = *MEMORY[0x1E0CB8C70];
    v17 = 48;
LABEL_11:
    objc_msgSend(v15, "errorWithDomain:code:userInfo:", v16, v17, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v22 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v22)[2](v22, v21, 0);
    goto LABEL_12;
  }
  objc_msgSend(v4, "arrayForKey:", CFSTR("kAccessoryIdentitiesKey"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "discoveredAccessoryServers");
  v22 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  if (-[HMDHomeManager _findAnyAccessoryWithIdentities:inAccessoryServers:](self, "_findAnyAccessoryWithIdentities:inAccessoryServers:", v21, v22))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1, CFSTR("kAtHomeStateKey"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v28[1] = CFSTR("kDeviceNameKey");
    v29[0] = v24;
    deviceName();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v29[1] = v25;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v29, v28, 2);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "responseHandler");
    v27 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, void *))v27)[2](v27, 0, v26);

  }
  else
  {
    -[HMDHomeManager _startScanningForAccessories:](self, "_startScanningForAccessories:", v4);
  }
LABEL_12:

}

- (void)_handleAddRemoteAccessRequest:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  void *v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void (**v22)(_QWORD, _QWORD, _QWORD);
  int v23;
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isResidentCapable");

  if (!v6)
  {
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v12 = *MEMORY[0x1E0CB8C70];
    v13 = 10;
LABEL_7:
    objc_msgSend(v11, "errorWithDomain:code:userInfo:", v12, v13, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v15)[2](v15, v14, 0);
LABEL_8:

    goto LABEL_9;
  }
  if (+[HMDKeyTransferAgentServer isPeerAvailable](HMDKeyTransferAgentServer, "isPeerAvailable"))
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543618;
      v24 = v10;
      v25 = 2112;
      v26 = v4;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Rejecting remote access request, key transfer peer is available: %@", (uint8_t *)&v23, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v12 = *MEMORY[0x1E0CB8C70];
    v13 = 48;
    goto LABEL_7;
  }
  objc_msgSend(v4, "remoteSourceDevice");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "account");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    -[HMDHomeManager _acceptHomeInviteFromAccount:message:trackInvite:](self, "_acceptHomeInviteFromAccount:message:trackInvite:", v14, v4, 1);
    goto LABEL_9;
  }
  v17 = (void *)MEMORY[0x1D17BA0A0]();
  v18 = self;
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 138543362;
    v24 = v20;
    _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Failed to resolve inviter account", (uint8_t *)&v23, 0xCu);

  }
  objc_autoreleasePoolPop(v17);
  objc_msgSend(v4, "responseHandler");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v22 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v22[2](v22, v15, 0);

    goto LABEL_8;
  }
LABEL_9:

}

- (void)_handleAccessHomeInvite:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "remoteSourceID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v12)[2](v12, v7, 0);
LABEL_9:

    goto LABEL_10;
  }
  objc_msgSend(v4, "remoteSourceDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "account");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(v4, "remoteSenderContext");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "mergeID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "messagePayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _handleAccessHomeInviteFromAccount:mergeID:idsInvitationIdentifier:payload:messageResponseHandler:](self, "_handleAccessHomeInviteFromAccount:mergeID:idsInvitationIdentifier:payload:messageResponseHandler:", v7, v9, 0, v10, v11);

    goto LABEL_10;
  }
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138543618;
    v20 = v16;
    v21 = 2112;
    v22 = v4;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolve inviter account for message: %@", (uint8_t *)&v19, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  objc_msgSend(v4, "responseHandler");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v18[2](v18, v12, 0);

    goto LABEL_9;
  }
LABEL_10:

}

- (BOOL)shouldAcceptInvitationPayload:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  BOOL v20;
  void *v21;
  char v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  int v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(v6, "hmf_stringForKey:", CFSTR("kHomeName"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v8;
  if (v7 && v8)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = self;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = 138543618;
        v36 = v14;
        v37 = 2112;
        v38 = v9;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because home already exists for homeUUID: %@", (uint8_t *)&v35, 0x16u);

      }
      objc_autoreleasePoolPop(v11);
      if (a4)
      {
        v15 = 1;
LABEL_24:
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], v15, 0);
        v20 = 0;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_26;
      }
    }
    else
    {
      +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "supportsHomeInvitation");

      if ((v22 & 1) != 0)
      {
        -[HMDHomeManager homes](self, "homes");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "count");
        v25 = maximumHomes;

        if (v24 < v25)
        {
          v20 = 1;
LABEL_26:

          goto LABEL_27;
        }
        v30 = (void *)MEMORY[0x1D17BA0A0]();
        v31 = self;
        HMFGetOSLogHandle();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = 138543362;
          v36 = v33;
          _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because invitee has already maximum allowed homes", (uint8_t *)&v35, 0xCu);

        }
        objc_autoreleasePoolPop(v30);
        if (a4)
        {
          v15 = 49;
          goto LABEL_24;
        }
      }
      else
      {
        v26 = (void *)MEMORY[0x1D17BA0A0]();
        v27 = self;
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v35 = 138543362;
          v36 = v29;
          _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because device does not support invitations", (uint8_t *)&v35, 0xCu);

        }
        objc_autoreleasePoolPop(v26);
        if (a4)
        {
          v15 = 10;
          goto LABEL_24;
        }
      }
    }
    v20 = 0;
    goto LABEL_26;
  }
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  v17 = self;
  HMFGetOSLogHandle();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = 138543874;
    v36 = v19;
    v37 = 2112;
    v38 = v7;
    v39 = 2112;
    v40 = v9;
    _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload because homeName: %@ or homeUUID: %@ is missing", (uint8_t *)&v35, 0x20u);

  }
  objc_autoreleasePoolPop(v16);
  if (a4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
    v20 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v20 = 0;
  }
LABEL_27:

  return v20;
}

- (BOOL)shouldAcceptInvitationWithHomeName:(id)a3
{
  return objc_msgSend(a3, "hm_containsAnyTextCheckingTypeInTypes:", 2080) ^ 1;
}

- (void)_handleAccessHomeInviteFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 messageResponseHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  BOOL v19;
  id v20;
  id v21;
  void *v22;
  _QWORD aBlock[5];
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  +[HMDHomeInviteLogEvent updateWithState:isFMFDevice:](HMDHomeInviteLogEvent, "updateWithState:isFMFDevice:", 1, isThisDeviceDesignatedFMFDevice());
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "submitLogEvent:", v17);

  }
  v29 = 0;
  v19 = -[HMDHomeManager shouldAcceptInvitationPayload:error:](self, "shouldAcceptInvitationPayload:error:", v15, &v29);
  v20 = v29;
  if (v19)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke;
    aBlock[3] = &unk_1E89BD910;
    aBlock[4] = self;
    v24 = v15;
    v28 = v16;
    v21 = v12;
    v25 = v21;
    v26 = v13;
    v27 = v14;
    v22 = _Block_copy(aBlock);
    objc_msgSend(v21, "isOfKnownPersonWithCompletion:", v22);

  }
  else if (v16)
  {
    (*((void (**)(id, id, _QWORD))v16 + 2))(v16, v20, 0);
  }

}

- (void)dismissBulletinOnAllMyTransientDevicesWithContext:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDRemoteAccountMessageDestination *v9;
  void *v10;
  HMDRemoteAccountMessageDestination *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "account");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "handles");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "firstObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = [HMDRemoteAccountMessageDestination alloc];
    -[HMDHomeManager uuid](self, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:](v9, "initWithTarget:handle:multicast:", v10, v8, 1);

    objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:destination:messagePayload:", CFSTR("kDismissBulletinInternalRequestKey"), v11, v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "sendMessage:", v12);

  }
  else
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v17;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot find own account handle to send message to dismiss bulletin on all devices", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
  }

}

- (void)_handleDismissBulletinRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kBulletinRecordIDKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v8;
      v38 = 2112;
      v39 = v5;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received message from peer device to dismiss bulletin with record ID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v6);
    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "removeBulletinWithRecordID:", v5);

    objc_msgSend(v4, "numberForKey:", CFSTR("kInvitationStateKey"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (!v10)
      goto LABEL_20;
    v12 = objc_msgSend(v10, "unsignedIntegerValue");
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v5);
    -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "hmf_firstObjectWithValue:forKeyPath:", v13, CFSTR("identifier"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      if ((unint64_t)(v12 - 6) < 2 || v12 == 4)
      {
        -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](self, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v15, v12);
        -[HMDHomeManager _removeIncomingInvitation:](self, "_removeIncomingInvitation:", v15);
LABEL_18:
        objc_msgSend(v4, "name");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _saveWithReason:postSyncNotification:](self, "_saveWithReason:postSyncNotification:", v33, 0);

LABEL_19:
        -[HMDHomeManager _updateIncomingInvitesPresent](self, "_updateIncomingInvitesPresent");

LABEL_20:
        goto LABEL_21;
      }
      if (v12 == 3)
      {
        v16 = objc_alloc(MEMORY[0x1E0CB3A28]);
        objc_msgSend(v4, "stringForKey:", CFSTR("kHomeUUID"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = (void *)objc_msgSend(v16, "initWithUUIDString:", v17);

        -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](self, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v15, 5);
        -[HMDHomeManager uuidsOfRemovedHomes](self, "uuidsOfRemovedHomes");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "containsObject:", v18);

        if (v20)
        {
          -[HMDHomeManager uuidsOfRemovedHomes](self, "uuidsOfRemovedHomes");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "removeObject:", v18);

          v22 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "UUIDString");
            v34 = v22;
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v37 = v24;
            v38 = 2112;
            v39 = v25;
            _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

            v22 = v34;
          }

          objc_autoreleasePoolPop(v22);
        }
        -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v18);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "owner");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "account");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "senderCorrelationIdentifier");
        v35 = v18;
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHomeManager _stopTrackingRemovedHomeUserMergeId:](self, "_stopTrackingRemovedHomeUserMergeId:", v29);
        goto LABEL_18;
      }
    }
    v30 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v32;
      v38 = 2112;
      v39 = v5;
      _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Dismiss bulletin request received with no matching invitation: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v30);
    goto LABEL_19;
  }
LABEL_21:

}

- (void)dismissDialogOnAllMyTransientDevicesWithContext:(id)a3 selection:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDRemoteAccountMessageDestination *v11;
  void *v12;
  HMDRemoteAccountMessageDestination *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[2];
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v4 = a4;
  v27 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "account");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "handles");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "firstObject");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = [HMDRemoteAccountMessageDestination alloc];
    -[HMDHomeManager uuid](self, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:](v11, "initWithTarget:handle:multicast:", v12, v10, 1);

    v14 = (void *)MEMORY[0x1E0D285D0];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4, CFSTR("kDialogContextKey"), CFSTR("kDialogSelectionKey"), v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v24[1] = v15;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, &v23, 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "internalMessageWithName:destination:messagePayload:", CFSTR("kDismissDialogInternalRequestKey"), v13, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "sendMessage:", v17);

  }
  else
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = self;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v26 = v22;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot find own account handle to send message to dismiss dialog on all devices", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
  }

}

- (void)_handleDismissDialogRequest:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  const char *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  char v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kDialogContextKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  v6 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kDialogSelectionKey"), &v16);
  if (v5 && v16)
  {
    v7 = v6;
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = "canceled";
      *(_DWORD *)buf = 138543874;
      v18 = v10;
      if ((_DWORD)v7)
        v11 = "accepted";
      v19 = 2112;
      v20 = v5;
      v21 = 2080;
      v22 = v11;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Received message from peer device to dismiss dialog with context %@, selection: %s", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    +[HMDUIDialogPresenter sharedUIDialogPresenter](HMDUIDialogPresenter, "sharedUIDialogPresenter");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager workQueue](self, "workQueue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __46__HMDHomeManager__handleDismissDialogRequest___block_invoke;
    v14[3] = &unk_1E89C2730;
    v15 = v5;
    objc_msgSend(v12, "dismissPendingDialogDueToPeerDeviceSelection:context:queue:completionHandler:", v7, v15, v13, v14);

  }
}

- (id)_trackIncomingInvitationFromAccount:(id)a3 mergeID:(id)a4 idsInvitationIdentifier:(id)a5 payload:(id)a6 invitationState:(int64_t)a7 error:(id *)a8
{
  id v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  HMDIncomingHomeInvitation *v26;
  HMDIncomingHomeInvitation *v27;
  void *v28;
  void *v29;
  HMDHomeManager *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  HMDHomeManager *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  int v45;
  void *v46;
  HMDHomeManager *v47;
  NSObject *v48;
  void *v49;
  HMDIncomingHomeInvitation *v50;
  void *v51;
  HMDHomeManager *v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  int v58;
  void *v59;
  void *v60;
  NSObject *v61;
  void *v62;
  void *v63;
  void *v65;
  id v66;
  void *context;
  void *v68;
  void *v70;
  id v71;
  void *v72;
  void *v74;
  void *v75;
  void *v76;
  id v77;
  HMDHomeManager *v78;
  id v79;
  _QWORD v80[5];
  id v81;
  id v82;
  id from;
  id location;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint8_t buf[4];
  id v90;
  __int16 v91;
  id v92;
  __int16 v93;
  id v94;
  __int16 v95;
  id v96;
  __int16 v97;
  void *v98;
  __int16 v99;
  void *v100;
  _BYTE v101[128];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v77 = a4;
  v71 = a5;
  v79 = a6;
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v78 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v90 = v15;
    v91 = 2112;
    v92 = v12;
    v93 = 2112;
    v94 = v79;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Incoming invitation from account %@ with payload: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v13);
  objc_msgSend(v79, "hmf_stringForKey:", CFSTR("kHomeName"));
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "hmf_UUIDForKey:", CFSTR("kInvitationIdentifierKey"));
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "hmf_dateForKey:", CFSTR("kInvitationExpiryDateKey"));
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  -[HMDHomeManager incomingInvitations](v78, "incomingInvitations");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v17, "copy");

  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v85, v101, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v86;
LABEL_5:
    v21 = 0;
    while (1)
    {
      if (*(_QWORD *)v86 != v20)
        objc_enumerationMutation(v18);
      v22 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * v21);
      objc_msgSend(v22, "homeUUID");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v23, "isEqual:", v16) & 1) != 0)
      {
        objc_msgSend(v22, "inviterAccount");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "isRelatedToAccount:", v12);

        if ((v25 & 1) != 0)
        {
          v26 = v22;

          if (!v26)
            goto LABEL_18;
          if (-[HMDHomeInvitation isExpired](v26, "isExpired"))
          {
            v27 = v26;
            goto LABEL_19;
          }
          v51 = (void *)MEMORY[0x1D17BA0A0]();
          v52 = v78;
          HMFGetOSLogHandle();
          v53 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "shortDescription");
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v16, "UUIDString");
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v90 = v54;
            v91 = 2112;
            v92 = v55;
            v93 = 2112;
            v94 = v75;
            v95 = 2112;
            v96 = v56;
            _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_DEFAULT, "%{public}@Ignoring invite since we are already tracking an invite from account %@ for home %@(%@)", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v51);
          if (a7 == 5)
          {
            v45 = 0;
            goto LABEL_40;
          }
          goto LABEL_46;
        }
      }
      else
      {

      }
      if (v19 == ++v21)
      {
        v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v85, v101, 16);
        if (v19)
          goto LABEL_5;
        break;
      }
    }
  }

LABEL_18:
  v27 = 0;
LABEL_19:
  objc_msgSend(v79, "hmf_dataForKey:", CFSTR("kControllerPublicKey"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "hmf_stringForKey:", CFSTR("kControllerPairingNameKey"));
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  if (v28 && v74)
  {
    v70 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28658]), "initWithPairingKeyData:", v28);
    v68 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28650]), "initWithIdentifier:publicKey:privateKey:", v74, v70, 0);
    if (-[HMDHomeInvitation isExpired](v27, "isExpired"))
    {
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = v78;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "shortDescription");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v90 = v32;
        v91 = 2112;
        v92 = v33;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@Existing invitation from user (%@) was expired, recreating a new invitation", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v29);
      -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v30, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v27, 6);
      -[HMDHomeManager _removeIncomingInvitation:](v30, "_removeIncomingInvitation:", v27);
    }
    v26 = -[HMDIncomingHomeInvitation initWithInviterAccount:invitationIdentifier:invitationState:homeName:homeUUID:inviterIdentity:inviterMergeID:expiryDate:]([HMDIncomingHomeInvitation alloc], "initWithInviterAccount:invitationIdentifier:invitationState:homeName:homeUUID:inviterIdentity:inviterMergeID:expiryDate:", v12, v76, a7, v75, v16, v68, v77, v72);

    v34 = (void *)MEMORY[0x1D17BA0A0]();
    v35 = v78;
    HMFGetOSLogHandle();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v90 = v37;
      v91 = 2112;
      v92 = v77;
      v93 = 2112;
      v94 = v76;
      _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@Received incoming invitation from mergeID %@ for invite %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v34);
    -[HMDHomeManager workQueue](v35, "workQueue");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeInvitation setClientQueue:](v26, "setClientQueue:", v38);

    objc_initWeak(&location, v35);
    objc_initWeak(&from, v26);
    v80[0] = MEMORY[0x1E0C809B0];
    v80[1] = 3221225472;
    v80[2] = __116__HMDHomeManager__trackIncomingInvitationFromAccount_mergeID_idsInvitationIdentifier_payload_invitationState_error___block_invoke;
    v80[3] = &unk_1E89BF2A0;
    objc_copyWeak(&v81, &location);
    objc_copyWeak(&v82, &from);
    v80[4] = v35;
    -[HMDHomeInvitation setExpirationHandler:](v26, "setExpirationHandler:", v80);
    -[HMDHomeManager _addIncomingInvitation:](v35, "_addIncomingInvitation:", v26);
    context = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v35, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v26, a7));
    v39 = v35;
    HMFGetOSLogHandle();
    v40 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v66 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHomeInvitation identifier](v26, "identifier");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "UUIDString");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CBA548], "homeInvitationStateDescription:", a7);
      v42 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "shortDescription");
      v43 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "UUIDString");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544642;
      v90 = v66;
      v91 = 2112;
      v92 = v41;
      v93 = 2112;
      v94 = v42;
      v95 = 2112;
      v96 = v43;
      v97 = 2112;
      v98 = v75;
      v99 = 2112;
      v100 = v44;
      _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_DEFAULT, "%{public}@Tracking incoming invite %@ with state %@ from account %@ for home %@(%@)", buf, 0x3Eu);

    }
    objc_autoreleasePoolPop(context);
    objc_destroyWeak(&v82);
    objc_destroyWeak(&v81);
    objc_destroyWeak(&from);
    objc_destroyWeak(&location);

    if (a7 == 5)
    {
      v45 = 1;
LABEL_40:
      -[HMDHomeManager uuidsOfRemovedHomes](v78, "uuidsOfRemovedHomes");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = objc_msgSend(v57, "containsObject:", v16);

      if (v58)
      {
        -[HMDHomeManager uuidsOfRemovedHomes](v78, "uuidsOfRemovedHomes");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "removeObject:", v16);

        v60 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v61 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "UUIDString");
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v90 = v62;
          v91 = 2112;
          v92 = v63;
          _os_log_impl(&dword_1CD062000, v61, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v60);
        -[HMDHomeManager _stopTrackingRemovedHomeUserMergeId:](v78, "_stopTrackingRemovedHomeUserMergeId:", v77);
      }
      else
      {
        -[HMDHomeManager _stopTrackingRemovedHomeUserMergeId:](v78, "_stopTrackingRemovedHomeUserMergeId:", v77);
        if (!v45)
          goto LABEL_46;
      }
    }
    -[HMDHomeManager _saveWithReason:postSyncNotification:](v78, "_saveWithReason:postSyncNotification:", CFSTR("Incoming invitations updated"), 0);
LABEL_46:
    v27 = v26;
    v50 = v27;
  }
  else
  {
    v46 = (void *)MEMORY[0x1D17BA0A0]();
    v47 = v78;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v90 = v49;
      v91 = 2112;
      v92 = v76;
      _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for invitation with ID %@, missing controller or public key", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v46);
    if (a8)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }

    v50 = 0;
  }

  return v50;
}

- (void)_postIncomingInvitationStateChangedNotification:(id)a3 newInvitationState:(int64_t)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(v6, "updateInvitationState:", a4);
  v27[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v27, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  encodeRootObjectForIncomingXPCMessage(v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = CFSTR("kInvitationsDataKey");
  v26 = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "describeWithFormat");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138543874;
    v20 = v13;
    v21 = 2112;
    v22 = v14;
    v23 = 2112;
    v24 = v15;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Posting incoming state update to clients: %@ / %@", (uint8_t *)&v19, 0x20u);

  }
  objc_autoreleasePoolPop(v10);
  objc_msgSend(MEMORY[0x1E0D285D0], "entitledMessageWithName:messagePayload:", CFSTR("kUserInvitationsUpdatedNotificationKey"), v9);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](v11, "messageDispatcher");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](v11, "uuid");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "sendMessage:target:", v16, v18);

}

- (void)_acceptHomeInviteFromAccount:(id)a3 message:(id)a4 trackInvite:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void (**v32)(_QWORD, _QWORD, _QWORD);
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void (**v41)(_QWORD, _QWORD, _QWORD);
  void *v42;
  HMDHomeManager *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  _QWORD v61[3];
  _QWORD v62[3];
  uint8_t buf[4];
  void *v64;
  __int16 v65;
  id v66;
  uint64_t v67;

  v5 = a5;
  v67 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  objc_msgSend(v9, "messagePayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("kRequestedCapabilitiesKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v64 = v15;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Handling request for getting controller identity for home invite request", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v12);
  if (v8)
  {
    objc_msgSend(v9, "dataForKey:", CFSTR("kControllerPublicKey"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringForKey:", CFSTR("kControllerPairingNameKey"));
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))v17;
    if (v16 && v17)
    {
      v19 = v11;
      v55 = v16;
      v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28658]), "initWithPairingKeyData:", v16);
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_msgSend(objc_alloc(MEMORY[0x1E0D165A8]), "initWithIdentifier:publicKey:privateKey:permissions:", v18, v20, 0, 0);
      +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
      v22 = objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)v22, "registerIdentity:account:object:", v21, v8, v13);

      v59 = 0;
      v60 = 0;
      v58 = 0;
      LOBYTE(v22) = -[HMDHomeManager getOrCreateControllerPublicKey:controllerUsername:error:](v13, "getOrCreateControllerPublicKey:controllerUsername:error:", &v60, &v59, &v58);
      v57 = v60;
      v56 = v59;
      v23 = v58;
      v24 = v23;
      if ((v22 & 1) != 0)
      {
        v51 = v23;
        if (v5)
        {
          objc_msgSend(v9, "remoteSenderContext");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "mergeID");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "messagePayload");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = -[HMDHomeManager _trackIncomingInvitationFromAccount:mergeID:idsInvitationIdentifier:payload:invitationState:error:](v13, "_trackIncomingInvitationFromAccount:mergeID:idsInvitationIdentifier:payload:invitationState:error:", v8, v26, 0, v27, 5, 0);

        }
        v53 = v8;
        v29 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v64 = v31;
          v65 = 2112;
          v66 = v57;
          _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Preparing response for request for controller info: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v29);
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v32 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v61[0] = CFSTR("kControllerPublicKey");
        v33 = v57;
        if (!v57)
        {
          objc_msgSend(MEMORY[0x1E0C99E38], "null");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
        }
        v54 = v20;
        v62[0] = v33;
        v62[1] = v56;
        v61[1] = CFSTR("kControllerPairingNameKey");
        v61[2] = CFSTR("kInviteAcceptedKey");
        v62[2] = MEMORY[0x1E0C9AAB0];
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v62, v61, 3, v51);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "addEntriesFromDictionary:", v34);

        if (!v57)
        -[HMDHomeManager appleAccountManager](v13, "appleAccountManager");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "account");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "primaryHandle");
        v37 = (void *)objc_claimAutoreleasedReturnValue();

        v8 = v53;
        if (v37)
        {
          +[HMDAccountHandleFormatter defaultFormatter](HMDAccountHandleFormatter, "defaultFormatter");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "stringForObjectValue:", v37);
          v39 = (void *)objc_claimAutoreleasedReturnValue();

          if (v39)
            objc_msgSend(v32, "setObject:forKeyedSubscript:", v39, CFSTR("kUserIDKey"));

        }
        -[HMDHomeManager _prepareAnswerForRequestedCapabilities:](v13, "_prepareAnswerForRequestedCapabilities:", v19);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        if (v40)
          objc_msgSend(v32, "addEntriesFromDictionary:", v40);
        -[HMDHomeManager _updateIncomingInvitesPresent](v13, "_updateIncomingInvitesPresent");
        objc_msgSend(v9, "responseHandler");
        v41 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v41[2](v41, 0, v32);

        v20 = v54;
        v11 = v19;
        v24 = v52;
      }
      else
      {
        objc_msgSend(v9, "responseHandler");
        v32 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v32)[2](v32, v24, 0);
        v11 = v19;
      }

      v16 = v55;
    }
    else
    {
      v47 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v48 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "name");
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v49;
        v65 = 2112;
        v66 = v50;
        _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for message %@, missing controller or public key", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v47);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "responseHandler");
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v21)[2](v21, v20, 0);
    }

    goto LABEL_32;
  }
  v42 = (void *)MEMORY[0x1D17BA0A0]();
  v43 = v13;
  HMFGetOSLogHandle();
  v44 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v64 = v45;
    v65 = 2112;
    v66 = v9;
    _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolve inviter account for message: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v42);
  objc_msgSend(v9, "responseHandler");
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  if (v46)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "responseHandler");
    v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v16, 0);
LABEL_32:

  }
}

- (void)_sendUserAdded:(id)a3 destination:(id)a4 toHome:(id)a5
{
  id v8;
  id v9;
  const __CFString *v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  __CFString *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  int v30;
  HMDHomeDataPushDestination *v31;
  void *v32;
  void *v33;
  int v34;
  __CFString *v35;
  __CFString *v36;
  HMDHomeManager *v37;
  void *v38;
  void *v39;
  void *v40;
  __CFString *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t v46[128];
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  const __CFString *v50;
  __int16 v51;
  __CFString *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v41 = (__CFString *)a4;
  v9 = a5;
  if ((shouldLogPrivateInformation() & 1) != 0)
  {
    objc_msgSend(v8, "userID");
    v10 = (const __CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = CFSTR("...");
    v11 = CFSTR("...");
  }
  v12 = shouldLogPrivateInformation();
  v13 = v41;
  if (!v12)
    v13 = CFSTR("...");
  v14 = v13;
  v15 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v48 = v17;
    v49 = 2112;
    v50 = v10;
    v51 = 2112;
    v52 = v14;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Going to send home configuration to added user %@ at %@ and all resident devices", buf, 0x20u);

  }
  v35 = v14;

  objc_autoreleasePoolPop(v15);
  if (objc_msgSend(v8, "isRemoteGateway"))
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v48 = v20;
      v49 = 2112;
      v50 = v10;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Removing resident user %@ from unassociated list", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(v8, "userID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _removeFromUnassociatedPeers:home:](self, "_removeFromUnassociatedPeers:home:", v21, v9);

  }
  v36 = (__CFString *)v10;
  v37 = self;
  v22 = v8;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v38 = v9;
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  objc_msgSend(v9, "users");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
  if (v25)
  {
    v26 = v25;
    v27 = *(_QWORD *)v43;
    do
    {
      for (i = 0; i != v26; ++i)
      {
        if (*(_QWORD *)v43 != v27)
          objc_enumerationMutation(v24);
        v29 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * i);
        v30 = objc_msgSend(v29, "isRemoteGateway");
        objc_msgSend(v29, "userID");
        v31 = (HMDHomeDataPushDestination *)objc_claimAutoreleasedReturnValue();
        if (v30)
        {
          v32 = v23;
LABEL_24:
          objc_msgSend(v32, "addObject:", v31);

          continue;
        }
        objc_msgSend(v22, "userID");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = -[HMDHomeDataPushDestination isEqualToString:](v31, "isEqualToString:", v33);

        if (v41 && v34)
        {
          v31 = -[HMDHomeDataPushDestination initWithUser:destination:]([HMDHomeDataPushDestination alloc], "initWithUser:destination:", v29, v41);
          -[HMDHomeDataPushDestination setIgnoreConfigCompare:](v31, "setIgnoreConfigCompare:", 1);
          if (objc_msgSend(v29, "isAdministrator"))
            v32 = v39;
          else
            v32 = v40;
          goto LABEL_24;
        }
      }
      v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
    }
    while (v26);
  }

  -[HMDHomeManager _pushChangesForHome:toRemoteDevicesOnSameAccount:addedUser:](v37, "_pushChangesForHome:toRemoteDevicesOnSameAccount:addedUser:", v38, v23, v22);
  -[HMDHomeManager _pushChangesForHome:toRegularUsersOfHome:adminUsersOfHome:](v37, "_pushChangesForHome:toRegularUsersOfHome:adminUsersOfHome:", v38, v40, v39);

}

- (void)_sendUserRemoved:(id)a3 fromHome:(id)a4 pairingUsername:(id)a5 pushToCloud:(BOOL)a6 completionHandler:(id)a7
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  __CFString *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  char v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  _BOOL4 v42;
  void *v43;
  id v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[4];
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  _BYTE v56[128];
  const __CFString *v57;
  void *v58;
  _QWORD v59[2];
  _QWORD v60[2];
  const __CFString *v61;
  const __CFString *v62;
  _QWORD v63[2];
  id location[4];

  v42 = a6;
  location[2] = *(id *)MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v38 = a5;
  v44 = a7;
  v12 = (void *)MEMORY[0x1E0D285D0];
  v57 = CFSTR("kHomeUUID");
  objc_msgSend(v11, "uuid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "UUIDString");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v58 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "internalMessageWithName:messagePayload:", CFSTR("kUserRemovedRequestKey"), v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v10, "isRemoteGateway"))
  {
    objc_msgSend(v10, "userID");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v40 = 0;
  }
  v61 = CFSTR("kDeviceClassTypeKey");
  v62 = CFSTR("kDeviceClassTypeTransient");
  v63[0] = CFSTR("kRequiredCapabilitiesKey");
  v17 = (void *)MEMORY[0x1E0C99D80];
  v18 = CFSTR("kDeviceClassTypeTransient");
  objc_msgSend(v17, "dictionaryWithObjects:forKeys:count:", &v62, &v61, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v63[1] = CFSTR("kRequestedCapabilitiesKey");
  location[0] = v19;
  v59[0] = CFSTR("kHomedVersionKey");
  v59[1] = CFSTR("kHomeKitVersionStringKey");
  v60[0] = homedVersion;
  v20 = (id)homedVersion;
  +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "versionString");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v60[1] = v22;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v60, v59, 2);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  location[1] = v23;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", location, v63, 2);
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  objc_initWeak(location, self);
  objc_msgSend(v10, "userID");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager workQueue](self, "workQueue");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 3221225472;
  v50[2] = __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke;
  v50[3] = &unk_1E89BD938;
  objc_copyWeak(&v55, location);
  v36 = v44;
  v54 = v36;
  v45 = v11;
  v51 = v45;
  v26 = v10;
  v52 = v26;
  v37 = v16;
  v53 = v37;
  -[HMDHomeManager electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:](self, "electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:", v24, v40, v39, v25, v50);

  if (v42)
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    objc_msgSend(v45, "users");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
    if (!v28)
      goto LABEL_18;
    v29 = *(_QWORD *)v47;
    while (1)
    {
      for (i = 0; i != v28; ++i)
      {
        if (*(_QWORD *)v47 != v29)
          objc_enumerationMutation(v27);
        v31 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
        if (objc_msgSend(v31, "isRemoteGateway"))
        {
          objc_msgSend(v31, "userID");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "userID");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v32, "isEqualToString:", v33))
          {

          }
          else
          {
            objc_msgSend(v45, "currentUser");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = objc_msgSend(v31, "isEqual:", v34);

            if ((v35 & 1) != 0)
              continue;
            objc_msgSend(v31, "userID");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "addObject:", v32);
          }

        }
      }
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
      if (!v28)
      {
LABEL_18:

        -[HMDHomeManager _pushChangesToUsers:forHome:](self, "_pushChangesToUsers:forHome:", v43, v45);
        -[HMDHomeManager setUploadHomeDataToCloud:](self, "setUploadHomeDataToCloud:", 1);
        -[HMDHomeManager _pushChangesToCloud:withDelay:](self, "_pushChangesToCloud:withDelay:", 0, 0.0);

        break;
      }
    }
  }

  objc_destroyWeak(&v55);
  objc_destroyWeak(location);

}

- (void)_removeAllUsersOfHome:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDRemoteDeviceMessageDestination *v15;
  void *v16;
  HMDRemoteDeviceMessageDestination *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  void *v31;
  void *v32;
  char v33;
  char isKindOfClass;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  id obj;
  id v44;
  void *v45;
  _QWORD v46[5];
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[128];
  uint8_t v61[128];
  uint8_t buf[4];
  void *v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  uint64_t v67;
  _BYTE v68[128];
  const __CFString *v69;
  _QWORD v70[4];

  v70[1] = *MEMORY[0x1E0C80C00];
  v69 = CFSTR("kHomeUUID");
  v44 = a3;
  objc_msgSend(v44, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "UUIDString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v70[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v70, &v69, 1);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v57;
    v41 = 138543874;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v57 != v7)
          objc_enumerationMutation(obj);
        v9 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * i);
        v10 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "name");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v63 = v12;
          v64 = 2112;
          v65 = v13;
          v66 = 2112;
          v67 = v9;
          _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending the remove home for %@ to watch %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v10);
        +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v9);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = [HMDRemoteDeviceMessageDestination alloc];
        -[HMDHomeManager uuid](self, "uuid");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v15, "initWithTarget:device:", v16, v14);

        objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:destination:messagePayload:", CFSTR("kUserResetHomeConfigRequestKey"), v17, v45);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "sendMessage:completionHandler:", v18, 0);

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v56, v68, 16);
    }
    while (v6);
  }

  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  objc_msgSend(v44, "users");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v52, v61, 16);
  if (v21)
  {
    v22 = *(_QWORD *)v53;
    do
    {
      for (j = 0; j != v21; ++j)
      {
        if (*(_QWORD *)v53 != v22)
          objc_enumerationMutation(v20);
        objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * j), "account", v41);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "senderCorrelationIdentifier");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _trackRemovedHomeUserMergeId:](self, "_trackRemovedHomeUserMergeId:", v25);

      }
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v52, v61, 16);
    }
    while (v21);
  }

  objc_msgSend(v44, "isOwnerUser");
  if (+[HMDHomeManager isThisDeviceAdminOfHome:](HMDHomeManager, "isThisDeviceAdminOfHome:", v44))
  {
    objc_msgSend(v44, "users");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (void *)objc_msgSend(v26, "copy");

    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v42 = v27;
    v28 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
    if (v28)
    {
      v29 = *(_QWORD *)v49;
      do
      {
        for (k = 0; k != v28; ++k)
        {
          if (*(_QWORD *)v49 != v29)
            objc_enumerationMutation(v42);
          v31 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * k);
          objc_msgSend(v44, "currentUser");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = objc_msgSend(v31, "isEqual:", v32);

          if ((v33 & 1) == 0)
          {
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();
            -[HMDHomeManager uuid](self, "uuid");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "userID");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            if ((isKindOfClass & 1) != 0)
            {
              objc_msgSend(v31, "userID");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", v35, v36, v37, 0);
              v38 = (void *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", v35, v36, 0, 0);
              v38 = (void *)objc_claimAutoreleasedReturnValue();
            }

            +[HMDRemoteMessage secureMessageWithName:destination:messagePayload:](HMDRemoteMessage, "secureMessageWithName:destination:messagePayload:", CFSTR("kUserResetHomeConfigRequestKey"), v38, v45);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_initWeak((id *)buf, self);
            v46[0] = MEMORY[0x1E0C809B0];
            v46[1] = 3221225472;
            v46[2] = __40__HMDHomeManager__removeAllUsersOfHome___block_invoke;
            v46[3] = &unk_1E89BF4F0;
            v46[4] = v31;
            objc_copyWeak(&v47, (id *)buf);
            objc_msgSend(v39, "setResponseHandler:", v46);
            -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "sendMessage:completionHandler:", v39, 0);

            objc_destroyWeak(&v47);
            objc_destroyWeak((id *)buf);

          }
        }
        v28 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v48, v60, 16);
      }
      while (v28);
    }

  }
}

- (id)homeUserFromMessage:(id)a3 home:(id)a4
{
  return __isUserInMessagePartOfHome(self, a4, a3);
}

- (void)_handleResetHome:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  void *v29;
  HMDHomeManager *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void (**v34)(_QWORD, _QWORD, _QWORD);
  void *v35;
  int v36;
  void *v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = (void *)v6;
      v8 = v4;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v9 = v8;
      else
        v9 = 0;
      v10 = v9;

      if (!objc_msgSend(v8, "isRemote") || objc_msgSend(v10, "restriction") == 4)
        goto LABEL_10;
      __isUserInMessagePartOfHome(self, v7, v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v11, "isOwner") & 1) != 0)
      {

LABEL_10:
        v12 = (void *)MEMORY[0x1D17BA0A0]();
        v13 = self;
        HMFGetOSLogHandle();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543618;
          v37 = v15;
          v38 = 2112;
          v39 = v7;
          _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Received request to reset configuration for home %@", (uint8_t *)&v36, 0x16u);

        }
        objc_autoreleasePoolPop(v12);
        v16 = (void *)MEMORY[0x1D17BA0A0]();
        v17 = v13;
        HMFGetOSLogHandle();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = 138543618;
          v37 = v19;
          v38 = 2112;
          v39 = v7;
          _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Attempting to reset home %@ by removing it", (uint8_t *)&v36, 0x16u);

        }
        objc_autoreleasePoolPop(v16);
        -[HMDHomeManager _removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:](v17, "_removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:", v7, v8, 1, 1, 0);
        goto LABEL_21;
      }
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = self;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = 138543618;
        v37 = v32;
        v38 = 2112;
        v39 = v8;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@Only owner can remove homes: %@", (uint8_t *)&v36, 0x16u);

      }
      objc_autoreleasePoolPop(v29);
      objc_msgSend(v8, "responseHandler");
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      if (v33)
      {
        objc_msgSend(v8, "responseHandler");
        v34 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v34)[2](v34, v35, 0);

      }
    }
    else
    {
      v24 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "UUIDString");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = 138543618;
        v37 = v26;
        v38 = 2112;
        v39 = v27;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Cannot reset home %@ since it could not be found", (uint8_t *)&v36, 0x16u);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, id, _QWORD))v28)[2](v28, v10, 0);

      v7 = 0;
    }
  }
  else
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "name");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = 138543618;
      v37 = v22;
      v38 = 2112;
      v39 = v23;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for message %@", (uint8_t *)&v36, 0x16u);

    }
    objc_autoreleasePoolPop(v20);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v10 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, _QWORD))v10 + 2))(v10, v7, 0);
  }
LABEL_21:

}

- (void)_handleUserRemoved:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = v4;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    if (objc_msgSend(v7, "isRemote") && objc_msgSend(v9, "restriction") != 4)
    {
      __isUserInMessagePartOfHome(self, v6, v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v10, "isOwner") & 1) == 0)
      {
        v13 = (void *)MEMORY[0x1D17BA0A0]();
        v14 = self;
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = 138543618;
          v21 = v16;
          v22 = 2112;
          v23 = v7;
          _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Only owner can remove homes: %@", (uint8_t *)&v20, 0x16u);

        }
        objc_autoreleasePoolPop(v13);
        objc_msgSend(v7, "responseHandler");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17)
        {
          objc_msgSend(v7, "responseHandler");
          v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          ((void (**)(_QWORD, void *, _QWORD))v18)[2](v18, v19, 0);

        }
        goto LABEL_10;
      }

    }
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager scheduleRemovalForHome:message:options:](self, "scheduleRemovalForHome:message:options:", v6, v7, v10);
LABEL_10:

LABEL_13:
    goto LABEL_14;
  }
  objc_msgSend(v4, "responseHandler");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(v4, "responseHandler");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, _QWORD))v9 + 2))(v9, v12, 0);

    goto LABEL_13;
  }
LABEL_14:

}

- (void)processSharedHomeModelRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  void *v16;
  void *v17;
  void *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v9)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543618;
        v21 = v13;
        v22 = 2112;
        v23 = v9;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Attempting to remove home %@ since we are no longer part of the home", (uint8_t *)&v20, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      -[HMDHomeManager _removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:](self, "_removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:", v9, v7, 1, 0, 0);
      goto LABEL_13;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "UUIDString");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v16;
      v22 = 2112;
      v23 = v17;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Home %@ not found for user", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(v7, "responseHandler");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v18)
      goto LABEL_13;
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
    v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v19 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v19[2](v19, v15, 0);

LABEL_12:
LABEL_13:

    goto LABEL_14;
  }
  objc_msgSend(v7, "responseHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 20, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "responseHandler");
    v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v15)[2](v15, v9, 0);
    goto LABEL_12;
  }
LABEL_14:

}

- (void)fragmentationStream:(id)a3 didCloseWithError:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __56__HMDHomeManager_fragmentationStream_didCloseWithError___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)fragmentationStream:(id)a3 didReceiveData:(id)a4 transactionIdentifier:(unsigned __int16)a5 error:(id)a6
{
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  _QWORD block[5];
  id v15;
  id v16;
  id v17;
  unsigned __int16 v18;

  v10 = a3;
  v11 = a4;
  v12 = a6;
  if (v11)
  {
    -[HMDHomeManager workQueue](self, "workQueue");
    v13 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __81__HMDHomeManager_fragmentationStream_didReceiveData_transactionIdentifier_error___block_invoke;
    block[3] = &unk_1E89BD960;
    block[4] = self;
    v15 = v10;
    v16 = v11;
    v18 = a5;
    v17 = v12;
    dispatch_async(v13, block);

  }
}

- (BOOL)_shouldHandleHomeDataSync:(id)a3 remoteHome:(id)a4 sourceDeviceVersion:(id)a5
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  BOOL v12;
  void *v13;
  const char *v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  HMDHomeKitVersion *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint32_t v28;
  int v30;
  void *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = a5;
  if (isWatch())
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = 1;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = 138543362;
      v31 = v13;
      v14 = "%{public}@Adding or updating home on the watch";
LABEL_12:
      v21 = v11;
      v22 = 12;
LABEL_13:
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v30, v22);

      goto LABEL_30;
    }
    goto LABEL_30;
  }
  if (v7)
  {
    objc_msgSend(v7, "sharedHomeUpdateHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v15, "pendingRequestDataFromResident") & 1) != 0)
    {
      objc_msgSend(v7, "sharedHomeSourceVersion");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v9, "isGreaterThanVersion:", v16);

      if (v17)
      {
        v18 = objc_msgSend(v8, "configurationVersion");
        if (v18 < objc_msgSend(v7, "configurationVersion"))
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = 138543874;
            v31 = v19;
            v32 = 2048;
            v33 = objc_msgSend(v7, "configurationVersion");
            v34 = 2048;
            v35 = objc_msgSend(v8, "configurationVersion");
            v20 = "%{public}@Pending request data from resident is active, Local home is at version %ld and incoming home"
                  " version is at %ld, discarding changes and sending ack";
LABEL_24:
            v27 = v11;
            v28 = 32;
            goto LABEL_25;
          }
          goto LABEL_26;
        }
        goto LABEL_16;
      }
    }
    else
    {

    }
    v23 = objc_msgSend(v8, "configurationVersion");
    if (v23 <= objc_msgSend(v7, "configurationVersion"))
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 138543874;
        v31 = v19;
        v32 = 2048;
        v33 = objc_msgSend(v7, "configurationVersion");
        v34 = 2048;
        v35 = objc_msgSend(v8, "configurationVersion");
        v20 = "%{public}@Local home is at version %ld and incoming home version is at %ld, discarding changes and sending ack";
        goto LABEL_24;
      }
LABEL_26:
      v12 = 0;
      goto LABEL_30;
    }
LABEL_16:
    if (v9)
    {
      v24 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("3.1"));
      if (objc_msgSend(v9, "isAtLeastVersion:", v24) && objc_msgSend(v7, "expectedConfigurationVersion"))
      {
        v25 = objc_msgSend(v7, "expectedConfigurationVersion");
        v26 = objc_msgSend(v8, "configurationVersion");

        if (v25 > v26)
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = 138544130;
            v31 = v19;
            v32 = 2048;
            v33 = objc_msgSend(v7, "configurationVersion");
            v34 = 2048;
            v35 = objc_msgSend(v7, "expectedConfigurationVersion");
            v36 = 2048;
            v37 = objc_msgSend(v8, "configurationVersion");
            v20 = "%{public}@Local is config version is at %ld and expected config version %ld and incoming home config v"
                  "ersion is at %ld, discarding changes and sending ack";
            v27 = v11;
            v28 = 42;
LABEL_25:
            _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, v20, (uint8_t *)&v30, v28);

            goto LABEL_26;
          }
          goto LABEL_26;
        }
      }
      else
      {

      }
    }
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = 1;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      goto LABEL_30;
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138544130;
    v31 = v13;
    v32 = 2048;
    v33 = objc_msgSend(v7, "configurationVersion");
    v34 = 2048;
    v35 = objc_msgSend(v7, "expectedConfigurationVersion");
    v36 = 2048;
    v37 = objc_msgSend(v8, "configurationVersion");
    v14 = "%{public}@Local is config version is at %ld and expected config version %ld and incoming home config version i"
          "s at %ld, accepting new changes";
    v12 = 1;
    v21 = v11;
    v22 = 42;
    goto LABEL_13;
  }
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = 1;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 138543362;
    v31 = v13;
    v14 = "%{public}@Receiving a new shared home";
    goto LABEL_12;
  }
LABEL_30:

  objc_autoreleasePoolPop(v10);
  return v12;
}

- (void)_handleHomeDataSync:(id)a3
{
  id v4;
  void *v5;
  BOOL v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  HMDHomeManager *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  HMDHomeManager *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  int v51;
  id v52;
  void *v53;
  HMDHomeManager *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void *v58;
  NSObject *v59;
  void *v60;
  void *v61;
  void *v62;
  void (**v63)(_QWORD, _QWORD, _QWORD);
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  HMDHomeManager *v68;
  NSObject *v69;
  void *v70;
  void *v71;
  id v72;
  char v73;
  int v74;
  void *v75;
  HMDHomeManager *v76;
  NSObject *v77;
  _BOOL4 v78;
  void *v79;
  void *v80;
  id v81;
  id v82;
  id v83;
  void *v84;
  HMDHomeManager *v85;
  NSObject *v86;
  NSObject *v87;
  void *v88;
  void *v89;
  void *v90;
  int v91;
  void *v92;
  void *v93;
  void *v94;
  int v95;
  void *v96;
  int v97;
  void *v98;
  void *v99;
  int v100;
  void *v101;
  HMDHomeManager *v102;
  NSObject *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  id v108;
  char v109;
  void *v110;
  void *v111;
  HMDHomeManager *v112;
  NSObject *v113;
  void *v114;
  HMDSharedHomeModel *v115;
  void *v116;
  HMDHomeManager *v117;
  NSObject *v118;
  void *v119;
  void *v120;
  void *v121;
  void (**v122)(_QWORD, _QWORD, _QWORD);
  void *v123;
  void *v124;
  int v125;
  void *v126;
  HMDHomeManager *v127;
  NSObject *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  id v136;
  void *v137;
  void *v138;
  void *v139;
  HMDHomeManager *v140;
  NSObject *v141;
  void *v142;
  void *v143;
  void *v144;
  HMDSharedHomeModel *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  uint64_t v150;
  void *v151;
  void *v152;
  id v153;
  id v154;
  void *v155;
  id v156;
  uint64_t v157;
  void *v158;
  void *v159;
  void *v160;
  uint64_t v161;
  void *v162;
  id v163;
  id v164;
  id v165;
  void *v166;
  id obj;
  id obja;
  HMDHomeManager *v169;
  void *v170;
  id v171;
  id v172;
  id v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  const __CFString *v182;
  uint64_t v183;
  const __CFString *v184;
  uint64_t v185;
  _QWORD v186[7];
  uint8_t v187[4];
  void *v188;
  __int16 v189;
  void *v190;
  uint8_t v191[4];
  void *v192;
  __int16 v193;
  id v194;
  __int16 v195;
  void *v196;
  uint8_t buf[4];
  void *v198;
  __int16 v199;
  id v200;
  __int16 v201;
  id v202;
  __int16 v203;
  id v204;
  __int16 v205;
  void *v206;
  __int16 v207;
  void *v208;
  __int16 v209;
  void *v210;
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v173 = 0;
  v6 = -[HMDHomeManager _shouldDecodeMessage:error:](self, "_shouldDecodeMessage:error:", v4, &v173);
  v7 = v173;
  if (v6)
  {
    objc_msgSend(v4, "dataForKey:", CFSTR("kHomeDataKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      v58 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v198 = v60;
        _os_log_impl(&dword_1CD062000, v59, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive home data", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v58);
      objc_msgSend(v4, "responseHandler");
      v61 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v61)
        goto LABEL_96;
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v63 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v63)[2](v63, v62, 0);
LABEL_95:

LABEL_96:
      goto LABEL_97;
    }
    v162 = v5;
    v161 = objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.handle-home-sync"));
    objc_msgSend(v8, "hmd_uncompressedData");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!v9)
      v9 = v8;
    v10 = (void *)MEMORY[0x1E0C99E60];
    v186[0] = objc_opt_class();
    v186[1] = objc_opt_class();
    v186[2] = objc_opt_class();
    v186[3] = objc_opt_class();
    v186[4] = objc_opt_class();
    v186[5] = objc_opt_class();
    v186[6] = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v186, 7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setWithArray:", v11);
    v12 = objc_claimAutoreleasedReturnValue();

    v172 = 0;
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v9, &v172);
    v164 = v172;
    objc_msgSend(v13, "_allowDecodingCyclesInSecureMode");
    v159 = v13;
    v160 = (void *)v12;
    objc_msgSend(v13, "decodeObjectOfClasses:forKey:", v12, *MEMORY[0x1E0CB2CD0]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = self;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v18 = v8;
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v198 = v19;
        v199 = 2112;
        v200 = v164;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive home from uncompressed data: %@", buf, 0x16u);

        v8 = v18;
      }

      objc_autoreleasePoolPop(v15);
    }
    v163 = v9;
    v20 = v14;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v21 = v20;
    else
      v21 = 0;
    v22 = v21;

    v158 = v22;
    objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("kHomeDataBlobKey"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "_removeCorruptAccessories");
    v184 = CFSTR("kDataSyncResponseAckKey");
    v185 = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v185, &v184, 1);
    v157 = objc_claimAutoreleasedReturnValue();
    if (!v23)
      goto LABEL_87;
    v156 = v20;
    v152 = v8;
    v153 = v7;
    v24 = self;
    v155 = v23;
    v25 = v23;
    v154 = v4;
    v165 = v4;
    v169 = v24;
    v171 = v25;
    v178 = 0u;
    v179 = 0u;
    v180 = 0u;
    v181 = 0u;
    -[HMDHomeManager homes](v169, "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v178, buf, 16);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v179;
      while (2)
      {
        for (i = 0; i != v27; ++i)
        {
          if (*(_QWORD *)v179 != v28)
            objc_enumerationMutation(obj);
          v30 = *(void **)(*((_QWORD *)&v178 + 1) + 8 * i);
          v31 = (void *)MEMORY[0x1D17BA0A0]();
          v32 = v169;
          HMFGetOSLogHandle();
          v33 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v171, "uuid");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v191 = 138543874;
            v192 = v34;
            v193 = 2112;
            v194 = v35;
            v195 = 2112;
            v196 = v30;
            _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_DEBUG, "%{public}@Looking for home uuid %@, currentHome:  %@", v191, 0x20u);

          }
          objc_autoreleasePoolPop(v31);
          objc_msgSend(v30, "uuid");
          v36 = objc_claimAutoreleasedReturnValue();
          if (v36)
          {
            v37 = (void *)v36;
            objc_msgSend(v30, "uuid");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v171, "uuid");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            v40 = objc_msgSend(v38, "hmf_isEqualToUUID:", v39);

            if (v40)
            {
              objc_msgSend(v30, "owner");
              v64 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v64, "pairingIdentity");
              v52 = (id)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v30, "owner");
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v65, "account");
              v66 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v66, "senderCorrelationIdentifier");
              v43 = (id)objc_claimAutoreleasedReturnValue();

              v67 = (void *)MEMORY[0x1D17BA0A0]();
              v68 = v32;
              HMFGetOSLogHandle();
              v69 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
              {
                HMFGetLogIdentifier();
                v70 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)v191 = 138543618;
                v192 = v70;
                v193 = 2112;
                v194 = v43;
                _os_log_impl(&dword_1CD062000, v69, OS_LOG_TYPE_DEBUG, "%{public}@Found current home account mergeID %@", v191, 0x16u);

              }
              objc_autoreleasePoolPop(v67);
              objc_msgSend(v30, "owner");
              v71 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v71, "account");
              v72 = (id)objc_claimAutoreleasedReturnValue();

LABEL_44:
              v73 = 1;
              goto LABEL_53;
            }
          }
        }
        v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v178, buf, 16);
        if (v27)
          continue;
        break;
      }
    }

    v176 = 0u;
    v177 = 0u;
    v174 = 0u;
    v175 = 0u;
    -[HMDHomeManager incomingInvitations](v169, "incomingInvitations");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = (void *)objc_msgSend(v41, "copy");

    obj = v42;
    v43 = (id)objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v174, v191, 16);
    if (v43)
    {
      v44 = *(_QWORD *)v175;
LABEL_26:
      v45 = 0;
      while (1)
      {
        if (*(_QWORD *)v175 != v44)
          objc_enumerationMutation(obj);
        v46 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * v45);
        objc_msgSend(v46, "homeUUID", v152);
        v47 = objc_claimAutoreleasedReturnValue();
        if (v47)
        {
          v48 = (void *)v47;
          objc_msgSend(v46, "homeUUID");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v171, "uuid");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          v51 = objc_msgSend(v49, "hmf_isEqualToUUID:", v50);

          if (v51)
            break;
        }
        if (v43 == (id)++v45)
        {
          v43 = (id)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v174, v191, 16);
          if (v43)
            goto LABEL_26;
          goto LABEL_33;
        }
      }
      v74 = objc_msgSend(v46, "isAccepted");
      v75 = (void *)MEMORY[0x1D17BA0A0]();
      v76 = v169;
      HMFGetOSLogHandle();
      v77 = objc_claimAutoreleasedReturnValue();
      v78 = os_log_type_enabled(v77, OS_LOG_TYPE_INFO);
      if (v74)
      {
        if (v78)
        {
          HMFGetLogIdentifier();
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v187 = 138543618;
          v188 = v79;
          v189 = 2112;
          v190 = v46;
          _os_log_impl(&dword_1CD062000, v77, OS_LOG_TYPE_INFO, "%{public}@Received home sync for invitation: %@", v187, 0x16u);

        }
        objc_autoreleasePoolPop(v75);
        objc_msgSend(v46, "inviterIdentity");
        v52 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "inviterAccount");
        v72 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "inviterMergeID");
        v43 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      }
      if (v78)
      {
        HMFGetLogIdentifier();
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v187 = 138543618;
        v188 = v80;
        v189 = 2112;
        v190 = v46;
        _os_log_impl(&dword_1CD062000, v77, OS_LOG_TYPE_INFO, "%{public}@Received home sync for unaccepted invitation: %@", v187, 0x16u);

      }
      objc_autoreleasePoolPop(v75);
      v52 = 0;
      v43 = 0;
    }
    else
    {
LABEL_33:
      v52 = 0;
    }
    v72 = 0;
    v73 = 0;
LABEL_53:

    v81 = v52;
    v82 = v43;
    v83 = v72;
    v84 = (void *)MEMORY[0x1D17BA0A0]();
    v85 = v169;
    HMFGetOSLogHandle();
    v86 = objc_claimAutoreleasedReturnValue();
    v87 = v86;
    if ((v73 & 1) != 0)
    {
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138544130;
        v198 = v88;
        v199 = 2112;
        v200 = v165;
        v201 = 2112;
        v202 = v81;
        v203 = 2112;
        v204 = v82;
        _os_log_impl(&dword_1CD062000, v87, OS_LOG_TYPE_DEBUG, "%{public}@Found owner identity, checking message: %@, against pairing identity: %@, mergeID: %@", buf, 0x2Au);

      }
      objc_autoreleasePoolPop(v84);
      objc_msgSend(v165, "remoteSenderContext");
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v89, "mergeID");
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      v91 = objc_msgSend(v82, "isEqualToString:", v90);

      objc_msgSend(v81, "identifier");
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v165, "remoteSenderContext");
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v93, "pairingIdentityIdentifier");
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      v95 = v91 | objc_msgSend(v92, "isEqualToString:", v94);

      objc_msgSend(v165, "remoteUserPairingIdentity");
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      v97 = v95 | objc_msgSend(v81, "isEqual:", v96);

      if (objc_msgSend(v83, "isAuthenticated"))
      {
        objc_msgSend(v165, "remoteSourceDevice");
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v98, "account");
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        v100 = objc_msgSend(v83, "isEqual:", v99);

        if ((v100 & v97 & 1) == 0)
        {
LABEL_58:
          v101 = (void *)MEMORY[0x1D17BA0A0]();
          v102 = v85;
          HMFGetOSLogHandle();
          v103 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            obja = v82;
            v104 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v83, "isAuthenticated");
            HMFBooleanToString();
            v166 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v165, "remoteSourceDevice");
            v170 = v101;
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v105, "account");
            v106 = (void *)objc_claimAutoreleasedReturnValue();
            HMFBooleanToString();
            v107 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544898;
            v198 = v104;
            v199 = 2112;
            v200 = v171;
            v201 = 2112;
            v202 = v165;
            v203 = 2112;
            v204 = v83;
            v205 = 2112;
            v206 = v166;
            v207 = 2112;
            v208 = v106;
            v209 = 2112;
            v210 = v107;
            _os_log_impl(&dword_1CD062000, v103, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected home data sync for home: %@, message: %@, ownerAccount: %@, ownerAccount.isAuthenticated: %@, sourceDevice.account: %@, isValidOwnerAccountIdentity: %@", buf, 0x48u);

            v101 = v170;
            v82 = obja;
          }

          objc_autoreleasePoolPop(v101);
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
          v108 = (id)objc_claimAutoreleasedReturnValue();
          v109 = 0;
          v8 = v152;
          goto LABEL_68;
        }
      }
      else if ((v97 & 1) == 0)
      {
        goto LABEL_58;
      }
      v111 = (void *)MEMORY[0x1D17BA0A0]();
      v112 = v85;
      HMFGetOSLogHandle();
      v113 = objc_claimAutoreleasedReturnValue();
      v8 = v152;
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v198 = v114;
        v199 = 2112;
        v200 = v165;
        _os_log_impl(&dword_1CD062000, v113, OS_LOG_TYPE_DEBUG, "%{public}@Accepting home data sync: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v111);
      v108 = 0;
      v109 = 1;
    }
    else
    {
      v8 = v152;
      if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v198 = v110;
        v199 = 2112;
        v200 = v171;
        _os_log_impl(&dword_1CD062000, v87, OS_LOG_TYPE_ERROR, "%{public}@Unable to determine current owner of home: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v84);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v108 = (id)objc_claimAutoreleasedReturnValue();
      v109 = 0;
    }
LABEL_68:

    v115 = (HMDSharedHomeModel *)v108;
    if ((v109 & 1) != 0)
    {
      objc_msgSend(v171, "isOwnerUser");
      v7 = v153;
      v4 = v154;
      if (+[HMDHomeManager isThisDeviceAdminOfHome:](HMDHomeManager, "isThisDeviceAdminOfHome:", v171))
      {
        v116 = (void *)MEMORY[0x1D17BA0A0]();
        v117 = v85;
        HMFGetOSLogHandle();
        v118 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v119 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v198 = v119;
          v199 = 2112;
          v200 = v171;
          _os_log_impl(&dword_1CD062000, v118, OS_LOG_TYPE_INFO, "%{public}@Dropping remote home sync to owner: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v116);
        objc_msgSend(v165, "responseHandler");
        v120 = (void *)objc_claimAutoreleasedReturnValue();

        v5 = v162;
        v63 = (void (**)(_QWORD, _QWORD, _QWORD))v163;
        v23 = v155;
        v121 = (void *)v157;
        if (!v120)
          goto LABEL_92;
        objc_msgSend(v165, "responseHandler");
        v122 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v122[2](v122, 0, v157);
LABEL_91:

LABEL_92:
        v20 = v156;
        goto LABEL_93;
      }
      objc_msgSend(v171, "uuid");
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _homeWithUUID:](v85, "_homeWithUUID:", v132);
      v133 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v165, "destination");
      v134 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v135 = v134;
      else
        v135 = 0;
      v136 = v135;

      objc_msgSend(v136, "device");
      v137 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v137, "version");
      v138 = (void *)objc_claimAutoreleasedReturnValue();

      LODWORD(v137) = -[HMDHomeManager _shouldHandleHomeDataSync:remoteHome:sourceDeviceVersion:](v85, "_shouldHandleHomeDataSync:remoteHome:sourceDeviceVersion:", v133, v171, v138);
      v23 = v155;
      v20 = v156;
      if (!(_DWORD)v137)
      {
LABEL_87:
        objc_msgSend(v4, "responseHandler", v152);
        v143 = (void *)objc_claimAutoreleasedReturnValue();

        v5 = v162;
        v63 = (void (**)(_QWORD, _QWORD, _QWORD))v163;
        v121 = (void *)v157;
        if (!v143)
        {
LABEL_94:

          v62 = (void *)v161;
          goto LABEL_95;
        }
        objc_msgSend(v4, "responseHandler");
        v115 = (HMDSharedHomeModel *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(HMDSharedHomeModel *, _QWORD, uint64_t))&v115->super._bsoDataVersionOverride)(v115, 0, v157);
LABEL_93:

        goto LABEL_94;
      }
      if ((objc_msgSend(v171, "isOwnerUser") & 1) != 0)
      {
        v139 = (void *)MEMORY[0x1D17BA0A0]();
        v140 = v85;
        HMFGetOSLogHandle();
        v141 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v142 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v198 = v142;
          v199 = 2112;
          v200 = v171;
          _os_log_impl(&dword_1CD062000, v141, OS_LOG_TYPE_ERROR, "%{public}@Received unexpected home data sync for owned home %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v139);
        v23 = v155;
        v20 = v156;
        goto LABEL_87;
      }
      v145 = [HMDSharedHomeModel alloc];
      objc_msgSend(v171, "uuid");
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager uuid](v85, "uuid");
      v147 = (void *)objc_claimAutoreleasedReturnValue();
      v115 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v145, "initWithObjectChangeType:uuid:parentUUID:", 1, v146, v147);

      -[HMDSharedHomeModel setHomeData:](v115, "setHomeData:", v163);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v171, "configurationVersion"));
      v148 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDSharedHomeModel setConfigurationVersion:](v115, "setConfigurationVersion:", v148);

      -[HMDHomeManager homes](v85, "homes");
      v149 = (void *)objc_claimAutoreleasedReturnValue();
      v150 = objc_msgSend(v149, "count");

      if (!v150)
      {
        objc_msgSend(v171, "uuid");
        v151 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager setPrimaryHomeUUID:](v85, "setPrimaryHomeUUID:", v151);

      }
      -[HMDHomeManager transactionObjectUpdated:newValues:message:](v85, "transactionObjectUpdated:newValues:message:", 0, v115, v165, v152);
      v5 = v162;
      v63 = (void (**)(_QWORD, _QWORD, _QWORD))v163;
    }
    else
    {
      -[HMDHomeManager uuidsOfRemovedHomes](v85, "uuidsOfRemovedHomes");
      v123 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v171, "uuid");
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      v125 = objc_msgSend(v123, "containsObject:", v124);

      v7 = v153;
      v4 = v154;
      v5 = v162;
      if (v125)
      {
        v126 = (void *)MEMORY[0x1D17BA0A0]();
        v127 = v85;
        HMFGetOSLogHandle();
        v128 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v198 = v129;
          v199 = 2112;
          v200 = v171;
          _os_log_impl(&dword_1CD062000, v128, OS_LOG_TYPE_INFO, "%{public}@Rejecting home data sync, home was removed: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v126);
        objc_msgSend(v165, "responseHandler");
        v130 = (void *)objc_claimAutoreleasedReturnValue();

        v63 = (void (**)(_QWORD, _QWORD, _QWORD))v163;
        v23 = v155;
        v121 = (void *)v157;
        if (!v130)
          goto LABEL_92;
        objc_msgSend(v165, "responseHandler");
        v122 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        v182 = CFSTR("kDataSyncResponseNAckKey");
        v183 = MEMORY[0x1E0C9AAB0];
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v183, &v182, 1);
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, _QWORD, void *))v122)[2](v122, 0, v131);

        goto LABEL_91;
      }
      objc_msgSend(v165, "responseHandler");
      v144 = (void *)objc_claimAutoreleasedReturnValue();

      if (v144)
      {
        objc_msgSend(v165, "responseHandler");
        v122 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, HMDSharedHomeModel *, _QWORD))v122)[2](v122, v115, 0);
        v63 = (void (**)(_QWORD, _QWORD, _QWORD))v163;
        v23 = v155;
        v121 = (void *)v157;
        goto LABEL_91;
      }
      v63 = (void (**)(_QWORD, _QWORD, _QWORD))v163;
    }
    v23 = v155;
    v20 = v156;
    v121 = (void *)v157;
    goto LABEL_93;
  }
  v53 = (void *)MEMORY[0x1D17BA0A0]();
  v54 = self;
  HMFGetOSLogHandle();
  v55 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "remoteUserPairingIdentity");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v198 = v56;
    v199 = 2112;
    v200 = v57;
    _os_log_impl(&dword_1CD062000, v55, OS_LOG_TYPE_ERROR, "%{public}@Rejecting home data sync - Sync not from trusted account %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v53);
  objc_msgSend(v4, "respondWithError:", v7);
LABEL_97:

  objc_autoreleasePoolPop(v5);
}

- (BOOL)_shouldDecodeMessage:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  BOOL v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  id *v35;
  HMDHomeManager *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t v46[128];
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  void *v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(v6, "remoteUserPairingIdentity");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "remoteSenderContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "mergeID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v36 = self;
  -[HMDHomeManager homes](self, "homes");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v43;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v43 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * i);
        objc_msgSend(v6, "matchingRemoteIdentityUserForHome:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          v30 = (void *)MEMORY[0x1D17BA0A0]();
          v31 = v36;
          HMFGetOSLogHandle();
          v32 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "name");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v48 = v28;
            v49 = 2112;
            v50 = v29;
            _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Received home sync from owner of known home %@", buf, 0x16u);

LABEL_27:
          }
          goto LABEL_28;
        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
      if (v11)
        continue;
      break;
    }
  }
  v35 = a4;

  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  -[HMDHomeManager incomingInvitations](v36, "incomingInvitations");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v16, "copy");

  v17 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v39;
LABEL_11:
    v20 = 0;
    while (1)
    {
      if (*(_QWORD *)v39 != v19)
        objc_enumerationMutation(v9);
      v21 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v20);
      objc_msgSend(v21, "inviterIdentity");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "isEqual:", v37);

      objc_msgSend(v21, "inviterMergeID");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "isEqual:", v8);

      if (objc_msgSend(v21, "isAccepted") && (v23 | v25) != 0)
        break;
      if (v18 == ++v20)
      {
        v18 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
        if (v18)
          goto LABEL_11;
        goto LABEL_21;
      }
    }
    v30 = (void *)MEMORY[0x1D17BA0A0]();
    v31 = v36;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v48 = v28;
      v49 = 2112;
      v50 = v21;
      _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_DEBUG, "%{public}@Received home sync from accepted invitation %@", buf, 0x16u);
      goto LABEL_27;
    }
LABEL_28:

    objc_autoreleasePoolPop(v30);
    v27 = 1;
  }
  else
  {
LABEL_21:

    if (v35)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 17);
      v27 = 0;
      *v35 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v27 = 0;
    }
  }

  return v27;
}

- (id)_loadCloudTransactionForRemoteHome:(id)a3 localHome:(id)a4 cachedHome:(id)a5 version:(int64_t)a6
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  HMDUserModel *v25;
  HMDUserModel *v26;
  HMDUserModel *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  HMDUserModel *v38;
  void *v39;
  int v40;
  void *v41;
  void *v42;
  NSObject *v43;
  void *v44;
  objc_class *v45;
  void *v46;
  HMDUserModel *v47;
  void *v48;
  void *v49;
  HMDUserModel *v50;
  HMDUserModel *v51;
  HMDUserModel *v52;
  void *v53;
  uint64_t v54;
  HMDUserModel *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  int v63;
  HMDUserModel *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  NSObject *v72;
  void *v73;
  objc_class *v74;
  void *v75;
  HMDUserModel *v76;
  void *v77;
  NSObject *v78;
  void *v79;
  HMDUserModel *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  HMDUserModel *v85;
  id v86;
  HMDUserModel *v87;
  void *v88;
  objc_class *v89;
  void *v90;
  HMDUserModel *v91;
  uint64_t v92;
  uint64_t k;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  char v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  char v113;
  void *v114;
  HMDHomeManager *v115;
  NSObject *v116;
  void *v117;
  HMDUserModel *v118;
  void *v119;
  HMDUserModel *v120;
  void *v121;
  HMDHomeManager *v122;
  NSObject *v123;
  void *v124;
  void *v125;
  HMDHomeManager *v126;
  NSObject *v127;
  void *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t m;
  void *v134;
  void *v135;
  HMDHomeManager *v136;
  NSObject *v137;
  void *v138;
  void *v140;
  void *v141;
  void *v142;
  HMDUserModel *v143;
  void *v144;
  void *v145;
  void *v146;
  int64_t v147;
  void *v148;
  uint64_t v149;
  id v150;
  id v151;
  id obj;
  id obja;
  id v154;
  id v155;
  uint64_t v156;
  void *v157;
  void *v159;
  uint64_t v160;
  id v161;
  HMDUserModel *v162;
  id v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  id v168;
  id v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  _BYTE v194[128];
  _BYTE v195[128];
  _BYTE v196[128];
  _BYTE v197[128];
  _BYTE v198[128];
  uint8_t v199[128];
  uint8_t buf[4];
  void *v201;
  __int16 v202;
  int64_t v203;
  __int16 v204;
  HMDUserModel *v205;
  __int16 v206;
  void *v207;
  _BYTE v208[128];
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v144 = v10;
  objc_msgSend(v10, "backingStoreObjects:", a6);
  v140 = (void *)objc_claimAutoreleasedReturnValue();
  v142 = v9;
  objc_msgSend(v9, "backingStoreObjects:", a6);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v157 = (void *)objc_msgSend(v12, "mutableCopy");

  v141 = v11;
  v147 = a6;
  objc_msgSend(v11, "backingStoreObjects:", a6);
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v201 = v15;
    v202 = 2048;
    v203 = a6;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Received data with home-data-version %tu", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v13);
  v192 = 0u;
  v193 = 0u;
  v190 = 0u;
  v191 = 0u;
  obj = (id)objc_msgSend(v157, "copy");
  v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v190, v208, 16);
  if (v16)
  {
    v17 = (id)v16;
    v18 = *(_QWORD *)v191;
    v149 = *(_QWORD *)v191;
    do
    {
      v19 = 0;
      v150 = v17;
      do
      {
        if (*(_QWORD *)v191 != v18)
          objc_enumerationMutation(obj);
        v20 = *(id *)(*((_QWORD *)&v190 + 1) + 8 * (_QWORD)v19);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v21 = v20;
        else
          v21 = 0;
        v22 = v21;

        if (v22)
        {
          if (!objc_msgSend(v22, "propertyWasSet:", CFSTR("uniqueIdentifier"))
            || (objc_msgSend(v22, "uniqueIdentifier"),
                v23 = (void *)objc_claimAutoreleasedReturnValue(),
                v23,
                !v23))
          {
            v155 = v22;
            v41 = v19;
            v42 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v43 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              v45 = (objc_class *)objc_opt_class();
              NSStringFromClass(v45);
              v46 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "bsoType");
              v47 = (HMDUserModel *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "uuid");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v48, "UUIDString");
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v201 = v44;
              v202 = 2112;
              v203 = (int64_t)v46;
              v204 = 2112;
              v205 = v47;
              v206 = 2112;
              v207 = v49;
              _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object (uuid: %@) from remote that has a null / unset uniqueIdentifier (no way to recover).", buf, 0x2Au);

              v17 = v150;
              v18 = v149;

            }
            objc_autoreleasePoolPop(v42);
            objc_msgSend(v157, "removeObject:", v20);
            v19 = v41;
            goto LABEL_62;
          }
        }
        objc_msgSend(v20, "uuid");
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v24)
        {
          v155 = v22;
          v50 = (HMDUserModel *)v20;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v51 = v50;
          else
            v51 = 0;
          v52 = v51;

          if (v52)
          {
            v184 = 0u;
            v185 = 0u;
            v182 = 0u;
            v183 = 0u;
            objc_msgSend(v144, "users");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v182, v198, 16);
            v55 = v50;
            if (v54)
            {
              v56 = v54;
              v162 = v50;
              v146 = v19;
              v57 = *(_QWORD *)v183;
              while (2)
              {
                for (i = 0; i != v56; ++i)
                {
                  if (*(_QWORD *)v183 != v57)
                    objc_enumerationMutation(v53);
                  v59 = *(void **)(*((_QWORD *)&v182 + 1) + 8 * i);
                  objc_msgSend(v59, "pairingUsername");
                  v60 = (void *)objc_claimAutoreleasedReturnValue();
                  -[HMDUserModel pairingIdentity](v52, "pairingIdentity");
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v61, "objectForKey:", CFSTR("HAP.identifier"));
                  v62 = (void *)objc_claimAutoreleasedReturnValue();
                  v63 = objc_msgSend(v60, "isEqual:", v62);

                  if (v63)
                  {
                    v64 = [HMDUserModel alloc];
                    -[HMDBackingStoreModelObject bsoDataVersion](v52, "bsoDataVersion");
                    v65 = (void *)objc_claimAutoreleasedReturnValue();
                    v66 = -[HMDBackingStoreModelObject objectChangeType](v52, "objectChangeType");
                    objc_msgSend(v59, "uuid");
                    v67 = (void *)objc_claimAutoreleasedReturnValue();
                    -[HMDBackingStoreModelObject parentUUID](v52, "parentUUID");
                    v68 = (void *)objc_claimAutoreleasedReturnValue();
                    v55 = -[HMDBackingStoreModelObject initWithVersion:changeType:uuid:parentUUID:](v64, "initWithVersion:changeType:uuid:parentUUID:", v65, v66, v67, v68);

                    v69 = -[HMDBackingStoreModelObject merge:](v55, "merge:", v52);
                    goto LABEL_48;
                  }
                }
                v56 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v182, v198, 16);
                if (v56)
                  continue;
                break;
              }
              v55 = v52;
LABEL_48:
              v18 = v149;
              v19 = v146;
              v50 = v162;
            }

            -[HMDBackingStoreModelObject uuid](v55, "uuid");
            v70 = (void *)objc_claimAutoreleasedReturnValue();

            v17 = v150;
            if (v70)
              goto LABEL_61;
            v71 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v72 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v88 = (void *)objc_claimAutoreleasedReturnValue();
              v89 = (objc_class *)objc_opt_class();
              NSStringFromClass(v89);
              v90 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDBackingStoreModelObject bsoType](v50, "bsoType");
              v91 = (HMDUserModel *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v201 = v88;
              v202 = 2112;
              v203 = (int64_t)v90;
              v204 = 2112;
              v205 = v91;
              _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object from remote that has a null UUID (tried to match via pairing ID and failed).", buf, 0x20u);

              v18 = v149;
            }
          }
          else
          {
            v71 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v72 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v73 = (void *)objc_claimAutoreleasedReturnValue();
              v74 = (objc_class *)objc_opt_class();
              NSStringFromClass(v74);
              v75 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDBackingStoreModelObject bsoType](v50, "bsoType");
              v76 = (HMDUserModel *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v201 = v73;
              v202 = 2112;
              v203 = (int64_t)v75;
              v204 = 2112;
              v205 = v76;
              _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Got %@/%@ object from remote that has a null UUID (and no way to recover).", buf, 0x20u);

            }
            v55 = 0;
          }

          objc_autoreleasePoolPop(v71);
          objc_msgSend(v157, "removeObject:", v50);
LABEL_61:

LABEL_62:
          v22 = v155;
          goto LABEL_63;
        }
        if (v147 <= 3)
        {
          v25 = (HMDUserModel *)v20;
          objc_opt_class();
          v26 = (objc_opt_isKindOfClass() & 1) != 0 ? v25 : 0;
          v27 = v26;

          if (v27)
          {
            v188 = 0u;
            v189 = 0u;
            v186 = 0u;
            v187 = 0u;
            objc_msgSend(v144, "users");
            v161 = (id)objc_claimAutoreleasedReturnValue();
            v28 = objc_msgSend(v161, "countByEnumeratingWithState:objects:count:", &v186, v199, 16);
            if (v28)
            {
              v29 = v28;
              v143 = v25;
              v154 = v22;
              v145 = v19;
              v30 = *(_QWORD *)v187;
              while (2)
              {
                for (j = 0; j != v29; ++j)
                {
                  if (*(_QWORD *)v187 != v30)
                    objc_enumerationMutation(v161);
                  v32 = *(void **)(*((_QWORD *)&v186 + 1) + 8 * j);
                  objc_msgSend(v32, "uuid");
                  v33 = (void *)objc_claimAutoreleasedReturnValue();
                  -[HMDBackingStoreModelObject uuid](v27, "uuid");
                  v34 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend(v33, "isEqual:", v34))
                  {

                  }
                  else
                  {
                    objc_msgSend(v32, "pairingUsername");
                    v35 = (void *)objc_claimAutoreleasedReturnValue();
                    -[HMDUserModel pairingIdentity](v27, "pairingIdentity");
                    v159 = v32;
                    v36 = v29;
                    v37 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v37, "objectForKey:", CFSTR("HAP.identifier"));
                    v38 = v27;
                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                    v40 = objc_msgSend(v35, "isEqual:", v39);

                    v27 = v38;
                    v29 = v36;

                    if (v40)
                    {
                      v77 = (void *)MEMORY[0x1D17BA0A0]();
                      HMFGetOSLogHandle();
                      v78 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
                      {
                        HMFGetLogIdentifier();
                        v79 = (void *)objc_claimAutoreleasedReturnValue();
                        *(_DWORD *)buf = 138543874;
                        v201 = v79;
                        v202 = 2112;
                        v203 = (int64_t)v159;
                        v204 = 2112;
                        v205 = v38;
                        _os_log_impl(&dword_1CD062000, v78, OS_LOG_TYPE_INFO, "%{public}@Found an existing user %@, MERGING properties from %@", buf, 0x20u);

                      }
                      objc_autoreleasePoolPop(v77);
                      v80 = [HMDUserModel alloc];
                      -[HMDBackingStoreModelObject bsoDataVersion](v38, "bsoDataVersion");
                      v81 = (void *)objc_claimAutoreleasedReturnValue();
                      v82 = -[HMDBackingStoreModelObject objectChangeType](v38, "objectChangeType");
                      objc_msgSend(v159, "uuid");
                      v83 = (void *)objc_claimAutoreleasedReturnValue();
                      -[HMDBackingStoreModelObject parentUUID](v38, "parentUUID");
                      v84 = (void *)objc_claimAutoreleasedReturnValue();
                      v85 = -[HMDBackingStoreModelObject initWithVersion:changeType:uuid:parentUUID:](v80, "initWithVersion:changeType:uuid:parentUUID:", v81, v82, v83, v84);

                      v86 = -[HMDBackingStoreModelObject merge:](v85, "merge:", v38);
                      v87 = v85;

                      objc_msgSend(v157, "removeObject:", v143);
                      objc_msgSend(v157, "addObject:", v87);

                      v25 = v87;
                      goto LABEL_57;
                    }
                  }
                }
                v29 = objc_msgSend(v161, "countByEnumeratingWithState:objects:count:", &v186, v199, 16);
                if (v29)
                  continue;
                break;
              }
              v25 = v27;
LABEL_57:
              v18 = v149;
              v17 = v150;
              v19 = v145;
              v22 = v154;
            }
            else
            {
              v17 = v150;
            }

          }
        }
LABEL_63:

        v19 = (char *)v19 + 1;
      }
      while (v19 != v17);
      v92 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v190, v208, 16);
      v17 = (id)v92;
    }
    while (v92);
  }

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v157, "count") + objc_msgSend(v140, "count"));
  v163 = (id)objc_claimAutoreleasedReturnValue();
  v178 = 0u;
  v179 = 0u;
  v180 = 0u;
  v181 = 0u;
  v151 = v140;
  v160 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v178, v197, 16);
  if (v160)
  {
    v156 = *(_QWORD *)v179;
    do
    {
      for (k = 0; k != v160; ++k)
      {
        if (*(_QWORD *)v179 != v156)
          objc_enumerationMutation(v151);
        v94 = *(void **)(*((_QWORD *)&v178 + 1) + 8 * k);
        v174 = 0u;
        v175 = 0u;
        v176 = 0u;
        v177 = 0u;
        v95 = v157;
        v96 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v174, v196, 16);
        if (v96)
        {
          v97 = v96;
          v98 = *(_QWORD *)v175;
LABEL_75:
          v99 = 0;
          while (1)
          {
            if (*(_QWORD *)v175 != v98)
              objc_enumerationMutation(v95);
            v100 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * v99);
            objc_msgSend(v94, "uuid");
            v101 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "uuid");
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            v103 = objc_msgSend(v101, "isEqual:", v102);

            if ((v103 & 1) != 0)
              break;
            if (v97 == ++v99)
            {
              v97 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v174, v196, 16);
              if (v97)
                goto LABEL_75;
              goto LABEL_81;
            }
          }
          v104 = v100;

          if (!v104)
            goto LABEL_92;
          objc_msgSend(v95, "removeObject:", v104);
          obja = v104;
          objc_msgSend(v104, "setObjectChangeType:", 2);
          v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          v105 = v148;
          v106 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v170, v195, 16);
          if (v106)
          {
            v107 = v106;
            v108 = *(_QWORD *)v171;
LABEL_85:
            v109 = 0;
            while (1)
            {
              if (*(_QWORD *)v171 != v108)
                objc_enumerationMutation(v105);
              v110 = *(void **)(*((_QWORD *)&v170 + 1) + 8 * v109);
              objc_msgSend(v94, "uuid");
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v110, "uuid");
              v112 = (void *)objc_claimAutoreleasedReturnValue();
              v113 = objc_msgSend(v111, "isEqual:", v112);

              if ((v113 & 1) != 0)
                break;
              if (v107 == ++v109)
              {
                v107 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v170, v195, 16);
                if (v107)
                  goto LABEL_85;
                goto LABEL_91;
              }
            }
            v118 = v110;

            if (!v118)
              goto LABEL_101;
            v169 = 0;
            v119 = obja;
            -[HMDBackingStoreModelObject diff:differingFields:](v118, "diff:differingFields:", obja, &v169);
            v120 = (HMDUserModel *)v169;
            if (-[HMDUserModel count](v120, "count"))
            {
              v121 = (void *)MEMORY[0x1D17BA0A0]();
              v122 = self;
              HMFGetOSLogHandle();
              v123 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v124 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v201 = v124;
                v202 = 2112;
                v203 = (int64_t)obja;
                v204 = 2112;
                v205 = v120;
                _os_log_impl(&dword_1CD062000, v123, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Object was changed since last push or fetch: object %@ has diff %@", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v121);
              objc_msgSend(v163, "addObject:", obja);
              -[HMDBackingStoreModelObject dumpDebug:](v118, "dumpDebug:", CFSTR("CACHED: "));
              objc_msgSend(obja, "dumpDebug:", CFSTR("REMOTE: "));
            }

          }
          else
          {
LABEL_91:

LABEL_101:
            v168 = 0;
            v119 = obja;
            objc_msgSend(v94, "diff:differingFields:", obja, &v168);
            v118 = (HMDUserModel *)v168;
            if (-[HMDUserModel count](v118, "count"))
            {
              v125 = (void *)MEMORY[0x1D17BA0A0]();
              v126 = self;
              HMFGetOSLogHandle();
              v127 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v128 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543874;
                v201 = v128;
                v202 = 2112;
                v203 = (int64_t)obja;
                v204 = 2112;
                v205 = v118;
                _os_log_impl(&dword_1CD062000, v127, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: object %@ has diff %@", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v125);
              objc_msgSend(v163, "addObject:", obja);
              objc_msgSend(v94, "dumpDebug:", CFSTR("LOCAL: "));
              objc_msgSend(obja, "dumpDebug:", CFSTR("REMOTE: "));
            }
          }

        }
        else
        {
LABEL_81:

LABEL_92:
          v114 = (void *)MEMORY[0x1D17BA0A0]();
          v115 = self;
          HMFGetOSLogHandle();
          v116 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v201 = v117;
            v202 = 2112;
            v203 = (int64_t)v94;
            _os_log_impl(&dword_1CD062000, v116, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: local object %@ deleted", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v114);
          objc_msgSend(v94, "setObjectChangeType:", 3);
          objc_msgSend(v163, "addObject:", v94);
          objc_msgSend(v94, "dumpDebug:", CFSTR("LOCAL:"));
        }
      }
      v160 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v178, v197, 16);
    }
    while (v160);
  }

  v166 = 0u;
  v167 = 0u;
  v164 = 0u;
  v165 = 0u;
  v129 = v157;
  v130 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v164, v194, 16);
  if (v130)
  {
    v131 = v130;
    v132 = *(_QWORD *)v165;
    do
    {
      for (m = 0; m != v131; ++m)
      {
        if (*(_QWORD *)v165 != v132)
          objc_enumerationMutation(v129);
        v134 = *(void **)(*((_QWORD *)&v164 + 1) + 8 * m);
        v135 = (void *)MEMORY[0x1D17BA0A0]();
        v136 = self;
        HMFGetOSLogHandle();
        v137 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v137, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v138 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v201 = v138;
          v202 = 2112;
          v203 = (int64_t)v134;
          _os_log_impl(&dword_1CD062000, v137, OS_LOG_TYPE_INFO, "%{public}@[Legacy Merge] Change from cloud: remote object %@ added", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v135);
        objc_msgSend(v134, "setObjectChangeType:", 1);
        objc_msgSend(v163, "addObject:", v134);
        objc_msgSend(v134, "dumpDebug:", CFSTR("REMOTE: "));
      }
      v131 = objc_msgSend(v129, "countByEnumeratingWithState:objects:count:", &v164, v194, 16);
    }
    while (v131);
  }

  return v163;
}

- (void)processSharedHomeModelUpdate:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id location;

  v6 = a3;
  v7 = a4;
  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __55__HMDHomeManager_processSharedHomeModelUpdate_message___block_invoke;
  v11[3] = &unk_1E89BD988;
  objc_copyWeak(&v14, &location);
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, v11);

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

- (void)_processSharedHomeModel:(id)a3 message:(id)a4
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  _QWORD v33[4];
  id v34;
  id v35;
  _QWORD *v36;
  id v37;
  id v38;
  id v39;
  _QWORD v40[5];
  id v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  id v45;
  _QWORD v46[10];

  v46[7] = *MEMORY[0x1E0C80C00];
  v32 = a3;
  v30 = a4;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x3032000000;
  v40[3] = __Block_byref_object_copy__165094;
  v40[4] = __Block_byref_object_dispose__165095;
  v41 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.handle-home-sync"));
  v6 = (void *)MEMORY[0x1E0C99E60];
  v46[0] = objc_opt_class();
  v46[1] = objc_opt_class();
  v46[2] = objc_opt_class();
  v46[3] = objc_opt_class();
  v46[4] = objc_opt_class();
  v46[5] = objc_opt_class();
  v46[6] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v46, 7);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setWithArray:", v7);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_alloc(MEMORY[0x1E0CB3710]);
  objc_msgSend(v32, "homeData");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = 0;
  v10 = (void *)objc_msgSend(v8, "initForReadingFromData:error:", v9, &v39);
  v11 = v39;

  objc_msgSend(v10, "_allowDecodingCyclesInSecureMode");
  v12 = *MEMORY[0x1E0CB2CD0];
  v38 = v11;
  objc_msgSend(v10, "decodeTopLevelObjectOfClasses:forKey:error:", v31, v12, &v38);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = v38;

  if (!v13)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v43 = v17;
      v44 = 2112;
      v45 = v29;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive home from shared home model's home data: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
  }
  v18 = v13;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v19 = v18;
  else
    v19 = 0;
  v20 = v19;

  objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("kHomeDataBlobKey"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("kAccessoriesDataBlobKey"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "hmf_numberForKey:", CFSTR("kHomeDataVersionKey"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if (v23)
  {
    v25 = objc_msgSend(v23, "integerValue");
    if (!v21)
      goto LABEL_13;
    goto LABEL_12;
  }
  v25 = 0;
  if (v21)
  {
LABEL_12:
    -[HMDHomeManager setHomeDataLoadedFromArchive:](self, "setHomeDataLoadedFromArchive:", 1, v29);
    -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "updateLocalDataDecryptionFailed:", 0);

    objc_msgSend(v21, "zoneID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "ownerName");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _addCloudZone:ownerName:](self, "_addCloudZone:ownerName:", v27, v28);

    objc_initWeak((id *)buf, self);
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = __50__HMDHomeManager__processSharedHomeModel_message___block_invoke;
    v33[3] = &unk_1E89BD9D8;
    objc_copyWeak(&v37, (id *)buf);
    v34 = v21;
    v35 = v30;
    v36 = v40;
    -[HMDHomeManager processTransactionsFromHomeDataSync:accessories:version:completion:](self, "processTransactionsFromHomeDataSync:accessories:version:completion:", v34, v22, v25, v33);

    objc_destroyWeak(&v37);
    objc_destroyWeak((id *)buf);
  }
LABEL_13:

  _Block_object_dispose(v40, 8);
}

- (void)processTransactionsFromHomeDataSync:(id)a3 accessories:(id)a4 version:(int64_t)a5 completion:(id)a6
{
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void (**v21)(void);
  id v22;
  void *v23;
  void (**v24)(void);
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHomeManager *v38;
  NSObject *v39;
  void *v40;
  id *v41;
  id *v42;
  id v43;
  void *v44;
  void (**v45)(void);
  id v46;
  void *v47;
  _QWORD v48[4];
  id v49;
  id v50;
  void (**v51)(void);
  id v52;
  id v53;
  id v54;
  _QWORD v55[4];
  id v56;
  id v57;
  id v58;
  void (**v59)(void);
  id v60;
  id v61;
  _QWORD aBlock[4];
  id v63;
  id v64;
  void (**v65)(void);
  id v66;
  id location;
  uint8_t buf[4];
  void *v69;
  _QWORD v70[4];

  v70[1] = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v46 = a4;
  v45 = (void (**)(void))a6;
  v70[0] = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v70, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _associateAccessories:withHomes:](self, "_associateAccessories:withHomes:", v46, v11);

  objc_msgSend(v10, "fixupHomeAfterDecoding");
  objc_msgSend(v10, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v12);
  v47 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "sharedHomeSourceVersion");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  -[HMDHomeManager _loadCloudTransactionForRemoteHome:localHome:cachedHome:version:](self, "_loadCloudTransactionForRemoteHome:localHome:cachedHome:version:", v10, v47, 0, a5);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v13);
  if (objc_msgSend(v14, "count"))
  {
    -[HMDHomeManager _findHomeModel:](self, "_findHomeModel:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v16 = v15;
    else
      v16 = 0;
    v43 = v16;

    if (!v47 && v43)
    {
      v17 = (void *)objc_msgSend(v14, "mutableCopy");
      objc_msgSend(v17, "removeObject:", v43);
      v18 = objc_msgSend(v17, "copy");

      v14 = (id)v18;
    }
    objc_initWeak(&location, self);
    v19 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke;
    aBlock[3] = &unk_1E89BDA00;
    v41 = &v66;
    objc_copyWeak(&v66, &location);
    v20 = v10;
    v63 = v20;
    v21 = v45;
    v65 = v21;
    v22 = v44;
    v64 = v22;
    v23 = _Block_copy(aBlock);
    v55[0] = v19;
    v55[1] = 3221225472;
    v55[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_1058;
    v55[3] = &unk_1E89BDA28;
    v42 = &v61;
    objc_copyWeak(&v61, &location);
    v24 = v21;
    v59 = v24;
    v25 = v22;
    v56 = v25;
    v57 = v20;
    v14 = v14;
    v58 = v14;
    v26 = v23;
    v60 = v26;
    v27 = _Block_copy(v55);
    v29 = v27;
    if (v47)
    {
      (*((void (**)(void *, _QWORD))v27 + 2))(v27, 0);
    }
    else
    {
      if (v43)
      {
        -[HMDHomeManager backingStore](self, "backingStore", &v66, &v61);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultIDSOptions](HMDBackingStoreTransactionOptions, "defaultIDSOptions");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "transaction:options:", CFSTR("kTransactionUpdate"), v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v36, "add:withMessage:", v43, 0);
        v48[0] = v19;
        v48[1] = 3221225472;
        v48[2] = __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_1059;
        v48[3] = &unk_1E89BDA50;
        objc_copyWeak(&v54, &location);
        v51 = v24;
        v49 = v25;
        v50 = v14;
        v52 = v26;
        v53 = v29;
        objc_msgSend(v36, "run:", v48);

        objc_destroyWeak(&v54);
      }
      else
      {
        v37 = (void *)MEMORY[0x1D17BA0A0](v27, v28);
        v38 = self;
        HMFGetOSLogHandle();
        v39 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v69 = v40;
          _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_ERROR, "%{public}@Must have home model to create home because it does not already exist", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v37);
        if (!v24)
          goto LABEL_21;
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 52, &v66, &v61);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (*)(void (**)(void), _QWORD, _QWORD, void *))v24[2])(v24, 0, 0, v36);
      }

    }
LABEL_21:

    objc_destroyWeak(v42);
    objc_destroyWeak(v41);
    objc_destroyWeak(&location);

    goto LABEL_22;
  }
  v30 = (void *)MEMORY[0x1D17BA0A0]();
  v31 = self;
  HMFGetOSLogHandle();
  v32 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v69 = v33;
    _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@No changes to home", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v30);
  if (v45)
    v45[2]();
LABEL_22:

}

- (id)_prepareHomesVersionDict
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v9, "configurationVersion"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "uuid");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "UUIDString");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, v12);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  if (objc_msgSend(v3, "count"))
    v13 = (void *)objc_msgSend(v3, "copy");
  else
    v13 = 0;

  return v13;
}

- (void)_handleHomesConfigSync:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HMDHomeKitVersion *v18;
  int v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void (**v31)(_QWORD, _QWORD, _QWORD);
  void *v32;
  HMDHomeManager *v33;
  NSObject *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (id)homedVersion;
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v7, CFSTR("kHomedVersionKey"));

  objc_msgSend(v5, "version");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("kMetadataInfoVersionKey"));

  objc_msgSend(v5, "schemaVersion");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, CFSTR("kMetadataInfoSchemaVersionKey"));

  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "UUIDString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v12, CFSTR("kPrimaryHomeUUIDKey"));

  }
  objc_msgSend(v4, "messagePayload");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "hmf_UUIDForKey:", CFSTR("kCurrentHomeUUIDKey"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
    -[HMDHomeManager _notifyCurrentHomeUpdated:isLocalUpdate:](self, "_notifyCurrentHomeUpdated:isLocalUpdate:", v14, 0);
  -[HMDHomeManager _prepareHomesVersionDict](self, "_prepareHomesVersionDict");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v15, CFSTR("kHomeConfigHomesKey"));
  objc_msgSend(v4, "remoteSourceDevice");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "version");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HMDHomeKitVersion initWithVersionString:]([HMDHomeKitVersion alloc], "initWithVersionString:", CFSTR("4.1.1"));
  v19 = objc_msgSend(v17, "isAtLeastVersion:", v18);

  if (!v19)
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v41 = v28;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Responding with legacy pairing identity", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = 0;
    v38 = 0;
    v36 = 0;
    objc_msgSend(v29, "getControllerPublicKey:secretKey:keyPair:username:allowCreation:error:", 0, 0, &v38, &v37, 0, &v36);
    v22 = v38;
    v23 = v37;
    v21 = v36;

    if (v22)
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v22, CFSTR("kControllerKeyPairKey"));
    if (v23)
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v23, CFSTR("kControllerPairingNameKey"));
    goto LABEL_16;
  }
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = 0;
  objc_msgSend(v20, "getLocalPairingIdentity:", &v39);
  v21 = (id)objc_claimAutoreleasedReturnValue();
  v22 = v39;

  if (v21)
  {
    objc_msgSend(v21, "publicPairingIdentity");
    v23 = (id)objc_claimAutoreleasedReturnValue();
    encodeRootObject();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v24, CFSTR("pairingIdentity"));

LABEL_16:
    goto LABEL_17;
  }
  v32 = (void *)MEMORY[0x1D17BA0A0]();
  v33 = self;
  HMFGetOSLogHandle();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v41 = v35;
    v42 = 2112;
    v43 = v22;
    _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to get local pairing identity with error: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v32);
  v21 = 0;
LABEL_17:

  +[HMDHomeManager getUniqueDeviceIdSalt](HMDHomeManager, "getUniqueDeviceIdSalt");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if (v30)
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v30, CFSTR("kControllerUniqueDeviceIdSaltKey"));
  objc_msgSend(v4, "responseHandler");
  v31 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, _QWORD, void *))v31)[2](v31, 0, v6);

}

- (void)_handleCompanionKeysSync:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void (**v21)(_QWORD, _QWORD, _QWORD);
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void (**v29)(_QWORD, _QWORD, _QWORD);
  void *v30;
  _QWORD v31[3];
  _QWORD v32[3];
  uint8_t buf[4];
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "dataForKey:", CFSTR("kControllerKeyPairKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", CFSTR("kControllerPairingNameKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataForKey:", CFSTR("kControllerUniqueDeviceIdSaltKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataForKey:", CFSTR("kControllerAssistantTeamIdentifierKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "responseHandler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    if (v5 && v7 && v8)
    {
      v30 = v6;
      if (-[HMDHomeManager _removeAndAddKeyPair:userName:eraseReason:](self, "_removeAndAddKeyPair:userName:eraseReason:", v5, v6, 1))
      {
        +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v31[0] = CFSTR("kHomedVersionKey");
        v11 = (id)homedVersion;
        v32[0] = v11;
        v31[1] = CFSTR("kMetadataInfoVersionKey");
        objc_msgSend(v10, "version");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v32[1] = v12;
        v31[2] = CFSTR("kMetadataInfoSchemaVersionKey");
        objc_msgSend(v10, "schemaVersion");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v32[2] = v13;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, v31, 3);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        -[HMDHomeManager _setUniqueDeviceIdSalt:](self, "_setUniqueDeviceIdSalt:", v7);
        -[HMDHomeManager _saveAssistantHashingData:](self, "_saveAssistantHashingData:", v8);

      }
      else
      {
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v34 = v25;
          _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Failed to save the key pair to keychain", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v23);
        v14 = 0;
      }
      v26 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v28;
        _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Answering Companion Sync request", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v26);
      objc_msgSend(v4, "responseHandler");
      v29 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, void *))v29)[2](v29, 0, v14);

      v6 = v30;
    }
    else
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v20;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@Key pair/salts are missing the companion key sync message", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(v4, "responseHandler");
      v21 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v21)[2](v21, v22, 0);

    }
  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v17;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@No response handler", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (BOOL)setLocalPairingIdentity:(id)a3 error:(id *)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  id v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "getLocalPairingIdentity:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "isEqual:", v6))
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v12;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Skipping updating pairing identity, it matches current identity", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    v13 = 1;
  }
  else
  {
    -[HMDHomeManager homes](self, "homes");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "count");

    if (v15)
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = self;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v19;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Found some existing homes which must be some cruft from last user. Going to clean it up before setting up this device for HH1", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v16);
      -[HMDHomeManager _eraseLocalHomeConfiguration](v17, "_eraseLocalHomeConfiguration");
    }
    if ((objc_msgSend(v7, "saveLocalPairingIdentity:syncable:error:", v6, 0, a4) & 1) != 0)
    {
      objc_msgSend(v6, "publicPairingIdentity");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = 0;
      +[HMDPersistentStore controllerUsernameForPairingIdentity:error:](HMDPersistentStore, "controllerUsernameForPairingIdentity:error:", v20, &v37);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = v37;

      v13 = v21 != 0;
      v23 = (void *)MEMORY[0x1D17BA0A0]();
      v24 = self;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = v25;
      if (v21)
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v39 = v27;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Updating controller username on setting local pairing identity", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v23);
        objc_msgSend(v7, "updateActiveControllerPairingIdentifier:", v21);
        -[HMDHomeManager appleAccountManager](v24, "appleAccountManager");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "account");
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        if (v29)
        {
          +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "registerIdentity:account:object:", v6, v29, v29);

        }
      }
      else
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v39 = v35;
          v40 = 2112;
          v41 = v22;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_ERROR, "%{public}@Unable to find or set pairing identity as active. error: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v23);
      }

    }
    else
    {
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v34;
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to save local pairing identity", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v31);
      v13 = 0;
    }
  }

  return v13;
}

- (void)__handleAppleAccountUpdated:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  v4 = a3;
  objc_msgSend(v4, "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("HMDAccountNotificationKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v12 = v7;

  objc_msgSend(v4, "userInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("HMDPreviousAccountNotificationKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;

  -[HMDHomeManager __handleAppleAccountUpdated:previousAccount:](self, "__handleAppleAccountUpdated:previousAccount:", v12, v11);
}

- (void)__handleAppleAccountUpdated:(id)a3 previousAccount:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  HMDHomeManager *v14;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __62__HMDHomeManager___handleAppleAccountUpdated_previousAccount___block_invoke;
  block[3] = &unk_1E89C20C8;
  v12 = v7;
  v13 = v6;
  v14 = self;
  v9 = v6;
  v10 = v7;
  dispatch_async(v8, block);

}

- (void)__handleInitialFetch:(id)a3
{
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  HMDHomeManager *v10;

  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("HMDCR.id"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __39__HMDHomeManager___handleInitialFetch___block_invoke;
  v8[3] = &unk_1E89C2328;
  v9 = v5;
  v10 = self;
  v7 = v5;
  dispatch_async(v6, v8);

}

- (BOOL)_removeAndAddKeyPair:(id)a3 userName:(id)a4 eraseReason:(unint64_t)a5
{
  id v8;
  id v9;
  void *v10;
  int v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  id v36;
  id v37;
  id v38;
  uint8_t buf[4];
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  -[HMDHomeManager _eraseLocalHomeConfigurationWithReason:](self, "_eraseLocalHomeConfigurationWithReason:", a5);
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "removeControllerKeyPairWithError:", 0);
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v11)
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v40 = v15;
    v16 = "%{public}@Removed controller key from store";
    v17 = v14;
    v18 = OS_LOG_TYPE_INFO;
  }
  else
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v40 = v15;
    v16 = "%{public}@Failed removing controller key from store";
    v17 = v14;
    v18 = OS_LOG_TYPE_ERROR;
  }
  _os_log_impl(&dword_1CD062000, v17, v18, v16, buf, 0xCu);

LABEL_7:
  objc_autoreleasePoolPop(v12);
  v38 = 0;
  v19 = objc_msgSend(v10, "saveKeyPair:username:syncable:error:", v8, v9, 0, &v38);
  v20 = v38;
  v21 = v20;
  if (v19)
  {
    v36 = v20;
    v37 = 0;
    LODWORD(v22) = objc_msgSend(v10, "deserializeKeyPair:publicKey:secretKey:error:", v8, &v37, 0, &v36);
    v23 = v37;
    v24 = v36;

    if ((_DWORD)v22)
    {
      -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "account");
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (v26)
      {
        v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28658]), "initWithPairingKeyData:", v23);
        v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D165A8]), "initWithIdentifier:publicKey:privateKey:permissions:", v9, v27, 0, 0);
        +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "registerIdentity:account:object:", v28, v26, v26);

      }
    }
    else
    {
      v32 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v40 = v34;
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Deserialize of key pair failed", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v32);
    }

    v21 = v24;
  }
  else
  {
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v31;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Failed to save key pair", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
    LOBYTE(v22) = 0;
  }

  return (char)v22;
}

- (void)_handleRequestForCompanionKeysSync:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  id v8;

  v8 = a3;
  -[HMDHomeManager watchManager](self, "watchManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "connectedWatches");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _checkAndAddWatchDevices:resend:requestFromWatch:](self, "_checkAndAddWatchDevices:resend:requestFromWatch:", v5, 0, 1);

  objc_msgSend(v8, "responseHandler");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v8, "responseHandler");
    v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v7[2](v7, 0, 0);

  }
}

- (void)_handleRetrieveVendorIdentifier:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  void *v14;
  NSObject *v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "responseHandler");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v3, "stringForKey:", CFSTR("kCompanionApplicationIdentifierKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5)
      goto LABEL_8;
    +[HMDApplicationVendorIDStore sharedStore](HMDApplicationVendorIDStore, "sharedStore");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "vendorIDForApplication:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v20 = v10;
      v21 = 2112;
      v22 = v7;
      v23 = 2112;
      v24 = v5;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Retrieved vendor ID %@ for application bundle ID: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    if (v7
      && (v17 = CFSTR("kCompanionApplicationVendorIdentifierKey"),
          v18 = v7,
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v7,
          v11))
    {
      v12 = 0;
    }
    else
    {
LABEL_8:
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 0;
    }
    objc_msgSend(v3, "responseHandler");
    v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, void *))v13)[2](v13, v12, v11);

  }
  else
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@No response handler set for the retrieve vendor identifier message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
  }

}

- (void)auditDuplicatePreviouslyAddedAccessory:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HMDAccessoryNotificationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  -[HMDHomeManager _auditDuplicatePreviouslyAddedAccessory:](self, "_auditDuplicatePreviouslyAddedAccessory:", v7);
}

- (void)_auditDuplicatePreviouslyAddedAccessory:(id)a3
{
  id v4;
  void *v5;
  unint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  dispatch_time_t v10;
  NSObject *v11;
  _QWORD v12[5];
  id v13;
  id v14;
  id v15;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;
  v7 = v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;

  if (v6 | v9)
  {
    v10 = dispatch_time(0, 60000000000);
    -[HMDHomeManager workQueue](self, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __58__HMDHomeManager__auditDuplicatePreviouslyAddedAccessory___block_invoke;
    v12[3] = &unk_1E89C07B8;
    v12[4] = self;
    v13 = v7;
    v14 = (id)v6;
    v15 = (id)v9;
    dispatch_after(v10, v11, v12);

  }
}

- (void)_handleQueryiCloudSwitchState:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  void *v7;
  void *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = a3;
  +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isHomeEnabled");

  objc_msgSend(v3, "responseHandler");
  v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  v9 = CFSTR("kiCloudSwitchStateKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, _QWORD, void *))v6)[2](v6, 0, v8);

}

- (void)_handleUpdateiCloudSwitchState:(id)a3
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  _QWORD aBlock[4];
  id v12;
  id v13;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __49__HMDHomeManager__handleUpdateiCloudSwitchState___block_invoke;
  aBlock[3] = &unk_1E89BF250;
  objc_copyWeak(&v13, &location);
  v5 = v4;
  v12 = v5;
  v6 = _Block_copy(aBlock);
  v10 = 0;
  v7 = objc_msgSend(v5, "BOOLForKey:keyPresent:", CFSTR("kiCloudSwitchStateKey"), &v10);
  if (v10 && (v8 = v7, -[HMDHomeManager accountActive](self, "accountActive")))
  {
    +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateHomeEnabled:completionHandler:", v8, v6);
  }
  else
  {
    +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateHomeEnabled:completionHandler:", 0, v6);
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);

}

- (void)cloudHomeSettingsUpdated:(id)a3
{
  id v4;
  void *v5;
  char v6;
  NSObject *v7;
  id v8;
  _QWORD block[5];
  id v10;
  char v11;

  v4 = a3;
  +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isHomeEnabled");

  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __43__HMDHomeManager_cloudHomeSettingsUpdated___block_invoke;
  block[3] = &unk_1E89C0898;
  v11 = v6;
  block[4] = self;
  v10 = v4;
  v8 = v4;
  dispatch_async(v7, block);

}

- (BOOL)_handleControllerKeyAvailable
{
  char v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  int v8;
  id v9;
  id v10;
  char v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (isWatch())
    return 0;
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = 0;
  v28 = 0;
  v26 = 0;
  objc_msgSend(v4, "getCurrentiCloudIdentifier:controllerPairingIdentifier:error:", &v28, &v27, &v26);
  v5 = v28;
  v6 = v27;
  v7 = v26;
  v24 = v7;
  v25 = 0;
  v8 = objc_msgSend(v4, "getControllerPublicKey:secretKey:username:allowCreation:error:", 0, 0, &v25, 0, &v24);
  v9 = v25;
  v10 = v24;

  v3 = 0;
  if (v8)
  {
    v11 = objc_msgSend(v9, "isEqualToString:", v6);
    -[HMDHomeManager activeAccountIdentifier](self);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v12;
    if (v12)
    {
      if (!objc_msgSend((id)v12, "isEqualToString:", v5)
        || (v12 = objc_msgSend(v9, "isEqualToString:", v6), (v12 & 1) == 0))
      {
        v14 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v21 = v14;
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v30 = v16;
          v31 = 2112;
          v32 = v13;
          v33 = 2112;
          v34 = v9;
          _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Updating to the current iCloud controller identifier %@ and pairing user name %@", buf, 0x20u);

          v14 = v21;
        }

        objc_autoreleasePoolPop(v14);
        v23 = 0;
        v12 = objc_msgSend(v4, "updateCurrentiCloudIdentifier:controllerPairingIdentifier:error:", v13, v9, &v23);
      }
    }
    v3 = v11 ^ 1;
    if ((v11 & 1) == 0)
    {
      v17 = (void *)MEMORY[0x1D17BA0A0](v12);
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v22 = v17;
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v30 = v19;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Controller user name changed, re-adding the watch", buf, 0xCu);

        v17 = v22;
      }

      objc_autoreleasePoolPop(v17);
      -[HMDHomeManager _checkAndAddWatchDevicesWithResend:](self, "_checkAndAddWatchDevicesWithResend:", 1);
    }

  }
  return v3;
}

- (void)_handleAreYouAtHome:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  void *v20;
  void *v21;
  id v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  void *v29;
  void *v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD v38[3];
  _QWORD v39[3];
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", CFSTR("kRemoteSessionIdentifierKey"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v5 && v6)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v12)
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v13;
        v42 = 2112;
        v43 = v8;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Received request to determine if we are at home: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      v14 = objc_msgSend(v8, "homeLocation");
      objc_msgSend(v4, "responseHandler");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v14 == 1, CFSTR("kAtHomeStateKey"));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v39[0] = v16;
        v38[1] = CFSTR("kDeviceNameKey");
        deviceName();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v38[2] = CFSTR("kRemoteSessionIdentifierKey");
        v39[1] = v17;
        v39[2] = v7;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 3);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v4, "responseHandler");
        v19 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, _QWORD, void *))v19)[2](v19, 0, v18);

      }
      objc_msgSend(v4, "destination");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v21 = v20;
      else
        v21 = 0;
      v22 = v21;

      if (v14 != 1 || !v22)
        goto LABEL_25;
      v23 = (void *)MEMORY[0x1D17BA0A0]();
      v24 = v10;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "device");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v26;
        v42 = 2112;
        v43 = v27;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@This device can act as remote gateway for peer, requesting reverse connection to device: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v23);
      -[HMDHomeManager messageDispatcher](v24, "messageDispatcher");
      v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "secureRemoteTransport");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "device");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "openSecureSessionToDevice:completionHandler:", v30, &__block_literal_global_1065);

    }
    else
    {
      if (v12)
      {
        HMFGetLogIdentifier();
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v41 = v36;
        v42 = 2112;
        v43 = v5;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Cannot find home: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      objc_msgSend(v4, "responseHandler");
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v37)
      {
        v8 = 0;
        goto LABEL_26;
      }
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v22 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, id, _QWORD))v28)[2](v28, v22, 0);
    }

LABEL_25:
LABEL_26:

    goto LABEL_27;
  }
  v31 = (void *)MEMORY[0x1D17BA0A0]();
  v32 = self;
  HMFGetOSLogHandle();
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v41 = v34;
    v42 = 2112;
    v43 = v4;
    _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_DEFAULT, "%{public}@Bad request for message %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v31);
  objc_msgSend(v4, "responseHandler");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (v35)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v22 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, _QWORD))v22 + 2))(v22, v8, 0);
    goto LABEL_25;
  }
LABEL_27:

}

- (void)controllerKeyPairGenerated:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __45__HMDHomeManager_controllerKeyPairGenerated___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_checkAndAddWatchDevicesWithResend:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  id v6;

  v3 = a3;
  if (isiOSDevice())
  {
    -[HMDHomeManager watchManager](self, "watchManager");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "connectedWatches");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _checkAndAddWatchDevices:resend:requestFromWatch:](self, "_checkAndAddWatchDevices:resend:requestFromWatch:", v5, v3, 0);

  }
}

- (void)_checkAndAddWatchDevices:(id)a3 resend:(BOOL)a4 requestFromWatch:(BOOL)a5
{
  _BOOL4 v5;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t k;
  void *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  _BOOL4 v47;
  void *v48;
  id obj;
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  _BYTE v64[128];
  uint8_t v65[128];
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  id v69;
  uint64_t v70;

  v47 = a5;
  v5 = a4;
  v70 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v67 = v10;
    v68 = 2112;
    v69 = v7;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Found watches: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  obj = v7;
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v60;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v60 != v14)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v59 + 1) + 8 * i), "remoteDestinationString");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (v5)
        {
          v17 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v50, "setObject:forKeyedSubscript:", &unk_1E8B34FC8, v16));
          HMFGetOSLogHandle();
          v18 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            goto LABEL_20;
          HMFGetLogIdentifier();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v67 = v19;
          v68 = 2112;
          v69 = v16;
          v20 = v18;
          v21 = "%{public}@Need to send complete config to watch %@";
        }
        else
        {
          -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "objectForKey:", v16);
          v23 = (void *)objc_claimAutoreleasedReturnValue();

          if (v23)
          {
            if (v47)
            {
              v17 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v50, "setObject:forKeyedSubscript:", &unk_1E8B34FE0, v16));
              HMFGetOSLogHandle();
              v18 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
                goto LABEL_20;
              HMFGetLogIdentifier();
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v67 = v19;
              v68 = 2112;
              v69 = v16;
              v20 = v18;
              v21 = "%{public}@Watch %@ has asked to resend the home config";
            }
            else
            {
              v17 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v18 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
                goto LABEL_20;
              HMFGetLogIdentifier();
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v67 = v19;
              v68 = 2112;
              v69 = v16;
              v20 = v18;
              v21 = "%{public}@Watch %@ is already associated";
            }
          }
          else
          {
            v17 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v50, "setObject:forKeyedSubscript:", &unk_1E8B34FE0, v16));
            HMFGetOSLogHandle();
            v18 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              goto LABEL_20;
            HMFGetLogIdentifier();
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v67 = v19;
            v68 = 2112;
            v69 = v16;
            v20 = v18;
            v21 = "%{public}@Discovered watch %@, checking its config";
          }
        }
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, v21, buf, 0x16u);

LABEL_20:
        objc_autoreleasePoolPop(v17);
        objc_msgSend(v11, "addObject:", v16);

      }
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
    }
    while (v13);
  }

  -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = (void *)objc_msgSend(v24, "copy");

  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v26 = v25;
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v55, v64, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v56;
    do
    {
      for (j = 0; j != v28; ++j)
      {
        if (*(_QWORD *)v56 != v29)
          objc_enumerationMutation(v26);
        v31 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * j);
        if ((objc_msgSend(v11, "containsObject:", v31) & 1) == 0)
        {
          v32 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v33 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v67 = v34;
            v68 = 2112;
            v69 = v31;
            _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Watch %@ is no longer associated with this device", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v32);
          -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "removeObjectForKey:", v31);

        }
      }
      v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v55, v64, 16);
    }
    while (v28);
  }
  v48 = v26;

  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  -[HMDHomeManager watchSyncStateMap](self, "watchSyncStateMap");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = (void *)objc_msgSend(v36, "copy");

  v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v51, v63, 16);
  if (v38)
  {
    v39 = v38;
    v40 = *(_QWORD *)v52;
    do
    {
      for (k = 0; k != v39; ++k)
      {
        if (*(_QWORD *)v52 != v40)
          objc_enumerationMutation(v37);
        v42 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * k);
        if ((objc_msgSend(v11, "containsObject:", v42) & 1) == 0)
        {
          v43 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v44 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v67 = v45;
            v68 = 2112;
            v69 = v42;
            _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_INFO, "%{public}@Watch %@ is not paired with this device anymore. Taking it off the sync state list", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v43);
          -[HMDHomeManager watchSyncStateMap](self, "watchSyncStateMap");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "removeObjectForKey:", v42);

        }
      }
      v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v51, v63, 16);
    }
    while (v39);
  }

  -[HMDHomeManager _addSyncOperation:](self, "_addSyncOperation:", v50);
}

- (void)_addSyncOperation:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  HMDWatchSync *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t v25[128];
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v7;
    v28 = 2112;
    v29 = v4;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@New sync state dictionary: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager watchSyncStateMap](self, "watchSyncStateMap");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v27 = v10;
    v28 = 2112;
    v29 = v11;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Current sync state dictionary: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v12 = v4;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v22 != v15)
          objc_enumerationMutation(v12);
        v17 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i);
        objc_msgSend(v12, "objectForKeyedSubscript:", v17, (_QWORD)v21);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "unsignedIntegerValue");

        v20 = -[HMDWatchSync initWithSyncOption:]([HMDWatchSync alloc], "initWithSyncOption:", v19);
        -[HMDHomeManager _addSyncOperation:forWatchWithIdentifier:](self, "_addSyncOperation:forWatchWithIdentifier:", v20, v17);

      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v14);
  }

}

- (void)_addSyncOperation:(id)a3 forWatchWithIdentifier:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _BOOL4 v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  HMDHomeManager *v37;
  void *v38;
  HMDWatchSyncState *v39;
  HMDWatchSyncState *v40;
  void *v41;
  void *v42;
  __int128 v43;
  HMDHomeManager *v44;
  id v45;
  id v46;
  id obj;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint8_t v58[128];
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  id v64;
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v46 = v7;
  if ((objc_msgSend(v6, "isRetry") & 1) == 0)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    -[HMDHomeManager watchSyncRetryContextBySyncIdentifier](self, "watchSyncRetryContextBySyncIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v8, "copy");

    v7 = v46;
    obj = v9;
    v49 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v54, v65, 16);
    if (!v49)
      goto LABEL_26;
    v48 = *(_QWORD *)v55;
    *(_QWORD *)&v10 = 138543874;
    v43 = v10;
    v44 = self;
    v45 = v6;
    while (1)
    {
      for (i = 0; i != v49; ++i)
      {
        if (*(_QWORD *)v55 != v48)
          objc_enumerationMutation(obj);
        v12 = *(_QWORD *)(*((_QWORD *)&v54 + 1) + 8 * i);
        -[HMDHomeManager watchSyncRetryContextBySyncIdentifier](self, "watchSyncRetryContextBySyncIdentifier", v43);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "objectForKeyedSubscript:", v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v14, "watchIdentifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "isEqual:", v7);

        if (v16)
        {
          v17 = objc_msgSend(v6, "syncOption");
          objc_msgSend(v14, "watchSync");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          if (v17 == objc_msgSend(v18, "syncOption"))
          {

          }
          else
          {
            v19 = objc_msgSend(v6, "syncOption");
            objc_msgSend(v14, "watchSync");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            v21 = +[HMDWatchSyncState isNewBetter:present:](HMDWatchSyncState, "isNewBetter:present:", v19, objc_msgSend(v20, "syncOption"));

            if (!v21)
              goto LABEL_24;
          }
          v22 = (void *)MEMORY[0x1D17BA0A0]();
          v23 = self;
          HMFGetOSLogHandle();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v43;
            v60 = v25;
            v61 = 2112;
            v62 = v14;
            v63 = 2112;
            v64 = v6;
            _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Resetting retry context: %@ because a new operation got scheduled: %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v22);
          -[HMDHomeManager watchSyncRetryContextBySyncIdentifier](v23, "watchSyncRetryContextBySyncIdentifier");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "setObject:forKeyedSubscript:", 0, v12);

          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          -[HMDHomeManager watchSyncRetryContextByRetryTimer](v23, "watchSyncRetryContextByRetryTimer");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = (void *)objc_msgSend(v27, "copy");

          v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
          if (v29)
          {
            v30 = v29;
            v31 = *(_QWORD *)v51;
            while (2)
            {
              for (j = 0; j != v30; ++j)
              {
                if (*(_QWORD *)v51 != v31)
                  objc_enumerationMutation(v28);
                v33 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * j);
                -[HMDHomeManager watchSyncRetryContextByRetryTimer](v23, "watchSyncRetryContextByRetryTimer");
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v34, "objectForKey:", v33);
                v35 = (void *)objc_claimAutoreleasedReturnValue();

                if (v35 == v14)
                {
                  -[HMDHomeManager watchSyncRetryContextByRetryTimer](v23, "watchSyncRetryContextByRetryTimer");
                  v36 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v36, "removeObjectForKey:", v33);

                  goto LABEL_23;
                }
              }
              v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
              if (v30)
                continue;
              break;
            }
          }
LABEL_23:

          v6 = v45;
          v7 = v46;
          self = v44;
        }
LABEL_24:

      }
      v49 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v65, 16);
      if (!v49)
      {
LABEL_26:

        break;
      }
    }
  }
  -[HMDHomeManager watchSyncStateMap](self, "watchSyncStateMap");
  v37 = self;
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "objectForKeyedSubscript:", v7);
  v39 = (HMDWatchSyncState *)objc_claimAutoreleasedReturnValue();

  if (!v39)
  {
    v40 = [HMDWatchSyncState alloc];
    -[HMDHomeManager pairedSync](v37, "pairedSync");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = -[HMDWatchSyncState initWithDeviceId:pairedSync:](v40, "initWithDeviceId:pairedSync:", v46, v41);

    v7 = v46;
    -[HMDHomeManager watchSyncStateMap](v37, "watchSyncStateMap");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "setObject:forKeyedSubscript:", v39, v46);

  }
  -[HMDWatchSyncState addNewSync:](v39, "addNewSync:", v6);

}

- (void)pairedSyncDidStart:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __37__HMDHomeManager_pairedSyncDidStart___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_pairedSyncDidStart
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  id v31;
  uint64_t v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  HMDHomeManager *v38;
  NSObject *v39;
  void *v40;
  char v41;
  id obj;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[5];
  id v46;
  void *v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  id location;
  uint8_t buf[4];
  id v55;
  __int16 v56;
  uint64_t v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager watchSyncStateMap](self, "watchSyncStateMap");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    objc_initWeak(&location, self);
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    -[HMDHomeManager watchSyncStateMap](self, "watchSyncStateMap");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    obj = (id)objc_msgSend(v5, "copy");

    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
    if (v6)
    {
      v41 = 0;
      v43 = *(_QWORD *)v50;
      do
      {
        v44 = v6;
        for (i = 0; i != v44; ++i)
        {
          if (*(_QWORD *)v50 != v43)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * i);
          -[HMDHomeManager watchSyncStateMap](self, "watchSyncStateMap");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "objectForKeyedSubscript:", v8);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v10, "currentSync");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v11, "inProgress"))
          {
            v12 = (void *)MEMORY[0x1D17BA0A0]();
            v13 = self;
            HMFGetOSLogHandle();
            v14 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v55 = v15;
              v56 = 2112;
              v57 = (uint64_t)v11;
              _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@%@ is in progress", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v12);
          }
          else
          {
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 3221225472;
            aBlock[2] = __37__HMDHomeManager__pairedSyncDidStart__block_invoke;
            aBlock[3] = &unk_1E89BDA98;
            aBlock[4] = self;
            v16 = v11;
            v46 = v16;
            v47 = v8;
            objc_copyWeak(&v48, &location);
            v17 = _Block_copy(aBlock);
            -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "removeObjectForKey:", v8);

            v19 = objc_msgSend(v16, "syncOption");
            if (v19 == 1)
            {
              v24 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v16, "setInProgress:", 1));
              v25 = self;
              HMFGetOSLogHandle();
              v26 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v55 = v27;
                v56 = 2112;
                v57 = (uint64_t)v8;
                _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Starting complete sync for %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v24);
              -[HMDHomeManager _sendKeysToWatch:completionHandler:](v25, "_sendKeysToWatch:completionHandler:", v8, v17);
            }
            else if (v19 == 2)
            {
              v20 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v16, "setInProgress:", 1));
              v21 = self;
              HMFGetOSLogHandle();
              v22 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v55 = v23;
                v56 = 2112;
                v57 = (uint64_t)v8;
                _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@Starting partial sync for %@", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v20);
              -[HMDHomeManager _addWatch:completionHandler:](v21, "_addWatch:completionHandler:", v8, v17);
            }
            else
            {
              v28 = (void *)MEMORY[0x1D17BA0A0]();
              v29 = self;
              HMFGetOSLogHandle();
              v30 = (id)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v31 = (id)objc_claimAutoreleasedReturnValue();
                v32 = objc_msgSend(v16, "syncOption");
                *(_DWORD *)buf = 138543618;
                v55 = v31;
                v56 = 2048;
                v57 = v32;
                _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Unknown option %tu", buf, 0x16u);

              }
              objc_autoreleasePoolPop(v28);
              v41 = 1;
            }

            objc_destroyWeak(&v48);
          }

        }
        v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
      }
      while (v6);

      if ((v41 & 1) != 0)
      {
        v33 = (void *)MEMORY[0x1D17BA0A0]();
        v34 = self;
        HMFGetOSLogHandle();
        v35 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v55 = v36;
          _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Notifying PairedSync that sync is done", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v33);
        -[HMDPairedSync syncComplete](v34->_pairedSync, "syncComplete");
      }
    }
    else
    {

    }
    objc_destroyWeak(&location);
  }
  else
  {
    v37 = (void *)MEMORY[0x1D17BA0A0]();
    v38 = self;
    HMFGetOSLogHandle();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v55 = v40;
      _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Notifying PairedSync that sync is done", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v37);
    -[HMDPairedSync syncComplete](v38->_pairedSync, "syncComplete");
  }
}

- (void)_addWatch:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDRemoteDeviceMessageDestination *v9;
  void *v10;
  HMDRemoteDeviceMessageDestination *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *, void *);
  void *v23;
  HMDHomeManager *v24;
  id v25;
  id v26;
  id v27;
  id location;
  const __CFString *v29;
  uint64_t v30;
  const __CFString *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = [HMDRemoteDeviceMessageDestination alloc];
  -[HMDHomeManager uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v9, "initWithTarget:device:", v10, v8);

  -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v31 = CFSTR("kCurrentHomeUUIDKey");
    -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v32[0] = v14;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v29 = CFSTR("kNoCurrentHomeKey");
    v30 = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:qualityOfService:destination:payload:", CFSTR("kHomeConfigInternalRequestKey"), 17, v11, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_initWeak(&location, self);
  v20 = MEMORY[0x1E0C809B0];
  v21 = 3221225472;
  v22 = __46__HMDHomeManager__addWatch_completionHandler___block_invoke;
  v23 = &unk_1E89BDC40;
  v17 = v7;
  v26 = v17;
  objc_copyWeak(&v27, &location);
  v24 = self;
  v18 = v6;
  v25 = v18;
  objc_msgSend(v16, "setResponseHandler:", &v20);
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher", v20, v21, v22, v23, v24);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "sendMessage:completionHandler:", v16, 0);

  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);

}

- (void)_sendKeysToWatch:(id)a3 completionHandler:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDRemoteDeviceMessageDestination *v21;
  void *v22;
  HMDRemoteDeviceMessageDestination *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  id v35;
  _QWORD aBlock[4];
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  _QWORD v42[4];
  _QWORD v43[4];
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  id v47;
  __int16 v48;
  id v49;
  __int16 v50;
  id v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  LOBYTE(a4) = objc_msgSend(v8, "getControllerPublicKey:secretKey:keyPair:username:allowCreation:error:", &v41, 0, &v40, &v39, 0, &v38);
  v29 = v41;
  v30 = v40;
  v9 = v39;
  v27 = v38;

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke;
  aBlock[3] = &unk_1E89BDAC0;
  v10 = v7;
  v37 = v10;
  v11 = _Block_copy(aBlock);
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
  if ((a4 & 1) != 0)
  {
    if (v14)
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v45 = v15;
      v46 = 2112;
      v47 = v6;
      v48 = 2112;
      v49 = v9;
      v50 = 2112;
      v51 = v29;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Adding Watch %@ to be associated with this device, controller name: %@, public key: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v12);
    v42[0] = CFSTR("kControllerKeyPairKey");
    v42[1] = CFSTR("kControllerPairingNameKey");
    v43[0] = v30;
    v43[1] = v9;
    v42[2] = CFSTR("kControllerUniqueDeviceIdSaltKey");
    +[HMDHomeManager saltForDeviceSpecificIdentifier](HMDHomeManager, "saltForDeviceSpecificIdentifier", v27);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v43[2] = v16;
    v42[3] = CFSTR("kControllerAssistantTeamIdentifierKey");
    -[HMDHomeManager _getAssistantHashingData](self, "_getAssistantHashingData");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v43[3] = v17;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v43, v42, 4);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (void *)objc_msgSend(v18, "mutableCopy");

    +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v6);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = [HMDRemoteDeviceMessageDestination alloc];
    -[HMDHomeManager uuid](self, "uuid");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v21, "initWithTarget:device:", v22, v20);

    objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:qualityOfService:destination:payload:", CFSTR("kCompanionKeysSyncInternalRequestKey"), 17, v23, v19);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setSecureRemote:", 1);
    objc_msgSend(v24, "setRemoteRestriction:", 4);
    objc_initWeak((id *)buf, self);
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke_1070;
    v31[3] = &unk_1E89BDB10;
    objc_copyWeak(&v35, (id *)buf);
    v33 = v11;
    v32 = v6;
    v34 = v10;
    objc_msgSend(v24, "setResponseHandler:", v31);
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "sendMessage:completionHandler:", v24, 0);

    objc_destroyWeak(&v35);
    objc_destroyWeak((id *)buf);

  }
  else
  {
    if (v14)
    {
      HMFGetLogIdentifier();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v45 = v26;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Cannot extract the key pair", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1, v27);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, _QWORD, void *))v11 + 2))(v11, 0, v19);
  }

}

- (BOOL)_addWatch:(id)a3 toAssociatedList:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  BOOL v13;
  void *v14;
  id v15;
  void *v16;
  HMDWatchConfiguration *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  BOOL v28;
  void *v29;
  BOOL v31;
  void *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  HMDWatchConfiguration *v36;
  _QWORD v37[3];
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "hmf_numberForKey:", CFSTR("kHomedVersionKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_numberForKey:", CFSTR("kMetadataInfoSchemaVersionKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "hmf_numberForKey:", CFSTR("kMetadataInfoVersionKey"));
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  if (v9)
    v12 = v10 == 0;
  else
    v12 = 1;
  v13 = !v12;
  if (v12)
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = v13;
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v29;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Information from watch does not contain metadata version", buf, 0xCu);

      v13 = v28;
    }

    objc_autoreleasePoolPop(v25);
  }
  else
  {
    v31 = v13;
    if (!v8)
      v8 = &unk_1E8B36CB8;
    -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v6;
    v16 = v14;
    v32 = v15;
    objc_msgSend(v14, "objectForKeyedSubscript:");
    v17 = (HMDWatchConfiguration *)objc_claimAutoreleasedReturnValue();

    if (!v17)
    {
      v17 = -[HMDWatchConfiguration initWithUniqueID:]([HMDWatchConfiguration alloc], "initWithUniqueID:", v32);
      -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v17, v32);

    }
    v37[0] = CFSTR("kMetadataInfoSchemaVersionKey");
    v37[1] = CFSTR("kMetadataInfoVersionKey");
    v38[0] = v9;
    v38[1] = v11;
    v37[2] = CFSTR("kHomedVersionKey");
    v38[2] = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, v37, 3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDWatchConfiguration setMetadataConfig:](v17, "setMetadataConfig:", v19);

    objc_msgSend(v7, "hmf_dictionaryForKey:", CFSTR("kHomeConfigHomesKey"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDWatchConfiguration setHomeConfiguration:](v17, "setHomeConfiguration:", v20);
    objc_msgSend(v7, "hmf_UUIDForKey:", CFSTR("kPrimaryHomeUUIDKey"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDWatchConfiguration setPrimaryHome:](v17, "setPrimaryHome:", v21);

    v22 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v24;
      v35 = 2112;
      v36 = v17;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Added/Updated %@ in associated watch peers", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v22);

    v6 = v32;
    v13 = v31;
  }

  return v13;
}

- (void)_scheduleSendHomeDataToAllWatches
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (isiOSDevice())
  {
    -[HMDHomeManager watchPushDelayTimer](self, "watchPushDelayTimer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "resume");

    v4 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Kicking watch push delay", (uint8_t *)&v7, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }
}

- (void)sendHomeDataToAllWatchesWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __57__HMDHomeManager_sendHomeDataToAllWatchesWithCompletion___block_invoke;
  v7[3] = &unk_1E89C1D68;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_sendHomeDataToAllWatchesWithCompletion:(id)a3
{
  -[HMDHomeManager _sendHomeDataToAllWatchesMigrateToHH2:completionHandler:](self, "_sendHomeDataToAllWatchesMigrateToHH2:completionHandler:", 0, a3);
}

- (void)_sendHomeDataToAllWatchesMigrateToHH2:(BOOL)a3 completionHandler:(id)a4
{
  _BOOL8 v4;
  void (**v6)(_QWORD);
  NSObject *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  void (**v27)(_QWORD);
  id obj;
  _QWORD block[4];
  void (**v30)(_QWORD);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[4];
  NSObject *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint8_t v42[128];
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v4 = a3;
  v47 = *MEMORY[0x1E0C80C00];
  v6 = (void (**)(_QWORD))a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  if (isiOSDevice())
  {
    v27 = v6;
    -[HMDHomeManager associatedWatchPeers](self, "associatedWatchPeers");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "allKeys");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v44 = v12;
      v45 = 2112;
      v46 = v13;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Syncing home data to watches: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v14 = dispatch_group_create();
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    obj = v8;
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
    v16 = MEMORY[0x1E0C809B0];
    if (v15)
    {
      v17 = v15;
      v18 = *(_QWORD *)v38;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v38 != v18)
            objc_enumerationMutation(obj);
          v20 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * v19);
          dispatch_group_enter(v14);
          v35[0] = v16;
          v35[1] = 3221225472;
          v35[2] = __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke;
          v35[3] = &unk_1E89BDB38;
          v36 = v14;
          -[HMDHomeManager _sendHomeDataToWatch:migrateToHH2:completionHandler:](v10, "_sendHomeDataToWatch:migrateToHH2:completionHandler:", v20, v4, v35);

          ++v19;
        }
        while (v17 != v19);
        v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
      }
      while (v17);
    }

    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    -[HMDHomeManager homes](v10, "homes");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v32;
      do
      {
        v25 = 0;
        do
        {
          if (*(_QWORD *)v32 != v24)
            objc_enumerationMutation(v21);
          objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v25++), "setWatchSkipVersionCheck:", 0);
        }
        while (v23 != v25);
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
      }
      while (v23);
    }

    -[HMDHomeManager workQueue](v10, "workQueue");
    v26 = objc_claimAutoreleasedReturnValue();
    block[0] = v16;
    block[1] = 3221225472;
    block[2] = __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke_2;
    block[3] = &unk_1E89C0870;
    v6 = v27;
    v30 = v27;
    dispatch_group_notify(v14, v26, block);

  }
  else if (v6)
  {
    v6[2](v6);
  }

}

- (void)_sendHomeDataToWatch:(id)a3 completionHandler:(id)a4
{
  -[HMDHomeManager _sendHomeDataToWatch:migrateToHH2:completionHandler:](self, "_sendHomeDataToWatch:migrateToHH2:completionHandler:", a3, 0, a4);
}

- (void)_sendHomeDataToWatch:(id)a3 migrateToHH2:(BOOL)a4 completionHandler:(id)a5
{
  void *v7;
  void *v8;
  int v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t i;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  char v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  id v31;
  void *v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  id v36;
  void *v37;
  void *v38;
  char v39;
  void *v40;
  void *v41;
  void *v42;
  char v43;
  void *v44;
  NSObject *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  HMDHomeManager *v50;
  NSObject *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  HMDHomeManager *v63;
  NSObject *v64;
  id v65;
  void *v66;
  id v67;
  NSObject *v68;
  void *context;
  id v70;
  void *v71;
  id obj;
  unsigned int v73;
  _BOOL4 v74;
  NSObject *group;
  uint64_t v76;
  void *v77;
  HMDHomeManager *val;
  uint64_t v79;
  id v80;
  _QWORD block[5];
  id v82;
  id v83;
  id v84;
  _BYTE *v85;
  char v86;
  _QWORD v87[4];
  id v88;
  id v89;
  HMDHomeManager *v90;
  id v91;
  _QWORD v92[4];
  id v93;
  void *v94;
  HMDHomeManager *v95;
  id v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  id location;
  const __CFString *v102;
  void *v103;
  const __CFString *v104;
  void *v105;
  uint8_t v106[4];
  id v107;
  __int16 v108;
  void *v109;
  __int16 v110;
  id v111;
  __int16 v112;
  void *v113;
  uint8_t v114[128];
  _BYTE buf[24];
  uint64_t (*v116)(uint64_t, uint64_t);
  void (*v117)(uint64_t);
  id v118;
  uint64_t v119;

  v74 = a4;
  v119 = *MEMORY[0x1E0C80C00];
  v80 = a3;
  v70 = a5;
  val = self;
  -[HMDHomeManager watchManager](self, "watchManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "connectedWatchFromDeviceID:", v80);
  v71 = (void *)objc_claimAutoreleasedReturnValue();

  if (!-[HMDHomeManager accountActive](self, "accountActive")
    || (objc_msgSend(v71, "capabilities"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v9 = objc_msgSend(v8, "supportsCloudDataSync"),
        v8,
        !v9))
  {
    context = (void *)MEMORY[0x1D17BA0A0]();
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v116 = __Block_byref_object_copy__165094;
    v117 = __Block_byref_object_dispose__165095;
    v118 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.push-home-to-watch"));
    group = dispatch_group_create();
    objc_msgSend(v71, "version");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D286E0]), "initWithVersionString:", CFSTR("4.0"));
    v73 = objc_msgSend(v15, "isAtLeastVersion:", v16);

    -[HMDHomeManager associatedWatchPeers](val, "associatedWatchPeers");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectForKeyedSubscript:", v80);
    v77 = (void *)objc_claimAutoreleasedReturnValue();

    objc_initWeak(&location, val);
    -[HMDHomeManager homes](val, "homes");
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v97, v114, 16);
    if (v18)
    {
      v19 = 0;
      v76 = *(_QWORD *)v98;
      do
      {
        v79 = v18;
        for (i = 0; i != v79; ++i)
        {
          if (*(_QWORD *)v98 != v76)
            objc_enumerationMutation(obj);
          v21 = *(void **)(*((_QWORD *)&v97 + 1) + 8 * i);
          v22 = (void *)objc_msgSend(v21, "configurationVersion");
          objc_msgSend(v77, "homeConfig");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "uuid");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "objectForKeyedSubscript:", v24);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          v26 = objc_msgSend(v21, "watchSkipVersionCheck");
          if (v25)
            v27 = v26;
          else
            v27 = 1;
          if ((v27 & 1) != 0 || (void *)objc_msgSend(v25, "integerValue") != v22)
          {
            v33 = (void *)MEMORY[0x1D17BA0A0]();
            v34 = val;
            HMFGetOSLogHandle();
            v35 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v36 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "name");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v106 = 138543874;
              v107 = v36;
              v108 = 2112;
              v109 = v37;
              v110 = 2112;
              v111 = v80;
              _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Sending over the data for home %@ to watch %@", v106, 0x20u);

            }
            objc_autoreleasePoolPop(v33);
            -[HMDHomeManager _prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:migrateToHH2:](v34, "_prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:migrateToHH2:", v21, 0, v73, v74);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            v92[0] = MEMORY[0x1E0C809B0];
            v92[1] = 3221225472;
            v92[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke;
            v92[3] = &unk_1E89BDB60;
            objc_copyWeak(v96, &location);
            v93 = v80;
            v94 = v21;
            v96[1] = v22;
            v95 = v34;
            -[HMDHomeManager _pushChangesToWatch:payload:group:completionHandler:](v34, "_pushChangesToWatch:payload:group:completionHandler:", v93, v38, group, v92);

            objc_destroyWeak(v96);
            v19 = 1;
          }
          else
          {
            v28 = (void *)MEMORY[0x1D17BA0A0]();
            v29 = val;
            HMFGetOSLogHandle();
            v30 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v31 = (id)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "name");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)v106 = 138544130;
              v107 = v31;
              v108 = 2112;
              v109 = v32;
              v110 = 2112;
              v111 = v25;
              v112 = 2048;
              v113 = v22;
              _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Not sending home data for %@ as the config versions match (W: %@, C: %ld)", v106, 0x2Au);

            }
            objc_autoreleasePoolPop(v28);
          }

        }
        v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v97, v114, 16);
      }
      while (v18);

      if ((v19 & 1) != 0)
      {
        v39 = 1;
LABEL_39:
        -[HMDHomeManager workQueue](val, "workQueue");
        v68 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_1076;
        block[3] = &unk_1E89BDBB0;
        block[4] = val;
        v82 = v80;
        v85 = buf;
        v84 = v70;
        v86 = v39;
        v83 = v71;
        dispatch_group_notify(group, v68, block);

        objc_destroyWeak(&location);
        _Block_object_dispose(buf, 8);

        objc_autoreleasePoolPop(context);
        goto LABEL_40;
      }
    }
    else
    {

    }
    -[HMDHomeManager primaryHomeUUID](val, "primaryHomeUUID");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v40)
      goto LABEL_30;
    objc_msgSend(v77, "primaryHome");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager primaryHomeUUID](val, "primaryHomeUUID");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = HMFEqualObjects();

    if ((v43 & 1) == 0)
    {
      v49 = (void *)MEMORY[0x1D17BA0A0]();
      v50 = val;
      HMFGetOSLogHandle();
      v51 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v52 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v77, "primaryHome");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "UUIDString");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager primaryHomeUUID](v50, "primaryHomeUUID");
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "UUIDString");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v106 = 138543874;
        v107 = v52;
        v108 = 2112;
        v109 = v54;
        v110 = 2112;
        v111 = v56;
        _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@Primary home has been updated from %@ to %@, sending primary home update", v106, 0x20u);

      }
      objc_autoreleasePoolPop(v49);
      -[HMDHomeManager primaryHomeUUID](v50, "primaryHomeUUID");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v104 = CFSTR("kPrimaryHomeUUIDKey");
      objc_msgSend(v57, "UUIDString");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v105 = v58;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v105, &v104, 1);
      v59 = (void *)objc_claimAutoreleasedReturnValue();

      v102 = CFSTR("kHomeDataKey");
      encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2(v59, v73, 0);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v103 = v60;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v103, &v102, 1);
      v61 = (void *)objc_claimAutoreleasedReturnValue();

      v62 = (void *)MEMORY[0x1D17BA0A0]();
      v63 = v50;
      HMFGetOSLogHandle();
      v64 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v65 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "UUIDString");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v106 = 138543874;
        v107 = v65;
        v108 = 2112;
        v109 = v66;
        v110 = 2112;
        v111 = v80;
        _os_log_impl(&dword_1CD062000, v64, OS_LOG_TYPE_INFO, "%{public}@Sending over the data for primary home update to %@ to watch %@", v106, 0x20u);

      }
      objc_autoreleasePoolPop(v62);
      v87[0] = MEMORY[0x1E0C809B0];
      v87[1] = 3221225472;
      v87[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_1075;
      v87[3] = &unk_1E89BDB88;
      objc_copyWeak(&v91, &location);
      v88 = v80;
      v67 = v57;
      v89 = v67;
      v90 = v63;
      -[HMDHomeManager _pushChangesToWatch:payload:group:completionHandler:](v63, "_pushChangesToWatch:payload:group:completionHandler:", v88, v61, group, v87);

      objc_destroyWeak(&v91);
    }
    else
    {
LABEL_30:
      v44 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v45 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v46 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v77, "primaryHome");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager primaryHomeUUID](val, "primaryHomeUUID");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v106 = 138543874;
        v107 = v46;
        v108 = 2112;
        v109 = v47;
        v110 = 2112;
        v111 = v48;
        _os_log_impl(&dword_1CD062000, v45, OS_LOG_TYPE_INFO, "%{public}@Not sending primary home update as they match: (W: %@, C: %@)", v106, 0x20u);

      }
      objc_autoreleasePoolPop(v44);
    }
    v39 = 0;
    goto LABEL_39;
  }
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = val;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v71;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Paired watch %@ supports cloud data sync - skipping sending home data", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  if (v70)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v70 + 2))(v70, 0, v14);

  }
LABEL_40:

}

- (void)syncWalletKeyPassSerialNumbersToWatch:(id)a3 withCompletion:(id)a4
{
  id v6;
  void (**v7)(_QWORD);
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, void *, void *);
  void *v30;
  id v31;
  id v32;
  void (**v33)(_QWORD);
  id v34;
  const __CFString *v35;
  void *v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(_QWORD))a4;
  objc_msgSend(v6, "version");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D286E0]), "initWithVersionString:", CFSTR("8.0"));
  v10 = objc_msgSend(v8, "isAtLeastVersion:", v9);

  if ((v10 & 1) != 0)
  {
    objc_msgSend(v6, "remoteDestinationString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager homes](self, "homes");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "na_map:", &__block_literal_global_1078);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
    if (v13)
    {
      if (v17)
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v38 = v18;
        v39 = 2112;
        v40 = v13;
        v41 = 2112;
        v42 = v11;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Syncing wallet key pass serial numbers: %@ to watch: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
      -[HMDHomeManager uuid](v15, "uuid");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:](HMDMessageDispatcher, "destinationWithTarget:userID:destination:multicast:", v19, 0, v11, 0);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      v35 = CFSTR("HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers");
      v36 = v13;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D285F8], "messageWithName:qualityOfService:destination:payload:", CFSTR("HMDHomeManagerSyncWalletKeysPassSerialNumbersMessage"), 17, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setSecureRemote:", 1);
      objc_msgSend(v22, "setRemoteRestriction:", 4);
      objc_initWeak((id *)buf, v15);
      -[HMDHomeManager workQueue](v15, "workQueue");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = MEMORY[0x1E0C809B0];
      v28 = 3221225472;
      v29 = __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_1079;
      v30 = &unk_1E89BDC40;
      v24 = v23;
      v31 = v24;
      objc_copyWeak(&v34, (id *)buf);
      v32 = v11;
      v33 = v7;
      objc_msgSend(v22, "setResponseHandler:", &v27);
      -[HMDHomeManager messageDispatcher](v15, "messageDispatcher", v27, v28, v29, v30);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "sendMessage:", v22);

      objc_destroyWeak(&v34);
      objc_destroyWeak((id *)buf);

    }
    else
    {
      if (v17)
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v38 = v26;
        v39 = 2112;
        v40 = v11;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Did not find any wallet key pass serial numbers to sync to watch: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      v7[2](v7);
    }

  }
  else
  {
    v7[2](v7);
  }

}

- (HMDDevice)companionDevice
{
  void *v2;
  void *v3;

  -[HMDHomeManager companionManager](self, "companionManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "companion");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (HMDDevice *)v3;
}

- (void)_checkAndInformCompanionDevice
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  HMDRemoteDeviceMessageDestination *v9;
  void *v10;
  HMDRemoteDeviceMessageDestination *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t v24[128];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  _BOOL4 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager companionManager](self, "companionManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "companion");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if ((v4 != 0) != -[HMDHomeManager companionReachable](self, "companionReachable"))
  {
    -[HMDHomeManager setCompanionReachable:](self, "setCompanionReachable:", v4 != 0);
    +[HMDWatchSystemState sharedState](HMDWatchSystemState, "sharedState");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setCompanionReachable:", v4 != 0);

    v6 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v8;
      v27 = 1024;
      v28 = -[HMDHomeManager companionReachable](self, "companionReachable");
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Companion is reachable: %d", buf, 0x12u);

    }
    objc_autoreleasePoolPop(v6);
    if (v4)
    {
      v9 = [HMDRemoteDeviceMessageDestination alloc];
      -[HMDHomeManager uuid](self, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v9, "initWithTarget:device:", v10, v4);

      objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:qualityOfService:destination:payload:", CFSTR("kRequestForCompanionKeysSyncInternalRequestKey"), 9, v11, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "sendMessage:completionHandler:", v12, 0);

    }
    -[HMDHomeManager _checkForRemotePeers](self, "_checkForRemotePeers");
    if (!-[HMDHomeManager companionReachable](self, "companionReachable"))
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      -[HMDHomeManager homes](self, "homes", 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v21;
        do
        {
          v18 = 0;
          do
          {
            if (*(_QWORD *)v21 != v17)
              objc_enumerationMutation(v14);
            objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v18), "uuid");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHomeManager _teardownRemoteAccessForHomeThroughCompanion:](self, "_teardownRemoteAccessForHomeThroughCompanion:", v19);

            ++v18;
          }
          while (v16 != v18);
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        }
        while (v16);
      }

    }
  }

}

- (BOOL)isPairedWithWatch
{
  void *v2;
  char v3;

  -[HMDHomeManager watchManager](self, "watchManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isPairedWithWatch");

  return v3;
}

- (void)checkForRemotePeers
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __37__HMDHomeManager_checkForRemotePeers__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)_checkForRemotePeers
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __38__HMDHomeManager__checkForRemotePeers__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (id)_remotePeers
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  char v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  if (isWatch())
  {
    -[HMDHomeManager companionManager](self, "companionManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "companion");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      v25[0] = v4;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 1);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "account");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "devices");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v4, "count"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "account");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "devices");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v21 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
          objc_msgSend(v16, "capabilities");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v17, "isRemoteGatewayCapable"))
          {
            v18 = objc_msgSend(v16, "isCurrentDevice");

            if ((v18 & 1) == 0)
              objc_msgSend(v8, "addObject:", v16);
          }
          else
          {

          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v13);
    }

    v5 = (void *)objc_msgSend(v8, "copy");
  }

  return v5;
}

- (void)_checkForRemotePeersAndRegisterForRemoteNotifications:(BOOL)a3
{
  HMDHomeManager *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t m;
  void *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  NSObject *v43;
  void *v44;
  int v45;
  uint64_t n;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  NSObject *v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  HMDResidentUser *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ii;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  NSObject *v81;
  void *v82;
  void *v83;
  NSObject *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  int v99;
  void *v100;
  HMDHomeManager *v101;
  NSObject *v102;
  void *v103;
  __CFString *v104;
  void *v105;
  void *v106;
  NSObject *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  _BOOL4 v112;
  void *v113;
  int v114;
  void *v115;
  void *v116;
  NSObject *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  id v128;
  char isKindOfClass;
  void *v130;
  NSObject *v131;
  void *v132;
  void *v133;
  void *v134;
  NSObject *v135;
  void *v136;
  void *v137;
  void *v138;
  NSObject *v139;
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t jj;
  void *v146;
  void *v147;
  void *v148;
  NSObject *v149;
  void *v150;
  __int128 v151;
  void *v152;
  id obj;
  HMDHomeManager *v154;
  uint64_t v155;
  uint64_t v156;
  _BOOL4 v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  char v162;
  void *v163;
  void *v164;
  uint64_t v165;
  id v166;
  id v167;
  id v168;
  void *v169;
  __CFString *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint8_t v207[128];
  uint8_t buf[4];
  void *v209;
  __int16 v210;
  uint64_t v211;
  __int16 v212;
  void *v213;
  __int16 v214;
  void *v215;
  _BYTE v216[128];
  _BYTE v217[128];
  _BYTE v218[128];
  _BYTE v219[128];
  _BYTE v220[128];
  _BYTE v221[128];
  _BYTE v222[128];
  _BYTE v223[128];
  uint64_t v224;

  v157 = a3;
  v3 = self;
  v224 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeAllObjects");

  -[HMDHomeManager associatedRemotePeers](v3, "associatedRemotePeers");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeAllObjects");

  if (isWatch()
    || (-[HMDHomeManager appleAccountManager](v3, "appleAccountManager"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v6, "account"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v7,
        v6,
        v7))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v164 = (void *)objc_claimAutoreleasedReturnValue();
    v203 = 0u;
    v204 = 0u;
    v205 = 0u;
    v206 = 0u;
    -[HMDHomeManager homes](v3, "homes");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v203, v223, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v204;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v204 != v11)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v203 + 1) + 8 * i), "users");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v164, "addObjectsFromArray:", v13);

        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v203, v223, 16);
      }
      while (v10);
    }

    -[HMDHomeManager _remotePeers](v3, "_remotePeers");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D28690], "productInfo");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "productClass");

    v154 = v3;
    if (v16 == 1)
    {
      v166 = v14;
      -[HMDHomeManager watchManager](v3, "watchManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "watches");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v18, "count"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v199 = 0u;
      v200 = 0u;
      v201 = 0u;
      v202 = 0u;
      v20 = v18;
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v199, v222, 16);
      if (v21)
      {
        v22 = v21;
        v23 = *(_QWORD *)v200;
        do
        {
          for (j = 0; j != v22; ++j)
          {
            if (*(_QWORD *)v200 != v23)
              objc_enumerationMutation(v20);
            objc_msgSend(*(id *)(*((_QWORD *)&v199 + 1) + 8 * j), "remoteDestinationString");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "addObject:", v25);

          }
          v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v199, v222, 16);
        }
        while (v22);
      }

      v197 = 0u;
      v198 = 0u;
      v195 = 0u;
      v196 = 0u;
      -[HMDHomeManager homes](v3, "homes");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v195, v221, 16);
      if (v27)
      {
        v28 = v27;
        v29 = *(_QWORD *)v196;
        do
        {
          for (k = 0; k != v28; ++k)
          {
            if (*(_QWORD *)v196 != v29)
              objc_enumerationMutation(v26);
            objc_msgSend(*(id *)(*((_QWORD *)&v195 + 1) + 8 * k), "auditUsersForNotifications:", v19);
          }
          v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v195, v221, 16);
        }
        while (v28);
      }

      v193 = 0u;
      v194 = 0u;
      v191 = 0u;
      v192 = 0u;
      -[HMDHomeManager fullSyncedWatchPeers](v3, "fullSyncedWatchPeers");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = (void *)objc_msgSend(v31, "copy");

      v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v191, v220, 16);
      if (v33)
      {
        v34 = v33;
        v35 = *(_QWORD *)v192;
        do
        {
          for (m = 0; m != v34; ++m)
          {
            if (*(_QWORD *)v192 != v35)
              objc_enumerationMutation(v32);
            v37 = *(void **)(*((_QWORD *)&v191 + 1) + 8 * m);
            if ((objc_msgSend(v19, "containsObject:", v37) & 1) == 0)
            {
              v38 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v39 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138543618;
                v209 = v40;
                v210 = 2112;
                v211 = (uint64_t)v37;
                _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Fully synced watch %@ is no more paired", buf, 0x16u);

                v3 = v154;
              }

              objc_autoreleasePoolPop(v38);
              -[HMDHomeManager fullSyncedWatchPeers](v3, "fullSyncedWatchPeers");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v41, "removeObject:", v37);

            }
          }
          v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v191, v220, 16);
        }
        while (v34);
      }

      v14 = v166;
    }
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v43 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v209 = v44;
      _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@Checking for updated list of devices for remote access", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v42);
    v189 = 0u;
    v190 = 0u;
    v187 = 0u;
    v188 = 0u;
    obj = v14;
    v159 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v187, v219, 16);
    v45 = 0;
    if (v159)
    {
      v156 = *(_QWORD *)v188;
      do
      {
        for (n = 0; n != v159; ++n)
        {
          if (*(_QWORD *)v188 != v156)
            objc_enumerationMutation(obj);
          v47 = *(void **)(*((_QWORD *)&v187 + 1) + 8 * n);
          objc_msgSend(v47, "remoteDestinationString");
          v48 = (void *)objc_claimAutoreleasedReturnValue();

          if (v48)
          {
            objc_msgSend(v47, "remoteDestinationString");
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v158, "addObject:", v49);

          }
          v50 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v51 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v209 = v52;
            v210 = 2112;
            v211 = (uint64_t)v47;
            _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_INFO, "%{public}@Detected device: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v50);
          objc_msgSend(v47, "remoteDestinationString");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v164, "hmf_firstObjectWithValue:forKeyPath:", v53, CFSTR("userID"));
          v54 = (id)objc_claimAutoreleasedReturnValue();

          if (isWatch())
          {
            v155 = n;
            v161 = v45;
            v185 = 0u;
            v186 = 0u;
            v183 = 0u;
            v184 = 0u;
            -[HMDHomeManager homes](v3, "homes");
            v169 = (void *)objc_claimAutoreleasedReturnValue();
            v55 = objc_msgSend(v169, "countByEnumeratingWithState:objects:count:", &v183, v218, 16);
            if (v55)
            {
              v56 = v55;
              v57 = *(_QWORD *)v184;
              do
              {
                v58 = 0;
                v59 = v54;
                v167 = (id)v56;
                do
                {
                  if (*(_QWORD *)v184 != v57)
                    objc_enumerationMutation(v169);
                  v60 = *(void **)(*((_QWORD *)&v183 + 1) + 8 * v58);
                  objc_msgSend(v60, "users");
                  v61 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v47, "remoteDestinationString");
                  v62 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v61, "hmf_firstObjectWithValue:forKeyPath:", v62, CFSTR("userID"));
                  v63 = (void *)objc_claimAutoreleasedReturnValue();

                  if (!v63)
                  {
                    v64 = v47;
                    v65 = -[HMDResidentUser initWithDevice:home:pairingIdentity:configurationState:]([HMDResidentUser alloc], "initWithDevice:home:pairingIdentity:configurationState:", v47, v60, 0, 2);
                    -[HMDUser setHome:](v65, "setHome:", v60);
                    objc_msgSend(v164, "addObject:", v65);
                    v66 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v60, "addCompanionAsResidentUser:", v65));
                    HMFGetOSLogHandle();
                    v67 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v68 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v60, "name");
                      v69 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543618;
                      v209 = v68;
                      v210 = 2112;
                      v211 = (uint64_t)v69;
                      _os_log_impl(&dword_1CD062000, v67, OS_LOG_TYPE_INFO, "%{public}@Created and added a new resident user to home: %@ for watch", buf, 0x16u);

                    }
                    objc_autoreleasePoolPop(v66);

                    v47 = v64;
                    v56 = (uint64_t)v167;
                  }
                  v54 = v63;

                  ++v58;
                  v59 = v54;
                }
                while (v56 != v58);
                v56 = objc_msgSend(v169, "countByEnumeratingWithState:objects:count:", &v183, v218, 16);
              }
              while (v56);
            }

            v3 = v154;
            n = v155;
            v45 = v161;
          }
          if (v54 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            v70 = v54;
            if ((objc_msgSend(v70, "updateWithDevice:", v47) & 1) != 0 || !objc_msgSend(v70, "configurationState"))
            {
              objc_msgSend(v70, "setConfigurationState:", 2);
              v45 = 1;
            }
            else
            {
              v71 = n;
              v181 = 0u;
              v182 = 0u;
              v179 = 0u;
              v180 = 0u;
              -[HMDHomeManager homes](v3, "homes");
              v72 = (void *)objc_claimAutoreleasedReturnValue();
              v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v179, v217, 16);
              if (v73)
              {
                v74 = v73;
                v75 = *(_QWORD *)v180;
                do
                {
                  for (ii = 0; ii != v74; ++ii)
                  {
                    if (*(_QWORD *)v180 != v75)
                      objc_enumerationMutation(v72);
                    objc_msgSend(*(id *)(*((_QWORD *)&v179 + 1) + 8 * ii), "usersPendingUserManagementOperations");
                    v77 = (void *)objc_claimAutoreleasedReturnValue();
                    if (objc_msgSend(v77, "containsObject:", v70))
                    {
                      v78 = objc_msgSend(v70, "configurationState");

                      if (v78 == 1)
                      {
                        objc_msgSend(v70, "setConfigurationState:", 2);
                        v45 = 1;
                      }
                    }
                    else
                    {

                    }
                  }
                  v74 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v179, v217, 16);
                }
                while (v74);
              }

              v3 = v154;
              n = v71;
            }

          }
          else
          {
            -[HMDHomeManager unassociatedRemotePeers](v3, "unassociatedRemotePeers");
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v79, "addObject:", v47);

            v80 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v81 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v82 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v209 = v82;
              v210 = 2112;
              v211 = (uint64_t)v47;
              _os_log_impl(&dword_1CD062000, v81, OS_LOG_TYPE_INFO, "%{public}@Adding remote peer, %@, to unassociated list", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v80);
          }

        }
        v159 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v187, v219, 16);
      }
      while (v159);
    }

    v83 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v84 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager unassociatedRemotePeers](v3, "unassociatedRemotePeers");
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      v87 = objc_msgSend(v86, "count");
      *(_DWORD *)buf = 138543618;
      v209 = v85;
      v210 = 2048;
      v211 = v87;
      _os_log_impl(&dword_1CD062000, v84, OS_LOG_TYPE_INFO, "%{public}@Total unassociated peers %ld", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v83);
    -[HMDHomeManager appleAccountManager](v3, "appleAccountManager");
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v88, "device");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v89, "identifier");
    v90 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v152 = (void *)objc_claimAutoreleasedReturnValue();
    v175 = 0u;
    v176 = 0u;
    v177 = 0u;
    v178 = 0u;
    v168 = v164;
    v91 = objc_msgSend(v168, "countByEnumeratingWithState:objects:count:", &v175, v216, 16);
    if (v91)
    {
      v93 = v91;
      v94 = *(_QWORD *)v176;
      *(_QWORD *)&v92 = 138543362;
      v151 = v92;
      v163 = v90;
      v160 = *(_QWORD *)v176;
      v162 = v45;
      do
      {
        v95 = 0;
        v165 = v93;
        do
        {
          if (*(_QWORD *)v176 != v94)
            objc_enumerationMutation(v168);
          v96 = *(void **)(*((_QWORD *)&v175 + 1) + 8 * v95);
          objc_msgSend(v90, "UUIDString", v151);
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v96, "pairingUsername");
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          v99 = objc_msgSend(v97, "isEqualToString:", v98);

          if (!v99)
          {
            if ((shouldLogPrivateInformation() & 1) != 0)
            {
              objc_msgSend(v96, "userID");
              v170 = (__CFString *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v104 = CFSTR("...");
              v170 = CFSTR("...");
            }
            objc_msgSend(v96, "home");
            v105 = (void *)objc_claimAutoreleasedReturnValue();
            v106 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v107 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v108 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v96, "home");
              v109 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v109, "name");
              v110 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v96, "isRemoteGateway");
              HMFBooleanToString();
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v209 = v108;
              v210 = 2112;
              v211 = (uint64_t)v170;
              v212 = 2112;
              v213 = v110;
              v214 = 2112;
              v215 = v111;
              _os_log_impl(&dword_1CD062000, v107, OS_LOG_TYPE_INFO, "%{public}@Existing user: %@, for home: %@, isRemoteGateway: %@", buf, 0x2Au);

              v94 = v160;
              v93 = v165;

              v90 = v163;
            }

            objc_autoreleasePoolPop(v106);
            if (!objc_msgSend(v96, "isRemoteGateway"))
              goto LABEL_126;
            objc_msgSend(v105, "isOwnerUser");
            v112 = +[HMDHomeManager isThisDeviceAdminOfHome:](HMDHomeManager, "isThisDeviceAdminOfHome:", v105)|| isWatch();
            objc_msgSend(v96, "userID");
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            v114 = objc_msgSend(v158, "containsObject:", v113);
            if ((v114 & 1) == 0 && !v112)
            {
              objc_msgSend(v96, "userID");
              v115 = (void *)objc_claimAutoreleasedReturnValue();

              if (v115)
                goto LABEL_107;
LABEL_120:
              if (v112)
              {
                v134 = (void *)MEMORY[0x1D17BA0A0]();
                HMFGetOSLogHandle();
                v135 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v136 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v96, "userID");
                  v137 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v209 = v136;
                  v210 = 2112;
                  v211 = (uint64_t)v137;
                  _os_log_impl(&dword_1CD062000, v135, OS_LOG_TYPE_INFO, "%{public}@Previous associated remote peer %@ has been removed", buf, 0x16u);

                  v93 = v165;
                }

                objc_autoreleasePoolPop(v134);
                v138 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v152, "addObject:", v96));
                HMFGetOSLogHandle();
                v139 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
                {
                  HMFGetLogIdentifier();
                  v140 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = v151;
                  v209 = v140;
                  _os_log_impl(&dword_1CD062000, v139, OS_LOG_TYPE_DEBUG, "%{public}@Remove resident device", buf, 0xCu);

                }
                objc_autoreleasePoolPop(v138);
              }
LABEL_126:

              goto LABEL_127;
            }

            if (!v114)
              goto LABEL_120;
LABEL_107:
            v116 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v117 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v117, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v118 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v96, "userID");
              v119 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v96, "home");
              v120 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v120, "name");
              v121 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v209 = v118;
              v210 = 2112;
              v211 = (uint64_t)v119;
              v212 = 2112;
              v213 = v121;
              _os_log_impl(&dword_1CD062000, v117, OS_LOG_TYPE_INFO, "%{public}@Adding remote peer %@ for home %@", buf, 0x20u);

              v3 = v154;
              v90 = v163;

              v94 = v160;
            }

            objc_autoreleasePoolPop(v116);
            -[HMDHomeManager associatedRemotePeers](v3, "associatedRemotePeers");
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v105, "uuid");
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v122, "objectForKeyedSubscript:", v123);
            v124 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v124)
            {
              objc_msgSend(MEMORY[0x1E0C99E20], "set");
              v124 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHomeManager associatedRemotePeers](v3, "associatedRemotePeers");
              v125 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v105, "uuid");
              v126 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v125, "setObject:forKeyedSubscript:", v124, v126);

            }
            objc_msgSend(v96, "userID");
            v127 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v124, "addObject:", v127);

            objc_msgSend(v96, "userID");
            v128 = (id)objc_claimAutoreleasedReturnValue();
            if (((objc_msgSend(v158, "containsObject:", v128) | v112) & 1) != 0)
            {
LABEL_117:

            }
            else
            {
              objc_opt_class();
              isKindOfClass = objc_opt_isKindOfClass();

              if ((isKindOfClass & 1) != 0)
              {
                v128 = v96;
                if (!objc_msgSend(v128, "configurationState"))
                {
                  v130 = (void *)MEMORY[0x1D17BA0A0]();
                  HMFGetOSLogHandle();
                  v131 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v132 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v128, "userID");
                    v133 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543618;
                    v209 = v132;
                    v210 = 2112;
                    v211 = (uint64_t)v133;
                    _os_log_impl(&dword_1CD062000, v131, OS_LOG_TYPE_INFO, "%{public}@[HMDHomeManager] Unknown configuration state, enabling '%@'", buf, 0x16u);

                    v90 = v163;
                    v94 = v160;
                  }

                  objc_autoreleasePoolPop(v130);
                  objc_msgSend(v128, "setConfigurationState:", 2);
                }
                goto LABEL_117;
              }
            }

            v93 = v165;
            goto LABEL_126;
          }
          v100 = (void *)MEMORY[0x1D17BA0A0]();
          v101 = v3;
          HMFGetOSLogHandle();
          v102 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v103 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v209 = v103;
            v210 = 2112;
            v211 = (uint64_t)v96;
            _os_log_impl(&dword_1CD062000, v102, OS_LOG_TYPE_INFO, "%{public}@Skipping resident user representing ourselves: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v100);
LABEL_127:
          ++v95;
          LOBYTE(v45) = v162;
        }
        while (v93 != v95);
        v93 = objc_msgSend(v168, "countByEnumeratingWithState:objects:count:", &v175, v216, 16);
      }
      while (v93);
    }

    v173 = 0u;
    v174 = 0u;
    v171 = 0u;
    v172 = 0u;
    -[HMDHomeManager homes](v3, "homes");
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    v142 = objc_msgSend(v141, "countByEnumeratingWithState:objects:count:", &v171, v207, 16);
    if (v142)
    {
      v143 = v142;
      v144 = *(_QWORD *)v172;
      do
      {
        for (jj = 0; jj != v143; ++jj)
        {
          if (*(_QWORD *)v172 != v144)
            objc_enumerationMutation(v141);
          v146 = *(void **)(*((_QWORD *)&v171 + 1) + 8 * jj);
          -[HMDHomeManager unassociatedRemotePeers](v3, "unassociatedRemotePeers");
          v147 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v146, "notifyNewRemotePeersFound:remoteUsersRemoved:forceRemoteNotificationRegistration:", objc_msgSend(v147, "count") != 0, v152, v157);

        }
        v143 = objc_msgSend(v141, "countByEnumeratingWithState:objects:count:", &v171, v207, 16);
      }
      while (v143);
    }

    if ((v45 & 1) != 0)
      -[HMDHomeManager _saveWithReason:postSyncNotification:](v3, "_saveWithReason:postSyncNotification:", CFSTR("legacyResidentUpdated"), 0);

  }
  else
  {
    v148 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v149 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v149, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v209 = v150;
      _os_log_impl(&dword_1CD062000, v149, OS_LOG_TYPE_INFO, "%{public}@No active IDS account, cannot check for remote peers.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v148);
  }
}

- (void)removeFromUnassociatedPeers:(id)a3 home:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_removeFromUnassociatedPeers_home___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)_removeFromUnassociatedPeers:(id)a3 home:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager _remotePeers](self, "_remotePeers");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v24 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v13, "remoteDestinationString");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "isEqualToString:", v6);

        if (v15)
        {
          -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "removeObject:", v13);

          objc_msgSend(v13, "remoteDestinationString");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "removeUnconfiguredResidentDeviceWithUserID:", v17);

          if (v7)
          {
            -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "uuid");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "objectForKeyedSubscript:", v19);
            v20 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v20)
            {
              objc_msgSend(MEMORY[0x1E0C99E20], "set");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v7, "uuid");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "setObject:forKeyedSubscript:", v20, v22);

            }
            objc_msgSend(v20, "addObject:", v6);

          }
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v10);
  }

}

- (void)_removeFromAssociatedPeers:(id)a3 home:(id)a4
{
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager _remotePeers](self, "_remotePeers");
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v21;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v21 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_msgSend(v13, "remoteDestinationString", (_QWORD)v20);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "isEqualToString:", v6);

        if (v15)
        {
          -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "addObject:", v13);

          if (v7)
          {
            -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "uuid");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "objectForKeyedSubscript:", v18);
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            if (v19)
              objc_msgSend(v19, "removeObject:", v6);

          }
          goto LABEL_14;
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (v10)
        continue;
      break;
    }
  }
LABEL_14:

}

- (void)_accessoriesAreLocallyReachableOnTransientDevice:(BOOL)a3 forHome:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  void *v11;
  void *v12;
  void *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a3;
  v29 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
      v10 = "";
    else
      v10 = "not ";
    objc_msgSend(v6, "UUIDString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138544130;
    v22 = v9;
    v23 = 2080;
    v24 = v10;
    v25 = 2112;
    v26 = v11;
    v27 = 2048;
    v28 = objc_msgSend(v12, "count");
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Accessories are %slocally reachable for home %@, peers %lu", (uint8_t *)&v21, 0x2Au);

  }
  objc_autoreleasePoolPop(v7);
  if (v4 && !isWatch())
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "isOwnerUser");
    v14 = +[HMDHomeManager isThisDeviceAdminOfHome:](HMDHomeManager, "isThisDeviceAdminOfHome:", v13);
    if (v13)
    {
      v15 = v14;
      -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v16, "count"))
        v17 = v15;
      else
        v17 = 0;
      if (!v17 || !objc_msgSend(v13, "allowsRemoteAccess"))
        goto LABEL_17;
      objc_msgSend(v13, "currentUser");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "isRemoteAccessAllowed");

      if (v19)
      {
        -[HMDHomeManager identifiersOfAccessoriesForHome:](self, "identifiersOfAccessoriesForHome:", v13);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "allObjects");
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v16, "count"))
          -[HMDHomeManager _findRemotePeerContainingAccessories:forHome:](self, "_findRemotePeerContainingAccessories:forHome:", v16, v13);
LABEL_17:

      }
    }

  }
}

- (void)atHomeLevelChanged:(int64_t)a3 formerLevel:(int64_t)a4 home:(id)a5
{
  NSObject *v6;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue", a3, a4, a5);
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __54__HMDHomeManager_atHomeLevelChanged_formerLevel_home___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v6, block);

}

- (void)_findRemotePeerContainingAccessories:(id)a3 forHome:(id)a4
{
  id v6;
  uint64_t v7;
  __int128 v8;
  uint64_t i;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  HMDRemoteDeviceMessageDestination *v26;
  void *v27;
  HMDRemoteDeviceMessageDestination *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  __int128 v35;
  id v36;
  id obj;
  void *v38;
  uint64_t v39;
  _QWORD v40[4];
  id v41;
  void *v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  void *v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v36 = a3;
  v6 = a4;
  if (!isAppleTV())
  {
    v38 = v6;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    -[HMDHomeManager unassociatedRemotePeers](self, "unassociatedRemotePeers");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v56, 16);
    if (v7)
    {
      v39 = *(_QWORD *)v45;
      *(_QWORD *)&v8 = 138543874;
      v35 = v8;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v45 != v39)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
          objc_msgSend(v10, "capabilities", v35);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "isResidentCapable");

          if ((v12 & 1) == 0)
          {
            -[HMDHomeManager pendingResidentSetupSessions](self, "pendingResidentSetupSessions");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "remoteDestinationString");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v13, "containsObject:", v14);

            if (v15)
            {
              v16 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v17 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v38, "uuid");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v19, "UUIDString");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v35;
                v51 = v18;
                v52 = 2112;
                v53 = v10;
                v54 = 2112;
                v55 = v20;
                _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@We have a pending request to look for unpaired accessories to device, %@, for home: %@, dropping this request", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v16);
            }
            else
            {
              -[HMDHomeManager pendingResidentSetupSessions](self, "pendingResidentSetupSessions");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v10, "remoteDestinationString");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v21, "addObject:", v22);

              v48[0] = CFSTR("kAccessoryIdentitiesKey");
              v48[1] = CFSTR("kHomeUUID");
              v49[0] = v36;
              objc_msgSend(v38, "uuid");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "UUIDString");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              v49[1] = v24;
              objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v49, v48, 2);
              v25 = (void *)objc_claimAutoreleasedReturnValue();

              v26 = [HMDRemoteDeviceMessageDestination alloc];
              -[HMDHomeManager uuid](self, "uuid");
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              v28 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v26, "initWithTarget:device:", v27, v10);

              v29 = (void *)MEMORY[0x1D17BA0A0]();
              HMFGetOSLogHandle();
              v30 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v38, "uuid");
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v35;
                v51 = v31;
                v52 = 2112;
                v53 = v10;
                v54 = 2112;
                v55 = v32;
                _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Requesting remote gateway, %@, to look for accessories in home %@", buf, 0x20u);

              }
              objc_autoreleasePoolPop(v29);
              objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:destination:messagePayload:", CFSTR("kDoYouSeeUnpairedAccessoriesKey"), v28, v25);
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_initWeak((id *)buf, self);
              v40[0] = MEMORY[0x1E0C809B0];
              v40[1] = 3221225472;
              v40[2] = __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke;
              v40[3] = &unk_1E89C1698;
              objc_copyWeak(&v43, (id *)buf);
              v41 = v38;
              v42 = v10;
              objc_msgSend(v33, "setResponseHandler:", v40);
              -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "sendMessage:completionHandler:", v33, 0);

              objc_destroyWeak(&v43);
              objc_destroyWeak((id *)buf);

            }
          }
        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v56, 16);
      }
      while (v7);
    }

    v6 = v38;
  }

}

- (void)_updateHomesAboutNetworkConnectivity:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v3 = a3;
  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "updateNetworkConnectivity:companionReachable:", v3, -[HMDHomeManager companionReachable](self, "companionReachable"));
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }

}

- (void)_electRemoteGatewayForHomesAfterReachabilityChanges
{
  HMDHomeManager *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  HMDHomeManager *v21;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  void *v32;
  _BYTE v33[128];
  uint64_t v34;

  v2 = self;
  v34 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v28 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Reachability changed from not reachable to reachable, checking remote access setup for all homes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  -[HMDHomeManager homes](v2, "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v24;
    v21 = v2;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v24 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        v11 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "name");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "uuid");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "UUIDString");
          v16 = v7;
          v17 = v8;
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v28 = v13;
          v29 = 2112;
          v30 = v14;
          v31 = 2112;
          v32 = v18;
          _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Triggering election of resident device for remote access for home %@ (%@)", buf, 0x20u);

          v8 = v17;
          v7 = v16;
          v2 = v21;

        }
        objc_autoreleasePoolPop(v11);
        objc_msgSend(v10, "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _teardownRemoteAccessForHome:](v2, "_teardownRemoteAccessForHome:", v19);

        objc_msgSend(v10, "uuid");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _electRemoteAccessPeerForHome:](v2, "_electRemoteAccessPeerForHome:", v20);

      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
    }
    while (v7);
  }

}

- (void)electRemoteAccessPeerForHome:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __47__HMDHomeManager_electRemoteAccessPeerForHome___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_electRemoteAccessPeerForHome:(id)a3
{
  -[HMDHomeManager _electRemoteAccessPeerForHome:retryCount:](self, "_electRemoteAccessPeerForHome:retryCount:", a3, 0);
}

- (void)_electRemoteAccessPeerForHome:(id)a3 retryCount:(unint64_t)a4
{
  id v6;

  v6 = a3;
  if (isWatch())
    -[HMDHomeManager _electCompanionForRemoteAccess:](self, "_electCompanionForRemoteAccess:", v6);
  else
    -[HMDHomeManager _electRemoteAccessDeviceForHome:retryCount:](self, "_electRemoteAccessDeviceForHome:retryCount:", v6, a4);

}

- (void)_electRemoteAccessDeviceForHome:(id)a3 retryCount:(unint64_t)a4
{
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  NSObject *v41;
  id v42;
  void *v43;
  NSObject *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  int v51;
  NSObject *group;
  void *v53;
  id obj;
  uint64_t v56;
  id v57;
  _QWORD block[4];
  id v59;
  HMDHomeManager *v60;
  id v61;
  id v62;
  id v63;
  _BYTE *v64;
  _QWORD *v65;
  unint64_t v66;
  int v67;
  _QWORD v68[5];
  id v69;
  uint64_t v70;
  id v71;
  id v72;
  NSObject *v73;
  _BYTE *v74;
  _QWORD *v75;
  _QWORD *v76;
  id v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[5];
  id v83;
  _QWORD v84[3];
  char v85;
  _QWORD v86[3];
  _QWORD v87[3];
  const __CFString *v88;
  id v89;
  const __CFString *v90;
  void *v91;
  _BYTE location[12];
  __int16 v93;
  void *v94;
  __int16 v95;
  uint64_t v96;
  uint8_t v97[128];
  _BYTE buf[24];
  uint64_t (*v99)(uint64_t, uint64_t);
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v48 = a3;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = v4;
  if (v4)
  {
    if (objc_msgSend(v4, "isResidentSupported"))
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v7;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v48;
        _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Skipping electing remote access for home, %@, with a resident device", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v5);
    }
    else
    {
      -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "objectForKeyedSubscript:", v48);
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v47, "count"))
      {
        -[HMDHomeManager pendingRemoteSessions](self, "pendingRemoteSessions");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "allValues");
        v46 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v46, "containsObject:", v48))
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "UUIDString");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v12;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v13;
            _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@We have a pending election for home: %@, dropping this request", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v10);
        }
        else
        {
          -[HMDHomeManager identifiersOfAccessoriesForHome:](self, "identifiersOfAccessoriesForHome:", v57);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "allObjects");
          v49 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager pendingRemoteSessions](self, "pendingRemoteSessions");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v48, v53);

          v16 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "UUIDString");
            v19 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            *(_QWORD *)&buf[4] = v18;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v57;
            *(_WORD *)&buf[22] = 2112;
            v99 = v19;
            LOWORD(v100) = 2048;
            *(_QWORD *)((char *)&v100 + 2) = objc_msgSend(v47, "count");
            _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Spinning up remote access for home, %@, for session %@, pinging total of %lu peers", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v16);
          v84[0] = 0;
          v84[1] = v84;
          v84[2] = 0x2020000000;
          v85 = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x3032000000;
          v99 = __Block_byref_object_copy__165094;
          *(_QWORD *)&v100 = __Block_byref_object_dispose__165095;
          *((_QWORD *)&v100 + 1) = 0;
          v82[0] = 0;
          v82[1] = v82;
          v82[2] = 0x3032000000;
          v82[3] = __Block_byref_object_copy__165094;
          v82[4] = __Block_byref_object_dispose__165095;
          v83 = 0;
          group = dispatch_group_create();
          v78 = 0u;
          v79 = 0u;
          v80 = 0u;
          v81 = 0u;
          obj = v47;
          v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v97, 16);
          if (v20)
          {
            v51 = 0;
            v56 = *(_QWORD *)v79;
            do
            {
              for (i = 0; i != v20; ++i)
              {
                if (*(_QWORD *)v79 != v56)
                  objc_enumerationMutation(obj);
                v22 = *(_QWORD *)(*((_QWORD *)&v78 + 1) + 8 * i);
                objc_msgSend(v57, "users");
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v23, "hmf_firstObjectWithValue:forKeyPath:", v22, CFSTR("userID"));
                v24 = (void *)objc_claimAutoreleasedReturnValue();

                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v25 = v24;
                  if (objc_msgSend(v25, "configurationState") == 2)
                  {
                    v90 = CFSTR("kRequestedCapabilitiesKey");
                    v88 = CFSTR("kHomedVersionKey");
                    v26 = (id)homedVersion;
                    v89 = v26;
                    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v89, &v88, 1);
                    v27 = (void *)objc_claimAutoreleasedReturnValue();
                    v91 = v27;
                    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v91, &v90, 1);
                    v28 = (void *)objc_claimAutoreleasedReturnValue();

                    v86[0] = CFSTR("kHomeUUID");
                    objc_msgSend(v57, "uuid");
                    v29 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v29, "UUIDString");
                    v30 = (void *)objc_claimAutoreleasedReturnValue();
                    v87[0] = v30;
                    v87[1] = v49;
                    v86[1] = CFSTR("kAccessoryIdentitiesKey");
                    v86[2] = CFSTR("kRemoteSessionIdentifierKey");
                    objc_msgSend(v53, "UUIDString");
                    v31 = (void *)objc_claimAutoreleasedReturnValue();
                    v87[2] = v31;
                    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v87, v86, 3);
                    v32 = (void *)objc_claimAutoreleasedReturnValue();

                    objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:messagePayload:", CFSTR("kAreYouAtHomeRequestKey"), v32);
                    v33 = (void *)objc_claimAutoreleasedReturnValue();
                    dispatch_group_enter(group);
                    objc_initWeak((id *)location, self);
                    -[HMDHomeManager workQueue](self, "workQueue");
                    v34 = (void *)objc_claimAutoreleasedReturnValue();
                    v68[0] = MEMORY[0x1E0C809B0];
                    v68[1] = 3221225472;
                    v68[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke;
                    v68[3] = &unk_1E89BDC90;
                    v68[4] = self;
                    v35 = v33;
                    v69 = v35;
                    v70 = v22;
                    objc_copyWeak(v77, (id *)location);
                    v71 = v57;
                    v74 = buf;
                    v75 = v82;
                    v36 = v53;
                    v77[1] = (id)a4;
                    v72 = v36;
                    v76 = v84;
                    v73 = group;
                    -[HMDHomeManager electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:](self, "electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:", v22, v22, v28, v34, v68);

                    objc_destroyWeak(v77);
                    objc_destroyWeak((id *)location);

                  }
                  else
                  {
                    v40 = (void *)MEMORY[0x1D17BA0A0]();
                    HMFGetOSLogHandle();
                    v41 = (id)objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v42 = (id)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v25, "displayName");
                      v43 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)location = 138543618;
                      *(_QWORD *)&location[4] = v42;
                      v93 = 2112;
                      v94 = v43;
                      _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Skipping resident %@ since it is disabled", location, 0x16u);

                    }
                    objc_autoreleasePoolPop(v40);
                    ++v51;
                  }

                }
                else
                {
                  v37 = (void *)MEMORY[0x1D17BA0A0]();
                  HMFGetOSLogHandle();
                  v38 = (id)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                  {
                    HMFGetLogIdentifier();
                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)location = 138543874;
                    *(_QWORD *)&location[4] = v39;
                    v93 = 2112;
                    v94 = v24;
                    v95 = 2112;
                    v96 = v22;
                    _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_ERROR, "%{public}@Found user %@ when looking for a resident user if userID %@", location, 0x20u);

                  }
                  objc_autoreleasePoolPop(v37);
                }

              }
              v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v97, 16);
            }
            while (v20);
          }
          else
          {
            v51 = 0;
          }

          -[HMDHomeManager workQueue](self, "workQueue");
          v44 = objc_claimAutoreleasedReturnValue();
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_1090;
          block[3] = &unk_1E89BDCB8;
          v59 = v53;
          v60 = self;
          v67 = v51;
          v61 = obj;
          v62 = v48;
          v64 = buf;
          v63 = v57;
          v65 = v84;
          v66 = a4;
          v45 = v53;
          dispatch_group_notify(group, v44, block);

          _Block_object_dispose(v82, 8);
          _Block_object_dispose(buf, 8);

          _Block_object_dispose(v84, 8);
        }

      }
    }
    v4 = v57;
  }

}

- (void)_electCompanionForRemoteAccess:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHomeManager associatedRemotePeers](self, "associatedRemotePeers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKeyedSubscript:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v7, "count"))
    {
      objc_msgSend(v7, "anyObject");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setCompanionDevice:forHome:", v9, v5);

    }
    else
    {
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138543618;
        v18 = v16;
        v19 = 2112;
        v20 = v4;
        _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@There are no remote peers for this home: %@", (uint8_t *)&v17, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      -[HMDHomeManager _teardownRemoteAccessForHomeThroughCompanion:](self, "_teardownRemoteAccessForHomeThroughCompanion:", v4);
    }

  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v13;
      v19 = 2112;
      v20 = v4;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Home with UUID not found: %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
  }

}

- (void)_handleRemoteSessionTornDown:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kHomeUUID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "residentDeviceManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isResidentAvailable");

    if ((v8 & 1) == 0)
    {
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543618;
        v24 = v11;
        v25 = 2112;
        v26 = v6;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Receive notification that remote access was torn down for home %@", (uint8_t *)&v23, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      if (v6)
      {
        v12 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "name");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "uuid");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "UUIDString");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 138543874;
          v24 = v14;
          v25 = 2112;
          v26 = v15;
          v27 = 2112;
          v28 = v17;
          _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Re-electing new resident device for home: %@ (%@)", (uint8_t *)&v23, 0x20u);

        }
        objc_autoreleasePoolPop(v12);
        objc_msgSend(v6, "uuid");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _teardownRemoteAccessForHome:](self, "_teardownRemoteAccessForHome:", v18);

        objc_msgSend(v6, "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _electRemoteAccessPeerForHome:](self, "_electRemoteAccessPeerForHome:", v19);

      }
    }

  }
  else
  {
    v20 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543362;
      v24 = v22;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Receive notification that remote access was torn down for an unknown home, re-checking if we need to spin up remote access for any of our homes", (uint8_t *)&v23, 0xCu);

    }
    objc_autoreleasePoolPop(v20);
    -[HMDHomeManager _checkForRemotePeers](self, "_checkForRemotePeers");
  }

}

- (void)updateAccountAvailabilityChanged:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id location;

  v4 = a3;
  objc_initWeak(&location, self);
  -[HMDHomeManager cloudAccount](self, "cloudAccount");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __51__HMDHomeManager_updateAccountAvailabilityChanged___block_invoke;
  v7[3] = &unk_1E89BDCE0;
  objc_copyWeak(&v9, &location);
  v6 = v4;
  v8 = v6;
  objc_msgSend(v5, "addAccountOperation:", v7);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);

}

- (void)_handleAccountAvailabilityChanged:(id)a3
{
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  id v11;
  id v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  int v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  _BOOL8 v27;
  NSObject *v28;
  void *v29;
  id v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *context;
  id v36;
  _QWORD v37[4];
  void (**v38)(_QWORD);
  id v39;
  id v40;
  _QWORD v41[4];
  id v42;
  id v43;
  HMDHomeManager *v44;
  id v45;
  void (**v46)(_QWORD);
  id v47;
  id location;
  id v49;
  id v50;
  id v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  id v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = (void (**)(_QWORD))a3;
  -[HMDHomeManager activeAccountIdentifier](self);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v53 = v8;
    v54 = 2112;
    v55 = v5;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received CKAccountChangedNotification and current identifier is %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = 0;
    v51 = 0;
    v49 = 0;
    v10 = objc_msgSend(v9, "getCurrentiCloudIdentifier:controllerPairingIdentifier:error:", &v51, &v50, &v49);
    v11 = v51;
    v12 = v50;
    v36 = v49;
    if (v10 && objc_msgSend(v11, "length") && objc_msgSend(v12, "length"))
    {
      if (objc_msgSend(v11, "length") && (objc_msgSend(v11, "isEqualToIgnoringCase:", v5) & 1) == 0)
      {
        objc_initWeak(&location, self);
        v22 = objc_msgSend(v11, "isEqualToString:", CFSTR("__HomeKit_NoAccount_Identifier__"));
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        if (v22)
        {
          HMFGetOSLogHandle();
          v24 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v53 = v25;
            _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Current controller is the sentinel controller, determining what to do with local data", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v23);
          -[HMDHomeManager setAccountActive:](self, "setAccountActive:", 1);
          -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = -[HMDHomeManager accountActive](self, "accountActive");
          v41[0] = MEMORY[0x1E0C809B0];
          v41[1] = 3221225472;
          v41[2] = __52__HMDHomeManager__handleAccountAvailabilityChanged___block_invoke;
          v41[3] = &unk_1E89BDD08;
          v46 = v4;
          objc_copyWeak(&v47, &location);
          v42 = v9;
          v43 = v12;
          v44 = self;
          v45 = v5;
          objc_msgSend(v26, "updateAccountStatusChanged:completionHandler:", v27, v41);

          objc_destroyWeak(&v47);
        }
        else
        {
          HMFGetOSLogHandle();
          v28 = (id)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v53 = v29;
            v54 = 2112;
            v55 = v5;
            _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Removing controller key for previous identifier %@ and deleting local home data", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v23);
          v40 = v36;
          objc_msgSend(v9, "removeControllerKeyPairForIdentifier:leaveTombstone:error:", v12, 0, &v40);
          v30 = v40;

          -[HMDHomeManager _eraseLocalHomeConfiguration](self, "_eraseLocalHomeConfiguration");
          +[HMDBackingStore resetBackingStore](HMDBackingStore, "resetBackingStore");
          v36 = (id)objc_claimAutoreleasedReturnValue();

          if (v36)
          {
            context = (void *)MEMORY[0x1D17BA0A0]();
            v31 = self;
            HMFGetOSLogHandle();
            v32 = (id)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v53 = v33;
              v54 = 2112;
              v55 = v36;
              _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_ERROR, "%{public}@resetBackingStore completed with error: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(context);
          }
          objc_initWeak((id *)buf, self);
          -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v37[0] = MEMORY[0x1E0C809B0];
          v37[1] = 3221225472;
          v37[2] = __52__HMDHomeManager__handleAccountAvailabilityChanged___block_invoke_1092;
          v37[3] = &unk_1E89BE698;
          objc_copyWeak(&v39, (id *)buf);
          v38 = v4;
          objc_msgSend(v34, "resetCloudCache:", v37);

          objc_destroyWeak(&v39);
          objc_destroyWeak((id *)buf);
        }
        objc_destroyWeak(&location);
      }
      else
      {
        v13 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v53 = v15;
          _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@User has re-signed into previously signed account, determining account status from CK", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v13);
        -[HMDHomeManager _updateCloudDataSyncWithAccountState:completion:](self, "_updateCloudDataSyncWithAccountState:completion:", 1, v4);
      }
    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager _updateCloudDataSyncWithAccountState:completion:](self, "_updateCloudDataSyncWithAccountState:completion:", 1, v4));
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v53 = v18;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@We don't have any controller keys for current iCloud account.", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v16);
    }

  }
  else
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v53 = v21;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Dropping CKAccountChangedNotification since the current identifier is invalid", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
    if (v4)
      v4[2](v4);
  }

}

- (void)eraseLocalHomeData
{
  void *v3;
  NSObject *v4;
  _QWORD block[5];

  -[HMDHomeManager syncManager](self, "syncManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pause");

  -[HMDHomeManager workQueue](self, "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __36__HMDHomeManager_eraseLocalHomeData__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_eraseLocalHomeData
{
  void *v3;
  void *v4;
  HMDHomeManager *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  uint8_t buf[4];
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager _eraseLocalHomeConfiguration](self, "_eraseLocalHomeConfiguration");
  +[HMDBackingStore resetBackingStore](HMDBackingStore, "resetBackingStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = self;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v12 = v7;
      v13 = 2112;
      v14 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@resetBackingStore completed with error: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
  }
  objc_initWeak((id *)buf, self);
  -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __37__HMDHomeManager__eraseLocalHomeData__block_invoke;
  v9[3] = &unk_1E89C0678;
  objc_copyWeak(&v10, (id *)buf);
  objc_msgSend(v8, "resetCloudCache:", v9);

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);

}

- (void)idsServerBagDidUpdate:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543362;
    v11 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@idsServerBagDidUpdate delegate called", (uint8_t *)&v10, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager updateCurrentUserEligibleForOwnerToAutoMigration](v6, "updateCurrentUserEligibleForOwnerToAutoMigration");
  -[HMDHomeManager uuid](v6, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](v6, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("IDS server bag updated"), v9, 1);

}

- (void)_handleQueryMetadata:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "stringForKey:", CFSTR("kMetadataPlistPathKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    objc_msgSend(v3, "numberForKey:", CFSTR("kMetadataDictionaryTypeKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "unsignedIntegerValue");
    if (v9 == 1)
    {
      +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
      v10 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v9)
      {
        v5 = 0;
        goto LABEL_10;
      }
      +[HMDHAPMetadata getBuiltinInstance](HMDHAPMetadata, "getBuiltinInstance");
      v10 = objc_claimAutoreleasedReturnValue();
    }
    v5 = (void *)v10;
LABEL_10:

    goto LABEL_11;
  }
  v14 = 0;
  +[HMDHAPMetadata metadataWithPath:error:](HMDHAPMetadata, "metadataWithPath:error:", v4, &v14);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v14;
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v3, "respondWithError:", v6);
    goto LABEL_15;
  }
LABEL_11:
  objc_msgSend(v5, "rawPlist");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)v11;
  if (v11)
  {
    v15 = CFSTR("kMetadataDictionaryKey");
    v16[0] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithPayload:", v13);

    v7 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 1001, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithError:", v7);
  }

LABEL_15:
}

- (void)_handleSetMetadata:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v4 = a3;
  objc_msgSend(v4, "stringForKey:", CFSTR("kMetadataPlistPathKey"));
  v5 = objc_claimAutoreleasedReturnValue();
  v10 = (id)v5;
  if (v5)
  {
    v6 = (void *)MEMORY[0x1E0C99E98];
    objc_msgSend(CFSTR("file://"), "stringByAppendingString:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "URLWithString:", v7);
    v8 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager handleMetadataDictionary:message:](self, "handleMetadataDictionary:message:", v9, v4);

    v4 = (id)v8;
  }
  else
  {
    +[HMDHAPMetadata updateLocalMetadataWithBuiltinMetadata](HMDHAPMetadata, "updateLocalMetadataWithBuiltinMetadata");
    objc_msgSend(v4, "respondWithPayload:", 0);
  }

}

- (void)_handleMetadataSync:(id)a3
{
  id v4;
  void *v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  void (**v13)(_QWORD, _QWORD, _QWORD);
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  HMDHomeManager *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  id v28;
  const __CFString *v29;
  uint64_t v30;
  const __CFString *v31;
  uint64_t v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(v4, "remoteRestriction") == 4)
  {
    objc_msgSend(v4, "dataForKey:", CFSTR("kHAPMetadataDataKey"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hmd_uncompressedData");
    v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    v7 = (void *)MEMORY[0x1E0CB3710];
    +[HMDHAPMetadataModel allowedTypes](HMDHAPMetadataModel, "allowedTypes");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 0;
    objc_msgSend(v7, "unarchivedObjectOfClasses:fromData:error:", v8, v6, &v28);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v28;

    if (v6 && v9)
    {
      -[HMDHomeManager handleMetadataDictionary:message:](self, "handleMetadataDictionary:message:", v9, 0);
      objc_msgSend(v4, "responseHandler");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v11)
      {
LABEL_19:

        goto LABEL_20;
      }
      objc_msgSend(v4, "responseHandler");
      v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v29 = CFSTR("kDataSyncResponseAckKey");
      v30 = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
      v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v12[2](v12, 0, v13);
    }
    else
    {
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      v20 = self;
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v34 = v22;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Failed to receive metadata update", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v19);
      if (v6)
      {
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        v24 = v20;
        HMFGetOSLogHandle();
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v34 = v26;
          v35 = 2112;
          v36 = v10;
          _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@Failed to unarchive hap metadata model from metadata data: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v23);
      }
      objc_msgSend(v4, "responseHandler");
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v27)
        goto LABEL_19;
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v13[2](v13, v12, 0);
    }

    goto LABEL_19;
  }
  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v34 = v17;
    v35 = 2112;
    v36 = v4;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Dropping metadata sync: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  objc_msgSend(v4, "responseHandler");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend(v4, "responseHandler");
    v6 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v31 = CFSTR("kDataSyncResponseAckKey");
    v32 = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, id))v6)[2](v6, 0, v10);
LABEL_20:

  }
}

- (void)_handleHomeManagerSyncWalletKeysPassSerialNumbersMessage:(id)a3
{
  __CFString *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  const __CFString *v22;
  uint64_t v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const __CFString *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (__CFString *)a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  objc_msgSend(MEMORY[0x1E0D28580], "internalOnlyInitializer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v25 = v10;
    v26 = 2112;
    v27 = v11;
    v28 = 2112;
    v29 = v4;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@[NewFlow: %@] Handling message to sync wallet keys pass serial numbers: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  -[__CFString arrayForKey:](v4, "arrayForKey:", CFSTR("HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "na_map:", &__block_literal_global_1100);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager removeHomeWalletKeysExcludingSerialNumbers:flow:](v8, "removeHomeWalletKeysExcludingSerialNumbers:flow:", v14, v6);
    v22 = CFSTR("kDataSyncResponseAckKey");
    v23 = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString respondWithPayload:](v4, "respondWithPayload:", v15);

  }
  else
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = v8;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "UUID");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[__CFString messagePayload](v4, "messagePayload");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544130;
      v25 = v19;
      v26 = 2112;
      v27 = v20;
      v28 = 2112;
      v29 = CFSTR("HMDHomeMangerMessageKeyHomeWalletKeysPassSerialNumbers");
      v30 = 2112;
      v31 = v21;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@[Flow: %@] Payload of message to sync wallet keys pass serial numbers is missing key %@: %@", buf, 0x2Au);

    }
    objc_autoreleasePoolPop(v16);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString respondWithError:](v4, "respondWithError:", v14);
  }

}

- (void)evaluateToPushMetadataWhenHomeKitInUse
{
  HMDBackingStoreCacheFetchModelObjects *v3;
  void *v4;
  void *v5;
  HMDBackingStoreCacheFetchModelObjects *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, void *, void *);
  void *v11;
  id v12;
  id location;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  objc_initWeak(&location, self);
  v3 = [HMDBackingStoreCacheFetchModelObjects alloc];
  +[HMDHAPMetadataModel metadataModelObjectUUID](HMDHAPMetadataModel, "metadataModelObjectUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = MEMORY[0x1E0C809B0];
  v9 = 3221225472;
  v10 = __56__HMDHomeManager_evaluateToPushMetadataWhenHomeKitInUse__block_invoke;
  v11 = &unk_1E89BD898;
  objc_copyWeak(&v12, &location);
  v6 = -[HMDBackingStoreCacheFetchModelObjects initWithUUIDs:fetchResult:](v3, "initWithUUIDs:fetchResult:", v5, &v8);

  -[HMDHomeManager backingStore](self, "backingStore", v8, v9, v10, v11);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "submit:", v6);

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

- (void)handleMetadataDictionary:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  +[HMDHAPMetadataModel modelWithDictionary:](HMDHAPMetadataModel, "modelWithDictionary:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHomeManager backingStore](self, "backingStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultMetadataCloudOptions](HMDBackingStoreTransactionOptions, "defaultMetadataCloudOptions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "transaction:options:", CFSTR("MetadataUpdate"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "add:withMessage:", v8, v7);
    objc_msgSend(v11, "run");

  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v14;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate metadata model object from dictionary %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v7, "responseHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      objc_msgSend(v7, "responseHandler");
      v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v16)[2](v16, v17, 0);

    }
  }

}

- (void)_notifyMetadata:(id)a3 limitToSPIClients:(BOOL)a4 message:(id)a5 invokeResponseHandler:(BOOL)a6
{
  _BOOL8 v7;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  _QWORD v25[4];
  id v26;
  BOOL v27;
  _QWORD v28[3];
  _QWORD v29[4];

  v7 = a4;
  v29[3] = *MEMORY[0x1E0C80C00];
  v10 = a5;
  v28[0] = CFSTR("kMetadataInfoVersionKey");
  v11 = a3;
  objc_msgSend(v11, "version");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v29[0] = v12;
  v28[1] = CFSTR("kMetadataInfoSchemaVersionKey");
  objc_msgSend(v11, "schemaVersion");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v29[1] = v13;
  v28[2] = CFSTR("kHAPMetadataDataKey");
  objc_msgSend(v11, "xpcData:", v7);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v29[2] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v29, v28, 3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v16 = (void *)MEMORY[0x1E0D285D0];
    objc_msgSend(v10, "identifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "entitledMessageWithName:identifier:messagePayload:", CFSTR("kMetadataChangedNotificationKey"), v17, v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v19 = (void *)MEMORY[0x1E0D285F8];
    -[HMDHomeManager messageDestination](self, "messageDestination");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "messageWithName:destination:payload:", CFSTR("kMetadataChangedNotificationKey"), v20, v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "identifier");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setIdentifier:", v21);

    objc_msgSend(v18, "setRemote:", objc_msgSend(v10, "isRemote"));
  }
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](self, "uuid");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __82__HMDHomeManager__notifyMetadata_limitToSPIClients_message_invokeResponseHandler___block_invoke;
  v25[3] = &unk_1E89C2758;
  v27 = a6;
  v26 = v10;
  v24 = v10;
  objc_msgSend(v22, "sendMessage:target:andInvokeCompletionHandler:", v18, v23, v25);

}

- (void)processMetadataModel:(id)a3 message:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void (**v36)(_QWORD, _QWORD, _QWORD);
  void *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void (**v43)(_QWORD, _QWORD, _QWORD);
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  NSObject *v48;
  void *v49;
  _BOOL4 v50;
  const char *v51;
  id v53;
  id v54;
  uint8_t buf[4];
  void *v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v53 = a4;
  objc_msgSend(v53, "transactionResult");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions stringForHMDBackingStoreTransactionSource:](HMDBackingStoreTransactionActions, "stringForHMDBackingStoreTransactionSource:", objc_msgSend(v6, "source"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v56 = v9;
    v57 = 2112;
    v58 = (unint64_t)v10;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Receiving metadata model from %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(v5, "metadataVersion");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "unsignedIntegerValue");

  objc_msgSend(v5, "schemaVersion");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "unsignedIntegerValue");

  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "version");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "unsignedIntegerValue");

  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "schemaVersion");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "unsignedIntegerValue");

  v21 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v56 = v23;
    v57 = 2048;
    v58 = v12;
    v59 = 2048;
    v60 = v14;
    v61 = 2048;
    v62 = v17;
    v63 = 2048;
    v64 = v20;
    _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@The new metadata has version %tu, schema version %tu, current version %tu, schema %tu", buf, 0x34u);

  }
  objc_autoreleasePoolPop(v21);
  if (v20 != v14)
  {
    v37 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v38 = objc_claimAutoreleasedReturnValue();
    v24 = v6;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v56 = v39;
      _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_ERROR, "%{public}@Schema is compatible, not processing this metadata.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v37);
    v31 = v53;
    goto LABEL_34;
  }
  v24 = v6;
  if (v12 <= v17)
  {
    if (v12 >= v17)
    {
      v31 = v53;
      if (+[HMDHAPMetadata shouldUploadToCloudAfterHomedReady](HMDHAPMetadata, "shouldUploadToCloudAfterHomedReady")|| v12 == v17)
      {
        v47 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v48 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v50 = +[HMDHAPMetadata shouldUploadToCloudAfterHomedReady](HMDHAPMetadata, "shouldUploadToCloudAfterHomedReady");
          v51 = "NO";
          if (v50)
            v51 = "YES";
          *(_DWORD *)buf = 138543618;
          v56 = v49;
          v57 = 2080;
          v58 = (unint64_t)v51;
          _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_INFO, "%{public}@Metadata should be uploaded to cloud after homed is ready: %s", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v47);
        objc_msgSend(v6, "markChanged");
        goto LABEL_33;
      }
      objc_msgSend(v53, "responseHandler");
      v45 = (void *)objc_claimAutoreleasedReturnValue();

      if (v45)
      {
        objc_msgSend(v53, "responseHandler");
        v36 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v36)[2](v36, v46, 0);

        goto LABEL_27;
      }
    }
    else
    {
      v31 = v53;
      if (objc_msgSend(v6, "source") == 2)
      {
        +[HMDPersistentStore loadPlainMetadataDictionary](HMDPersistentStore, "loadPlainMetadataDictionary");
        v36 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager handleMetadataDictionary:message:](self, "handleMetadataDictionary:message:", v36, 0);
LABEL_27:

      }
    }
LABEL_33:
    +[HMDHAPMetadata resetShouldUploadToCloudAfterHomedReady](HMDHAPMetadata, "resetShouldUploadToCloudAfterHomedReady");
    goto LABEL_34;
  }
  objc_msgSend(v5, "rawPlist");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = 0;
  +[HMDHAPMetadata metadataWithDictionary:error:](HMDHAPMetadata, "metadataWithDictionary:error:", v25, &v54);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v54;

  v28 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  v30 = v29;
  if (!v27 && v26)
  {
    v31 = v53;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "version");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "schemaVersion");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v56 = v32;
      v57 = 2112;
      v58 = (unint64_t)v33;
      v59 = 2112;
      v60 = (uint64_t)v34;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Updating current metadata to the new metadata %@/%@.", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(v5, "metadataDictionary");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDHAPMetadata updateLocalMetadataWithMetadata:](HMDHAPMetadata, "updateLocalMetadataWithMetadata:", v35);

    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v36 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "markSaveToAssistant");
    objc_msgSend(v6, "markChanged");
    -[HMDHomeManager _pushMetadataChangesToUsers](self, "_pushMetadataChangesToUsers");
    -[HMDHomeManager pushMetadataToAllWatches](self, "pushMetadataToAllWatches");
    -[HMDHomeManager _notifyMetadata:limitToSPIClients:message:invokeResponseHandler:](self, "_notifyMetadata:limitToSPIClients:message:invokeResponseHandler:", v36, 0, v53, 1);
    -[HMDHomeManager _notifyMetadata:limitToSPIClients:message:invokeResponseHandler:](self, "_notifyMetadata:limitToSPIClients:message:invokeResponseHandler:", v36, 1, v53, 0);
    goto LABEL_27;
  }
  v31 = v53;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "rawPlist");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v56 = v40;
    v57 = 2112;
    v58 = (unint64_t)v41;
    _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to init metadata with dictionary %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v28);
  objc_msgSend(v53, "responseHandler");
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  if (v42)
  {
    objc_msgSend(v53, "responseHandler");
    v43 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v43)[2](v43, v44, 0);

  }
LABEL_34:

}

- (void)handleContactStoreChanged:(id)a3
{
  NSObject *v4;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __44__HMDHomeManager_handleContactStoreChanged___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v4, block);

}

- (void)_handleContactStoreChanged
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t v27[128];
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  int v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copy");

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v24 != v8)
          objc_enumerationMutation(v4);
        v7 |= objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "refreshDisplayName");
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
    }
    while (v6);
  }
  else
  {
    LOBYTE(v7) = 0;
  }

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v29 = v13;
    v30 = 1024;
    v31 = v7 & 1;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Handling contact store changed with saveToStore: %{BOOL}d", buf, 0x12u);

  }
  objc_autoreleasePoolPop(v10);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  -[HMDHomeManager homes](v11, "homes", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v20;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v20 != v17)
          objc_enumerationMutation(v14);
        objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * j), "refreshUserDisplayNames");
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    }
    while (v16);
  }

  if ((v7 & 1) != 0)
    -[HMDHomeManager saveWithReason:information:saveOptions:](v11, "saveWithReason:information:saveOptions:", CFSTR("userDisplayNameUpdated"), 0, 0);
}

- (void)_handleQueryVersionInformation:(id)a3
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  const __CFString *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0CB37A0];
  v4 = a3;
  objc_msgSend(v3, "string");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "infoDictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", *MEMORY[0x1E0C9AE90]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "appendFormat:", CFSTR("homed: %@\n"), v8);

  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHAPMetadata getBuiltinInstance](HMDHAPMetadata, "getBuiltinInstance");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "schemaVersion");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "version");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "schemaVersion");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "version");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "appendFormat:", CFSTR("Metadata - Current: %@/%@   Builtin: %@/%@\n"), v11, v12, v13, v14);

  v17 = CFSTR("kHomeKitVersionStringKey");
  v18[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "responseHandler");
  v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  ((void (**)(_QWORD, _QWORD, void *))v16)[2](v16, 0, v15);
}

- (id)_getRequestedState:(id)a3 activity:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  const __CFString *v80;
  void *v81;
  const __CFString *v82;
  void *v83;
  const __CFString *v84;
  void *v85;
  const __CFString *v86;
  void *v87;
  const __CFString *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t i;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  const __CFString *v113;
  void *v114;
  void *v115;
  const __CFString *v116;
  void *v117;
  const __CFString *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  const __CFString *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  char v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *j;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t k;
  void *v156;
  char v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  void *v172;
  void *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t m;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t n;
  void *v200;
  void *v201;
  char v202;
  void *v203;
  void *v204;
  char v205;
  void *v206;
  void *v207;
  char v208;
  void *v209;
  void *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  uint64_t ii;
  uint64_t v217;
  HMDHomeManager *v218;
  void *v219;
  void *v220;
  void *v221;
  char v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t jj;
  void *v232;
  char v233;
  void *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t kk;
  void *v240;
  void *v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t mm;
  void *v247;
  void *v248;
  void *v249;
  uint64_t v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  uint64_t v255;
  void *v256;
  void *v257;
  uint64_t v258;
  void *v259;
  void *v260;
  uint64_t v261;
  void *v262;
  void *v263;
  void *v264;
  NSMutableArray *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t nn;
  void *v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t i1;
  void *v276;
  id v277;
  void *v279;
  char v280;
  void *v281;
  id v282;
  void *v283;
  id v285;
  id v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  id v290;
  uint64_t v291;
  char v292;
  uint64_t v293;
  __CFString *v294;
  uint64_t v295;
  const __CFString *v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  char v303;
  uint64_t v304;
  void *v305;
  id obj;
  id obja;
  id objb;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  _BYTE v361[128];
  _BYTE v362[128];
  _BYTE v363[128];
  _BYTE v364[128];
  _BYTE v365[128];
  _BYTE v366[128];
  _BYTE v367[128];
  _BYTE v368[128];
  _BYTE v369[128];
  _BYTE v370[128];
  _BYTE v371[128];
  _BYTE v372[128];
  _BYTE v373[128];
  uint64_t v374;

  v374 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v282 = a4;
  v281 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28540]), "initWithName:parent:", CFSTR("getRequestedState"), v282);
  v285 = (id)objc_opt_new();
  v283 = v5;
  if (objc_msgSend(v5, "count") && (objc_msgSend(v5, "containsObject:", *MEMORY[0x1E0CBAAD0]) & 1) == 0)
  {
    if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateConfigDescriptionKey")))
      goto LABEL_44;
    v303 = 0;
  }
  else
  {
    v303 = 1;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumHomes"), maximumHomes);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v7);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumAccessoriesPerHome"), maximumAccessoriesPerHome);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v8);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumRoomsPerHome"), maximumRoomsPerHome);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v9);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumZonesPerHome"), maximumZonesPerHome);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v10);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumTriggersPerHome"), maximumTriggersPerHome);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v11);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumActionSetsPerHome"), maximumActionSetsPerHome);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v12);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumServiceGroupsPerHome"), maximumServiceGroupsPerHome);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v13);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumUsersPerHome"), maximumUsersPerHome);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v14);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumRoomsPerZone"), maximumRoomsPerZone);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v15);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumActionsPerActionSet"), maximumActionsPerActionSet);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v16);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumServicesPerServiceGroup"), maximumServicesPerServiceGroup);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v17);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumAccessoriesPerBridge"), maximumAccessoriesPerBridge);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v18);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumServicesPerAccessory"), maximumServicesPerAccessory);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v19);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumCharacteristicsPerService"), maximumCharacteristicsPerService);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v20);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maximumDataSyncFragmentSize"), maximumDataSyncFragmentSize);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v21);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %f"), CFSTR("minimumTimerRecurrence"), minimumTimerRecurrence);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v22);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("cloudPushBatchLimit"), cloudPushBatchLimit);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v23);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("maxCloudOperationRetries"), maxCloudOperationRetries);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v24);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("cloudUploadTimerInterval"), cloudUploadTimerInterval);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v25);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("cloudZoneUploadTimerInitialInterval"), cloudZoneUploadTimerInitialInterval);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v26);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("cloudZoneUploadTimerInterval"), cloudZoneUploadTimerInterval);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v27);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("aggressiveControllerKeyPollInterval"), aggressiveControllerKeyPollInterval);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v28);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("watchdogControllerKeyPollTimeout"), watchdogControllerKeyPollTimeout);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v29);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("controllerKeyPollInterval"), controllerKeyPollInterval);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v30);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("keychainPopupTimerInterval"), keychainPopupTimerInterval);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v31);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("checkRemoteAccessTimeout"), checkRemoteAccessTimeout);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v32);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsCommitTimeout"), hrsCommitTimeoutNanoseconds);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v33);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsIdleClientTimeout"), hrsIdleClientTimeoutNanoseconds);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v34);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsIdleServertTimeout"), hrsIdleServertTimeoutNanoseconds);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v35);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsSendInternalRequestTimeout"), hrsSendInternalRequestTimeoutNanoseconds);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v36);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsSendInternalRequestToWatchTimeout"), hrsSendInternalRequestToWatchTimeoutNanoseconds);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v37);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("hrsSendUserRequestTimeout"), hrsSendUserRequestTimeoutNanoseconds);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v38);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("maximumSecureRemoteStreams"), maximumSecureRemoteStreams);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v39);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %f"), CFSTR("secureSessionMessageTimeout"), secureSessionMessageTimeout);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v40);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("DeviceConnectionKeepAliveTimerPeriod"), deviceConnectionKeepAliveTimerPeriod);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v41);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("DeviceConnectionKeepAliveResponseTimeoutPeriod"), deviceConnectionKeepAliveResponseTimeoutPeriod);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v42);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("SupportedResolutions"), supportedResolutions);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v43);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("SupportedVideoCodecs"), supportedVideoCodecs);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v44);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("SupportedAudioCodecs"), supportedAudioCodecs);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v45);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("SupportedSRTPAuths"), supportedSRTPAuths);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v46);

  v47 = (void *)MEMORY[0x1E0CB3940];
  HMFBooleanToString();
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "stringWithFormat:", CFSTR("%@: %@"), CFSTR("CameraStreamNetworkAdaptation"), v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v49);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("RTPPtime"), rtpPtime);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v50);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("SnapshotResolution"), snapshotResolution);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v51);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("MaximumSimultaneousRemoteStreams"), maximumSimultaneousRemoteStreams);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v52);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %g"), CFSTR("SnapshotCacheValidPeriod"), snapshotCacheValidPeriod);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v53);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("BulletinSecureTriggerTimeoutInSeconds"), bulletinSecureTriggerTimeoutInSeconds);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v54);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("BroadcastKeyRefreshTimeInSeconds"), broadcastKeyRefreshTimeInSeconds);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v55);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("BluetoothGSNMaxValue"), bluetoothGSNMaxValue);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v56);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("btleReachabilityTimer"), btleReachabilityTimerNanoseconds);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v57);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("btleReachabilityLeeway"), btleReachabilityLeewayNanoseconds);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v58);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("btleReachabilityProbeReduceFactor"), btleReachabilityProbeReduceFactor);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v59);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("remotePendingResponseTimer"), remotePendingResponseTimerNanoseconds);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v60);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("remotePendingResponseLeeway"), remotePendingResponseLeewayNanoseconds);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v61);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lu"), CFSTR("remotePendingResponseDecayScale"), remotePendingResponseDecayScale);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v62);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("remoteDeviceMonitorHealthTimerTimeInterval"), remoteDeviceMonitorHealthTimerTimeInterval);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v63);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("remoteDeviceMonitorRetryTimerMinimumTimeInterval"), remoteDeviceMonitorRetryTimerMinimumTimeInterval);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v64);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("remoteDeviceMonitorRetryTimerMaximumTimeInterval"), remoteDeviceMonitorRetryTimerMaximumTimeInterval);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v65);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("remoteDeviceMonitorRetryTimerFactor"), remoteDeviceMonitorRetryTimerFactor);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v66);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("accessoryConnectivityWaitPeriod"), accessoryConnectivityWaitPeriod);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v67);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("cloudDataSyncInProgressWaitPeriod"), cloudDataSyncInProgressWaitPeriod);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v68);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("controllerKeyNotLandingWaitPeriod"), controllerKeyNotLandingWaitPeriod);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v69);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %llu"), CFSTR("controllerKeyNotLandingShortCircuitWaitPeriod"), controllerKeyNotLandingShortCircuitWaitPeriod);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v70);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("assistantClientReadWriteTimeout"), assistantClientReadWriteTimeoutSeconds);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v71);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("assistantClientActionSetTimeout"), assistantClientActionSetTimeoutSeconds);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v72);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("disableNotificationsDeferPeriod"), disableNotificationsDeferPeriod);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v73);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("coalesceNotificationsPeriod"), coalesceNotificationsPeriod);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v74);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("delayNotificationsPeriod"), delayNotificationsPeriod);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v75);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("pendingResponseTickPeriod"), pendingResponseTickPeriod);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v76);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("pendingResponseMaxPeriod"), pendingResponseMaxPeriod);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v77);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("kRemoteReachabilitNotificationsDeferPeriod"), remoteReachabilityNotificationsDeferPeriod);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v78);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("kRemoteReachabilityDeregistrationDeferPeriod"), remoteReachabilityDeregistrationDeferPeriod);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v79);

  if (skipAuthPromptDialog)
    v80 = CFSTR("YES");
  else
    v80 = CFSTR("NO");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("allowSkipMFIPrompt"), v80);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v81);

  if (showAuthDialog)
    v82 = CFSTR("YES");
  else
    v82 = CFSTR("NO");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("showAuthDialog"), v82);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v83);

  if (disableCloudDataSync)
    v84 = CFSTR("YES");
  else
    v84 = CFSTR("NO");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("DisableCloudDataSync"), v84);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v85);

  if (disableLegacyCloudDataSync)
    v86 = CFSTR("YES");
  else
    v86 = CFSTR("NO");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("DisableLegacyCloudDataSync"), v86);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v87);

  if (enableWakeNotifications)
    v88 = CFSTR("YES");
  else
    v88 = CFSTR("NO");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("EnableWakeNotifications"), v88);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v89);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("pairingInterruptionGracePeriod"), pairingInterruptionGracePeriod);
  v90 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v90);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("pairingReconfirmWaitPeriod"), pairingReconfirmWaitPeriod);
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v91);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("vendorInfoFetchPeriod"), vendorInfoFetchPeriod);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v92);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("attestationInfoFetchPeriod"), attestationInfoFetchPeriod);
  v93 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v93);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("keyTransferBroadcastMaximumDelay"), keyTransferBroadcastMaximumDelay);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v94);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("vendorInfoDatabaseServerURLOverride"), vendorInfoDatabaseServerURLOverride);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v95);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("appleConfigurationServer"), appleConfigurationServer);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v96);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("homeKitConfigurationPath"), homeKitConfigurationPath);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v97);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("mediaBrowserProcessingInterval"), mediaBrowserProcessingInterval);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v98);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("disableReprivsionBrowsingPeriodInMinutes"), disableReprivsionBrowsingPeriodInMinutes);
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v99);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %lf"), CFSTR("authServerRetryTimeIntervalInSeconds"), authServerRetryTimeIntervalInSeconds);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v100);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("authServerRetryCount"), authServerRetryCount);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  v102 = v6;
  objc_msgSend(v6, "addObject:", v101);

  v360 = 0u;
  v358 = 0u;
  v359 = 0u;
  v357 = 0u;
  obj = (id)preferredPrimaryForHome;
  v103 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v357, v373, 16);
  if (v103)
  {
    v104 = v103;
    v105 = *(_QWORD *)v358;
    do
    {
      for (i = 0; i != v104; ++i)
      {
        if (*(_QWORD *)v358 != v105)
          objc_enumerationMutation(obj);
        v107 = *(void **)(*((_QWORD *)&v357 + 1) + 8 * i);
        v108 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v107, "UUIDString");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)preferredPrimaryForHome, "objectForKey:", v107);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v110, "UUIDString");
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v108, "stringWithFormat:", CFSTR("%@: %@: %@"), CFSTR("preferredPrimaryForHome"), v109, v111);
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v102, "addObject:", v112);

      }
      v104 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v357, v373, 16);
    }
    while (v104);
  }

  if (disableWACBrowser)
    v113 = CFSTR("YES");
  else
    v113 = CFSTR("NO");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("disableWACBrowser"), v113);
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  v115 = v102;
  objc_msgSend(v102, "addObject:", v114);

  if (delayBatchedReadWrite)
    v116 = CFSTR("YES");
  else
    v116 = CFSTR("NO");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("delayBatchedReadWrite"), v116);
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "addObject:", v117);

  if (enableNetworkLogging)
    v118 = CFSTR("YES");
  else
    v118 = CFSTR("NO");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("enableNetworkLogging"), v118);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "addObject:", v119);

  v120 = (void *)MEMORY[0x1E0CB3940];
  CKContainerEnvironmentString();
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v120, "stringWithFormat:", CFSTR("%@: %@"), CFSTR("cloudKitEnvironment"), v121);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "addObject:", v122);

  if (allowAnonymousServerConnections)
    v123 = CFSTR("YES");
  else
    v123 = CFSTR("NO");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), CFSTR("allowAnonymousServerConnections"), v123);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v115, "addObject:", v124);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("presenceFeedRefreshInMinutes"), presenceFeedRefreshInMinutes);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v115, "addObject:", v125);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("presenceMonitorAuditInMinutes"), presenceMonitorAuditInMinutes);
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v115, "addObject:", v126);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("presenceMonitorRefreshGracePeriodInMinutes"), presenceMonitorRefreshGracePeriodInMinutes);
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v115, "addObject:", v127);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("startCharacteristicsMonitorWaitPeriod"), startCharacteristicsMonitorWaitPeriod);
  v128 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v115, "addObject:", v128);

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %tu"), CFSTR("requestHomeDataSyncRetryPeriodInMinutes"), requestHomeDataSyncRetryPeriodInMinutes);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v115, "addObject:", v129);

  v130 = (void *)objc_msgSend(v115, "copy");
  if (objc_msgSend(v130, "count"))
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v130, CFSTR("kDumpStateConfigDescriptionKey"));

  v5 = v283;
  if ((v303 & 1) != 0)
  {
    v131 = 1;
    goto LABEL_46;
  }
LABEL_44:
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateUnassociatedAccyDescriptionKey")))
    goto LABEL_50;
  v131 = 0;
LABEL_46:
  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v132 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v132, "dumpUnassociatedAccessories");
  v133 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v133, "count"))
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v133, CFSTR("kDumpStateUnassociatedAccyDescriptionKey"));

  if ((v131 & 1) != 0)
  {
    v292 = 1;
    goto LABEL_52;
  }
LABEL_50:
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStatePairedAccyDescriptionKey")))
    goto LABEL_72;
  v292 = 0;
LABEL_52:
  v134 = (void *)MEMORY[0x1E0C99DE8];
  -[HMDHomeManager homes](self, "homes");
  v135 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v134, "arrayWithCapacity:", objc_msgSend(v135, "count"));
  v136 = (void *)objc_claimAutoreleasedReturnValue();

  v355 = 0u;
  v356 = 0u;
  v353 = 0u;
  v354 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v294 = (__CFString *)objc_claimAutoreleasedReturnValue();
  obja = (id)-[__CFString countByEnumeratingWithState:objects:count:](v294, "countByEnumeratingWithState:objects:count:", &v353, v372, 16);
  if (obja)
  {
    v304 = *(_QWORD *)v354;
    v301 = *MEMORY[0x1E0D27EC8];
    v299 = *MEMORY[0x1E0D27F80];
    v297 = *MEMORY[0x1E0D27F48];
    v295 = *MEMORY[0x1E0D27E38];
    do
    {
      for (j = 0; j != obja; j = (char *)j + 1)
      {
        v138 = v136;
        if (*(_QWORD *)v354 != v304)
          objc_enumerationMutation(v294);
        v139 = *(void **)(*((_QWORD *)&v353 + 1) + 8 * (_QWORD)j);
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 3);
        v140 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v139, "accessories");
        v141 = (void *)objc_claimAutoreleasedReturnValue();
        v142 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v139, "name");
        v143 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v142, "stringWithFormat:", CFSTR("Home: %@"), v143);
        v144 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v140, "setObject:forKeyedSubscript:", v144, v301);

        objc_msgSend(v139, "primaryResident");
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v145, "dumpState");
        v146 = (void *)objc_claimAutoreleasedReturnValue();

        v147 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v146, "objectForKeyedSubscript:", v299);
        v148 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v147, "stringWithFormat:", CFSTR("Resident: %@"), v148);
        v149 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v140, "setObject:forKeyedSubscript:", v149, v297);

        objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v141, "count"));
        v150 = (void *)objc_claimAutoreleasedReturnValue();
        v349 = 0u;
        v350 = 0u;
        v351 = 0u;
        v352 = 0u;
        v151 = v141;
        v152 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v349, v371, 16);
        if (v152)
        {
          v153 = v152;
          v154 = *(_QWORD *)v350;
          do
          {
            for (k = 0; k != v153; ++k)
            {
              if (*(_QWORD *)v350 != v154)
                objc_enumerationMutation(v151);
              objc_msgSend(*(id *)(*((_QWORD *)&v349 + 1) + 8 * k), "dumpSimpleState");
              v156 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v150, "addObject:", v156);

            }
            v153 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v349, v371, 16);
          }
          while (v153);
        }

        if (objc_msgSend(v150, "count"))
          objc_msgSend(v140, "setObject:forKeyedSubscript:", v150, v295);
        v136 = v138;
        objc_msgSend(v138, "addObject:", v140);

      }
      obja = (id)-[__CFString countByEnumeratingWithState:objects:count:](v294, "countByEnumeratingWithState:objects:count:", &v353, v372, 16);
    }
    while (obja);
  }

  v5 = v283;
  if (objc_msgSend(v136, "count"))
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v136, CFSTR("kDumpStatePairedAccyDescriptionKey"));

  if ((v292 & 1) != 0)
  {
    v157 = 1;
    goto LABEL_74;
  }
LABEL_72:
  if (!objc_msgSend(v5, "containsObject:", CFSTR("kDumpStateResidentMeshKey")))
    goto LABEL_79;
  v157 = 0;
LABEL_74:
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager residentMesh](self, "residentMesh");
  v159 = (void *)objc_claimAutoreleasedReturnValue();

  if (v159)
  {
    -[HMDHomeManager residentMesh](self, "residentMesh");
    v160 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v160, "stateDump");
    v161 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v158, "appendString:", v161);

  }
  else
  {
    objc_msgSend(v158, "appendString:", CFSTR("No Resident mesh (not resident capable device, or hasn't completely started up)."));
  }
  objc_msgSend(v285, "setObject:forKeyedSubscript:", v158, CFSTR("kDumpStateResidentMeshKey"));

  if ((v157 & 1) != 0)
  {
    v280 = 1;
    goto LABEL_81;
  }
LABEL_79:
  v162 = v283;
  if (!objc_msgSend(v283, "containsObject:", CFSTR("kDumpStateAccountsDescriptionKey")))
    goto LABEL_124;
  v280 = 0;
LABEL_81:
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v163 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v164, "device");
  v165 = (void *)objc_claimAutoreleasedReturnValue();

  if (v165)
  {
    objc_msgSend(v165, "name");
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v165, "identifier");
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v167, "UUIDString");
    v168 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v163, "appendFormat:", CFSTR("Current Device %@(%@)\n"), v166, v168);

  }
  v279 = v165;
  v347 = 0u;
  v348 = 0u;
  v345 = 0u;
  v346 = 0u;
  -[HMDHomeManager accountRegistry](self, "accountRegistry");
  v169 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v169, "accounts");
  v170 = (void *)objc_claimAutoreleasedReturnValue();

  v286 = v170;
  v288 = objc_msgSend(v170, "countByEnumeratingWithState:objects:count:", &v345, v370, 16);
  if (v288)
  {
    v287 = *(_QWORD *)v346;
    do
    {
      v171 = 0;
      do
      {
        if (*(_QWORD *)v346 != v287)
          objc_enumerationMutation(v286);
        v289 = v171;
        v172 = *(void **)(*((_QWORD *)&v345 + 1) + 8 * v171);
        objc_msgSend(v172, "shortDescription");
        v173 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v163, "appendFormat:", CFSTR("Account %@:\n"), v173);

        v343 = 0u;
        v344 = 0u;
        v341 = 0u;
        v342 = 0u;
        objc_msgSend(v172, "handles");
        v174 = (void *)objc_claimAutoreleasedReturnValue();
        v175 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v341, v369, 16);
        if (v175)
        {
          v176 = v175;
          v177 = *(_QWORD *)v342;
          do
          {
            for (m = 0; m != v176; ++m)
            {
              if (*(_QWORD *)v342 != v177)
                objc_enumerationMutation(v174);
              v179 = *(void **)(*((_QWORD *)&v341 + 1) + 8 * m);
              objc_msgSend(v179, "remoteDestinationString");
              v180 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v179, "identifier");
              v181 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v181, "UUIDString");
              v182 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v163, "appendFormat:", CFSTR("\tHandle %@(%@)\n"), v180, v182);

            }
            v176 = objc_msgSend(v174, "countByEnumeratingWithState:objects:count:", &v341, v369, 16);
          }
          while (v176);
        }

        objc_msgSend(v172, "devices");
        v183 = (void *)objc_claimAutoreleasedReturnValue();
        v184 = objc_msgSend(v183, "count");

        if (v184)
        {
          v339 = 0u;
          v340 = 0u;
          v337 = 0u;
          v338 = 0u;
          objc_msgSend(v172, "devices");
          v290 = (id)objc_claimAutoreleasedReturnValue();
          v293 = objc_msgSend(v290, "countByEnumeratingWithState:objects:count:", &v337, v368, 16);
          if (v293)
          {
            v291 = *(_QWORD *)v338;
            do
            {
              v185 = 0;
              do
              {
                if (*(_QWORD *)v338 != v291)
                  objc_enumerationMutation(v290);
                v186 = *(void **)(*((_QWORD *)&v337 + 1) + 8 * v185);
                objc_msgSend(v186, "name");
                objb = (id)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v186, "identifier");
                v187 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v187, "UUIDString");
                v305 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v186, "version");
                v300 = v187;
                v302 = v185;
                v298 = (void *)objc_claimAutoreleasedReturnValue();
                if (v298)
                {
                  objc_msgSend(v186, "version");
                  v294 = (__CFString *)objc_claimAutoreleasedReturnValue();
                  v296 = v294;
                }
                else
                {
                  v296 = CFSTR("Unknown");
                }
                objc_msgSend(v186, "productInfo");
                v188 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v188, "productPlatform");
                HMFProductPlatformToString();
                v189 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v186, "productInfo");
                v190 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v190, "productClass");
                HMFProductClassToString();
                v191 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v186, "productInfo");
                v192 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v192, "softwareVersion");
                v193 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v193, "versionString");
                v194 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v163, "appendFormat:", CFSTR("\tDevice %@(%@), Version = %@, Platform = %@, Class = %@, OS = %@\n"), objb, v305, v296, v189, v191, v194);

                if (v298)
                v335 = 0u;
                v336 = 0u;
                v333 = 0u;
                v334 = 0u;
                objc_msgSend(v186, "handles");
                v195 = (void *)objc_claimAutoreleasedReturnValue();
                v196 = objc_msgSend(v195, "countByEnumeratingWithState:objects:count:", &v333, v367, 16);
                if (v196)
                {
                  v197 = v196;
                  v198 = *(_QWORD *)v334;
                  do
                  {
                    for (n = 0; n != v197; ++n)
                    {
                      if (*(_QWORD *)v334 != v198)
                        objc_enumerationMutation(v195);
                      objc_msgSend(v163, "appendFormat:", CFSTR("\t\tHandle %@\n"), *(_QWORD *)(*((_QWORD *)&v333 + 1) + 8 * n));
                    }
                    v197 = objc_msgSend(v195, "countByEnumeratingWithState:objects:count:", &v333, v367, 16);
                  }
                  while (v197);
                }

                objc_msgSend(v186, "capabilities");
                v200 = (void *)objc_claimAutoreleasedReturnValue();

                if (v200)
                {
                  objc_msgSend(v186, "capabilities");
                  v201 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v163, "appendFormat:", CFSTR("\t\t%@\n"), v201);

                }
                v185 = v302 + 1;
              }
              while (v302 + 1 != v293);
              v293 = objc_msgSend(v290, "countByEnumeratingWithState:objects:count:", &v337, v368, 16);
            }
            while (v293);
          }

        }
        v171 = v289 + 1;
      }
      while (v289 + 1 != v288);
      v288 = objc_msgSend(v286, "countByEnumeratingWithState:objects:count:", &v345, v370, 16);
    }
    while (v288);
  }

  if (objc_msgSend(v163, "length"))
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v163, CFSTR("kDumpStateAccountsDescriptionKey"));

  v162 = v283;
  if ((v280 & 1) != 0)
  {
    v202 = 1;
    goto LABEL_126;
  }
LABEL_124:
  if (!objc_msgSend(v162, "containsObject:", CFSTR("kDumpStateRegisteredPairedAccyDescriptionKey")))
    goto LABEL_130;
  v202 = 0;
LABEL_126:
  -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
  v203 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v203, "dumpRegisteredPairedAccessories");
  v204 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v204, "length"))
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v204, CFSTR("kDumpStateRegisteredPairedAccyDescriptionKey"));

  if ((v202 & 1) != 0)
  {
    v205 = 1;
    goto LABEL_133;
  }
LABEL_130:
  if ((objc_msgSend(v162, "containsObject:", CFSTR("kDumpStateRegisteredPairedAccyDescriptionKey")) & 1) == 0
    && !objc_msgSend(v162, "containsObject:", CFSTR("kDumpStateUnassociatedAccyDescriptionKey")))
  {
    goto LABEL_137;
  }
  v205 = 0;
LABEL_133:
  -[HMDHomeManager accessoryBrowser](self, "accessoryBrowser");
  v206 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v206, "dumpBrowsingConnections");
  v207 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v207, "length"))
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v207, CFSTR("kDumpStateBrowsingConnectionsDescriptionKey"));

  if ((v205 & 1) != 0)
  {
    v208 = 1;
    goto LABEL_139;
  }
LABEL_137:
  if (!objc_msgSend(v162, "containsObject:", CFSTR("kDumpStatePendingUserManagementOperationsDescriptionKey")))goto LABEL_152;
  v208 = 0;
LABEL_139:
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  v329 = 0u;
  v330 = 0u;
  v331 = 0u;
  v332 = 0u;
  +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
  v210 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v210, "operations");
  v211 = (void *)objc_claimAutoreleasedReturnValue();

  v212 = objc_msgSend(v211, "countByEnumeratingWithState:objects:count:", &v329, v366, 16);
  if (v212)
  {
    v213 = v212;
    v214 = *(_QWORD *)v330;
    v215 = 1;
    do
    {
      for (ii = 0; ii != v213; ++ii)
      {
        if (*(_QWORD *)v330 != v214)
          objc_enumerationMutation(v211);
        v217 = *(_QWORD *)(*((_QWORD *)&v329 + 1) + 8 * ii);
        if ((v215 & 1) != 0)
          objc_msgSend(v209, "appendFormat:", CFSTR("Pending User Management Operations\n"));
        objc_msgSend(v209, "appendFormat:", CFSTR("\tOperation = %@\n"), v217);
        v215 = 0;
      }
      v213 = objc_msgSend(v211, "countByEnumeratingWithState:objects:count:", &v329, v366, 16);
      v215 = 0;
    }
    while (v213);
  }

  if (objc_msgSend(v209, "length"))
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v209, CFSTR("kDumpStatePendingUserManagementOperationsDescriptionKey"));

  v162 = v283;
  if ((v208 & 1) != 0)
  {
    v218 = self;
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v219 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v219, "secureRemoteTransport");
    v220 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v220, "dumpState");
    v221 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v221, CFSTR("RemoteMessaging"));

    v222 = 1;
    goto LABEL_156;
  }
LABEL_152:
  if ((objc_msgSend(v162, "containsObject:", CFSTR("kDumpStateRemoteMessagingKey")) & 1) != 0)
  {
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v223 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v223, "secureRemoteTransport");
    v224 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v224, "dumpState");
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v225, CFSTR("RemoteMessaging"));

  }
  if (!objc_msgSend(v162, "containsObject:", CFSTR("kDumpStateActionSetDescriptionKey")))
  {
    if (isWatch())
      goto LABEL_196;
    goto LABEL_169;
  }
  v222 = 0;
  v218 = self;
LABEL_156:
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v226 = (void *)objc_claimAutoreleasedReturnValue();
  v325 = 0u;
  v326 = 0u;
  v327 = 0u;
  v328 = 0u;
  -[HMDHomeManager homes](v218, "homes");
  v227 = (void *)objc_claimAutoreleasedReturnValue();
  v228 = objc_msgSend(v227, "countByEnumeratingWithState:objects:count:", &v325, v365, 16);
  if (v228)
  {
    v229 = v228;
    v230 = *(_QWORD *)v326;
    do
    {
      for (jj = 0; jj != v229; ++jj)
      {
        if (*(_QWORD *)v326 != v230)
          objc_enumerationMutation(v227);
        objc_msgSend(*(id *)(*((_QWORD *)&v325 + 1) + 8 * jj), "dumpActionSetDescription");
        v232 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v226, "addObject:", v232);

      }
      v229 = objc_msgSend(v227, "countByEnumeratingWithState:objects:count:", &v325, v365, 16);
    }
    while (v229);
  }

  if (objc_msgSend(v226, "count"))
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v226, CFSTR("kDumpStateActionSetDescriptionKey"));

  v162 = v283;
  if (!isWatch())
  {
    if ((v222 & 1) != 0)
    {
      v233 = 1;
      goto LABEL_171;
    }
LABEL_169:
    if (!objc_msgSend(v162, "containsObject:", CFSTR("kDumpStateCharacteristicNotificationRegistryKey")))
      goto LABEL_182;
    v233 = 0;
LABEL_171:
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v234 = (void *)objc_claimAutoreleasedReturnValue();
    v321 = 0u;
    v322 = 0u;
    v323 = 0u;
    v324 = 0u;
    -[HMDHomeManager homes](self, "homes");
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    v236 = objc_msgSend(v235, "countByEnumeratingWithState:objects:count:", &v321, v364, 16);
    if (v236)
    {
      v237 = v236;
      v238 = *(_QWORD *)v322;
      do
      {
        for (kk = 0; kk != v237; ++kk)
        {
          if (*(_QWORD *)v322 != v238)
            objc_enumerationMutation(v235);
          objc_msgSend(*(id *)(*((_QWORD *)&v321 + 1) + 8 * kk), "dumpCharacteristicNotificationRegistry");
          v240 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v234, "appendString:", v240);

        }
        v237 = objc_msgSend(v235, "countByEnumeratingWithState:objects:count:", &v321, v364, 16);
      }
      while (v237);
    }

    if (objc_msgSend(v234, "length"))
      objc_msgSend(v285, "setObject:forKeyedSubscript:", v234, CFSTR("kDumpStateCharacteristicNotificationRegistryKey"));

    v162 = v283;
    if ((v233 & 1) != 0)
    {
      v222 = 1;
LABEL_184:
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v241 = (void *)objc_claimAutoreleasedReturnValue();
      v317 = 0u;
      v318 = 0u;
      v319 = 0u;
      v320 = 0u;
      -[HMDHomeManager homes](self, "homes");
      v242 = (void *)objc_claimAutoreleasedReturnValue();
      v243 = objc_msgSend(v242, "countByEnumeratingWithState:objects:count:", &v317, v363, 16);
      if (v243)
      {
        v244 = v243;
        v245 = *(_QWORD *)v318;
        do
        {
          for (mm = 0; mm != v244; ++mm)
          {
            if (*(_QWORD *)v318 != v245)
              objc_enumerationMutation(v242);
            objc_msgSend(*(id *)(*((_QWORD *)&v317 + 1) + 8 * mm), "dumpMediaSessionDescription");
            v247 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v241, "addObject:", v247);

          }
          v244 = objc_msgSend(v242, "countByEnumeratingWithState:objects:count:", &v317, v363, 16);
        }
        while (v244);
      }

      if (objc_msgSend(v241, "count"))
        objc_msgSend(v285, "setObject:forKeyedSubscript:", v241, CFSTR("kDumpStateMediaSessionsKey"));

      v162 = v283;
      goto LABEL_194;
    }
LABEL_182:
    if (!objc_msgSend(v162, "containsObject:", CFSTR("kDumpStateMediaSessionsKey")))
      goto LABEL_196;
    v222 = 0;
    goto LABEL_184;
  }
LABEL_194:
  if ((v222 & 1) != 0)
  {
    -[HMDHomeManager syncManager](self, "syncManager");
    v248 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v248, "dumpState");
    v249 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v249, *MEMORY[0x1E0D27F88]);

    v250 = *MEMORY[0x1E0D27E60];
    -[HMDHomeManager appData](self, "appData");
    v251 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v251, "dumpState");
    v252 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v252, v250);

    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v253 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v253, "dumpState");
    v254 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v254, *MEMORY[0x1E0D27F00]);

LABEL_203:
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v264 = (void *)objc_claimAutoreleasedReturnValue();
    v313 = 0u;
    v314 = 0u;
    v315 = 0u;
    v316 = 0u;
    v265 = self->_homes;
    v266 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v265, "countByEnumeratingWithState:objects:count:", &v313, v362, 16);
    if (v266)
    {
      v267 = v266;
      v268 = *(_QWORD *)v314;
      do
      {
        for (nn = 0; nn != v267; ++nn)
        {
          if (*(_QWORD *)v314 != v268)
            objc_enumerationMutation(v265);
          v270 = *(void **)(*((_QWORD *)&v313 + 1) + 8 * nn);
          v309 = 0u;
          v310 = 0u;
          v311 = 0u;
          v312 = 0u;
          objc_msgSend(v270, "accessories");
          v271 = (void *)objc_claimAutoreleasedReturnValue();
          v272 = objc_msgSend(v271, "countByEnumeratingWithState:objects:count:", &v309, v361, 16);
          if (v272)
          {
            v273 = v272;
            v274 = *(_QWORD *)v310;
            do
            {
              for (i1 = 0; i1 != v273; ++i1)
              {
                if (*(_QWORD *)v310 != v274)
                  objc_enumerationMutation(v271);
                objc_msgSend(*(id *)(*((_QWORD *)&v309 + 1) + 8 * i1), "dumpNetworkState");
                v276 = (void *)objc_claimAutoreleasedReturnValue();
                if (v276)
                  objc_msgSend(v264, "addObject:", v276);

              }
              v273 = objc_msgSend(v271, "countByEnumeratingWithState:objects:count:", &v309, v361, 16);
            }
            while (v273);
          }

        }
        v267 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v265, "countByEnumeratingWithState:objects:count:", &v313, v362, 16);
      }
      while (v267);
    }

    objc_msgSend(v285, "setObject:forKeyedSubscript:", v264, CFSTR("kDumpStateNetworkKey"));
    v162 = v283;
    goto LABEL_220;
  }
LABEL_196:
  v255 = *MEMORY[0x1E0D27F88];
  if (objc_msgSend(v162, "containsObject:", *MEMORY[0x1E0D27F88]))
  {
    -[HMDHomeManager syncManager](self, "syncManager");
    v256 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v256, "dumpState");
    v257 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v257, v255);

  }
  v258 = *MEMORY[0x1E0D27E60];
  if ((objc_msgSend(v162, "containsObject:", *MEMORY[0x1E0D27E60]) & 1) != 0)
  {
    -[HMDHomeManager appData](self, "appData");
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v259, "dumpState");
    v260 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v260, v258);

  }
  v261 = *MEMORY[0x1E0D27F00];
  if (objc_msgSend(v162, "containsObject:", *MEMORY[0x1E0D27F00]))
  {
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v262 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v262, "dumpState");
    v263 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v285, "setObject:forKeyedSubscript:", v263, v261);

  }
  if (objc_msgSend(v162, "containsObject:", CFSTR("kDumpStateNetworkKey")))
    goto LABEL_203;
LABEL_220:
  objc_msgSend(v281, "invalidate");
  v277 = v285;

  return v277;
}

- (void)_handleDumpState:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "arrayForKey:", CFSTR("kDumpStateRequestedConfigurationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count"))
    v6 = objc_msgSend(v5, "containsObject:", *MEMORY[0x1E0CBAAD0]);
  else
    v6 = 1;
  objc_msgSend(v4, "activity");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _getRequestedState:activity:](self, "_getRequestedState:activity:", v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (_QWORD *)MEMORY[0x1E0CB8F18];
  if ((v6 & 1) != 0 || objc_msgSend(v5, "containsObject:", *MEMORY[0x1E0CB8F28]))
  {
    +[HMDXPCMessageCountTracker sharedTracker](HMDXPCMessageCountTracker, "sharedTracker");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stateDump");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v11, CFSTR("XPC Message Count Tracker"));

    +[HMDXPCMessageTransport defaultTransport](HMDXPCMessageTransport, "defaultTransport");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stateDump");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v13, CFSTR("Default XPC Transport"));

    +[HMDXPCMessageTransport accessorySetupTransport](HMDXPCMessageTransport, "accessorySetupTransport");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stateDump");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v15, CFSTR("Accessory Setup XPC Transport"));

    if ((v6 & 1) != 0)
    {
      -[HMDHomeManager compositeSettingsControllerManager](self, "compositeSettingsControllerManager");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "dumpStateInfo");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v17, *MEMORY[0x1E0CB8F08]);

LABEL_11:
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager eventRouterXPCServer](self, "eventRouterXPCServer");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "dumpStateDescription");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v23, CFSTR("XPCServer"));

      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      -[HMDHomeManager homes](self, "homes", 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = (void *)objc_msgSend(v24, "copy");

      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
      if (v26)
      {
        v27 = v26;
        v28 = *(_QWORD *)v40;
        do
        {
          v29 = 0;
          do
          {
            if (*(_QWORD *)v40 != v28)
              objc_enumerationMutation(v25);
            objc_msgSend(*(id *)(*((_QWORD *)&v39 + 1) + 8 * v29), "eventRouterDumpStateInfo");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "addEntriesFromDictionary:", v30);

            ++v29;
          }
          while (v27 != v29);
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
        }
        while (v27);
      }

      v31 = (void *)objc_msgSend(v21, "copy");
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v31, *MEMORY[0x1E0CB8F18]);

      goto LABEL_19;
    }
  }
  v18 = *MEMORY[0x1E0CB8F08];
  if (objc_msgSend(v5, "containsObject:", *MEMORY[0x1E0CB8F08]))
  {
    -[HMDHomeManager compositeSettingsControllerManager](self, "compositeSettingsControllerManager");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "dumpStateInfo");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v20, v18);

  }
  if ((objc_msgSend(v5, "containsObject:", *v9) & 1) != 0)
    goto LABEL_11;
LABEL_19:
  -[HMDHomeManager _dumpHomeManagerData](self, "_dumpHomeManagerData");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "containsObject:", *MEMORY[0x1E0CB8F10])
    && objc_msgSend(v4, "isEntitledForStateDump"))
  {
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v32, 1, 0);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v33, *MEMORY[0x1E0CBAAD8]);

  }
  else
  {
    -[HMDHomeManager _dumpToLog:withState:](self, "_dumpToLog:withState:", v32, v8);
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v34, *MEMORY[0x1E0CB8FD0]);

  v35 = (void *)MEMORY[0x1E0CB37E8];
  -[HMDHomeManager fmfHandler](self, "fmfHandler");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "numberWithBool:", objc_msgSend(v36, "isThisDesignatedFMFDevice"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v37, *MEMORY[0x1E0CB8FE0]);

  v38 = (void *)objc_msgSend(v8, "copy");
  objc_msgSend(v4, "respondWithPayload:", v38);

}

- (void)_handleDiagnosticInfo:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((isInternalBuild() & 1) != 0)
  {
    -[HMDHomeManager appleMediaAccessoryDiagnosticInfoController](self, "appleMediaAccessoryDiagnosticInfoController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = *MEMORY[0x1E0CB8EE8];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "diagnosticInfoDataWithAdditionalKeys:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    +[HMDAppleMediaAccessoryDiagnosticInfoController diagnosticInfoDescriptionWithData:](HMDAppleMediaAccessoryDiagnosticInfoController, "diagnosticInfoDescriptionWithData:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = self;
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543618;
      v18 = v12;
      v19 = 2112;
      v20 = v8;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Obtained diagnostic Info %@", (uint8_t *)&v17, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v4, "respondWithPayload:", v8);

  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Not internal build DiagnosticInfo message not allowed", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 10);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v7);
  }

}

- (void)_handleNetworkMismatchInfo:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((isInternalBuild() & 1) != 0)
  {
    +[HMDMainDriver driver](HMDMainDriver, "driver");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "currentWiFiNetworkInfo");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __45__HMDHomeManager__handleNetworkMismatchInfo___block_invoke;
    v12[3] = &unk_1E89BF458;
    v12[4] = self;
    v13 = v4;
    -[HMDHomeManager findAccessoriesNotOnWiFiWithCurrentWiFi:completionHandler:](self, "findAccessoriesNotOnWiFiWithCurrentWiFi:completionHandler:", v6, v12);

  }
  else
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v15 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Not internal build NetworkMismatchInfo message not allowed", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);

  }
}

- (id)_dumpHomeManagerData
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t k;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t m;
  void *v59;
  void *v60;
  _BOOL8 v61;
  void *v62;
  void *v63;
  _BOOL8 v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[128];
  _BYTE v97[128];
  _BYTE v98[128];
  _BYTE v99[128];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 7);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v77, "infoDictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", *MEMORY[0x1E0C9AE90]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appendFormat:", CFSTR("homed: %@  "), v5);

  +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHAPMetadata getBuiltinInstance](HMDHAPMetadata, "getBuiltinInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "schemaVersion");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v76 = v6;
  objc_msgSend(v6, "version");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "schemaVersion");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = v7;
  objc_msgSend(v7, "version");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appendFormat:", CFSTR("Metadata - Current: %@/%@   Builtin: %@/%@\n"), v8, v9, v10, v11);

  v78 = v3;
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v3, *MEMORY[0x1E0D27EC0]);
  v12 = (void *)MEMORY[0x1E0CB3940];
  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "UUIDString");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "UUIDString");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked");
  HMFBooleanToString();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  getLastSyncedAssistantConfigurationVersion();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  getAssistantConfigurationSnapshot();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringWithFormat:", CFSTR("Primary Home: %@, Current Home: %@, Allow locked access: %@, Siri lastSyncedVersion: %@  currentSyncSnapshot: %@"), v14, v16, v17, v18, v19);
  v20 = objc_claimAutoreleasedReturnValue();

  v74 = (void *)v20;
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v20, *MEMORY[0x1E0D27ED0]);
  -[HMDHomeManager syncManager](self, "syncManager");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "dumpState");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v22, *MEMORY[0x1E0D27F88]);

  -[HMDHomeManager appData](self, "appData");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "dumpState");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v24, *MEMORY[0x1E0D27E60]);

  -[HMDHomeManager homes](self, "homes");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "count");

  if (v26)
  {
    v27 = (void *)MEMORY[0x1E0C99DE8];
    -[HMDHomeManager homes](self, "homes");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "arrayWithCapacity:", objc_msgSend(v28, "count"));
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    -[HMDHomeManager homes](self, "homes");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v92, v99, 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)v93;
      do
      {
        for (i = 0; i != v32; ++i)
        {
          if (*(_QWORD *)v93 != v33)
            objc_enumerationMutation(v30);
          objc_msgSend(*(id *)(*((_QWORD *)&v92 + 1) + 8 * i), "dumpState");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "addObject:", v35);

        }
        v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v92, v99, 16);
      }
      while (v32);
    }

    objc_msgSend(v79, "setObject:forKey:", v29, *MEMORY[0x1E0D27EC8]);
  }
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "dumpState");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "setObject:forKey:", v37, *MEMORY[0x1E0D27F00]);

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 2);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = (void *)objc_msgSend(v40, "copy");

  v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v88, v98, 16);
  if (v42)
  {
    v43 = v42;
    v44 = *(_QWORD *)v89;
    do
    {
      for (j = 0; j != v43; ++j)
      {
        if (*(_QWORD *)v89 != v44)
          objc_enumerationMutation(v41);
        objc_msgSend(*(id *)(*((_QWORD *)&v88 + 1) + 8 * j), "describeWithFormat");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "addObject:", v46);

      }
      v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v88, v98, 16);
    }
    while (v43);
  }

  v72 = v39;
  v73 = v38;
  objc_msgSend(v38, "setObject:forKeyedSubscript:", v39, *MEMORY[0x1E0D27EE8]);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v84, v97, 16);
  if (v49)
  {
    v50 = v49;
    v51 = *(_QWORD *)v85;
    do
    {
      for (k = 0; k != v50; ++k)
      {
        if (*(_QWORD *)v85 != v51)
          objc_enumerationMutation(v48);
        v53 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * k);
        v80 = 0u;
        v81 = 0u;
        v82 = 0u;
        v83 = 0u;
        objc_msgSend(v53, "outgoingInvitations");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v80, v96, 16);
        if (v55)
        {
          v56 = v55;
          v57 = *(_QWORD *)v81;
          do
          {
            for (m = 0; m != v56; ++m)
            {
              if (*(_QWORD *)v81 != v57)
                objc_enumerationMutation(v54);
              objc_msgSend(*(id *)(*((_QWORD *)&v80 + 1) + 8 * m), "describeWithFormat");
              v59 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v47, "addObject:", v59);

            }
            v56 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v80, v96, 16);
          }
          while (v56);
        }

      }
      v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v84, v97, 16);
    }
    while (v50);
  }

  objc_msgSend(v73, "setObject:forKeyedSubscript:", v47, *MEMORY[0x1E0D27F20]);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v73, *MEMORY[0x1E0D27EF0]);
  v60 = (void *)MEMORY[0x1E0CB3940];
  v61 = (_os_feature_enabled_impl() & 1) != 0
     || CFPreferencesGetAppBooleanValue(CFSTR("MatterTTU"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0) != 0;
  objc_msgSend(v60, "stringWithFormat:", CFSTR("%d"), v61);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v62, CFSTR("HM_FEATURE_MATTER_TTU_ENABLED_FEATURE_OR_PROFILE"));

  v63 = (void *)MEMORY[0x1E0CB3940];
  if (_os_feature_enabled_impl())
    v64 = (isInternalBuild() & 1) != 0
       || CFPreferencesGetAppBooleanValue(CFSTR("UWBUnlock"), CFSTR("/Library/Managed Preferences/mobile/com.apple.homed.plist"), 0) != 0;
  else
    v64 = 0;
  objc_msgSend(v63, "stringWithFormat:", CFSTR("%d"), v64);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v65, CFSTR("HM_FEATURE_UWB_ENABLED_FEATURE_AND_PROFILE"));

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), isFeatureMatteriPhoneOnlyPairingControlEnabled());
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v66, CFSTR("iPhoneOnlyPairingAndControl (iPOP)"));

  +[HMDHomeKeyDataRecorder sharedRecorder](HMDHomeKeyDataRecorder, "sharedRecorder");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v67, "records");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v68, CFSTR("Home Key Change Records"));

  v69 = objc_alloc_init(MEMORY[0x1E0CC1B30]);
  objc_msgSend(v69, "storedValuesByKey");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v70, CFSTR("System Commissioner Key-Value Store"));

  return v79;
}

- (void)_handleSysdiagnoseRequest:(id)a3
{
  objc_msgSend(a3, "respondWithPayload:", 0);
}

- (void)configureRetailDemoModeWithKeyPair:(id)a3 controllerName:(id)a4 demoAccessories:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  char v19;
  void *v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  id v24;
  void *v25;
  NSObject *v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  id v32;
  _QWORD block[4];
  id v34;
  id v35;
  id v36;
  id location;
  uint8_t buf[4];
  id v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v27 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  -[HMDHomeManager workQueue](self, "workQueue");
  v13 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v13);

  objc_initWeak(&location, self);
  v14 = (void *)MEMORY[0x1E0CB36F8];
  v15 = (void *)objc_msgSend(v11, "copy");
  v36 = 0;
  objc_msgSend(v14, "archivedDataWithRootObject:requiringSecureCoding:error:", v15, 1, &v36);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v36;

  if (v17
    || (HMDHomeKitDaemonDemoModePersistencePath(),
        v18 = (void *)objc_claimAutoreleasedReturnValue(),
        v19 = objc_msgSend(v16, "writeToURL:atomically:", v18, 1),
        v18,
        (v19 & 1) == 0))
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (id)objc_claimAutoreleasedReturnValue();
      HMDHomeKitDaemonDemoModePersistencePath();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v39 = v24;
      v40 = 2112;
      v41 = v25;
      v42 = 2112;
      v43 = v17;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to persist demo accessories to %@: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v21);
    -[HMDHomeManager workQueue](v22, "workQueue");
    v26 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __102__HMDHomeManager_configureRetailDemoModeWithKeyPair_controllerName_demoAccessories_completionHandler___block_invoke;
    block[3] = &unk_1E89C1D68;
    v35 = v12;
    v34 = v17;
    dispatch_async(v26, block);

  }
  else
  {
    -[HMDHomeManager workQueue](self, "workQueue");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __102__HMDHomeManager_configureRetailDemoModeWithKeyPair_controllerName_demoAccessories_completionHandler___block_invoke_2;
    v28[3] = &unk_1E89BDD70;
    objc_copyWeak(&v32, &location);
    v29 = v27;
    v30 = v10;
    v31 = v12;
    -[HMDHomeManager _eraseLocalHomeConfigurationAndDeleteMetadata:reason:completionQueue:completion:](self, "_eraseLocalHomeConfigurationAndDeleteMetadata:reason:completionQueue:completion:", 1, 4, v20, v28);

    objc_destroyWeak(&v32);
  }

  objc_destroyWeak(&location);
}

- (void)finalizeRetailDemoModeWithAllowEditing:(BOOL)a3 completionHandler:(id)a4
{
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  dispatch_time_t v26;
  id v27;
  id v28;
  _QWORD block[5];
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  _BYTE v44[128];
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  if (!a3)
  {
    v28 = v6;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    -[HMDHomeManager homes](self, "homes");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v40;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v40 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v12);
          objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "UUIDString");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "setOwnerName:", v15);

          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          objc_msgSend(v13, "users");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v35, v44, 16);
          if (v17)
          {
            v18 = v17;
            v19 = *(_QWORD *)v36;
            do
            {
              v20 = 0;
              do
              {
                if (*(_QWORD *)v36 != v19)
                  objc_enumerationMutation(v16);
                objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * v20++), "setPrivilege:", 0);
              }
              while (v18 != v20);
              v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v35, v44, 16);
            }
            while (v18);
          }

          ++v12;
        }
        while (v12 != v10);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
      }
      while (v10);
    }

    v6 = v28;
  }
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v31, v43, 16);
  if (v22)
  {
    v23 = v22;
    v24 = *(_QWORD *)v32;
    do
    {
      v25 = 0;
      do
      {
        if (*(_QWORD *)v32 != v24)
          objc_enumerationMutation(v21);
        objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v25++), "configureNaturalLightingForDemoMode");
      }
      while (v23 != v25);
      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v31, v43, 16);
    }
    while (v23);
  }

  self->_demoFinalized = 1;
  -[HMDHomeManager _setHomeConfigurationKey:value:](self, "_setHomeConfigurationKey:value:", *MEMORY[0x1E0CBAAF0], *MEMORY[0x1E0C9AE50]);
  -[HMDHomeManager saveWithReason:information:saveOptions:](self, "saveWithReason:information:saveOptions:", CFSTR("kUpdateUserAccessRequestKey"), 0, 0);
  v26 = dispatch_time(0, 1000000000);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __75__HMDHomeManager_finalizeRetailDemoModeWithAllowEditing_completionHandler___block_invoke;
  block[3] = &unk_1E89C1D68;
  block[4] = self;
  v30 = v6;
  v27 = v6;
  dispatch_after(v26, MEMORY[0x1E0C80D38], block);

}

- (id)_processTestModeCurrentHomeOverride:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    if (objc_msgSend(v4, "hmf_BOOLForKey:", CFSTR("kConfigTestingResetOverrideKey")))
    {
      -[HMDHomeManager setOverrideCurrentHomeUUIDToNil:](self, "setOverrideCurrentHomeUUIDToNil:", 0);
    }
    else
    {
      if (objc_msgSend(v5, "hmf_BOOLForKey:", CFSTR("kConfigTestingOverrideToNilKey")))
      {
        objc_msgSend(MEMORY[0x1E0D28558], "BOOLeanWithBool:", 1);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager setOverrideCurrentHomeUUIDToNil:](self, "setOverrideCurrentHomeUUIDToNil:", v7);
      }
      else
      {
        objc_msgSend(v5, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v7);
        v8 = objc_claimAutoreleasedReturnValue();
        if (!v8)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_11;
        }
        v9 = (void *)v8;
        -[HMDHomeManager setCurrentHomeUUIDOverride:](self, "setCurrentHomeUUIDOverride:", v7);
        objc_msgSend(MEMORY[0x1E0D28558], "BOOLeanWithBool:", 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager setOverrideCurrentHomeUUIDToNil:](self, "setOverrideCurrentHomeUUIDToNil:", v10);

      }
    }
    -[HMDHomeManager __nominateCurrentHomeUUID](self, "__nominateCurrentHomeUUID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _notifyCurrentHomeUpdated:isLocalUpdate:](self, "_notifyCurrentHomeUpdated:isLocalUpdate:", v7, 1);
    v6 = 0;
LABEL_11:

    goto LABEL_12;
  }
  v6 = 0;
LABEL_12:

  return v6;
}

- (id)_processTestModeHomeLocationStatusOverride:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
      objc_msgSend(v7, "_processTestModeHomeLocationStatusOverride:", v5);
    else
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (id)_processTestModeHomeAccessControlOverride:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      objc_msgSend(v7, "_processTestModeHomeAccessControlOverride:", v5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v9)
      {
        -[HMDHomeManager uuid](self, "uuid");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("kTestModeHomeAccessControlOverride"), v10, 1);

        v9 = 0;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (id)_processTestModeSkipHH2MigrationOverride:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "hmf_UUIDForKey:", CFSTR("kHomeUUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
      objc_msgSend(v7, "_processTestModeSkipHH2MigrationOverride:", v5);
    else
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (id)_processTestModeConfiguration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "hmf_dictionaryForKey:", CFSTR("kConfigTestingOverrideCurrentHomeKey"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _processTestModeCurrentHomeOverride:](self, "_processTestModeCurrentHomeOverride:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      objc_msgSend(v5, "hmf_dictionaryForKey:", CFSTR("kConfigTestingOverrideHomeLocationStatusKey"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _processTestModeHomeLocationStatusOverride:](self, "_processTestModeHomeLocationStatusOverride:", v8);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v7)
      {
        objc_msgSend(v5, "hmf_dictionaryForKey:", CFSTR("kConfigTestingOverrideHomeAccessControlKey"));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager _processTestModeHomeAccessControlOverride:](self, "_processTestModeHomeAccessControlOverride:", v9);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v7)
        {
          objc_msgSend(v5, "hmf_dictionaryForKey:", CFSTR("kConfigTestingOverrideSkipHH2MigrationCheckDictionaryKey"));
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          -[HMDHomeManager _processTestModeSkipHH2MigrationOverride:](self, "_processTestModeSkipHH2MigrationOverride:", v10);
          v7 = (void *)objc_claimAutoreleasedReturnValue();

        }
      }
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)_handleTestModeConfigRequest:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  objc_msgSend(v7, "dictionaryForKey:", CFSTR("kConfigTestingOverrideKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _processTestModeConfiguration:](self, "_processTestModeConfiguration:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(v7, "respondWithError:", v5);
  }
  else
  {
    -[HMDHomeManager accessoryBrowserInternal](self, "accessoryBrowserInternal");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_handleTestModeConfigRequest:", v7);

  }
}

- (void)_handleHomeUtilRemoteMessageRequest:(id)a3
{
  id v4;
  uint64_t v5;
  id v6;
  void (**v7)(void *, const __CFString *);
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  HMDRemoteMessage *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  _QWORD aBlock[5];
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  HMDRemoteMessage *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke;
  aBlock[3] = &unk_1E89BDDC0;
  aBlock[4] = self;
  v6 = v4;
  v30 = v6;
  v7 = (void (**)(void *, const __CFString *))_Block_copy(aBlock);
  objc_msgSend(v6, "stringForKey:", CFSTR("HomeUtilRemoteMessageMessageNameKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[HMDHomeManager _destinationFromMessage:](self, "_destinationFromMessage:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      objc_msgSend(v6, "dictionaryForKey:", CFSTR("HomeUtilRemoteMessagePayloadKey"));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "numberForKey:", CFSTR("HomeUtilRemoteMessageRestrictionKey"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v10;
      if (v10)
        v11 = objc_msgSend(v10, "unsignedIntegerValue", v10);
      else
        v11 = -1;
      v12 = objc_msgSend(v6, "BOOLForKey:", CFSTR("HomeUtilRemoteMessageIsSecureKey"), v23);
      v13 = objc_msgSend(v6, "BOOLForKey:", CFSTR("HomeUtilRemoteMessageIsOnewayKey"));
      v14 = v13;
      if (v13)
        v15 = 3;
      else
        v15 = 0;
      v16 = -[HMDRemoteMessage initWithName:destination:payload:type:timeout:secure:restriction:]([HMDRemoteMessage alloc], "initWithName:destination:payload:type:timeout:secure:restriction:", v8, v9, v25, v15, v12, v11, 0.0);
      if ((v14 & 1) == 0)
      {
        objc_msgSend(v6, "responseHandler");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDRemoteMessage setResponseHandler:](v16, "setResponseHandler:", v17);

      }
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v32 = v21;
        v33 = 2112;
        v34 = v16;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEFAULT, "%{public}@HomeUtilRemoteMessageRequest: Sending message: %@", buf, 0x16u);

        v5 = MEMORY[0x1E0C809B0];
      }

      objc_autoreleasePoolPop(v18);
      -[HMDHomeManager messageDispatcher](v19, "messageDispatcher");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v26[0] = v5;
      v26[1] = 3221225472;
      v26[2] = __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke_1179;
      v26[3] = &unk_1E89C2170;
      v28 = v15;
      v27 = v6;
      objc_msgSend(v22, "sendMessage:completionHandler:", v16, v26);

    }
  }
  else
  {
    v7[2](v7, CFSTR("Message name is missing"));
  }

}

- (void)_handleUpdateMobileAssetsRequest:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x1E0CB35C8];
  v4 = a3;
  objc_msgSend(v3, "hmErrorWithCode:", 48);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v5);

}

- (void)_handleClearMobileAssetsInfoRequest:(id)a3
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x1E0CB35C8];
  v4 = a3;
  objc_msgSend(v3, "hmErrorWithCode:", 48);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v5);

}

- (id)_destinationFromMessage:(id)a3
{
  id v4;
  id v5;
  void (**v6)(void *, const __CFString *);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HMDRemoteDeviceMessageDestination *v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  void *v18;
  HMDHomeManager *v19;
  id v20;

  v4 = a3;
  v15 = MEMORY[0x1E0C809B0];
  v16 = 3221225472;
  v17 = __42__HMDHomeManager__destinationFromMessage___block_invoke;
  v18 = &unk_1E89BDDC0;
  v19 = self;
  v5 = v4;
  v20 = v5;
  v6 = (void (**)(void *, const __CFString *))_Block_copy(&v15);
  objc_msgSend(v5, "uuidForKey:", CFSTR("HomeUtilRemoteMessageTargetKey"), v15, v16, v17, v18, v19);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(v5, "stringForKey:", CFSTR("HomeUtilRemoteMessageDestinationKey"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      +[HMDDeviceHandle deviceHandleForDestination:](HMDDeviceHandle, "deviceHandleForDestination:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        -[HMDHomeManager accountRegistry](self, "accountRegistry");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "deviceForHandle:", v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        v12 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:]([HMDRemoteDeviceMessageDestination alloc], "initWithTarget:device:", v7, v11);
      }
      else
      {
        +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v8);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          objc_msgSend(v5, "dictionaryForKey:", CFSTR("HomeUtilRemoteMessageDeviceCapabilitiesKey"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:deviceCapabilities:]([HMDRemoteAccountMessageDestination alloc], "initWithTarget:handle:multicast:deviceCapabilities:", v7, v11, v13 == 0, v13);

        }
        else
        {
          v6[2](v6, CFSTR("Unknown device, account or home destination"));
          v12 = 0;
        }
      }

    }
    else
    {
      v6[2](v6, CFSTR("Remote destination string is missing"));
      v12 = 0;
    }

  }
  else
  {
    v6[2](v6, CFSTR("Target UUID is missing"));
    v12 = 0;
  }

  return v12;
}

- (void)registerStateHandler
{
  void *v3;
  uint64_t v4;
  id v5;
  id location;

  objc_initWeak(&location, self);
  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = MEMORY[0x1E0C809B0];
  objc_copyWeak(&v5, &location);
  -[HMDHomeManager setStateHandle:](self, "setStateHandle:", os_state_add_handler(), v4, 3221225472, __38__HMDHomeManager_registerStateHandler__block_invoke, &unk_1E89BDDE8);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

- (void)_dumpToLog:(id)a3 withState:(id)a4
{
  id v6;

  v6 = a4;
  -[HMDHomeManager _logState:key:indent:](self, "_logState:key:indent:", a3, 0, 0);
  -[HMDHomeManager _logState:key:indent:](self, "_logState:key:indent:", v6, 0, 0);

}

- (void)_logState:(id)a3 key:(id)a4 indent:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t v42[128];
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  id v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = v10;
  if (v10)
    objc_msgSend(v10, "indentationByLevels:", 1);
  else
    objc_msgSend(MEMORY[0x1E0D286B0], "indentation");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v29 = v11;
    v30 = v9;
    v31 = v8;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v12 = v8;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v51, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v39;
      v33 = *MEMORY[0x1E0D27F80];
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v39 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            if ((objc_msgSend(v17, "isEqualToString:", v33) & 1) == 0)
            {
              objc_msgSend(v12, "objectForKey:", v17);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              -[HMDHomeManager _logState:key:indent:](self, "_logState:key:indent:", v18, v17, v32);

            }
          }
          else
          {
            v19 = (void *)MEMORY[0x1D17BA0A0]();
            v20 = self;
            HMFGetOSLogHandle();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              v23 = objc_opt_class();
              *(_DWORD *)buf = 138544130;
              v44 = v22;
              v45 = 2112;
              v46 = v23;
              v47 = 2112;
              v48 = v17;
              v49 = 2112;
              v50 = v12;
              _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Cannot include key of non-NSString class %@: %@ in %@", buf, 0x2Au);

            }
            objc_autoreleasePoolPop(v19);
          }
        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v38, v51, 16);
      }
      while (v14);
    }

    v9 = v30;
    v8 = v31;
    v11 = v29;
LABEL_27:

    goto LABEL_28;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v24 = v8;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v35;
      do
      {
        for (j = 0; j != v26; ++j)
        {
          if (*(_QWORD *)v35 != v27)
            objc_enumerationMutation(v24);
          -[HMDHomeManager _logState:key:indent:](self, "_logState:key:indent:", *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * j), v9, v11);
        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
      }
      while (v26);
    }
    goto LABEL_27;
  }
LABEL_28:

}

- (void)__startupFirewallRuleManagerForMessage:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  HMDTransientRuleManagerClient *v8;
  void *v9;
  void *v10;
  HMDTransientRuleManagerClient *v11;
  void *v12;
  id v13;
  HMDTransientRuleManagerClient *v14;
  id v15;
  id v16;
  _QWORD v17[5];
  id v18;
  id v19;
  HMDTransientRuleManagerClient *v20;
  id v21;

  v6 = a3;
  v7 = a4;
  v8 = [HMDTransientRuleManagerClient alloc];
  objc_msgSend(v6, "identifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[HMDTransientRuleManagerClient initWithDescription:](v8, "initWithDescription:", v10);

  +[HMDNetworkRouterFirewallRuleManager sharedInstance](HMDNetworkRouterFirewallRuleManager, "sharedInstance");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke;
  v17[3] = &unk_1E89BDE38;
  v17[4] = self;
  v18 = v6;
  v19 = v12;
  v20 = v11;
  v21 = v7;
  v13 = v7;
  v14 = v11;
  v15 = v12;
  v16 = v6;
  objc_msgSend(v15, "startupForClient:completion:", v14, v17);

}

- (void)_handleNetworkFirewallDumpCloudRecordsRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  char v18;
  char v19;
  char v20;

  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9690]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9698]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB96A0]);
  v8 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB9680]);
  v9 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB96B0]);
  if (!v5 || objc_msgSend(v5, "length"))
  {
    if (v6)
    {
      v10 = objc_msgSend(v6, "length");
      if (v5)
        v11 = 1;
      else
        v11 = v8;
      if (v5)
        v12 = v10 == 0;
      else
        v12 = 1;
      if (v12 || (v11 & 1) == 0)
        goto LABEL_15;
LABEL_16:
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke;
      v14[3] = &unk_1E89BDE88;
      v15 = v4;
      v18 = v8;
      v16 = v5;
      v19 = v7;
      v17 = v6;
      v20 = v9;
      -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v15, v14);

      goto LABEL_17;
    }
    if (v5 || (v8 & 1) != 0)
      goto LABEL_16;
  }
LABEL_15:
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v13);

LABEL_17:
}

- (void)_handleNetworkFirewallAddOverridesRequest:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  char v11;

  v4 = a3;
  objc_msgSend(v4, "dataForKey:", *MEMORY[0x1E0CB9668]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB9678]);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke;
    v8[3] = &unk_1E89BDEB0;
    v9 = v4;
    v11 = v6;
    v10 = v5;
    -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v9, v8);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v7);

  }
}

- (void)_handleNetworkFirewallRemoveOverridesRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  BOOL v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;

  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9748]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9750]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 0;
  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v8);

  }
  else
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke;
    v9[3] = &unk_1E89BDED8;
    v10 = v4;
    v11 = v5;
    v12 = v6;
    -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v10, v9);

  }
}

- (void)_handleNetworkFirewallDumpLocalRulesRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  char v9;
  BOOL v10;
  char v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  char v21;
  char v22;

  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB96D0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB96D8]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB96B8]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB96C0]);
  v9 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB96E0]);
  if (v6)
    v10 = v5 == 0;
  else
    v10 = 0;
  if (v10)
    goto LABEL_11;
  if (v7 && v6 == 0)
    goto LABEL_11;
  v12 = v9;
  if (!v7)
  {
    v13 = 0;
    goto LABEL_14;
  }
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D286E0]), "initWithVersionString:", v7);
  if (v13)
  {
LABEL_14:
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke;
    v16[3] = &unk_1E89BDF00;
    v17 = v4;
    v18 = v6;
    v19 = v5;
    v20 = v13;
    v21 = v8;
    v22 = v12;
    v15 = v13;
    -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v17, v16);

    goto LABEL_12;
  }
LABEL_11:
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v14);

LABEL_12:
}

- (void)_handleNetworkFirewallDumpPairedMetadataRequest:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  char v9;
  char v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;
  char v21;

  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9708]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB9710]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB96F0]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB96F8]);
  v9 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB9718]);
  if ((v5 != 0) != (v6 != 0))
    goto LABEL_8;
  if (v7 && v6 == 0)
    goto LABEL_8;
  v11 = v9;
  if (!v7)
  {
    v12 = 0;
    goto LABEL_11;
  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D286E0]), "initWithVersionString:", v7);
  if (v12)
  {
LABEL_11:
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke;
    v15[3] = &unk_1E89BDF00;
    v16 = v4;
    v17 = v5;
    v18 = v6;
    v19 = v12;
    v20 = v8;
    v21 = v11;
    v14 = v12;
    -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v16, v15);

    goto LABEL_9;
  }
LABEL_8:
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v13);

LABEL_9:
}

- (void)_handleNetworkFirewallRemoveLocalRulesRequest:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke;
  v6[3] = &unk_1E89BDF28;
  v7 = v4;
  v5 = v4;
  -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v5, v6);

}

- (void)_handleNetworkFirewallFetchCloudChangesRequest:(id)a3
{
  id v4;
  char v5;
  id v6;
  _QWORD v7[4];
  id v8;
  char v9;

  v4 = a3;
  v5 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB9728]);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke;
  v7[3] = &unk_1E89BDF78;
  v9 = v5;
  v8 = v4;
  v6 = v4;
  -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:](self, "__startupFirewallRuleManagerForMessage:completion:", v6, v7);

}

- (void)_handleGetTLVForJSON:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "dataForKey:", *MEMORY[0x1E0CB8FE8]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v10 = 0;
    +[HMDNetworkRouterFirewallRuleManagerUtils dumpTLVsFromJSONData:error:](HMDNetworkRouterFirewallRuleManagerUtils, "dumpTLVsFromJSONData:error:", v4, &v10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v10;
    v7 = v6;
    if (v5)
    {
      v11 = *MEMORY[0x1E0CB8FF0];
      v12[0] = v5;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "respondWithPayload:", v8);

    }
    else
    {
      if (!v6)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(v3, "respondWithError:", v7);
    }

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "respondWithError:", v9);

  }
}

- (void)_addIncomingInvitation:(id)a3
{
  id v4;
  os_unfair_lock_s *p_lock;
  uint64_t v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  int v13;
  id v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  p_lock = &self->_lock;
  v6 = os_unfair_lock_lock_with_options();
  v7 = (void *)MEMORY[0x1D17BA0A0](v6);
  v8 = self;
  HMFGetOSLogHandle();
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "describeWithFormat");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v10;
    v15 = 2112;
    v16 = v11;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Added the invitation object to the list : %@", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  -[HMDHomeManager incomingInvitations](v8, "incomingInvitations");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "addObject:", v4);

  os_unfair_lock_unlock(p_lock);
  -[HMDHomeManager _updateIncomingInvitesPresent](v8, "_updateIncomingInvitesPresent");

}

- (void)_removeIncomingInvitation:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    os_unfair_lock_lock_with_options();
    -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "removeObject:", v4);

    os_unfair_lock_unlock(&self->_lock);
    -[HMDHomeManager _updateIncomingInvitesPresent](self, "_updateIncomingInvitesPresent");
  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v15 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Unexpected nil invitation", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    +[HMDTTRManager sharedManager](HMDTTRManager, "sharedManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@ | %@"), CFSTR("Unexpected nil invitation detected"), CFSTR("HomeKit"), CFSTR("Users+Invitations"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 938670);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringValue");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "requestRadarWithMessage:radarTitle:componentName:componentVersion:componentID:", v11, CFSTR("Unexpected nil invitation detected"), CFSTR("HomeKit"), CFSTR("Users+Invitations"), v13);

  }
}

- (int64_t)numberOfPendingIncomingInvitation
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v3);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "invitationState") == 2)
          ++v6;
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)_pruneExpiredIncomingInvitations
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  id obj;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  obj = v3;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v4)
  {
    v5 = v4;
    v26 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v28 != v26)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "endDate");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v8, "compare:", v9);

        if (v10 != -1)
        {
          objc_msgSend(v7, "updateInvitationState:", 6);
          objc_msgSend(v7, "identifier");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = (void *)MEMORY[0x1D17BA0A0]();
          v13 = self;
          HMFGetOSLogHandle();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "describeWithFormat");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v32 = v15;
            v33 = 2112;
            v34 = v16;
            _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Pruning invitation %@ as expired", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v12);
          +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "UUIDString");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "removeBulletinWithRecordID:", v18);

          -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v13, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v7, objc_msgSend(v7, "invitationState"));
          -[HMDHomeManager _removeIncomingInvitation:](v13, "_removeIncomingInvitation:", v7);
          v19 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager saveWithReason:information:postSyncNotification:](v13, "saveWithReason:information:postSyncNotification:", CFSTR("kAccessHomeInviteRequestKey"), 0, 0));
          v20 = v13;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            -[HMDHomeManager incomingInvitations](v20, "incomingInvitations");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v32 = v22;
            v33 = 2112;
            v34 = v23;
            _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Incoming invitations after pruning: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v19);

        }
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v5);
  }

}

- (void)_handleRequestToUpdateHomeInvitationFromInviter:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kInvitationIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", CFSTR("kInvitationStateKey"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (!v5 || !v6)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v9);
    goto LABEL_12;
  }
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "hmf_firstObjectWithValue:forKeyPath:", v5, CFSTR("identifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "UUIDString");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v13;
      v21 = 2112;
      v22 = v14;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Invalid invite identifier specified %@", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v15 = (void *)MEMORY[0x1E0CB35C8];
    v16 = *MEMORY[0x1E0CB8C70];
    v17 = 2;
    goto LABEL_11;
  }
  if (objc_msgSend(v7, "integerValue") != 1)
  {
    v15 = (void *)MEMORY[0x1E0CB35C8];
    v16 = *MEMORY[0x1E0CB8C70];
    v17 = 43;
LABEL_11:
    objc_msgSend(v15, "errorWithDomain:code:userInfo:", v16, v17, 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v18);

    goto LABEL_12;
  }
  objc_msgSend(v4, "name");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _handleRequestToCancelHomeInvitation:saveReason:](self, "_handleRequestToCancelHomeInvitation:saveReason:", v9, v10);

LABEL_12:
}

- (void)_handleRequestToCancelHomeInvitation:(id)a3 saveReason:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "UUIDString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "describeWithFormat");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v13;
    v18 = 2112;
    v19 = v14;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Updating invitation %@ to canceled due to request from inviter", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "removeBulletinWithRecordID:", v9);

  -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v11, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v6, 1);
  -[HMDHomeManager _removeIncomingInvitation:](v11, "_removeIncomingInvitation:", v6);
  -[HMDHomeManager _saveWithReason:postSyncNotification:](v11, "_saveWithReason:postSyncNotification:", v7, 0);

}

- (void)_handleRequestToUpdateHomeInvitationFromLocalUser:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  id v11;

  v11 = a3;
  objc_msgSend(v11, "uuidForKey:", CFSTR("kInvitationIdentifierKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "numberForKey:", CFSTR("kInvitationStateKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "uuidForKey:", CFSTR("kHomeUUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CBA950], "authWithMessage:", v11);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && v5 && v6)
  {
    v8 = objc_msgSend(v5, "integerValue");
    objc_msgSend(v11, "name");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _processRequestToUpdateHomeInvitation:invitationState:homeUUID:authStatus:messageName:message:](self, "_processRequestToUpdateHomeInvitation:invitationState:homeUUID:authStatus:messageName:message:", v4, v8, v6, v7, v9, v11);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 3, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "responseHandler");
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v10)[2](v10, v9, 0);

  }
}

- (void)processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _QWORD block[5];
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  int64_t v31;

  v14 = a3;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  -[HMDHomeManager workQueue](self, "workQueue");
  v19 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __111__HMDHomeManager_processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke;
  block[3] = &unk_1E89BDFA0;
  block[4] = self;
  v26 = v14;
  v30 = v18;
  v31 = a4;
  v27 = v15;
  v28 = v16;
  v29 = v17;
  v20 = v18;
  v21 = v17;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  dispatch_async(v19, block);

}

- (void)_processRequestToUpdateHomeInvitation:(id)a3 invitationState:(int64_t)a4 homeUUID:(id)a5 authStatus:(id)a6 messageName:(id)a7 message:(id)a8
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  id v25;
  void *v26;
  NSObject *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  char v53;
  id v54;
  void *v55;
  _QWORD v56[5];
  _QWORD v57[5];
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  void *v63;
  __int16 v64;
  void *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  -[HMDHomeManager incomingInvitations](self, "incomingInvitations");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "hmf_firstObjectWithValue:forKeyPath:", v14, CFSTR("identifier"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    +[HMDHomeInviteLogEvent updateWithInvitationState:isFMFDevice:](HMDHomeInviteLogEvent, "updateWithInvitationState:isFMFDevice:", a4, isThisDeviceDesignatedFMFDevice());
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      -[HMDHomeManager logEventSubmitter](self, "logEventSubmitter");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "submitLogEvent:", v21);

    }
    if ((unint64_t)a4 <= 7 && ((1 << a4) & 0xD8) != 0)
    {
      objc_msgSend(v20, "identifier");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "UUIDString");
      v55 = (void *)objc_claimAutoreleasedReturnValue();

      v24 = objc_msgSend(v20, "isExpired");
      if (a4 == 7 || v24)
      {
        v50 = v17;
        v51 = v16;
        v52 = v15;
        objc_msgSend(v18, "numberForKey:", CFSTR("kInvitationResponseOptionsKey"));
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = objc_msgSend(v31, "integerValue");

        v33 = (void *)MEMORY[0x1D17BA0A0]();
        v34 = self;
        HMFGetOSLogHandle();
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          v49 = v33;
          HMFGetLogIdentifier();
          v48 = v18;
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "isExpired");
          HMFBooleanToString();
          v53 = v32;
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          HMFBooleanToString();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          HMFBooleanToString();
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138544130;
          v59 = v36;
          v60 = 2112;
          v61 = v37;
          v62 = 2112;
          v63 = v38;
          v64 = 2112;
          v65 = v39;
          _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Invitation has expired (%@) or was ignored (%@) / reported as spam (%@), removing and notifying clients.", buf, 0x2Au);

          v33 = v49;
          v32 = v53;

          v18 = v48;
        }
        v54 = v14;

        objc_autoreleasePoolPop(v33);
        if ((v32 & 1) != 0)
          -[HMDHomeManager _submitSpamReportToIDS:](v34, "_submitSpamReportToIDS:", v20);
        v56[0] = CFSTR("kBulletinRecordIDKey");
        v56[1] = CFSTR("kInvitationIdentifierKey");
        v57[0] = v55;
        v57[1] = v55;
        v56[2] = CFSTR("kInvitationStateKey");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v20, "invitationState"));
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v57[2] = v40;
        v56[3] = CFSTR("kHomeName");
        objc_msgSend(v20, "homeName");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v57[3] = v41;
        v56[4] = CFSTR("kHomeUUID");
        objc_msgSend(v20, "homeUUID");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "UUIDString");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v57[4] = v43;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v57, v56, 5);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager dismissBulletinOnAllMyTransientDevicesWithContext:](v34, "dismissBulletinOnAllMyTransientDevicesWithContext:", v44);

        if (objc_msgSend(v20, "isExpired"))
          v45 = 6;
        else
          v45 = 7;
        -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v34, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v20, v45);
        -[HMDHomeManager _removeIncomingInvitation:](v34, "_removeIncomingInvitation:", v20);
        v17 = v50;
        -[HMDHomeManager _saveWithReason:postSyncNotification:](v34, "_saveWithReason:postSyncNotification:", v50, 0);
        if (a4 == 3)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 23, 0);
          v46 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v46 = 0;
        }
        v15 = v52;
        v14 = v54;
        v16 = v51;
        objc_msgSend(v18, "respondWithPayload:error:", 0, v46);

      }
      else
      {
        -[HMDHomeManager _processLocalRequestToUpdateHomeInvitation:newState:authStatus:](self, "_processLocalRequestToUpdateHomeInvitation:newState:authStatus:", v20, a4, v16);
        objc_msgSend(v18, "respondWithPayload:", 0);
      }

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 43);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "respondWithError:", v47);

    }
  }
  else
  {
    v25 = v17;
    v26 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v28 = v16;
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "UUIDString");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v59 = v29;
      v60 = 2112;
      v61 = v30;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Invalid invite identifier specified %@", buf, 0x16u);

      v16 = v28;
    }

    objc_autoreleasePoolPop(v26);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "respondWithError:", v21);
    v17 = v25;
  }

}

- (void)_processLocalRequestToUpdateHomeInvitation:(id)a3 newState:(int64_t)a4 authStatus:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  void *v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  _QWORD v45[5];
  _QWORD v46[5];
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  objc_msgSend(v8, "identifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "UUIDString");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "identifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "UUIDString");
    v44 = v11;
    v17 = v9;
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CBA548], "homeInvitationStateDescription:", a4);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v48 = v15;
    v49 = 2112;
    v50 = v18;
    v51 = 2112;
    v52 = v19;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@[HomeManager] Processing request to update invitation %@ to state %@", buf, 0x20u);

    v9 = v17;
    v11 = v44;

  }
  objc_autoreleasePoolPop(v12);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "removeBulletinWithRecordID:", v11);

  v45[0] = CFSTR("kBulletinRecordIDKey");
  v45[1] = CFSTR("kInvitationIdentifierKey");
  v46[0] = v11;
  v46[1] = v11;
  v45[2] = CFSTR("kInvitationStateKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v46[2] = v21;
  v45[3] = CFSTR("kHomeName");
  objc_msgSend(v8, "homeName");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v46[3] = v22;
  v45[4] = CFSTR("kHomeUUID");
  objc_msgSend(v8, "homeUUID");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "UUIDString");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v46[4] = v24;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v46, v45, 5);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager dismissBulletinOnAllMyTransientDevicesWithContext:](v13, "dismissBulletinOnAllMyTransientDevicesWithContext:", v25);

  objc_msgSend(v8, "resolutionHandler");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
    if (a4 == 3)
      objc_msgSend(v8, "accept");
    else
      objc_msgSend(v8, "decline");
  }
  else
  {
    objc_msgSend(v8, "homeUUID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager __sendUpdateRequestToAdminForInvitation:homeUUID:invitationState:authStatus:](v13, "__sendUpdateRequestToAdminForInvitation:homeUUID:invitationState:authStatus:", v8, v27, a4, v9);

    if (a4 == 3)
    {
      -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v13, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v8, 5);
      -[HMDHomeManager uuidsOfRemovedHomes](v13, "uuidsOfRemovedHomes");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "homeUUID");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v28, "containsObject:", v29);

      if (v30)
      {
        -[HMDHomeManager uuidsOfRemovedHomes](v13, "uuidsOfRemovedHomes");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "homeUUID");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "removeObject:", v32);

        v33 = (void *)MEMORY[0x1D17BA0A0]();
        v34 = v13;
        HMFGetOSLogHandle();
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "homeUUID");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "UUIDString");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v48 = v36;
          v49 = 2112;
          v50 = v38;
          _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_INFO, "%{public}@Removing home with UUID %@ from uuids of guest homes removed locally since invite was accepted", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v33);
      }
      objc_msgSend(v8, "homeUUID");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _homeWithUUID:](v13, "_homeWithUUID:", v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "owner");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "account");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "senderCorrelationIdentifier");
      v43 = (void *)objc_claimAutoreleasedReturnValue();

      -[HMDHomeManager _stopTrackingRemovedHomeUserMergeId:](v13, "_stopTrackingRemovedHomeUserMergeId:", v43);
    }
    else
    {
      -[HMDHomeManager _removeIncomingInvitation:](v13, "_removeIncomingInvitation:", v8);
      -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:](v13, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v8, a4);
    }
    -[HMDHomeManager _saveWithReason:postSyncNotification:](v13, "_saveWithReason:postSyncNotification:", CFSTR("kUpdateInvitationStateRequestKey"), 0);
    -[HMDHomeManager _updateIncomingInvitesPresent](v13, "_updateIncomingInvitesPresent");
  }

}

- (BOOL)_submitSpamReportToIDS:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  char v33;
  void *v34;
  HMDHomeManager *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  HMDHomeManager *v39;
  NSObject *v40;
  void *v41;
  void *v42;
  int v44;
  void *v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "account");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handles");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "firstObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "remoteDestinationString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "inviterUserID");
  v11 = objc_claimAutoreleasedReturnValue();
  if (!v11)
    goto LABEL_15;
  v12 = (void *)v11;
  objc_msgSend(v4, "homeName");
  v13 = objc_claimAutoreleasedReturnValue();
  if (!v13)
    goto LABEL_14;
  v14 = (void *)v13;
  objc_msgSend(v4, "identifier");
  v15 = objc_claimAutoreleasedReturnValue();
  if (!v15)
  {

LABEL_14:
    goto LABEL_15;
  }
  v16 = (void *)v15;
  objc_msgSend(v4, "startDate");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17 && v10)
  {
    objc_msgSend(v4, "inviterUserID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v18, *MEMORY[0x1E0D343C8]);

    objc_msgSend(v4, "homeName");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v19, CFSTR("home-name"));

    objc_msgSend(v4, "identifier");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "UUIDString");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v21, *MEMORY[0x1E0D343B8]);

    v22 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v4, "startDate");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "timeIntervalSince1970");
    objc_msgSend(v22, "numberWithInteger:", (uint64_t)v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v25, *MEMORY[0x1E0D343D8]);

    objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, *MEMORY[0x1E0D343C0]);
    v26 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v5, "setObject:forKeyedSubscript:", CFSTR("HomeKitInviteSpam"), *MEMORY[0x1E0D343D0]));
    v27 = self;
    HMFGetOSLogHandle();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = 138543618;
      v45 = v29;
      v46 = 2112;
      v47 = v5;
      _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Reporting invitation as spam: %@", (uint8_t *)&v44, 0x16u);

    }
    objc_autoreleasePoolPop(v26);
    +[HMDIDSServiceManager sharedManager](HMDIDSServiceManager, "sharedManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "service");
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    v32 = (void *)objc_msgSend(v5, "copy");
    v33 = objc_msgSend(v31, "reportSpamMessage:", v32);

    if ((v33 & 1) == 0)
    {
      v34 = (void *)MEMORY[0x1D17BA0A0]();
      v35 = v27;
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = 138543362;
        v45 = v37;
        _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_FAULT, "%{public}@Spam report was rejected for some reason. Please file a bug.", (uint8_t *)&v44, 0xCu);

      }
      objc_autoreleasePoolPop(v34);
    }

    goto LABEL_18;
  }
LABEL_15:
  v38 = (void *)MEMORY[0x1D17BA0A0]();
  v39 = self;
  HMFGetOSLogHandle();
  v40 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "identifier");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = 138543874;
    v45 = v41;
    v46 = 2112;
    v47 = v42;
    v48 = 2112;
    v49 = v10;
    _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_ERROR, "%{public}@Unexpected nil value for invitation %@, reporter %@", (uint8_t *)&v44, 0x20u);

  }
  objc_autoreleasePoolPop(v38);
  v33 = 0;
LABEL_18:

  return v33;
}

- (id)getOrCreateLocalPairingIdentity:(id *)a3
{
  void *v4;
  int v5;
  id v6;
  id v7;
  id v8;
  HMDHomeManagerModel *v9;
  BOOL v10;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  const char *v21;
  void *v22;
  void *v23;
  BOOL v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  int v30;
  HMDHomeManagerModel *v31;
  void *v32;
  HMDHomeManager *v33;
  NSObject *v34;
  void *v35;
  HMDHomeManagerModel *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id *v41;
  void *v42;
  void *v43;
  void *v44;
  HMDHomeManager *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v58;
  id v59;
  void *v60;
  HMDHomeManagerModel *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  void *v71;
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  id v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = 0;
  v69 = 0;
  v66 = 0;
  v67 = 0;
  v5 = objc_msgSend(v4, "getAllAvailableControllerPublicKeys:secretKeys:userNames:error:", &v69, &v68, &v67, &v66);
  v6 = v69;
  v7 = v68;
  v8 = v67;
  v9 = (HMDHomeManagerModel *)v66;

  if (v5)
    v10 = v9 == 0;
  else
    v10 = 0;
  if (v10 && v6 != 0 && v8 != 0)
  {
    if (objc_msgSend(v8, "count"))
    {
      v13 = objc_msgSend(v8, "count");
      if (v13 == objc_msgSend(v6, "count"))
      {
        objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
        v14 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "objectAtIndexedSubscript:", 0);
        v15 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "objectAtIndexedSubscript:", 0);
        v16 = (id)objc_claimAutoreleasedReturnValue();
        if ((unint64_t)objc_msgSend(v8, "count") < 2)
        {
          objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "activeControllerPairingIdentifier");
          v44 = (void *)objc_claimAutoreleasedReturnValue();

          if (v44)
          {
LABEL_38:
            v41 = a3;
LABEL_39:
            if (v14 && v15 && v16)
            {
              v47 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28658]), "initWithPairingKeyData:", v14);
              v48 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28658]), "initWithPairingKeyData:", v15);
              v42 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D165A8]), "initWithIdentifier:publicKey:privateKey:permissions:", v16, v47, v48, 0);

              v31 = 0;
              goto LABEL_47;
            }
            if (v41)
            {
              v60 = (void *)MEMORY[0x1E0CB35C8];
              v49 = *MEMORY[0x1E0CB8C70];
              v70 = *MEMORY[0x1E0CB2D50];
              objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v50, "localizedStringForKey:value:table:", CFSTR("Unable to get local pairing identity"), &stru_1E89C3E38, 0);
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              v71 = v51;
              objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v71, &v70, 1);
              v52 = v15;
              v53 = v14;
              v54 = v6;
              v55 = v7;
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v60, "errorWithDomain:code:userInfo:", v49, 2, v56);
              *a3 = (id)objc_claimAutoreleasedReturnValue();

              v7 = v55;
              v6 = v54;
              v14 = v53;
              v15 = v52;

            }
            v31 = 0;
LABEL_46:
            v42 = 0;
            goto LABEL_47;
          }
          v58 = v7;
          v17 = (void *)MEMORY[0x1D17BA0A0]();
          v45 = self;
          HMFGetOSLogHandle();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v73 = v20;
            v74 = 2112;
            v75 = v16;
            v21 = "%{public}@Setting controller key as active as none was found: %@";
            goto LABEL_36;
          }
        }
        else
        {
          v58 = v7;
          v17 = (void *)MEMORY[0x1D17BA0A0]();
          v18 = self;
          HMFGetOSLogHandle();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v73 = v20;
            v74 = 2112;
            v75 = v16;
            v21 = "%{public}@Found multiple controller keys, using first entry as the controller username: %@";
LABEL_36:
            _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, v21, buf, 0x16u);

          }
        }

        objc_autoreleasePoolPop(v17);
        objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "updateActiveControllerPairingIdentifier:", v16);

        v7 = v58;
        goto LABEL_38;
      }
    }
  }
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v22, "supportsKeychainSync"))
  {
    +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v23, "isRemoteGatewayCapable") & 1) != 0)
    {
      v24 = +[HMDKeyTransferAgentServer isPeerAvailable](HMDKeyTransferAgentServer, "isPeerAvailable");

      if (!v24)
        goto LABEL_20;
    }
    else
    {

    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB8C70], 2, 0);
    v31 = (HMDHomeManagerModel *)objc_claimAutoreleasedReturnValue();
    v16 = 0;
    v15 = 0;
    v14 = 0;
    goto LABEL_29;
  }

LABEL_20:
  v59 = v7;
  v25 = (void *)MEMORY[0x1D17BA0A0]();
  v26 = self;
  HMFGetOSLogHandle();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v73 = v28;
    _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Local controller key does not exist, creating one", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v25);
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = 0;
  v65 = 0;
  v62 = v9;
  v63 = 0;
  v30 = objc_msgSend(v29, "getControllerPublicKey:secretKey:username:allowCreation:error:", &v65, &v64, &v63, 1, &v62);
  v14 = v65;
  v15 = v64;
  v16 = v63;
  v31 = v62;

  if (!v30)
  {
    v7 = v59;
    goto LABEL_30;
  }
  v32 = (void *)MEMORY[0x1D17BA0A0]();
  v33 = v26;
  HMFGetOSLogHandle();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v73 = v35;
    _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_DEFAULT, "%{public}@Created new local controller key, forcing push to HomeManager zone to anchor key...", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v32);
  v36 = [HMDHomeManagerModel alloc];
  -[HMDHomeManager uuid](v33, "uuid");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:](v36, "initWithObjectChangeType:uuid:parentUUID:", 1, v37, 0);

  -[HMDHomeManagerModel setControllerKeyIdentifier:](v9, "setControllerKeyIdentifier:", v16);
  -[HMDHomeManager backingStore](v33, "backingStore");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "transaction:options:", CFSTR("HMD.hm"), v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v40, "add:withMessage:", v9, 0);
  objc_msgSend(v40, "run");

  v7 = v59;
LABEL_29:

LABEL_30:
  v41 = a3;
  if (!v31)
    goto LABEL_39;
  if (!a3)
    goto LABEL_46;
  v31 = objc_retainAutorelease(v31);
  v42 = 0;
  *a3 = v31;
LABEL_47:

  return v42;
}

- (BOOL)getOrCreateControllerPublicKey:(id *)a3 controllerUsername:(id *)a4 error:(id *)a5
{
  void *v9;
  id v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  BOOL v20;
  void *v21;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  -[HMDHomeManager getOrCreateLocalPairingIdentity:](self, "getOrCreateLocalPairingIdentity:", &v23);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v23;
  v11 = v10;
  if (v10)
  {
    if (a5)
      *a5 = objc_retainAutorelease(v10);
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v25 = v15;
    v26 = 2112;
    v27 = v11;
    v16 = "%{public}@Failed to get or create local pairing identity: %@";
    v17 = v14;
    v18 = OS_LOG_TYPE_INFO;
    v19 = 22;
    goto LABEL_6;
  }
  if (!v9)
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = self;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v25 = v15;
    v16 = "%{public}@Unable to get identity but no error provided";
    v17 = v14;
    v18 = OS_LOG_TYPE_DEFAULT;
    v19 = 12;
LABEL_6:
    _os_log_impl(&dword_1CD062000, v17, v18, v16, buf, v19);

LABEL_7:
    objc_autoreleasePoolPop(v12);
    v20 = 0;
    goto LABEL_14;
  }
  if (a3)
  {
    objc_msgSend(v9, "publicKey");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "data");
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  if (a4)
  {
    objc_msgSend(v9, "identifier");
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  v20 = 1;
LABEL_14:

  return v20;
}

- (void)__sendUpdateRequestToAdminForInvitation:(id)a3 homeUUID:(id)a4 invitationState:(int64_t)a5 authStatus:(id)a6
{
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  _BOOL4 v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  id v40;
  id v41[2];
  id location;
  _QWORD aBlock[5];
  id v44;
  id v45;
  id v46;
  id v47;
  uint8_t buf[4];
  void *v49;
  _QWORD v50[2];
  _QWORD v51[4];

  v51[2] = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v35 = a4;
  v34 = a6;
  v50[0] = CFSTR("kInvitationIdentifierKey");
  objc_msgSend(v10, "identifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v50[1] = CFSTR("kInvitationStateKey");
  v51[0] = v12;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v51[1] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v51, v50, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)objc_msgSend(v14, "mutableCopy");

  if (a5 == 3)
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v49 = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Get or create controller key before sending invite accept", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    v46 = 0;
    v47 = 0;
    v20 = -[HMDHomeManager getOrCreateControllerPublicKey:controllerUsername:error:](v17, "getOrCreateControllerPublicKey:controllerUsername:error:", &v47, &v46, 0);
    v21 = v47;
    v22 = v46;
    if (v20)
    {
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v21, CFSTR("kControllerPublicKey"));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v22, CFSTR("kControllerPairingNameKey"));
    }
    -[HMDHomeManager appleAccountManager](v17, "appleAccountManager");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "account");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "primaryHandle");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (v25)
    {
      +[HMDAccountHandleFormatter defaultFormatter](HMDAccountHandleFormatter, "defaultFormatter");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "stringForObjectValue:", v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (v27)
        objc_msgSend(v15, "setObject:forKeyedSubscript:", v27, CFSTR("kUserIDKey"));

    }
    objc_msgSend(v10, "inviterAccount");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    if (v28)
    {
      +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "inviterIdentity");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "registerIdentity:account:object:", v30, v28, v10);

    }
    if (v34)
      objc_msgSend(v34, "addToPayload:", v15);

  }
  objc_initWeak((id *)buf, self);
  v31 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __94__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus___block_invoke;
  aBlock[3] = &unk_1E89BDFC8;
  objc_copyWeak(&v45, (id *)buf);
  aBlock[4] = self;
  v32 = v10;
  v44 = v32;
  v33 = _Block_copy(aBlock);
  if (a5 == 3)
  {
    objc_initWeak(&location, self);
    v36[0] = v31;
    v36[1] = 3221225472;
    v36[2] = __94__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus___block_invoke_1210;
    v36[3] = &unk_1E89BDFF0;
    objc_copyWeak(v41, &location);
    v37 = v32;
    v38 = v35;
    v39 = v15;
    v41[1] = (id)3;
    v40 = v33;
    -[HMDHomeManager addIssuerKeyToMessagePayload:invitation:completion:](self, "addIssuerKeyToMessagePayload:invitation:completion:", v39, v37, v36);

    objc_destroyWeak(v41);
    objc_destroyWeak(&location);
  }
  else
  {
    -[HMDHomeManager sendRequestForInvitation:homeUUID:payload:invitationState:responseHandler:](self, "sendRequestForInvitation:homeUUID:payload:invitationState:responseHandler:", v32, v35, v15, a5, v33);
  }

  objc_destroyWeak(&v45);
  objc_destroyWeak((id *)buf);

}

- (void)sendRequestForInvitation:(id)a3 homeUUID:(id)a4 payload:(id)a5 invitationState:(int64_t)a6 responseHandler:(id)a7
{
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;

  v11 = a7;
  v12 = a5;
  v13 = a4;
  objc_msgSend(a3, "invitationData");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:messagePayload:", CFSTR("kUpdateHomeInvitationStateInternalRequestKey"), v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "inviterUserID");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager workQueue](self, "workQueue");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __92__HMDHomeManager_sendRequestForInvitation_homeUUID_payload_invitationState_responseHandler___block_invoke;
  v20[3] = &unk_1E89BE018;
  v21 = v15;
  v22 = v11;
  v18 = v15;
  v19 = v11;
  -[HMDHomeManager sendUnsecureMessage:target:userID:responseQueue:responseHandler:](self, "sendUnsecureMessage:target:userID:responseQueue:responseHandler:", v18, v13, v16, v17, v20);

}

- (void)addIssuerKeyToMessagePayload:(id)a3 invitation:(id)a4 completion:(id)a5
{
  (*((void (**)(id, _QWORD))a5 + 2))(a5, 0);
}

- (void)teardownRemoteAccessForHome:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __46__HMDHomeManager_teardownRemoteAccessForHome___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_teardownRemoteAccessForHome:(id)a3
{
  void *v4;
  void *v5;
  char v6;
  id v7;

  v7 = a3;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "residentDeviceManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isResidentAvailable");

  if ((v6 & 1) == 0)
    -[HMDHomeManager _teardownRemoteAccessForHomeCommon:isCompanion:](self, "_teardownRemoteAccessForHomeCommon:isCompanion:", v7, 0);

}

- (void)_teardownRemoteAccessForHomeThroughCompanion:(id)a3
{
  id v4;

  v4 = a3;
  if (isWatch())
    -[HMDHomeManager _teardownRemoteAccessForHomeCommon:isCompanion:](self, "_teardownRemoteAccessForHomeCommon:isCompanion:", v4, 1);

}

- (void)_teardownRemoteAccessForHomeCommon:(id)a3 isCompanion:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t v32[128];
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v4 = a4;
  v37 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUIDString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v34 = v10;
    v35 = 2112;
    v36 = v11;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Tearing down any previously setup remote access for home: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v4)
    objc_msgSend(v12, "setCompanionDevice:forHome:", 0, v7);
  else
    objc_msgSend(v12, "setRemoteAccessDevice:forHome:", 0, v7);

  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  -[HMDHomeManager pendingRemoteSessions](self, "pendingRemoteSessions", 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v29;
LABEL_8:
    v18 = 0;
    while (1)
    {
      if (*(_QWORD *)v29 != v17)
        objc_enumerationMutation(v14);
      v19 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v18);
      -[HMDHomeManager pendingRemoteSessions](self, "pendingRemoteSessions");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "objectForKeyedSubscript:", v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_msgSend(v21, "isEqual:", v6) & 1) != 0)
        break;

      if (v16 == ++v18)
      {
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
        if (v16)
          goto LABEL_8;
        goto LABEL_14;
      }
    }
    v22 = v19;

    if (!v22)
      goto LABEL_20;
    v23 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "UUIDString");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v34 = v25;
      v35 = 2112;
      v36 = v26;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Clearing pending remote session with identifier %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v23);
    -[HMDHomeManager pendingRemoteSessions](self, "pendingRemoteSessions");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "removeObjectForKey:", v22);

  }
  else
  {
LABEL_14:
    v22 = v14;
  }

LABEL_20:
}

- (void)_postiCloudSigninState:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const __CFString *v20;
  uint64_t v21;

  v3 = a3;
  v21 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    v9 = CFSTR("not");
    if (v3)
      v9 = &stru_1E89C3E38;
    *(_DWORD *)buf = 138543618;
    v18 = v7;
    v19 = 2112;
    v20 = v9;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Detected that user is %@ signed into iCloud, posting notification", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v10 = (void *)MEMORY[0x1E0D285D0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3, CFSTR("kAccountIsActiveKey"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "internalMessageWithName:messagePayload:", CFSTR("kiCloudAccountChangedNotificationKey"), v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "dispatchMessage:target:", v13, 0);

}

- (void)setAppDataWithMessage:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __40__HMDHomeManager_setAppDataWithMessage___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_setAppDataWithMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  HMDApplicationData *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  HMDApplicationData *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  HMDMobileAssetManager *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99E08];
  objc_msgSend(v4, "messagePayload");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = CFSTR("com.apple.homekit-entitledclient.identifer");
  objc_msgSend(v4, "dictionaryForKey:", CFSTR("kAppDataInformationKey"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager appData](self, "appData");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (HMDApplicationData *)objc_msgSend(v10, "copy");
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 138543618;
    v28 = v15;
    v29 = 2112;
    v30 = v9;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Client needs to set home manager appData to %@", (uint8_t *)&v27, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  if (v9)
  {
    if (!v11)
    {
      v16 = [HMDApplicationData alloc];
      -[HMDHomeManager uuid](v13, "uuid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = -[HMDApplicationData initWithParentUUID:](v16, "initWithParentUUID:", v17);

    }
    -[HMDApplicationData setApplicationData:forIdentifier:](v11, "setApplicationData:forIdentifier:", v9, CFSTR("com.apple.homekit-entitledclient.identifer"));
    -[HMDApplicationData modelObjectWithChangeType:](v11, "modelObjectWithChangeType:", 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18;
    if (!v10)
      objc_msgSend(v18, "setObjectChangeType:", 1);
    objc_msgSend(v7, "setObject:forKey:", v9, CFSTR("kAppDataInformationKey"));
  }
  else
  {
    -[HMDApplicationData removeApplicationDataForIdentifier:](v11, "removeApplicationDataForIdentifier:", CFSTR("com.apple.homekit-entitledclient.identifer"));
    if (v11)
    {
      -[HMDApplicationData modelObjectWithChangeType:](v11, "modelObjectWithChangeType:", 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v19 = 0;
    }
  }
  -[HMDHomeManager mobileAssetManager](v13, "mobileAssetManager");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v20)
  {
    v21 = objc_alloc_init(HMDMobileAssetManager);
    -[HMDHomeManager setMobileAssetManager:](v13, "setMobileAssetManager:", v21);

  }
  -[HMDHomeManager mobileAssetManager](v13, "mobileAssetManager");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "handleMetadataAssetUpdated");

  if (v19)
  {
    -[HMDHomeManager backingStore](v13, "backingStore");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "name");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "transaction:options:", v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v26, "add:withMessage:", v19, v4);
    objc_msgSend(v26, "run");

  }
  else
  {
    objc_msgSend(v4, "respondWithPayload:", 0);
  }

}

- (void)processAppDataModelUpdate:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  HMDApplicationData *v10;
  void *v11;
  void *v12;
  HMDApplicationData *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[HMDHomeManager appData](self, "appData");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[HMDHomeManager appData](self, "appData");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateWithModel:", v6);

  }
  else
  {
    v10 = [HMDApplicationData alloc];
    objc_msgSend(v6, "appDataDictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager uuid](self, "uuid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[HMDApplicationData initWithDictionary:parentUUID:](v10, "initWithDictionary:parentUUID:", v11, v12);
    -[HMDHomeManager setAppData:](self, "setAppData:", v13);

    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "appDataDictionary");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v17;
      v22 = 2112;
      v23 = v18;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Updating the application data : %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
  }
  objc_msgSend(v7, "transactionResult");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "markChanged");
  objc_msgSend(v7, "respondWithPayload:", 0);

}

- (void)processAppDataModelRemove:(id)a3 message:(id)a4
{
  id v5;

  v5 = a4;
  -[HMDHomeManager setAppData:](self, "setAppData:", 0);
  objc_msgSend(v5, "respondWithPayload:", 0);

}

- (void)notifyClientsResidentCapable:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const __CFString *v11;
  _QWORD v12[2];

  v3 = a3;
  v12[1] = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1E0D285D0];
  v11 = CFSTR("kResidentCapableDeviceKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "entitledMessageWithName:messagePayload:", CFSTR("kResidentDeviceCapableUpdatedNotificationKey"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](self, "uuid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "sendMessage:target:andInvokeCompletionHandler:", v8, v10, 0);

  if (v3 && -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"))
    -[HMDHomeManager _updateResidentEnabledOnThisDevice:forceNotify:message:](self, "_updateResidentEnabledOnThisDevice:forceNotify:message:", 1, 1, 0);

}

- (void)_handleEnableResidentForThisDeviceRequest:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  char v9;

  v4 = a3;
  v9 = 0;
  v5 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kResidentEnabledKey"), &v9);
  if (v9)
  {
    -[HMDHomeManager _updateResidentEnabledOnThisDevice:forceNotify:message:](self, "_updateResidentEnabledOnThisDevice:forceNotify:message:", v5, 0, v4);
  }
  else
  {
    objc_msgSend(v4, "responseHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v8)[2](v8, v7, 0);

    }
  }

}

- (void)_updateResidentEnabledOnThisDevice:(BOOL)a3 forceNotify:(BOOL)a4 message:(id)a5
{
  _BOOL4 v5;
  _BOOL4 v6;
  id v8;
  uint64_t v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  HMDHomeManager *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD v34[4];
  id v35;
  const __CFString *v36;
  void *v37;
  uint8_t buf[4];
  void *v39;
  uint64_t v40;

  v5 = a4;
  v6 = a3;
  v40 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  if (-[HMDHomeManager isResidentCapable](self, "isResidentCapable"))
  {
    v9 = -[HMDHomeManager residentEnabledState](self, "residentEnabledState");
    if (v6)
    {
      if (v9 != 2)
      {
        v9 = -[HMDHomeManager setResidentEnabledState:](self, "setResidentEnabledState:", 2);
        v5 = 1;
      }
      v10 = (void *)MEMORY[0x1D17BA0A0](v9);
      v11 = self;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v13;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Enabled as a resident device, adding ourselves as a resident to all homes", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
      -[HMDHomeManager homes](v11, "homes");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _addCurrentResidentDeviceToHomes:](v11, "_addCurrentResidentDeviceToHomes:", v14);

      -[HMDHomeManager messageDispatcher](v11, "messageDispatcher");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "enableMessageServer");
    }
    else
    {
      if (v9 != 1)
      {
        v5 = 1;
        v9 = -[HMDHomeManager setResidentEnabledState:](self, "setResidentEnabledState:", 1);
      }
      v20 = (void *)MEMORY[0x1D17BA0A0](v9);
      v21 = self;
      HMFGetOSLogHandle();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v39 = v23;
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Disabled as a resident device, removing ourselves as a resident from all homes", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v20);
      -[HMDHomeManager homes](v21, "homes");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager _removeCurrentResidentDeviceFromHomes:](v21, "_removeCurrentResidentDeviceFromHomes:", v24);

      -[HMDHomeManager messageDispatcher](v21, "messageDispatcher");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "disableMessageServer");
    }
  }
  else
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = self;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v39 = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Not resident capable, removing ourselves as a resident from all homes", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    -[HMDHomeManager homes](v17, "homes");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _removeCurrentResidentDeviceFromHomes:](v17, "_removeCurrentResidentDeviceFromHomes:", v15);
  }

  if (v8 || v5)
  {
    v36 = CFSTR("kResidentEnabledKey");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = v25;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    v27 = (void *)MEMORY[0x1E0D285D0];
    objc_msgSend(v8, "identifier");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "entitledMessageWithName:identifier:messagePayload:", CFSTR("kResidentEnabledForThisDeviceUpdatedNotificationKey"), v28, v26);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager uuid](self, "uuid");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = __73__HMDHomeManager__updateResidentEnabledOnThisDevice_forceNotify_message___block_invoke;
    v34[3] = &unk_1E89C2730;
    v35 = v8;
    objc_msgSend(v30, "sendMessage:target:andInvokeCompletionHandler:", v29, v31, v34);

    -[HMDHomeManager notificationCenter](self, "notificationCenter");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerResidentEnabledChangedNotification"), self, v26);

  }
  objc_msgSend(v8, "name");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager saveWithReason:information:saveOptions:](self, "saveWithReason:information:saveOptions:", v33, 0, 0);

}

- (void)handleHomeCurrentDeviceResidentEligibleNotification:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  _QWORD v11[5];
  id v12;

  v4 = a3;
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isResidentCapable");

  if (v6)
  {
    objc_msgSend(v4, "object");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    if (objc_msgSend(v9, "hasReachableAccessories"))
    {
      -[HMDHomeManager workQueue](self, "workQueue");
      v10 = objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __70__HMDHomeManager_handleHomeCurrentDeviceResidentEligibleNotification___block_invoke;
      v11[3] = &unk_1E89C2328;
      v11[4] = self;
      v12 = v9;
      dispatch_async(v10, v11);

    }
  }

}

- (void)_addCurrentResidentDeviceToHomes:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (-[HMDHomeManager isResidentEnabled](self, "isResidentEnabled"))
  {
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "device");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(v6, "capabilities");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "isResidentCapable");

      if (v8)
      {
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v9 = v4;
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v19;
          do
          {
            for (i = 0; i != v11; ++i)
            {
              if (*(_QWORD *)v19 != v12)
                objc_enumerationMutation(v9);
              v14 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
              if (objc_msgSend(v14, "isOwnerUser", (_QWORD)v18)
                && objc_msgSend(v14, "hasReachableAccessories"))
              {
                objc_msgSend(v14, "addResidentCapableDevice:", v6);
              }
            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
          }
          while (v11);
        }

      }
    }

  }
  else
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v24 = v17;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Not adding ourselves as a resident as we are disabled as a resident", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
  }

}

- (void)_removeCurrentResidentDeviceFromHomes:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isResidentCapable");

  if (v6)
  {
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "device");
    v8 = (id)objc_claimAutoreleasedReturnValue();

    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v21 = v4;
    v9 = v4;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v27 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
          if (v8)
          {
LABEL_8:
            if (objc_msgSend(v14, "isOwnerUser"))
              objc_msgSend(v14, "removeResidentCapableDevice:", v8);
          }
          else
          {
            v24 = 0u;
            v25 = 0u;
            v22 = 0u;
            v23 = 0u;
            objc_msgSend(v14, "residentCapableDevices");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
            if (v16)
            {
              v17 = v16;
              v18 = *(_QWORD *)v23;
LABEL_12:
              v19 = 0;
              while (1)
              {
                if (*(_QWORD *)v23 != v18)
                  objc_enumerationMutation(v15);
                v20 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v19);
                if ((objc_msgSend(v20, "isCurrentDevice") & 1) != 0)
                  break;
                if (v17 == ++v19)
                {
                  v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
                  if (v17)
                    goto LABEL_12;
                  goto LABEL_18;
                }
              }
              v8 = v20;

              if (v8)
                goto LABEL_8;
            }
            else
            {
LABEL_18:

              v8 = 0;
            }
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v11);
    }

    v4 = v21;
  }

}

- (void)_handleResolveAccount:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  _QWORD v20[4];
  id v21;
  id v22;
  _BYTE location[12];
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB8EB8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_initWeak((id *)location, self);
      +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __40__HMDHomeManager__handleResolveAccount___block_invoke;
      v20[3] = &unk_1E89BE040;
      objc_copyWeak(&v22, (id *)location);
      v21 = v4;
      objc_msgSend(v7, "_resolveAccountForHandle:completionHandler:", v6, v20);

      objc_destroyWeak(&v22);
      objc_destroyWeak((id *)location);
    }
    else
    {
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = self;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)location = 138543618;
        *(_QWORD *)&location[4] = v17;
        v24 = 2112;
        v25 = v5;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Invalid account handle: %@", location, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(v4, "responseHandler");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 19);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "responseHandler");
        v19 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v19)[2](v19, v18, 0);

        v6 = 0;
      }
    }
    goto LABEL_12;
  }
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 138543362;
    *(_QWORD *)&location[4] = v11;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Message is missing account handle", location, 0xCu);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(v4, "responseHandler");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v13)[2](v13, v6, 0);

LABEL_12:
  }

}

- (void)_handleRemoveAccount:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  int v26;
  void *v27;
  HMDHomeManager *v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void (**v33)(_QWORD, _QWORD, _QWORD);
  void *v34;
  HMDHomeManager *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  HMDHomeManager *v41;
  NSObject *v42;
  void *v43;
  void (**v44)(_QWORD, _QWORD, _QWORD);
  void (**v45)(_QWORD, _QWORD, _QWORD);
  void *v46;
  HMDHomeManager *v47;
  NSObject *v48;
  void *v49;
  const char *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  HMDHomeManager *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  HMDHomeManager *v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  void (**v66)(_QWORD, _QWORD, _QWORD);
  void *v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint8_t buf[4];
  void *v74;
  __int16 v75;
  void *v76;
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "messagePayload");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "valueForKey:", CFSTR("kIdentifierKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v4, "uuidForKey:", CFSTR("kIdentifierKey"));
    v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v67 = v4;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      -[HMDHomeManager accountRegistry](self, "accountRegistry");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "accounts");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v69, v77, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v70;
LABEL_5:
        v13 = 0;
        while (1)
        {
          if (*(_QWORD *)v70 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * v13);
          objc_msgSend(v14, "identifier");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "identifier");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "hmf_isEqualToUUID:", v7);

          if ((v17 & 1) != 0)
            break;
          if (v11 == ++v13)
          {
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v69, v77, 16);
            if (v11)
              goto LABEL_5;
            goto LABEL_11;
          }
        }
        v25 = v14;

        if (!v25)
          goto LABEL_24;
        v4 = v67;
        goto LABEL_19;
      }
LABEL_11:

LABEL_24:
      v34 = (void *)MEMORY[0x1D17BA0A0]();
      v35 = self;
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      v4 = v67;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v74 = v37;
        v75 = 2112;
        v76 = v7;
        _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to find matching account with identifier: %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v34);
      objc_msgSend(v67, "responseHandler");
      v25 = (id)objc_claimAutoreleasedReturnValue();

      if (!v25)
        goto LABEL_45;
      v38 = (void *)MEMORY[0x1E0CB35C8];
      v39 = 2;
    }
    else
    {
      v40 = (void *)MEMORY[0x1D17BA0A0]();
      v41 = self;
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v74 = v43;
        _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_ERROR, "%{public}@Message is missing account identifier", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v40);
      objc_msgSend(v4, "responseHandler");
      v25 = (id)objc_claimAutoreleasedReturnValue();

      if (!v25)
        goto LABEL_45;
      v38 = (void *)MEMORY[0x1E0CB35C8];
      v39 = 3;
    }
    goto LABEL_32;
  }
  objc_msgSend(v4, "messagePayload");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = *MEMORY[0x1E0CB8EB8];
  objc_msgSend(v18, "valueForKey:", *MEMORY[0x1E0CB8EB8]);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v20)
  {
    v46 = (void *)MEMORY[0x1D17BA0A0]();
    v47 = self;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v74 = v49;
      v50 = "%{public}@Message is missing account identifier";
LABEL_41:
      _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_ERROR, v50, buf, 0xCu);

    }
LABEL_42:

    objc_autoreleasePoolPop(v46);
    objc_msgSend(v4, "responseHandler");
    v55 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v55)
    {
      v25 = 0;
      goto LABEL_46;
    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v44 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v44[2](v44, v7, 0);
    goto LABEL_44;
  }
  objc_msgSend(v4, "stringForKey:", v19);
  v21 = objc_claimAutoreleasedReturnValue();
  if (!v21)
  {
    v46 = (void *)MEMORY[0x1D17BA0A0]();
    v47 = self;
    HMFGetOSLogHandle();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v74 = v49;
      v50 = "%{public}@Message is missing account handle";
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  v7 = (void (**)(_QWORD, _QWORD, _QWORD))v21;
  +[HMDAccountHandle accountHandleForDestination:](HMDAccountHandle, "accountHandleForDestination:", v21);
  v22 = objc_claimAutoreleasedReturnValue();
  if (!v22)
  {
    v56 = (void *)MEMORY[0x1D17BA0A0]();
    v57 = self;
    HMFGetOSLogHandle();
    v58 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v74 = v59;
      v75 = 2112;
      v76 = v7;
      _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_ERROR, "%{public}@Invalid account handle: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v56);
    objc_msgSend(v4, "responseHandler");
    v25 = (id)objc_claimAutoreleasedReturnValue();

    if (!v25)
      goto LABEL_45;
    v38 = (void *)MEMORY[0x1E0CB35C8];
    v39 = 19;
LABEL_32:
    objc_msgSend(v38, "hmErrorWithCode:", v39);
    v44 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "responseHandler");
    v45 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v45[2](v45, v44, 0);

LABEL_44:
    v25 = 0;
    goto LABEL_45;
  }
  v23 = (void *)v22;
  v68 = 0;
  +[HMDAccountRegistry sharedRegistry](HMDAccountRegistry, "sharedRegistry");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "accountForHandle:exists:", v23, &v68);
  v25 = (id)objc_claimAutoreleasedReturnValue();

  if (!v68)
  {
    v60 = (void *)MEMORY[0x1D17BA0A0]();
    v61 = self;
    HMFGetOSLogHandle();
    v62 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v74 = v63;
      v75 = 2112;
      v76 = v23;
      _os_log_impl(&dword_1CD062000, v62, OS_LOG_TYPE_ERROR, "%{public}@Failed to find account with handle: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v60);
    objc_msgSend(v4, "responseHandler");
    v64 = (void *)objc_claimAutoreleasedReturnValue();

    if (v64)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v66 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *, _QWORD))v66)[2](v66, v65, 0);

    }
    goto LABEL_45;
  }

LABEL_19:
  v26 = objc_msgSend(v25, "isCurrentAccount");
  v27 = (void *)MEMORY[0x1D17BA0A0]();
  v28 = self;
  HMFGetOSLogHandle();
  v29 = objc_claimAutoreleasedReturnValue();
  v30 = v29;
  if (v26)
  {
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v74 = v31;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove current account", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v27);
    objc_msgSend(v4, "responseHandler");
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v32)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "responseHandler");
      v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v33[2](v33, v7, 0);

LABEL_45:
    }
  }
  else
  {
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "shortDescription");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v74 = v51;
      v75 = 2112;
      v76 = v52;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_DEFAULT, "%{public}@Removing account: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v27);
    -[HMDHomeManager remoteAccountManager](v28, "remoteAccountManager");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "removeAccount:", v25);

    objc_msgSend(v4, "responseHandler");
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    if (v54)
    {
      objc_msgSend(v4, "responseHandler");
      v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v7[2](v7, 0, 0);
      goto LABEL_45;
    }
  }
LABEL_46:

}

- (void)_handlePing:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char v19;
  id v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  HMDHomeManager *v34;
  id obj;
  uint64_t v36;
  _QWORD v37[4];
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  void *v50;
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", CFSTR("kIdentifierKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v33 = v4;
    v34 = self;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    -[HMDHomeManager accountRegistry](self, "accountRegistry");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "accounts");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    obj = v7;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v43, v52, 16);
    if (v8)
    {
      v9 = v8;
      v36 = *(_QWORD *)v44;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v44 != v36)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
          v39 = 0u;
          v40 = 0u;
          v41 = 0u;
          v42 = 0u;
          objc_msgSend(v11, "devices");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
          if (v13)
          {
            v14 = v13;
            v15 = *(_QWORD *)v40;
LABEL_9:
            v16 = 0;
            while (1)
            {
              if (*(_QWORD *)v40 != v15)
                objc_enumerationMutation(v12);
              v17 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v16);
              objc_msgSend(v17, "identifier");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v19 = objc_msgSend(v18, "isEqual:", v5);

              if ((v19 & 1) != 0)
                break;
              if (v14 == ++v16)
              {
                v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
                if (v14)
                  goto LABEL_9;
                goto LABEL_15;
              }
            }
            v20 = v17;

            if (!v20)
              continue;

            v4 = v33;
            if (objc_msgSend(v33, "BOOLForKey:", *MEMORY[0x1E0CB9018]))
            {
              +[HMDSecureRemoteMessageTransport defaultTransport](HMDSecureRemoteMessageTransport, "defaultTransport");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "deviceMonitor");
              v30 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v30, "startMonitoringDevice:withInitialReachability:forClient:", v20, 0, v34);
            }
            v31 = objc_msgSend(v33, "BOOLForKey:", *MEMORY[0x1E0CB90C0]);
            v32 = objc_msgSend(v33, "BOOLForKey:", *MEMORY[0x1E0CB9008]);
            v37[0] = MEMORY[0x1E0C809B0];
            v37[1] = 3221225472;
            v37[2] = __30__HMDHomeManager__handlePing___block_invoke;
            v37[3] = &unk_1E89C2350;
            v38 = v33;
            -[HMDHomeManager pingDevice:secure:restrictToLocalNetwork:completionHandler:](v34, "pingDevice:secure:restrictToLocalNetwork:completionHandler:", v20, v31, v32, v37);

            goto LABEL_29;
          }
LABEL_15:

        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v52, 16);
        if (v9)
          continue;
        break;
      }
    }

    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = v34;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v48 = v24;
      v49 = 2112;
      v50 = v5;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Failed to find device with identifier: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    v4 = v33;
  }
  else
  {
    v25 = (void *)MEMORY[0x1D17BA0A0]();
    v26 = self;
    HMFGetOSLogHandle();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v48 = v28;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Message is missing device identifier", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v25);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v20 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v4, "respondWithError:", v20);
LABEL_29:

}

- (void)pingDevice:(id)a3 secure:(BOOL)a4 restrictToLocalNetwork:(BOOL)a5 completionHandler:(id)a6
{
  id v9;
  id v10;
  HMDRemoteDeviceMessageDestination *v11;
  void *v12;
  HMDRemoteDeviceMessageDestination *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id location;

  v9 = a3;
  v10 = a6;
  v11 = [HMDRemoteDeviceMessageDestination alloc];
  -[HMDHomeManager uuid](self, "uuid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HMDRemoteDeviceMessageDestination initWithTarget:device:](v11, "initWithTarget:device:", v12, v9);

  if (a4)
  {
    +[HMDRemoteMessage secureMessageWithName:qualityOfService:destination:messagePayload:restriction:](HMDRemoteMessage, "secureMessageWithName:qualityOfService:destination:messagePayload:restriction:", CFSTR("kPingInternalRequestKey"), 25, v13, MEMORY[0x1E0C9AA70], -1);
    v14 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v9, "globalHandles");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "count");

    if (v16 == 1)
    {
      objc_msgSend(v9, "globalHandles");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "firstObject");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDRemoteDeviceMessageDestination setPreferredHandle:](v13, "setPreferredHandle:", v18);

    }
    +[HMDRemoteMessage messageWithName:qualityOfService:destination:messagePayload:restriction:](HMDRemoteMessage, "messageWithName:qualityOfService:destination:messagePayload:restriction:", CFSTR("kPingInternalRequestKey"), 25, v13, MEMORY[0x1E0C9AA70], -1);
    v14 = objc_claimAutoreleasedReturnValue();
  }
  v19 = (void *)v14;
  objc_initWeak(&location, self);
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke;
  v22[3] = &unk_1E89C1B70;
  objc_copyWeak(&v24, &location);
  v20 = v10;
  v23 = v20;
  objc_msgSend(v19, "setResponseHandler:", v22);
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "sendMessage:completionHandler:", v19, 0);

  objc_destroyWeak(&v24);
  objc_destroyWeak(&location);

}

- (void)setSetupStartTimestamp:(double)a3
{
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543618;
    v13 = v8;
    v14 = 2048;
    v15 = a3;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Saving current accessory setup timestamp: %f", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager userDefaults](v6, "userDefaults");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (fabs(a3) >= 2.22044605e-16)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKey:", v11, CFSTR("HMDCurrentAccessorySetupStartUptimeKey"));

  }
  else
  {
    objc_msgSend(v9, "removeObjectForKey:", CFSTR("HMDCurrentAccessorySetupStartUptimeKey"));

    -[HMDHomeManager setSetupEndTimestamp:](v6, "setSetupEndTimestamp:", 0.0);
  }
  os_unfair_lock_lock_with_options();
  v6->_setupStartTimestamp = a3;
  os_unfair_lock_unlock(&v6->_lock);
}

- (double)setupStartTimestamp
{
  os_unfair_lock_s *p_lock;
  double setupStartTimestamp;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  setupStartTimestamp = self->_setupStartTimestamp;
  os_unfair_lock_unlock(p_lock);
  return setupStartTimestamp;
}

- (void)setSetupEndTimestamp:(double)a3
{
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543618;
    v13 = v8;
    v14 = 2048;
    v15 = a3;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Saving current accessory setup end timestamp: %f", (uint8_t *)&v12, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager userDefaults](v6, "userDefaults");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (fabs(a3) >= 2.22044605e-16)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKey:", v11, CFSTR("HMDCurrentAccessorySetupEndUptimeKey"));

  }
  else
  {
    objc_msgSend(v9, "removeObjectForKey:", CFSTR("HMDCurrentAccessorySetupEndUptimeKey"));
  }

  os_unfair_lock_lock_with_options();
  v6->_setupEndTimestamp = a3;
  os_unfair_lock_unlock(&v6->_lock);
}

- (double)setupEndTimestamp
{
  os_unfair_lock_s *p_lock;
  double setupEndTimestamp;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  setupEndTimestamp = self->_setupEndTimestamp;
  os_unfair_lock_unlock(p_lock);
  return setupEndTimestamp;
}

- (void)removeAllHomeKitPairingIdentitiesAfterSignOut
{
  id v3;

  objc_msgSend(MEMORY[0x1E0D285D0], "messageWithName:messagePayload:", CFSTR("removeAllHomeKitPairingIdentitiesDueToSignOut"), MEMORY[0x1E0C9AA70]);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _handleRemoveAllHomeKitPairingIdentities:](self, "_handleRemoveAllHomeKitPairingIdentities:", v3);

}

- (void)_handleRemoveAllHomeKitPairingIdentities:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  HMDHomeManager *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v35 = v8;
    v36 = 2112;
    v37 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Going to delete all the HomeKit pairing identities before TTSU: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    v23 = v6;
    HMFGetOSLogHandle();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v35 = v25;
      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_ERROR, "%{public}@Could not find key chain store instance.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
    v20 = (void *)MEMORY[0x1E0CB35C8];
    v21 = 20;
    goto LABEL_13;
  }
  objc_msgSend(MEMORY[0x1E0C8F2B8], "defaultStore");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "aa_primaryAppleAccount");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v35 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Cannot remove all the keys as the primary account is logged in.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = v13;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v35 = v19;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_FAULT, "%{public}@Remove All HomeKit Pairing Identity was called with a logged in Account : 🤯", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    v20 = (void *)MEMORY[0x1E0CB35C8];
    v21 = 10;
LABEL_13:
    objc_msgSend(v20, "hmErrorWithCode:", v21);
    v26 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v26);
    goto LABEL_14;
  }
  v33 = 0;
  v27 = objc_msgSend(v9, "removeControllerKeyPairLeaveTombstone:error:", 0, &v33);
  v26 = v33;
  if ((v27 & 1) != 0)
  {
    objc_msgSend(v4, "respondWithSuccess");
  }
  else
  {
    v28 = (void *)MEMORY[0x1D17BA0A0]();
    v29 = v6;
    HMFGetOSLogHandle();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v35 = v31;
      v36 = 2112;
      v37 = v26;
      _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove all the HomeKit pairing identities : %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v28);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v32);

  }
LABEL_14:

}

- (void)_handleDeviceSetupSessionClose:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, void *, uint64_t, _BYTE *);
  void *v38;
  id v39;
  HMDHomeManager *v40;
  id v41;
  __int128 *p_buf;
  uint8_t v43[4];
  id v44;
  __int16 v45;
  id v46;
  __int16 v47;
  uint64_t v48;
  __int128 buf;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Received HMDHomeManager close session message", (uint8_t *)&buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "uuidForKey:", *MEMORY[0x1E0CB8C10]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v50 = 0x2020000000;
    v51 = 0;
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = v6;
    HMFGetOSLogHandle();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (id)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager deviceSetupSessions](v11, "deviceSetupSessions");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v43 = 138543874;
      v44 = v13;
      v45 = 2112;
      v46 = v9;
      v47 = 2048;
      v48 = objc_msgSend(v14, "count");
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@HMDHomeManager close session %@. Total current sessions %lu", v43, 0x20u);

    }
    objc_autoreleasePoolPop(v10);
    -[HMDHomeManager deviceSetupSessions](v11, "deviceSetupSessions");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = MEMORY[0x1E0C809B0];
    v36 = 3221225472;
    v37 = __49__HMDHomeManager__handleDeviceSetupSessionClose___block_invoke;
    v38 = &unk_1E89BE068;
    v16 = v9;
    v39 = v16;
    v40 = v11;
    v17 = v4;
    v41 = v17;
    p_buf = &buf;
    objc_msgSend(v15, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &v35);

    if (!*(_BYTE *)(*((_QWORD *)&buf + 1) + 24))
    {
      v24 = (void *)MEMORY[0x1D17BA0A0](v18, v19, v20, v21, v22, v23);
      v25 = v11;
      HMFGetOSLogHandle();
      v26 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v27 = (id)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager deviceSetupSessions](v25, "deviceSetupSessions", v35, v36, v37, v38, v39, v40);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v28, "count");
        *(_DWORD *)v43 = 138543874;
        v44 = v27;
        v45 = 2112;
        v46 = v16;
        v47 = 2048;
        v48 = v29;
        _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Didn't close session %@ due to session not found (already closed?). Total current sessions %lu", v43, 0x20u);

      }
      objc_autoreleasePoolPop(v24);
      objc_msgSend(v17, "respondWithSuccess");
    }

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    v30 = (void *)MEMORY[0x1D17BA0A0]();
    v31 = v6;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v33;
      _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_ERROR, "%{public}@Received close session message without UUID. Respond with error.", (uint8_t *)&buf, 0xCu);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v34);

  }
}

- (void)_handleDeviceSetupSessionOpen:(id)a3
{
  id v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  HMDDeviceSetupSession *v34;
  void *v35;
  void *v36;
  void *v37;
  HMDHomeManager *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  HMDHomeManager *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD v48[3];
  _QWORD v49[3];
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "uuidForKey:", *MEMORY[0x1E0CB8C10]);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "numberForKey:", *MEMORY[0x1E0CB8C28]);
  v5 = objc_claimAutoreleasedReturnValue();
  v47 = (void *)v5;
  if (v46)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v51 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Invalid message parameters", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v11);
  }
  else
  {
    objc_msgSend(v4, "activity");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager setSetupActivity:](self, "setSetupActivity:", v12);

    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager setupStartTimestamp](v14, "setupStartTimestamp");
      *(_DWORD *)buf = 138543618;
      v51 = v17;
      v52 = 2048;
      v53 = v18;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@Noting setup start system time: %f", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    -[HMDHomeManager setupActivity](v14, "setupActivity");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "begin");

    -[HMDHomeManager appleAccountManager](v14, "appleAccountManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "device");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    -[HMDHomeManager setupActivity](v14, "setupActivity");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v48[0] = CFSTR("currentHomeUUID");
    -[HMDHomeManager currentHomeUUID](v14, "currentHomeUUID");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    HMDailyRotatedUUID();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "UUIDString");
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)v24;
    v26 = CFSTR("nil current home UUID");
    if (v24)
      v26 = (const __CFString *)v24;
    v49[0] = v26;
    v48[1] = CFSTR("productClass");
    v27 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v11, "productInfo");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "numberWithInteger:", objc_msgSend(v28, "productClass"));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v49[1] = v29;
    v48[2] = CFSTR("productType");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", MGGetProductType());
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v49[2] = v30;
    v31 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v49, v48, 3);

    -[HMDHomeManager setupActivity](v14, "setupActivity");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "markWithReason:", CFSTR("HMDHomeManager._handleDeviceSetupSessionOpen"));

    v33 = objc_msgSend(v47, "integerValue");
    if (+[HMDDeviceSetupSession isRoleSupported:](HMDDeviceSetupSession, "isRoleSupported:", v33))
    {
      v34 = -[HMDDeviceSetupSession initWithIdentifier:role:homeManager:]([HMDDeviceSetupSession alloc], "initWithIdentifier:role:homeManager:", v46, v33, v14);
      -[HMDDeviceSetupSession setupTrackingInfo](v34, "setupTrackingInfo");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager setSetupStartTimestamp:](v14, "setSetupStartTimestamp:", (double)(unint64_t)objc_msgSend(v35, "startTime"));

      -[HMDDeviceSetupSession setDelegate:](v34, "setDelegate:", v14);
      os_unfair_lock_lock_with_options();
      -[HMDHomeManager deviceSetupSessions](v14, "deviceSetupSessions");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "addObject:", v34);

      os_unfair_lock_unlock(&v14->_lock);
      v37 = (void *)MEMORY[0x1D17BA0A0]();
      v38 = v14;
      HMFGetOSLogHandle();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDDeviceSetupSession identifier](v34, "identifier");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v51 = v40;
        v52 = 2112;
        v53 = (uint64_t)v41;
        _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@New TTSU session created: [%@]", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v37);
      objc_msgSend(v4, "respondWithSuccess");
    }
    else
    {
      v42 = (void *)MEMORY[0x1D17BA0A0]();
      v43 = v14;
      HMFGetOSLogHandle();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v51 = v45;
        v52 = 2048;
        v53 = v33;
        _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_DEFAULT, "%{public}@Unsupported role: %tu", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v42);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
      v34 = (HMDDeviceSetupSession *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v34);
    }

  }
}

- (void)_notifyClientsOfUpdatedStatus
{
  NSObject *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHomeManager uuid](self, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "_updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("DataSyncStatusUpdate"), v4, 0);

  v5 = objc_alloc(MEMORY[0x1E0D285D0]);
  v6 = *MEMORY[0x1E0CB9100];
  -[HMDHomeManager messageDestination](self, "messageDestination");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager _statusPayloadForMessage:](self, "_statusPayloadForMessage:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v5, "initWithName:destination:payload:", v6, v7, v8);

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = self;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "messagePayload");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138543618;
    v18 = v13;
    v19 = 2112;
    v20 = v14;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Notifying clients of updated status message payload: %@", (uint8_t *)&v17, 0x16u);

  }
  objc_autoreleasePoolPop(v10);
  -[HMDHomeManager messageDispatcher](v11, "messageDispatcher");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "sendMessage:", v9);

  -[HMDHomeManager notificationCenter](v11, "notificationCenter");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "postNotificationName:object:", CFSTR("HMDHomeManagerDataSyncInProgressChangedNotification"), v11);

}

- (void)_handleAccessAllowedWhenLockedRequest:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  char v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v17 = v8;
    v18 = 2112;
    v19 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Asked to update access allowed when locked : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v15 = 0;
  v9 = objc_msgSend(v4, "BOOLForKey:keyPresent:", CFSTR("kAccessAllowedWhenLockedKey"), &v15);
  if (v15)
  {
    -[HMDHomeManager _updateAccessAllowedWhenLocked:message:](v6, "_updateAccessAllowedWhenLocked:message:", v9, v4);
  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0](v9);
    v11 = v6;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v17 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Unable to find the key in the message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v14);

  }
}

- (id)accessAllowedWhenLockedSettingFileName
{
  void *v2;
  id v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = (id)hh1ToHH2PerDeviceMigrationDirectoryPath;
  objc_msgSend(v2, "stringWithFormat:", CFSTR("%@/AllowedAccessWhenLockedSetting.plist"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)notifySPIClientsAboutAccessAllowedWhenLocked:(BOOL)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  const __CFString *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v17 = CFSTR("kAccessAllowedWhenLockedKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D285D0], "entitledMessageWithName:messagePayload:", *MEMORY[0x1E0CB8E38], v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](self, "uuid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "sendMessage:target:", v6, v8);

  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = self;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138543618;
    v14 = v12;
    v15 = 2112;
    v16 = v5;
    _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Sending accessAllowedWhenLocked settings to all entitled clients : [%@]", (uint8_t *)&v13, 0x16u);

  }
  objc_autoreleasePoolPop(v9);

}

- (void)_updateAccessAllowedWhenLocked:(BOOL)a3 message:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v4 = a3;
  v16 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  if (-[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked") != v4)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0](-[HMDHomeManager setAccessAllowedWhenLocked:](self, "setAccessAllowedWhenLocked:", v4));
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v9;
      v14 = 2112;
      v15 = v10;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Setting HomeKit Access when device is locked to %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(v6, "name");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager saveWithReason:information:saveOptions:](self, "saveWithReason:information:saveOptions:", v11, 0, 0);

  }
  objc_msgSend(v6, "respondWithSuccess");
  -[HMDHomeManager notifySPIClientsAboutAccessAllowedWhenLocked:](self, "notifySPIClientsAboutAccessAllowedWhenLocked:", v4);

}

- (void)saveAccessAllowedWhenLockedSettingToLocalDisk
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  const __CFString *v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v28 = CFSTR("kAccessAllowedWhenLockedKey");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[HMDHomeManager isAccessAllowedWhenLocked](self, "isAccessAllowedWhenLocked"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v29[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v29, &v28, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 138543618;
    v23 = v9;
    v24 = 2112;
    v25 = v5;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Storing access allowed when locked :[%@]", (uint8_t *)&v22, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
  objc_msgSend(v10, "encodeObject:forKey:", v5, *MEMORY[0x1E0CB2CD0]);
  objc_msgSend(v10, "finishEncoding");
  objc_msgSend(v10, "encodedData");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    -[HMDHomeManager accessAllowedWhenLockedSettingFileName](v7, "accessAllowedWhenLockedSettingFileName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDPersistentStore writeData:toStorePath:dataLabel:](HMDPersistentStore, "writeData:toStorePath:dataLabel:", v11, v12, CFSTR("AccessAllowedWhenLockedSetting"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = v7;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543874;
      v23 = v17;
      v24 = 2112;
      v25 = v13;
      v26 = 2112;
      v27 = v12;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Stored [%@] bytes to [%@]", (uint8_t *)&v22, 0x20u);

    }
    objc_autoreleasePoolPop(v14);

  }
  else
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = v7;
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = 138543618;
      v23 = v21;
      v24 = 2112;
      v25 = v5;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Nothing to store as there is no data after archiving %@", (uint8_t *)&v22, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
  }

  objc_autoreleasePoolPop(v3);
}

- (void)accessoryBrowserDidFindNewAccessory
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __53__HMDHomeManager_accessoryBrowserDidFindNewAccessory__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (id)updatedUUIDForDiscoveredUnpairedAccessory:(id)a3
{
  return 0;
}

- (void)updateCurrentUserEligibleForOwnerToAutoMigration
{
  NSObject *workQueue;
  _QWORD block[5];

  workQueue = self->_workQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __66__HMDHomeManager_updateCurrentUserEligibleForOwnerToAutoMigration__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(workQueue, block);
}

- (void)_updateCurrentUserEligibleForOwnerToAutoMigration
{
  NSObject *v3;
  void *v4;
  _QWORD v5[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  -[HMDHomeManager hh2AutoMigrationEligibilityChecker](self, "hh2AutoMigrationEligibilityChecker");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __67__HMDHomeManager__updateCurrentUserEligibleForOwnerToAutoMigration__block_invoke;
  v5[3] = &unk_1E89BE090;
  v5[4] = self;
  objc_msgSend(v4, "fetchIsCurrentUserEligibleForMigrationByOwnerWithCompletion:", v5);

}

- (void)__accountAddedDevice:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __39__HMDHomeManager___accountAddedDevice___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)__handleDeviceUpdatedNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __52__HMDHomeManager___handleDeviceUpdatedNotification___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)__accountRemovedDevice:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __41__HMDHomeManager___accountRemovedDevice___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_notifyXPCClientsOfUpdatedDevices
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  v4 = (void *)MEMORY[0x1E0D285D0];
  v5 = *MEMORY[0x1E0CB8ED0];
  v25 = *MEMORY[0x1E0CB8EC8];
  v6 = (void *)MEMORY[0x1E0C99E60];
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "account");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "devices");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setWithArray:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  encodeRootObjectForIncomingXPCMessage(v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "entitledMessageWithName:messagePayload:", v5, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = (void *)MEMORY[0x1D17BA0A0]();
  v15 = self;
  HMFGetOSLogHandle();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "shortDescription");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543618;
    v22 = v17;
    v23 = 2112;
    v24 = v18;
    _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Notifying clients of updated devices with message: %@", (uint8_t *)&v21, 0x16u);

  }
  objc_autoreleasePoolPop(v14);
  -[HMDHomeManager messageDispatcher](v15, "messageDispatcher");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager uuid](v15, "uuid");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "sendMessage:target:", v13, v20);

}

- (void)__accountRegistryAddedAccount:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __48__HMDHomeManager___accountRegistryAddedAccount___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)__accountRegistryRemovedAccount:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __50__HMDHomeManager___accountRegistryRemovedAccount___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)verifyCurrentDeviceResidentStatus
{
  NSObject *v3;
  _QWORD block[5];

  -[HMDHomeManager workQueue](self, "workQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __51__HMDHomeManager_verifyCurrentDeviceResidentStatus__block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v3, block);

}

- (void)__handleDeviceCapabilitiesUpdated:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  _QWORD v17[5];
  id v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v4, "object");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = v7;
    else
      v8 = 0;
    v9 = v8;

    if (v9)
    {
      objc_msgSend(v6, "capabilities");
      v10 = (id)objc_claimAutoreleasedReturnValue();

      if (v10 == v9)
      {
        objc_msgSend(v4, "userInfo");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = (void *)MEMORY[0x1E0C99E60];
        v19[0] = objc_opt_class();
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 1);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "setWithArray:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "hmf_arrayForKey:ofClasses:", CFSTR("HMDDeviceCapabilitiesUpdatedDifferingFieldsNotificationKey"), v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v15, "count"))
        {
          -[HMDHomeManager workQueue](self, "workQueue");
          v16 = objc_claimAutoreleasedReturnValue();
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 3221225472;
          v17[2] = __52__HMDHomeManager___handleDeviceCapabilitiesUpdated___block_invoke;
          v17[3] = &unk_1E89C2328;
          v17[4] = self;
          v18 = v6;
          dispatch_async(v16, v17);

        }
      }
    }

  }
}

- (void)__handleUpdatedCurrentDevice:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  _QWORD v9[5];
  id v10;

  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HMDDeviceNotificationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  if (objc_msgSend(v7, "isCurrentDevice"))
  {
    -[HMDHomeManager workQueue](self, "workQueue");
    v8 = objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __47__HMDHomeManager___handleUpdatedCurrentDevice___block_invoke;
    v9[3] = &unk_1E89C2328;
    v9[4] = self;
    v10 = v7;
    dispatch_async(v8, v9);

  }
}

- (void)_handleUpdatedCurrentDevice:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  int v19;
  HMDHomeManager *v20;
  uint64_t v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint8_t v41[128];
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v43 = v8;
    v44 = 2112;
    v45 = v4;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that current device was updated: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (v4)
    -[HMDHomeManager startLocalTransport](self, "startLocalTransport");
  else
    -[HMDHomeManager stopLocalTransport](self, "stopLocalTransport");
  +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isResidentCapable");

  if (v10)
  {
    if (v4)
    {
      -[HMDHomeManager notifyClientsResidentCapable:](self, "notifyClientsResidentCapable:", 1);
      if (!-[HMDHomeManager residentEnabledState](self, "residentEnabledState"))
      {
        objc_msgSend(v4, "productInfo");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "productClass");

        if (v12 == 3)
        {
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          -[HMDHomeManager homes](self, "homes");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
          if (v14)
          {
            v15 = *(_QWORD *)v37;
            while (2)
            {
              for (i = 0; i != v14; ++i)
              {
                if (*(_QWORD *)v37 != v15)
                  objc_enumerationMutation(v13);
                v17 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
                if (objc_msgSend(v17, "isOwnerUser"))
                {
                  objc_msgSend(v17, "residentCapableDevices");
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  v19 = objc_msgSend(v18, "containsObject:", v4);

                  if (v19)
                  {
                    v22 = (void *)MEMORY[0x1D17BA0A0]();
                    v23 = self;
                    HMFGetOSLogHandle();
                    v24 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v25 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543362;
                      v43 = v25;
                      _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in one or more homes, enabling ourselves as a resident device", buf, 0xCu);

                    }
                    objc_autoreleasePoolPop(v22);
                    v14 = 1;
                    goto LABEL_25;
                  }
                }
              }
              v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
              if (v14)
                continue;
              break;
            }
          }
LABEL_25:

          v20 = self;
          v21 = v14;
        }
        else
        {
          v20 = self;
          v21 = 1;
        }
        -[HMDHomeManager _updateResidentEnabledOnThisDevice:forceNotify:message:](v20, "_updateResidentEnabledOnThisDevice:forceNotify:message:", v21, 0, 0);
      }
    }
    else
    {
      -[HMDHomeManager notifyClientsResidentCapable:](self, "notifyClientsResidentCapable:", 0);
    }
  }
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v33;
    do
    {
      for (j = 0; j != v28; ++j)
      {
        if (*(_QWORD *)v33 != v29)
          objc_enumerationMutation(v26);
        objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * j), "migrateOwnedTriggers");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        if (v31)
          -[HMDHomeManager _saveWithReason:information:postSyncNotification:](self, "_saveWithReason:information:postSyncNotification:", CFSTR("kAddTriggerRequestKey"), v31, 0);

      }
      v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    }
    while (v28);
  }

}

- (void)__handleCompanionUpdated:(id)a3
{
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  HMDHomeManager *v10;

  +[HMDCompanionManager sharedManager](HMDCompanionManager, "sharedManager", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "companion");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager workQueue](self, "workQueue");
  v6 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __43__HMDHomeManager___handleCompanionUpdated___block_invoke;
  v8[3] = &unk_1E89C2328;
  v9 = v5;
  v10 = self;
  v7 = v5;
  dispatch_async(v6, v8);

}

- (void)setupSession:(id)a3 didReceiveAccessoryWithUUID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDAccessorySetupMetricDispatcher *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDAccessorySetupMetricDispatcher *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543874;
    v19 = v11;
    v20 = 2112;
    v21 = v12;
    v22 = 2112;
    v23 = v7;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Setup Session : %@, received accessory uuid: %@", (uint8_t *)&v18, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  if (!objc_msgSend(v6, "role"))
  {
    v13 = [HMDAccessorySetupMetricDispatcher alloc];
    -[HMDHomeManager workQueue](v9, "workQueue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setupTrackingInfo");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[HMDAccessorySetupMetricDispatcher initWithQueue:trackingInfo:setupSessionIdentifier:homeManager:](v13, "initWithQueue:trackingInfo:setupSessionIdentifier:homeManager:", v14, v15, v16, v9);

    -[HMDAccessorySetupMetricDispatcher setDelegate:](v17, "setDelegate:", v9);
    -[HMDHomeManager addAccessorySetupMetricDispatcher:](v9, "addAccessorySetupMetricDispatcher:", v17);

  }
}

- (void)setupSession:(id)a3 didCloseWithError:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[5];
  id v12;
  id v13;

  v6 = a3;
  v7 = a4;
  -[HMDHomeManager workQueue](self, "workQueue");
  v8 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __49__HMDHomeManager_setupSession_didCloseWithError___block_invoke;
  block[3] = &unk_1E89C20C8;
  block[4] = self;
  v12 = v6;
  v13 = v7;
  v9 = v7;
  v10 = v6;
  dispatch_async(v8, block);

}

- (void)__handleWatchConnected:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *workQueue;
  id v9;
  _QWORD v10[5];
  id v11;

  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HMDDeviceNotificationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  workQueue = self->_workQueue;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __41__HMDHomeManager___handleWatchConnected___block_invoke;
  v10[3] = &unk_1E89C2328;
  v10[4] = self;
  v11 = v7;
  v9 = v7;
  dispatch_async(workQueue, v10);

}

- (void)__handleWatchDisconnected:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *workQueue;
  id v9;
  _QWORD v10[5];
  id v11;

  objc_msgSend(a3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HMDDeviceNotificationKey"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  workQueue = self->_workQueue;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __44__HMDHomeManager___handleWatchDisconnected___block_invoke;
  v10[3] = &unk_1E89C2328;
  v10[4] = self;
  v11 = v7;
  v9 = v7;
  dispatch_async(workQueue, v10);

}

- (void)timerDidFire:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  HMDWatchSync *v13;
  void *v14;
  void *v15;
  void *v16;
  HMDWatchSync *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  HMDHomeManager *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  HMDHomeManager *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  HMDHomeManager *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  HMDHomeManager *v42;
  NSObject *v43;
  void *v44;
  int v45;
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  id v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v5);

  -[HMDHomeManager watchSyncRetryContextByRetryTimer](self, "watchSyncRetryContextByRetryTimer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = 138543874;
      v46 = v11;
      v47 = 2112;
      v48 = v7;
      v49 = 2112;
      v50 = v4;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Retrying watch sync with retry context:%@ when timer fired: %@", (uint8_t *)&v45, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    -[HMDHomeManager watchSyncRetryContextByRetryTimer](v9, "watchSyncRetryContextByRetryTimer");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "removeObjectForKey:", v4);

    v13 = [HMDWatchSync alloc];
    objc_msgSend(v7, "watchSync");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "identifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "watchSync");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[HMDWatchSync initWithIdentifier:syncOption:](v13, "initWithIdentifier:syncOption:", v15, objc_msgSend(v16, "syncOption"));

    objc_msgSend(v7, "watchIdentifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _addSyncOperation:forWatchWithIdentifier:](v9, "_addSyncOperation:forWatchWithIdentifier:", v17, v18);

  }
  else
  {
    -[HMDHomeManager remoteAccessHealthMonitorTimer](self, "remoteAccessHealthMonitorTimer");
    v19 = (id)objc_claimAutoreleasedReturnValue();

    if (v19 == v4)
    {
      -[HMDHomeManager _remoteAccessHealthMonitorTimerDidFire:](self, "_remoteAccessHealthMonitorTimerDidFire:", v4);
    }
    else
    {
      -[HMDHomeManager watchPushDelayTimer](self, "watchPushDelayTimer");
      v20 = (id)objc_claimAutoreleasedReturnValue();

      if (v20 == v4)
      {
        v29 = (void *)MEMORY[0x1D17BA0A0]();
        v30 = self;
        HMFGetOSLogHandle();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = 138543362;
          v46 = v32;
          _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_DEFAULT, "%{public}@Watch push delay timer fired, pushing to watches", (uint8_t *)&v45, 0xCu);

        }
        objc_autoreleasePoolPop(v29);
        -[HMDHomeManager _sendHomeDataToAllWatchesWithCompletion:](v30, "_sendHomeDataToAllWatchesWithCompletion:", 0);
      }
      else
      {
        -[HMDHomeManager sharedHomesPushDelayTimer](self, "sharedHomesPushDelayTimer");
        v21 = (id)objc_claimAutoreleasedReturnValue();

        if (v21 == v4)
        {
          v33 = (void *)MEMORY[0x1D17BA0A0]();
          v34 = self;
          HMFGetOSLogHandle();
          v35 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            v45 = 138543362;
            v46 = v36;
            _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_DEFAULT, "%{public}@Shared homed push delay timer fired, pushing to shared users", (uint8_t *)&v45, 0xCu);

          }
          objc_autoreleasePoolPop(v33);
          -[HMDHomeManager _pushChangesToAllUsersOfAllHomes](v34, "_pushChangesToAllUsersOfAllHomes");
        }
        else
        {
          -[HMDHomeManager debounceHomesUpdateTimer](self, "debounceHomesUpdateTimer");
          v22 = (id)objc_claimAutoreleasedReturnValue();

          if (v22 == v4)
          {
            v37 = (void *)MEMORY[0x1D17BA0A0]();
            v38 = self;
            HMFGetOSLogHandle();
            v39 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              HMFGetLogIdentifier();
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              v45 = 138543362;
              v46 = v40;
              _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Debounce homes update timer has fired, posting homed did update notification", (uint8_t *)&v45, 0xCu);

            }
            objc_autoreleasePoolPop(v37);
            -[HMDHomeManager _notifyXPCClientsOfHomeConfigurationChange](v38, "_notifyXPCClientsOfHomeConfigurationChange");
          }
          else
          {
            -[HMDHomeManager memoryMonitorLogEventTimer](self, "memoryMonitorLogEventTimer");
            v23 = (id)objc_claimAutoreleasedReturnValue();

            if (v23 == v4)
            {
              v41 = (void *)MEMORY[0x1D17BA0A0]();
              v42 = self;
              HMFGetOSLogHandle();
              v43 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                HMFGetLogIdentifier();
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                v45 = 138543362;
                v46 = v44;
                _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_DEFAULT, "%{public}@Memory monitor log event timer has fired", (uint8_t *)&v45, 0xCu);

              }
              objc_autoreleasePoolPop(v41);
              -[HMDHomeManager _monitorMemoryUsage](v42, "_monitorMemoryUsage");
              -[HMDHomeManager _updateHomesDiscoveredBonjourServicesMetrics](v42, "_updateHomesDiscoveredBonjourServicesMetrics");
            }
            else
            {
              -[HMDHomeManager debounceRegenerateAssistantSyncDataTimer](self, "debounceRegenerateAssistantSyncDataTimer");
              v24 = (id)objc_claimAutoreleasedReturnValue();

              if (v24 == v4)
              {
                v25 = (void *)MEMORY[0x1D17BA0A0]();
                v26 = self;
                HMFGetOSLogHandle();
                v27 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  HMFGetLogIdentifier();
                  v28 = (void *)objc_claimAutoreleasedReturnValue();
                  v45 = 138543362;
                  v46 = v28;
                  _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Debounce Siri sync timer has fired, re-generating Siri sync data", (uint8_t *)&v45, 0xCu);

                }
                objc_autoreleasePoolPop(v25);
                -[HMDHomeManager _generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:](v26, "_generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:", 1, 1, 0, 0);
              }
            }
          }
        }
      }
    }
  }

}

- (void)_remoteAccessHealthMonitorTimerDidFire:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v19 = v7;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Remote access health monitor timer fired, checking state for all homes", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v14;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v14 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v12++), "remoteAccessHealthMonitorTimerDidFire");
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v10);
  }

}

- (void)archiveServerToken:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __37__HMDHomeManager_archiveServerToken___block_invoke;
  block[3] = &unk_1E89C2730;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, block);

}

- (void)mobileAssetManager:(id)a3 didReceiveMetadata:(id)a4
{
  -[HMDHomeManager handleMetadataDictionary:message:](self, "handleMetadataDictionary:message:", a4, 0);
}

- (void)transactionObjectUpdated:(id)a3 newValues:(id)a4 message:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  char v50;
  void *v51;
  int v52;
  void *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = v9;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v11;
  else
    v12 = 0;
  v13 = v12;

  if (v13)
  {
    objc_msgSend(v13, "uuid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      objc_msgSend(v15, "transactionObjectUpdated:newValues:message:", v13, v11, v10);
    }
    else
    {
      -[HMDHomeManager processHomeModelAdd:message:](self, "processHomeModelAdd:message:", v13, v10);
      if (+[HMDHAPMetadata shouldUploadToCloudAfterHomedReady](HMDHAPMetadata, "shouldUploadToCloudAfterHomedReady"))
      {
        -[HMDHomeManager homes](self, "homes");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "count");

        if (v20 == 1)
        {
          v21 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v52 = 138543362;
            v53 = v23;
            _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, "%{public}@This is the first home being added and metadata upload flag is set.", (uint8_t *)&v52, 0xCu);

          }
          objc_autoreleasePoolPop(v21);
          -[HMDHomeManager evaluateToPushMetadataWhenHomeKitInUse](self, "evaluateToPushMetadataWhenHomeKitInUse");
        }
      }
    }
    goto LABEL_17;
  }
  v16 = v11;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v16;
  else
    v17 = 0;
  v18 = v17;

  if (v18)
  {
    -[HMDHomeManager processSharedHomeModelUpdate:message:](self, "processSharedHomeModelUpdate:message:", v18, v10);
LABEL_18:

    goto LABEL_19;
  }
  v24 = v16;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v25 = v24;
  else
    v25 = 0;
  v26 = v25;

  if (v26)
  {
    -[HMDHomeManager processHomeManagerModelUpdate:message:](self, "processHomeManagerModelUpdate:message:", v26, v10);
    goto LABEL_18;
  }
  v27 = v24;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v28 = v27;
  else
    v28 = 0;
  v29 = v28;

  if (v29)
  {
    objc_msgSend(v29, "parentUUID");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _homeWithUUID:](self, "_homeWithUUID:", v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v31, "transactionObjectUpdated:newValues:message:", v8, v29, v10);
    goto LABEL_18;
  }
  v32 = v27;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v33 = v32;
  else
    v33 = 0;
  v34 = v33;

  if (v34)
  {
    -[HMDHomeManager _processUserManagementOperationModel:message:](self, "_processUserManagementOperationModel:message:", v34, v10);
    goto LABEL_18;
  }
  v35 = v32;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v36 = v35;
  else
    v36 = 0;
  v37 = v36;

  if (v37)
  {
    -[HMDHomeManager processCloudZoneModelAdd:message:](self, "processCloudZoneModelAdd:message:", v37, v10);
    goto LABEL_18;
  }
  v38 = v35;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v39 = v38;
  else
    v39 = 0;
  v40 = v39;

  if (v40)
  {
    -[HMDHomeManager processAppDataModelUpdate:message:](self, "processAppDataModelUpdate:message:", v40, v10);
    goto LABEL_18;
  }
  v41 = v38;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v42 = v41;
  else
    v42 = 0;
  v43 = v42;

  if (v43)
  {
    -[HMDHomeManager processMetadataModel:message:](self, "processMetadataModel:message:", v43, v10);
    goto LABEL_18;
  }
  v44 = v41;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v45 = v44;
  else
    v45 = 0;
  v46 = v45;

  if (v46)
  {
    -[HMDHomeManager appleAccountManager](self, "appleAccountManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "account");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "modelIdentifier");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "uuid");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v48, "isEqual:", v49) & 1) != 0)
    {

    }
    else
    {
      v50 = objc_msgSend(v15, "isModelCurrentAccount:", v46);

      if ((v50 & 1) == 0)
      {
        -[HMDHomeManager remoteAccountManager](self, "remoteAccountManager");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "processAccountModel:message:", v46, v10);

        goto LABEL_17;
      }
    }
    objc_msgSend(v15, "processAccountModel:message:", v46, v10);
LABEL_17:

    goto LABEL_18;
  }
LABEL_19:

}

- (void)transactionObjectRemoved:(id)a3 message:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  char v34;
  void *v35;
  int v36;
  void *v37;
  __int16 v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = 138543618;
    v37 = v11;
    v38 = 2112;
    v39 = v6;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@transactionObjectRemoved: %@", (uint8_t *)&v36, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  v12 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v13 = v12;
  else
    v13 = 0;
  v14 = v13;

  if (v14)
  {
    -[HMDHomeManager processHomeModelRemoved:message:](v9, "processHomeModelRemoved:message:", v14, v7);
LABEL_38:

    goto LABEL_39;
  }
  v15 = v12;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v16 = v15;
  else
    v16 = 0;
  v17 = v16;

  if (v17)
  {
    -[HMDHomeManager processSharedHomeModelRemoved:message:](v9, "processSharedHomeModelRemoved:message:", v17, v7);
    goto LABEL_38;
  }
  v18 = v15;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v19 = v18;
  else
    v19 = 0;
  v20 = v19;

  if (v20)
  {
    -[HMDHomeManager _processRemoveUserManagementOperationModel:message:](v9, "_processRemoveUserManagementOperationModel:message:", v20, v7);
    goto LABEL_38;
  }
  v21 = v18;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v22 = v21;
  else
    v22 = 0;
  v23 = v22;

  if (v23)
  {
    -[HMDHomeManager processCloudZoneModelRemoved:message:](v9, "processCloudZoneModelRemoved:message:", v23, v7);
    goto LABEL_38;
  }
  v24 = v21;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v25 = v24;
  else
    v25 = 0;
  v26 = v25;

  if (v26)
  {
    -[HMDHomeManager processAppDataModelRemove:message:](v9, "processAppDataModelRemove:message:", v26, v7);
    goto LABEL_38;
  }
  v27 = v24;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v28 = v27;
  else
    v28 = 0;
  v29 = v28;

  if (v29)
  {
    -[HMDHomeManager appleAccountManager](v9, "appleAccountManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "account");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "modelIdentifier");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "uuid");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v32, "isEqual:", v33) & 1) != 0)
    {

    }
    else
    {
      v34 = objc_msgSend(v30, "isModelCurrentAccount:", v29);

      if ((v34 & 1) == 0)
      {
        -[HMDHomeManager remoteAccountManager](v9, "remoteAccountManager");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "processAccountModelRemove:message:", v29, v7);

        goto LABEL_37;
      }
    }
    objc_msgSend(v30, "processAccountModelRemove:message:", v29, v7);
LABEL_37:

    goto LABEL_38;
  }
LABEL_39:

}

- (id)backingStoreObjects:(int64_t)a3
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager modelObjectWithChangeType:version:](self, "modelObjectWithChangeType:version:", 1, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObject:", v6);

  if (a3 >= 3)
  {
    -[HMDHomeManager appData](self, "appData");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      -[HMDHomeManager appData](self, "appData");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "modelObjectWithChangeType:", 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "addObject:", v9);

    }
  }
  return v5;
}

- (id)modelObjectWithChangeType:(unint64_t)a3
{
  return -[HMDHomeManager modelObjectWithChangeType:version:](self, "modelObjectWithChangeType:version:", a3, 4);
}

- (id)modelObjectWithChangeType:(unint64_t)a3 version:(int64_t)a4
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v6 = (void *)objc_opt_class();
  -[HMDHomeManager uuid](self, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "emptyModelObjectWithChangeType:homeManagerUUID:", a3, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    -[HMDHomeManager primaryHomeUUID](self, "primaryHomeUUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "UUIDString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setPrimaryHomeUUID:", v11);

  }
  -[HMDHomeManager cloudZones](self, "cloudZones");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:](HMDCloudZoneInformation, "cloudZoneInformationWithCloudZones:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setCloudZoneInformation:", v13);

  return v8;
}

- (void)_cleanChangesIfNoAddChangeObjectID:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  HMDBackingStoreLogFetchOperation *v9;
  uint64_t v10;
  id v11;
  id v12;
  HMDBackingStoreLogFetchOperation *v13;
  id v14;
  id v15;
  void *v16;
  HMDHomeManager *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  HMDHomeManager *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  __int128 *v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  __int128 *v35;
  id v36;
  id location;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  id v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (v6)
  {
    *(_QWORD *)&v42 = 0;
    *((_QWORD *)&v42 + 1) = &v42;
    v43 = 0x2020000000;
    v44 = 0;
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_initWeak(&location, self);
    v9 = [HMDBackingStoreLogFetchOperation alloc];
    v10 = MEMORY[0x1E0C809B0];
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke;
    v32[3] = &unk_1E89BE0B8;
    objc_copyWeak(&v36, &location);
    v11 = v6;
    v33 = v11;
    v12 = v8;
    v34 = v12;
    v35 = &v42;
    v13 = -[HMDBackingStoreLogFetchOperation initWithNeedsPushTo:result:](v9, "initWithNeedsPushTo:result:", 2, v32);
    v26[0] = v10;
    v26[1] = 3221225472;
    v26[2] = __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke_1244;
    v26[3] = &unk_1E89BE108;
    objc_copyWeak(&v31, &location);
    v30 = &v42;
    v14 = v12;
    v27 = v14;
    v15 = v11;
    v28 = v15;
    v29 = v7;
    v16 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v13, "setResultBlock:", v26));
    v17 = self;
    HMFGetOSLogHandle();
    v18 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v39 = v19;
      v40 = 2112;
      v41 = v15;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_DEBUG, "%{public}@Cleaning of objects for %@ from home manager datastore started", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    -[HMDHomeManager backingStore](v17, "backingStore");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "submit:", v13);

    objc_destroyWeak(&v31);
    objc_destroyWeak(&v36);
    objc_destroyWeak(&location);

    _Block_object_dispose(&v42, 8);
  }
  else
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = self;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v42) = 138543362;
      *(_QWORD *)((char *)&v42 + 4) = v24;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@ObjectID must be defined", (uint8_t *)&v42, 0xCu);

    }
    objc_autoreleasePoolPop(v21);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, void *))v7 + 2))(v7, 0, v25);

  }
}

- (void)handleRemoteUserClientCloudShareRequest:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHomeManager userCloudShareManager](self, "userCloudShareManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleRemoteUserClientCloudShareRequest:", v4);

}

- (void)handleRemoteUserClientCloudShareRepairRequest:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[HMDHomeManager userCloudShareManager](self, "userCloudShareManager");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleRemoteUserClientCloudShareRepairRequest:", v4);

}

- (void)multiUserStatusController:(id)a3 statusDidChange:(int64_t)a4
{
  id v5;

  -[HMDHomeManager uuid](self, "uuid", a3, a4);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](self, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("MultiUserStatusChanged"), v5, 1);

}

- (BOOL)legacyZoneHasRecordsAvailable
{
  void *v2;
  char v3;

  -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "legacyZoneHasRecordsAvailable");

  return v3;
}

- (BOOL)isCloudAccountActive
{
  void *v2;
  char v3;

  -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "accountActive");

  return v3;
}

- (BOOL)isNetworkConnectionAvailable
{
  void *v3;
  void *v4;
  char v5;

  -[HMDHomeManager reachabilityMonitor](self, "reachabilityMonitor");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
    return 0;
  -[HMDHomeManager reachabilityMonitor](self, "reachabilityMonitor");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isReachable");

  return v5;
}

- (id)_currentHome
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        objc_msgSend(v8, "uuid");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[HMDHomeManager currentHomeUUID](self, "currentHomeUUID");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v9, "hmf_isEqualToUUID:", v10);

        if ((v11 & 1) != 0)
        {
          v12 = v8;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v5)
        continue;
      break;
    }
  }

  -[HMDHomeManager homes](self, "homes");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "firstObject");
  v12 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
  v13 = v12;

  return v13;
}

- (id)delegatingRouter:(id)a3 filteredTopics:(id)a4 forRouter:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = (void *)MEMORY[0x1D17BA0A0]();
  objc_msgSend(MEMORY[0x1E0C99D20], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager registrationForwardingEventRouter](self, "registrationForwardingEventRouter");
  v13 = (id)objc_claimAutoreleasedReturnValue();

  if (v13 == v8)
  {
    v14 = v10;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v15 = v14;
    else
      v15 = 0;
    v16 = v15;

    -[HMDHomeManager memoryEventRouter](self, "memoryEventRouter");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "synchronousSubscriptionProvider");
    v18 = (id)objc_claimAutoreleasedReturnValue();

    if (v18 == v14)
    {
      v21 = v9;
    }
    else
    {
      if (!v16)
        goto LABEL_11;
      objc_msgSend(v16, "identifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v19)
        goto LABEL_11;
      objc_msgSend(v16, "identifier");
      v20 = objc_claimAutoreleasedReturnValue();
      +[HMDHomeEventsGenerated forwardingTopicsWithTopics:forHomeRouterWithUUID:](HMDHomeEventsGenerated, "forwardingTopicsWithTopics:forHomeRouterWithUUID:", v9, v20);
      v21 = (id)objc_claimAutoreleasedReturnValue();

      v12 = (void *)v20;
    }

    v12 = v21;
LABEL_11:

  }
  objc_autoreleasePoolPop(v11);

  return v12;
}

- (id)delegatingRouter:(id)a3 upstreamTopicsFor:(id)a4
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:](HMDHomeEventsGenerated, "upstreamTopicsForTopic:", a4);
}

- (id)expandedTopicsForTopics:(id)a3
{
  return +[HMDHomeEventsGenerated expandedTopicsWithTopics:homeManager:](HMDHomeEventsGenerated, "expandedTopicsWithTopics:homeManager:", a3, self);
}

- (id)upstreamTopicsForTopic:(id)a3
{
  return +[HMDHomeEventsGenerated upstreamTopicsForTopic:](HMDHomeEventsGenerated, "upstreamTopicsForTopic:", a3);
}

- (BOOL)isSignedIntoiCloud
{
  void *v2;
  char v3;

  +[HMDAppleAccountManager sharedManager](HMDAppleAccountManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isLoggedInToPrimaryAccount");

  return v3;
}

- (BOOL)isFirstCloudImportComplete
{
  return 0;
}

- (unint64_t)numHomes
{
  void *v2;
  unint64_t v3;

  -[HMDHomeManager homes](self, "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");

  return v3;
}

- (void)_handleCurrentAccessoryRemovedNotification:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  HMDHomeManager *v9;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __61__HMDHomeManager__handleCurrentAccessoryRemovedNotification___block_invoke;
  v7[3] = &unk_1E89C2328;
  v8 = v4;
  v9 = self;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)_handleCurrentAccessoryAddedNotification:(id)a3
{
  void *v4;
  NSObject *v5;
  _QWORD block[5];

  -[HMDHomeManager capabilitiesController](self, "capabilitiesController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "currentAccessoryDidBecomeAvailable");

  -[HMDHomeManager _updateCurrentHomeIfNecessary](self, "_updateCurrentHomeIfNecessary");
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __59__HMDHomeManager__handleCurrentAccessoryAddedNotification___block_invoke;
  block[3] = &unk_1E89C2730;
  block[4] = self;
  dispatch_async(v5, block);

}

- (void)__handleProcessMemoryPressureEvent:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  uint8_t v23[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v23 = 138543362;
    *(_QWORD *)&v23[4] = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_FAULT, "%{public}@Received process memory pressure notification", v23, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  objc_msgSend(v4, "userInfo");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "hmf_stringForKey:", *MEMORY[0x1E0D28060]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    *(_QWORD *)v23 = 0;
    -[HMDHomeManager dataSyncInProgressWithState:withMessage:](v6, "dataSyncInProgressWithState:withMessage:", v23, 0);
    -[HMDHomeManager logEventSubmitter](v6, "logEventSubmitter");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v12 = v11;
    else
      v12 = 0;
    v13 = v12;

    objc_msgSend(MEMORY[0x1E0D285C8], "memoryMonitor");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleMemoryPressureState:", objc_msgSend(v14, "lastProcessMemoryState"));

    -[HMDHomeManager logEventSubmitter](v6, "logEventSubmitter");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    HMHomeManagerDataSyncStateToString();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDProcessMemoryPressureNotificationLogEvent createEventWithProcessMemoryState:dataSyncState:](HMDProcessMemoryPressureNotificationLogEvent, "createEventWithProcessMemoryState:dataSyncState:", v10, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "submitLogEvent:", v17);

    -[HMDHomeManager memoryTracker](v6, "memoryTracker");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "trackMemoryUsageWithReason:", 2);

  }
  else
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = v6;
    HMFGetOSLogHandle();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v23 = 138543362;
      *(_QWORD *)&v23[4] = v22;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Notification does not contain process memory state", v23, 0xCu);

    }
    objc_autoreleasePoolPop(v19);
  }

}

- (BOOL)postSyncDataUpdatedNotification
{
  HMDHomeManager *v2;
  os_unfair_lock_s *p_lock;

  v2 = self;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  LOBYTE(v2) = v2->_postSyncDataUpdatedNotification;
  os_unfair_lock_unlock(p_lock);
  return (char)v2;
}

- (void)setPostSyncDataUpdatedNotification:(BOOL)a3
{
  os_unfair_lock_s *p_lock;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  self->_postSyncDataUpdatedNotification = a3;
  os_unfair_lock_unlock(p_lock);
}

- (void)assistantSyncDataChanged:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __43__HMDHomeManager_assistantSyncDataChanged___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (void)handleSiriSyncDataRequest:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __44__HMDHomeManager_handleSiriSyncDataRequest___block_invoke;
  v7[3] = &unk_1E89C2328;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(v5, v7);

}

- (id)hapMetadataForBiomeLogEventObserver:(id)a3
{
  return +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance", a3);
}

- (id)hapMetadataForMicroLocationLogEventObserver:(id)a3
{
  return +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance", a3);
}

- (void)_handleHH2SentinelZonePresent:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543362;
    v11 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@HH2 sentinel zone detected", (uint8_t *)&v10, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager uuid](v6, "uuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HMDHomeManager updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:](v6, "updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("HH2 sentinel zone detected"), v9, 1);

}

- (void)_handleEnableUARPPacketCaptureRequest:(id)a3
{
  id v4;
  int v5;
  uint64_t v6;
  void *v7;
  BOOL v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  const __CFString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB8F30]);
  objc_msgSend(v4, "stringForKey:", *MEMORY[0x1E0CB8F40]);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 0;
  if (!v8)
  {
    -[HMDHomeManager accessoryFirmwareUpdateManager](self, "accessoryFirmwareUpdateManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v5)
    {
      v11 = objc_msgSend(v9, "startUARPPacketCapture:", v7);

      if ((v11 & 1) == 0)
      {
        v12 = (void *)MEMORY[0x1D17BA0A0]();
        v13 = self;
        HMFGetOSLogHandle();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = 138543618;
          v21 = v15;
          v22 = 2112;
          v23 = CFSTR("Request to enable UARP packet capture failed");
          v16 = "%{public}@%@";
          v17 = v14;
          v18 = 22;
LABEL_11:
          _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v20, v18);

          goto LABEL_12;
        }
        goto LABEL_12;
      }
    }
    else
    {
      objc_msgSend(v9, "stopUARPPacketCapture");

    }
    objc_msgSend(v4, "respondWithSuccess");
    goto LABEL_15;
  }
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v13 = self;
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 138543362;
    v21 = v15;
    v16 = "%{public}@Request to enable UARP packet capture is missing capture path";
    v17 = v14;
    v18 = 12;
    goto LABEL_11;
  }
LABEL_12:

  objc_autoreleasePoolPop(v12);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithError:", v19);

LABEL_15:
}

- (id)accessorySetupMetricDispatcherForAccessoryUUID:(id)a3
{
  id v4;
  os_unfair_lock_s *p_lock;
  void *v6;
  id v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  -[HMDHomeManager accessorySetupMetricDispatchers](self, "accessorySetupMetricDispatchers");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __65__HMDHomeManager_accessorySetupMetricDispatcherForAccessoryUUID___block_invoke;
  v10[3] = &unk_1E89BE130;
  v7 = v4;
  v11 = v7;
  objc_msgSend(v6, "na_firstObjectPassingTest:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock(p_lock);
  return v8;
}

- (void)addAccessorySetupMetricDispatcher:(id)a3
{
  os_unfair_lock_s *p_lock;
  NSMutableArray *v5;
  NSMutableArray *accessorySetupMetricDispatchers;
  void *v7;
  id v8;

  v8 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (!self->_accessorySetupMetricDispatchers)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
    self->_accessorySetupMetricDispatchers = v5;

  }
  -[HMDHomeManager accessorySetupMetricDispatchers](self, "accessorySetupMetricDispatchers");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v8);

  os_unfair_lock_unlock(p_lock);
}

- (void)removeAccessorySetupMetricDispatcherForAccessoryUUID:(id)a3
{
  id v4;
  NSMutableArray *accessorySetupMetricDispatchers;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v4 = a3;
  if (v4)
  {
    v7 = v4;
    os_unfair_lock_lock_with_options();
    accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __71__HMDHomeManager_removeAccessorySetupMetricDispatcherForAccessoryUUID___block_invoke;
    v8[3] = &unk_1E89BE130;
    v9 = v7;
    -[NSMutableArray na_firstObjectPassingTest:](accessorySetupMetricDispatchers, "na_firstObjectPassingTest:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
      -[NSMutableArray removeObject:](self->_accessorySetupMetricDispatchers, "removeObject:", v6);

    os_unfair_lock_unlock(&self->_lock);
    v4 = v7;
  }

}

- (id)firstSetupSessionIdentifierOutputStartTime:(double *)a3
{
  os_unfair_lock_s *p_lock;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  if (-[NSMutableArray count](self->_accessorySetupMetricDispatchers, "count"))
  {
    -[NSMutableArray firstObject](self->_accessorySetupMetricDispatchers, "firstObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (a3)
    {
      objc_msgSend(v6, "trackingInfo");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *a3 = (double)(unint64_t)objc_msgSend(v8, "startTime");

    }
    objc_msgSend(v7, "setupSessionIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
    if (a3)
      *a3 = 0.0;
  }
  os_unfair_lock_unlock(p_lock);
  return v9;
}

- (id)accessorySetupMetricDispatchersForHome:(id)a3
{
  id v4;
  os_unfair_lock_s *p_lock;
  NSMutableArray *accessorySetupMetricDispatchers;
  id v7;
  void *v8;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  p_lock = &self->_lock;
  os_unfair_lock_lock_with_options();
  accessorySetupMetricDispatchers = self->_accessorySetupMetricDispatchers;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __57__HMDHomeManager_accessorySetupMetricDispatchersForHome___block_invoke;
  v10[3] = &unk_1E89BE130;
  v7 = v4;
  v11 = v7;
  -[NSMutableArray na_filter:](accessorySetupMetricDispatchers, "na_filter:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock(p_lock);
  return v8;
}

- (BOOL)isCurrentResidentDeviceRunningThreadNetwork:(id)a3
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    -[HMDHomeManager homes](self, "homes", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v9;
      while (2)
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v9 != v5)
            objc_enumerationMutation(v3);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "isCurrentDeviceAvailableResident") & 1) != 0)
          {
            LOBYTE(v4) = 1;
            goto LABEL_12;
          }
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        if (v4)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (BOOL)isStartThreadNetworkInProgress
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  BOOL v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        if (objc_msgSend(v8, "startThreadNetworkInProgress"))
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          v11 = self;
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v20 = v13;
            v21 = 2112;
            v22 = v8;
            _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@thread start in progress for %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v10);
          v9 = 1;
          goto LABEL_13;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
      if (v5)
        continue;
      break;
    }
  }
  v9 = 0;
LABEL_13:

  return v9;
}

- (id)topicNameForMediaGroupParticipantDataLocalStorage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  HMDHomeManager *v19;
  NSObject *v20;
  void *v21;
  int v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "home");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      v9 = (void *)MEMORY[0x1E0CBA240];
      v10 = *MEMORY[0x1E0CB7C20];
      objc_msgSend(v7, "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "topicFromSuffixID:homeUUID:accessoryUUID:", v10, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = self;
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138543362;
        v24 = v21;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Failed to get media group participant data topic name due to no home on current accessory", (uint8_t *)&v23, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      v13 = 0;
    }

  }
  else
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138543362;
      v24 = v17;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Failed to get media group participant data topic name due to no current accessory", (uint8_t *)&v23, 0xCu);

    }
    objc_autoreleasePoolPop(v14);
    v13 = 0;
  }

  return v13;
}

- (void)mediaGroupParticipantLocalDataStorage:(id)a3 didChangeDestinationIdentifier:(id)a4 forDestinationControllerIdentifier:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[HMDHomeManager currentMediaGroupsAggregateCunsumer](self, "currentMediaGroupsAggregateCunsumer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    if (v9)
      objc_msgSend(v11, "unstageNullDestinationForCurrentDestinationController");
    else
      objc_msgSend(v11, "stageNullDestinationForCurrentDestinationControllerIdentifier:", v10);
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to stage current destination controller change due to no current consumer", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
  }

}

- (id)currentMediaGroupsAggregateCunsumer
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager currentAccessoryHome](self, "currentAccessoryHome");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "mediaGroupsAggregateConsumer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to get current media groups aggregate consumer due to no current accessory home", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v5 = 0;
  }

  return v5;
}

- (id)currentAccessoryHome
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "home");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to get current accessory home due to no current accessory", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v5 = 0;
  }

  return v5;
}

- (id)currentAccessoryUUID
{
  void *v2;
  void *v3;
  id v4;
  void *v5;

  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    objc_msgSend(v4, "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (id)currentAccessoryHomeUUID
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  -[HMDHomeManager _accessoryOfCurrentDevice](self, "_accessoryOfCurrentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  if (v4)
  {
    objc_msgSend(v4, "home");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)createCurrentAccessoryCapabilities
{
  HMDMobileGestaltClient *v2;
  void *v3;
  id v4;
  HMDMobileGestaltClient *v5;
  id v6;
  int v7;
  _BOOL4 v8;
  int v9;
  int v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  void *v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BOOL4 v68;
  uint64_t v69;
  _BOOL4 v70;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t v73;
  _BOOL4 v74;
  uint64_t v75;
  _BOOL4 v76;
  uint64_t v77;
  unint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  _BOOL4 v81;
  uint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  _BOOL4 v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v88;
  _BOOL4 v89;
  uint64_t v90;
  _BOOL4 v91;
  uint64_t v92;
  _BOOL4 v93;
  uint64_t v94;
  _BOOL4 v95;
  _BOOL4 v96;
  _BOOL4 v97;
  _BOOL4 v98;
  _BOOL4 v99;
  int v100;
  _BOOL4 v101;
  _BOOL4 v102;
  _BOOL4 v103;
  _BOOL4 v104;
  _BOOL4 v105;
  void *v106;
  HMDMobileGestaltClient *v107;

  v2 = objc_alloc_init(HMDMobileGestaltClient);
  objc_msgSend(MEMORY[0x1E0D28690], "productInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = v2;
  v6 = v3;
  v105 = productSupportsKeychainSync(v6);
  v104 = productSupportsDeviceSetup(v6);
  v103 = productSupportsKeyTransferClient(v6, v5, v4);
  v101 = productSupportsKeyTransferServer(v6);
  v102 = productSupportsStandaloneMode(v6);
  v100 = productSupportsCloudDataSync(v6);
  v99 = productSupportsWholeHouseAudio(v6);
  v98 = productSupportsAssistantAccessControl(v6);
  v97 = productSupportsHomeInvitation(v6);
  v96 = productSupportsTargetControl(v6);
  v95 = productSupportsMultiUser(v6);
  v93 = productSupportsHomeLevelLocationServiceSetting(v6);
  v91 = productSupportsCompanionInitiatedRestart(v6);
  v89 = productSupportsMusicAlarm(v6);
  v87 = productSupportsAnnounce(v6);
  v85 = productSupportsThirdPartyMusic(v6);
  v83 = productSupportsPreferredMediaUser(v6);
  v81 = productSupportsThirdPartyMusic(v6);
  v79 = productSupportsUserMediaSettings(v6);
  v76 = productSupportsCoordinationDoorbellChime(v6);
  v74 = productSupportsHomeHub(v6, v5);
  v107 = v5;
  v7 = productSupportsAudioReturnChannel(v6, v5);
  v72 = productSupportsUserMediaSettings(v6);
  v70 = productSupportsCaptiveNetworks(v6);
  v106 = v4;
  v8 = productSupportsMessagedHomePodSettings(v6, v4);
  v68 = productSupportsMediaActions(v6);
  v9 = productSupportsRMVonAppleTV(v6);
  v10 = productSupportsJustSiri(v6);
  v11 = v6;
  objc_msgSend(v11, "softwareVersion");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
    objc_msgSend(v12, "operatingSystemVersion");

  v14 = objc_msgSend(v11, "productPlatform");
  v15 = objc_msgSend(v11, "productClass");

  v16 = 0;
  if (v15 == 6 && v14 == 4)
    v16 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 31;
  v78 = v16;
  v17 = productSupportsCoordinationFreeDoorbellChime(v11);
  v18 = productSupportsCompanionInitiatedObliterate(v11);
  v19 = v11;
  v20 = objc_msgSend(v19, "productPlatform");
  v21 = objc_msgSend(v19, "productClass");
  objc_msgSend(v19, "softwareVersion");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
    objc_msgSend(v22, "operatingSystemVersion");

  v23 = 0;
  if (v21 == 4 && v20 == 4)
    v23 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 34;
  v67 = v23;
  if (v18)
    v24 = 0x200000000;
  else
    v24 = 0;
  v25 = 0x100000000;
  if (!v17)
    v25 = 0;
  v65 = v25;
  v66 = v24;
  if (v10)
    v26 = 0x40000000;
  else
    v26 = 0;
  v27 = 0x20000000;
  if (!v9)
    v27 = 0;
  v63 = v27;
  v64 = v26;
  if (v68)
    v28 = 0x8000000;
  else
    v28 = 0;
  if (v8)
    v29 = 0x4000000;
  else
    v29 = 0;
  v30 = 0x2000000;
  if (!v70)
    v30 = 0;
  v69 = v28;
  v71 = v30;
  if (v72)
    v31 = 0x1000000;
  else
    v31 = 0;
  v32 = 0x800000;
  if (!v7)
    v32 = 0;
  v61 = v32;
  v62 = v29;
  v33 = 0x400000;
  if (!v74)
    v33 = 0;
  v73 = v31;
  v75 = v33;
  v34 = 0x200000;
  if (!v76)
    v34 = 0;
  v77 = v34;
  if (v79)
    v35 = 0x100000;
  else
    v35 = 0;
  v36 = 0x80000;
  if (!v81)
    v36 = 0;
  v80 = v35;
  v82 = v36;
  if (v83)
    v37 = 0x20000;
  else
    v37 = 0;
  v38 = 0x10000;
  if (!v85)
    v38 = 0;
  v84 = v37;
  v86 = v38;
  if (v87)
    v39 = 0x4000;
  else
    v39 = 0;
  v40 = 0x2000;
  if (!v89)
    v40 = 0;
  v88 = v39;
  v90 = v40;
  if (v91)
    v41 = 4096;
  else
    v41 = 0;
  v42 = 2048;
  if (!v93)
    v42 = 0;
  v92 = v41;
  v94 = v42;
  if (v95)
    v43 = 1024;
  else
    v43 = 0;
  if (v96)
    v44 = 512;
  else
    v44 = 0;
  if (v97)
    v45 = 256;
  else
    v45 = 0;
  if (v98)
    v46 = 128;
  else
    v46 = 0;
  v47 = 2;
  if (!v104)
    v47 = 0;
  v48 = v47 | v105;
  v49 = 4;
  if (!v103)
    v49 = 0;
  v50 = 8;
  if (!v101)
    v50 = 0;
  v51 = v48 | v49 | v50;
  v52 = 16;
  if (!v102)
    v52 = 0;
  v53 = 32;
  if (!v100)
    v53 = 0;
  v54 = v52 | v53;
  if (v99)
    v55 = 64;
  else
    v55 = 0;
  objc_msgSend(v19, "productClass");

  v56 = v51 | v54 | v55 | v46 | v45 | v44 | v43 | v94 | v92 | v90 | v88 | v86 | v84 | v82 | v80 | v77 | v75 | v61 | v73 | v71 | v62 | v69 | v63 | v64 | v78 | v65 | v66 | v67;
  v57 = objc_alloc(MEMORY[0x1E0CBA1D0]);
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = (void *)objc_msgSend(v57, "initWithTagUUID:capabilities:", v58, v56);

  return v59;
}

- (id)createCurrentResidentCapabilities
{
  HMDMobileGestaltClient *v2;
  void *v3;
  void *v4;
  id v5;
  HMDMobileGestaltClient *v6;
  id v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  _BOOL4 AccessoryCommunication;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  id v53;
  HMDMobileGestaltClient *v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  _BOOL8 v59;
  _BOOL4 IsResidentCapable;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  id v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  id v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  id v83;
  void *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v2 = objc_alloc_init(HMDMobileGestaltClient);
  objc_msgSend(MEMORY[0x1E0D28690], "productInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDHomeKitVersion currentVersion](HMDHomeKitVersion, "currentVersion");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v3;
  v6 = v2;
  v7 = v4;
  if (productIsResidentCapable(v5))
  {
    v8 = productSupportsCameraRecording(v5);
    v9 = productSupportsRouterManagement(v5);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v108 = v10;
    v11 = productSupportsShortcutActions(v5);
    v12 = 4;
    if (!v11)
      v12 = 0;
    v107 = v12;
    v13 = productSupportsMediaActions(v5);
    v14 = 8;
    if (!v13)
      v14 = 0;
    v106 = v14;
    v15 = productSupportsFirmwareUpdate(v5);
    v16 = 32;
    if (!v15)
      v16 = 0;
    v109 = v16;
    v17 = productSupportsResidentFirmwareUpdate(v5);
    v18 = 64;
    if (!v17)
      v18 = 0;
    v89 = v18;
    v19 = productSupportsCameraActivityZones(v5);
    v20 = 128;
    if (!v19)
      v20 = 0;
    v88 = v20;
    v21 = productSupportsCameraActivityZones(v5);
    v22 = 256;
    if (!v21)
      v22 = 0;
    v87 = v22;
    if (productSupportsCameraActivityZones(v5))
      v23 = 512;
    else
      v23 = 0;
    if (productSupportsCameraActivityZones(v5))
      v24 = 1024;
    else
      v24 = 0;
    v25 = productSupportsAnnounce(v5);
    v26 = 2048;
    if (!v25)
      v26 = 0;
    v105 = v26;
    v27 = productSupportsWakeOnLAN(v5);
    v28 = 4096;
    if (!v27)
      v28 = 0;
    v104 = v28;
    v29 = productSupportsLockNotificationContext(v5);
    v30 = 0x2000;
    if (!v29)
      v30 = 0;
    v103 = v30;
    v31 = productSupportsLockNotificationContext(v5);
    v32 = 0x4000;
    if (!v31)
      v32 = 0;
    v102 = v32;
    v33 = productSupportsLockNotificationContext(v5);
    v34 = 0x8000;
    if (!v33)
      v34 = 0;
    v101 = v34;
    v35 = productSupportsLockNotificationContext(v5);
    v36 = 0x10000;
    if (!v35)
      v36 = 0;
    v100 = v36;
    v37 = productSupportsLockNotificationContext(v5);
    v38 = 0x20000;
    if (!v37)
      v38 = 0;
    v99 = v38;
    v39 = productSupportsSiriEndpointSetup(v5);
    v40 = 0x80000;
    if (!v39)
      v40 = 0;
    v98 = v40;
    v41 = productSupportsCustomMediaApplicationDestination(v5);
    v42 = 0x100000;
    if (!v41)
      v42 = 0;
    v97 = v42;
    v43 = productSupportsUnifiedMediaNotifications(v5);
    v44 = 0x200000;
    if (!v43)
      v44 = 0;
    v96 = v44;
    v45 = productSupportsHomeHub(v5, v6);
    v46 = 0x400000;
    if (!v45)
      v46 = 0;
    v95 = v46;
    AccessoryCommunication = productSupportsResidentFirstAccessoryCommunication(v5);
    v48 = 0x800000;
    if (!AccessoryCommunication)
      v48 = 0;
    v94 = v48;
    v49 = productSupportsThreadNetworkCredentialSharing(v5, v6, v7);
    v50 = 0x1000000;
    if (!v49)
      v50 = 0;
    v93 = v50;
    v51 = productSupportsMatterSharedAdminPairing(v5, v6, v7);
    v52 = 0x2000000;
    if (!v51)
      v52 = 0;
    v92 = v52;
    v53 = v5;
    v54 = v6;
    v55 = v7;
    objc_msgSend(v53, "softwareVersion");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = v56;
    v86 = v23;
    if (v56)
      objc_msgSend(v56, "operatingSystemVersion");
    v59 = v8;

    if (HMFOperatingSystemVersionCompare() == 1)
    {
      v91 = 0;
    }
    else
    {
      IsResidentCapable = productIsResidentCapable(v53);
      v61 = 0x10000000;
      if (!IsResidentCapable)
        v61 = 0;
      v91 = v61;
    }

    v62 = productSupportsMatterOwnerCertFetch(v53, v54, v55);
    v63 = 0x100000000;
    if (!v62)
      v63 = 0;
    v90 = v63;
    v64 = v53;
    objc_msgSend(v64, "softwareVersion");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    v66 = v65;
    if (v65)
      objc_msgSend(v65, "operatingSystemVersion");
    v67 = v108 | v59;

    v68 = objc_msgSend(v64, "productPlatform");
    v69 = objc_msgSend(v64, "productClass");

    if ((v69 | 2) == 6 && v68 == 4)
      v70 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 33;
    else
      v70 = 0;
    v71 = v64;
    objc_msgSend(v71, "softwareVersion");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = v72;
    if (v72)
      objc_msgSend(v72, "operatingSystemVersion");
    v74 = v67 | v107 | v106 | v109;

    v75 = objc_msgSend(v71, "productPlatform");
    v76 = objc_msgSend(v71, "productClass");

    if ((v76 | 2) == 6 && v75 == 4)
    {
      if (HMFOperatingSystemVersionCompare() == 1)
      {
        v78 = v88;
        v77 = v89;
        v80 = v86;
        v79 = v87;
        if (isInternalBuild())
          v81 = (unint64_t)(HMFOperatingSystemVersionCompare() != 1) << 34;
        else
          v81 = 0;
        goto LABEL_75;
      }
      v81 = 0x400000000;
    }
    else
    {
      v81 = 0;
    }
    v78 = v88;
    v77 = v89;
    v80 = v86;
    v79 = v87;
LABEL_75:
    v82 = v74 | v77 | v78 | v79 | v80 | v24 | v105 | v104 | v103 | v102 | v101 | v100 | v99 | v98 | v97 | v96 | v95 | v94 | v93 | v92 | v91 | v90 | v70 | v81;
    v83 = objc_alloc(MEMORY[0x1E0CBA7B8]);
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = (void *)objc_msgSend(v83, "initWithTagUUID:capabilities:", v84, v82);

    goto LABEL_76;
  }
  v58 = 0;
LABEL_76:

  return v58;
}

- (BOOL)userWithMergeIdIsMemberOfAHome:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  char v17;
  os_unfair_lock_s *p_lock;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  BOOL v23;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t k;
  void *v30;
  void *v31;
  char v32;
  void *v33;
  HMDHomeManager *v34;
  NSObject *v35;
  void *v36;
  uint64_t v37;
  HMDHomeManager *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t v51[128];
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  id v55;
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v38 = self;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v48;
    v37 = *(_QWORD *)v48;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v48 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
        objc_msgSend(v9, "userWithMergeID:", v4, v37);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = v10 == 0;

        if (!v11)
        {
LABEL_22:

          goto LABEL_23;
        }
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        objc_msgSend(v9, "removedUsers");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v43, v56, 16);
        if (v13)
        {
          v14 = *(_QWORD *)v44;
          while (2)
          {
            for (j = 0; j != v13; ++j)
            {
              if (*(_QWORD *)v44 != v14)
                objc_enumerationMutation(v12);
              objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * j), "mergeID");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "isEqualToString:", v4);

              if ((v17 & 1) != 0)
              {

                goto LABEL_22;
              }
            }
            v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v43, v56, 16);
            if (v13)
              continue;
            break;
          }
        }

        v7 = v37;
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
      v7 = v37;
      if (v6)
        continue;
      break;
    }
  }

  p_lock = &v38->_lock;
  os_unfair_lock_lock_with_options();
  if (-[NSMutableSet containsObject:](v38->_mergeIDsOfUsersOfRemovedSharedHomes, "containsObject:", v4))
  {
    v19 = (void *)MEMORY[0x1D17BA0A0]();
    v20 = v38;
    HMFGetOSLogHandle();
    v21 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v53 = v22;
      v54 = 2112;
      v55 = v4;
      _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Merge ID %@ found in list of removed homes", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v19);
    os_unfair_lock_unlock(p_lock);
LABEL_23:
    v23 = 1;
  }
  else
  {
    os_unfair_lock_unlock(p_lock);
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    -[HMDHomeManager incomingInvitations](v38, "incomingInvitations");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)objc_msgSend(v25, "copy");

    v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
    if (v27)
    {
      v28 = *(_QWORD *)v40;
      while (2)
      {
        for (k = 0; k != v27; ++k)
        {
          if (*(_QWORD *)v40 != v28)
            objc_enumerationMutation(v26);
          v30 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * k);
          if (objc_msgSend(v30, "isAccepted"))
          {
            objc_msgSend(v30, "inviterMergeID");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            v32 = objc_msgSend(v31, "isEqual:", v4);

            if ((v32 & 1) != 0)
            {

              goto LABEL_23;
            }
          }
        }
        v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
        if (v27)
          continue;
        break;
      }
    }

    v33 = (void *)MEMORY[0x1D17BA0A0]();
    v34 = v38;
    HMFGetOSLogHandle();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v53 = v36;
      v54 = 2112;
      v55 = v4;
      _os_log_impl(&dword_1CD062000, v35, OS_LOG_TYPE_DEFAULT, "%{public}@Home Membership Verifier unable to find user with mergeID %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v33);
    v23 = 0;
  }

  return v23;
}

- (BOOL)expectingInvitationResponseForIdentifier:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  char v17;
  BOOL v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    -[HMDHomeManager homes](self, "homes");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v26;
      v20 = *(_QWORD *)v26;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v26 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
          v21 = 0u;
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          objc_msgSend(v10, "outgoingInvitations");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
          if (v12)
          {
            v13 = v12;
            v14 = *(_QWORD *)v22;
            while (2)
            {
              for (j = 0; j != v13; ++j)
              {
                if (*(_QWORD *)v22 != v14)
                  objc_enumerationMutation(v11);
                objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * j), "identifier");
                v16 = (void *)objc_claimAutoreleasedReturnValue();
                v17 = objc_msgSend(v16, "isEqual:", v4);

                if ((v17 & 1) != 0)
                {

                  v18 = 1;
                  goto LABEL_21;
                }
              }
              v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
              if (v13)
                continue;
              break;
            }
          }

          v8 = v20;
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
        v18 = 0;
      }
      while (v7);
    }
    else
    {
      v18 = 0;
    }
LABEL_21:

  }
  else
  {
    v18 = 0;
  }

  return v18;
}

- (void)_handleDumpDatabase:(id)a3
{
  id v4;
  void *v5;
  char v6;
  uint64_t v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v11;
      v21 = 2112;
      v22 = v4;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_FAULT, "%{public}@Should never call _handleDumpDatabase in non-internal builds: %@", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v12 = (void *)MEMORY[0x1E0CB35C8];
    v13 = 52;
    goto LABEL_10;
  }
  objc_msgSend(v4, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0CB8F00]);

  if ((v6 & 1) == 0)
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = self;
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543618;
      v20 = v17;
      v21 = 2112;
      v22 = v4;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Received bad message in _handleDumpDatabase: %@", (uint8_t *)&v19, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    v12 = (void *)MEMORY[0x1E0CB35C8];
    v13 = 3;
LABEL_10:
    objc_msgSend(v12, "hmErrorWithCode:", v13);
    v7 = objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 48, 0, CFSTR("Database dump only supported in ROAR mode"), 0);
  v7 = objc_claimAutoreleasedReturnValue();
LABEL_11:
  v18 = (void *)v7;
  objc_msgSend(v4, "respondWithError:", v7);

}

- (void)_handlePrepareForDiagnosticExtension:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v10;
      v20 = 2112;
      v21 = v4;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_FAULT, "%{public}@Should never call _handlePrepareForDiagnosticExtension in non-internal builds: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v12 = 52;
    goto LABEL_10;
  }
  objc_msgSend(v4, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0CB9068]);

  if ((v6 & 1) == 0)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v16;
      v20 = 2112;
      v21 = v4;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Received bad message in _handlePrepareForDiagnosticExtension: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v12 = 3;
LABEL_10:
    objc_msgSend(v11, "hmErrorWithCode:", v12);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v17);

    goto LABEL_11;
  }
  -[HMDHomeManager prepareForDiagnosticExtension:](self, "prepareForDiagnosticExtension:", v4);
LABEL_11:

}

- (void)_signpostAssistantSyncDataNotification
{
  NSObject *logger;
  uint8_t v3[16];

  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    *(_WORD *)v3 = 0;
    _os_signpost_emit_with_name_impl(&dword_1CD062000, logger, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NotifyAssistantSyncDataReadiness", ", v3, 2u);
  }
}

- (void)_signpostAssistantSyncDataRequestHandled
{
  NSObject *logger;
  uint8_t v3[16];

  logger = self->_logger;
  if (os_signpost_enabled(logger))
  {
    *(_WORD *)v3 = 0;
    _os_signpost_emit_with_name_impl(&dword_1CD062000, logger, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AssistantSyncDataRequestHandled", ", v3, 2u);
  }
}

- (unint64_t)homeDatabaseSize
{
  return self->_homeDatabaseSize;
}

- (BOOL)pcsEnabled
{
  return self->_pcsEnabled;
}

- (void)setPcsEnabled:(BOOL)a3
{
  self->_pcsEnabled = a3;
}

- (HMDSoftwareUpdateManager)softwareUpdateManager
{
  return self->_softwareUpdateManager;
}

- (HMDWidgetConfigurationReader)widgetConfigurationReader
{
  return self->_widgetConfigurationReader;
}

- (unint64_t)status
{
  return self->_status;
}

- (HMDAssistantGather)gatherer
{
  return self->_gatherer;
}

- (void)setGatherer:(id)a3
{
  objc_storeStrong((id *)&self->_gatherer, a3);
}

- (HMDCompositeSettingsControllerManager)compositeSettingsControllerManager
{
  return (HMDCompositeSettingsControllerManager *)objc_getProperty(self, a2, 152, 1);
}

- (HMDMTSXPCServer)mtsXPCServer
{
  return (HMDMTSXPCServer *)objc_getProperty(self, a2, 168, 1);
}

- (void)setIdsServerBag:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 176);
}

- (HMDCapabilitiesController)capabilitiesController
{
  return self->_capabilitiesController;
}

- (HMDHomeManagerObjectLookup)lookup
{
  return self->_lookup;
}

- (HMDCameraRecordingLoadBalancer)cameraLoadBalancer
{
  return self->_cameraLoadBalancer;
}

- (void)setCameraLoadBalancer:(id)a3
{
  objc_storeStrong((id *)&self->_cameraLoadBalancer, a3);
}

- (BOOL)hasLoadedData
{
  return self->_hasLoadedData;
}

- (void)setHasLoadedData:(BOOL)a3
{
  self->_hasLoadedData = a3;
}

- (void)setLogEventSubmitter:(id)a3
{
  objc_storeStrong((id *)&self->_logEventSubmitter, a3);
}

- (void)setAppleAccountManager:(id)a3
{
  objc_storeStrong((id *)&self->_appleAccountManager, a3);
}

- (HMFTimer)debounceHomesUpdateTimer
{
  return self->_debounceHomesUpdateTimer;
}

- (void)setDebounceHomesUpdateTimer:(id)a3
{
  objc_storeStrong((id *)&self->_debounceHomesUpdateTimer, a3);
}

- (HMFTimer)periodicMobileCatalogUpdateTimer
{
  return self->_periodicMobileCatalogUpdateTimer;
}

- (void)setPeriodicMobileCatalogUpdateTimer:(id)a3
{
  objc_storeStrong((id *)&self->_periodicMobileCatalogUpdateTimer, a3);
}

- (HMFTimer)memoryMonitorLogEventTimer
{
  return self->_memoryMonitorLogEventTimer;
}

- (void)setMemoryMonitorLogEventTimer:(id)a3
{
  objc_storeStrong((id *)&self->_memoryMonitorLogEventTimer, a3);
}

- (unint64_t)stateHandle
{
  return self->_stateHandle;
}

- (void)setStateHandle:(unint64_t)a3
{
  self->_stateHandle = a3;
}

- (NSMutableSet)pendingHomesBeingRemoved
{
  return self->_pendingHomesBeingRemoved;
}

- (void)setPendingHomesBeingRemoved:(id)a3
{
  objc_storeStrong((id *)&self->_pendingHomesBeingRemoved, a3);
}

- (HMDCompanionManager)companionManager
{
  return self->_companionManager;
}

- (int64_t)residentEnabledState
{
  return self->_residentEnabledState;
}

- (void)setResidentEnabledState:(int64_t)a3
{
  self->_residentEnabledState = a3;
}

- (NSMutableDictionary)userPushCacheMap
{
  return self->_userPushCacheMap;
}

- (NSMutableArray)accessorySetupMetricDispatchers
{
  return self->_accessorySetupMetricDispatchers;
}

- (NSMutableSet)mergeIDsOfUsersOfRemovedSharedHomes
{
  return self->_mergeIDsOfUsersOfRemovedSharedHomes;
}

- (NSDictionary)demoAccessories
{
  return self->_demoAccessories;
}

- (void)setDemoAccessories:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 320);
}

- (BOOL)speakersAreConfigured
{
  return self->_speakersAreConfigured;
}

- (void)setSpeakersAreConfigured:(BOOL)a3
{
  self->_speakersAreConfigured = a3;
}

- (BOOL)speakersAreConfiguredInOwnedHomes
{
  return self->_speakersAreConfiguredInOwnedHomes;
}

- (void)setSpeakersAreConfiguredInOwnedHomes:(BOOL)a3
{
  self->_speakersAreConfiguredInOwnedHomes = a3;
}

- (HMDarwinNotificationProvider)darwinNotificationProvider
{
  return self->_darwinNotificationProvider;
}

- (HMDRemoteAccountManager)remoteAccountManager
{
  return self->_remoteAccountManager;
}

- (NSMutableSet)unprocessedOperationModelIdentifiers
{
  return self->_unprocessedOperationModelIdentifiers;
}

- (void)setUnprocessedOperationModelIdentifiers:(id)a3
{
  objc_storeStrong((id *)&self->_unprocessedOperationModelIdentifiers, a3);
}

- (HMDUserCloudShareManager)userCloudShareManager
{
  return self->_userCloudShareManager;
}

- (HMDAppleMediaAccessoryDiagnosticInfoController)appleMediaAccessoryDiagnosticInfoController
{
  return self->_appleMediaAccessoryDiagnosticInfoController;
}

- (HMDCloudManagerDataSource)cloudDataSource
{
  return (HMDCloudManagerDataSource *)objc_getProperty(self, a2, 376, 1);
}

- (HMDAccessorySetupCoordinator)accessorySetupCoordinator
{
  return (HMDAccessorySetupCoordinator *)objc_getProperty(self, a2, 384, 1);
}

- (HMDMemoryUtilizationTracker)memoryTracker
{
  return self->_memoryTracker;
}

- (HMDBonjourBrowserHelper)bonjourBrowser
{
  return self->_bonjourBrowser;
}

- (void)setBonjourBrowser:(id)a3
{
  objc_storeStrong((id *)&self->_bonjourBrowser, a3);
}

- (HMDDuetPredictionSubscriber)duetSubscriber
{
  return (HMDDuetPredictionSubscriber *)objc_getProperty(self, a2, 408, 1);
}

- (void)setDuetSubscriber:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 408);
}

- (HMDBiomeLogEventObserver)biomeLogEventObserver
{
  return (HMDBiomeLogEventObserver *)objc_getProperty(self, a2, 416, 1);
}

- (void)setBiomeLogEventObserver:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 416);
}

- (HMDMicroLocationLogEventObserver)microLocationLogEventObserver
{
  return (HMDMicroLocationLogEventObserver *)objc_getProperty(self, a2, 424, 1);
}

- (void)setMicroLocationLogEventObserver:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 424);
}

- (HMDMicroLocationManager)microLocationManager
{
  return (HMDMicroLocationManager *)objc_getProperty(self, a2, 432, 1);
}

- (void)setMicroLocationManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 432);
}

- (NSMutableSet)activeConnections
{
  return (NSMutableSet *)objc_getProperty(self, a2, 440, 1);
}

- (NSDate)bonjourBrowserHelperLastCompletionDate
{
  return self->_bonjourBrowserHelperLastCompletionDate;
}

- (void)setBonjourBrowserHelperLastCompletionDate:(id)a3
{
  objc_storeStrong((id *)&self->_bonjourBrowserHelperLastCompletionDate, a3);
}

- (HMEDelegatingEventRouter)registrationForwardingEventRouter
{
  return self->_registrationForwardingEventRouter;
}

- (void)setRegistrationForwardingEventRouter:(id)a3
{
  objc_storeStrong((id *)&self->_registrationForwardingEventRouter, a3);
}

- (HMEMemoryEventBus)memoryEventRouter
{
  return self->_memoryEventRouter;
}

- (void)setMemoryEventRouter:(id)a3
{
  objc_storeStrong((id *)&self->_memoryEventRouter, a3);
}

- (HMDLoggingEventForwarder)loggingMemoryEventForwarder
{
  return self->_loggingMemoryEventForwarder;
}

- (void)setLoggingMemoryEventForwarder:(id)a3
{
  objc_storeStrong((id *)&self->_loggingMemoryEventForwarder, a3);
}

- (HMDXPCEventRouterServer)eventRouterXPCServer
{
  return self->_eventRouterXPCServer;
}

- (void)setEventRouterXPCServer:(id)a3
{
  objc_storeStrong((id *)&self->_eventRouterXPCServer, a3);
}

- (HMDRemoteEventRouterAssertionController)eventRouterAssertionController
{
  return self->_eventRouterAssertionController;
}

- (void)setEventRouterAssertionController:(id)a3
{
  objc_storeStrong((id *)&self->_eventRouterAssertionController, a3);
}

- (HMDSiriEndpointSettingsSyncManager)siriEndPointSettingsSyncManager
{
  return (HMDSiriEndpointSettingsSyncManager *)objc_getProperty(self, a2, 504, 1);
}

- (void)setSiriEndPointSettingsSyncManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 504);
}

- (HMDMultiUserSettingsMetricsEventDispatcher)multiUserSettingsMetricEventDispatcher
{
  return (HMDMultiUserSettingsMetricsEventDispatcher *)objc_getProperty(self, a2, 512, 1);
}

- (BOOL)missingHomeDataRecord
{
  return self->_missingHomeDataRecord;
}

- (void)setMissingHomeDataRecord:(BOOL)a3
{
  self->_missingHomeDataRecord = a3;
}

- (void)setLastRemovedCurrentAccessoryUUID:(id)a3
{
  objc_setProperty_atomic_copy(self, a2, a3, 520);
}

- (HMDWidgetTimelineRefresher)widgetTimelineRefresher
{
  return (HMDWidgetTimelineRefresher *)objc_getProperty(self, a2, 528, 1);
}

- (BOOL)didCreateAddACWGKeysOperation
{
  return self->_didCreateAddACWGKeysOperation;
}

- (void)setDidCreateAddACWGKeysOperation:(BOOL)a3
{
  self->_didCreateAddACWGKeysOperation = a3;
}

- (HAPKeyStore)hapKeyStore
{
  return self->_hapKeyStore;
}

- (void)setHapKeyStore:(id)a3
{
  objc_storeStrong((id *)&self->_hapKeyStore, a3);
}

- (HMDDatabase)defaultDatabase
{
  return self->_defaultDatabase;
}

- (void)setDefaultDatabase:(id)a3
{
  objc_storeStrong((id *)&self->_defaultDatabase, a3);
}

- (BOOL)initialPCSStatusFetchCompleted
{
  return self->_initialPCSStatusFetchCompleted;
}

- (void)setInitialPCSStatusFetchCompleted:(BOOL)a3
{
  self->_initialPCSStatusFetchCompleted = a3;
}

- (HMDHomeManagerObjectChangeHandler)homeManagerObjectChangeHandler
{
  return self->_homeManagerObjectChangeHandler;
}

- (NSUUID)uuid
{
  return self->_uuid;
}

- (BOOL)isHomeManagerZoneFirstFetch
{
  return self->_homeManagerZoneFirstFetch;
}

- (void)setHomeManagerZoneFirstFetch:(BOOL)a3
{
  self->_homeManagerZoneFirstFetch = a3;
}

- (NSMutableArray)cloudZones
{
  return self->_cloudZones;
}

- (void)setCloudZones:(id)a3
{
  objc_storeStrong((id *)&self->_cloudZones, a3);
}

- (NSMutableArray)uuidsOfRemovedHomes
{
  return self->_uuidsOfRemovedHomes;
}

- (void)setUuidsOfRemovedHomes:(id)a3
{
  objc_storeStrong((id *)&self->_uuidsOfRemovedHomes, a3);
}

- (void)setPrimaryHomeUUID:(id)a3
{
  objc_storeStrong((id *)&self->_primaryHomeUUID, a3);
}

- (NSUUID)lastCurrentHomeUUID
{
  return self->_lastCurrentHomeUUID;
}

- (void)setLastCurrentHomeUUID:(id)a3
{
  objc_storeStrong((id *)&self->_lastCurrentHomeUUID, a3);
}

- (void)setWorkQueue:(id)a3
{
  objc_storeStrong((id *)&self->_workQueue, a3);
}

- (HMDMessageDispatcher)messageDispatcher
{
  return self->_messageDispatcher;
}

- (void)setMessageDispatcher:(id)a3
{
  objc_storeStrong((id *)&self->_messageDispatcher, a3);
}

- (NSMutableSet)unassociatedRemotePeers
{
  return self->_unassociatedRemotePeers;
}

- (void)setUnassociatedRemotePeers:(id)a3
{
  objc_storeStrong((id *)&self->_unassociatedRemotePeers, a3);
}

- (NSMutableDictionary)associatedRemotePeers
{
  return self->_associatedRemotePeers;
}

- (void)setAssociatedRemotePeers:(id)a3
{
  objc_storeStrong((id *)&self->_associatedRemotePeers, a3);
}

- (NSMutableSet)fullSyncedWatchPeers
{
  return self->_fullSyncedWatchPeers;
}

- (void)setFullSyncedWatchPeers:(id)a3
{
  objc_storeStrong((id *)&self->_fullSyncedWatchPeers, a3);
}

- (NSMutableDictionary)associatedWatchPeers
{
  return self->_associatedWatchPeers;
}

- (NSMutableDictionary)watchSyncStateMap
{
  return self->_watchSyncStateMap;
}

- (NSMutableDictionary)watchSyncRetryContextBySyncIdentifier
{
  return (NSMutableDictionary *)objc_getProperty(self, a2, 656, 1);
}

- (NSMapTable)watchSyncRetryContextByRetryTimer
{
  return (NSMapTable *)objc_getProperty(self, a2, 664, 1);
}

- (HMDPairedSync)pairedSync
{
  return self->_pairedSync;
}

- (int)generationCounterToken
{
  return self->_generationCounterToken;
}

- (void)setGenerationCounterToken:(int)a3
{
  self->_generationCounterToken = a3;
}

- (unint64_t)assistantGenerationCounter
{
  return self->_assistantGenerationCounter;
}

- (void)setAssistantGenerationCounter:(unint64_t)a3
{
  self->_assistantGenerationCounter = a3;
}

- (HMDNameValidator)nameValidator
{
  return self->_nameValidator;
}

- (void)setNameValidator:(id)a3
{
  objc_storeStrong((id *)&self->_nameValidator, a3);
}

- (OS_dispatch_source)accessoryFinderTimer
{
  return self->_accessoryFinderTimer;
}

- (void)setAccessoryFinderTimer:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryFinderTimer, a3);
}

- (NSMutableArray)pendingResponsesForAccessoryFinder
{
  return self->_pendingResponsesForAccessoryFinder;
}

- (void)setPendingResponsesForAccessoryFinder:(id)a3
{
  objc_storeStrong((id *)&self->_pendingResponsesForAccessoryFinder, a3);
}

- (HMDPowerManager)powerManager
{
  return self->_powerManager;
}

- (void)setPowerManager:(id)a3
{
  objc_storeStrong((id *)&self->_powerManager, a3);
}

- (void)setNotificationCenter:(id)a3
{
  objc_storeStrong((id *)&self->_notificationCenter, a3);
}

- (HMDHH1IDSInvitationManager)idsInvitationManager
{
  return self->_idsInvitationManager;
}

- (void)setIdsInvitationManager:(id)a3
{
  objc_storeStrong((id *)&self->_idsInvitationManager, a3);
}

- (HMDCloudManager)cloudDataSyncManager
{
  return self->_cloudDataSyncManager;
}

- (void)setCloudDataSyncManager:(id)a3
{
  objc_storeStrong((id *)&self->_cloudDataSyncManager, a3);
}

- (HMDIDSFirewallManager)idsFirewallManager
{
  return self->_idsFirewallManager;
}

- (void)setIdsFirewallManager:(id)a3
{
  objc_storeStrong((id *)&self->_idsFirewallManager, a3);
}

- (HMFActivity)setupActivity
{
  return self->_setupActivity;
}

- (void)setSetupActivity:(id)a3
{
  objc_storeStrong((id *)&self->_setupActivity, a3);
}

- (unint64_t)homepodSetupRetryCount
{
  return self->_homepodSetupRetryCount;
}

- (void)setHomepodSetupRetryCount:(unint64_t)a3
{
  self->_homepodSetupRetryCount = a3;
}

- (HMDWatchManager)watchManager
{
  return self->_watchManager;
}

- (HMDBackingStore)backingStore
{
  return self->_backingStore;
}

- (void)setBackingStore:(id)a3
{
  objc_storeStrong((id *)&self->_backingStore, a3);
}

- (NSUUID)dataTag
{
  return self->_dataTag;
}

- (void)setDataTag:(id)a3
{
  objc_storeStrong((id *)&self->_dataTag, a3);
}

- (int64_t)recoveryVersion
{
  return self->_recoveryVersion;
}

- (void)setRecoveryVersion:(int64_t)a3
{
  self->_recoveryVersion = a3;
}

- (NSMutableDictionary)pendingDataSyncAcks
{
  return self->_pendingDataSyncAcks;
}

- (void)setPendingDataSyncAcks:(id)a3
{
  objc_storeStrong((id *)&self->_pendingDataSyncAcks, a3);
}

- (NSMutableDictionary)pendingRemoteSessions
{
  return self->_pendingRemoteSessions;
}

- (void)setPendingRemoteSessions:(id)a3
{
  objc_storeStrong((id *)&self->_pendingRemoteSessions, a3);
}

- (NSMutableSet)pendingResidentSetupSessions
{
  return self->_pendingResidentSetupSessions;
}

- (void)setPendingResidentSetupSessions:(id)a3
{
  objc_storeStrong((id *)&self->_pendingResidentSetupSessions, a3);
}

- (HMDMessageFilterChain)msgFilterChain
{
  return self->_msgFilterChain;
}

- (void)setMsgFilterChain:(id)a3
{
  objc_storeStrong((id *)&self->_msgFilterChain, a3);
}

- (NSMutableSet)dialogCancelationContexts
{
  return self->_dialogCancelationContexts;
}

- (void)setDialogCancelationContexts:(id)a3
{
  objc_storeStrong((id *)&self->_dialogCancelationContexts, a3);
}

- (HMDIdentityRegistry)identityRegistry
{
  return self->_identityRegistry;
}

- (void)setIdentityRegistry:(id)a3
{
  objc_storeStrong((id *)&self->_identityRegistry, a3);
}

- (BOOL)accountActive
{
  return self->_accountActive;
}

- (void)setAccountActive:(BOOL)a3
{
  self->_accountActive = a3;
}

- (BOOL)accountStatusFailedDueToNetworkFailure
{
  return self->_accountStatusFailedDueToNetworkFailure;
}

- (void)setAccountStatusFailedDueToNetworkFailure:(BOOL)a3
{
  self->_accountStatusFailedDueToNetworkFailure = a3;
}

- (BOOL)backOffOperationInProgress
{
  return self->_backOffOperationInProgress;
}

- (void)setBackOffOperationInProgress:(BOOL)a3
{
  self->_backOffOperationInProgress = a3;
}

- (unint64_t)cloudOperationRetryCount
{
  return self->_cloudOperationRetryCount;
}

- (void)setCloudOperationRetryCount:(unint64_t)a3
{
  self->_cloudOperationRetryCount = a3;
}

- (BOOL)uploadToCloudIsPending
{
  return self->_uploadToCloudIsPending;
}

- (void)setUploadToCloudIsPending:(BOOL)a3
{
  self->_uploadToCloudIsPending = a3;
}

- (BOOL)uploadHomeDataToCloud
{
  return self->_uploadHomeDataToCloud;
}

- (void)setUploadHomeDataToCloud:(BOOL)a3
{
  self->_uploadHomeDataToCloud = a3;
}

- (BOOL)forceFetchHomeManagerZone
{
  return self->_forceFetchHomeManagerZone;
}

- (void)setForceFetchHomeManagerZone:(BOOL)a3
{
  self->_forceFetchHomeManagerZone = a3;
}

- (BOOL)lastAnswerForShouldCloudSyncData
{
  return self->_lastAnswerForShouldCloudSyncData;
}

- (void)setLastAnswerForShouldCloudSyncData:(BOOL)a3
{
  self->_lastAnswerForShouldCloudSyncData = a3;
}

- (OS_dispatch_source)cloudOperationRetryTimer
{
  return self->_cloudOperationRetryTimer;
}

- (void)setCloudOperationRetryTimer:(id)a3
{
  objc_storeStrong((id *)&self->_cloudOperationRetryTimer, a3);
}

- (void)setCloudDataSyncStateFilter:(id)a3
{
  objc_storeStrong((id *)&self->_cloudDataSyncStateFilter, a3);
}

- (BOOL)uploadMetadataToCloud
{
  return self->_uploadMetadataToCloud;
}

- (void)setUploadMetadataToCloud:(BOOL)a3
{
  self->_uploadMetadataToCloud = a3;
}

- (HMDLocation)locationHandler
{
  return self->_locationHandler;
}

- (void)setLocationHandler:(id)a3
{
  objc_storeStrong((id *)&self->_locationHandler, a3);
}

- (HMDFMFHandler)fmfHandler
{
  return self->_fmfHandler;
}

- (void)setFmfHandler:(id)a3
{
  objc_storeStrong((id *)&self->_fmfHandler, a3);
}

- (HMDAccountRegistry)accountRegistry
{
  return self->_accountRegistry;
}

- (void)setIncomingInvitations:(id)a3
{
  objc_storeStrong((id *)&self->_incomingInvitations, a3);
}

- (BOOL)ignoreFirstTimeReachabilityChanged
{
  return self->_ignoreFirstTimeReachabilityChanged;
}

- (void)setIgnoreFirstTimeReachabilityChanged:(BOOL)a3
{
  self->_ignoreFirstTimeReachabilityChanged = a3;
}

- (BOOL)companionReachable
{
  return self->_companionReachable;
}

- (void)setCompanionReachable:(BOOL)a3
{
  self->_companionReachable = a3;
}

- (HMDClientConnection)clientConnection
{
  return self->_clientConnection;
}

- (void)setClientConnection:(id)a3
{
  objc_storeStrong((id *)&self->_clientConnection, a3);
}

- (OS_dispatch_queue)clientConnectionQueue
{
  return self->_clientConnectionQueue;
}

- (void)setClientConnectionQueue:(id)a3
{
  objc_storeStrong((id *)&self->_clientConnectionQueue, a3);
}

- (BOOL)accountStatusIsAuthenticated
{
  return self->_accountStatusIsAuthenticated;
}

- (void)setAccountStatusIsAuthenticated:(BOOL)a3
{
  self->_accountStatusIsAuthenticated = a3;
}

- (HMFTimer)remoteAccessHealthMonitorTimer
{
  return self->_remoteAccessHealthMonitorTimer;
}

- (void)setRemoteAccessHealthMonitorTimer:(id)a3
{
  objc_storeStrong((id *)&self->_remoteAccessHealthMonitorTimer, a3);
}

- (unsigned)nextRequestTransactionIdentifier
{
  return self->_nextRequestTransactionIdentifier;
}

- (NSMutableDictionary)pendingFragmentationStream
{
  return self->_pendingFragmentationStream;
}

- (void)setPendingFragmentationStream:(id)a3
{
  objc_storeStrong((id *)&self->_pendingFragmentationStream, a3);
}

- (BOOL)homeDataLoadedFromArchive
{
  return self->_homeDataLoadedFromArchive;
}

- (void)setHomeDataLoadedFromArchive:(BOOL)a3
{
  self->_homeDataLoadedFromArchive = a3;
}

- (HMFTimer)watchPushDelayTimer
{
  return self->_watchPushDelayTimer;
}

- (HMFTimer)sharedHomesPushDelayTimer
{
  return self->_sharedHomesPushDelayTimer;
}

- (BOOL)cloudkitAccountStatusDetermined
{
  return self->_cloudkitAccountStatusDetermined;
}

- (void)setCloudkitAccountStatusDetermined:(BOOL)a3
{
  self->_cloudkitAccountStatusDetermined = a3;
}

- (BOOL)needToCleanUpKeys
{
  return self->_needToCleanUpKeys;
}

- (void)setNeedToCleanUpKeys:(BOOL)a3
{
  self->_needToCleanUpKeys = a3;
}

- (void)setAppData:(id)a3
{
  objc_storeStrong((id *)&self->_appData, a3);
}

- (HMDResidentMesh)residentMesh
{
  return self->_residentMesh;
}

- (void)setResidentMesh:(id)a3
{
  objc_storeStrong((id *)&self->_residentMesh, a3);
}

- (HMDCurrentAccessorySetupMetricDispatcher)currentAccessorySetupMetricDispatcher
{
  return self->_currentAccessorySetupMetricDispatcher;
}

- (void)setCurrentAccessorySetupMetricDispatcher:(id)a3
{
  objc_storeStrong((id *)&self->_currentAccessorySetupMetricDispatcher, a3);
}

- (HMDAccessorySetupManager)accessorySetupManager
{
  return self->_accessorySetupManager;
}

- (void)setHh2FrameworkSwitch:(id)a3
{
  objc_storeStrong((id *)&self->_hh2FrameworkSwitch, a3);
}

- (HMDHH2AutoMigrationMonitor)hh2AutoMigrationMonitor
{
  return self->_hh2AutoMigrationMonitor;
}

- (void)setHh2AutoMigrationMonitor:(id)a3
{
  objc_storeStrong((id *)&self->_hh2AutoMigrationMonitor, a3);
}

- (HMDHH2AutoMigrationEligibilityChecker)hh2AutoMigrationEligibilityChecker
{
  return self->_hh2AutoMigrationEligibilityChecker;
}

- (void)setHh2AutoMigrationEligibilityChecker:(id)a3
{
  objc_storeStrong((id *)&self->_hh2AutoMigrationEligibilityChecker, a3);
}

- (HMDSiriEndpointOnboardingManager)siriEndpointOnboardingManager
{
  return (HMDSiriEndpointOnboardingManager *)objc_getProperty(self, a2, 1024, 1);
}

- (void)setHh2MigrationInProgress:(BOOL)a3
{
  self->_hh2MigrationInProgress = a3;
}

- (HMDSyncOperationManager)syncManager
{
  return self->_syncManager;
}

- (HMDCloudAccount)cloudAccount
{
  return self->_cloudAccount;
}

- (HMDAppleAccessoryPairingController)legacyAccessoryPairingController
{
  return self->_legacyAccessoryPairingController;
}

- (unint64_t)siriSyncNotificationTime
{
  return self->_siriSyncNotificationTime;
}

- (void)setSiriSyncNotificationTime:(unint64_t)a3
{
  self->_siriSyncNotificationTime = a3;
}

- (NSMutableArray)siriSyncNotificationReasons
{
  return self->_siriSyncNotificationReasons;
}

- (void)setSiriSyncNotificationReasons:(id)a3
{
  objc_storeStrong((id *)&self->_siriSyncNotificationReasons, a3);
}

- (HMDMatterSoftwareUpdateProviderDelegate)matterSoftwareUpdateProviderDelegate
{
  return self->_matterSoftwareUpdateProviderDelegate;
}

- (HMFTimer)debounceRegenerateAssistantSyncDataTimer
{
  return self->_debounceRegenerateAssistantSyncDataTimer;
}

- (HMDBiomeEventManager)biomeEventManager
{
  return (HMDBiomeEventManager *)objc_getProperty(self, a2, 1096, 1);
}

- (void)setBiomeEventManager:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1096);
}

- (void)setAccessoryBrowserInternal:(id)a3
{
  objc_storeStrong((id *)&self->_accessoryBrowserInternal, a3);
}

- (HMELastEventStore)lastEventStore
{
  return self->_lastEventStore;
}

- (void)setLastEventStore:(id)a3
{
  objc_storeStrong((id *)&self->_lastEventStore, a3);
}

- (HMDLastEventStoreController)lastEventStoreController
{
  return self->_lastEventStoreController;
}

- (void)setLastEventStoreController:(id)a3
{
  objc_storeStrong((id *)&self->_lastEventStoreController, a3);
}

- (HMDMobileAssetManager)mobileAssetManager
{
  return self->_mobileAssetManager;
}

- (void)setMobileAssetManager:(id)a3
{
  objc_storeStrong((id *)&self->_mobileAssetManager, a3);
}

- (HMDMediaGroupParticipantLocalDataStorage)mediaGroupParticipantDataLocalStorage
{
  return (HMDMediaGroupParticipantLocalDataStorage *)objc_getProperty(self, a2, 1136, 1);
}

- (void)setMediaGroupParticipantDataLocalStorage:(id)a3
{
  objc_setProperty_atomic(self, a2, a3, 1136);
}

- (NSMapTable)homeUUIDsByWalletKeyAssertionXPCConnection
{
  return (NSMapTable *)objc_getProperty(self, a2, 1144, 1);
}

- (HMDCHIPXPCListener)chipXPCListener
{
  return self->_chipXPCListener;
}

- (NSMutableDictionary)currentHomeConfigurations
{
  return self->_currentHomeConfigurations;
}

- (void)setCurrentHomeConfigurations:(id)a3
{
  objc_storeStrong((id *)&self->_currentHomeConfigurations, a3);
}

- (HMDDeviceSetupConfiguringController)configuringStateController
{
  return self->_configuringStateController;
}

- (void)setConfiguringStateController:(id)a3
{
  objc_storeStrong((id *)&self->_configuringStateController, a3);
}

- (BOOL)assistantIdentifierChanged
{
  return self->_assistantIdentifierChanged;
}

- (void)setAssistantIdentifierChanged:(BOOL)a3
{
  self->_assistantIdentifierChanged = a3;
}

- (HMFNetMonitor)reachabilityMonitor
{
  return self->_reachabilityMonitor;
}

- (void)setReachabilityMonitor:(id)a3
{
  objc_storeStrong((id *)&self->_reachabilityMonitor, a3);
}

- (HMFNetMonitor)cloudReachabilityMonitor
{
  return self->_cloudReachabilityMonitor;
}

- (void)setCloudReachabilityMonitor:(id)a3
{
  objc_storeStrong((id *)&self->_cloudReachabilityMonitor, a3);
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_cloudReachabilityMonitor, 0);
  objc_storeStrong((id *)&self->_reachabilityMonitor, 0);
  objc_storeStrong((id *)&self->_configuringStateController, 0);
  objc_storeStrong((id *)&self->_currentHomeConfigurations, 0);
  objc_storeStrong((id *)&self->_chipXPCListener, 0);
  objc_storeStrong((id *)&self->_homeUUIDsByWalletKeyAssertionXPCConnection, 0);
  objc_storeStrong((id *)&self->_mediaGroupParticipantDataLocalStorage, 0);
  objc_storeStrong((id *)&self->_mobileAssetManager, 0);
  objc_storeStrong((id *)&self->_lastEventStoreController, 0);
  objc_storeStrong((id *)&self->_lastEventStore, 0);
  objc_storeStrong((id *)&self->_accessoryBrowserInternal, 0);
  objc_storeStrong((id *)&self->_biomeEventManager, 0);
  objc_storeStrong((id *)&self->_debounceRegenerateAssistantSyncDataTimer, 0);
  objc_storeStrong((id *)&self->_matterSoftwareUpdateProviderDelegate, 0);
  objc_storeStrong((id *)&self->_accessoryFirmwareUpdateManager, 0);
  objc_storeStrong((id *)&self->_siriSyncNotificationReasons, 0);
  objc_storeStrong((id *)&self->_legacyAccessoryPairingController, 0);
  objc_storeStrong((id *)&self->_cloudAccount, 0);
  objc_storeStrong((id *)&self->_syncManager, 0);
  objc_storeStrong((id *)&self->_siriEndpointOnboardingManager, 0);
  objc_storeStrong((id *)&self->_hh2AutoMigrationEligibilityChecker, 0);
  objc_storeStrong((id *)&self->_hh2AutoMigrationMonitor, 0);
  objc_storeStrong((id *)&self->_hh2FrameworkSwitch, 0);
  objc_storeStrong((id *)&self->_accessorySetupManager, 0);
  objc_storeStrong((id *)&self->_keyTransferAgent, 0);
  objc_storeStrong((id *)&self->_currentAccessorySetupMetricDispatcher, 0);
  objc_storeStrong((id *)&self->_userDefaults, 0);
  objc_storeStrong((id *)&self->_residentMesh, 0);
  objc_storeStrong((id *)&self->_appData, 0);
  objc_storeStrong((id *)&self->_sharedHomesPushDelayTimer, 0);
  objc_storeStrong((id *)&self->_watchPushDelayTimer, 0);
  objc_storeStrong((id *)&self->_pendingFragmentationStream, 0);
  objc_storeStrong((id *)&self->_remoteAccessHealthMonitorTimer, 0);
  objc_storeStrong((id *)&self->_clientConnectionQueue, 0);
  objc_storeStrong((id *)&self->_clientConnection, 0);
  objc_storeStrong((id *)&self->_incomingInvitations, 0);
  objc_storeStrong((id *)&self->_accountRegistry, 0);
  objc_storeStrong((id *)&self->_fmfHandler, 0);
  objc_storeStrong((id *)&self->_locationHandler, 0);
  objc_storeStrong((id *)&self->_cloudDataSyncStateFilter, 0);
  objc_storeStrong((id *)&self->_cloudOperationRetryTimer, 0);
  objc_storeStrong((id *)&self->_identityRegistry, 0);
  objc_storeStrong((id *)&self->_dialogCancelationContexts, 0);
  objc_storeStrong((id *)&self->_msgFilterChain, 0);
  objc_storeStrong((id *)&self->_pendingResidentSetupSessions, 0);
  objc_storeStrong((id *)&self->_pendingRemoteSessions, 0);
  objc_storeStrong((id *)&self->_pendingDataSyncAcks, 0);
  objc_storeStrong((id *)&self->_dataTag, 0);
  objc_storeStrong((id *)&self->_backingStore, 0);
  objc_storeStrong((id *)&self->_watchManager, 0);
  objc_storeStrong((id *)&self->_setupActivity, 0);
  objc_storeStrong((id *)&self->_idsFirewallManager, 0);
  objc_storeStrong((id *)&self->_cloudDataSyncManager, 0);
  objc_storeStrong((id *)&self->_idsInvitationManager, 0);
  objc_storeStrong((id *)&self->_notificationCenter, 0);
  objc_storeStrong((id *)&self->_powerManager, 0);
  objc_storeStrong((id *)&self->_pendingResponsesForAccessoryFinder, 0);
  objc_storeStrong((id *)&self->_accessoryFinderTimer, 0);
  objc_storeStrong((id *)&self->_nameValidator, 0);
  objc_storeStrong((id *)&self->_pairedSync, 0);
  objc_storeStrong((id *)&self->_watchSyncRetryContextByRetryTimer, 0);
  objc_storeStrong((id *)&self->_watchSyncRetryContextBySyncIdentifier, 0);
  objc_storeStrong((id *)&self->_watchSyncStateMap, 0);
  objc_storeStrong((id *)&self->_associatedWatchPeers, 0);
  objc_storeStrong((id *)&self->_fullSyncedWatchPeers, 0);
  objc_storeStrong((id *)&self->_associatedRemotePeers, 0);
  objc_storeStrong((id *)&self->_unassociatedRemotePeers, 0);
  objc_storeStrong((id *)&self->_messageDispatcher, 0);
  objc_storeStrong((id *)&self->_workQueue, 0);
  objc_storeStrong((id *)&self->_lastCurrentHomeUUID, 0);
  objc_storeStrong((id *)&self->_primaryHomeUUID, 0);
  objc_storeStrong((id *)&self->_uuidsOfRemovedHomes, 0);
  objc_storeStrong((id *)&self->_cloudZones, 0);
  objc_storeStrong((id *)&self->_uuid, 0);
  objc_storeStrong((id *)&self->_homeManagerObjectChangeHandler, 0);
  objc_storeStrong((id *)&self->_defaultDatabase, 0);
  objc_storeStrong((id *)&self->_hapKeyStore, 0);
  objc_storeStrong((id *)&self->_widgetTimelineRefresher, 0);
  objc_storeStrong((id *)&self->_lastRemovedCurrentAccessoryUUID, 0);
  objc_storeStrong((id *)&self->_multiUserSettingsMetricEventDispatcher, 0);
  objc_storeStrong((id *)&self->_siriEndPointSettingsSyncManager, 0);
  objc_storeStrong((id *)&self->_eventRouterAssertionController, 0);
  objc_storeStrong((id *)&self->_eventRouterXPCServer, 0);
  objc_storeStrong((id *)&self->_loggingMemoryEventForwarder, 0);
  objc_storeStrong((id *)&self->_memoryEventRouter, 0);
  objc_storeStrong((id *)&self->_registrationForwardingEventRouter, 0);
  objc_storeStrong((id *)&self->_bonjourBrowserHelperLastCompletionDate, 0);
  objc_storeStrong(&self->_browseAssertion, 0);
  objc_storeStrong((id *)&self->_activeConnections, 0);
  objc_storeStrong((id *)&self->_microLocationManager, 0);
  objc_storeStrong((id *)&self->_microLocationLogEventObserver, 0);
  objc_storeStrong((id *)&self->_biomeLogEventObserver, 0);
  objc_storeStrong((id *)&self->_duetSubscriber, 0);
  objc_storeStrong((id *)&self->_bonjourBrowser, 0);
  objc_storeStrong((id *)&self->_memoryTracker, 0);
  objc_storeStrong((id *)&self->_accessorySetupCoordinator, 0);
  objc_storeStrong((id *)&self->_cloudDataSource, 0);
  objc_storeStrong((id *)&self->_appleMediaAccessoryDiagnosticInfoController, 0);
  objc_storeStrong((id *)&self->_multiUserStatusController, 0);
  objc_storeStrong((id *)&self->_userCloudShareManager, 0);
  objc_storeStrong((id *)&self->_unprocessedOperationModelIdentifiers, 0);
  objc_storeStrong((id *)&self->_remoteAccountManager, 0);
  objc_storeStrong((id *)&self->_darwinNotificationProvider, 0);
  objc_storeStrong((id *)&self->_demoAccessories, 0);
  objc_storeStrong((id *)&self->_mergeIDsOfUsersOfRemovedSharedHomes, 0);
  objc_storeStrong((id *)&self->_accessorySetupMetricDispatchers, 0);
  objc_storeStrong((id *)&self->_deviceSetupSessions, 0);
  objc_storeStrong((id *)&self->_userPushCacheMap, 0);
  objc_storeStrong((id *)&self->_companionManager, 0);
  objc_storeStrong((id *)&self->_pendingHomesBeingRemoved, 0);
  objc_storeStrong((id *)&self->_memoryMonitorLogEventTimer, 0);
  objc_storeStrong((id *)&self->_periodicMobileCatalogUpdateTimer, 0);
  objc_storeStrong((id *)&self->_debounceHomesUpdateTimer, 0);
  objc_storeStrong((id *)&self->_appleAccountManager, 0);
  objc_storeStrong((id *)&self->_logEventSubmitter, 0);
  objc_storeStrong((id *)&self->_metricsManager, 0);
  objc_storeStrong((id *)&self->_cameraLoadBalancer, 0);
  objc_storeStrong((id *)&self->_lookup, 0);
  objc_storeStrong((id *)&self->_capabilitiesController, 0);
  objc_storeStrong((id *)&self->_idsServerBag, 0);
  objc_storeStrong((id *)&self->_mtsXPCServer, 0);
  objc_storeStrong((id *)&self->_chipDataSource, 0);
  objc_storeStrong((id *)&self->_compositeSettingsControllerManager, 0);
  objc_storeStrong((id *)&self->_gatherer, 0);
  objc_storeStrong((id *)&self->_widgetConfigurationReader, 0);
  objc_storeStrong((id *)&self->_softwareUpdateManager, 0);
  objc_storeStrong((id *)&self->_overrideCurrentHomeUUIDToNil, 0);
  objc_storeStrong((id *)&self->_currentHomeUUIDOverride, 0);
  objc_storeStrong((id *)&self->_currentHomeUUID, 0);
  objc_storeStrong((id *)&self->_logger, 0);
  objc_storeStrong((id *)&self->_homes, 0);
}

uint64_t __57__HMDHomeManager_accessorySetupMetricDispatchersForHome___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "hasHome:", *(_QWORD *)(a1 + 32));
}

uint64_t __71__HMDHomeManager_removeAccessorySetupMetricDispatcherForAccessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "trackingInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "accessoryUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __65__HMDHomeManager_accessorySetupMetricDispatcherForAccessoryUUID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "trackingInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "accessoryUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hmf_isEqualToUUID:", *(_QWORD *)(a1 + 32));

  return v5;
}

uint64_t __44__HMDHomeManager_handleSiriSyncDataRequest___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleAssistantSyncDataRequest:", *(_QWORD *)(a1 + 40));
}

uint64_t __43__HMDHomeManager_assistantSyncDataChanged___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_assistantSyncDataChanged:", *(_QWORD *)(a1 + 40));
}

uint64_t __59__HMDHomeManager__handleCurrentAccessoryAddedNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
}

void __61__HMDHomeManager__handleCurrentAccessoryRemovedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  os_unfair_lock_s *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hmf_UUIDForKey:", CFSTR("HMDLastRemovedCurrentAccessoryUUIDKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 40) + 24);
    os_unfair_lock_lock_with_options();
    objc_msgSend(*(id *)(a1 + 40), "lastRemovedCurrentAccessoryUUID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v3, "hmf_isEqualToUUID:", v5);

    if ((v6 & 1) != 0)
    {
      os_unfair_lock_unlock(v4);
      objc_msgSend(*(id *)(a1 + 40), "capabilitiesController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "didRemoveCurrentAccessory:", v3);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "setLastRemovedCurrentAccessoryUUID:", v3);
      os_unfair_lock_unlock(v4);
      objc_msgSend(*(id *)(a1 + 40), "capabilitiesController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "didRemoveCurrentAccessory:", v3);

      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138543618;
        v23 = v17;
        v24 = 2112;
        v25 = v3;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Last removed current accessory changed to %@", (uint8_t *)&v22, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(*(id *)(a1 + 40), "userDefaults");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "UUIDString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setObject:forKey:", v19, CFSTR("HMDLastRemovedCurrentAccessoryUUIDKey"));

      objc_msgSend(*(id *)(a1 + 40), "resetTTSUHH2SettingsMigrationKey");
      v20 = *(void **)(a1 + 40);
      objc_msgSend(v20, "uuid");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "_updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("CurrentAccessoryRemoved"), v21, 1);

    }
    objc_msgSend(*(id *)(a1 + 40), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(void **)(a1 + 32);
      v22 = 138543618;
      v23 = v11;
      v24 = 2112;
      v25 = v12;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Last removed current accessory uuid missing from notification : %@", (uint8_t *)&v22, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }

}

uint64_t __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v31;
  id v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v11 = v7;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
  if (v12)
  {
    v13 = v12;
    v31 = v9;
    v32 = v8;
    v14 = *(_QWORD *)v35;
    v33 = a1;
    while (2)
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v35 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        objc_msgSend(v16, "uuid");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "isEqual:", *(_QWORD *)(a1 + 32));

        if (v18)
        {
          if (objc_msgSend(v16, "objectChangeType") == 1 && !objc_msgSend(*(id *)(a1 + 40), "count"))
          {
            v29 = 0;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
            goto LABEL_16;
          }
          v19 = (void *)MEMORY[0x1D17BA0A0]();
          v20 = WeakRetained;
          HMFGetOSLogHandle();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v22 = v13;
            v23 = v14;
            v24 = v11;
            v25 = WeakRetained;
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v39 = v26;
            v40 = 2112;
            v41 = v16;
            _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEBUG, "%{public}@Removing object change from home manager transaction store %@", buf, 0x16u);

            WeakRetained = v25;
            v11 = v24;
            v14 = v23;
            v13 = v22;
            a1 = v33;
          }

          objc_autoreleasePoolPop(v19);
          v27 = *(void **)(a1 + 40);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v16, "bsoLogRowID"));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "addObject:", v28);

        }
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
      if (v13)
        continue;
      break;
    }
    v29 = 1;
LABEL_16:
    v9 = v31;
    v8 = v32;
  }
  else
  {
    v29 = 1;
  }

  return v29;
}

void __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke_1244(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  HMDBackingStoreLogUpdateOperation *v7;
  void *v8;
  HMDBackingStoreLogUpdateOperation *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *);
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v5 = WeakRetained;
  if (v3
    || !WeakRetained
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)
    || !objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      (*(void (**)(uint64_t, _QWORD, id))(v6 + 16))(v6, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), v3);
  }
  else
  {
    v7 = [HMDBackingStoreLogUpdateOperation alloc];
    objc_msgSend(*(id *)(a1 + 32), "allObjects");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDBackingStoreLogUpdateOperation initWithRowIDs:successfullyPushedTo:](v7, "initWithRowIDs:successfullyPushedTo:", v8, 3);

    v18 = MEMORY[0x1E0C809B0];
    v19 = 3221225472;
    v20 = __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke_2;
    v21 = &unk_1E89BE0E0;
    objc_copyWeak(&v25, (id *)(a1 + 64));
    v22 = *(id *)(a1 + 40);
    v10 = *(id *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v23 = v10;
    v24 = v11;
    v12 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v9, "setResultBlock:", &v18));
    v13 = v5;
    HMFGetOSLogHandle();
    v14 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v27 = v15;
      v28 = 2112;
      v29 = v16;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of objects for %@ in home manager datastore", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(v13, "backingStore", v18, v19, v20, v21);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "submit:", v9);

    objc_destroyWeak(&v25);
  }

}

void __64__HMDHomeManager__cleanChangesIfNoAddChangeObjectID_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = *(_QWORD *)(a1 + 32);
    v11 = 138543618;
    v12 = v8;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Cleaned objects for %@ in home manager datastore", (uint8_t *)&v11, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(uint64_t, _QWORD, id))(v10 + 16))(v10, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v3);

}

id __37__HMDHomeManager_archiveServerToken___block_invoke(uint64_t a1)
{
  return +[HMDPersistentStore archiveCloudServerTokenData:](HMDPersistentStore, "archiveCloudServerTokenData:", *(_QWORD *)(a1 + 32));
}

uint64_t __44__HMDHomeManager___handleWatchDisconnected___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that connected watch was removed: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "_checkAndAddWatchDevicesWithResend:", 0);
}

uint64_t __41__HMDHomeManager___handleWatchConnected___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that connected watch was added: %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "_checkAndAddWatchDevicesWithResend:", 0);
}

void __49__HMDHomeManager_setupSession_didCloseWithError___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDAccessorySetupMetricDispatcher *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  HMDAccessorySetupMetricDispatcher *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  int v43;
  void *v44;
  id v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  os_unfair_lock_s *v50;
  void *v51;
  void *v52;
  void *v53;
  BOOL v54;
  void *v55;
  id v56;
  NSObject *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *context;
  void *contexta;
  int contextb;
  int v68;
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  void *v72;
  __int16 v73;
  void *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v70 = v5;
    v71 = 2112;
    v72 = v6;
    v73 = 2112;
    v74 = v7;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Setup Session : %@, closed with error: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 40), "setupTrackingInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "accessoryUUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9
    && (objc_msgSend(*(id *)(a1 + 32), "accessorySetupMetricDispatcherForAccessoryUUID:", v9),
        v10 = (HMDAccessorySetupMetricDispatcher *)objc_claimAutoreleasedReturnValue(),
        -[HMDAccessorySetupMetricDispatcher updateTrackingInfo:](v10, "updateTrackingInfo:", v8),
        v10))
  {
    v68 = 0;
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v70 = v14;
      v71 = 2112;
      v72 = v15;
      v73 = 2112;
      v74 = v9;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Setup Session : %@, did not find existing setup metric dispatcher for accessory uuid: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v11);
    v16 = [HMDAccessorySetupMetricDispatcher alloc];
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = -[HMDAccessorySetupMetricDispatcher initWithQueue:trackingInfo:setupSessionIdentifier:homeManager:](v16, "initWithQueue:trackingInfo:setupSessionIdentifier:homeManager:", v17, v8, v18, *(_QWORD *)(a1 + 32));

    -[HMDAccessorySetupMetricDispatcher setDelegate:](v10, "setDelegate:", *(_QWORD *)(a1 + 32));
    v68 = 1;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "role") == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "currentAccessorySetupMetricDispatcher");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      objc_msgSend(*(id *)(a1 + 32), "currentAccessorySetupMetricDispatcher");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "markSetupBeginStage:error:", 2, *(_QWORD *)(a1 + 48));

    }
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "accessoryWithUUID:", v9);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(context) = v21 != 0;
      if (v21)
      {
        v22 = (void *)MEMORY[0x1D17BA0A0]();
        v23 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "identifier");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v70 = v25;
          v71 = 2112;
          v72 = v26;
          v73 = 2112;
          v74 = v21;
          _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Submitting Repair Setup Session metric : %@ as accessory is already in the home %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v22);
        -[HMDAccessorySetupMetricDispatcher markRepairSessionComplete](v10, "markRepairSessionComplete");
      }

    }
    else
    {
      v27 = (void *)MEMORY[0x1D17BA0A0]();
      v28 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "identifier");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v70 = v30;
        v71 = 2112;
        v72 = v31;
        _os_log_impl(&dword_1CD062000, v29, OS_LOG_TYPE_INFO, "%{public}@Submitting Setup Session metric : %@ as accessory was not provided in setup payload", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v27);
      LODWORD(context) = 1;
    }
    objc_msgSend(v8, "accessoryIDSIdentifier", context);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v32)
    {
      v33 = objc_alloc(MEMORY[0x1E0CB3A28]);
      objc_msgSend(v8, "accessoryIDSIdentifier");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = (void *)objc_msgSend(v33, "initWithUUIDString:", v34);

      if (v35)
      {
        objc_msgSend(*(id *)(a1 + 32), "accessoryWithIDSIdentifier:", v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        if (v36)
        {
          contexta = (void *)MEMORY[0x1D17BA0A0]();
          v37 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v38 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(a1 + 40), "identifier", contexta);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v70 = v39;
            v71 = 2112;
            v72 = v40;
            v73 = 2112;
            v74 = v36;
            _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_INFO, "%{public}@Submitting Repair Setup Session metric : %@ as accessory with matching IDS identifier is already in the home %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(contexta);
          -[HMDAccessorySetupMetricDispatcher markRepairSessionComplete](v10, "markRepairSessionComplete");
          LODWORD(contexta) = 1;
        }

      }
    }
    objc_msgSend(v8, "accessoryCategory", contexta);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "categoryType");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend(v42, "isEqualToString:", *MEMORY[0x1E0CB7A18]);

    if (v43)
    {
      v44 = (void *)MEMORY[0x1D17BA0A0]();
      v45 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "identifier");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v70 = v47;
        v71 = 2112;
        v72 = v48;
        v73 = 2112;
        v74 = v9;
        _os_log_impl(&dword_1CD062000, v46, OS_LOG_TYPE_INFO, "%{public}@Submitting Setup Session metric : %@ as accessory is an ATV %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v44);
    }
    else if (!contextb)
    {
      if (v68)
        objc_msgSend(*(id *)(a1 + 32), "addAccessorySetupMetricDispatcher:", v10);
      goto LABEL_37;
    }
    -[HMDAccessorySetupMetricDispatcher submit](v10, "submit");
    objc_msgSend(*(id *)(a1 + 32), "removeAccessorySetupMetricDispatcherForAccessoryUUID:", v9);
LABEL_37:
    objc_msgSend(*(id *)(a1 + 40), "setupTrackingInfo");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setSetupEndTimestamp:", (double)(unint64_t)objc_msgSend(v49, "endTime"));

    goto LABEL_38;
  }
  -[HMDAccessorySetupMetricDispatcher submit](v10, "submit");
  objc_msgSend(*(id *)(a1 + 32), "removeAccessorySetupMetricDispatcherForAccessoryUUID:", v9);
LABEL_38:
  v50 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 32) + 24);
  os_unfair_lock_lock_with_options();
  objc_msgSend(*(id *)(a1 + 32), "deviceSetupSessions");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v51, "removeObject:", *(_QWORD *)(a1 + 40));

  os_unfair_lock_unlock(v50);
  if (!*(_QWORD *)(a1 + 48) && objc_msgSend(*(id *)(a1 + 40), "role") == 1)
  {
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "getLocalPairingIdentity:", 0);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = v53 == 0;

    if (!v54)
    {
      v55 = (void *)MEMORY[0x1D17BA0A0]();
      v56 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v70 = v58;
        _os_log_impl(&dword_1CD062000, v57, OS_LOG_TYPE_INFO, "%{public}@Resetting legacy key transfer and starting cloud fetch", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v55);
      objc_msgSend(*(id *)(a1 + 32), "keyTransferAgent");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "resetConfig");

      objc_msgSend(*(id *)(a1 + 32), "_updateCloudDataSyncWithAccountState:", 1);
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 48), CFSTR("TTSU.error"));
      v61 = *(void **)(a1 + 32);
      v62 = (void *)objc_msgSend(v60, "copy");
      logAndPostNotification(CFSTR("TTSU.Finished.NotificationKey"), v61, v62);

      objc_msgSend(*(id *)(a1 + 32), "userDefaults");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "setBool:forKey:", 1, CFSTR("TTSU.Finished"));

    }
  }
  if (objc_msgSend(*(id *)(a1 + 40), "role") == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "currentAccessorySetupMetricDispatcher");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "markSetupEndStage:error:", 2, *(_QWORD *)(a1 + 48));

  }
}

void __43__HMDHomeManager___handleCompanionUpdated___block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    v25 = v4;
    v26 = 2112;
    v27 = v5;
    _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_DEBUG, "%{public}@Received notification that the companion changed: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v6 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(*(id *)(a1 + 40), "_checkAndInformCompanionDevice"));
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v25 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Electing companion based off of changed companion device", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(*(id *)(a1 + 40), "homes", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        v15 = *(void **)(a1 + 40);
        objc_msgSend(v14, "uuid");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "electRemoteAccessPeerForHome:", v16);

        if (*(_QWORD *)(a1 + 32))
        {
          objc_msgSend(v14, "primaryResident");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "device");
          v18 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v18 = 0;
        }
        objc_msgSend(v14, "resubscribeForNotificationsOnResident:", v18);

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v11);
  }

}

uint64_t __47__HMDHomeManager___handleUpdatedCurrentDevice___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedCurrentDevice:", *(_QWORD *)(a1 + 40));
}

uint64_t __52__HMDHomeManager___handleDeviceCapabilitiesUpdated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleUpdatedCurrentDevice:", *(_QWORD *)(a1 + 40));
}

uint64_t __51__HMDHomeManager_verifyCurrentDeviceResidentStatus__block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "isResidentCapable");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "_updateResidentEnabledOnThisDevice:forceNotify:message:", objc_msgSend(*(id *)(a1 + 32), "isResidentEnabled"), 1, 0);
  return result;
}

void __50__HMDHomeManager___accountRegistryRemovedAccount___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("HMDAccountNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543618;
    v16 = v9;
    v17 = 2112;
    v18 = v5;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that account was removed: %@", (uint8_t *)&v15, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (objc_msgSend(v5, "isCurrentAccount"))
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543362;
      v16 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@The removed account is the current account", (uint8_t *)&v15, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(*(id *)(a1 + 40), "stopLocalTransport");
    objc_msgSend(*(id *)(a1 + 40), "cloudDataSyncStateFilter");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "updateCurrentAccount:", v5);

    objc_msgSend(*(id *)(a1 + 40), "saveWithReason:information:saveOptions:", CFSTR("currentAccountUpdated"), 0, 0);
    +[HMDHH2FrameworkSwitch switchBackToHH1AndDoNotLaunchDueToPrimaryAccountRemoval](HMDHH2FrameworkSwitch, "switchBackToHH1AndDoNotLaunchDueToPrimaryAccountRemoval");
  }

}

void __48__HMDHomeManager___accountRegistryAddedAccount___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id obj;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint8_t v40[128];
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  id v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("HMDAccountNotificationKey"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v42 = v9;
    v43 = 2112;
    v44 = v5;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that account was added: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v6);
  if (objc_msgSend(v5, "isCurrentAccount"))
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v42 = v13;
      v43 = 2112;
      v44 = v5;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Received notification that current account changed to: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(*(id *)(a1 + 40), "cloudDataSyncStateFilter");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v5;
    objc_msgSend(v14, "updateCurrentAccount:", v5);

    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    objc_msgSend(*(id *)(a1 + 40), "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    if (v15)
    {
      v16 = v15;
      v30 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v36 != v30)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
          v31 = 0u;
          v32 = 0u;
          v33 = 0u;
          v34 = 0u;
          objc_msgSend(v18, "triggers");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
          if (v20)
          {
            v21 = v20;
            v22 = *(_QWORD *)v32;
            do
            {
              for (j = 0; j != v21; ++j)
              {
                if (*(_QWORD *)v32 != v22)
                  objc_enumerationMutation(v19);
                v24 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * j);
                objc_msgSend(v24, "owningDevice");
                v25 = (void *)objc_claimAutoreleasedReturnValue();

                if (!v25)
                {
                  objc_msgSend(*(id *)(a1 + 40), "appleAccountManager");
                  v26 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v26, "device");
                  v27 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v24, "setOwningDevice:", v27);

                }
              }
              v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
            }
            while (v21);
          }

        }
        v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
      }
      while (v16);
    }

    objc_msgSend(*(id *)(a1 + 40), "saveWithReason:information:saveOptions:", CFSTR("currentAccountUpdated"), 0, 0);
    v5 = v28;
  }

}

void __41__HMDHomeManager___accountRemovedDevice___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t v24[128];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("HMDDeviceNotificationKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  if (objc_msgSend(v4, "isCurrentAccount"))
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v12;
      v27 = 2112;
      v28 = v8;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Received notification that device was removed from our account: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    objc_msgSend(*(id *)(a1 + 40), "homes", 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v21 != v16)
            objc_enumerationMutation(v13);
          v18 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
          if (objc_msgSend(v18, "isOwnerUser"))
            objc_msgSend(v18, "removeResidentCapableDevice:", v8);
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v15);
    }

    objc_msgSend(*(id *)(a1 + 40), "_checkForRemotePeers");
    objc_msgSend(*(id *)(a1 + 40), "cloudDataSyncStateFilter");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "updateCurrentAccount:", v4);

    objc_msgSend(*(id *)(a1 + 40), "_notifyXPCClientsOfUpdatedDevices");
    objc_msgSend(*(id *)(a1 + 40), "_updateCurrentUserEligibleForOwnerToAutoMigration");
  }

}

void __52__HMDHomeManager___handleDeviceUpdatedNotification___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v9;
      v16 = 2112;
      v17 = v4;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Received notification that device updated: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 40), "_notifyXPCClientsOfUpdatedDevices");
    objc_msgSend(*(id *)(a1 + 40), "_updateCurrentUserEligibleForOwnerToAutoMigration");
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "object");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "object");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      v18 = 2112;
      v19 = (id)objc_opt_class();
      v13 = v19;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Notification object was not an HMDDevice: %@ (%@)", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
  }

}

void __39__HMDHomeManager___accountAddedDevice___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("HMDDeviceNotificationKey"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  if (objc_msgSend(v4, "isCurrentAccount"))
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = v8;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Received notification that device was added to our account: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(*(id *)(a1 + 40), "_checkForRemotePeers");
    objc_msgSend(*(id *)(a1 + 40), "cloudDataSyncStateFilter");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "updateCurrentAccount:", v4);

    objc_msgSend(*(id *)(a1 + 40), "_notifyXPCClientsOfUpdatedDevices");
    objc_msgSend(*(id *)(a1 + 40), "_updateCurrentUserEligibleForOwnerToAutoMigration");
  }

}

void __67__HMDHomeManager__updateCurrentUserEligibleForOwnerToAutoMigration__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "homes", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        if ((objc_msgSend(v12, "isOwnerUser") & 1) == 0)
        {
          objc_msgSend(v12, "currentUser");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "updateSupportsHH2MigrationByOwnerManual:supportsHH2MigrationByOwnerAuto:", objc_msgSend(v5, "isEligible"), objc_msgSend(v6, "isEligible"));

        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v9);
  }

}

uint64_t __66__HMDHomeManager_updateCurrentUserEligibleForOwnerToAutoMigration__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateCurrentUserEligibleForOwnerToAutoMigration");
}

uint64_t __53__HMDHomeManager_accessoryBrowserDidFindNewAccessory__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processAnyPendingRequestsForRemoteAccess:", 0);
}

void __49__HMDHomeManager__handleDeviceSetupSessionClose___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  int v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  objc_msgSend(v6, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v12;
      v16 = 2112;
      v17 = v13;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Found close session: %@", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v9);
    objc_msgSend(v6, "close:", *(_QWORD *)(a1 + 48));
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }

}

void __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  NSObject *v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v5)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v12;
      v23 = 2112;
      v24 = v5;
      v13 = "%{public}@Failed to respond to ping with error: %@";
      v14 = v11;
      v15 = OS_LOG_TYPE_DEFAULT;
      v16 = 22;
LABEL_6:
      _os_log_impl(&dword_1CD062000, v14, v15, v13, buf, v16);

    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v22 = v12;
    v13 = "%{public}@Successfully responded to ping";
    v14 = v11;
    v15 = OS_LOG_TYPE_INFO;
    v16 = 12;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v8);
  if (v9 && *(_QWORD *)(a1 + 32))
  {
    objc_msgSend(v9, "workQueue");
    v17 = objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke_1215;
    v18[3] = &unk_1E89C1D68;
    v20 = *(id *)(a1 + 32);
    v19 = v5;
    dispatch_async(v17, v18);

  }
}

uint64_t __77__HMDHomeManager_pingDevice_secure_restrictToLocalNetwork_completionHandler___block_invoke_1215(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __30__HMDHomeManager__handlePing___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v4 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v4)[2](v4, v5, 0);

  }
}

void __40__HMDHomeManager__handleResolveAccount___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD, _QWORD);
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = WeakRetained;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v5)
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "shortDescription");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v12;
    v18 = 2112;
    v19 = v13;
    _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Resolved account: %@", (uint8_t *)&v16, 0x16u);

  }
  else
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v12;
    v18 = 2112;
    v19 = v6;
    _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Failed to resolved account with error: %@", (uint8_t *)&v16, 0x16u);
  }

LABEL_7:
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v15 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v15)[2](v15, v6, 0);

  }
}

void __70__HMDHomeManager_handleHomeCurrentDeviceResidentEligibleNotification___block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(a1 + 32);
  v3[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_addCurrentResidentDeviceToHomes:", v2);

}

void __73__HMDHomeManager__updateResidentEnabledOnThisDevice_forceNotify_message___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, _QWORD, _QWORD))v3 + 2))(v3, 0, 0);

  }
}

uint64_t __40__HMDHomeManager_setAppDataWithMessage___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setAppDataWithMessage:", *(_QWORD *)(a1 + 40));
}

uint64_t __46__HMDHomeManager_teardownRemoteAccessForHome___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_teardownRemoteAccessForHome:", *(_QWORD *)(a1 + 40));
}

void __92__HMDHomeManager_sendRequestForInvitation_homeUUID_payload_invitationState_responseHandler___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = a2;
  objc_msgSend(v3, "name");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v5, v4);

}

void __94__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  const char *v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  void *v30;
  int v31;
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (!WeakRetained)
    goto LABEL_18;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = a1[4];
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (!v6)
  {
    if (v11)
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "describeWithFormat");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = 138543618;
      v32 = v23;
      v33 = 2112;
      v34 = v24;
      v25 = "%{public}@Modified invitation state for invite %@";
LABEL_13:
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, v25, (uint8_t *)&v31, 0x16u);

    }
LABEL_14:

    objc_autoreleasePoolPop(v8);
    goto LABEL_18;
  }
  if (v11)
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "describeWithFormat");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 138543874;
    v32 = v12;
    v33 = 2112;
    v34 = v13;
    v35 = 2112;
    v36 = v6;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Failed to modify invitation state for invite %@ due to error %@", (uint8_t *)&v31, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  v14 = objc_msgSend(v6, "code");
  v15 = objc_msgSend(v6, "code");
  v16 = objc_msgSend(v6, "code");
  v17 = objc_msgSend(v6, "code");
  if (v15 != 1006 && v17 != 1008)
  {
    if (v16 == 1007)
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = a1[4];
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1[5], "describeWithFormat");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = 138543618;
        v32 = v21;
        v33 = 2112;
        v34 = v22;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Updating invitation (%@) to accepted and pending to match sender state", (uint8_t *)&v31, 0x16u);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(WeakRetained, "_postIncomingInvitationStateChangedNotification:newInvitationState:", a1[5], 5);
      objc_msgSend(WeakRetained, "saveWithReason:information:postSyncNotification:", v5, 0, 0);
      goto LABEL_18;
    }
    if (v14 != 2)
      goto LABEL_18;
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = a1[4];
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "describeWithFormat");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = 138543618;
      v32 = v23;
      v33 = 2112;
      v34 = v24;
      v25 = "%{public}@Inviter did not find invitation (%@), ignoring response";
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  v26 = (void *)MEMORY[0x1D17BA0A0](v17);
  v27 = a1[4];
  HMFGetOSLogHandle();
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1[5], "describeWithFormat");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 138543618;
    v32 = v29;
    v33 = 2112;
    v34 = v30;
    _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Updating invitation (%@) to expired since sender could not find it or it was expired", (uint8_t *)&v31, 0x16u);

  }
  objc_autoreleasePoolPop(v26);
  objc_msgSend(a1[5], "expire");
LABEL_18:

}

void __94__HMDHomeManager___sendUpdateRequestToAdminForInvitation_homeUUID_invitationState_authStatus___block_invoke_1210(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (!a2 && WeakRetained)
  {
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "sendRequestForInvitation:homeUUID:payload:invitationState:responseHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56));
    WeakRetained = v5;
  }

}

uint64_t __111__HMDHomeManager_processRequestToUpdateHomeInvitation_invitationState_homeUUID_authStatus_messageName_message___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processRequestToUpdateHomeInvitation:invitationState:homeUUID:authStatus:messageName:message:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

void __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  v3 = *(unsigned __int8 *)(a1 + 40);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke_2;
  v4[3] = &unk_1E89BDF50;
  v5 = *(id *)(a1 + 32);
  objc_msgSend(a2, "forceFetchCloudChangesAndForceChangeNotifications:completion:", v3, v4);

}

uint64_t __65__HMDHomeManager__handleNetworkFirewallFetchCloudChangesRequest___block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;

  v3 = *(void **)(a1 + 32);
  if (a2)
    a3 = 0;
  return objc_msgSend(v3, "respondWithPayload:error:", 0, a3);
}

void __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke(uint64_t a1, void *a2)
{
  _QWORD v3[4];
  id v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke_2;
  v3[3] = &unk_1E89C2350;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(a2, "removeAllLocalRulesWithCompletion:", v3);

}

uint64_t __64__HMDHomeManager__handleNetworkFirewallRemoveLocalRulesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  _QWORD aBlock[4];
  id v7;

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke_2;
  aBlock[3] = &unk_1E89BDE60;
  v7 = *(id *)(a1 + 32);
  v4 = a2;
  v5 = _Block_copy(aBlock);
  objc_msgSend(v4, "dumpPairedMetadataForProductGroup:productNumber:firmwareVersion:ignoreOverrides:rawOutput:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), v5);

}

void __66__HMDHomeManager__handleNetworkFirewallDumpPairedMetadataRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (v5)
  {
    v6 = (void *)MEMORY[0x1E0CB35C8];
    v7 = a3;
    objc_msgSend(v5, "domain");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v5, "code");
    v18 = *MEMORY[0x1E0CB2D50];
    objc_msgSend(v5, "debugDescription");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", v8, v9, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v12);
  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v16 = *MEMORY[0x1E0CB9720];
    v17 = a3;
    v14 = (void *)MEMORY[0x1E0C99D80];
    v15 = a3;
    objc_msgSend(v14, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithPayload:", v12);
  }

}

void __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD aBlock[4];
  id v8;

  v3 = a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke_2;
  aBlock[3] = &unk_1E89BDE60;
  v8 = *(id *)(a1 + 32);
  v4 = _Block_copy(aBlock);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    objc_msgSend(v3, "dumpLocalRulesForProductGroup:productNumber:firmwareVersion:ignoreOverrides:rawOutput:completion:", v5, v6, *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), v4);
  }
  else if (v5)
  {
    objc_msgSend(v3, "dumpLocalRulesForProductGroup:ignoreOverrides:rawOutput:completion:");
  }
  else
  {
    objc_msgSend(v3, "dumpAllLocalRulesIgnoringOverrides:rawOutput:completion:", *(unsigned __int8 *)(a1 + 64) != 0, *(unsigned __int8 *)(a1 + 65) != 0, v4);
  }

}

void __62__HMDHomeManager__handleNetworkFirewallDumpLocalRulesRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (v5)
  {
    v6 = (void *)MEMORY[0x1E0CB35C8];
    v7 = a3;
    objc_msgSend(v5, "domain");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v5, "code");
    v18 = *MEMORY[0x1E0CB2D50];
    objc_msgSend(v5, "debugDescription");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", v8, v9, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v12);
  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v16 = *MEMORY[0x1E0CB96E8];
    v17 = a3;
    v14 = (void *)MEMORY[0x1E0C99D80];
    v15 = a3;
    objc_msgSend(v14, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithPayload:", v12);
  }

}

void __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  id v8;

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke_2;
  aBlock[3] = &unk_1E89C2350;
  v8 = *(id *)(a1 + 32);
  v4 = a2;
  v5 = _Block_copy(aBlock);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    objc_msgSend(v4, "removeOverridesForProductGroup:productNumber:completion:", v6, *(_QWORD *)(a1 + 48), v5);
  else
    objc_msgSend(v4, "removeAllOverridesWithCompletion:", v5);

}

uint64_t __63__HMDHomeManager__handleNetworkFirewallRemoveOverridesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  id v8;

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke_2;
  aBlock[3] = &unk_1E89C2350;
  v8 = *(id *)(a1 + 32);
  v4 = a2;
  v5 = _Block_copy(aBlock);
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 48))
    objc_msgSend(v4, "setOverrides:completion:", v6, v5);
  else
    objc_msgSend(v4, "addOverrides:completion:", v6, v5);

}

uint64_t __60__HMDHomeManager__handleNetworkFirewallAddOverridesRequest___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "respondWithPayload:error:", 0, a2);
}

void __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD aBlock[4];
  id v8;

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke_2;
  aBlock[3] = &unk_1E89BDE60;
  v8 = *(id *)(a1 + 32);
  v4 = a2;
  v5 = _Block_copy(aBlock);
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(v4, "listCloudRecordsForProductGroup:rawOutput:completion:", v6, *(unsigned __int8 *)(a1 + 57), v5);
  else
    objc_msgSend(v4, "dumpCloudRecordsForProductGroup:productNumber:rawOutput:verifySignatures:completion:", v6, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 58), v5);

}

void __64__HMDHomeManager__handleNetworkFirewallDumpCloudRecordsRequest___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (v5)
  {
    v6 = (void *)MEMORY[0x1E0CB35C8];
    v7 = a3;
    objc_msgSend(v5, "domain");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v5, "code");
    v18 = *MEMORY[0x1E0CB2D50];
    objc_msgSend(v5, "debugDescription");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", v8, v9, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "respondWithError:", v12);
  }
  else
  {
    v13 = *(void **)(a1 + 32);
    v16 = *MEMORY[0x1E0CB96A8];
    v17 = a3;
    v14 = (void *)MEMORY[0x1E0C99D80];
    v15 = a3;
    objc_msgSend(v14, "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "respondWithPayload:", v12);
  }

}

void __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v16 = v7;
      v17 = 2112;
      v18 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to start up rule manager: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 40), "respondWithError:", v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "responseHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke_1200;
    v11[3] = &unk_1E89BDE10;
    v12 = *(id *)(a1 + 48);
    v13 = *(id *)(a1 + 56);
    v14 = v8;
    v9 = *(void **)(a1 + 40);
    v10 = v8;
    objc_msgSend(v9, "setResponseHandler:", v11);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

  }
}

void __68__HMDHomeManager___startupFirewallRuleManagerForMessage_completion___block_invoke_1200(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "shutdownForClient:", *(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);

}

_DWORD *__38__HMDHomeManager_registerStateHandler__block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _DWORD *StateData;

  if (*(_DWORD *)(a2 + 16) != 3)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("os-state-hmgr"));
    objc_msgSend(WeakRetained, "_getRequestedState:activity:", MEMORY[0x1E0C9AA60], 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(WeakRetained, "primaryHomeUUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "currentHomeUUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "UUIDString");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("Primary Home: %@, Current Home: %@"), v7, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, CFSTR("Home Manager"));

    StateData = createStateData(CFSTR("HomeKit State"), (uint64_t)v4);
  }
  else
  {
    StateData = 0;
  }

  return StateData;
}

void __42__HMDHomeManager__destinationFromMessage___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@HomeUtilRemoteMessageRequest: Invalid parameter: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 3, v3, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "respondWithError:", v9);

}

void __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@HomeUtilRemoteMessageRequest: Invalid parameter: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  v8 = *(void **)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 3, v3, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "respondWithError:", v9);

}

uint64_t __54__HMDHomeManager__handleHomeUtilRemoteMessageRequest___block_invoke_1179(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 40) == 3)
    return objc_msgSend(*(id *)(result + 32), "respondWithPayload:error:", 0, a2);
  return result;
}

void __75__HMDHomeManager_finalizeRetailDemoModeWithAllowEditing_completionHandler___block_invoke(uint64_t a1)
{
  HMDBackingStoreFetchArchiveOperation *v2;
  void *v3;
  HMDBackingStoreFetchArchiveOperation *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, void *, void *, void *);
  void *v9;
  uint64_t v10;
  id v11;

  v2 = [HMDBackingStoreFetchArchiveOperation alloc];
  v6 = MEMORY[0x1E0C809B0];
  v7 = 3221225472;
  v8 = __75__HMDHomeManager_finalizeRetailDemoModeWithAllowEditing_completionHandler___block_invoke_2;
  v9 = &unk_1E89BDD98;
  v3 = *(void **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = v3;
  v4 = -[HMDBackingStoreFetchArchiveOperation initWithFetchResult:](v2, "initWithFetchResult:", &v6);
  objc_msgSend(*(id *)(a1 + 32), "backingStore", v6, v7, v8, v9, v10);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "submit:", v4);

  -[HMDBackingStoreFetchArchiveOperation waitUntilFinished](v4, "waitUntilFinished");
}

void __75__HMDHomeManager_finalizeRetailDemoModeWithAllowEditing_completionHandler___block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    v23 = v9;
    +[HMDPersistentStore encryptDataWithControllerKey:error:](HMDPersistentStore, "encryptDataWithControllerKey:error:", v7, &v23);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v23;

    if (v10)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
    else
    {
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v25 = v20;
        v26 = 2112;
        v27 = v11;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to encrypt home data with %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v17);
      v21 = *(_QWORD *)(a1 + 40);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v21 + 16))(v21, 0, v22);

      v10 = 0;
    }
    v9 = v11;
  }
  else
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v25 = v15;
      v26 = 2112;
      v27 = v9;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Could not load home data from archived file with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v16 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v16 + 16))(v16, 0, v10);
  }

}

void __102__HMDHomeManager_configureRetailDemoModeWithKeyPair_controllerName_demoAccessories_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32))
  {
    (*(void (**)(_QWORD))(v1 + 16))(*(_QWORD *)(a1 + 40));
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 11);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void __102__HMDHomeManager_configureRetailDemoModeWithKeyPair_controllerName_demoAccessories_completionHandler___block_invoke_2(uint64_t a1, int a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (a2
    && objc_msgSend(WeakRetained, "_removeAndAddKeyPair:userName:eraseReason:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 4))
  {
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "updateActiveControllerPairingIdentifier:", *(_QWORD *)(a1 + 40));

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 52);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
}

void __45__HMDHomeManager__handleNetworkMismatchInfo___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543618;
    v9 = v7;
    v10 = 2112;
    v11 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_DEFAULT, "%{public}@wifi mismatch accessories %@", (uint8_t *)&v8, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 40), "respondWithSuccess");

}

uint64_t __44__HMDHomeManager_handleContactStoreChanged___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleContactStoreChanged");
}

uint64_t __82__HMDHomeManager__notifyMetadata_limitToSPIClients_message_invokeResponseHandler___block_invoke(uint64_t result)
{
  if (*(_BYTE *)(result + 40))
    return objc_msgSend(*(id *)(result + 32), "respondWithPayload:", 0);
  return result;
}

uint64_t __56__HMDHomeManager_evaluateToPushMetadataWhenHomeKitInUse__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  uint64_t v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v6)
  {
    objc_msgSend(v5, "firstObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "object");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "metadataVersion");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "unsignedIntegerValue");

    objc_msgSend(v9, "schemaVersion");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v12, "unsignedIntegerValue");

    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "version");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "unsignedIntegerValue");

    +[HMDHAPMetadata getSharedInstance](HMDHAPMetadata, "getSharedInstance");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "schemaVersion");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "unsignedIntegerValue");

    v19 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v26 = v21;
      v27 = 2048;
      v28 = v11;
      v29 = 2048;
      v30 = v24;
      v31 = 2048;
      v32 = v15;
      v33 = 2048;
      v34 = v18;
      _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@The metadata in transaction store has version %tu, schema version %tu, current version %tu, schema %tu", buf, 0x34u);

    }
    objc_autoreleasePoolPop(v19);
    if (v18 == 1 && v15 > v11)
    {
      +[HMDPersistentStore loadPlainMetadataDictionary](HMDPersistentStore, "loadPlainMetadataDictionary");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "handleMetadataDictionary:message:", v22, 0);

    }
  }

  return 0;
}

id __75__HMDHomeManager__handleHomeManagerSyncWalletKeysPassSerialNumbersMessage___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void __37__HMDHomeManager__eraseLocalHomeData__block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "syncManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "cancelOperations");

  objc_msgSend(WeakRetained, "syncManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "resume");

  if (!a2)
    objc_msgSend(WeakRetained, "updateAccountAvailabilityChanged:", 0);

}

uint64_t __36__HMDHomeManager_eraseLocalHomeData__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_eraseLocalHomeData");
}

- (id)activeAccountIdentifier
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    objc_msgSend(a1, "appleAccountManager");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "accountContext");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void __52__HMDHomeManager__handleAccountAvailabilityChanged___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id WeakRetained;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  NSObject *v20;
  void *v21;
  id v22;
  void *v23;
  NSObject *v24;
  void *v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  if (!v7 || (a2 & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    if (WeakRetained)
    {
      if (v7 || (_DWORD)a2)
      {
        v23 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = "don't ";
          *(_DWORD *)buf = 138543874;
          v32 = v25;
          if ((_DWORD)a2)
            v26 = "";
          v33 = 2112;
          v34 = v7;
          v35 = 2080;
          v36 = v26;
          _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Received account update with error: %@, and we %shave a record in the cloud, erasing local data", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v23);
        v27 = *(void **)(a1 + 32);
        v28 = *(_QWORD *)(a1 + 40);
        v30 = v7;
        objc_msgSend(v27, "removeControllerKeyPairForIdentifier:leaveTombstone:error:", v28, 1, &v30);
        v22 = v30;

        objc_msgSend(*(id *)(a1 + 48), "_eraseLocalHomeConfiguration");
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(void **)(a1 + 32);
        v17 = *(_QWORD *)(a1 + 40);
        v29 = 0;
        objc_msgSend(v16, "updateCurrentiCloudIdentifier:controllerPairingIdentifier:error:", v15, v17, &v29);
        v18 = v29;
        v19 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v32 = v21;
          _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Received account update that we don't have anything in the cloud, going to push local data", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v19);

        v22 = 0;
      }
      objc_msgSend(WeakRetained, "_handleAccountStatusDeterminedWithError:homeDataRecordExists:metadataRecordExists:completion:", v22, a2, a3, *(_QWORD *)(a1 + 64));
      v7 = v22;
    }

  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "hmd_conciseCKError");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "shortDescription");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v32 = v10;
      v33 = 2112;
      v34 = v12;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Failed to determine account status from CK due to error: %@, continuing to use sentinel controller", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    v13 = *(_QWORD *)(a1 + 64);
    if (v13)
      (*(void (**)(void))(v13 + 16))();
  }

}

void __52__HMDHomeManager__handleAccountAvailabilityChanged___block_invoke_1092(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_updateCloudDataSyncWithAccountState:completion:", 1, *(_QWORD *)(a1 + 32));
    WeakRetained = v3;
  }

}

void __51__HMDHomeManager_updateAccountAvailabilityChanged___block_invoke(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD);

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_handleAccountAvailabilityChanged:", v8);
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, 0);
  }
  else
  {
    if (v8)
      v8[2](v8);
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 52);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

    }
  }

}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  __int128 v34;
  uint64_t v35;
  id v36[2];
  uint8_t buf[4];
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
    if (WeakRetained)
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v38 = v13;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Failed to elect device for remote session", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "messageDispatcher");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v8, "destination");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_2;
    v26[3] = &unk_1E89BDC68;
    objc_copyWeak(v36, (id *)(a1 + 104));
    v18 = v8;
    v19 = *(_QWORD *)(a1 + 32);
    v27 = v18;
    v28 = v19;
    v20 = *(id *)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 48);
    v29 = v20;
    v30 = v21;
    v31 = v9;
    v34 = *(_OWORD *)(a1 + 80);
    v22 = *(id *)(a1 + 64);
    v36[1] = *(id *)(a1 + 112);
    v23 = *(_QWORD *)(a1 + 96);
    v32 = v22;
    v35 = v23;
    v33 = *(id *)(a1 + 72);
    objc_msgSend(v14, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v25, v15, v24, v16, v17, v26);

    objc_destroyWeak(v36);
  }

}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_1090(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "UUIDString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 138543618;
    v27 = v4;
    v28 = 2112;
    v29 = v5;
    _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_INFO, "%{public}@Remote access election completed for session %@", (uint8_t *)&v26, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 40), "pendingRemoteSessions");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

  v7 = *(int *)(a1 + 96);
  if (objc_msgSend(*(id *)(a1 + 48), "count") == v7)
  {
    objc_msgSend(*(id *)(a1 + 40), "_teardownRemoteAccessForHome:", *(_QWORD *)(a1 + 56));
    return;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 64), "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "UUIDString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "userID");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543874;
      v27 = v10;
      v28 = 2112;
      v29 = v12;
      v30 = 2112;
      v31 = (uint64_t)v13;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Setting up remote access for home, %@, with resident %@", (uint8_t *)&v26, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "userID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDDevice deviceWithDestination:](HMDDevice, "deviceWithDestination:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 40), "messageDispatcher");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setRemoteAccessDevice:forHome:", v15, *(_QWORD *)(a1 + 64));

LABEL_9:
    return;
  }
  v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
  v18 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
  if (!v17)
  {
    if (v20)
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 64), "uuid");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 138543618;
      v27 = v24;
      v28 = 2112;
      v29 = v25;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Not setting up remote access for home, %@, as no available residents were found", (uint8_t *)&v26, 0x16u);

    }
    objc_autoreleasePoolPop(v18);
    objc_msgSend(*(id *)(a1 + 40), "messageDispatcher");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setRemoteAccessDevice:forHome:", 0, *(_QWORD *)(a1 + 64));
    goto LABEL_9;
  }
  if (v20)
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "UUIDString");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = *(_QWORD *)(a1 + 88) + 1;
    v26 = 138543874;
    v27 = v21;
    v28 = 2112;
    v29 = v22;
    v30 = 2048;
    v31 = v23;
    _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Failed to setup remote session for home with UUID %@, retry attempt %ld", (uint8_t *)&v26, 0x20u);

  }
  objc_autoreleasePoolPop(v18);
  objc_msgSend(*(id *)(a1 + 40), "_electRemoteAccessPeerForHome:retryCount:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 88) + 1);
}

void __61__HMDHomeManager__electRemoteAccessDeviceForHome_retryCount___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id *v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  unint64_t v35;
  void *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  NSObject *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *context;
  void *contexta;
  NSObject *contextb;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 112));
  if (WeakRetained)
  {
    if (!v5 && v6)
    {
      v8 = objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kAtHomeStateKey"));
      objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("kRemoteSessionIdentifierKey"));
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = (void *)v9;
      if (!v8 || !v9)
      {
        v36 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = *(void **)(a1 + 72);
          *(_DWORD *)buf = 138543618;
          v55 = v38;
          v56 = 2112;
          v57 = v39;
          _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is not at home", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v36);
        goto LABEL_44;
      }
      objc_msgSend(*(id *)(a1 + 32), "destination");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "pendingRemoteSessions");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKeyedSubscript:", v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v13)
      {
        v40 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v42 = v11;
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v55 = v43;
          v56 = 2112;
          v57 = v42;
          _os_log_impl(&dword_1CD062000, v41, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is at home, dropping setting up remote access since we tore the session down", buf, 0x16u);

          v11 = v42;
        }

        objc_autoreleasePoolPop(v40);
        goto LABEL_43;
      }
      v14 = *(void **)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 48), "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "_homeWithUUID:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v16, "users");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "hmf_firstObjectWithValue:forKeyPath:", *(_QWORD *)(a1 + 56), CFSTR("userID"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        v19 = v18;
      else
        v19 = 0;
      v20 = v19;

      if (!v20 || objc_msgSend(v20, "configurationState") != 2)
      {
LABEL_42:

LABEL_43:
LABEL_44:

        goto LABEL_45;
      }
      context = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v48 = v16;
        v22 = v11;
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v55 = v23;
        v56 = 2112;
        v57 = v22;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Received response that %@ is at home", buf, 0x16u);

        v11 = v22;
        v16 = v48;
      }

      objc_autoreleasePoolPop(context);
      objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", CFSTR("kHomedVersionKey"));
      v24 = objc_claimAutoreleasedReturnValue();
      if (v24)
        v25 = (void *)v24;
      else
        v25 = &unk_1E8B36CC8;
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      v28 = *(_QWORD *)(v26 + 40);
      v27 = (id *)(v26 + 40);
      if (v28)
      {
        v29 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
        if (!v29 || objc_msgSend(v29, "compare:", v25) != -1)
        {
          contexta = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v49 = v11;
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v55 = v31;
            v56 = 2112;
            v57 = v49;
            v58 = 2112;
            v59 = v25;
            _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Dropping resident %@ (%@) as a resident with a higher homed version was found", buf, 0x20u);

            v11 = v49;
          }

          objc_autoreleasePoolPop(contexta);
          goto LABEL_41;
        }
        v47 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        contextb = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(contextb, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "userID");
          v50 = v11;
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
          *(_DWORD *)buf = 138544386;
          v55 = v46;
          v56 = 2112;
          v57 = v50;
          v58 = 2112;
          v59 = v25;
          v60 = 2112;
          v61 = v44;
          v62 = 2112;
          v63 = v45;
          _os_log_impl(&dword_1CD062000, contextb, OS_LOG_TYPE_INFO, "%{public}@Preferring %@ (%@) over %@ (%@) due to higher homed version", buf, 0x34u);

          v11 = v50;
        }

        objc_autoreleasePoolPop(v47);
        v27 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      }
      objc_storeStrong(v27, v19);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), v25);
LABEL_41:

      goto LABEL_42;
    }
    v32 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v55 = v34;
      _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@Failed to send secure message to elect device for remote session", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v32);
    if (v5)
    {
      objc_msgSend(v5, "domain");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v10, "isEqualToString:", *MEMORY[0x1E0CB2F90])
        || objc_msgSend(v5, "code") != -6722 && objc_msgSend(v5, "code") != -6752)
      {
        goto LABEL_44;
      }
      v35 = *(_QWORD *)(a1 + 120);

      if (v35 <= 1)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 1;
    }
  }
LABEL_45:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));

}

uint64_t __47__HMDHomeManager_electRemoteAccessPeerForHome___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_electRemoteAccessPeerForHome:", *(_QWORD *)(a1 + 40));
}

void __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke_2;
    block[3] = &unk_1E89C1710;
    v13 = v5;
    v14 = v6;
    v10 = *(id *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v15 = v10;
    v16 = v11;
    v17 = v8;
    dispatch_async(v9, block);

  }
}

void __63__HMDHomeManager__findRemotePeerContainingAccessories_forHome___block_invoke_2(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32) || (v7 = *(void **)(a1 + 40)) == 0)
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = *(_QWORD *)(a1 + 56);
      v6 = *(_QWORD *)(a1 + 32);
      v14 = 138543874;
      v15 = v4;
      v16 = 2112;
      v17 = v5;
      v18 = 2112;
      v19 = v6;
      _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_INFO, "%{public}@Remote peer, %@, failed to look for accessories with error:%@", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v2);
  }
  else
  {
    v8 = objc_msgSend(v7, "hmf_BOOLForKey:", CFSTR("kAtHomeStateKey"));
    objc_msgSend(*(id *)(a1 + 40), "hmf_stringForKey:", CFSTR("kDeviceNameKey"));
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    if (v8)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11)
      objc_msgSend(*(id *)(a1 + 48), "addUnconfiguredResidentDevice:", *(_QWORD *)(a1 + 56));

  }
  objc_msgSend(*(id *)(a1 + 64), "pendingResidentSetupSessions");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 56), "remoteDestinationString");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "removeObject:", v13);

}

uint64_t __54__HMDHomeManager_atHomeLevelChanged_formerLevel_home___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateCurrentHomeIfNecessary");
}

uint64_t __51__HMDHomeManager_removeFromUnassociatedPeers_home___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeFromUnassociatedPeers:home:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __38__HMDHomeManager__checkForRemotePeers__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForRemotePeersAndRegisterForRemoteNotifications:", 0);
}

uint64_t __37__HMDHomeManager_checkForRemotePeers__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkForRemotePeers");
}

void __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_1079(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_2;
  block[3] = &unk_1E89BDC18;
  objc_copyWeak(&v16, (id *)(a1 + 56));
  v12 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v14 = v5;
  v15 = v8;
  v13 = v6;
  v9 = v5;
  v10 = v6;
  dispatch_async(v7, block);

  objc_destroyWeak(&v16);
}

void __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke_2(uint64_t a1)
{
  id WeakRetained;
  int v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v3 = objc_msgSend(*(id *)(a1 + 40), "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey"));
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = WeakRetained;
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v3)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = *(_QWORD *)(a1 + 32);
        v17 = 138543618;
        v18 = v8;
        v19 = 2112;
        v20 = v9;
        v10 = "%{public}@Successfully synced wallet key pass serial numbers to watch: %@";
        v11 = v7;
        v12 = OS_LOG_TYPE_INFO;
        v13 = 22;
LABEL_9:
        _os_log_impl(&dword_1CD062000, v11, v12, v10, (uint8_t *)&v17, v13);

      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = objc_claimAutoreleasedReturnValue();
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_QWORD *)(a1 + 48);
      v17 = 138543874;
      v18 = v8;
      v19 = 2112;
      v20 = v15;
      v21 = 2112;
      v22 = v16;
      v10 = "%{public}@Failed to sync wallet key pass serials numbers to watch %@:%@";
      v11 = v7;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
      goto LABEL_9;
    }
LABEL_10:

    goto LABEL_11;
  }
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(a1 + 32);
    v17 = 138543618;
    v18 = v7;
    v19 = 2112;
    v20 = v14;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@HomeManager became nil while syncing wallet key pass serial numbers to watch: %@", (uint8_t *)&v17, 0x16u);
    goto LABEL_10;
  }
LABEL_11:

  objc_autoreleasePoolPop(v4);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

id __71__HMDHomeManager_syncWalletKeyPassSerialNumbersToWatch_withCompletion___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "walletKeyManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "passSerialNumber");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      objc_msgSend(WeakRetained, "associatedWatchPeers");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 64));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setConfigVersion:forHome:", v8, v9);

      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = *(void **)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "name");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138543874;
        v23 = v13;
        v24 = 2112;
        v25 = v14;
        v26 = 2112;
        v27 = v15;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Received ACK from watch %@ for data corresponding to home %@", (uint8_t *)&v22, 0x20u);

      }
      objc_autoreleasePoolPop(v10);

    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "name");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = *(void **)(a1 + 32);
        v22 = 138543874;
        v23 = v19;
        v24 = 2112;
        v25 = v20;
        v26 = 2112;
        v27 = v21;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Failed to send data for home %@ to watch %@", (uint8_t *)&v22, 0x20u);

      }
      objc_autoreleasePoolPop(v16);
    }
  }

}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_1075(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (a2)
    {
      objc_msgSend(WeakRetained, "associatedWatchPeers");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v7, "setPrimaryHome:", *(_QWORD *)(a1 + 40)));
      v9 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = *(_QWORD *)(a1 + 32);
        v13 = *(_QWORD *)(a1 + 40);
        v20 = 138543874;
        v21 = v11;
        v22 = 2112;
        v23 = v12;
        v24 = 2112;
        v25 = v13;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Received ACK from watch %@ for primary home update to %@", (uint8_t *)&v20, 0x20u);

      }
      objc_autoreleasePoolPop(v8);

    }
    else
    {
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = *(_QWORD *)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 40);
        v20 = 138543874;
        v21 = v17;
        v22 = 2112;
        v23 = v18;
        v24 = 2112;
        v25 = v19;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to primary home update %@ to watch %@", (uint8_t *)&v20, 0x20u);

      }
      objc_autoreleasePoolPop(v14);
    }
  }

}

void __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_1076(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  __int128 v6;
  _QWORD aBlock[5];
  id v8;
  __int128 v9;

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_2;
  aBlock[3] = &unk_1E89BE988;
  v2 = *(void **)(a1 + 40);
  aBlock[4] = *(_QWORD *)(a1 + 32);
  v8 = v2;
  v6 = *(_OWORD *)(a1 + 56);
  v3 = (id)v6;
  v9 = v6;
  v4 = _Block_copy(aBlock);
  v5 = v4;
  if (*(_BYTE *)(a1 + 72))
    objc_msgSend(*(id *)(a1 + 32), "syncWalletKeyPassSerialNumbersToWatch:withCompletion:", *(_QWORD *)(a1 + 48), v4);
  else
    (*((void (**)(void *))v4 + 2))(v4);

}

uint64_t __70__HMDHomeManager__sendHomeDataToWatch_migrateToHH2_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  int v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v10 = 138543618;
    v11 = v5;
    v12 = 2112;
    v13 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Finished pushing home data changes to watch: %@", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = 0;

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, 1, 0);
  return result;
}

void __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __74__HMDHomeManager__sendHomeDataToAllWatchesMigrateToHH2_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t __57__HMDHomeManager_sendHomeDataToAllWatchesWithCompletion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Syncing home data to all watches", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "watchPushDelayTimer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "suspend");

  return objc_msgSend(*(id *)(a1 + 32), "_sendHomeDataToAllWatchesWithCompletion:", *(_QWORD *)(a1 + 40));
}

uint64_t __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke_1070(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  void (**v10)(id, _QWORD, void *);
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v8 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v9 = objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke_2;
    v12[3] = &unk_1E89BDAE8;
    v13 = v5;
    v17 = a1[5];
    v14 = v8;
    v15 = a1[4];
    v16 = v6;
    v18 = a1[6];
    dispatch_async(v9, v12);

  }
  else
  {
    v10 = (void (**)(id, _QWORD, void *))a1[5];
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v10[2](v10, 0, v11);

  }
}

void __53__HMDHomeManager__sendKeysToWatch_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = *(_QWORD *)(a1 + 32);
      v16 = 138543618;
      v17 = v4;
      v18 = 2114;
      v19 = v5;
      _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_ERROR, "%{public}@Received error for companion keys request: %{public}@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "fullSyncedWatchPeers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", *(_QWORD *)(a1 + 48));

    v7 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 48);
      v16 = 138543618;
      v17 = v9;
      v18 = 2112;
      v19 = v10;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Adding %@ to fully synced device list", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    v11 = objc_msgSend(*(id *)(a1 + 40), "_addWatch:toAssociatedList:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v12 = *(void **)(a1 + 40);
    if (v11)
    {
      objc_msgSend(v12, "_sendHomeDataToWatch:completionHandler:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 72));
    }
    else
    {
      objc_msgSend(v12, "associatedWatchPeers");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "removeObjectForKey:", *(_QWORD *)(a1 + 48));

      v14 = *(_QWORD *)(a1 + 64);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", -1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v14 + 16))(v14, 0, v15);

    }
  }
}

void __46__HMDHomeManager__addWatch_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id WeakRetained;
  void *v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD block[4];
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD aBlock[4];
  id v24;

  v5 = a2;
  v6 = a3;
  v7 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __46__HMDHomeManager__addWatch_completionHandler___block_invoke_2;
  aBlock[3] = &unk_1E89BDAC0;
  v24 = *(id *)(a1 + 48);
  v8 = _Block_copy(aBlock);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v10 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = v7;
    block[1] = 3221225472;
    block[2] = __46__HMDHomeManager__addWatch_completionHandler___block_invoke_3;
    block[3] = &unk_1E89C0790;
    v17 = v5;
    v22 = v8;
    v18 = v6;
    v12 = v10;
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(a1 + 40);
    v19 = v12;
    v20 = v13;
    v21 = v14;
    dispatch_async(v11, block);

    v15 = v17;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(void *, _QWORD, void *))v8 + 2))(v8, 0, v15);
  }

}

uint64_t __46__HMDHomeManager__addWatch_completionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t __46__HMDHomeManager__addWatch_completionHandler___block_invoke_3(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint64_t (*v6)(void);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  char v19;
  _BOOL4 v20;
  void *v21;
  id v22;
  void *v23;
  char v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  NSObject *v36;
  void *v37;
  void *v38;
  id v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  int v46;
  id v47;
  void *v48;
  void *v49;
  id v50;
  NSObject *v51;
  void *v52;
  void *v53;
  void *v54;
  char v55;
  void *v56;
  id v57;
  NSObject *v58;
  void *v59;
  void *v60;
  id v61;
  NSObject *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v68;
  NSObject *v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  NSObject *v74;
  void *v75;
  void *v76;
  void *v77;
  id v78;
  NSObject *v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  NSObject *v84;
  void *v85;
  void *v86;
  id v87;
  NSObject *v88;
  void *v89;
  void *context;
  void *contextb;
  void *contexta;
  void *v93;
  void *v94;
  id v95;
  id v96;
  id v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  id v102;
  uint64_t v103;
  void *v104;
  uint8_t buf[4];
  void *v106;
  __int16 v107;
  void *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v106 = v4;
      v107 = 2114;
      v108 = v5;
      _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_ERROR, "%{public}@Received error for home config request: %{public}@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v2);
    v6 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16);
    return v6();
  }
  objc_msgSend(*(id *)(a1 + 40), "hmf_dictionaryForKey:", CFSTR("kHomeConfigHomesKey"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0C99E20];
  objc_msgSend(v7, "allKeys");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setWithArray:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 48), "_prepareHomesVersionDict");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)MEMORY[0x1E0C99E20];
  objc_msgSend(v11, "allKeys");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setWithArray:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "minusSet:", v14);
  if (objc_msgSend(v10, "count"))
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v106 = v18;
      v107 = 2112;
      v108 = v10;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Complete sync is required because the following homes have been removed: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v19 = 0;
    v20 = 1;
    goto LABEL_45;
  }
  objc_msgSend(*(id *)(a1 + 40), "hmf_dataForKey:", CFSTR("kControllerUniqueDeviceIdSaltKey"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v21)
  {
    objc_msgSend(*(id *)(a1 + 48), "fullSyncedWatchPeers");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "containsObject:", *(_QWORD *)(a1 + 64));

    if ((v24 & 1) == 0)
    {
      v38 = (void *)MEMORY[0x1D17BA0A0]();
      v39 = *(id *)(a1 + 56);
      HMFGetOSLogHandle();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v41 = v7;
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v106 = v42;
        _os_log_impl(&dword_1CD062000, v40, OS_LOG_TYPE_INFO, "%{public}@Full sync has not happened happened before, need to rsync everything again", buf, 0xCu);

        v7 = v41;
      }

      objc_autoreleasePoolPop(v38);
LABEL_43:
      v20 = 1;
      goto LABEL_44;
    }
LABEL_14:

    objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("pairingIdentity"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    v26 = *(void **)(a1 + 40);
    if (v25)
    {
      objc_msgSend(v26, "hmf_dataForKey:", CFSTR("pairingIdentity"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (v27)
      {
        objc_msgSend(MEMORY[0x1E0CB3710], "deserializeObjectWithData:allowedClass:frameworkClasses:", v27, objc_opt_class(), MEMORY[0x1E0C9AA60]);
        v28 = objc_claimAutoreleasedReturnValue();
        if (v28)
        {
          v21 = (void *)v28;

          goto LABEL_56;
        }
        v49 = (void *)MEMORY[0x1D17BA0A0]();
        v50 = *(id *)(a1 + 56);
        HMFGetOSLogHandle();
        v51 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v52 = v7;
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v106 = v53;
          _os_log_impl(&dword_1CD062000, v51, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to deserialize pairing identity", buf, 0xCu);

          v7 = v52;
        }

        objc_autoreleasePoolPop(v49);
      }
    }
    else
    {
      objc_msgSend(v26, "hmf_dataForKey:", CFSTR("kControllerKeyPairKey"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "hmf_stringForKey:", CFSTR("kControllerPairingNameKey"));
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = v43;
      if (v27 && v43)
      {
        v99 = v7;
        objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v101 = 0;
        v102 = 0;
        v46 = objc_msgSend(v45, "deserializeKeyPair:publicKey:secretKey:error:", v27, &v102, 0, &v101);
        v47 = v102;
        v95 = v101;

        if (v46)
        {
          v48 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28658]), "initWithPairingKeyData:", v47);
          v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28650]), "initWithIdentifier:publicKey:privateKey:", v44, v48, 0);

        }
        else
        {
          context = (void *)MEMORY[0x1D17BA0A0]();
          v68 = *(id *)(a1 + 56);
          HMFGetOSLogHandle();
          v69 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v106 = v70;
            _os_log_impl(&dword_1CD062000, v69, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to deserialize key pair", buf, 0xCu);

          }
          objc_autoreleasePoolPop(context);
          v21 = 0;
        }

        v7 = v99;
        if (v21)
        {
LABEL_56:
          objc_msgSend(MEMORY[0x1E0D165F0], "systemStore", context);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          v100 = 0;
          objc_msgSend(v71, "getLocalPairingIdentity:", &v100);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = v100;

          v20 = v33 != 0;
          if (v33)
          {
            if ((objc_msgSend(v21, "isEqual:", v33) & 1) != 0)
            {

              goto LABEL_59;
            }
            v98 = v7;
            contexta = (void *)MEMORY[0x1D17BA0A0]();
            v87 = *(id *)(a1 + 56);
            HMFGetOSLogHandle();
            v88 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v97 = v22;
              v89 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v106 = v89;
              v107 = 2112;
              v108 = v21;
              _os_log_impl(&dword_1CD062000, v88, OS_LOG_TYPE_INFO, "%{public}@Watch pairing identity incorrect: %@", buf, 0x16u);

              v22 = v97;
            }

            objc_autoreleasePoolPop(contexta);
          }
          else
          {
            v96 = v22;
            v98 = v7;
            v82 = (void *)MEMORY[0x1D17BA0A0]();
            v83 = *(id *)(a1 + 56);
            HMFGetOSLogHandle();
            v84 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              contextb = v82;
              v85 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v106 = v85;
              _os_log_impl(&dword_1CD062000, v84, OS_LOG_TYPE_ERROR, "%{public}@Companion does not have local pairing identity, so cannot add the watch", buf, 0xCu);

              v82 = contextb;
            }

            objc_autoreleasePoolPop(v82);
            objc_msgSend(*(id *)(a1 + 48), "associatedWatchPeers");
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v86, "removeObjectForKey:", *(_QWORD *)(a1 + 64));

            v22 = v96;
          }
          goto LABEL_21;
        }
        goto LABEL_38;
      }

    }
LABEL_38:
    objc_msgSend(*(id *)(a1 + 48), "fullSyncedWatchPeers", context);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = objc_msgSend(v54, "containsObject:", *(_QWORD *)(a1 + 64));

    if ((v55 & 1) != 0)
    {
      v21 = 0;
LABEL_59:

      v72 = (void *)MEMORY[0x1D17BA0A0]();
      v73 = *(id *)(a1 + 56);
      HMFGetOSLogHandle();
      v74 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        v76 = *(void **)(a1 + 64);
        *(_DWORD *)buf = 138543618;
        v106 = v75;
        v107 = 2112;
        v108 = v76;
        _os_log_impl(&dword_1CD062000, v74, OS_LOG_TYPE_INFO, "%{public}@Adding watch %@ associated watch peers", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v72);
      if ((objc_msgSend(*(id *)(a1 + 48), "_addWatch:toAssociatedList:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40)) & 1) != 0)
      {
        v77 = (void *)MEMORY[0x1D17BA0A0]();
        v78 = *(id *)(a1 + 56);
        HMFGetOSLogHandle();
        v79 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v106 = v80;
          _os_log_impl(&dword_1CD062000, v79, OS_LOG_TYPE_INFO, "%{public}@Scheduling partial push to watch", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v77);
        objc_msgSend(*(id *)(a1 + 48), "_scheduleSendHomeDataToAllWatches");
        v20 = 1;
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 48), "associatedWatchPeers");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v81, "removeObjectForKey:", *(_QWORD *)(a1 + 64));

        v20 = 0;
      }
      v19 = 1;
      goto LABEL_45;
    }
    v56 = (void *)MEMORY[0x1D17BA0A0]();
    v57 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v58 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v106 = v59;
      _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_INFO, "%{public}@Full sync has not happened happened before, need to rsync everything again", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v56);
    v21 = 0;
    goto LABEL_43;
  }
  +[HMDHomeManager saltForDeviceSpecificIdentifier](HMDHomeManager, "saltForDeviceSpecificIdentifier");
  v22 = (id)objc_claimAutoreleasedReturnValue();
  v20 = v22 != 0;
  if (v22)
  {
    if ((objc_msgSend(v21, "isEqualToData:", v22) & 1) == 0)
    {
      v98 = v7;
      v34 = (void *)MEMORY[0x1D17BA0A0]();
      v35 = *(id *)(a1 + 56);
      HMFGetOSLogHandle();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v94 = v34;
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v106 = v37;
        _os_log_impl(&dword_1CD062000, v36, OS_LOG_TYPE_INFO, "%{public}@Device ID salts mismatched", buf, 0xCu);

        v34 = v94;
      }

      objc_autoreleasePoolPop(v34);
      goto LABEL_25;
    }

    goto LABEL_14;
  }
  v98 = v7;
  v29 = (void *)MEMORY[0x1D17BA0A0]();
  v30 = *(id *)(a1 + 56);
  HMFGetOSLogHandle();
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v93 = v29;
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v106 = v32;
    _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_ERROR, "%{public}@Companion does not have device ID salt, so cannot add the watch", buf, 0xCu);

    v29 = v93;
  }

  objc_autoreleasePoolPop(v29);
  objc_msgSend(*(id *)(a1 + 48), "associatedWatchPeers");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "removeObjectForKey:", *(_QWORD *)(a1 + 64));
LABEL_21:

LABEL_25:
  v7 = v98;
LABEL_44:

  v19 = 0;
LABEL_45:

  if ((v19 & 1) == 0 && v20)
  {
    v60 = (void *)MEMORY[0x1D17BA0A0]();
    v61 = *(id *)(a1 + 56);
    HMFGetOSLogHandle();
    v62 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = *(void **)(a1 + 64);
      *(_DWORD *)buf = 138543618;
      v106 = v63;
      v107 = 2112;
      v108 = v64;
      _os_log_impl(&dword_1CD062000, v62, OS_LOG_TYPE_INFO, "%{public}@Watch %@ needs a complete sync", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v60);
    v65 = *(void **)(a1 + 48);
    v103 = *(_QWORD *)(a1 + 64);
    v104 = &unk_1E8B34FC8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v104, &v103, 1);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v65, "_addSyncOperation:", v66);

  }
  v6 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16);
  return v6();
}

void __37__HMDHomeManager__pairedSyncDidStart__block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  void *v17;
  id WeakRetained;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void *v36;
  id v37;
  NSObject *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  id v52;
  NSObject *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  NSObject *v67;
  void *v68;
  void *v69;
  id v70;
  NSObject *v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[24];
  void *v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (!v9)
      goto LABEL_7;
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *(void **)(a1 + 48);
    *(_DWORD *)v74 = 138543874;
    *(_QWORD *)&v74[4] = v10;
    *(_WORD *)&v74[12] = 2112;
    *(_QWORD *)&v74[14] = v11;
    *(_WORD *)&v74[22] = 2112;
    v75 = v12;
    v13 = "%{public}@Successfully completed paired sync: %@ for watch: %@";
    v14 = v8;
    v15 = 32;
  }
  else
  {
    if (!v9)
      goto LABEL_7;
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(void **)(a1 + 48);
    *(_DWORD *)v74 = 138544130;
    *(_QWORD *)&v74[4] = v10;
    *(_WORD *)&v74[12] = 2112;
    *(_QWORD *)&v74[14] = v16;
    *(_WORD *)&v74[22] = 2112;
    v75 = v17;
    LOWORD(v76) = 2112;
    *(_QWORD *)((char *)&v76 + 2) = v5;
    v13 = "%{public}@Failed to complete paired sync: %@ for watch: %@:%@";
    v14 = v8;
    v15 = 42;
  }
  _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, v13, v74, v15);

LABEL_7:
  objc_autoreleasePoolPop(v6);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "watchSyncStateMap");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48));
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    v21 = objc_msgSend(v20, "removeSync");
    if ((_DWORD)v21)
    {
      objc_msgSend(v20, "currentSync");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(*(id *)(a1 + 40), "syncOption");
      v29 = objc_msgSend(v27, "syncOption");
      if (v28 == v29)
      {
        v35 = 0;
      }
      else
      {
        v29 = +[HMDWatchSyncState isNewBetter:present:](HMDWatchSyncState, "isNewBetter:present:", objc_msgSend(*(id *)(a1 + 40), "syncOption"), objc_msgSend(v27, "syncOption"));
        v35 = v29 ^ 1;
      }
      v41 = (void *)MEMORY[0x1D17BA0A0](v29, v30, v31, v32, v33, v34);
      v42 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v74 = 138543362;
        *(_QWORD *)&v74[4] = v44;
        _os_log_impl(&dword_1CD062000, v43, OS_LOG_TYPE_INFO, "%{public}@There are more options remaining, restarting the paired sync", v74, 0xCu);

      }
      objc_autoreleasePoolPop(v41);
      objc_msgSend(*(id *)(a1 + 32), "_pairedSyncDidStart");
    }
    else
    {
      v36 = (void *)MEMORY[0x1D17BA0A0](v21, v22, v23, v24, v25, v26);
      v37 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)v74 = 138543618;
        *(_QWORD *)&v74[4] = v39;
        *(_WORD *)&v74[12] = 2112;
        *(_QWORD *)&v74[14] = v40;
        _os_log_impl(&dword_1CD062000, v38, OS_LOG_TYPE_INFO, "%{public}@Removing %@ from watch sync state", v74, 0x16u);

      }
      objc_autoreleasePoolPop(v36);
      objc_msgSend(WeakRetained, "watchSyncStateMap");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "removeObjectForKey:", *(_QWORD *)(a1 + 48));
      v35 = 1;
    }

    objc_msgSend(*(id *)(a1 + 32), "watchSyncRetryContextBySyncIdentifier");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "identifier");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "objectForKeyedSubscript:", v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    if (v35 && objc_msgSend(v5, "code") == 8)
    {
      objc_msgSend(*(id *)(a1 + 32), "watchSyncRetryContextBySyncIdentifier");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "setObject:forKeyedSubscript:", 0, v49);

      if (v47)
        v50 = objc_msgSend(v47, "retryAttempt") + 1;
      else
        v50 = 0;
      +[HMDWatchSyncRetryContext createWithWatchIdentifier:watchSync:retryAttempt:](HMDWatchSyncRetryContext, "createWithWatchIdentifier:watchSync:retryAttempt:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), v50, *(_OWORD *)v74, *(_QWORD *)&v74[16], v75, v76);
      v58 = (void *)objc_claimAutoreleasedReturnValue();

      if (v58)
      {
        objc_msgSend(*(id *)(a1 + 32), "watchSyncRetryContextBySyncIdentifier");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "identifier");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "setObject:forKeyedSubscript:", v58, v60);

        v61 = objc_alloc(MEMORY[0x1E0D286C8]);
        objc_msgSend(v58, "retryInterval");
        v62 = (void *)objc_msgSend(v61, "initWithTimeInterval:options:", 0);
        objc_msgSend(v62, "setDelegate:", *(_QWORD *)(a1 + 32));
        objc_msgSend(*(id *)(a1 + 32), "workQueue");
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v62, "setDelegateQueue:", v63);

        objc_msgSend(*(id *)(a1 + 32), "watchSyncRetryContextByRetryTimer");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "setObject:forKey:", v58, v62);

        v65 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v62, "resume"));
        v66 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v67 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v74 = 138543874;
          *(_QWORD *)&v74[4] = v68;
          *(_WORD *)&v74[12] = 2112;
          *(_QWORD *)&v74[14] = v62;
          *(_WORD *)&v74[22] = 2112;
          v75 = v58;
          _os_log_impl(&dword_1CD062000, v67, OS_LOG_TYPE_INFO, "%{public}@Started retry timer for watch sync retry context %@:%@", v74, 0x20u);

        }
        objc_autoreleasePoolPop(v65);

      }
      else
      {
        v69 = (void *)MEMORY[0x1D17BA0A0]();
        v70 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v71 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          v73 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)v74 = 138543618;
          *(_QWORD *)&v74[4] = v72;
          *(_WORD *)&v74[12] = 2112;
          *(_QWORD *)&v74[14] = v73;
          _os_log_impl(&dword_1CD062000, v71, OS_LOG_TYPE_INFO, "%{public}@Finished retrying watch sync: %@", v74, 0x16u);

        }
        objc_autoreleasePoolPop(v69);
      }
    }
    else if (v47)
    {
      v51 = (void *)MEMORY[0x1D17BA0A0]();
      v52 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v53 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)v74 = 138543618;
        *(_QWORD *)&v74[4] = v54;
        *(_WORD *)&v74[12] = 2112;
        *(_QWORD *)&v74[14] = v55;
        _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_INFO, "%{public}@Resetting retry context for watch sync: %@", v74, 0x16u);

      }
      objc_autoreleasePoolPop(v51);
      objc_msgSend(*(id *)(a1 + 32), "watchSyncRetryContextBySyncIdentifier");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "identifier");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "setObject:forKeyedSubscript:", 0, v57);

    }
  }

}

uint64_t __37__HMDHomeManager_pairedSyncDidStart___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_pairedSyncDidStart");
}

uint64_t __45__HMDHomeManager_controllerKeyPairGenerated___block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v4;
    _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_INFO, "%{public}@Controller key pair has been generated, sending them over to watch", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "_checkAndAddWatchDevicesWithResend:", 1);
}

void __38__HMDHomeManager__handleAreYouAtHome___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543618;
    v7 = v5;
    v8 = 2112;
    v9 = v2;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Setup a reverse connection to client that requested remote access with error: %@", (uint8_t *)&v6, 0x16u);

  }
  objc_autoreleasePoolPop(v3);

}

void __43__HMDHomeManager_cloudHomeSettingsUpdated___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  char *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    v7 = "";
    if (!*(_BYTE *)(a1 + 48))
      v7 = "not ";
    *(_DWORD *)buf = 138543618;
    v30 = v5;
    v31 = 2080;
    v32 = v7;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@HomeKit iCloud data class switch was modified to %senabled", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "cloudDataSyncStateFilter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "updateiCloudSwitchState:", *(unsigned __int8 *)(a1 + 48));

  if (objc_msgSend(*(id *)(a1 + 32), "accountActive"))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      objc_msgSend(*(id *)(a1 + 40), "userInfo");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "hmf_numberForKey:", CFSTR("kIsUserInitiated"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "BOOLValue");

      if (v11)
      {
        objc_msgSend(*(id *)(a1 + 32), "syncManager");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "pause");

        objc_initWeak((id *)buf, *(id *)(a1 + 32));
        objc_msgSend(*(id *)(a1 + 32), "cloudDataSyncManager");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3221225472;
        v27[2] = __43__HMDHomeManager_cloudHomeSettingsUpdated___block_invoke_1064;
        v27[3] = &unk_1E89C0678;
        objc_copyWeak(&v28, (id *)buf);
        objc_msgSend(v13, "resetCloudCache:", v27);

        objc_destroyWeak(&v28);
        objc_destroyWeak((id *)buf);
      }
      objc_msgSend(*(id *)(a1 + 32), "_updateCloudDataSyncWithAccountState:", objc_msgSend(*(id *)(a1 + 32), "accountActive"));
    }
    else
    {
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v30 = (uint64_t)v17;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Posting notification kCloudServerTokenDataResetNotification to clear server token data because iCloud switch is disabled", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "postNotificationName:object:", CFSTR("kCloudServerTokenDataResetNotification"), *(_QWORD *)(a1 + 32));

      objc_msgSend(*(id *)(a1 + 40), "userInfo");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "hmf_numberForKey:", CFSTR("kIsUserInitiated"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "BOOLValue");

      if (v21)
      {
        +[HMDBackingStore resetBackingStore](HMDBackingStore, "resetBackingStore");
        v22 = (char *)objc_claimAutoreleasedReturnValue();
        if (v22)
        {
          v23 = (void *)MEMORY[0x1D17BA0A0]();
          v24 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v30 = (uint64_t)v26;
            v31 = 2112;
            v32 = v22;
            _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_ERROR, "%{public}@BackingStore reset finished with error: %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v23);
        }

      }
    }
  }
}

void __43__HMDHomeManager_cloudHomeSettingsUpdated___block_invoke_1064(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "syncManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "cancelOperations");

  objc_msgSend(WeakRetained, "syncManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "resume");

  if (!a2)
    objc_msgSend(WeakRetained, "updateAccountAvailabilityChanged:", 0);

}

void __49__HMDHomeManager__handleUpdateiCloudSwitchState___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543618;
      v12 = v8;
      v13 = 2112;
      v14 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to update iCloud state with error: %@", (uint8_t *)&v11, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }
  objc_msgSend(*(id *)(a1 + 32), "responseHandler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "responseHandler");
    v10 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v10)[2](v10, v3, 0);

  }
}

void __58__HMDHomeManager__auditDuplicatePreviouslyAddedAccessory___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  BOOL v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  int v37;
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  NSObject *v50;
  void *v51;
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id obj;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  id v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  void *v76;
  _BYTE v77[128];
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v56 = a1;
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v70 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Auditing accessories", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = a1;
  objc_msgSend(*(id *)(a1 + 40), "home");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "homes");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v78, 16);
    if (!v8)
      goto LABEL_43;
    v10 = v8;
    v11 = *(_QWORD *)v66;
    *(_QWORD *)&v9 = 138544130;
    v53 = v9;
    v54 = *(_QWORD *)v66;
    while (1)
    {
      v12 = 0;
      v55 = v10;
      do
      {
        if (*(_QWORD *)v66 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * v12);
        if (!objc_msgSend(v13, "isOwnerUser", v53))
          goto LABEL_41;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        objc_msgSend(v13, "accessories");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v61, v77, 16);
        if (!v15)
        {
LABEL_40:

          goto LABEL_41;
        }
        v16 = v15;
        v17 = *(_QWORD *)v62;
        v58 = v12;
        v59 = *(_QWORD *)v62;
LABEL_12:
        v18 = 0;
        v60 = v16;
        while (1)
        {
          if (*(_QWORD *)v62 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * v18);
          v20 = *(void **)(v6 + 48);
          if (!v20)
            goto LABEL_20;
          objc_msgSend(v20, "serialNumber");
          v21 = objc_claimAutoreleasedReturnValue();
          if (!v21)
            goto LABEL_20;
          v22 = (void *)v21;
          v23 = v14;
          objc_msgSend(*(id *)(v6 + 48), "uuid");
          v24 = v6;
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "uuid");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          if (!objc_msgSend(v25, "hmf_isEqualToUUID:", v26))
            break;

          v14 = v23;
          v6 = v24;
          v17 = v59;
          v16 = v60;
LABEL_20:
          v30 = *(void **)(v6 + 56);
          if (v30)
            v31 = v19 == v30;
          else
            v31 = 1;
          if (!v31)
          {
            v32 = v19;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v33 = v32;
            else
              v33 = 0;
            v34 = v33;

            if (v34)
            {
              objc_msgSend(*(id *)(v6 + 56), "identifier");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "identifier");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              v37 = objc_msgSend(v35, "isEqual:", v36);

              if (v37)
              {
                v38 = (void *)MEMORY[0x1D17BA0A0]();
                HMFGetOSLogHandle();
                v39 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v40 = (void *)objc_claimAutoreleasedReturnValue();
                  v41 = *(void **)(v56 + 56);
                  objc_msgSend(v41, "identifier");
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = v53;
                  v70 = v40;
                  v71 = 2112;
                  v72 = v34;
                  v73 = 2112;
                  v74 = v41;
                  v75 = 2112;
                  v76 = v42;
                  _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_INFO, "%{public}@Found an existing media accessory (%@) match the newly added hap accessory (%@) with device identifier %@, trying to remove it.", buf, 0x2Au);

                }
                objc_autoreleasePoolPop(v38);

                v11 = v54;
                v10 = v55;
                v12 = v58;
                v6 = v56;
LABEL_39:
                objc_msgSend(v32, "sendRemovalRequest");
                v14 = v32;
                goto LABEL_40;
              }
            }

          }
          if (v16 == ++v18)
          {
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v61, v77, 16);
            if (v16)
              goto LABEL_12;
            v11 = v54;
            v10 = v55;
            v12 = v58;
            goto LABEL_40;
          }
        }
        objc_msgSend(*(id *)(v24 + 48), "serialNumber");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "serialNumber");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_msgSend(v27, "isEqual:", v28);

        v14 = v23;
        v6 = v24;
        v17 = v59;
        v16 = v60;
        if (!v29)
          goto LABEL_20;
        v43 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          v46 = *(void **)(v56 + 48);
          objc_msgSend(v46, "serialNumber");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = v53;
          v70 = v45;
          v71 = 2112;
          v72 = v19;
          v73 = 2112;
          v74 = v46;
          v75 = 2112;
          v76 = v47;
          _os_log_impl(&dword_1CD062000, v44, OS_LOG_TYPE_INFO, "%{public}@Found an existing accessory (%@) match the newly added accessory (%@) with serialNumber %@, trying to remove it.", buf, 0x2Au);

        }
        objc_autoreleasePoolPop(v43);
        v32 = v19;

        v11 = v54;
        v10 = v55;
        v12 = v58;
        v6 = v56;
        if (v32)
          goto LABEL_39;
LABEL_41:
        ++v12;
      }
      while (v12 != v10);
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v65, v78, 16);
      if (!v10)
      {
LABEL_43:

        return;
      }
    }
  }
  v48 = (void *)MEMORY[0x1D17BA0A0]();
  v49 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v50 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v70 = v51;
    v71 = 2112;
    v72 = v52;
    _os_log_impl(&dword_1CD062000, v50, OS_LOG_TYPE_ERROR, "%{public}@Skipping audit as accessory (%@) or home has been removed", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v48);
}

void __39__HMDHomeManager___handleInitialFetch___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v5;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Received legacy fetch, controller key established.", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(*(id *)(a1 + 40), "appleAccountManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "account");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "getLocalPairingIdentity:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      if (v9)
      {
        +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "registerIdentity:account:object:", v9, v7, v7);

      }
    }

  }
}

void __62__HMDHomeManager___handleAppleAccountUpdated_previousAccount___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "getLocalPairingIdentity:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (*(_QWORD *)(a1 + 32))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "deregisterIdentity:object:", v3, *(_QWORD *)(a1 + 32));

  }
  if (*(_QWORD *)(a1 + 40) && v3)
  {
    +[HMDIdentityRegistry sharedRegistry](HMDIdentityRegistry, "sharedRegistry");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "registerIdentity:account:object:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 40));

  }
  objc_msgSend(*(id *)(a1 + 48), "_notifyClientsOfUpdatedStatus");
  v7 = objc_msgSend(*(id *)(a1 + 48), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
  if (*(_QWORD *)(a1 + 40))
  {
    v8 = (void *)MEMORY[0x1D17BA0A0](v7);
    v9 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543362;
      v25 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign in", (uint8_t *)&v24, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(*(id *)(a1 + 48), "_postiCloudSigninState:", 1);
    if (isWatch())
    {
      objc_msgSend(*(id *)(a1 + 48), "_updateCloudDataSyncWithAccountState:", 1);
    }
    else
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = *(id *)(a1 + 48);
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = 138543362;
        v25 = v21;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Clearing CloudKit account status", (uint8_t *)&v24, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(*(id *)(a1 + 48), "setCloudkitAccountStatusDetermined:", 0);
    }
    objc_msgSend(*(id *)(a1 + 48), "setBackOffOperationInProgress:", 0);
    objc_msgSend(*(id *)(a1 + 48), "_resetCloudOperationRetryCounters");
    objc_msgSend(*(id *)(a1 + 48), "multiUserStatusController");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "didChangeHasActiveAccountState:", 0);

    objc_msgSend(*(id *)(a1 + 48), "notificationCenter");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerKeyTransferResetTimerNotification"), *(_QWORD *)(a1 + 48), 0);

  }
  else if (*(_QWORD *)(a1 + 32))
  {
    v12 = (void *)MEMORY[0x1D17BA0A0](v7);
    v13 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = 138543362;
      v25 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Handling account sign out", (uint8_t *)&v24, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(*(id *)(a1 + 48), "multiUserStatusController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "didChangeHasActiveAccountState:", 0);

    objc_msgSend(*(id *)(a1 + 48), "_eraseLocalHomeConfigurationAfterSignOut");
    objc_msgSend(*(id *)(a1 + 48), "_updateCloudDataSyncWithAccountState:", 0);
    objc_msgSend(*(id *)(a1 + 48), "_postiCloudSigninState:", 0);
    objc_msgSend(*(id *)(a1 + 48), "setBackOffOperationInProgress:", 0);
    objc_msgSend(*(id *)(a1 + 48), "setCloudkitAccountStatusDetermined:", 0);
    objc_msgSend(*(id *)(a1 + 48), "_resetCloudOperationRetryCounters");
    v17 = +[HMDPersistentStore archiveCloudServerTokenData:](HMDPersistentStore, "archiveCloudServerTokenData:", 0);
    objc_msgSend(*(id *)(a1 + 48), "updatePowerAssertion");
  }
}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_homeWithUUID:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(WeakRetained, "incomingInvitations");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "hmf_firstObjectWithValue:forKeyPath:", v8, CFSTR("homeUUID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = WeakRetained;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = v3;
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "UUIDString");
        v19 = v10;
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "describeWithFormat");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v21 = v13;
        v22 = 2112;
        v23 = v15;
        v24 = 2112;
        v25 = v16;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Found home with UUID %@ in invite %@, removing it since it was accepted", buf, 0x20u);

        v10 = v19;
        v3 = v18;
      }

      objc_autoreleasePoolPop(v10);
      objc_msgSend(v11, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v9, 3);
      objc_msgSend(v11, "_removeIncomingInvitation:", v9);
    }

  }
  v17 = *(_QWORD *)(a1 + 48);
  if (v17)
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v17 + 16))(v17, 1, *(_QWORD *)(a1 + 40), 0);

}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_1058(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v5 = WeakRetained;
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v6 + 16))(v6, 0, *(_QWORD *)(a1 + 32), v3);
  }
  else if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_homeWithUUID:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "sharedHomeUpdateHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "pause");

    v19 = v8;
    objc_msgSend(v8, "backingStore");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultIDSOptions](HMDBackingStoreTransactionOptions, "defaultIDSOptions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transaction:options:", CFSTR("kTransactionUpdate"), v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v13 = *(id *)(a1 + 48);
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v21;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v21 != v16)
            objc_enumerationMutation(v13);
          v18 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v17);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            objc_msgSend(v12, "add:withMessage:", v18, 0);
          ++v17;
        }
        while (v15 != v17);
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v15);
    }

    objc_msgSend(v12, "run:", *(_QWORD *)(a1 + 64));
  }

}

void __85__HMDHomeManager_processTransactionsFromHomeDataSync_accessories_version_completion___block_invoke_1059(uint64_t a1, void *a2)
{
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (v6)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v4 + 16))(v4, 0, *(_QWORD *)(a1 + 32), v6);
  }
  else if (WeakRetained)
  {
    if (objc_msgSend(*(id *)(a1 + 40), "count"))
      v5 = *(_QWORD *)(a1 + 64);
    else
      v5 = *(_QWORD *)(a1 + 56);
    (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, 0);
  }

}

void __50__HMDHomeManager__processSharedHomeModel_message___block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  void *v26;
  void *v27;
  void (**v28)(_QWORD, _QWORD, _QWORD);
  uint64_t v29;
  void *v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  char v35;
  const __CFString *v36;
  _QWORD v37[2];

  v37[1] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v10 = WeakRetained;
  if (!v8 && WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_homeWithUUID:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v13 = v7;
      objc_msgSend(*(id *)(a1 + 40), "name");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("kTransactionUpdate"));

      if ((v15 & 1) == 0)
      {
        objc_msgSend(*(id *)(a1 + 40), "destination");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v17 = v16;
        else
          v17 = 0;
        v18 = v17;

        objc_msgSend(v18, "device");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v19, "version");
        v20 = objc_claimAutoreleasedReturnValue();

        v13 = (id)v20;
      }
      objc_msgSend(v12, "sharedHomeUpdateHandler");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_2;
      v31[3] = &unk_1E89BD9B0;
      objc_copyWeak(&v34, (id *)(a1 + 56));
      v32 = *(id *)(a1 + 40);
      v35 = a2;
      v22 = v12;
      v33 = v22;
      objc_msgSend(v21, "receivedHomeDataFromSourceVersion:forceUpdateVersion:completion:", v13, a2, v31);

      objc_msgSend(v22, "presenceFeeder");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "homeDataProcessed");

      objc_destroyWeak(&v34);
    }

    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    objc_msgSend(*(id *)(a1 + 40), "responseHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    if (v26)
    {
      v36 = CFSTR("kDataSyncResponseAckKey");
      v37[0] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, &v36, 1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "responseHandler");
      v28 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, _QWORD, void *))v28)[2](v28, 0, v27);

    }
    goto LABEL_16;
  }
  objc_msgSend(*(id *)(a1 + 40), "responseHandler");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    objc_msgSend(*(id *)(a1 + 40), "responseHandler");
    v25 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, _QWORD))v25)[2](v25, v8, 0);

  }
LABEL_16:
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v30 = *(void **)(v29 + 40);
  *(_QWORD *)(v29 + 40) = 0;

}

void __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_2(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "name");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v5, "isEqualToString:", CFSTR("kTransactionUpdate")) & 1) != 0)
    {

    }
    else
    {
      v6 = *(unsigned __int8 *)(a1 + 56);

      if (v6 || a2)
      {
        objc_msgSend(*(id *)(a1 + 40), "sharedHomeModel");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(WeakRetained, "backingStore");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "transaction:options:", CFSTR("kTransactionIDSUpdate"), v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v10, "add:withMessage:", v7, 0);
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 3221225472;
        v12[2] = __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_3;
        v12[3] = &unk_1E89C0DA8;
        v13 = *(id *)(a1 + 40);
        v14 = *(id *)(a1 + 32);
        v15 = WeakRetained;
        objc_msgSend(v10, "save:", v12);

      }
    }
    objc_msgSend(*(id *)(a1 + 40), "sharedHomeUpdateHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "resume");

  }
}

void __50__HMDHomeManager__processSharedHomeModel_message___block_invoke_3(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  HMDHomeSaveRequest *v5;
  id v6;
  void *v7;
  HMDHomeSaveRequest *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v9 = CFSTR("kHomeUUID");
  objc_msgSend(a1[4], "uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = [HMDHomeSaveRequest alloc];
  v6 = a1[4];
  objc_msgSend(a1[5], "name");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[HMDHomeSaveRequest initWithHome:reason:information:postSyncNotification:objectChange:](v5, "initWithHome:reason:information:postSyncNotification:objectChange:", v6, v7, v4, 1, 1);

  objc_msgSend(a1[6], "saveWithRequest:", v8);
}

void __55__HMDHomeManager_processSharedHomeModelUpdate_message___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_processSharedHomeModel:message:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t __81__HMDHomeManager_fragmentationStream_didReceiveData_transactionIdentifier_error___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fragmentationStream:didReceiveData:transactionIdentifier:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 64), *(_QWORD *)(a1 + 56));
}

uint64_t __56__HMDHomeManager_fragmentationStream_didCloseWithError___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fragmentationStream:didCloseWithError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void __40__HMDHomeManager__removeAllUsersOfHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id WeakRetained;
  NSObject *v12;
  id v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "home");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v19 = v9;
    v20 = 2112;
    v21 = v10;
    v22 = 2112;
    v23 = v5;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Reset home for user %@ with error: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v7);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && objc_msgSend(*(id *)(a1 + 32), "isRemoteGateway"))
  {
    objc_msgSend(WeakRetained, "workQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __40__HMDHomeManager__removeAllUsersOfHome___block_invoke_1040;
    v15[3] = &unk_1E89C2328;
    v13 = WeakRetained;
    v14 = *(_QWORD *)(a1 + 32);
    v16 = v13;
    v17 = v14;
    dispatch_async(v12, v15);

  }
}

void __40__HMDHomeManager__removeAllUsersOfHome___block_invoke_1040(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "userID");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "home");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_removeFromAssociatedPeers:home:", v4, v3);

}

void __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v7)
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = WeakRetained;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138543618;
        v33 = v14;
        v34 = 2112;
        v35 = v15;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Failed to elect device to send request to remove user from home: %@", buf, 0x16u);

      }
LABEL_14:

      objc_autoreleasePoolPop(v11);
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      goto LABEL_15;
    }
    if ((objc_msgSend(*(id *)(a1 + 32), "containsRemovedUser:", *(_QWORD *)(a1 + 40)) & 1) == 0)
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = WeakRetained;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v33 = v24;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Skipping send remove user message due to the user being removed from removed user list", buf, 0xCu);

      }
      goto LABEL_14;
    }
    objc_msgSend(WeakRetained, "messageDispatcher");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = *(_QWORD *)(a1 + 48);
    objc_msgSend(WeakRetained, "uuid");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "userID");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "destination");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "workQueue");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke_1036;
    v28[3] = &unk_1E89BCDD0;
    objc_copyWeak(&v31, (id *)(a1 + 64));
    v29 = *(id *)(a1 + 40);
    v30 = *(id *)(a1 + 56);
    objc_msgSend(v27, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v25, v26, v21, v22, v23, v28);

    objc_destroyWeak(&v31);
  }
  else
  {
    v16 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v33 = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Lost reference to home manager while electing a device to remove user", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v16);
    v19 = *(_QWORD *)(a1 + 56);
    if (v19)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmfErrorWithCode:", 8);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, id))(v19 + 16))(v19, v20, v9);

    }
  }
LABEL_15:

}

void __90__HMDHomeManager__sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke_1036(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v5)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543618;
        v22 = v12;
        v23 = 2112;
        v24 = v5;
        v13 = "%{public}@User removed message responded with error: %@";
        v14 = v11;
        v15 = OS_LOG_TYPE_ERROR;
LABEL_10:
        _os_log_impl(&dword_1CD062000, v14, v15, v13, (uint8_t *)&v21, 0x16u);

      }
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = *(void **)(a1 + 32);
      v21 = 138543618;
      v22 = v12;
      v23 = 2112;
      v24 = v19;
      v13 = "%{public}@Successfully removed user: %@";
      v14 = v11;
      v15 = OS_LOG_TYPE_INFO;
      goto LABEL_10;
    }

    objc_autoreleasePoolPop(v8);
    (*(void (**)(_QWORD, id, id, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v5, v6, v20);
    goto LABEL_12;
  }
  v16 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 138543362;
    v22 = v18;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_ERROR, "%{public}@Lost reference to home manager while sending remove user message", (uint8_t *)&v21, 0xCu);

  }
  objc_autoreleasePoolPop(v16);
LABEL_12:

}

void __116__HMDHomeManager__trackIncomingInvitationFromAccount_mergeID_idsInvitationIdentifier_payload_invitationState_error___block_invoke(id *a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (WeakRetained)
  {
    v3 = objc_loadWeakRetained(a1 + 6);
    +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "identifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "UUIDString");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "removeBulletinWithRecordID:", v6);

    objc_msgSend(WeakRetained, "_postIncomingInvitationStateChangedNotification:newInvitationState:", v3, objc_msgSend(v3, "invitationState"));
    objc_msgSend(a1[4], "_removeIncomingInvitation:", v3);
    v7 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(WeakRetained, "saveWithReason:information:postSyncNotification:", CFSTR("kAccessHomeInviteRequestKey"), 0, 0));
    v8 = a1[4];
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "incomingInvitations");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@New incomingInvitations after expiration: %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v7);

  }
}

void __46__HMDHomeManager__handleDismissDialogRequest___block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 138543618;
    v7 = v4;
    v8 = 2112;
    v9 = v5;
    _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Dismissed dialog with context %@", (uint8_t *)&v6, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
}

void __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke(id *a1, char a2)
{
  NSObject *v4;
  id v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;

  objc_msgSend(a1[4], "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke_2;
  block[3] = &unk_1E89BD8E8;
  v5 = a1[5];
  v14 = a2;
  v6 = a1[4];
  v8 = v5;
  v9 = v6;
  v13 = a1[9];
  v10 = a1[6];
  v11 = a1[7];
  v12 = a1[8];
  dispatch_async(v4, block);

}

void __116__HMDHomeManager__handleAccessHomeInviteFromAccount_mergeID_idsInvitationIdentifier_payload_messageResponseHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  int v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "hmf_stringForKey:", CFSTR("kHomeName"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(a1 + 80) || (objc_msgSend(*(id *)(a1 + 40), "shouldAcceptInvitationWithHomeName:", v2) & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v30 = 0;
    objc_msgSend(v6, "_trackIncomingInvitationFromAccount:mergeID:idsInvitationIdentifier:payload:invitationState:error:", v3, v4, v5, v7, 2, &v30);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v30;
    v10 = objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", CFSTR("HMDHomeSuppressInviteNotificationKey"));
    if (v9 && (v11 = *(_QWORD *)(a1 + 72)) != 0)
    {
      (*(void (**)(_QWORD, id, _QWORD))(v11 + 16))(*(_QWORD *)(a1 + 72), v9, 0);
    }
    else if (v8)
    {
      if (v10)
      {
        v12 = (void *)MEMORY[0x1D17BA0A0]();
        v13 = *(id *)(a1 + 40);
        HMFGetOSLogHandle();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v32 = v15;
          _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Suppressing home invite notification", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v12);
        +[HMDHomeInviteLogEvent updateWithState:isFMFDevice:](HMDHomeInviteLogEvent, "updateWithState:isFMFDevice:", 3, isThisDeviceDesignatedFMFDevice());
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (v16)
        {
          objc_msgSend(*(id *)(a1 + 40), "logEventSubmitter");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "submitLogEvent:", v16);

        }
      }
      else
      {
        +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v24;
        if (*(_BYTE *)(a1 + 80))
        {
          v25 = (id)objc_msgSend(v24, "insertBulletinForIncomingInvitation:", v8);
        }
        else
        {
          v26 = (void *)MEMORY[0x1D17BA0A0]();
          v27 = *(id *)(a1 + 40);
          HMFGetOSLogHandle();
          v28 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v32 = v29;
            _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@Suppressing home invite notification because inviter is not a known person.", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v26);
        }
        objc_msgSend(v16, "refreshHomeBadgeNumber");
      }

    }
    goto LABEL_25;
  }
  v18 = (void *)MEMORY[0x1D17BA0A0]();
  v19 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v32 = v21;
    v33 = 2112;
    v34 = v2;
    _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_ERROR, "%{public}@Cannot accept invitation payload due to invalid home name: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v18);
  +[HMDHomeInviteLogEvent updateWithState:isFMFDevice:](HMDHomeInviteLogEvent, "updateWithState:isFMFDevice:", 2, isThisDeviceDesignatedFMFDevice());
  v9 = (id)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 40), "logEventSubmitter");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "submitLogEvent:", v9);

  }
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v23 + 16))(v23, v8, 0);
LABEL_25:

  }
}

uint64_t __58__HMDHomeManager_processAnyPendingRequestsForRemoteAccess__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processAnyPendingRequestsForRemoteAccess:", 0);
}

void __44__HMDHomeManager__startAccessoryFinderTimer__block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_startAccessoryFinderTimerExpired");
    WeakRetained = v2;
  }

}

void __46__HMDHomeManager_networkMonitorIsUnreachable___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  int v6;

  objc_msgSend(*(id *)(a1 + 32), "reachabilityMonitor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqual:", *(_QWORD *)(a1 + 40));

  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_msgSend(v4, "_reachabilityMonitorChanged:", 0);
  }
  else
  {
    objc_msgSend(v4, "cloudReachabilityMonitor");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 40));

    if (v6)
      objc_msgSend(*(id *)(a1 + 32), "_cloudReachabilityMonitorChanged:", 0);
  }
}

void __44__HMDHomeManager_networkMonitorIsReachable___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  int v6;

  objc_msgSend(*(id *)(a1 + 32), "reachabilityMonitor");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqual:", *(_QWORD *)(a1 + 40));

  v4 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_msgSend(v4, "_reachabilityMonitorChanged:", 1);
  }
  else
  {
    objc_msgSend(v4, "cloudReachabilityMonitor");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 40));

    if (v6)
      objc_msgSend(*(id *)(a1 + 32), "_cloudReachabilityMonitorChanged:", 1);
  }
}

void __51__HMDHomeManager__cloudReachabilityMonitorChanged___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = WeakRetained;
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Re-querying account status since we are reachable", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(v3, "_updateCloudDataSyncWithAccountState:", objc_msgSend(v3, "accountActive"));

}

void __51__HMDHomeManager__cloudReachabilityMonitorChanged___block_invoke_1024(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = WeakRetained;
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Cloud network connection is available and we have pending transactions, pushing to the cloud", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(v3, "_determineLocalChangesAndSchedulePush");

}

void __51__HMDHomeManager_userManagementOperationDidFinish___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "accessory");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "home");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "userManagementOperationDidFinish:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "backingStore");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "transaction:options:", CFSTR("kUserManagementOperationRemovedKey"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "modelObjectWithChangeType:", 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "add:", v6);

  objc_msgSend(v5, "run");
}

void __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  int v17;
  id v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  HMDBackingStoreCacheFetchModelObjects *v36;
  void *v37;
  void *v38;
  HMDBackingStoreCacheFetchModelObjects *v39;
  NSObject *v40;
  id v41;
  __int128 v42;
  id obj;
  _QWORD block[4];
  id v45;
  id v46;
  _QWORD aBlock[4];
  id v48;
  id v49;
  id v50;
  id v51;
  NSObject *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  void *v62;
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[4], "backingStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "transaction:options:", CFSTR("kUserManagementOperationRemovedKey"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v55 = 0u;
  v56 = 0u;
  v54 = 0u;
  v53 = 0u;
  +[HMDUserManagementOperationManager sharedManager](HMDUserManagementOperationManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "operations");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  obj = v6;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
  if (v7)
  {
    v9 = v7;
    v10 = *(_QWORD *)v54;
    *(_QWORD *)&v8 = 138543874;
    v42 = v8;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        v12 = v4;
        if (*(_QWORD *)v54 != v10)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
        v14 = a1[5];
        objc_msgSend(v13, "accessory", v42);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "identifier");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v14, "isEqualToString:", v16);

        v18 = a1[6];
        objc_msgSend(v13, "user");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "pairingIdentity");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v18, "isEqual:", v20);

        v4 = v12;
        if (v17)
        {
          v22 = a1[6] ? v21 : 1;
          if (v22 == 1)
          {
            v23 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v24 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1[4], "shortDescription");
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v42;
              v58 = v25;
              v59 = 2112;
              v60 = v26;
              v61 = 2112;
              v62 = v13;
              _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@[%@] Dropping prior operation: %@", buf, 0x20u);

              v4 = v12;
            }

            objc_autoreleasePoolPop(v23);
            objc_msgSend(v13, "modelObjectWithChangeType:", 3);
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "add:", v27);

          }
        }
      }
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
    }
    while (v9);
  }

  v28 = dispatch_group_create();
  objc_msgSend(a1[4], "unprocessedOperationModelIdentifiers");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "count");

  v31 = MEMORY[0x1E0C809B0];
  if (v30)
  {
    dispatch_group_enter(v28);
    aBlock[0] = v31;
    aBlock[1] = 3221225472;
    aBlock[2] = __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke_1014;
    aBlock[3] = &unk_1E89BD8C0;
    v48 = a1[5];
    v32 = a1[6];
    v33 = a1[4];
    v49 = v32;
    v50 = v33;
    v51 = v4;
    v52 = v28;
    v34 = _Block_copy(aBlock);
    objc_msgSend(a1[4], "backingStore");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = [HMDBackingStoreCacheFetchModelObjects alloc];
    objc_msgSend(a1[4], "unprocessedOperationModelIdentifiers");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "allObjects");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = -[HMDBackingStoreCacheFetchModelObjects initWithUUIDs:fetchResult:](v36, "initWithUUIDs:fetchResult:", v38, v34);
    objc_msgSend(v35, "submit:", v39);

  }
  objc_msgSend(a1[4], "workQueue");
  v40 = objc_claimAutoreleasedReturnValue();
  block[0] = v31;
  block[1] = 3221225472;
  block[2] = __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke_2;
  block[3] = &unk_1E89C1D68;
  v45 = v4;
  v46 = a1[7];
  v41 = v4;
  dispatch_group_notify(v28, v40, block);

}

uint64_t __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke_1014(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  void *v18;
  void *v19;
  id obj;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v23 != v5)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * i), "object");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v8 = v7;
        else
          v8 = 0;
        v9 = v8;

        if (v9)
        {
          v10 = *(void **)(a1 + 32);
          objc_msgSend(v9, "accessoryPairingIdentity");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "identifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v10, "isEqualToString:", v12);

          v14 = *(void **)(a1 + 40);
          objc_msgSend(v9, "userPairingIdentity");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v14, "isEqual:", v15);

          if (v13)
          {
            if (*(_QWORD *)(a1 + 40))
              v17 = v16;
            else
              v17 = 1;
            if (v17 == 1)
            {
              objc_msgSend(*(id *)(a1 + 48), "unprocessedOperationModelIdentifiers");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v9, "uuid");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "removeObject:", v19);

              objc_msgSend(v9, "setObjectChangeType:", 3);
              objc_msgSend(*(id *)(a1 + 56), "add:", v9);
            }
          }
        }

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v4);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));

  return 0;
}

uint64_t __64__HMDHomeManager_cleanupOperationsForAccessory_user_completion___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "run:", *(_QWORD *)(a1 + 40));
}

uint64_t __47__HMDHomeManager_reprocessUserManagementModels__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  id v26;
  id v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t v33[128];
  uint8_t buf[4];
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v26 = v6;
    objc_msgSend(WeakRetained, "backingStore");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultLocalOptions](HMDBackingStoreTransactionOptions, "defaultLocalOptions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "transaction:options:", CFSTR("kUserManagementOperationAddedKey"), v10);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = v5;
    v11 = v5;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v30 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
          objc_msgSend(v8, "unprocessedOperationModelIdentifiers");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "object");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "uuid");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v17, "containsObject:", v19);

          if (v20)
          {
            objc_msgSend(v16, "object");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "add:", v21);

          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v13);
    }

    objc_msgSend(v28, "run");
    v6 = v26;
    v5 = v27;
  }
  else
  {
    v22 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v35 = v24;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Missing self: -[HMDHomeManager reprocessUserManagementModels]", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v22);
  }

  return 0;
}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v10;
  _QWORD block[6];
  _QWORD v12[4];
  NSObject *v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[3];
  char v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "userInfo");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "hmf_arrayForKey:", CFSTR("ChangedManufacturer"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = dispatch_group_create();
    v19[0] = 0;
    v19[1] = v19;
    v19[2] = 0x2020000000;
    v20 = 0;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(*(id *)(a1 + 40), "homes");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v16;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v16 != v5)
            objc_enumerationMutation(v3);
          v7 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v6);
          dispatch_group_enter(v2);
          v12[0] = MEMORY[0x1E0C809B0];
          v12[1] = 3221225472;
          v12[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_2;
          v12[3] = &unk_1E89BD870;
          v14 = v19;
          v13 = v2;
          objc_msgSend(v7, "notifyClientOfVendorInfoUpdatedForManufacturers:withCompletion:", v1, v12);

          ++v6;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
      }
      while (v4);
    }

    objc_msgSend(*(id *)(a1 + 40), "workQueue");
    v8 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_3;
    block[3] = &unk_1E89C0800;
    block[4] = *(_QWORD *)(a1 + 40);
    block[5] = v19;
    dispatch_group_notify(v2, v8, block);

    _Block_object_dispose(v19, 8);
  }

}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_2(uint64_t a1, int a2)
{
  if (a2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __42__HMDHomeManager_handleVendorInfoUpdated___block_invoke_3(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v1 = *(void **)(a1 + 32);
    objc_msgSend(v1, "uuid");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "_updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("VendorInfoUpdated"), v2, 0);

  }
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "refreshHomeBadgeNumber");

}

BOOL __50__HMDHomeManager__handleElectDeviceForIDSSession___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(*(id *)(a1 + 32), "userForHome:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

void __53__HMDHomeManager__removeConfigurationVersionForHome___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "currentHomeConfigurations");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

}

void __51__HMDHomeManager__updateHome_configurationVersion___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 48));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "currentHomeConfigurations");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, *(_QWORD *)(a1 + 40));

}

void __55__HMDHomeManager_processCloudZoneModelRemoved_message___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v8;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Update zone information in home manager with error %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v6, "_saveWithReason:postSyncNotification:", CFSTR("kHomeManagerUpdatedKey"), 0);
  }

}

void __51__HMDHomeManager_processCloudZoneModelAdd_message___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543618;
      v10 = v8;
      v11 = 2112;
      v12 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Update zone information in home manager with error %@", (uint8_t *)&v9, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v6, "_saveWithReason:postSyncNotification:", CFSTR("kHomeManagerUpdatedKey"), 0);
  }

}

void __43__HMDHomeManager__handleRequestRemoveHome___block_invoke(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  void (**v11)(_QWORD, _QWORD, _QWORD);
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  const __CFString *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD);
  void *v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  const __CFString *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    v9 = CFSTR("delete home");
    if (a2)
      v9 = CFSTR("cancel");
    v21 = 138543618;
    v22 = v7;
    v23 = 2112;
    v24 = v9;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@User selected %@", (uint8_t *)&v21, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  if ((a2 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 56), "responseHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
      return;
    objc_msgSend(*(id *)(a1 + 56), "responseHandler");
    v11 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD))v11)[2](v11, v12, 0);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_homeWithUUID:", *(_QWORD *)(a1 + 40));
    v13 = objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v11 = (void (**)(_QWORD, _QWORD, _QWORD))v13;
      objc_msgSend(*(id *)(a1 + 32), "_handleRemoveHomeOperation:message:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v15 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = *(const __CFString **)(a1 + 40);
        v21 = 138543618;
        v22 = (uint64_t)v17;
        v23 = 2112;
        v24 = v18;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Home Removal failed because no home found for %@", (uint8_t *)&v21, 0x16u);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(*(id *)(a1 + 56), "responseHandler");
      v11 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

      if (v11)
      {
        objc_msgSend(*(id *)(a1 + 56), "responseHandler");
        v19 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 2);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *, _QWORD))v19)[2](v19, v20, 0);

        v11 = 0;
      }
    }
  }

}

void __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v2 = (id *)(a1 + 88);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "deletedBackingStoreObject");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "backingStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "transaction:options:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "add:withMessage:", v4, *(_QWORD *)(a1 + 56));
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke_2;
    v7[3] = &unk_1E89BD7F8;
    objc_copyWeak(&v12, v2);
    v8 = *(id *)(a1 + 48);
    v9 = *(id *)(a1 + 64);
    v10 = *(id *)(a1 + 72);
    v11 = *(id *)(a1 + 80);
    objc_msgSend(v6, "run:", v7);

    objc_destroyWeak(&v12);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 80), "resume");
  }

}

void __57__HMDHomeManager_scheduleRemovalForHome_message_options___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v5 = WeakRetained;
  if (!v3 && WeakRetained && objc_msgSend(*(id *)(a1 + 32), "source") != 1)
  {
    objc_msgSend(v5, "cloudDataSyncManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "UUIDString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removeHomeZoneName:", v7);

  }
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = v5;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 48);
    v13 = 138543874;
    v14 = v11;
    v15 = 2112;
    v16 = v12;
    v17 = 2112;
    v18 = v3;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Resume sync manager after finishing removing home %@ - error %@", (uint8_t *)&v13, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
  objc_msgSend(*(id *)(a1 + 56), "resume");

}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  char v46;
  void *v47;
  void *v48;
  id v49;
  NSObject *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  _BOOL8 v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  NSObject *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  NSObject *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t);
  void *v78;
  uint64_t v79;
  id v80;
  const __CFString *v81;
  uint64_t v82;
  uint8_t buf[4];
  void *v84;
  __int16 v85;
  void *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v84 = v5;
    v85 = 2112;
    v86 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Removing home %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  +[HMDBulletinBoard sharedBulletinBoard](HMDBulletinBoard, "sharedBulletinBoard");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeBulletinsForHome:", *(_QWORD *)(a1 + 40));
  if (*(_BYTE *)(a1 + 72))
    objc_msgSend(*(id *)(a1 + 32), "_removeAllUsersOfHome:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 40), "unconfigure");
  objc_msgSend(*(id *)(a1 + 32), "removeHome:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "pendingHomesBeingRemoved");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "removeObject:", *(_QWORD *)(a1 + 48));

  objc_msgSend(*(id *)(a1 + 40), "stopThreadNetwork:", 0);
  if (objc_msgSend(*(id *)(a1 + 40), "isOwnerUser"))
  {
    objc_msgSend(*(id *)(a1 + 32), "homes");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "na_any:", &__block_literal_global_945);

    if ((v10 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "workQueue");
      v11 = objc_claimAutoreleasedReturnValue();
      v75 = MEMORY[0x1E0C809B0];
      v76 = 3221225472;
      v77 = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_2;
      v78 = &unk_1E89C2328;
      v12 = *(void **)(a1 + 40);
      v79 = *(_QWORD *)(a1 + 32);
      v80 = v12;
      dispatch_async(v11, &v75);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "homes", v75, v76, v77, v78, v79);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "count");

  if (!v14)
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v84 = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@setting home configuration to NO", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(*(id *)(a1 + 32), "updateHomeKitInUsePreferences");
  }
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "primaryHomeUUID");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v19, "isEqual:", v20);

  if (v21)
  {
    objc_msgSend(*(id *)(a1 + 32), "homes");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "firstObject");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = *(void **)(a1 + 32);
    objc_msgSend(v23, "uuid");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "_changePrimaryHome:", v25);

  }
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "currentHomeUUID");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v26, "isEqual:", v27);

  if (v28)
  {
    objc_msgSend(*(id *)(a1 + 32), "setLastCurrentHomeUUID:", 0);
    objc_msgSend(*(id *)(a1 + 32), "_updateCurrentHomeIfNecessary");
  }
  objc_msgSend(*(id *)(a1 + 32), "cloudDataSyncStateFilter");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "homes");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "updateTotalHomes:", objc_msgSend(v30, "count"));

  objc_msgSend(*(id *)(a1 + 32), "nameValidator");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = (id)objc_msgSend(v31, "removeNamespace:", v32);

  v34 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "_removeConfigurationVersionForHome:", v35);

  v36 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "name");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "uuid");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "removeName:namespace:", v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  if (v39)
  {
    v40 = (void *)MEMORY[0x1D17BA0A0]();
    v41 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "name");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v84 = v43;
      v85 = 2112;
      v86 = v44;
      _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to remove home name '%@' from homeManager namespace", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v40);
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "isOwnerUser") & 1) == 0 && !isWatch())
  {
    objc_msgSend(*(id *)(a1 + 32), "uuidsOfRemovedHomes");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = objc_msgSend(v45, "containsObject:", *(_QWORD *)(a1 + 48));

    if ((v46 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "uuidsOfRemovedHomes");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "addObject:", *(_QWORD *)(a1 + 48));

      v48 = (void *)MEMORY[0x1D17BA0A0]();
      v49 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v50 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "UUIDString");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v84 = v51;
        v85 = 2112;
        v86 = v52;
        _os_log_impl(&dword_1CD062000, v50, OS_LOG_TYPE_INFO, "%{public}@Adding home with UUID %@ to the uuids of guest homes removed locally", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v48);
    }
    objc_msgSend(*(id *)(a1 + 32), "_trackRemovedHomeUserMergeId:", *(_QWORD *)(a1 + 56));
  }
  if (*(_BYTE *)(a1 + 73))
  {
    v53 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 64), "name");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "_saveWithReason:postSyncNotification:", v54, 1);

  }
  objc_msgSend(*(id *)(a1 + 64), "transactionResult");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v56 = objc_msgSend(v55, "source") == 1;
  v57 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "zoneID");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "_removeCloudZone:updateHomeManager:", v58, v56);

  objc_msgSend(*(id *)(a1 + 32), "compositeSettingsControllerManager");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "removeHomeZone:", v60);

  v61 = (void *)MEMORY[0x1D17BA0A0]();
  v62 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v63 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "name");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v84 = v64;
    v85 = 2112;
    v86 = v65;
    _os_log_impl(&dword_1CD062000, v63, OS_LOG_TYPE_INFO, "%{public}@Removed home: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v61);
  objc_msgSend(*(id *)(a1 + 64), "respondWithSuccess");
  v66 = *(_QWORD *)(a1 + 40);
  v81 = CFSTR("HMDHomeNotificationKey");
  v82 = v66;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v82, &v81, 1);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  logAndPostNotification(CFSTR("HMDHomeRemovedNotification"), *(void **)(a1 + 32), v67);
  objc_msgSend(*(id *)(a1 + 40), "handleHomeWasRemoved");
  objc_msgSend(*(id *)(a1 + 32), "lastEventStoreController");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v68, "didRemoveHome:", v69);

  v70 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(*(id *)(a1 + 32), "updateCurrentUserEligibleForOwnerToAutoMigration"));
  v71 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v72 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    v74 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v84 = v73;
    v85 = 2112;
    v86 = v74;
    _os_log_impl(&dword_1CD062000, v72, OS_LOG_TYPE_INFO, "%{public}@The home should be gone : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v70);

}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_2(uint64_t a1)
{
  void *v2;
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_3;
  aBlock[3] = &unk_1E89C2350;
  aBlock[4] = *(_QWORD *)(a1 + 32);
  v2 = _Block_copy(aBlock);
  objc_msgSend(*(id *)(a1 + 40), "removeThreadNetworkPreferredNetworkWithCompletion:", v2);

}

void __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138543362;
      v9 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to delete preferred Thread network credentials - continuing anyways", (uint8_t *)&v8, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
  }

}

uint64_t __87__HMDHomeManager__removeHome_withMessage_saveToStore_notifyUsers_shouldRemovePairings___block_invoke_944(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isOwnerUser");
}

void __40__HMDHomeManager__handleRequestAddHome___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 40);
      v13 = 138543874;
      v14 = v7;
      v15 = 2112;
      v16 = v8;
      v17 = 2112;
      v18 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Removing home:%@ from namespace on transaction error %@.", (uint8_t *)&v13, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    v10 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    objc_msgSend(v10, "uuid");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (id)objc_msgSend(v10, "removeName:namespace:", v9, v11);

  }
}

uint64_t __43__HMDHomeManager___nominateCurrentHomeUUID__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v4 = a3;
  objc_msgSend(a2, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "UUIDString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "UUIDString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "compare:", v8);

  return v9;
}

BOOL __90__HMDHomeManager__handleFetchCurrentUserPairingIdentityForHomeContainingAccessoryRequest___block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a2, "accessoryWithSPIClientIdentifier:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

void __56__HMDHomeManager___handleRequestFetchHomeConfiguration___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  int v7;
  void *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(*(id *)(a1 + 40), "BOOLValue");
    v7 = 138543618;
    v8 = v5;
    v9 = 1024;
    v10 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@hh2ManualMigrationAvailableOverride detected. Setting to %d", (uint8_t *)&v7, 0x12u);

  }
  objc_autoreleasePoolPop(v2);
}

BOOL __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "currentUser");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v4)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543618;
      v11 = v8;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@There is no current user for : %@", (uint8_t *)&v10, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
  }

  return v4 != 0;
}

uint64_t __44__HMDHomeManager_filterHomes_isSPIEntitled___block_invoke_914(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isAccessToHomeAllowed");
}

void __45__HMDHomeManager_homesToSendForNonSPIClients__block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (objc_msgSend(v3, "isAccessToHomeAllowed"))
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void __65__HMDHomeManager__retryCloudOperationWithName_completionHandler___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_stopCloudOperationRetryTimer");
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __62__HMDHomeManager__startTimerToResetCloudOperationRetryCounter__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  _QWORD v8[4];
  id v9;
  uint8_t buf[4];
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "setBackOffOperationInProgress:", 0);
    v3 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v2, "_resetCloudOperationRetryCounters"));
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v11 = v5;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Resetting cloud operation re-try counter", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(v2, "cloudReachabilityMonitor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isReachable");

    if (v7)
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __62__HMDHomeManager__startTimerToResetCloudOperationRetryCounter__block_invoke_913;
      v8[3] = &unk_1E89C2730;
      v9 = v2;
      objc_msgSend(v9, "_retryCloudOperationWithName:completionHandler:", CFSTR("push data to cloud"), v8);

    }
  }

}

uint64_t __62__HMDHomeManager__startTimerToResetCloudOperationRetryCounter__block_invoke_913(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v4;
    _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_INFO, "%{public}@Network connection is available schedule push if there are pending transactions", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "_determineLocalChangesAndSchedulePush");
}

void __60__HMDHomeManager__notifyMetricsManagerOfConfigurationChange__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)MEMORY[0x1D17BA0A0]();
  v4 = WeakRetained;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "shortDescription");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v6;
    v18 = 2114;
    v19 = v8;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Starting generation of home configuration log event for analytics", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend(v4, "metricsManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "homeKitConfigurationChanged");

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = v4;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "identifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "shortDescription");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 138543618;
    v17 = v13;
    v18 = 2114;
    v19 = v15;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@[%{public}@] Finished generation of home configuration log event for analytics", (uint8_t *)&v16, 0x16u);

  }
  objc_autoreleasePoolPop(v10);

}

void __50__HMDHomeManager__resumeXPCWithCompletionHanlder___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained && *(_QWORD *)(a1 + 32))
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __50__HMDHomeManager__resumeXPCWithCompletionHanlder___block_invoke_2;
    v7[3] = &unk_1E89C1D68;
    v9 = *(id *)(a1 + 32);
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t __50__HMDHomeManager__resumeXPCWithCompletionHanlder___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __51__HMDHomeManager__suspendXPCWithCompletionHanlder___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained && *(_QWORD *)(a1 + 32))
  {
    objc_msgSend(WeakRetained, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __51__HMDHomeManager__suspendXPCWithCompletionHanlder___block_invoke_2;
    v7[3] = &unk_1E89C1D68;
    v9 = *(id *)(a1 + 32);
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t __51__HMDHomeManager__suspendXPCWithCompletionHanlder___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __66__HMDHomeManager__updateCloudDataSyncWithAccountState_completion___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id WeakRetained;
  void *v8;
  id v9;

  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_handleAccountStatusDeterminedWithError:homeDataRecordExists:metadataRecordExists:completion:", v9, a2, a3, *(_QWORD *)(a1 + 32));

}

void __55__HMDHomeManager__updateCloudDataSyncWithAccountState___block_invoke(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void (**v5)(void);

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_updateCloudDataSyncWithAccountState:completion:", *(unsigned __int8 *)(a1 + 40), v5);
  }
  else if (v5)
  {
    v5[2]();
  }

}

void __33__HMDHomeManager_forceCloudFetch__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "homes", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v10;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v10 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
          objc_msgSend(v8, "setExpectedConfigurationVersion:", 0);
          objc_msgSend(v8, "setSharedHomeSourceVersion:", 0);
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v5);
    }

    objc_msgSend(WeakRetained, "_fetchHomeDataFromCloudWithCloudConflict:forceFetch:withDelay:accountCompletion:", 0, 1, 0, 0.0);
    objc_msgSend(WeakRetained, "_requestHomeDataSync");
  }

}

void __106__HMDHomeManager__runFetchHomeDataFromCloudWithCloudConflict_forceFetch_accountCompletion_syncCompletion___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id WeakRetained;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  HMDHomeSaveRequest *v44;
  NSObject *v45;
  id v46;
  __int128 v47;
  _QWORD block[4];
  id v49;
  id v50;
  __int128 v51;
  id v52;
  char v53;
  uint8_t buf[4];
  void *v55;
  __int16 v56;
  id v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v55 = v22;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Finished fetching legacy zone", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
    if (!WeakRetained)
      goto LABEL_27;
    v24 = WeakRetained;
    objc_msgSend(*(id *)(a1 + 40), "loadObjectChanges");
    v25 = dispatch_group_create();
    v26 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "metadataObjectID");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "changeWithObjectID:", v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    if (v28 && (objc_msgSend(v28, "isDeleted") & 1) == 0)
    {
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = v24;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v55 = v32;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@Metadata record was updated in the legacy zone, not processing", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v29);
    }
    v33 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = v24;
    HMFGetOSLogHandle();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v55 = v35;
      _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Ignoring cloud legacy records, data will not be merged", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v33);
    v36 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "homeDataV3ObjectID");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "changeWithObjectID:", v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    if (v38)
    {

    }
    else
    {
      v41 = *(void **)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 48), "homeDataObjectID");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "changeWithObjectID:", v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v43)
      {
LABEL_32:
        objc_msgSend(v11, "workQueue");
        v45 = objc_claimAutoreleasedReturnValue();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __106__HMDHomeManager__runFetchHomeDataFromCloudWithCloudConflict_forceFetch_accountCompletion_syncCompletion___block_invoke_714;
        block[3] = &unk_1E89BD5C8;
        objc_copyWeak(&v52, (id *)(a1 + 80));
        v49 = *(id *)(a1 + 40);
        v50 = *(id *)(a1 + 48);
        v53 = *(_BYTE *)(a1 + 88);
        v47 = *(_OWORD *)(a1 + 64);
        v46 = (id)v47;
        v51 = v47;
        dispatch_group_notify(v25, v45, block);

        objc_destroyWeak(&v52);
        goto LABEL_33;
      }
    }
    v44 = -[HMDHomeSaveRequest initWithReason:information:postSyncNotification:]([HMDHomeSaveRequest alloc], "initWithReason:information:postSyncNotification:", CFSTR("HMDHomeManagerLegacyZoneFetchSomething"), 0, 0);
    objc_msgSend(v11, "saveWithRequest:", v44);

    goto LABEL_32;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v55 = v9;
    v56 = 2112;
    v57 = v4;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch legacy zone: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  v10 = objc_loadWeakRetained((id *)(a1 + 80));
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v4, "domain");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0C947D8]))
    {
      objc_msgSend(v4, "userInfo");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v13)
        goto LABEL_13;
      objc_msgSend(v4, "userInfo");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "hmf_numberForKey:", *MEMORY[0x1E0C94808]);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12 && !*(_QWORD *)(a1 + 56))
      {
        v15 = (void *)MEMORY[0x1D17BA0A0]();
        v16 = v11;
        HMFGetOSLogHandle();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v55 = v18;
          v56 = 2112;
          v57 = v12;
          _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Rescheduling legacy fetch changes with delay %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v15);
        v19 = *(unsigned __int8 *)(a1 + 88);
        v20 = *(unsigned __int8 *)(a1 + 89);
        objc_msgSend(v12, "doubleValue");
        objc_msgSend(v16, "_fetchHomeDataFromCloudWithCloudConflict:forceFetch:withDelay:accountCompletion:", v19, v20, 0);
      }
    }

LABEL_13:
    objc_msgSend(*(id *)(a1 + 40), "setOsTransaction:", 0);
    v21 = *(_QWORD *)(a1 + 64);
    if (v21)
      (*(void (**)(uint64_t, id))(v21 + 16))(v21, v4);
    goto LABEL_33;
  }
LABEL_27:
  objc_msgSend(*(id *)(a1 + 40), "setOsTransaction:", 0);
  v39 = *(_QWORD *)(a1 + 64);
  if (v39)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled before it could run"), CFSTR("HMDCloudManager cancelled the operation"), 0);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v39 + 16))(v39, v40);

  }
  v11 = 0;
LABEL_33:

}

void __106__HMDHomeManager__runFetchHomeDataFromCloudWithCloudConflict_forceFetch_accountCompletion_syncCompletion___block_invoke_714(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v3 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "homeDataObjectID");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "changeWithObjectID:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = objc_msgSend(*(id *)(a1 + 40), "hasRecordsAvailable");
    if (v5)
      v7 = 1;
    else
      v7 = v6;
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = WeakRetained;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v5 != 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v7);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543874;
      v22 = v11;
      v23 = 2112;
      v24 = v12;
      v25 = 2112;
      v26 = v13;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Completed processing legacy zone recordWasFetched: %@, dataIsAvailable: %@", (uint8_t *)&v21, 0x20u);

    }
    objc_autoreleasePoolPop(v8);
    objc_msgSend(*(id *)(a1 + 32), "updateCloudCache");
    objc_msgSend(v9, "cloudDataSyncManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "updateServerTokenStatusOnCloudFilter");

    if (objc_msgSend(*(id *)(a1 + 32), "iCloudSwitchStateEnabled")
      && (!(_DWORD)v7 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)))
    {
      v15 = (void *)MEMORY[0x1D17BA0A0]();
      v16 = v9;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = 138543362;
        v22 = v18;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Updating data sync state on processing legacy zone.", (uint8_t *)&v21, 0xCu);

      }
      objc_autoreleasePoolPop(v15);
      objc_msgSend(v16, "cloudDataSyncManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "updateCloudDataSyncFilterState:", 1);

    }
    objc_msgSend(v9, "_postMergeWatchPush");
    if (*(_BYTE *)(a1 + 72))
      objc_msgSend(v9, "_pushChangesToCloud:withDelay:", 0, 0.0);
    objc_msgSend(*(id *)(a1 + 32), "setOsTransaction:", 0);
    v20 = *(_QWORD *)(a1 + 48);
    if (v20)
      (*(void (**)(uint64_t, _QWORD))(v20 + 16))(v20, 0);
  }

}

void __98__HMDHomeManager__fetchHomeDataFromCloudWithCloudConflict_forceFetch_withDelay_accountCompletion___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  void *WeakRetained;
  void (**v11)(id, void *);

  v11 = a2;
  v7 = a3;
  if (!a4)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
      objc_msgSend(WeakRetained, "_runFetchHomeDataFromCloudWithCloudConflict:forceFetch:accountCompletion:syncCompletion:", objc_msgSend(v7, "isCloudConflict"), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32), v11);
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 23);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v8 + 16))(v8, 0, 0, v9);

  }
  if (v11)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled before it could run"), CFSTR("HMDCloudManager cancelled the operation"), 0);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    v11[2](v11, WeakRetained);
LABEL_8:

  }
}

void __68__HMDHomeManager_fetchHomeDataFromCloudWithCloudConflict_withDelay___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_fetchHomeDataFromCloudWithCloudConflict:forceFetch:withDelay:accountCompletion:", *(unsigned __int8 *)(a1 + 48), 0, 0, *(double *)(a1 + 40));
    WeakRetained = v3;
  }

}

void __42__HMDHomeManager_verifyHomeDataFromCloud___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_fetchHomeDataFromCloudWithCloudConflict:forceFetch:withDelay:accountCompletion:", 0, 0, *(_QWORD *)(a1 + 32), 0.0);
    WeakRetained = v3;
  }

}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  _QWORD v4[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke_2;
    v4[3] = &unk_1E89C02B8;
    v4[4] = v2;
    objc_msgSend(v2, "_eraseLocalHomeConfigurationAndDeleteMetadata:completionQueue:completion:", 0, v3, v4);

  }
}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke_706(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(WeakRetained, "_eraseLocalMetadata"));
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = 138543362;
      v7 = v5;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Cloud data was deleted, deleted local metadata", (uint8_t *)&v6, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
  }

}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke_707(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = 138543362;
      v6 = v4;
      _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_INFO, "%{public}@Received notification that controller key is available", (uint8_t *)&v5, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(WeakRetained, "_handleControllerKeyAvailable");
  }

}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke_708(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD block[5];
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = WeakRetained;
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v9 = v5;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Decryption failed. Cancelling operations in queue.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(v3, "workQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __37__HMDHomeManager__fetchDataFromCloud__block_invoke_709;
    block[3] = &unk_1E89C2730;
    block[4] = v3;
    dispatch_async(v6, block);

  }
}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke_709(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "syncManager");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "cancelOperations");

}

void __37__HMDHomeManager__fetchDataFromCloud__block_invoke_2(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(*(id *)(a1 + 32), "updateAccountAvailabilityChanged:", 0));
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v4;
    _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_INFO, "%{public}@Cloud data was deleted, deleted local home data, posting Key Transfer Reset Timer Notification.", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "postNotificationName:object:", CFSTR("HMDHomeManagerKeyTransferResetTimerNotification"), 0);

}

void __58__HMDHomeManager__configureHomes_uncommittedTransactions___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t __74__HMDHomeManager_accessoriesAreLocallyReachableOnTransientDevice_forHome___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_accessoriesAreLocallyReachableOnTransientDevice:forHome:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void __50__HMDHomeManager_setHomePodsPresent_inOwnedHomes___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      IXStringForAppRemovability();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v8;
      v16 = 2112;
      v17 = v9;
      v18 = 2112;
      v19 = v3;
      v10 = "%{public}@Failed to set Home app removability to %@: %@";
      v11 = v7;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 32;
LABEL_6:
      _os_log_impl(&dword_1CD062000, v11, v12, v10, (uint8_t *)&v14, v13);

    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    IXStringForAppRemovability();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543618;
    v15 = v8;
    v16 = 2112;
    v17 = v9;
    v10 = "%{public}@Successfully set Home app removability to %@";
    v11 = v7;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 22;
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v4);
}

- (void)_postPreferencesChangedNotification
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    v3 = a1;
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138543362;
      v8 = v5;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Posting preferences changed notification", (uint8_t *)&v7, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    objc_msgSend(v3, "darwinNotificationProvider");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "notifyPost:", *MEMORY[0x1E0CB9060]);

  }
}

uint64_t __47__HMDHomeManager__homeWithAssistantIdentifier___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "urlString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __68__HMDHomeManager__homeWithUniqueIdentifier_forClientIdentifierSalt___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = (void *)MEMORY[0x1E0CB3A28];
  objc_msgSend(a2, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, *(_QWORD *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 40));
  return v6;
}

uint64_t __32__HMDHomeManager__homeWithUUID___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "uuid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __33__HMDHomeManager__homesWithName___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

uint64_t __32__HMDHomeManager__homeWithName___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqual:", *(_QWORD *)(a1 + 32));

  return v4;
}

void __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD block[4];
  id v34;
  id v35;
  uint8_t v36[128];
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = WeakRetained;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v38 = v14;
      v39 = 2112;
      v40 = v9;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Completed fetching datastore for existing V3 changes with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    if (v9)
    {
      objc_msgSend(v12, "workQueue");
      v15 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke_680;
      block[3] = &unk_1E89C1D68;
      v35 = *(id *)(a1 + 32);
      v34 = v9;
      dispatch_async(v15, block);

      v16 = v35;
    }
    else
    {
      if (v7 && objc_msgSend(v7, "count"))
      {
        v24 = v8;
        objc_msgSend(MEMORY[0x1E0C99E20], "set");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        objc_msgSend(v7, "allValues");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
        if (v19)
        {
          v20 = v19;
          v21 = *(_QWORD *)v30;
          do
          {
            v22 = 0;
            do
            {
              if (*(_QWORD *)v30 != v21)
                objc_enumerationMutation(v18);
              objc_msgSend(v17, "addObjectsFromArray:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v22++));
            }
            while (v20 != v22);
            v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
          }
          while (v20);
        }

        v8 = v24;
      }
      else
      {
        v17 = 0;
      }
      objc_msgSend(v12, "workQueue");
      v23 = objc_claimAutoreleasedReturnValue();
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke_2;
      v25[3] = &unk_1E89C1B48;
      v28 = *(id *)(a1 + 32);
      v26 = v17;
      v27 = v8;
      v16 = v17;
      dispatch_async(v23, v25);

    }
  }

}

uint64_t __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke_680(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

void __47__HMDHomeManager__determineLegacyLocalChanges___block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = a1[6];
  v3 = (void *)a1[4];
  if (v3)
  {
    objc_msgSend(v3, "allObjects");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, _QWORD, _QWORD))(v2 + 16))(v2, v4, a1[5], 0);

  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v2 + 16))(v2, MEMORY[0x1E0C9AA60], a1[5], 0);
  }
}

void __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[5];
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = WeakRetained;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v14;
      v20 = 2112;
      v21 = v9;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Completed fetching datastore for existing V4 changes with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    if (!v9 && objc_msgSend(v7, "count"))
    {
      objc_msgSend(v12, "workQueue");
      v15 = objc_claimAutoreleasedReturnValue();
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_676;
      v16[3] = &unk_1E89C2328;
      v16[4] = v12;
      v17 = v7;
      dispatch_async(v15, v16);

    }
  }

}

void __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_678(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  _QWORD block[5];
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = WeakRetained;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v14;
      v19 = 2112;
      v20 = v9;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEBUG, "%{public}@Completed fetching datastore for existing V3 changes with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    if (!v9 && objc_msgSend(v7, "count"))
    {
      objc_msgSend(v12, "workQueue");
      v15 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_679;
      block[3] = &unk_1E89C2730;
      block[4] = v12;
      dispatch_async(v15, block);

    }
  }

}

uint64_t __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_679(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Changes detected scheduling push legacy zone", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 32), "_pushChangesToCloud:withDelay:", 0, 0.0);
}

void __55__HMDHomeManager__determineLocalChangesAndSchedulePush__block_invoke_676(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  id obj;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v1 = a1;
  v42 = *MEMORY[0x1E0C80C00];
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
  if (v2)
  {
    v4 = v2;
    v5 = *(_QWORD *)v32;
    *(_QWORD *)&v3 = 138543874;
    v28 = v3;
    v29 = v1;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v32 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        v8 = *(void **)(v1 + 40);
        objc_msgSend(v7, "backingStore", v28);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "root");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "objectForKeyedSubscript:", v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (v11)
        {
          v12 = (void *)MEMORY[0x1D17BA0A0]();
          v13 = *(id *)(v1 + 32);
          HMFGetOSLogHandle();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "name");
            v16 = v4;
            v17 = v5;
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "zoneID");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v28;
            v36 = v15;
            v37 = 2112;
            v38 = v18;
            v39 = 2112;
            v40 = v19;
            _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Scheduling push for pending transactions for home/zone %@/%@", buf, 0x20u);

            v5 = v17;
            v4 = v16;
            v1 = v29;

          }
          objc_autoreleasePoolPop(v12);
          objc_msgSend(*(id *)(v1 + 32), "_uploadHomeToCloud:withDelay:", v7, 0.0);
        }
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
    }
    while (v4);
  }

  v20 = *(void **)(v1 + 40);
  objc_msgSend(*(id *)(v1 + 32), "backingStore");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "root");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "objectForKeyedSubscript:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    v24 = (void *)MEMORY[0x1D17BA0A0]();
    v25 = *(id *)(v1 + 32);
    HMFGetOSLogHandle();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v36 = v27;
      _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Scheduling push for pending transactions for home manager zone", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(*(id *)(v1 + 32), "_uploadHomeManagerToCloudWithDelay:", 0.0);
  }
}

uint64_t __54__HMDHomeManager_determineLocalChangesAndSchedulePush__block_invoke(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "syncManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "kick");

  return objc_msgSend(*(id *)(a1 + 32), "_determineLocalChangesAndSchedulePush");
}

void __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  int v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  NSObject *v37;
  uint64_t v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  id *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint8_t v57[128];
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  void *v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if ((unint64_t)objc_msgSend(v6, "count") < 2)
    goto LABEL_31;
  objc_msgSend(a1[4], "uuid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = v5;
  +[HMDUser UUIDWithUserID:forHomeIdentifier:uuid:pairingIdentity:](HMDUser, "UUIDWithUserID:forHomeIdentifier:uuid:pairingIdentity:", 0, v7, 0, v5);
  v8 = objc_claimAutoreleasedReturnValue();

  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v9 = v6;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
  v46 = a1;
  v43 = (void *)v8;
  v44 = v6;
  if (v10)
  {
    v11 = v10;
    v12 = 0;
    v13 = *(_QWORD *)v54;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v54 != v13)
          objc_enumerationMutation(v9);
        v15 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
        objc_msgSend(v15, "objectID");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "isEqual:", v8);

        if (v17)
        {
          v18 = v15;

          v12 = v18;
        }
        objc_msgSend(v15, "objectChange");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = v19;
        if (v19)
          objc_msgSend(v19, "dumpDebug:", CFSTR(" DUPLICATE: "));

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v53, v62, 16);
    }
    while (v11);

    a1 = v46;
    v21 = (uint64_t)v12;
    if (v12)
      goto LABEL_17;
  }
  else
  {

  }
  objc_msgSend(v9, "lastObject");
  v21 = objc_claimAutoreleasedReturnValue();
LABEL_17:
  v48 = (void *)v21;
  v22 = (void *)MEMORY[0x1D17BA0A0]();
  v23 = a1[5];
  HMFGetOSLogHandle();
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "objectID");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "UUIDString");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v59 = v25;
    v60 = 2112;
    v61 = v27;
    _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Selecting as user model %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v22);
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v28 = v9;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)v50;
    do
    {
      v32 = 0;
      v33 = v48;
      v47 = v30;
      do
      {
        if (*(_QWORD *)v50 != v31)
          objc_enumerationMutation(v28);
        v34 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * v32);
        if ((objc_msgSend(v34, "isEqual:", v33) & 1) == 0)
        {
          v35 = (void *)MEMORY[0x1D17BA0A0]();
          v36 = a1[5];
          HMFGetOSLogHandle();
          v37 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v38 = v31;
            v39 = v28;
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "objectID");
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "UUIDString");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v59 = v40;
            v60 = 2112;
            v61 = v42;
            _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Dropping user model from processing %@", buf, 0x16u);

            v33 = v48;
            a1 = v46;

            v28 = v39;
            v31 = v38;
            v30 = v47;
          }

          objc_autoreleasePoolPop(v35);
          objc_msgSend(a1[6], "removeObject:", v34);
        }
        ++v32;
      }
      while (v30 != v32);
      v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v49, v57, 16);
    }
    while (v30);
  }

  v6 = v44;
  v5 = v45;
LABEL_31:

}

void __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke_673(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "updateCloudCache");
  objc_msgSend(*(id *)(a1 + 40), "_homeWithZoneID:", *(_QWORD *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(a1 + 80) && (objc_msgSend(*(id *)(a1 + 32), "decryptionFailed") & 1) == 0 && v4)
    objc_msgSend(*(id *)(a1 + 40), "_uploadHomeToCloud:withDelay:", v4, 0.0);
  objc_msgSend(*(id *)(a1 + 56), "setOsTransaction:", 0);
  objc_msgSend(*(id *)(a1 + 64), "setOsTransaction:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setOsTransaction:", 0);
  if (!*(_BYTE *)(a1 + 81) && v4 || objc_msgSend(v4, "migrationNeeded"))
  {
    objc_msgSend(*(id *)(a1 + 32), "cloudZone");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "migrateAfterCloudMerge:", v5);

  }
  v6 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(*(id *)(a1 + 40), "_postMergeWatchPush"));
  v7 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543362;
    v12 = v9;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Object change handling complete", (uint8_t *)&v11, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v3);

}

void __127__HMDHomeManager__handleTransactionsFetched_stagedTransaction_mustReplay_zoneID_cloudConflict_transactionError_syncCompletion___block_invoke_674(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "objectChange");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "uuid");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_homeWithUUID:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7 && objc_msgSend(*(id *)(a1 + 40), "count"))
    {
      v8 = (void *)MEMORY[0x1D17BA0A0]();
      v9 = WeakRetained;
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = *(_QWORD *)(a1 + 48);
        v16 = 138543618;
        v17 = v11;
        v18 = 2112;
        v19 = v12;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Cannot process fetched changes on home because home is not found for zone %@", (uint8_t *)&v16, 0x16u);

      }
      objc_autoreleasePoolPop(v8);
      v13 = *(_QWORD *)(a1 + 64);
      if (!v13)
        goto LABEL_13;
      v14 = *(void (**)(void))(v13 + 16);
      goto LABEL_12;
    }
    if (objc_msgSend(*(id *)(a1 + 40), "count"))
    {
      objc_msgSend(WeakRetained, "_handleFetchObjectChange:home:isLegacyTransaction:completion:", *(_QWORD *)(a1 + 40), v7, objc_msgSend(*(id *)(a1 + 56), "isLegacyTransaction"), *(_QWORD *)(a1 + 72));
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 72);
      if (v15)
      {
        v14 = *(void (**)(void))(v15 + 16);
LABEL_12:
        v14();
      }
    }
LABEL_13:

  }
}

void __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void (**v11)(_QWORD);
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  _QWORD aBlock[4];
  id v21;
  id v22;
  id v23;
  char v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "name");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v26 = v8;
      v27 = 2112;
      v28 = v9;
      v29 = 2112;
      v30 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Applied object changes to home: %@ with error %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    if (v3)
    {
      if (*(_QWORD *)(a1 + 48))
      {
        objc_msgSend(v6, "workQueue");
        v10 = objc_claimAutoreleasedReturnValue();
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3221225472;
        v17[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_666;
        v17[3] = &unk_1E89C1D68;
        v19 = *(id *)(a1 + 48);
        v18 = v3;
        dispatch_async(v10, v17);

      }
    }
    else
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_662;
      aBlock[3] = &unk_1E89BD028;
      objc_copyWeak(&v23, (id *)(a1 + 56));
      v21 = *(id *)(a1 + 32);
      v24 = *(_BYTE *)(a1 + 64);
      v22 = *(id *)(a1 + 48);
      v11 = (void (**)(_QWORD))_Block_copy(aBlock);
      if (objc_msgSend(*(id *)(a1 + 40), "count"))
      {
        v12 = (void *)MEMORY[0x1D17BA0A0]();
        v13 = v6;
        HMFGetOSLogHandle();
        v14 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v26 = v15;
          _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Dropping changes for object conflicts", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v12);
        objc_msgSend(*(id *)(a1 + 40), "allObjects");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "_updateModelChangesAsPushed:home:pushMask:completion:", v16, *(_QWORD *)(a1 + 32), 3, v11);

      }
      else
      {
        v11[2](v11);
      }

      objc_destroyWeak(&v23);
    }
  }

}

void __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_662(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v4 = *(void **)(a1 + 32);
    if (v4 && (objc_msgSend(v4, "isOwnerUser") & 1) == 0 && *(_BYTE *)(a1 + 56))
    {
      v5 = (void *)MEMORY[0x1D17BA0A0]();
      v6 = WeakRetained;
      HMFGetOSLogHandle();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v21 = v8;
        _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Saving changes to shared home from legacy merge", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v5);
      objc_msgSend(*(id *)(a1 + 32), "sharedHomeModel");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "backingStore");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultLegacyCloudOptions](HMDBackingStoreTransactionOptions, "defaultLegacyCloudOptions");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "transaction:options:", CFSTR("pushSharedHomeModel"), v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v12, "add:withMessage:", v9, 0);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_665;
      v16[3] = &unk_1E89C0650;
      objc_copyWeak(&v19, v2);
      v17 = *(id *)(a1 + 32);
      v18 = *(id *)(a1 + 40);
      objc_msgSend(v12, "save:", v16);

      objc_destroyWeak(&v19);
      goto LABEL_10;
    }
    if (*(_QWORD *)(a1 + 40))
    {
      objc_msgSend(WeakRetained, "workQueue");
      v13 = objc_claimAutoreleasedReturnValue();
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_3;
      v14[3] = &unk_1E89C0870;
      v15 = *(id *)(a1 + 40);
      dispatch_async(v13, v14);

      v9 = v15;
LABEL_10:

    }
  }

}

uint64_t __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_666(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_665(uint64_t a1)
{
  id WeakRetained;
  HMDHomeSaveRequest *v3;
  NSObject *v4;
  _QWORD block[4];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v3 = -[HMDHomeSaveRequest initWithHome:reason:information:postSyncNotification:objectChange:]([HMDHomeSaveRequest alloc], "initWithHome:reason:information:postSyncNotification:objectChange:", *(_QWORD *)(a1 + 32), CFSTR("kAddHomeRequestKey"), 0, 1, 1);
    objc_msgSend(WeakRetained, "saveWithRequest:", v3);
    if (*(_QWORD *)(a1 + 40))
    {
      objc_msgSend(WeakRetained, "workQueue");
      v4 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_2;
      block[3] = &unk_1E89C0870;
      v6 = *(id *)(a1 + 40);
      dispatch_async(v4, block);

    }
  }

}

uint64_t __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __79__HMDHomeManager__handleFetchObjectChange_home_isLegacyTransaction_completion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = v2;
    (*(void (**)(void))(v3 + 16))();
    v2 = v4;
  }

}

void __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_659(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  void (**v10)(_QWORD);
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  _QWORD aBlock[4];
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v8;
      v27 = 2112;
      v28 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Home modified with completed with with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    if (v3)
    {
      if (a1[6])
      {
        objc_msgSend(v6, "workQueue");
        v9 = objc_claimAutoreleasedReturnValue();
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_661;
        v19[3] = &unk_1E89C1D68;
        v21 = a1[6];
        v20 = v3;
        dispatch_async(v9, v19);

      }
    }
    else
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_660;
      aBlock[3] = &unk_1E89BD190;
      objc_copyWeak(&v24, a1 + 7);
      v23 = a1[6];
      v10 = (void (**)(_QWORD))_Block_copy(aBlock);
      objc_msgSend(a1[4], "objectChange");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "uuid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "_homeWithUUID:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13 && objc_msgSend(a1[5], "count"))
      {
        v14 = (void *)MEMORY[0x1D17BA0A0]();
        v15 = v6;
        HMFGetOSLogHandle();
        v16 = (id)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v26 = v17;
          _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Dropped changes for object conflicts", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v14);
        objc_msgSend(a1[5], "allObjects");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "_updateModelChangesAsPushed:home:pushMask:completion:", v18, v13, 3, v10);

      }
      else
      {
        v10[2](v10);
      }

      objc_destroyWeak(&v24);
    }
  }

}

void __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_660(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  _QWORD block[4];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained && *(_QWORD *)(a1 + 32))
  {
    objc_msgSend(WeakRetained, "workQueue");
    v4 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_2;
    block[3] = &unk_1E89C0870;
    v6 = *(id *)(a1 + 32);
    dispatch_async(v4, block);

  }
}

uint64_t __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_661(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t __72__HMDHomeManager__handleFetchModifyHome_isLegacyTransaction_completion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t *v18;
  id v19;
  BOOL v20;
  char v21;
  id location;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  HMDCloudTransaction *v28;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "_homeWithZoneID:", *(_QWORD *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7 == 0;

  v23 = 0;
  v24 = &v23;
  v25 = 0x3032000000;
  v26 = __Block_byref_object_copy__165094;
  v27 = __Block_byref_object_dispose__165095;
  v28 = -[HMDCloudTransaction initWithType:temporaryCache:noLocalData:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:noLocalData:", 4, 0, v8);
  objc_msgSend((id)v24[5], "updateCloudZone:", v5);
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.fetch-from-zone"));
  objc_msgSend((id)v24[5], "setOsTransaction:", v9);

  objc_initWeak(&location, *(id *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "cloudDataSyncManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v24[5];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_2;
  v13[3] = &unk_1E89BD410;
  objc_copyWeak(&v19, &location);
  v18 = &v23;
  v14 = *(id *)(a1 + 40);
  v17 = *(id *)(a1 + 56);
  v15 = *(id *)(a1 + 48);
  v20 = v8;
  v12 = v5;
  v16 = v12;
  v21 = *(_BYTE *)(a1 + 64);
  objc_msgSend(v10, "fetchTransaction:completionHandler:", v11, v13);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&v23, 8);

}

void __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  HMDCloudTransaction *v35;
  HMDCloudTransaction *v36;
  uint64_t v37;
  id v38;
  id v39;
  HMDCloudTransaction *v40;
  id v41;
  __int128 v42;
  void *v43;
  _QWORD v44[5];
  HMDCloudTransaction *v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  char v50;
  _QWORD v51[5];
  HMDCloudTransaction *v52;
  HMDCloudTransaction *v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  char v58;
  _QWORD aBlock[4];
  id v60;
  void *v61;
  __int128 v62;
  char v63;
  uint8_t buf[4];
  void *v65;
  __int16 v66;
  void *v67;
  __int16 v68;
  void *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "logEventSubmitter");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDDecryptionCompletedLogEvent decryptionCompletedWithFailure:](HMDDecryptionCompletedLogEvent, "decryptionCompletedWithFailure:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "decryptionFailed"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "submitLogEvent:", v7);

    objc_msgSend(v5, "_zoneInformationWithUUID:", *(_QWORD *)(a1 + 32));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = _Block_copy(*(const void **)(a1 + 56));
    if (!v3 && !objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "decryptionFailed"))
    {
      v32 = MEMORY[0x1E0C809B0];
      if (v8)
      {
        objc_msgSend(v8, "setFetchFailed:", 0);
        if ((objc_msgSend(v8, "isZoneCreated") & 1) == 0)
          objc_msgSend(v5, "addTransactionAfterPush:", v8);
        aBlock[0] = v32;
        aBlock[1] = 3221225472;
        aBlock[2] = __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_656;
        aBlock[3] = &unk_1E89BD3C0;
        v60 = v8;
        v61 = v5;
        v63 = *(_BYTE *)(a1 + 80);
        v42 = *(_OWORD *)(a1 + 56);
        v33 = (id)v42;
        v62 = v42;
        v34 = _Block_copy(aBlock);

      }
      else
      {
        v34 = v9;
      }
      objc_msgSend(v5, "_homeWithZoneID:", *(_QWORD *)(a1 + 32), (_QWORD)v42);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = -[HMDCloudTransaction initWithType:temporaryCache:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:", 4, 1);
      -[HMDCloudTransaction updateCloudZone:](v35, "updateCloudZone:", *(_QWORD *)(a1 + 48));
      if (v9)
      {
        v36 = -[HMDCloudTransaction initWithType:temporaryCache:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:", 4, 1);
        -[HMDCloudTransaction updateCloudZone:](v36, "updateCloudZone:", *(_QWORD *)(a1 + 48));
        v51[0] = v32;
        v51[1] = 3221225472;
        v51[2] = __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_657;
        v51[3] = &unk_1E89BD3E8;
        v37 = *(_QWORD *)(a1 + 64);
        v51[4] = v5;
        v52 = v35;
        v57 = v37;
        v53 = v36;
        v38 = *(id *)(a1 + 32);
        v58 = *(_BYTE *)(a1 + 81);
        v54 = v38;
        v55 = 0;
        v56 = v34;
        v39 = v34;
        v40 = v36;
        objc_msgSend(v5, "_loadHomeModelChanges:mustReplay:legacyPush:home:completion:", v35, v40, 0, v9, v51);

      }
      else
      {
        v44[0] = v32;
        v44[1] = 3221225472;
        v44[2] = __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_2_658;
        v44[3] = &unk_1E89BD118;
        v49 = *(_QWORD *)(a1 + 64);
        v44[4] = v5;
        v45 = v35;
        v41 = *(id *)(a1 + 32);
        v50 = *(_BYTE *)(a1 + 81);
        v46 = v41;
        v47 = 0;
        v48 = v34;
        v40 = v34;
        objc_msgSend(v5, "_loadHomeManagerTransactionsToPush:mustReplay:forLegacyPush:includeAllChanges:completion:", v35, 0, 0, 1, v44);

      }
      goto LABEL_33;
    }
    v10 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "wasZoneDeleted");
    if ((_DWORD)v10)
    {
      objc_msgSend(v5, "_zoneInformationWithUUID:", *(_QWORD *)(a1 + 32));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v11, "isZoneCreated"))
      {
        objc_msgSend(v5, "_homeWithZoneID:", *(_QWORD *)(a1 + 32));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v12)
        {
          objc_msgSend(v5, "cloudDataSyncManager");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "removeHomeZoneName:", *(_QWORD *)(a1 + 40));

          v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", *(_QWORD *)(a1 + 40));
          objc_msgSend(v5, "_removeCloudZone:updateHomeManager:", v14, 1);

        }
      }

    }
    else
    {
      if (v8)
        v10 = objc_msgSend(v8, "setFetchFailed:", 1);
      v15 = (void *)MEMORY[0x1D17BA0A0](v10);
      v16 = v5;
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "hmd_conciseCKError");
        v43 = v8;
        v19 = v9;
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "shortDescription");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v65 = v18;
        v66 = 2114;
        v67 = v21;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Not processing fetch with error: %{public}@", buf, 0x16u);

        v9 = v19;
        v8 = v43;

      }
      objc_autoreleasePoolPop(v15);
    }
    objc_msgSend(v3, "domain");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v22, "isEqualToString:", *MEMORY[0x1E0C947D8]))
    {
      objc_msgSend(v3, "userInfo");
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v23)
        goto LABEL_22;
      objc_msgSend(v3, "userInfo");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "hmf_numberForKey:", *MEMORY[0x1E0C94808]);
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      if (v22)
      {
        v25 = (void *)MEMORY[0x1D17BA0A0]();
        v26 = v5;
        HMFGetOSLogHandle();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = *(void **)(a1 + 40);
          *(_DWORD *)buf = 138543874;
          v65 = v28;
          v66 = 2112;
          v67 = v29;
          v68 = 2112;
          v69 = v22;
          _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@Rescheduling zone fetch %@ with delay %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v25);
        v30 = *(_QWORD *)(a1 + 32);
        objc_msgSend(v22, "doubleValue");
        objc_msgSend(v26, "_fetchHomeFromCloudZone:cloudConflict:withDelay:completionHandler:", v30, 0, 0);
      }
    }

LABEL_22:
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setOsTransaction:", 0);
    v31 = *(_QWORD *)(a1 + 56);
    if (v31)
      (*(void (**)(uint64_t, id))(v31 + 16))(v31, v3);
LABEL_33:

  }
}

void __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_656(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD v21[3];
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isFirstFetch"))
  {
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "hasValidChanges");
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "UUIDString");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v23 = v8;
      v24 = 2112;
      v25 = v10;
      v26 = 2112;
      v27 = v11;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Zone ready determined for zone: %@; didValuesChange: %@",
        buf,
        0x20u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 32), "setFirstFetch:", 0);
    objc_msgSend(*(id *)(a1 + 40), "notificationCenter");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid", CFSTR("HMDCR.id"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "UUIDString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = v14;
    v20[1] = CFSTR("HMDCR.stc");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v21[1] = v15;
    v20[2] = CFSTR("HMDCR.if");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(_BYTE *)(a1 + 64) == 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v21[2] = v16;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 3);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "postNotificationName:object:userInfo:", CFSTR("HMDCloudZoneReadyNotification"), 0, v17);

  }
  if (objc_msgSend(*(id *)(a1 + 40), "_zonesFetched"))
  {
    objc_msgSend(*(id *)(a1 + 40), "cloudDataSyncManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "updateCloudDataSyncFilterState:", 1);

  }
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v3);

}

uint64_t __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_657(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleTransactionsFetched:stagedTransaction:mustReplay:zoneID:cloudConflict:transactionError:syncCompletion:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t __74__HMDHomeManager__runFetchHomeFromCloudZone_cloudConflict_syncCompletion___block_invoke_2_658(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleTransactionsFetched:stagedTransaction:mustReplay:zoneID:cloudConflict:transactionError:syncCompletion:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void __84__HMDHomeManager__fetchHomeFromCloudZone_cloudConflict_withDelay_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  void (**v8)(_QWORD, _QWORD);
  id WeakRetained;
  void *v10;
  void (**v11)(id, _QWORD);

  v11 = a2;
  v7 = a3;
  if (!a4)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if (WeakRetained)
    {
      v8 = (void (**)(_QWORD, _QWORD))WeakRetained;
      objc_msgSend(WeakRetained, "_runFetchHomeFromCloudZone:cloudConflict:syncCompletion:", *(_QWORD *)(a1 + 32), objc_msgSend(v7, "isCloudConflict"), v11);
    }
    else
    {
      v8 = *(void (***)(_QWORD, _QWORD))(a1 + 40);
      if (v8)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled as the HMDHomeManager object went out of scope"), CFSTR("HMDHomeManager is no longer valid"), CFSTR("Debug... May be..."));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *))v8)[2](v8, v10);

        v8 = 0;
      }
    }
    goto LABEL_8;
  }
  if (v11)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled before it could run"), CFSTR("HMDCloudManager cancelled the operation"), &stru_1E89C3E38);
    v8 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v11[2](v11, v8);
LABEL_8:

  }
}

void __65__HMDHomeManager_fetchHomeFromCloudZone_cloudConflict_withDelay___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_fetchHomeFromCloudZone:cloudConflict:withDelay:completionHandler:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), 0, *(double *)(a1 + 48));
    WeakRetained = v3;
  }

}

void __44__HMDHomeManager_notifyZonesCloudZoneReady___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v3;
  __int128 v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  id v23;
  NSObject *v24;
  void *v25;
  void *v26;
  __int128 v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v3 = *(id *)(a1 + 32);
    v31 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    if (v31)
    {
      v30 = *(_QWORD *)v33;
      *(_QWORD *)&v4 = 138543618;
      v27 = v4;
      v28 = v3;
      do
      {
        for (i = 0; i != v31; ++i)
        {
          if (*(_QWORD *)v33 != v30)
            objc_enumerationMutation(v3);
          v6 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
          objc_msgSend(v6, "hmf_UUIDForKey:", CFSTR("HMDCR.id"), v27);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          if (v7)
          {
            objc_msgSend(WeakRetained, "_zoneInformationWithUUID:", v7);
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            if (v8)
            {
              v9 = (void *)MEMORY[0x1D17BA0A0]();
              v10 = WeakRetained;
              HMFGetOSLogHandle();
              v11 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
              {
                HMFGetLogIdentifier();
                v29 = v9;
                v12 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v8, "uuid");
                v13 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v13, "UUIDString");
                v14 = WeakRetained;
                v15 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v27;
                v37 = v12;
                v38 = 2112;
                v39 = v15;
                _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Zone ready determined for zone: %@", buf, 0x16u);

                v3 = v28;
                WeakRetained = v14;

                v9 = v29;
              }

              objc_autoreleasePoolPop(v9);
              objc_msgSend(v8, "setFirstFetch:", 0);
            }
            else
            {
              v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("1411CE6C-B4DE-4622-A49D-F66FE296D6B5"));
              v21 = objc_msgSend(v7, "isEqual:", v20);

              if (v21)
              {
                v22 = (void *)MEMORY[0x1D17BA0A0]();
                v23 = WeakRetained;
                HMFGetOSLogHandle();
                v24 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
                {
                  HMFGetLogIdentifier();
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543362;
                  v37 = v25;
                  _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Home Manager Zone determined ready", buf, 0xCu);

                }
                objc_autoreleasePoolPop(v22);
                objc_msgSend(v23, "setHomeManagerZoneFirstFetch:", 0);
              }
            }

          }
          else
          {
            v16 = (void *)MEMORY[0x1D17BA0A0]();
            v17 = WeakRetained;
            HMFGetOSLogHandle();
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v37 = v19;
              _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Zone ready determined for legacy zone", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v16);
          }
          objc_msgSend(WeakRetained, "notificationCenter");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "postNotificationName:object:userInfo:", CFSTR("HMDCloudZoneReadyNotification"), 0, v6);

        }
        v31 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      }
      while (v31);
    }

  }
}

void __35__HMDHomeManager_schedulePostFetch__block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_schedulePostFetch");
    WeakRetained = v2;
  }

}

void __36__HMDHomeManager__schedulePostFetch__block_invoke(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void (**v10)(id, void *);

  v10 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (!WeakRetained || a4)
  {
    if (v10)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled before it could run"), CFSTR("HMDCloudManager cancelled the operation"), 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10[2](v10, v9);

    }
  }
  else
  {
    objc_msgSend(WeakRetained, "cloudDataSyncManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "cacheDatabaseServerToken");

    if (v10)
      v10[2](v10, 0);
  }

}

void __33__HMDHomeManager__fetchAllZones___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  void *v33;
  _QWORD v34[4];
  id v35;
  _QWORD v36[4];
  id v37;
  _QWORD v38[6];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[5];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v32 = a1;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)MEMORY[0x1E0D519C0];
    v43[0] = MEMORY[0x1E0C809B0];
    v43[1] = 3221225472;
    v43[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_2;
    v43[3] = &unk_1E89BD2F8;
    v43[4] = WeakRetained;
    objc_msgSend(MEMORY[0x1E0D519E8], "immediateScheduler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "futureWithBlock:scheduler:", v43, v5);
    v6 = objc_claimAutoreleasedReturnValue();

    v33 = v3;
    v31 = (void *)v6;
    objc_msgSend(v3, "addObject:", v6);
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    objc_msgSend(WeakRetained, "cloudZones");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v7, "copy");

    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v40;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v40 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
          objc_msgSend(v13, "uuid");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "UUIDString");
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(WeakRetained, "cloudDataSyncManager");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "cloudCache");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v17, "homeZoneExists:", v15);

          if (v18)
          {
            v19 = (void *)MEMORY[0x1E0D519C0];
            v38[0] = MEMORY[0x1E0C809B0];
            v38[1] = 3221225472;
            v38[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_647;
            v38[3] = &unk_1E89BD320;
            v38[4] = WeakRetained;
            v38[5] = v13;
            objc_msgSend(MEMORY[0x1E0D519E8], "immediateScheduler");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "futureWithBlock:scheduler:", v38, v20);
            v21 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v33, "addObject:", v21);
          }
          else
          {
            objc_msgSend(WeakRetained, "cloudDataSyncManager");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "ownerName");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "addHomeZoneName:owner:", v15, v22);

          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
      }
      while (v10);
    }

    v23 = (void *)MEMORY[0x1E0D519C0];
    v24 = (void *)MEMORY[0x1E0D519E8];
    objc_msgSend(WeakRetained, "workQueue");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "schedulerWithDispatchQueue:", v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "combineAllFutures:ignoringErrors:scheduler:", v33, 0, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = MEMORY[0x1E0C809B0];
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_649;
    v36[3] = &unk_1E89BD348;
    v37 = *(id *)(v32 + 32);
    objc_msgSend(v27, "addSuccessBlock:", v36);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v34[0] = v28;
    v34[1] = 3221225472;
    v34[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_2_651;
    v34[3] = &unk_1E89C1A48;
    v35 = *(id *)(v32 + 32);
    v30 = (id)objc_msgSend(v29, "addFailureBlock:", v34);

  }
}

void __33__HMDHomeManager__fetchAllZones___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_3;
  v6[3] = &unk_1E89C21C0;
  v6[4] = v4;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "_fetchHomeManagerCloundConflict:withDelay:completionHandler:", 0, v6, 0.0);

}

void __33__HMDHomeManager__fetchAllZones___block_invoke_647(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  __int128 v8;
  id v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __33__HMDHomeManager__fetchAllZones___block_invoke_2_648;
  v7[3] = &unk_1E89C0DA8;
  v8 = *(_OWORD *)(a1 + 32);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "_fetchHomeFromCloudZone:cloudConflict:withDelay:completionHandler:", v5, 0, v7, 0.0);

}

uint64_t __33__HMDHomeManager__fetchAllZones___block_invoke_649(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void __33__HMDHomeManager__fetchAllZones___block_invoke_2_651(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id *v6;
  void *v7;
  void *v8;

  v3 = a2;
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v8 = v4;
      (*(void (**)(void))(v5 + 16))();
      v4 = v8;
    }

  }
  else
  {
    v6 = (id *)_HMFPreconditionFailure();
    __33__HMDHomeManager__fetchAllZones___block_invoke_2_648(v6, v7);
  }
}

void __33__HMDHomeManager__fetchAllZones___block_invoke_2_648(id *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = a1[4];
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v8;
      v16 = 2112;
      v17 = v9;
      v18 = 2112;
      v19 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Home cloud zone [%@] sync finished with error : %@", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(a1[6], "finishWithError:", v3);
  }
  else
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[5], "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543618;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Home cloud zone (%@) sync finished successfully", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    v12 = a1[6];
    NAEmptyResult();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "finishWithResult:", v13);

  }
}

void __33__HMDHomeManager__fetchAllZones___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543618;
      v13 = v8;
      v14 = 2112;
      v15 = v3;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@HomeManager cloud sync finished with error : %@", (uint8_t *)&v12, 0x16u);

    }
    objc_autoreleasePoolPop(v4);
    objc_msgSend(*(id *)(a1 + 40), "finishWithError:", v3);
  }
  else
  {
    if (v7)
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v9;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@HomeManager cloud sync finished successfully", (uint8_t *)&v12, 0xCu);

    }
    objc_autoreleasePoolPop(v4);
    v10 = *(void **)(a1 + 40);
    NAEmptyResult();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "finishWithResult:", v11);

  }
}

void __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  HMDCloudTransaction *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  HMDCloudTransaction *v11;
  _QWORD v12[4];
  HMDCloudTransaction *v13;
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  v7 = -[HMDCloudTransaction initWithType:temporaryCache:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:", 4, 0);
  -[HMDCloudTransaction updateCloudZone:](v7, "updateCloudZone:", v5);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.push-to-zone"));
  -[HMDCloudTransaction setOsTransaction:](v7, "setOsTransaction:", v8);

  v9 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke_2;
  v12[3] = &unk_1E89BDA00;
  objc_copyWeak(&v16, (id *)(a1 + 56));
  v11 = v7;
  v13 = v11;
  v14 = *(id *)(a1 + 40);
  v15 = *(id *)(a1 + 48);
  objc_msgSend(v9, "_loadHomeModelChanges:mustReplay:legacyPush:home:completion:", v11, 0, 0, v10, v12);

  objc_destroyWeak(&v16);
}

void __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (!v3 && WeakRetained && objc_msgSend(*(id *)(a1 + 32), "hasValidChanges"))
  {
    v6 = *(void **)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke_3;
    v9[3] = &unk_1E89C1D68;
    v10 = v6;
    v11 = *(id *)(a1 + 48);
    objc_msgSend(v5, "_uploadTransaction:home:completion:", v10, v7, v9);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setOsTransaction:", 0);
    v8 = *(_QWORD *)(a1 + 48);
    if (v8)
      (*(void (**)(uint64_t, id))(v8 + 16))(v8, v3);
  }

}

uint64_t __55__HMDHomeManager__runUploadHomeToCloud_syncCompletion___block_invoke_3(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setOsTransaction:", 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void __53__HMDHomeManager__uploadTransaction_home_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  id v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint8_t buf[4];
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
LABEL_19:
    v27 = *(_QWORD *)(a1 + 48);
    if (v27)
      (*(void (**)(void))(v27 + 16))();
    goto LABEL_21;
  }
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "zoneID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "hmd_conciseCKError");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "shortDescription");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v48 = v8;
    v49 = 2112;
    v50 = v9;
    v51 = 2112;
    v52 = (uint64_t)v11;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Uploaded data to zone %@ with error status: %@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v5);
  if (objc_msgSend(v6, "backOffOperationInProgress"))
  {
    v12 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v6, "setBackOffOperationInProgress:", 0));
    v13 = v6;
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v48 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Clearing that we were in a backoff operation", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
  }
  if (v3)
  {
    objc_msgSend(v3, "domain");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v16, "isEqualToString:", *MEMORY[0x1E0C947D8]))
    {
      objc_msgSend(v3, "userInfo");
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v17)
        goto LABEL_19;
      objc_msgSend(v3, "userInfo");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "hmf_numberForKey:", *MEMORY[0x1E0C94808]);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        objc_msgSend(*(id *)(a1 + 32), "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "UUIDString");
        v20 = (void *)objc_claimAutoreleasedReturnValue();

        v21 = (void *)MEMORY[0x1D17BA0A0]();
        v22 = v6;
        HMFGetOSLogHandle();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v48 = v24;
          v49 = 2112;
          v50 = v20;
          v51 = 2112;
          v52 = (uint64_t)v16;
          _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_INFO, "%{public}@Rescheduling zone push %@ with delay %@", buf, 0x20u);

        }
        objc_autoreleasePoolPop(v21);
        v25 = *(_QWORD *)(a1 + 32);
        objc_msgSend(v16, "doubleValue");
        objc_msgSend(v22, "_uploadHomeToCloud:withDelay:", v25);

      }
    }
LABEL_18:

    goto LABEL_19;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "wasZoneDeleted"))
  {
    v26 = *(_QWORD *)(a1 + 32);
    if (!v26)
      goto LABEL_19;
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "scheduleRemovalForHome:message:options:", v26, 0, v16);
    goto LABEL_18;
  }
  v28 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "homeConfigurationUUID");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "changeWithObjectID:", v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30)
  {
    objc_msgSend(v30, "objectChange");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v32 = v31;
    else
      v32 = 0;
    v33 = v32;

    if (v33)
    {
      objc_msgSend(v33, "configurationVersion");
      v34 = (void *)objc_claimAutoreleasedReturnValue();

      if (v34)
      {
        objc_msgSend(v33, "configurationVersion");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = objc_msgSend(v35, "integerValue");

        v37 = (void *)MEMORY[0x1D17BA0A0]();
        v38 = v6;
        HMFGetOSLogHandle();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v44 = v38;
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 32), "uuid");
          v46 = v36;
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "UUIDString");
          v45 = v37;
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543874;
          v48 = v40;
          v49 = 2112;
          v50 = v42;
          v51 = 2048;
          v52 = v46;
          _os_log_impl(&dword_1CD062000, v39, OS_LOG_TYPE_DEFAULT, "%{public}@Home %@ last pushed configuration version successfully updated to %lu", buf, 0x20u);

          v37 = v45;
          v36 = v46;

          v38 = v44;
        }

        objc_autoreleasePoolPop(v37);
        objc_msgSend(*(id *)(a1 + 32), "setLastSyncedConfigurationVersion:", v36);
        objc_msgSend(*(id *)(a1 + 32), "saveWithReason:postSyncNotification:", CFSTR("lastSyncedHomeConfigVersion"), 0);
      }
    }

  }
  objc_msgSend(v6, "_pushZoneInfromationForHome:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v6, "_resetCloudOperationRetryCounters");
  objc_msgSend(*(id *)(a1 + 40), "processedTransactionStoreRowIDs");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "_updateModelChangesAsPushed:home:pushMask:completion:", v43, *(_QWORD *)(a1 + 32), 2, *(_QWORD *)(a1 + 48));

  objc_msgSend(v6, "_schedulePushChangesToAllUsersOfAllHomes");
LABEL_21:

}

void __46__HMDHomeManager__pushZoneInfromationForHome___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = WeakRetained;
  if (!v5 && WeakRetained)
  {
    objc_msgSend(a1[4], "zoneID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __46__HMDHomeManager__pushZoneInfromationForHome___block_invoke_2;
    v10[3] = &unk_1E89BD280;
    objc_copyWeak(&v13, a1 + 6);
    v11 = a1[4];
    v12 = a1[5];
    objc_msgSend(v8, "_cleanChangesIfNoAddChangeObjectID:completion:", v9, v10);

    objc_destroyWeak(&v13);
  }

}

void __46__HMDHomeManager__pushZoneInfromationForHome___block_invoke_2(uint64_t a1, char a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && (a2 & 1) == 0)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = WeakRetained;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "zoneID");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "UUIDString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543874;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      v18 = 2112;
      v19 = v13;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Creating zone information for home %@/%@ to push to cloud", (uint8_t *)&v14, 0x20u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(v8, "addTransactionAfterPush:", *(_QWORD *)(a1 + 40));
  }

}

uint64_t __71__HMDHomeManager__updateModelChangesAsPushed_home_pushMask_completion___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  HMDBackingStoreLogFetchOperation *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  HMDBackingStoreLogFetchOperation *v10;
  id WeakRetained;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
  else
  {
    v4 = [HMDBackingStoreLogFetchOperation alloc];
    v5 = *(_QWORD *)(a1 + 88);
    v6 = MEMORY[0x1E0C809B0];
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2;
    v22[3] = &unk_1E89BD230;
    v7 = *(id *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(void **)(a1 + 48);
    v23 = v7;
    v24 = v8;
    v25 = v9;
    v26 = *(id *)(a1 + 56);
    v27 = *(id *)(a1 + 64);
    v10 = -[HMDBackingStoreLogFetchOperation initWithNeedsPushTo:result:](v4, "initWithNeedsPushTo:result:", v5, v22);
    v17[0] = v6;
    v17[1] = 3221225472;
    v17[2] = __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_632;
    v17[3] = &unk_1E89BDA00;
    objc_copyWeak(&v21, (id *)(a1 + 80));
    v18 = *(id *)(a1 + 64);
    v19 = *(id *)(a1 + 32);
    v20 = *(id *)(a1 + 72);
    -[HMDBackingStoreOperation setResultBlock:](v10, "setResultBlock:", v17);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = WeakRetained;
    HMFGetOSLogHandle();
    v14 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v15;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_DEBUG, "%{public}@Loading changes from home datastore started", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v12);
    objc_msgSend(*(id *)(a1 + 32), "backingStore");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "submit:", v10);

    objc_destroyWeak(&v21);
  }

}

uint64_t __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  char isKindOfClass;
  void *v20;
  id v21;
  NSObject *v22;
  _BOOL4 v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v30;
  id obj;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v32 = a3;
  v30 = a4;
  v8 = objc_msgSend(*(id *)(a1 + 32), "isOwnerUser");
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = v7;
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v34 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        if (v8)
        {
          v14 = (void *)MEMORY[0x1D17BA0A0]();
          v15 = *(id *)(a1 + 40);
          HMFGetOSLogHandle();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            HMFGetLogIdentifier();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v38 = v17;
            v39 = 2112;
            v40 = v13;
            _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_DEBUG, "%{public}@Processing home object change %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v14);
          objc_msgSend(*(id *)(a1 + 48), "addChangeWithObjectChange:", v13);
          if (objc_msgSend(v32, "mustReplay"))
          {
            v18 = *(void **)(a1 + 56);
            if (v18)
              objc_msgSend(v18, "addChangeWithObjectChange:", v13);
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            goto LABEL_20;
        }
        else
        {
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          v20 = (void *)MEMORY[0x1D17BA0A0]();
          v21 = *(id *)(a1 + 40);
          HMFGetOSLogHandle();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
          if ((isKindOfClass & 1) != 0)
          {
            if (v23)
            {
              HMFGetLogIdentifier();
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v38 = v24;
              v39 = 2112;
              v40 = v13;
              _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Processing shared home object change %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v20);
            objc_msgSend(*(id *)(a1 + 48), "addChangeWithObjectChange:", v13);
            if (objc_msgSend(v32, "mustReplay"))
            {
              v25 = *(void **)(a1 + 56);
              if (v25)
                objc_msgSend(v25, "addChangeWithObjectChange:", v13);
            }
LABEL_20:
            if (objc_msgSend(v13, "objectChangeType") == 1)
              objc_msgSend(*(id *)(a1 + 48), "setCreateZone:", 1);
            continue;
          }
          if (v23)
          {
            HMFGetLogIdentifier();
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v38 = v26;
            v39 = 2112;
            v40 = v13;
            _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_DEBUG, "%{public}@Removing share home object change %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v20);
          v27 = *(void **)(a1 + 64);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v13, "bsoLogRowID"));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "addObject:", v28);

        }
      }
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    }
    while (v10);
  }

  return 1;
}

void __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_632(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  uint64_t v6;
  HMDBackingStoreLogUpdateOperation *v7;
  void *v8;
  HMDBackingStoreLogUpdateOperation *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  _QWORD block[4];
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    v5 = objc_msgSend(a1[4], "count");
    v6 = MEMORY[0x1E0C809B0];
    if (v5)
    {
      v7 = [HMDBackingStoreLogUpdateOperation alloc];
      objc_msgSend(a1[4], "allObjects");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = -[HMDBackingStoreLogUpdateOperation initWithRowIDs:successfullyPushedTo:](v7, "initWithRowIDs:successfullyPushedTo:", v8, 3);

      v23[0] = v6;
      v23[1] = 3221225472;
      v23[2] = __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2_633;
      v23[3] = &unk_1E89C0678;
      objc_copyWeak(&v24, a1 + 7);
      v10 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v9, "setResultBlock:", v23));
      v11 = WeakRetained;
      HMFGetOSLogHandle();
      v12 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v26 = v13;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of shared home in datastore", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
      objc_msgSend(a1[5], "backingStore");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "submit:", v9);

      objc_destroyWeak(&v24);
    }
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = WeakRetained;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v26 = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_DEBUG, "%{public}@Loading changes from home datastore completed", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    objc_msgSend(v16, "workQueue");
    v19 = objc_claimAutoreleasedReturnValue();
    block[0] = v6;
    block[1] = 3221225472;
    block[2] = __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_634;
    block[3] = &unk_1E89C1D68;
    v22 = a1[6];
    v21 = v3;
    dispatch_async(v19, block);

  }
}

void __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2_633(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of shared home in datastore", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v5);

}

uint64_t __78__HMDHomeManager__loadHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_634(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v31;
  id v32;
  id v33;
  id WeakRetained;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v33 = a3;
  v31 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v8 = objc_msgSend(*(id *)(a1 + 32), "isOwnerUser");
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v36;
    v32 = v9;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v36 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v13);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v14, "uuid");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 32), "uuid");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v15, "isEqual:", v16) & 1) != 0)
          {
            v17 = objc_msgSend(v14, "objectChangeType");

            if (v17 != 3)
            {
              if ((v8 & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
              {
                v24 = (void *)MEMORY[0x1D17BA0A0]();
                v25 = WeakRetained;
                HMFGetOSLogHandle();
                v26 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                {
                  HMFGetLogIdentifier();
                  v27 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v40 = v27;
                  v41 = 2112;
                  v42 = v14;
                  _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_DEBUG, "%{public}@Processing home object change %@", buf, 0x16u);

                  v9 = v32;
                }

                objc_autoreleasePoolPop(v24);
                objc_msgSend(*(id *)(a1 + 48), "addChangeWithObjectChange:", v14);
                if (objc_msgSend(v33, "mustReplay"))
                {
                  v28 = *(void **)(a1 + 56);
                  if (v28)
                    objc_msgSend(v28, "addChangeWithObjectChange:", v14);
                }
                if (objc_msgSend(v14, "objectChangeType") == 1)
                  objc_msgSend(*(id *)(a1 + 48), "setCreateZone:", 1);
              }
              else
              {
                v18 = (void *)MEMORY[0x1D17BA0A0]();
                v19 = WeakRetained;
                HMFGetOSLogHandle();
                v20 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                {
                  HMFGetLogIdentifier();
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543618;
                  v40 = v21;
                  v41 = 2112;
                  v42 = v14;
                  _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEBUG, "%{public}@Removing share home object change %@", buf, 0x16u);

                }
                objc_autoreleasePoolPop(v18);
                v22 = *(void **)(a1 + 40);
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v14, "bsoLogRowID"));
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v22, "addObject:", v23);

                v9 = v32;
              }
            }
          }
          else
          {

          }
        }
        ++v13;
      }
      while (v11 != v13);
      v29 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
      v11 = v29;
    }
    while (v29);
  }

  return 1;
}

void __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_631(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  HMDBackingStoreLogUpdateOperation *v5;
  void *v6;
  HMDBackingStoreLogUpdateOperation *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "count"))
    {
      v5 = [HMDBackingStoreLogUpdateOperation alloc];
      objc_msgSend(*(id *)(a1 + 32), "allObjects");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = -[HMDBackingStoreLogUpdateOperation initWithRowIDs:successfullyPushedTo:](v5, "initWithRowIDs:successfullyPushedTo:", v6, 3);

      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2;
      v18[3] = &unk_1E89C0678;
      objc_copyWeak(&v19, (id *)(a1 + 48));
      v8 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v7, "setResultBlock:", v18));
      v9 = WeakRetained;
      HMFGetOSLogHandle();
      v10 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v21 = v11;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of shared home in datastore", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(v9, "backingStore");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "submit:", v7);

      objc_destroyWeak(&v19);
    }
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = WeakRetained;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_DEBUG, "%{public}@Load home change from homemanager datastore completed", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    v17 = *(_QWORD *)(a1 + 40);
    if (v17)
      (*(void (**)(uint64_t, _QWORD))(v17 + 16))(v17, 0);
  }

}

void __89__HMDHomeManager__loadHomeManagerHomeModelChanges_mustReplay_legacyPush_home_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of shared home in datastore", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v5);

}

void __47__HMDHomeManager__uploadHomeToCloud_withDelay___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  void *v8;
  id WeakRetained;
  void (**v10)(id, void *);

  v10 = a2;
  v7 = a3;
  if (!a4)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v8 = WeakRetained;
    if (WeakRetained)
      objc_msgSend(WeakRetained, "_runUploadHomeToCloud:syncCompletion:", *(_QWORD *)(a1 + 32), v10);
    goto LABEL_6;
  }
  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled before it could run"), CFSTR("HMDCloudManager cancelled the operation"), 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10[2](v10, v8);
LABEL_6:

  }
}

void __50__HMDHomeManager_uploadHomeToCloudZone_withDelay___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *(_QWORD *)(a1 + 32))
  {
    v4 = WeakRetained;
    objc_msgSend(WeakRetained, "_homeWithZoneID:");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
      objc_msgSend(v4, "_uploadHomeToCloud:withDelay:", v3, *(double *)(a1 + 48));

    WeakRetained = v4;
  }

}

void __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = v5;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Home manager zone fetch completed.", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    if (v3)
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = v7;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138543618;
        v21 = v13;
        v22 = 2112;
        v23 = v3;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Home manager zone merge failed with error %@, not saving records to cache", (uint8_t *)&v20, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "updateCloudCache");
      if (*(_BYTE *)(a1 + 72) && (objc_msgSend(*(id *)(a1 + 32), "decryptionFailed") & 1) == 0)
        objc_msgSend(v7, "_uploadHomeManagerToCloudWithDelay:", 0.0);
      if ((objc_msgSend(*(id *)(a1 + 32), "decryptionFailed") & 1) == 0
        && objc_msgSend(v7, "_zonesFetched"))
      {
        objc_msgSend(v7, "cloudDataSyncManager");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "updateCloudDataSyncFilterState:", 1);

      }
      objc_msgSend(*(id *)(a1 + 40), "setOsTransaction:", 0);
      objc_msgSend(*(id *)(a1 + 48), "setOsTransaction:", 0);
      objc_msgSend(*(id *)(a1 + 32), "setOsTransaction:", 0);
      WeakRetained = (id)objc_msgSend(v7, "_postMergeWatchPush");
    }
  }
  v15 = (void *)MEMORY[0x1D17BA0A0](WeakRetained);
  v16 = v5;
  HMFGetOSLogHandle();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 138543362;
    v21 = v18;
    _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Finished home manager zone merge", (uint8_t *)&v20, 0xCu);

  }
  objc_autoreleasePoolPop(v15);
  v19 = *(_QWORD *)(a1 + 56);
  if (v19)
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v3);

}

void __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_625(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "cloudZone");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "hasServerTokenAvailable");

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  if ((v3 & 1) == 0)
  {
    v4 = *(void **)(a1 + 40);
    objc_msgSend(v4, "uuid");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", CFSTR("No server token available"), v5, 1);

  }
}

void __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_628(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v18 = v8;
      v19 = 2112;
      v20 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Applied object changes to home manager with error %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    if (v3 || !objc_msgSend(a1[4], "count"))
    {
      objc_msgSend(v6, "workQueue");
      v9 = objc_claimAutoreleasedReturnValue();
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_2;
      v11[3] = &unk_1E89C1D68;
      v13 = a1[5];
      v12 = v3;
      dispatch_async(v9, v11);

    }
    else
    {
      objc_msgSend(a1[4], "allObjects");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_629;
      v14[3] = &unk_1E89BD190;
      objc_copyWeak(&v16, a1 + 6);
      v15 = a1[5];
      objc_msgSend(v6, "_updateHomeManagerModelChangesAsPushed:pushMask:completion:", v10, 3, v14);

      objc_destroyWeak(&v16);
    }
  }

}

void __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_629(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  _QWORD block[4];
  id v9;
  uint8_t buf[4];
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = WeakRetained;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v11 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Dropping changes for object conflicts", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    objc_msgSend(v4, "workQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_630;
    block[3] = &unk_1E89C0870;
    v9 = *(id *)(a1 + 32);
    dispatch_async(v7, block);

  }
}

uint64_t __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t __131__HMDHomeManager__handleHomeManagerTransactionsFetched_stagedTransaction_mustReplay_cloudConflict_transactionError_syncCompletion___block_invoke_630(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  id v10;
  NSObject *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  BOOL v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  HMDCloudTransaction *v29;
  HMDCloudTransaction *v30;
  uint64_t v31;
  HMDCloudTransaction *v32;
  HMDCloudTransaction *v33;
  id v34;
  __int128 v35;
  _QWORD v36[5];
  HMDCloudTransaction *v37;
  HMDCloudTransaction *v38;
  id v39;
  id v40;
  uint64_t v41;
  char v42;
  _QWORD aBlock[4];
  __int128 v44;
  id v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_20;
  objc_msgSend(WeakRetained, "logEventSubmitter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HMDDecryptionCompletedLogEvent decryptionCompletedWithFailure:](HMDDecryptionCompletedLogEvent, "decryptionCompletedWithFailure:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "decryptionFailed"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "submitLogEvent:", v7);

  if (!v3 && !objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "decryptionFailed"))
  {
    v26 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke_623;
    aBlock[3] = &unk_1E89BD0F0;
    objc_copyWeak(&v45, (id *)(a1 + 56));
    v35 = *(_OWORD *)(a1 + 40);
    v27 = (id)v35;
    v44 = v35;
    v28 = _Block_copy(aBlock);
    v29 = -[HMDCloudTransaction initWithType:temporaryCache:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:", 3, 1);
    -[HMDCloudTransaction updateCloudZone:](v29, "updateCloudZone:", *(_QWORD *)(a1 + 32));
    v30 = -[HMDCloudTransaction initWithType:temporaryCache:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:", 3, 1);
    -[HMDCloudTransaction updateCloudZone:](v30, "updateCloudZone:", *(_QWORD *)(a1 + 32));
    v36[0] = v26;
    v36[1] = 3221225472;
    v36[2] = __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke_624;
    v36[3] = &unk_1E89BD118;
    v31 = *(_QWORD *)(a1 + 48);
    v36[4] = v5;
    v41 = v31;
    v32 = v29;
    v37 = v32;
    v33 = v30;
    v42 = *(_BYTE *)(a1 + 64);
    v38 = v33;
    v39 = 0;
    v34 = v28;
    v40 = v34;
    objc_msgSend(v5, "_loadHomeManagerTransactionsToPush:mustReplay:forLegacyPush:includeAllChanges:completion:", v32, v33, 0, 0, v36);

    objc_destroyWeak(&v45);
    goto LABEL_20;
  }
  v8 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "decryptionFailed");
  v9 = (void *)MEMORY[0x1D17BA0A0]();
  v10 = v5;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (v8)
  {
    if (v12)
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v47 = v13;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Not processing fetch because decryption failed", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    goto LABEL_17;
  }
  if (v12)
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "hmd_conciseCKError");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "shortDescription");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v47 = v14;
    v48 = 2112;
    v49 = v16;
    _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Not processing fetch because of error: %{error}@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v9);
  objc_msgSend(v3, "domain");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v17, "isEqualToString:", *MEMORY[0x1E0C947D8]) & 1) != 0)
  {
    objc_msgSend(v3, "userInfo");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v18 == 0;

    if (v19)
      goto LABEL_17;
    objc_msgSend(v3, "userInfo");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "hmf_numberForKey:", *MEMORY[0x1E0C94808]);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      v21 = (void *)MEMORY[0x1D17BA0A0]();
      v22 = v10;
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v47 = v24;
        v48 = 2112;
        v49 = v17;
        _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_DEFAULT, "%{public}@Rescheduling home manager zone fetch with delay %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v21);
      objc_msgSend(v17, "doubleValue");
      objc_msgSend(v22, "_fetchHomeManagerCloundConflict:withDelay:completionHandler:", 0, 0);
    }
  }

LABEL_17:
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "setOsTransaction:", 0);
  v25 = *(_QWORD *)(a1 + 40);
  if (v25)
    (*(void (**)(uint64_t, id))(v25 + 16))(v25, v3);
LABEL_20:

}

void __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke_623(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (objc_msgSend(WeakRetained, "isHomeManagerZoneFirstFetch"))
  {
    v5 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "hasValidChanges");
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = WeakRetained;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v17 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Home Manager Zone determined ready", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    objc_msgSend(v7, "setHomeManagerZoneFirstFetch:", 0);
    objc_msgSend(v7, "notificationCenter");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v5, CFSTR("HMDCR.id"), CFSTR("HMDCR.stc"), CFSTR("1411CE6C-B4DE-4622-A49D-F66FE296D6B5"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v15[1] = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "postNotificationName:object:userInfo:", CFSTR("HMDCloudZoneReadyNotification"), 0, v12);

  }
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v3);

}

uint64_t __67__HMDHomeManager__runFetchHomeManagerCloudConflict_syncCompletion___block_invoke_624(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleHomeManagerTransactionsFetched:stagedTransaction:mustReplay:cloudConflict:transactionError:syncCompletion:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void __78__HMDHomeManager__fetchHomeManagerCloundConflict_withDelay_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  void (**v8)(_QWORD, _QWORD);
  id WeakRetained;
  void *v10;
  void (**v11)(id, _QWORD);

  v11 = a2;
  v7 = a3;
  if (!a4)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      v8 = (void (**)(_QWORD, _QWORD))WeakRetained;
      objc_msgSend(WeakRetained, "_runFetchHomeManagerCloudConflict:syncCompletion:", objc_msgSend(v7, "isCloudConflict"), v11);
    }
    else
    {
      v8 = *(void (***)(_QWORD, _QWORD))(a1 + 32);
      if (v8)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled as the HMDHomeManager object went out of scope"), CFSTR("HMDHomeManager is no longer valid"), CFSTR("Debug... May be..."));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *))v8)[2](v8, v10);

        v8 = 0;
      }
    }
    goto LABEL_8;
  }
  if (v11)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled before it could run"), CFSTR("HMDCloudManager cancelled the operation"), 0);
    v8 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v11[2](v11, v8);
LABEL_8:

  }
}

void __58__HMDHomeManager_fetchHomeManagerCloudConflict_withDelay___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_fetchHomeManagerCloundConflict:withDelay:completionHandler:", *(unsigned __int8 *)(a1 + 40), 0, 0.0);
    WeakRetained = v3;
  }

}

uint64_t __77__HMDHomeManager__updateHomeManagerModelChangesAsPushed_pushMask_completion___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __68__HMDHomeManager__updateHomeManagerModelChangesAsPushed_legacyPush___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Update homemanager datastore items pushed completed", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v5);

}

void __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_610(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  char isKindOfClass;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  void *v32;
  id v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t i;
  void *v47;
  void *v48;
  void *v49;
  int v50;
  void *v51;
  id v52;
  NSObject *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  id obj;
  id obja;
  id v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint8_t v85[128];
  uint8_t buf[4];
  void *v87;
  __int16 v88;
  void *v89;
  _BYTE v90[128];
  _BYTE v91[128];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v64 = a4;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v81, v91, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v82;
    v66 = v9;
    v67 = v8;
    v65 = *(_QWORD *)v82;
    do
    {
      v13 = 0;
      v68 = v11;
      do
      {
        if (*(_QWORD *)v82 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * v13);
        if (*(_BYTE *)(a1 + 88))
        {
          objc_msgSend(*(id *)(a1 + 32), "addChangeWithObjectChange:", *(_QWORD *)(*((_QWORD *)&v81 + 1) + 8 * v13));
          if (objc_msgSend(v8, "mustReplay"))
          {
            v15 = *(void **)(a1 + 40);
            if (v15)
            {
              v16 = v14;
LABEL_10:
              objc_msgSend(v15, "addChangeWithObjectChange:", v16);
              goto LABEL_45;
            }
          }
          goto LABEL_45;
        }
        v17 = v14;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v18 = v17;
        else
          v18 = 0;
        v19 = v18;

        v72 = v17;
        if (v19)
        {

        }
        else
        {
          v20 = v17;
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) == 0 || !v20)
          {
            v58 = v20;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
              v59 = v58;
            else
              v59 = 0;
            v60 = v59;

            if (v60)
            {
              v61 = objc_msgSend(v58, "objectChangeType");

              if (v61 == 3)
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
            }
            objc_msgSend(*(id *)(a1 + 32), "addChangeWithObjectChange:", v58);
            if (objc_msgSend(v8, "mustReplay"))
            {
              v15 = *(void **)(a1 + 40);
              if (v15)
              {
                v16 = v58;
                goto LABEL_10;
              }
            }
            goto LABEL_45;
          }
        }
        if (objc_msgSend(v17, "objectChangeType") == 3)
        {
          v69 = v13;
          objc_msgSend(*(id *)(a1 + 48), "addObject:", v17);
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v22 = (void *)objc_msgSend(*(id *)(a1 + 56), "copy");
          v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v77, v90, 16);
          if (v23)
          {
            v24 = v23;
            v25 = v17;
            v26 = *(_QWORD *)v78;
            do
            {
              v27 = 0;
              obj = (id)v24;
              do
              {
                if (*(_QWORD *)v78 != v26)
                  objc_enumerationMutation(v22);
                v28 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * v27);
                objc_msgSend(v25, "uuid");
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v28, "uuid");
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                v31 = objc_msgSend(v29, "isEqual:", v30);

                if (v31)
                {
                  v32 = (void *)MEMORY[0x1D17BA0A0]();
                  v33 = *(id *)(a1 + 64);
                  HMFGetOSLogHandle();
                  v34 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v35 = v26;
                    v36 = a1;
                    v37 = v22;
                    v38 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v28, "uuid");
                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543618;
                    v87 = v38;
                    v88 = 2112;
                    v89 = v39;
                    _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_INFO, "%{public}@Dropping added home because it was removed %@", buf, 0x16u);

                    v22 = v37;
                    a1 = v36;
                    v26 = v35;
                    v24 = (uint64_t)obj;
                    v25 = v72;
                  }

                  objc_autoreleasePoolPop(v32);
                  objc_msgSend(*(id *)(a1 + 56), "removeObject:", v28);
                  v40 = *(void **)(a1 + 72);
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v28, "bsoLogRowID"));
                  v41 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v40, "addObject:", v41);

                }
                ++v27;
              }
              while (v24 != v27);
              v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v77, v90, 16);
            }
            while (v24);
          }

        }
        else
        {
          if (objc_msgSend(v17, "objectChangeType") != 1)
            goto LABEL_45;
          v69 = v13;
          objc_msgSend(*(id *)(a1 + 56), "addObject:", v17);
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          obja = (id)objc_msgSend(*(id *)(a1 + 48), "copy");
          v42 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v73, v85, 16);
          if (v42)
          {
            v43 = v42;
            v44 = v17;
            v45 = *(_QWORD *)v74;
            do
            {
              for (i = 0; i != v43; ++i)
              {
                if (*(_QWORD *)v74 != v45)
                  objc_enumerationMutation(obja);
                v47 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * i);
                objc_msgSend(v44, "uuid");
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v47, "uuid");
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                v50 = objc_msgSend(v48, "isEqual:", v49);

                if (v50)
                {
                  v51 = (void *)MEMORY[0x1D17BA0A0]();
                  v52 = *(id *)(a1 + 64);
                  HMFGetOSLogHandle();
                  v53 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
                  {
                    HMFGetLogIdentifier();
                    v54 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v47, "uuid");
                    v55 = (void *)objc_claimAutoreleasedReturnValue();
                    *(_DWORD *)buf = 138543618;
                    v87 = v54;
                    v88 = 2112;
                    v89 = v55;
                    _os_log_impl(&dword_1CD062000, v53, OS_LOG_TYPE_INFO, "%{public}@Dropping removed home because it was added %@", buf, 0x16u);

                    v44 = v72;
                  }

                  objc_autoreleasePoolPop(v51);
                  objc_msgSend(*(id *)(a1 + 48), "removeObject:", v47);
                  v56 = *(void **)(a1 + 72);
                  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v47, "bsoLogRowID"));
                  v57 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v56, "addObject:", v57);

                }
              }
              v43 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v73, v85, 16);
            }
            while (v43);
          }

        }
        v9 = v66;
        v8 = v67;
        v12 = v65;
        v11 = v68;
        v13 = v69;
LABEL_45:
        ++v13;
      }
      while (v13 != v11);
      v62 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v81, v91, 16);
      v11 = v62;
    }
    while (v62);
  }

  return 1;
}

void __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_611(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  uint64_t v6;
  HMDBackingStoreLogUpdateOperation *v7;
  void *v8;
  HMDBackingStoreLogUpdateOperation *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "count");
    v6 = MEMORY[0x1E0C809B0];
    if (v5)
    {
      v7 = [HMDBackingStoreLogUpdateOperation alloc];
      objc_msgSend(*(id *)(a1 + 32), "allObjects");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = -[HMDBackingStoreLogUpdateOperation initWithRowIDs:successfullyPushedTo:](v7, "initWithRowIDs:successfullyPushedTo:", v8, 3);

      v26[0] = v6;
      v26[1] = 3221225472;
      v26[2] = __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_2;
      v26[3] = &unk_1E89C0678;
      objc_copyWeak(&v27, (id *)(a1 + 64));
      v10 = (void *)MEMORY[0x1D17BA0A0](-[HMDBackingStoreOperation setResultBlock:](v9, "setResultBlock:", v26));
      v11 = WeakRetained;
      HMFGetOSLogHandle();
      v12 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v29 = v13;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEBUG, "%{public}@Scheduling cleanup of obsolete data in datastore", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
      objc_msgSend(v11, "backingStore");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "submit:", v9);

      objc_destroyWeak(&v27);
    }
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = WeakRetained;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v18;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_DEBUG, "%{public}@Finished loading transactions from home manager datastore", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v15);
    if (*(_QWORD *)(a1 + 48))
    {
      objc_msgSend(v16, "workQueue");
      v19 = objc_claimAutoreleasedReturnValue();
      v22[0] = v6;
      v22[1] = 3221225472;
      v22[2] = __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_613;
      v22[3] = &unk_1E89BD0A0;
      v24 = *(id *)(a1 + 48);
      v20 = *(id *)(a1 + 40);
      v21 = *(_QWORD *)(a1 + 56);
      v23 = v20;
      v25 = v21;
      dispatch_async(v19, v22);

    }
  }

}

void __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEBUG, "%{public}@Finished cleaning up obsolete data in datastore", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v5);

}

uint64_t __107__HMDHomeManager__loadHomeManagerTransactionsToPush_mustReplay_forLegacyPush_includeAllChanges_completion___block_invoke_613(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[4], *(unsigned __int8 *)(*(_QWORD *)(a1[6] + 8) + 24), 0);
}

void __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke(id *a1, void *a2, char a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void (**v19)(id, _QWORD);
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  char v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    if ((objc_msgSend(a1[4], "hasValidChanges") & 1) != 0 || objc_msgSend(v7, "count"))
    {
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke_608;
      v20[3] = &unk_1E89BD028;
      objc_copyWeak(&v23, a1 + 6);
      v21 = a1[4];
      v24 = a3;
      v22 = a1[5];
      objc_msgSend(WeakRetained, "_processRemoveHomeModels:processIndex:completion:", v7, 0, v20);

      objc_destroyWeak(&v23);
    }
    else
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      v11 = WeakRetained;
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v26 = v13;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@No transaction were loaded from backing store, dropping home manager upload", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v10);
      if (objc_msgSend(v11, "backOffOperationInProgress"))
      {
        v14 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v11, "setBackOffOperationInProgress:", 0));
        v15 = v11;
        HMFGetOSLogHandle();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v26 = v17;
          _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@Clearing that we were in a backoff operation", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v14);
      }
      objc_msgSend(a1[4], "allTransactionStoreRowIDs");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "_updateHomeManagerModelChangesAsPushed:legacyPush:", v18, 0);

      objc_msgSend(a1[4], "setOsTransaction:", 0);
      v19 = (void (**)(id, _QWORD))a1[5];
      if (v19)
        v19[2](v19, 0);
    }
  }

}

void __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke_608(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  char v11;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "cloudDataSyncManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 32);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke_2;
    v7[3] = &unk_1E89BD000;
    objc_copyWeak(&v10, v2);
    v8 = *(id *)(a1 + 32);
    v11 = *(_BYTE *)(a1 + 56);
    v9 = *(id *)(a1 + 40);
    objc_msgSend(v5, "uploadTransaction:completionHandler:", v6, v7);

    objc_destroyWeak(&v10);
  }

}

void __58__HMDHomeManager__uploadHomeManagerToCloudSyncCompletion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  int v28;
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "hmd_conciseCKError");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "shortDescription");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = 138543618;
    v29 = v8;
    v30 = 2112;
    v31 = v10;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Uploaded data to home manager zone with error status: %@", (uint8_t *)&v28, 0x16u);

  }
  objc_autoreleasePoolPop(v5);
  if (v6)
  {
    if (objc_msgSend(v6, "backOffOperationInProgress"))
    {
      v11 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v6, "setBackOffOperationInProgress:", 0));
      v12 = v6;
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 138543362;
        v29 = v14;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Clearing that we were in a backoff operation", (uint8_t *)&v28, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
    }
    if (v3)
    {
      objc_msgSend(v3, "domain");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v15, "isEqualToString:", *MEMORY[0x1E0C947D8]))
      {
        objc_msgSend(v3, "userInfo");
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v16)
          goto LABEL_20;
        objc_msgSend(v3, "userInfo");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "hmf_numberForKey:", *MEMORY[0x1E0C94808]);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          v18 = (void *)MEMORY[0x1D17BA0A0]();
          v19 = v6;
          HMFGetOSLogHandle();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = 138543618;
            v29 = v21;
            v30 = 2112;
            v31 = v15;
            _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_INFO, "%{public}@Rescheduling home manager zone push with delay %@", (uint8_t *)&v28, 0x16u);

          }
          objc_autoreleasePoolPop(v18);
          objc_msgSend(v15, "doubleValue");
          objc_msgSend(v19, "_uploadHomeManagerToCloudWithDelay:");
        }
      }
    }
    else
    {
      objc_msgSend(v6, "_resetCloudOperationRetryCounters");
      objc_msgSend(*(id *)(a1 + 32), "processedTransactionStoreRowIDs");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "_updateHomeManagerModelChangesAsPushed:legacyPush:", v22, 0);

      if (!*(_BYTE *)(a1 + 56))
        goto LABEL_20;
      v23 = (void *)MEMORY[0x1D17BA0A0]();
      v24 = v6;
      HMFGetOSLogHandle();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = 138543362;
        v29 = v26;
        _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@At least one zone information model was deleted in the cloud, evaluated if account should migration to HH2", (uint8_t *)&v28, 0xCu);

      }
      objc_autoreleasePoolPop(v23);
      objc_msgSend(v24, "cloudDataSyncStateFilter");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "evaluateMoveToHH2");
    }

  }
LABEL_20:
  objc_msgSend(*(id *)(a1 + 32), "setOsTransaction:", 0);
  v27 = *(_QWORD *)(a1 + 40);
  if (v27)
    (*(void (**)(uint64_t, id))(v27 + 16))(v27, v3);

}

void __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke_2;
  block[3] = &unk_1E89BCFB0;
  v12 = v3;
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v13 = v5;
  v14 = v6;
  v15 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  v9 = *(void **)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v16 = v7;
  v18 = v8;
  v17 = v9;
  v10 = v3;
  dispatch_async(v4, block);

}

void __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke_2(uint64_t a1)
{
  HMDCloudTransaction *v2;
  void *v3;
  HMDCloudTransaction *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;
  HMDCloudTransaction *v13;
  id v14;
  id v15;
  id v16[2];
  id location;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = -[HMDCloudTransaction initWithType:temporaryCache:]([HMDCloudTransaction alloc], "initWithType:temporaryCache:", 4, 0);
    -[HMDCloudTransaction updateCloudZone:](v2, "updateCloudZone:", *(_QWORD *)(a1 + 32));
    -[HMDCloudTransaction addChangeWithObjectChange:](v2, "addChangeWithObjectChange:", *(_QWORD *)(a1 + 40));
    -[HMDCloudTransaction setDeleteZone:](v2, "setDeleteZone:", 1);
    objc_initWeak(&location, *(id *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 48), "cloudDataSyncManager");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke_3;
    v10[3] = &unk_1E89BD258;
    v10[4] = *(_QWORD *)(a1 + 48);
    v11 = *(id *)(a1 + 32);
    objc_copyWeak(v16, &location);
    v12 = *(id *)(a1 + 56);
    v4 = v2;
    v13 = v4;
    v5 = *(id *)(a1 + 64);
    v7 = *(void **)(a1 + 72);
    v6 = *(void **)(a1 + 80);
    v14 = v5;
    v16[1] = v6;
    v15 = v7;
    objc_msgSend(v3, "removeZonesTransactions:completionHandler:", v4, v10);

    objc_destroyWeak(v16);
    objc_destroyWeak(&location);

  }
  else
  {
    if (*(_QWORD *)(a1 + 56))
    {
      objc_msgSend(*(id *)(a1 + 48), "cloudDataSyncManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "removeHomeZoneName:", *(_QWORD *)(a1 + 56));

      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", *(_QWORD *)(a1 + 56));
      objc_msgSend(*(id *)(a1 + 48), "_removeCloudZone:updateHomeManager:", v9, 0);

    }
    objc_msgSend(*(id *)(a1 + 48), "_processRemoveHomeModels:processIndex:completion:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80) + 1, *(_QWORD *)(a1 + 72));
  }
}

void __67__HMDHomeManager__processRemoveHomeModels_processIndex_completion___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id WeakRetained;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 40);
    objc_msgSend(v3, "hmd_conciseCKError");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "shortDescription");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 138543874;
    v16 = v7;
    v17 = 2112;
    v18 = v8;
    v19 = 2112;
    v20 = v10;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Removed zone %@ with error status: %@", (uint8_t *)&v15, 0x20u);

  }
  objc_autoreleasePoolPop(v4);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
  v12 = WeakRetained;
  if (WeakRetained)
  {
    if (!v3)
    {
      if (*(_QWORD *)(a1 + 48))
      {
        objc_msgSend(WeakRetained, "cloudDataSyncManager");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "removeHomeZoneName:", *(_QWORD *)(a1 + 48));

      }
      objc_msgSend(*(id *)(a1 + 56), "setAllChangedAsProcessed");
      objc_msgSend(*(id *)(a1 + 56), "processedTransactionStoreRowIDs");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "_updateHomeManagerModelChangesAsPushed:legacyPush:", v14, 0);

    }
    objc_msgSend(v12, "_processRemoveHomeModels:processIndex:completion:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 88) + 1, *(_QWORD *)(a1 + 72));
  }

}

void __53__HMDHomeManager__uploadHomeManagerToCloudWithDelay___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  void *v8;
  id WeakRetained;
  void (**v10)(id, void *);

  v10 = a2;
  v7 = a3;
  if (!a4)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v8 = WeakRetained;
    if (WeakRetained)
      objc_msgSend(WeakRetained, "_uploadHomeManagerToCloudSyncCompletion:", v10);
    goto LABEL_6;
  }
  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled before it could run"), CFSTR("HMDCloudManager cancelled the operation"), 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10[2](v10, v8);
LABEL_6:

  }
}

void __52__HMDHomeManager_uploadHomeManagerToCloudWithDelay___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_uploadHomeManagerToCloudWithDelay:", *(double *)(a1 + 40));
    WeakRetained = v3;
  }

}

void __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 32);
  if (v7)
  {
    v8 = *(void **)(a1 + 40);
    if (v8)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_2;
      block[3] = &unk_1E89C1B48;
      v12 = v8;
      v10 = v5;
      v11 = v6;
      dispatch_async(v7, block);

    }
  }

}

uint64_t __82__HMDHomeManager_sendUnsecureMessage_target_userID_responseQueue_responseHandler___block_invoke_2(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void __89__HMDHomeManager_sendUserRemoved_fromHome_pairingUsername_pushToCloud_completionHandler___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "_sendUserRemoved:fromHome:pairingUsername:pushToCloud:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 56));

}

void __51__HMDHomeManager_sendUserAdded_destination_toHome___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "_sendUserAdded:destination:toHome:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

uint64_t __83__HMDHomeManager_updateGenerationCounterWithReason_sourceUUID_shouldNotifyClients___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateGenerationCounterWithReason:sourceUUID:shouldNotifyClients:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

void __111__HMDHomeManager__handleAccountStatusDeterminedWithError_homeDataRecordExists_metadataRecordExists_completion___block_invoke(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  id WeakRetained;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138543362;
    v7 = v4;
    _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_INFO, "%{public}@Re-querying account status", (uint8_t *)&v6, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateCloudDataSyncWithAccountState:", objc_msgSend(WeakRetained, "accountActive"));

}

void __44__HMDHomeManager_forcePushLocalDataToCloud___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count"))
  {

LABEL_4:
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138543362;
      v15 = v7;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Force pushing local home data to cloud", (uint8_t *)&v14, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 32), "setNeedToCleanUpKeys:", 1);
    objc_msgSend(*(id *)(a1 + 32), "setUploadHomeDataToCloud:", 1);
    objc_msgSend(*(id *)(a1 + 32), "_pushChangesToCloud:withDelay:", 1, 0.0);
    return;
  }
  objc_msgSend(*(id *)(a1 + 32), "incomingInvitations");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if (v4)
    goto LABEL_4;
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "homes");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "count");
    objc_msgSend(*(id *)(a1 + 32), "incomingInvitations");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = 138543874;
    v15 = v10;
    v16 = 2048;
    v17 = v12;
    v18 = 2048;
    v19 = objc_msgSend(v13, "count");
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@No homes %tu or incoming invitations %tu present, not force pushing to cloud", (uint8_t *)&v14, 0x20u);

  }
  objc_autoreleasePoolPop(v8);
}

uint64_t __56__HMDHomeManager_dataSyncInProgressUpdatedNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientsOfUpdatedStatus");
}

void __86__HMDHomeManager__runUploadHomeConfigToCloud_rowIDs_reasons_forcePush_syncCompletion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  int v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "hmd_conciseCKError");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "shortDescription");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = 138543618;
      v34 = v8;
      v35 = 2112;
      v36 = (uint64_t)v10;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Uploaded data to legacy zone with error status: %@", (uint8_t *)&v33, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    if (objc_msgSend(v6, "backOffOperationInProgress"))
    {
      v11 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v6, "setBackOffOperationInProgress:", 0));
      HMFGetOSLogHandle();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = 138543362;
        v34 = v13;
        _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Clearing that we were in a backoff operation", (uint8_t *)&v33, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
    }
    if (!v3)
    {
      objc_msgSend(v6, "_resetCloudOperationRetryCounters");
      objc_msgSend(v6, "setUploadToCloudIsPending:", 0);
      objc_msgSend(v6, "_updateHomeManagerModelChangesAsPushed:legacyPush:", *(_QWORD *)(a1 + 40), 1);
      if (objc_msgSend(v6, "uploadMetadataToCloud"))
      {
        objc_msgSend(v6, "_pushMetadataChangesToUsers");
        objc_msgSend(v6, "setUploadMetadataToCloud:", 0);
      }
      objc_msgSend(v6, "setUploadHomeDataToCloud:", 0);
      if (objc_msgSend(v6, "needToCleanUpKeys"))
      {
        v29 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = 138543362;
          v34 = v31;
          _os_log_impl(&dword_1CD062000, v30, OS_LOG_TYPE_INFO, "%{public}@Need to cleanup the keys in store", (uint8_t *)&v33, 0xCu);

        }
        objc_autoreleasePoolPop(v29);
        +[HMDPersistentStore cleanupKeysInStore](HMDPersistentStore, "cleanupKeysInStore");
      }
      goto LABEL_28;
    }
    v14 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v6, "setCloudOperationRetryCount:", objc_msgSend(v6, "cloudOperationRetryCount") + 1));
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v6, "cloudOperationRetryCount");
      v33 = 138543618;
      v34 = v16;
      v35 = 2048;
      v36 = v17;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@Pushing data to cloud failed, current cloud operation retry count: %ld", (uint8_t *)&v33, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
    if ((objc_msgSend(*(id *)(a1 + 32), "needConflictResolution") & 1) == 0)
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = 138543362;
        v34 = v20;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Failure was not a result of a conflict, updating watches", (uint8_t *)&v33, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(v6, "_scheduleSendHomeDataToAllWatches");
    }
    objc_msgSend(v3, "domain");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v21, "isEqualToString:", *MEMORY[0x1E0C947D8]) & 1) != 0)
    {
      objc_msgSend(v3, "userInfo");
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v22)
      {
LABEL_28:
        objc_msgSend(v6, "setNeedToCleanUpKeys:", 0);
        goto LABEL_29;
      }
      objc_msgSend(v3, "userInfo");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "hmf_numberForKey:", *MEMORY[0x1E0C94808]);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
      {
        v24 = (void *)MEMORY[0x1D17BA0A0]();
        v25 = v6;
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = 138543618;
          v34 = v27;
          v35 = 2112;
          v36 = (uint64_t)v21;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Rescheduling legacy push delay %@", (uint8_t *)&v33, 0x16u);

        }
        objc_autoreleasePoolPop(v24);
        v28 = *(unsigned __int8 *)(a1 + 64);
        objc_msgSend(v21, "doubleValue");
        objc_msgSend(v25, "_uploadHomeConfigToCloud:withDelay:", v28);
      }
    }

    goto LABEL_28;
  }
LABEL_29:
  objc_msgSend(*(id *)(a1 + 32), "setOsTransaction:", 0);
  v32 = *(_QWORD *)(a1 + 48);
  if (v32)
    (*(void (**)(uint64_t, id))(v32 + 16))(v32, v3);

}

void __77__HMDHomeManager__runUploadHomeConfigToCloudForcePush_reason_syncCompletion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (objc_msgSend(v7, "count") || (objc_msgSend(WeakRetained, "uploadMetadataToCloud") & 1) != 0)
  {
    objc_msgSend(WeakRetained, "_runUploadHomeConfigToCloud:rowIDs:reasons:forcePush:syncCompletion:", *(_QWORD *)(a1 + 32), v7, v8, *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 48));
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = WeakRetained;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Nothing to push to the legacy zone", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(v12, "setUploadHomeDataToCloud:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setOsTransaction:", 0);
    if (*(_QWORD *)(a1 + 40))
    {
      objc_msgSend(v12, "logEventSubmitter");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDCloudSyncUploadReasonLogEvent uploadReason:acceptedLegacyPush:](HMDCloudSyncUploadReasonLogEvent, "uploadReason:acceptedLegacyPush:", *(_QWORD *)(a1 + 40), 0);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "submitLogEvent:", v16);

    }
    v17 = *(_QWORD *)(a1 + 48);
    if (v17)
      (*(void (**)(uint64_t, _QWORD))(v17 + 16))(v17, 0);
  }

}

void __60__HMDHomeManager__uploadHomeConfigToCloud_withDelay_reason___block_invoke(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  void *v8;
  id WeakRetained;
  void (**v10)(id, void *);

  v10 = a2;
  v7 = a3;
  if (!a4)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v8 = WeakRetained;
    if (WeakRetained)
      objc_msgSend(WeakRetained, "_runUploadHomeConfigToCloudForcePush:reason:syncCompletion:", *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32), v10);
    goto LABEL_6;
  }
  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", 23, CFSTR("Operation was cancelled before it could run"), CFSTR("HMDCloudManager cancelled the operation"), 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10[2](v10, v8);
LABEL_6:

  }
}

void __52__HMDHomeManager_uploadHomeConfigToCloud_withDelay___block_invoke(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "_uploadHomeConfigToCloud:withDelay:", *(unsigned __int8 *)(a1 + 48), *(double *)(a1 + 40));
    WeakRetained = v3;
  }

}

void __45__HMDHomeManager__pushMetadataChangesToUsers__block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  int v21;
  void *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v11 = WeakRetained;
  if (!v7 && WeakRetained && objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", *(_QWORD *)(a1 + 40)))
  {
    v12 = (void *)MEMORY[0x1D17BA0A0]();
    v13 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 40);
      v21 = 138543618;
      v22 = v15;
      v23 = 2112;
      v24 = v16;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Pushing metadata changes to shared user: %@", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v12);
    v19 = a1 + 40;
    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(void **)(v19 + 8);
    objc_msgSend(v8, "destination");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "checkAndPushMetadataToUser:destination:userInfo:", v17, v20, v9);

  }
}

void __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey")))
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 32);
      v13 = 138543618;
      v14 = v9;
      v15 = 2112;
      v16 = v10;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Received sync from user %@ for metadata update", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void __66__HMDHomeManager_checkAndPushMetadataToUser_destination_userInfo___block_invoke_577(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey")))
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(a1 + 32);
      v14 = 138543618;
      v15 = v10;
      v16 = 2112;
      v17 = v11;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Received sync from user %@ for metadata update", (uint8_t *)&v14, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = 0;

}

void __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  int v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  NSObject *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  NSObject *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  _QWORD v78[4];
  int8x16_t v79;
  id v80;
  id v81;
  id v82;
  id v83;
  _QWORD v84[5];
  id v85;
  id v86;
  id v87;
  id v88;
  uint8_t buf[4];
  void *v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  void *v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v76 = a3;
  v77 = a4;
  if (v7)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v90 = v11;
      v91 = 2112;
      v92 = v12;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to elect a device to push home change: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
    goto LABEL_41;
  }
  v13 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "pushDestination");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v13) = objc_msgSend(v13, "hmf_BOOLForKey:", v14);

  if ((_DWORD)v13)
  {
    v15 = (void *)MEMORY[0x1D17BA0A0]();
    v16 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v90 = v18;
      v91 = 2112;
      v92 = v19;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Pushing metadata changes to shared user: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v15);
    v20 = *(void **)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 40), "pushDestination");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "destination");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "checkAndPushMetadataToUser:destination:userInfo:", v21, v22, v77);

  }
  objc_msgSend(v77, "objectForKeyedSubscript:", CFSTR("kHomeConfigurationVersionKey"));
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = (void *)MEMORY[0x1D17BA0A0]();
  v24 = *(id *)(a1 + 48);
  HMFGetOSLogHandle();
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(*(id *)(a1 + 56), "configurationVersion");
    v28 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138544130;
    v90 = v26;
    v91 = 2048;
    v92 = v27;
    v93 = 2112;
    v94 = v75;
    v95 = 2112;
    v96 = v28;
    _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_INFO, "%{public}@Current home configuration version: %ld user home configuration version: %@ user: %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v23);
  if (v75)
  {
    if ((objc_msgSend(*(id *)(a1 + 40), "ignoreConfigCompare") & 1) == 0)
    {
      v29 = objc_msgSend(v75, "integerValue");
      if (v29 == objc_msgSend(*(id *)(a1 + 56), "configurationVersion"))
      {
        v30 = (void *)MEMORY[0x1D17BA0A0]();
        v31 = *(id *)(a1 + 48);
        HMFGetOSLogHandle();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v90 = v33;
          _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_INFO, "%{public}@Skipping home changes push to shared users as the local and remote versions are the same", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v30);
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
LABEL_37:

        goto LABEL_41;
      }
    }
  }
  objc_msgSend(*(id *)(a1 + 40), "destination");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  if (v34)
    objc_msgSend(v76, "destination");
  else
    objc_msgSend(*(id *)(a1 + 40), "username");
  v74 = (void *)objc_claimAutoreleasedReturnValue();

  v35 = *(void **)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 56), "uuid");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "_addPendingDataSyncAcksForUser:forHome:", v74, v36);

  objc_msgSend(v77, "hmf_arrayForKey:", CFSTR("kHomedSupportedFeaturesKey"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = v37;
  if (v37)
    v39 = objc_msgSend(v37, "containsObject:", &unk_1E8B34F68);
  else
    v39 = 0;
  v40 = objc_msgSend(*(id *)(a1 + 64), "containsObject:", *(_QWORD *)(a1 + 40));
  v42 = *(void **)(a1 + 48);
  v41 = *(_QWORD *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 40), "user");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (v40)
    objc_msgSend(v42, "generatePayloadFromHome:forAdmin:user:supportedFeatures:", v41, 1, v43, v38);
  else
    objc_msgSend(v42, "generatePayloadFromHome:forAdmin:user:supportedFeatures:", v41, 0, v43, v38);
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 48), "_compressHomeData:", v44);
  v45 = objc_claimAutoreleasedReturnValue();
  v46 = (void *)v45;
  if (v39)
    v47 = (void *)v45;
  else
    v47 = v44;
  v73 = v47;

  if (v73)
  {
    objc_msgSend(MEMORY[0x1E0D285D0], "internalMessageWithName:messagePayload:", CFSTR("kHomeDataSyncRequestKey"));
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = (void *)MEMORY[0x1D17BA0A0]();
    v49 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v50 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v72, "dataForKey:", CFSTR("kHomeDataKey"));
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v53 = objc_msgSend(v52, "length");
      v54 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      v90 = v51;
      v91 = 2048;
      v92 = v53;
      v93 = 2112;
      v94 = v54;
      _os_log_impl(&dword_1CD062000, v50, OS_LOG_TYPE_INFO, "%{public}@Pushing home changes (%ld bytes) to shared user: %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v48);
    if (v38 && objc_msgSend(v38, "containsObject:", &unk_1E8B34F80))
    {
      objc_initWeak((id *)buf, *(id *)(a1 + 48));
      v71 = *(void **)(a1 + 48);
      objc_msgSend(v72, "dataForKey:", CFSTR("kHomeDataKey"));
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 56), "uuid");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v56, "UUIDString");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v72, "name");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "pushDestination");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "destination");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v84[0] = MEMORY[0x1E0C809B0];
      v84[1] = 3221225472;
      v84[2] = __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_568;
      v84[3] = &unk_1E89BCD30;
      objc_copyWeak(&v88, (id *)buf);
      v84[4] = *(_QWORD *)(a1 + 40);
      v85 = *(id *)(a1 + 56);
      v86 = v74;
      v87 = *(id *)(a1 + 72);
      objc_msgSend(v71, "sendFragmentedMessageForData:objectUUID:withMessageName:toUser:destination:completionHandler:", v55, v57, v58, v59, v60, v84);

      objc_destroyWeak(&v88);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 48), "messageDispatcher");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "uuid");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "pushDestination");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "destination");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "workQueue");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v78[0] = MEMORY[0x1E0C809B0];
      v78[1] = 3221225472;
      v78[2] = __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_569;
      v78[3] = &unk_1E89BCD58;
      objc_copyWeak(&v83, (id *)(a1 + 80));
      v79 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
      v80 = *(id *)(a1 + 56);
      v81 = v74;
      v82 = *(id *)(a1 + 72);
      objc_msgSend(v61, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v72, v62, v63, v64, v65, v78);

      objc_destroyWeak(&v83);
    }

    goto LABEL_37;
  }
  v66 = (void *)MEMORY[0x1D17BA0A0]();
  v67 = *(id *)(a1 + 48);
  HMFGetOSLogHandle();
  v68 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    v90 = v69;
    v91 = 2112;
    v92 = v70;
    _os_log_impl(&dword_1CD062000, v68, OS_LOG_TYPE_INFO, "%{public}@Failed to get home data payload for user: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v66);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

LABEL_41:
}

void __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_570(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138543362;
    v9 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEBUG, "%{public}@Finished pushing home changes to users", (uint8_t *)&v8, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0;

}

void __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_568(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  int v40;
  void *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v5)
    {
      objc_msgSend(v5, "domain");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0CB2F90]))
      {
        v9 = objc_msgSend(v5, "code");

        if (v9 == -6727)
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          v11 = WeakRetained;
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = *(_QWORD *)(a1 + 48);
            objc_msgSend(*(id *)(a1 + 40), "name");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v40 = 138543874;
            v41 = v13;
            v42 = 2112;
            v43 = v14;
            v44 = 2112;
            v45 = v15;
            v16 = "%{public}@Pushed home change fragmented message received kNotFoundErr from user %@ for data sync corre"
                  "sponding to home %@";
LABEL_10:
            _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, v16, (uint8_t *)&v40, 0x20u);

            goto LABEL_11;
          }
          goto LABEL_11;
        }
      }
      else
      {

      }
      objc_msgSend(v5, "domain");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v20, "isEqualToString:", *MEMORY[0x1E0CB8C70]))
      {

        goto LABEL_24;
      }
      v21 = objc_msgSend(v5, "code");

      if (v21 != 17)
      {
LABEL_24:
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
        goto LABEL_25;
      }
      v22 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = *(_QWORD *)(a1 + 48);
        objc_msgSend(*(id *)(a1 + 40), "name");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543874;
        v41 = v24;
        v42 = 2112;
        v43 = v25;
        v44 = 2112;
        v45 = v26;
        _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Received HMErrorCodeInsufficientPrivileges from user %@ for data sync corresponding to home %@.  Removing User", (uint8_t *)&v40, 0x20u);

      }
      objc_autoreleasePoolPop(v22);
      v27 = *(_QWORD *)(a1 + 48);
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "_removePendingDataSyncAcksForUser:forHome:", v27, v28);

    }
    else
    {
      if (objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey")))
      {
        v10 = (void *)MEMORY[0x1D17BA0A0]();
        v11 = WeakRetained;
        HMFGetOSLogHandle();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "name");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = 138543874;
          v41 = v13;
          v42 = 2112;
          v43 = v17;
          v44 = 2112;
          v45 = v15;
          v16 = "%{public}@Pushed home change fragmented message received ACK from user %@ for data sync corresponding to home %@";
          goto LABEL_10;
        }
LABEL_11:

        objc_autoreleasePoolPop(v10);
        v18 = *(_QWORD *)(a1 + 48);
        objc_msgSend(*(id *)(a1 + 40), "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "_removePendingDataSyncAcksForUser:forHome:", v18, v19);

        goto LABEL_24;
      }
      if (!objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseNAckKey")))
      {
        if (!objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseCancelKey")))
          goto LABEL_24;
        v10 = (void *)MEMORY[0x1D17BA0A0]();
        v11 = WeakRetained;
        HMFGetOSLogHandle();
        v12 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          goto LABEL_11;
        HMFGetLogIdentifier();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = *(_QWORD *)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "name");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543874;
        v41 = v13;
        v42 = 2112;
        v43 = v39;
        v44 = 2112;
        v45 = v15;
        v16 = "%{public}@Pushed home change fragmented message received Cancel from user %@ for data corresponding to home %@";
        goto LABEL_10;
      }
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = WeakRetained;
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = *(_QWORD *)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "name");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = 138543874;
        v41 = v32;
        v42 = 2112;
        v43 = v33;
        v44 = 2112;
        v45 = v34;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@Pushed home change fragmented message received NACK from user %@ for data sync corresponding to home %@", (uint8_t *)&v40, 0x20u);

      }
      objc_autoreleasePoolPop(v29);
      v35 = *(_QWORD *)(a1 + 48);
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "_removePendingDataSyncAcksForUser:forHome:", v35, v36);

    }
    v37 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "username");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "removeUserWithUserID:", v38);

    goto LABEL_24;
  }
LABEL_25:

}

void __76__HMDHomeManager__pushChangesForHome_toRegularUsersOfHome_adminUsersOfHome___block_invoke_569(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  NSObject *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  NSObject *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    if (v5)
    {
      objc_msgSend(v5, "domain");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0CB2F90]))
      {
        v9 = objc_msgSend(v5, "code");

        if (v9 == -6727)
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          v11 = *(id *)(a1 + 32);
          HMFGetOSLogHandle();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v13 = objc_claimAutoreleasedReturnValue();
            v14 = *(_QWORD *)(a1 + 56);
            objc_msgSend(*(id *)(a1 + 48), "name");
            v15 = objc_claimAutoreleasedReturnValue();
            v32 = 138543874;
            v33 = v13;
            v34 = 2112;
            v35 = v14;
            v36 = 2112;
            v37 = v15;
            v16 = "%{public}@Pushed home change secure message received kNotFoundErr from user %@ for data sync corresponding to home %@";
LABEL_10:
            _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, v16, (uint8_t *)&v32, 0x20u);

            goto LABEL_11;
          }
          goto LABEL_11;
        }
      }
      else
      {

      }
      objc_msgSend(v5, "domain");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v20, "isEqualToString:", *MEMORY[0x1E0CB8C70]))
      {
        v21 = objc_msgSend(v5, "code");

        if (v21 == 17)
        {
          v22 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v23 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
LABEL_23:

            objc_autoreleasePoolPop(v22);
            v29 = *(_QWORD *)(a1 + 56);
            objc_msgSend(*(id *)(a1 + 48), "uuid");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(WeakRetained, "_removePendingDataSyncAcksForUser:forHome:", v29, v30);

            v31 = *(void **)(a1 + 48);
            objc_msgSend(*(id *)(a1 + 40), "username");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "removeUserWithUserID:", v19);
            goto LABEL_24;
          }
          HMFGetLogIdentifier();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = *(_QWORD *)(a1 + 56);
          objc_msgSend(*(id *)(a1 + 48), "name");
          v26 = objc_claimAutoreleasedReturnValue();
          v32 = 138543874;
          v33 = v24;
          v34 = 2112;
          v35 = v25;
          v36 = 2112;
          v37 = v26;
          _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@Received HMErrorCodeInsufficientPrivileges from user %@ for data sync corresponding to home %@.  Removing User", (uint8_t *)&v32, 0x20u);
          goto LABEL_21;
        }
      }
      else
      {

      }
    }
    else
    {
      if (objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey")))
      {
        v10 = (void *)MEMORY[0x1D17BA0A0]();
        v11 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v13 = objc_claimAutoreleasedReturnValue();
          v17 = *(_QWORD *)(a1 + 40);
          objc_msgSend(*(id *)(a1 + 48), "name");
          v15 = objc_claimAutoreleasedReturnValue();
          v32 = 138543874;
          v33 = v13;
          v34 = 2112;
          v35 = v17;
          v36 = 2112;
          v37 = v15;
          v16 = "%{public}@Pushed home change secure message received ACK from user %@ for data sync corresponding to home %@";
          goto LABEL_10;
        }
LABEL_11:

        objc_autoreleasePoolPop(v10);
        v18 = *(_QWORD *)(a1 + 56);
        objc_msgSend(*(id *)(a1 + 48), "uuid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(WeakRetained, "_removePendingDataSyncAcksForUser:forHome:", v18, v19);
LABEL_24:

        goto LABEL_25;
      }
      if (objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseNAckKey")))
      {
        v22 = (void *)MEMORY[0x1D17BA0A0]();
        v23 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
LABEL_22:

          goto LABEL_23;
        }
        HMFGetLogIdentifier();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = *(_QWORD *)(a1 + 40);
        objc_msgSend(*(id *)(a1 + 48), "name");
        v28 = objc_claimAutoreleasedReturnValue();
        v32 = 138543874;
        v33 = v26;
        v34 = 2112;
        v35 = v27;
        v36 = 2112;
        v37 = v28;
        _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_INFO, "%{public}@Pushed home change secure message received NACK from user %@ for data sync corresponding to home %@", (uint8_t *)&v32, 0x20u);

LABEL_21:
        goto LABEL_22;
      }
    }
  }
LABEL_25:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));

}

void __70__HMDHomeManager__pushChangesToWatch_payload_group_completionHandler___block_invoke(id *a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  void *v6;
  NSObject *v7;
  _QWORD block[4];
  id v9;
  id v10;
  id v11;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v6 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "workQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __70__HMDHomeManager__pushChangesToWatch_payload_group_completionHandler___block_invoke_2;
    block[3] = &unk_1E89C1B48;
    v9 = v4;
    v11 = a1[5];
    v10 = a1[4];
    dispatch_async(v7, block);

  }
  else
  {
    dispatch_group_leave((dispatch_group_t)a1[4]);
  }

}

void __70__HMDHomeManager__pushChangesToWatch_payload_group_completionHandler___block_invoke_2(uint64_t a1)
{
  void (*v2)(void);

  if (objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey")))
  {
    v2 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
LABEL_5:
    v2();
    goto LABEL_6;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "hmf_BOOLForKey:", CFSTR("kDataSyncResponseNAckKey")))
  {
    v2 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    goto LABEL_5;
  }
LABEL_6:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  _QWORD v55[5];
  id v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  _QWORD v61[5];
  id v62;
  id v63;
  id v64;
  id v65;
  uint8_t buf[4];
  void *v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v53 = v7;
  v54 = v8;
  if (v7)
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
  }
  else
  {
    v10 = *(void **)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    objc_msgSend(v8, "destination");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "checkAndPushMetadataToUser:destination:userInfo:", v11, v12, v9);

    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("kHomeConfigurationVersionKey"));
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(*(id *)(a1 + 48), "configurationVersion");
      *(_DWORD *)buf = 138543874;
      v67 = v15;
      v68 = 2112;
      v69 = (uint64_t)v52;
      v70 = 2048;
      v71 = v16;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Remote's home config = %@, Self = %ld", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v13);
    if (v52 && (v17 = objc_msgSend(v52, "integerValue"), v17 == objc_msgSend(*(id *)(a1 + 48), "configurationVersion")))
    {
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v67 = v20;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Skip home push as the local and remote versions are the same", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
    }
    else
    {
      v21 = *(void **)(a1 + 32);
      v22 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 48), "uuid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "_addPendingDataSyncAcksForUser:forHome:", v22, v23);

      v50 = *(id *)(a1 + 56);
      objc_msgSend(v9, "hmf_arrayForKey:", CFSTR("kHomedSupportedFeaturesKey"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = v24;
      if (v24 && objc_msgSend(v24, "containsObject:", &unk_1E8B34F68))
      {
        v25 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543362;
          v67 = v27;
          _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Sending compressed data to remote because homed supports compression", buf, 0xCu);

        }
        objc_autoreleasePoolPop(v25);
        v28 = *(id *)(a1 + 64);

        v50 = v28;
      }
      v29 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "dataForKey:", CFSTR("kHomeDataKey"));
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = objc_msgSend(v33, "length");
        *(_DWORD *)buf = 138543874;
        v67 = v32;
        v68 = 2048;
        v69 = v34;
        v70 = 2112;
        v71 = (uint64_t)v8;
        _os_log_impl(&dword_1CD062000, v31, OS_LOG_TYPE_INFO, "%{public}@Pushing home changes (%ld bytes) to remote device with handle: %@", buf, 0x20u);

      }
      objc_autoreleasePoolPop(v29);
      if (v51 && objc_msgSend(v51, "containsObject:", &unk_1E8B34F80))
      {
        objc_initWeak((id *)buf, *(id *)(a1 + 32));
        v35 = *(void **)(a1 + 32);
        objc_msgSend(v50, "dataForKey:", CFSTR("kHomeDataKey"));
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "uuid");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "UUIDString");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "name");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = *(_QWORD *)(a1 + 40);
        objc_msgSend(v54, "destination");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v61[0] = MEMORY[0x1E0C809B0];
        v61[1] = 3221225472;
        v61[2] = __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_556;
        v61[3] = &unk_1E89BCD30;
        objc_copyWeak(&v65, (id *)buf);
        v42 = *(void **)(a1 + 48);
        v61[4] = *(_QWORD *)(a1 + 40);
        v62 = v42;
        v63 = *(id *)(a1 + 72);
        v64 = *(id *)(a1 + 80);
        objc_msgSend(v35, "sendFragmentedMessageForData:objectUUID:withMessageName:toUser:destination:completionHandler:", v36, v38, v39, v40, v41, v61);

        objc_destroyWeak(&v65);
        objc_destroyWeak((id *)buf);
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 32), "messageDispatcher", v50);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "uuid");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = *(_QWORD *)(a1 + 40);
        objc_msgSend(v54, "destination");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "workQueue");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v55[0] = MEMORY[0x1E0C809B0];
        v55[1] = 3221225472;
        v55[2] = __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_557;
        v55[3] = &unk_1E89BCD58;
        objc_copyWeak(&v60, (id *)(a1 + 88));
        v55[4] = *(_QWORD *)(a1 + 40);
        v56 = *(id *)(a1 + 48);
        v48 = *(id *)(a1 + 72);
        v49 = *(_QWORD *)(a1 + 32);
        v57 = v48;
        v58 = v49;
        v59 = *(id *)(a1 + 80);
        objc_msgSend(v43, "sendSecureMessage:target:userID:destination:responseQueue:responseHandler:", v50, v44, v45, v46, v47, v55);

        objc_destroyWeak(&v60);
      }

    }
  }

}

void __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_559(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    HMFGetLogIdentifier();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v4;
    _os_log_impl(&dword_1CD062000, v3, OS_LOG_TYPE_DEBUG, "%{public}@Finished pushing home data changes to gateways", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_556(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  const char *v37;
  NSObject *v38;
  os_log_type_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  int v46;
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (v5)
    {
      objc_msgSend(v5, "domain");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0CB2F90]))
      {
        v9 = objc_msgSend(v5, "code");

        if (v9 == -6727)
        {
          v10 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = *(void **)(a1 + 32);
            objc_msgSend(*(id *)(a1 + 40), "name");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v46 = 138543874;
            v47 = v12;
            v48 = 2112;
            v49 = v13;
            v50 = 2112;
            v51 = v14;
            v15 = "%{public}@Received kNotFoundErr from user %@ for data sync corresponding to home %@";
LABEL_29:
            _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v46, 0x20u);

            goto LABEL_30;
          }
          goto LABEL_30;
        }
      }
      else
      {

      }
      objc_msgSend(v5, "domain");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v30, "isEqualToString:", *MEMORY[0x1E0CB8C70]))
      {
        v31 = objc_msgSend(v5, "code");

        if (v31 == 17)
        {
          v32 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v33 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = *(void **)(a1 + 32);
            objc_msgSend(*(id *)(a1 + 40), "name");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            v46 = 138543874;
            v47 = v34;
            v48 = 2112;
            v49 = v35;
            v50 = 2112;
            v51 = v36;
            v37 = "%{public}@Received HMErrorCodeInsufficientPrivileges from user %@ for data sync corresponding to home "
                  "%@.  Removing User";
            v38 = v33;
            v39 = OS_LOG_TYPE_ERROR;
LABEL_24:
            _os_log_impl(&dword_1CD062000, v38, v39, v37, (uint8_t *)&v46, 0x20u);

            goto LABEL_25;
          }
          goto LABEL_25;
        }
      }
      else
      {

      }
    }
    else if (objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey")))
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = *(void **)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "name");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = 138543874;
        v47 = v18;
        v48 = 2112;
        v49 = v19;
        v50 = 2112;
        v51 = v20;
        _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Received ACK from user %@ for data corresponding to home %@", (uint8_t *)&v46, 0x20u);

      }
      objc_autoreleasePoolPop(v16);
      v21 = *(_QWORD *)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "_removePendingDataSyncAcksForUser:forHome:", v21, v22);

      v23 = *(void **)(a1 + 48);
      if (v23)
      {
        objc_msgSend(v23, "userID");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "isEqualToString:", *(_QWORD *)(a1 + 32));

        if (v25)
        {
          v26 = (void *)MEMORY[0x1D17BA0A0]();
          HMFGetOSLogHandle();
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(a1 + 40), "name");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            v46 = 138543618;
            v47 = v28;
            v48 = 2112;
            v49 = v29;
            _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@We just added a resident user to home %@, checking if we need to setup remote session", (uint8_t *)&v46, 0x16u);

          }
          objc_autoreleasePoolPop(v26);
          objc_msgSend(WeakRetained, "_checkForRemotePeersAndRegisterForRemoteNotifications:", 1);
        }
      }
    }
    else
    {
      if (objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseNAckKey")))
      {
        v32 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = *(void **)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "name");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v46 = 138543874;
          v47 = v34;
          v48 = 2112;
          v49 = v40;
          v50 = 2112;
          v51 = v36;
          v37 = "%{public}@Received NACK from user %@ for data corresponding to home %@";
          v38 = v33;
          v39 = OS_LOG_TYPE_INFO;
          goto LABEL_24;
        }
LABEL_25:

        objc_autoreleasePoolPop(v32);
        v41 = *(_QWORD *)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "uuid");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(WeakRetained, "_removePendingDataSyncAcksForUser:forHome:", v41, v42);

        objc_msgSend(*(id *)(a1 + 40), "removeUserWithUserID:", *(_QWORD *)(a1 + 32));
        goto LABEL_31;
      }
      if (objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseCancelKey")))
      {
        v10 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v43 = *(void **)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "name");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v46 = 138543874;
          v47 = v12;
          v48 = 2112;
          v49 = v43;
          v50 = 2112;
          v51 = v14;
          v15 = "%{public}@Received Cancel from user %@ for data corresponding to home %@";
          goto LABEL_29;
        }
LABEL_30:

        objc_autoreleasePoolPop(v10);
        v44 = *(_QWORD *)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "uuid");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(WeakRetained, "_removePendingDataSyncAcksForUser:forHome:", v44, v45);

      }
    }
  }
LABEL_31:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void __77__HMDHomeManager__pushChangesForHome_toRemoteDevicesOnSameAccount_addedUser___block_invoke_557(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  int v48;
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (!WeakRetained)
    goto LABEL_28;
  if (v5)
  {
    objc_msgSend(v5, "domain");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0CB2F90]))
    {
      v9 = objc_msgSend(v5, "code");

      if (v9 == -6727)
      {
        v10 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = *(void **)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "name");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = 138543874;
          v49 = v12;
          v50 = 2112;
          v51 = v13;
          v52 = 2112;
          v53 = v14;
          _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Received kNotFoundErr from user %@ for data sync corresponding to home %@", (uint8_t *)&v48, 0x20u);

        }
        objc_autoreleasePoolPop(v10);
        v15 = *(_QWORD *)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "uuid");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(WeakRetained, "_removePendingDataSyncAcksForUser:forHome:", v15, v16);

        goto LABEL_28;
      }
    }
    else
    {

    }
    objc_msgSend(v5, "domain");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v31, "isEqualToString:", *MEMORY[0x1E0CB8C70]))
    {

      goto LABEL_28;
    }
    v32 = objc_msgSend(v5, "code");

    if (v32 == 17)
    {
      v33 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = *(void **)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "name");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = 138543874;
        v49 = v35;
        v50 = 2112;
        v51 = v36;
        v52 = 2112;
        v53 = v37;
        _os_log_impl(&dword_1CD062000, v34, OS_LOG_TYPE_ERROR, "%{public}@Received HMErrorCodeInsufficientPrivileges from user %@ for data sync corresponding to home %@.  Removing User", (uint8_t *)&v48, 0x20u);

      }
      objc_autoreleasePoolPop(v33);
      v38 = *(void **)(a1 + 56);
      v39 = *(_QWORD *)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "_removePendingDataSyncAcksForUser:forHome:", v39, v40);

      goto LABEL_27;
    }
  }
  else
  {
    if (!objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseAckKey")))
    {
      if (!objc_msgSend(v6, "hmf_BOOLForKey:", CFSTR("kDataSyncResponseNAckKey")))
        goto LABEL_28;
      v41 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = *(void **)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "name");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = 138543874;
        v49 = v43;
        v50 = 2112;
        v51 = v44;
        v52 = 2112;
        v53 = v45;
        _os_log_impl(&dword_1CD062000, v42, OS_LOG_TYPE_INFO, "%{public}@Received NACK from user %@ for data corresponding to home %@", (uint8_t *)&v48, 0x20u);

      }
      objc_autoreleasePoolPop(v41);
      v46 = *(_QWORD *)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "_removePendingDataSyncAcksForUser:forHome:", v46, v47);

LABEL_27:
      objc_msgSend(*(id *)(a1 + 40), "removeUserWithUserID:", *(_QWORD *)(a1 + 32));
      goto LABEL_28;
    }
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "name");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = 138543874;
      v49 = v19;
      v50 = 2112;
      v51 = v20;
      v52 = 2112;
      v53 = v21;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@Received ACK from user %@ for data corresponding to home %@", (uint8_t *)&v48, 0x20u);

    }
    objc_autoreleasePoolPop(v17);
    v22 = *(_QWORD *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "uuid");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_removePendingDataSyncAcksForUser:forHome:", v22, v23);

    v24 = *(void **)(a1 + 48);
    if (v24)
    {
      objc_msgSend(v24, "userID");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "isEqualToString:", *(_QWORD *)(a1 + 32));

      if (v26)
      {
        v27 = (void *)MEMORY[0x1D17BA0A0]();
        HMFGetOSLogHandle();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "name");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = 138543618;
          v49 = v29;
          v50 = 2112;
          v51 = v30;
          _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@We just added a resident user to home %@, checking if we need to setup remote session", (uint8_t *)&v48, 0x16u);

        }
        objc_autoreleasePoolPop(v27);
        objc_msgSend(WeakRetained, "_checkForRemotePeersAndRegisterForRemoteNotifications:", 1);
      }
    }
  }
LABEL_28:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));

}

void __42__HMDHomeManager__pushUserRemovedForHome___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  int v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "setRemovalInProgress:", 0);
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (!WeakRetained)
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = a1[5];
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543362;
      v26 = v21;
      v22 = "%{public}@Lost reference to home during removed user removal message";
      v23 = v20;
      v24 = 12;
LABEL_15:
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v25, v24);

    }
LABEL_16:

    objc_autoreleasePoolPop(v18);
    goto LABEL_17;
  }
  if (v5 && objc_msgSend(v5, "code") != 2)
  {
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = a1[5];
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v21;
      v27 = 2112;
      v28 = v5;
      v22 = "%{public}@Unable to remove the removed user: %@";
      v23 = v20;
      v24 = 22;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  if (objc_msgSend(v5, "code") == 2)
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = a1[5];
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = 138543618;
      v26 = v11;
      v27 = 2112;
      v28 = v5;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Treating user removed message error as success: %@", (uint8_t *)&v25, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  v13 = a1[5];
  HMFGetOSLogHandle();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = a1[4];
    v25 = 138543618;
    v26 = v15;
    v27 = 2112;
    v28 = v16;
    _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Successfully removed the removed user: %@", (uint8_t *)&v25, 0x16u);

  }
  objc_autoreleasePoolPop(v12);
  objc_msgSend(WeakRetained, "removedUsers");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "removeObject:", a1[4]);

LABEL_17:
}

void __62__HMDHomeManager__pushChangesToAllUsersOfAllHomesForMigration__block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  void *v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint8_t v32[128];
  uint8_t buf[4];
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "sharedHomesPushDelayTimer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "suspend");

  if (isiOSDevice())
  {
    objc_msgSend(*(id *)(a1 + 32), "homes");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_548_165874);

    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __62__HMDHomeManager__pushChangesToAllUsersOfAllHomesForMigration__block_invoke_3;
    v29[3] = &unk_1E89C2328;
    v4 = *(void **)(a1 + 40);
    v30 = *(id *)(a1 + 32);
    v31 = v4;
    objc_msgSend(v30, "_sendHomeDataToAllWatchesMigrateToHH2:completionHandler:", 1, v29);

  }
  else
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v34 = v8;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Skip pushing home data to watches since this device is not a companion", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 40), "fulfillWithNoValue");
  }
  objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = 0;
  v28 = 0;
  objc_msgSend(v9, "getControllerPublicKey:secretKey:username:allowCreation:error:", 0, 0, &v28, 0, &v27);
  v10 = v28;
  v11 = v27;

  objc_msgSend(*(id *)(a1 + 32), "pendingDataSyncAcks");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "removeAllObjects");

  objc_msgSend(*(id *)(a1 + 32), "pendingDataSyncAcks");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = +[HMDPersistentStore archiveIDSDataSyncJournal:](HMDPersistentStore, "archiveIDSDataSyncJournal:", v13);

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "homes", 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)v24 != v18)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        objc_msgSend(v20, "ownerName");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = objc_msgSend(v21, "isEqualToString:", v10);

        if (v22)
        {
          objc_msgSend(*(id *)(a1 + 32), "_archiveSyncDataForHome:", v20);
          objc_msgSend(*(id *)(a1 + 32), "_pushUserRemovedForHome:", v20);
        }
      }
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v23, v32, 16);
    }
    while (v17);
  }

}

uint64_t __62__HMDHomeManager__pushChangesToAllUsersOfAllHomesForMigration__block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543362;
    v8 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Finished attempt to push home data to all watches", (uint8_t *)&v7, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 40), "fulfillWithNoValue");
}

uint64_t __62__HMDHomeManager__pushChangesToAllUsersOfAllHomesForMigration__block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setWatchSkipVersionCheck:", 1);
}

uint64_t __53__HMDHomeManager_updateUserPushCachedForUser_device___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateUserPushCachedForUser:device:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __59__HMDHomeManager_performPostSaveRequestActionsWithRequest___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_performPostSaveRequestActionsWithRequest:", *(_QWORD *)(a1 + 40));
}

uint64_t __34__HMDHomeManager_saveWithRequest___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_saveWithRequest:", *(_QWORD *)(a1 + 40));
}

void __71__HMDHomeManager__dataForPersistentStoreIncrementingGeneration_reason___block_invoke(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "_updateAccessoriesConfigured"))
    -[HMDHomeManager _postPreferencesChangedNotification](*(void **)(a1 + 32));
}

void __43__HMDHomeManager___removeActiveConnection___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v15 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@Unregistering as home manager active because last active connection was removed", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  objc_msgSend(*(id *)(a1 + 32), "browseAssertion");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "accessoryBrowser");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "browseAssertion");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "endActiveAssertion:", v8);

    objc_msgSend(*(id *)(a1 + 32), "setBrowseAssertion:", 0);
  }
  objc_msgSend(*(id *)(a1 + 40), "applicationBundleIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 40), "applicationBundleIdentifier", CFSTR("HMDXPCConnectionBundleIdentifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "postNotificationName:object:userInfo:", CFSTR("HMDHomeManagerInactiveNotification"), *(_QWORD *)(a1 + 32), v9);

}

BOOL __62__HMDHomeManager__handleXPCConnectionDeactivatedNotification___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;

  v2 = objc_msgSend(a2, "principalClass");
  return v2 == objc_opt_class();
}

void __46__HMDHomeManager_handleAccountSettingsUpdate___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v5;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_INFO, "%{public}@Received notification that account settings updated", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v2);
  +[HMDAppleAccountSettings sharedSettings](HMDAppleAccountSettings, "sharedSettings");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isEducationMode"))
  {
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 0;
    v18 = 0;
    v8 = objc_msgSend(v7, "getCurrentiCloudIdentifier:controllerPairingIdentifier:error:", 0, &v18, &v17);
    v9 = v18;
    v10 = v17;
    if (v8)
    {
      v11 = (void *)MEMORY[0x1D17BA0A0]();
      v12 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v20 = v14;
        _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Current account is EDU account, erasing local data", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v11);
      if (v9)
      {
        v16 = v10;
        objc_msgSend(v7, "removeControllerKeyPairForIdentifier:leaveTombstone:error:", v9, 0, &v16);
        v15 = v16;

        objc_msgSend(*(id *)(a1 + 32), "_eraseLocalHomeConfiguration");
        v10 = v15;
      }
    }

  }
}

void __48__HMDHomeManager__setAccountAvailabilityChanged__block_invoke(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if ((objc_msgSend(WeakRetained, "cloudkitAccountStatusDetermined") & 1) == 0)
    {
      objc_msgSend(v5, "_handleAccountAvailabilityChanged:", v3);
      goto LABEL_9;
    }
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = v5;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138543362;
      v11 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@CloudKit account status has been determined", (uint8_t *)&v10, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
  }
  if (v3)
    v3[2](v3);
LABEL_9:

}

void __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  uint64_t v13;
  id v14;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "workQueue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke_2;
  block[3] = &unk_1E89C20C8;
  v8 = *(_QWORD *)(a1 + 32);
  v12 = v5;
  v13 = v8;
  v14 = v6;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

void __41__HMDHomeManager_fetchAndUpdatePCSStatus__block_invoke_2(uint64_t a1)
{
  int v2;
  NSObject *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  const __CFString *v9;
  const __CFString *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  const __CFString *v15;
  int v16;
  void *v17;
  __int16 v18;
  const __CFString *v19;
  __int16 v20;
  const __CFString *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_msgSend(*(id *)(a1 + 40), "pcsEnabled");
    objc_msgSend(*(id *)(a1 + 40), "setPcsEnabled:", ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "deviceToDeviceEncryptionAvailability") >> 1) & 1);
    if (objc_msgSend(*(id *)(a1 + 40), "pcsEnabled"))
    {
      v3 = *(NSObject **)(*(_QWORD *)(a1 + 40) + 16);
      if (os_signpost_enabled(v3))
      {
        LOWORD(v16) = 0;
        _os_signpost_emit_with_name_impl(&dword_1CD062000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ManateeAvailable", ", (uint8_t *)&v16, 2u);
      }
    }
    v4 = (void *)MEMORY[0x1D17BA0A0]();
    v5 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(*(id *)(a1 + 40), "pcsEnabled");
      v9 = CFSTR("Disabled");
      if (v8)
        v10 = CFSTR("Enabled");
      else
        v10 = CFSTR("Disabled");
      v16 = 138543874;
      v17 = v7;
      v19 = v10;
      v18 = 2112;
      if (v2)
        v9 = CFSTR("Enabled");
      v20 = 2112;
      v21 = v9;
      _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Current PCS status: %@, Old PCS Status: %@", (uint8_t *)&v16, 0x20u);

    }
    objc_autoreleasePoolPop(v4);
    if (v2 != objc_msgSend(*(id *)(a1 + 40), "pcsEnabled"))
      logAndPostNotification(CFSTR("HMDHomeManagerPCSStatusChangedNotification"), *(void **)(a1 + 40), 0);
  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(const __CFString **)(a1 + 48);
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v15;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch account info: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
  }
}

void __46__HMDHomeManager__accountAvailabilityChanged___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    if ((objc_msgSend(WeakRetained, "cloudkitAccountStatusDetermined") & 1) != 0)
    {
      v4 = (void *)MEMORY[0x1D17BA0A0]();
      v5 = v3;
      HMFGetOSLogHandle();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543362;
        v26 = v7;
        v8 = "%{public}@CloudKit account status has already been determined";
        v9 = v6;
        v10 = 12;
LABEL_16:
        _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v25, v10);

        goto LABEL_17;
      }
      goto LABEL_17;
    }
    if (*(_BYTE *)(a1 + 40))
    {
      v11 = maxCloudOperationRetries;
      +[HMDDeviceCapabilities deviceCapabilities](HMDDeviceCapabilities, "deviceCapabilities");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "supportsStandaloneMode");

      if (v11 >= 0)
        v14 = v11;
      else
        v14 = v11 + 1;
      v15 = v14 >> 1;
      if (v13)
        v16 = v15;
      else
        v16 = v11;
      if (v16 < 1 || objc_msgSend(v3, "cloudOperationRetryCount") < (unint64_t)v16)
      {
        v4 = (void *)MEMORY[0x1D17BA0A0]();
        v5 = v3;
        HMFGetOSLogHandle();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = 138543618;
          v26 = v7;
          v27 = 2048;
          v28 = objc_msgSend(v5, "cloudOperationRetryCount");
          v8 = "%{public}@Not scheduling account status operation with push notification because already in retry %lu";
          v9 = v6;
          v10 = 22;
          goto LABEL_16;
        }
LABEL_17:

        objc_autoreleasePoolPop(v4);
        goto LABEL_27;
      }
      if ((unint64_t)v16 <= 1)
        v24 = 0;
      else
        v24 = v16 - 2;
      v17 = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v3, "setCloudOperationRetryCount:", v24));
      v18 = v3;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543618;
        v26 = v20;
        v27 = 2048;
        v28 = objc_msgSend(v18, "cloudOperationRetryCount");
        v21 = "%{public}@Setting retry count to %lu, scheduling account status operation";
        v22 = v19;
        v23 = 22;
        goto LABEL_25;
      }
    }
    else
    {
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = v3;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138543362;
        v26 = v20;
        v21 = "%{public}@Scheduling account status operation";
        v22 = v19;
        v23 = 12;
LABEL_25:
        _os_log_impl(&dword_1CD062000, v22, OS_LOG_TYPE_INFO, v21, (uint8_t *)&v25, v23);

      }
    }

    objc_autoreleasePoolPop(v17);
    objc_msgSend(v18, "_setAccountAvailabilityChanged");
  }
LABEL_27:

}

void __45__HMDHomeManager_startWithCompletionHandler___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "appleAccountManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "capabilitiesController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "currentResidentCapabilities");
    v5 = objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = (void *)v5;
      v7 = objc_msgSend(*(id *)(a1 + 32), "residentEnabledState");

      if (!v7)
      {
        objc_msgSend(v3, "productInfo");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "productClass");

        if (v9 == 3)
        {
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          objc_msgSend(*(id *)(a1 + 32), "homes", 0);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
          if (v11)
          {
            v12 = *(_QWORD *)v28;
            while (2)
            {
              for (i = 0; i != v11; ++i)
              {
                if (*(_QWORD *)v28 != v12)
                  objc_enumerationMutation(v10);
                v14 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
                if (objc_msgSend(v14, "isOwnerUser"))
                {
                  objc_msgSend(v14, "residentCapableDevices");
                  v15 = (void *)objc_claimAutoreleasedReturnValue();
                  v16 = objc_msgSend(v15, "containsObject:", v3);

                  if (v16)
                  {
                    v17 = (void *)MEMORY[0x1D17BA0A0]();
                    v18 = *(id *)(a1 + 32);
                    HMFGetOSLogHandle();
                    v19 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                    {
                      HMFGetLogIdentifier();
                      v20 = (void *)objc_claimAutoreleasedReturnValue();
                      *(_DWORD *)buf = 138543362;
                      v32 = v20;
                      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_INFO, "%{public}@Found ourselves as a resident in one or more homes, enabling ourselves as a resident device", buf, 0xCu);

                    }
                    objc_autoreleasePoolPop(v17);
                    v11 = 1;
                    goto LABEL_20;
                  }
                }
              }
              v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
              if (v11)
                continue;
              break;
            }
          }
LABEL_20:

        }
        else
        {
          v11 = 1;
        }
        objc_msgSend(*(id *)(a1 + 32), "_updateResidentEnabledOnThisDevice:forceNotify:message:", v11, 0, 0);
      }
    }
    else
    {

    }
  }
  v21 = *(_QWORD **)(a1 + 32);
  if (v21[96])
  {
    objc_msgSend(v21, "notificationCenter");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), sel___handleWatchConnected_, CFSTR("HMDWatcherManagerWatchConnectedNotification"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 768));

    objc_msgSend(*(id *)(a1 + 32), "notificationCenter");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), sel___handleWatchDisconnected_, CFSTR("HMDWatcherManagerWatchDisconnectedNotification"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 768));

    objc_msgSend(*(id *)(a1 + 32), "_checkAndAddWatchDevicesWithResend:", 0);
    v21 = *(_QWORD **)(a1 + 32);
  }
  if (v21[34])
  {
    objc_msgSend(v21, "notificationCenter");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), sel___handleCompanionUpdated_, CFSTR("HMDCompanionManagerUpdatedCompanionNotification"), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 272));

    objc_msgSend(*(id *)(a1 + 32), "_checkAndInformCompanionDevice");
    v21 = *(_QWORD **)(a1 + 32);
  }
  objc_msgSend(v21, "chipXPCListener");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "start");

  v26 = *(_QWORD *)(a1 + 40);
  if (v26)
    (*(void (**)(void))(v26 + 16))();

}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "__cloudRecordWithObjectID:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9 && objc_msgSend(*(id *)(a1 + 32), "isOwnerUser"))
    {
      v10 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "uuid");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "UUIDString");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v32 = v12;
        v33 = 2112;
        v34 = v14;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Home missing cloud record, creating add object %@", buf, 0x16u);

      }
      objc_autoreleasePoolPop(v10);
      objc_msgSend(WeakRetained, "backingStore");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "transaction:options:", CFSTR("homeMigration"), v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(a1 + 32), "modelObjectWithChangeType:", 1);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (void *)MEMORY[0x1D17BA0A0]();
      HMFGetOSLogHandle();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        HMFGetLogIdentifier();
        v29 = v17;
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "uuid");
        v30 = v19;
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "UUIDString");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v32 = v21;
        v33 = 2112;
        v34 = v23;
        v35 = 2112;
        v36 = v18;
        _os_log_impl(&dword_1CD062000, v20, OS_LOG_TYPE_DEBUG, "%{public}@[Home Migration %@] Home Fixup Change: %@", buf, 0x20u);

        v19 = v30;
        v17 = v29;
      }

      objc_autoreleasePoolPop(v19);
      objc_msgSend(v17, "add:withMessage:", v18, 0);
      objc_msgSend(v17, "save");
      objc_msgSend(*(id *)(a1 + 32), "zoneID");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "uploadHomeToCloudZone:withDelay:", v24, 0.0);

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    }

  }
  v25 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "uuid");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v32 = v27;
    v33 = 2112;
    v34 = v28;
    _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_DEFAULT, "%{public}@Completed home fixup for %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v25);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_464(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = WeakRetained;
  if (v6 || !WeakRetained)
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_2;
    v12[3] = &unk_1E89C2528;
    objc_copyWeak(&v16, (id *)(a1 + 56));
    v10 = *(id *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 32);
    v13 = v10;
    v14 = v11;
    v15 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v9, "migrateCloudZone:completion:", v5, v12);

    objc_destroyWeak(&v16);
  }

}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_468(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  id *v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id obj;
  _QWORD v35[4];
  id v36;
  id v37;
  id v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t v43[128];
  uint8_t buf[4];
  void *v45;
  __int16 v46;
  void *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v32 = v5;
  v33 = v6;
  if (!WeakRetained)
  {
    v13 = *(NSObject **)(a1 + 32);
    goto LABEL_22;
  }
  v31 = a1;
  if (!v6)
  {
    if (objc_msgSend(v5, "count"))
    {
      v29 = (id *)(a1 + 48);
      v14 = (void *)MEMORY[0x1D17BA0A0]();
      v30 = WeakRetained;
      v15 = WeakRetained;
      HMFGetOSLogHandle();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v45 = v17;
        _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_INFO, "%{public}@General Object Migrating (Run Transactions) for Home Manager", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v14);
      objc_msgSend(v15, "backingStore");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      +[HMDBackingStoreTransactionOptions defaultCloudOptions](HMDBackingStoreTransactionOptions, "defaultCloudOptions");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "transaction:options:", CFSTR("generalHomeManagerRunObjectMigration"), v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      obj = v32;
      v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
      if (v21)
      {
        v22 = *(_QWORD *)v40;
        do
        {
          for (i = 0; i != v21; ++i)
          {
            if (*(_QWORD *)v40 != v22)
              objc_enumerationMutation(obj);
            v24 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * i);
            v25 = (void *)MEMORY[0x1D17BA0A0]();
            v26 = v15;
            HMFGetOSLogHandle();
            v27 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v45 = v28;
              v46 = 2112;
              v47 = v24;
              _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEBUG, "%{public}@[General Home Manager Migration] Object Change: %@", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v25);
            objc_msgSend(v20, "add:withMessage:", v24, 0);
          }
          v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
        }
        while (v21);
      }

      WeakRetained = v30;
      if (v20)
      {
        v35[0] = MEMORY[0x1E0C809B0];
        v35[1] = 3221225472;
        v35[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_471;
        v35[3] = &unk_1E89BCB20;
        objc_copyWeak(&v38, v29);
        v36 = *(id *)(v31 + 32);
        v37 = *(id *)(v31 + 40);
        objc_msgSend(v20, "run:", v35);

        objc_destroyWeak(&v38);
        WeakRetained = v30;
        goto LABEL_23;
      }
    }
    v13 = *(NSObject **)(v31 + 32);
LABEL_22:
    dispatch_group_leave(v13);
    goto LABEL_23;
  }
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = WeakRetained;
  v10 = WeakRetained;
  HMFGetOSLogHandle();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v45 = v12;
    v46 = 2112;
    v47 = v33;
    _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@Unable to fetch migration changes in home manager because of error (%@).", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  dispatch_group_leave(*(dispatch_group_t *)(v31 + 32));
  WeakRetained = v9;
LABEL_23:

}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_2_473(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id WeakRetained;
  void *v9;
  _QWORD v10[4];
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (!v6 && WeakRetained && objc_msgSend(v5, "count"))
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_3;
    v10[3] = &unk_1E89C0678;
    objc_copyWeak(&v11, v7);
    objc_msgSend(v9, "_loadHomeZonesFromCache:completion:", v5, v10);
    objc_destroyWeak(&v11);
  }

}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  const char *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v9;
      v10 = "%{public}@[Recover Home] Failed to recover homes";
LABEL_6:
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v11, 0xCu);

    }
  }
  else if (v8)
  {
    HMFGetLogIdentifier();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138543362;
    v12 = v9;
    v10 = "%{public}@[Recover Home] Homes recovered";
    goto LABEL_6;
  }

  objc_autoreleasePoolPop(v5);
}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_471(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
    objc_msgSend(*(id *)(a1 + 40), "markMigratedObjectsAsMigrated");
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = WeakRetained;
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "UUIDString");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v25 = v8;
      v26 = 2112;
      v27 = v10;
      v28 = 2112;
      v29 = v3;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Finished migrating home %@ with error %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(v6, "cloudDataSyncManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "homeManagerZone");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_465;
      v20[3] = &unk_1E89BCAD0;
      objc_copyWeak(&v23, (id *)(a1 + 56));
      v14 = *(id *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 48);
      v21 = v14;
      v22 = v15;
      objc_msgSend(v12, "cloudRecordsForParentID:completionHandler:", v13, v20);

      objc_destroyWeak(&v23);
    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = v6;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v25 = v19;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_ERROR, "%{public}@Cannot determine home manager zone to clean", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v16);
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    }

  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

}

void __59__HMDHomeManager_migrateModelObjectsToCloud_schemaVersion___block_invoke_465(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  id WeakRetained;
  uint64_t v34;
  id obj;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t buf[4];
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && objc_msgSend(v5, "count"))
  {
    v30 = a1;
    v31 = v6;
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(WeakRetained, "uuid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "UUIDString");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v41 = v9;
      v42 = 2112;
      v43 = v11;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Cleanup Records in Home Manager %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(WeakRetained, "backingStore");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[HMDBackingStoreTransactionOptions defaultXPCOptions](HMDBackingStoreTransactionOptions, "defaultXPCOptions");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "transaction:options:", CFSTR("homeManagerCleanup"), v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v32 = v5;
    obj = v5;
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v46, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v37;
      do
      {
        v18 = 0;
        v34 = v16;
        do
        {
          if (*(_QWORD *)v37 != v17)
            objc_enumerationMutation(obj);
          objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * v18), "extractObjectChange");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (v19)
          {
            v20 = objc_alloc((Class)objc_opt_class());
            objc_msgSend(v19, "uuid");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "parentUUID");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = (void *)objc_msgSend(v20, "initWithObjectChangeType:uuid:parentUUID:", 3, v21, v22);

            v24 = (void *)MEMORY[0x1D17BA0A0]();
            HMFGetOSLogHandle();
            v25 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
            {
              HMFGetLogIdentifier();
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(WeakRetained, "uuid");
              v27 = v14;
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v28, "UUIDString");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543874;
              v41 = v26;
              v42 = 2112;
              v43 = v29;
              v44 = 2112;
              v45 = v23;
              _os_log_impl(&dword_1CD062000, v25, OS_LOG_TYPE_DEBUG, "%{public}@[Home Manager Cleanup %@] Object Change: %@", buf, 0x20u);

              v14 = v27;
              v16 = v34;

            }
            objc_autoreleasePoolPop(v24);
            objc_msgSend(v14, "add:withMessage:", v23, 0);

          }
          ++v18;
        }
        while (v16 != v18);
        v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v46, 16);
      }
      while (v16);
    }

    objc_msgSend(v14, "save");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v30 + 40) + 8) + 24) = 1;
    dispatch_group_leave(*(dispatch_group_t *)(v30 + 32));

    v6 = v31;
    v5 = v32;
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

}

void __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  id v40;
  void *context;
  void *v42;
  void *v43;
  void *v44;
  _QWORD v45[4];
  id v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t v56[128];
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  id v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = WeakRetained;
  v43 = v5;
  v44 = v6;
  if (v5 && !v6 && WeakRetained && objc_msgSend(v5, "count"))
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v52, v56, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v53;
      while (2)
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v53 != v11)
            objc_enumerationMutation(v9);
          v13 = *(id *)(*((_QWORD *)&v52 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v14 = v13;
          else
            v14 = 0;
          v15 = v14;

          if (v15)
          {

            v26 = (void *)objc_msgSend(v9, "mutableCopy");
            objc_msgSend(v26, "removeObject:", v13);
            objc_msgSend(v8, "backingStore");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDBackingStoreTransactionOptions defaultCloudOptions](HMDBackingStoreTransactionOptions, "defaultCloudOptions");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "transaction:options:", CFSTR("kTransactionUpdate"), v28);
            v42 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v42, "add:", v13);
            objc_msgSend(v8, "backingStore");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDBackingStoreTransactionOptions defaultCloudOptions](HMDBackingStoreTransactionOptions, "defaultCloudOptions");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "transaction:options:", CFSTR("kTransactionUpdate"), v30);
            v31 = (void *)objc_claimAutoreleasedReturnValue();

            context = (void *)MEMORY[0x1D17BA0A0](objc_msgSend(v31, "addObjects:", v26));
            v32 = v8;
            HMFGetOSLogHandle();
            v33 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "uuid", context);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              v36 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138543874;
              v58 = v34;
              v59 = 2112;
              v60 = v35;
              v61 = 2112;
              v62 = v36;
              _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Running transaction to add home %@/%@", buf, 0x20u);

            }
            objc_autoreleasePoolPop(context);
            v45[0] = MEMORY[0x1E0C809B0];
            v45[1] = 3221225472;
            v45[2] = __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_451;
            v45[3] = &unk_1E89BCA58;
            objc_copyWeak(&v51, (id *)(a1 + 56));
            v37 = *(void **)(a1 + 40);
            v50 = *(_QWORD *)(a1 + 48);
            v46 = v37;
            v38 = v13;
            v39 = *(_QWORD *)(a1 + 32);
            v47 = v38;
            v48 = v39;
            v40 = v31;
            v49 = v40;
            objc_msgSend(v42, "run:", v45);

            objc_destroyWeak(&v51);
            goto LABEL_23;
          }
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v52, v56, 16);
        if (v10)
          continue;
        break;
      }
    }

    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v17 = v8;
    HMFGetOSLogHandle();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v58 = v19;
      v59 = 2112;
      v60 = v20;
      _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Cannot determine home model for home zone %@, will not recover this home zone", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
  }
  else
  {
    v21 = (void *)MEMORY[0x1D17BA0A0]();
    v22 = v8;
    HMFGetOSLogHandle();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      v58 = v24;
      v59 = 2112;
      v60 = v25;
      v61 = 2112;
      v62 = v6;
      _os_log_impl(&dword_1CD062000, v23, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Failed to fetch models from record cache for home zone %@ with error %@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v21);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
LABEL_23:

}

void __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_453(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 52);
    v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v2 = _Block_copy(*(const void **)(a1 + 32));
  v3 = v2;
  if (v2)
    (*((void (**)(void *, id))v2 + 2))(v2, v4);

}

void __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_451(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  id v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  if (v3 || !WeakRetained)
  {
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v23 = v15;
      v24 = 2112;
      v25 = v3;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Cannot continue, encountered an error while processing home model: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "uuid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138543874;
      v23 = v8;
      v24 = 2112;
      v25 = v9;
      v26 = 2112;
      v27 = v10;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Running transactions for the rest of the home %@/%@", buf, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    v11 = *(void **)(a1 + 56);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_452;
    v16[3] = &unk_1E89BCA30;
    objc_copyWeak(&v21, (id *)(a1 + 72));
    v20 = *(_QWORD *)(a1 + 64);
    v12 = *(id *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    v17 = v12;
    v18 = v13;
    v19 = *(id *)(a1 + 32);
    objc_msgSend(v11, "run:", v16);

    objc_destroyWeak(&v21);
  }

}

void __53__HMDHomeManager__loadHomeZonesFromCache_completion___block_invoke_452(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = WeakRetained;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138543618;
      v14 = v9;
      v15 = 2112;
      v16 = v3;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Cannot continue, encountered an error while processing reset of the home models: %@", (uint8_t *)&v13, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 40);
      v13 = 138543874;
      v14 = v10;
      v15 = 2112;
      v16 = v11;
      v17 = 2112;
      v18 = v12;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Finished recovering home %@/%@", (uint8_t *)&v13, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));

}

void __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  _QWORD v15[5];
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v8 = WeakRetained;
  if (v6 || !WeakRetained)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = v8;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v21 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Stale Zone Information] Encountered an error while querying cloud cache for home zone records, cannot continue", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }
  else
  {
    v9 = MEMORY[0x1E0C809B0];
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke_449;
    v18[3] = &unk_1E89BCA08;
    v19 = a1[4];
    objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v18);
    objc_msgSend(v8, "workQueue");
    v10 = objc_claimAutoreleasedReturnValue();
    v15[0] = v9;
    v15[1] = 3221225472;
    v15[2] = __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke_2;
    v15[3] = &unk_1E89C20C8;
    v15[4] = v8;
    v16 = a1[5];
    v17 = a1[4];
    dispatch_async(v10, v15);

  }
}

void __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke_449(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(a2, "extractObjectChange");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v8;
  else
    v3 = 0;
  v4 = v3;
  v5 = v4;
  if (v4)
  {
    v6 = *(void **)(a1 + 32);
    objc_msgSend(v4, "uuid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v7);

  }
}

void __61__HMDHomeManager__cleanHomeManagerZoneInformationWithoutHome__block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  NSObject *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "cloudZones");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  v31 = v3;
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v3, "count"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "cloudZones");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v35;
    v32 = v6;
    v33 = v4;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v35 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        v12 = *(void **)(a1 + 40);
        objc_msgSend(v11, "uuid");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v12, "containsObject:", v13))
        {

LABEL_9:
          objc_msgSend(v11, "uuid");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v16);
          goto LABEL_13;
        }
        v14 = *(void **)(a1 + 48);
        objc_msgSend(v11, "uuid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v14) = objc_msgSend(v14, "containsObject:", v15);

        if ((v14 & 1) != 0)
          goto LABEL_9;
        v17 = (void *)MEMORY[0x1D17BA0A0]();
        v18 = *(id *)(a1 + 32);
        HMFGetOSLogHandle();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          HMFGetLogIdentifier();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "uuid");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v39 = v20;
          v40 = 2112;
          v41 = v21;
          _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@[Stale Zone Information] Found stale zone %@, removing", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v17);
        objc_msgSend(*(id *)(a1 + 32), "cloudZones");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "removeObject:", v11);

        objc_msgSend(*(id *)(a1 + 32), "cloudDataSyncManager");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "uuid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "UUIDString");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "removeHomeZoneName:", v24);

        v6 = v32;
        v4 = v33;
LABEL_13:

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    }
    while (v8);
  }

  v25 = (void *)MEMORY[0x1D17BA0A0]();
  v26 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = *(void **)(a1 + 40);
    v30 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138544130;
    v39 = v28;
    v40 = 2112;
    v41 = v29;
    v42 = 2112;
    v43 = v30;
    v44 = 2112;
    v45 = v4;
    _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_INFO, "%{public}@[Stale Zone Information] Finished zone audit. Zones with homes %@, Zones with models: %@, Zones with cloudZones %@", buf, 0x2Au);

  }
  objc_autoreleasePoolPop(v25);

}

void __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  void (**v20)(void *, void *, _QWORD);
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  _QWORD v26[4];
  id v27;
  void *v28;
  id v29;
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v8 = WeakRetained;
  if (v6 || !WeakRetained)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = v8;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v31 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Encountered an error while querying cloud cache for home zone records, cannot continue", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    v14 = _Block_copy(*(const void **)(a1 + 48));
    v15 = v14;
    if (v14)
      (*((void (**)(void *, _QWORD, id))v14 + 2))(v14, 0, v6);
  }
  else
  {
    v9 = MEMORY[0x1E0C809B0];
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke_444;
    v26[3] = &unk_1E89BC990;
    v27 = *(id *)(a1 + 32);
    v28 = v8;
    v29 = *(id *)(a1 + 40);
    objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v26);
    if (objc_msgSend(*(id *)(a1 + 40), "count"))
    {
      v22[0] = v9;
      v22[1] = 3221225472;
      v22[2] = __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke_446;
      v22[3] = &unk_1E89BC9B8;
      objc_copyWeak(&v25, (id *)(a1 + 56));
      v24 = *(id *)(a1 + 48);
      v23 = *(id *)(a1 + 40);
      objc_msgSend(v8, "_findCloudHomeZonesToIgnore:", v22);

      objc_destroyWeak(&v25);
    }
    else
    {
      v16 = (void *)MEMORY[0x1D17BA0A0]();
      v17 = v8;
      HMFGetOSLogHandle();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v31 = v19;
        _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] No home zone records found without a corresponding home", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v16);
      v20 = (void (**)(void *, void *, _QWORD))_Block_copy(*(const void **)(a1 + 48));
      if (v20)
      {
        v21 = (void *)objc_msgSend(*(id *)(a1 + 40), "copy");
        v20[2](v20, v21, 0);

      }
    }

    v15 = v27;
  }

}

void __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke_444(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "extractObjectChange");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = v4;
  else
    v5 = 0;
  v6 = v5;

  if (v6)
  {
    v7 = *(void **)(a1 + 32);
    objc_msgSend(v6, "uuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v7) = objc_msgSend(v7, "containsObject:", v8);

    if ((v7 & 1) == 0)
    {
      v9 = (void *)MEMORY[0x1D17BA0A0]();
      v10 = *(id *)(a1 + 40);
      HMFGetOSLogHandle();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        HMFGetLogIdentifier();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "uuid");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138543618;
        v17 = v12;
        v18 = 2112;
        v19 = v13;
        _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] Found home zone record but cannot find local home for zone: %@", (uint8_t *)&v16, 0x16u);

      }
      objc_autoreleasePoolPop(v9);
      v14 = *(void **)(a1 + 48);
      objc_msgSend(v6, "uuid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "addObject:", v15);

    }
  }

}

void __50__HMDHomeManager__findZoneInformationWithoutHome___block_invoke_446(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  void (**v9)(void *, void *, _QWORD);
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = WeakRetained;
  if (v6 || !WeakRetained)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = v8;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138543362;
      v18 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@[Recover Home] Encountered an error while querying transaction journal, cannot continue", (uint8_t *)&v17, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    v15 = _Block_copy(*(const void **)(a1 + 40));
    v16 = v15;
    if (v15)
      (*((void (**)(void *, _QWORD, id))v15 + 2))(v15, 0, v6);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "minusSet:", v5);
    v9 = (void (**)(void *, void *, _QWORD))_Block_copy(*(const void **)(a1 + 40));
    if (v9)
    {
      v10 = (void *)objc_msgSend(*(id *)(a1 + 32), "copy");
      v9[2](v9, v10, 0);

    }
  }

}

uint64_t __46__HMDHomeManager__findCloudHomeZonesToIgnore___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id WeakRetained;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const __CFString *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  NSObject *v28;
  void *v29;
  __CFString *v30;
  void *v31;
  uint64_t v32;
  id v34;
  id v35;
  id obj;
  void *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  const __CFString *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v35 = a3;
  v34 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v9 = v7;
  v10 = WeakRetained;
  obj = v9;
  v38 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
  if (v38)
  {
    v11 = *(_QWORD *)v40;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v40 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v12);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          if (objc_msgSend(v13, "objectChangeType", v34) == 1 || objc_msgSend(v13, "objectChangeType") == 3)
          {
            objc_msgSend(v13, "uuid");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            +[HMDHome zoneIDFromHomeUUID:](HMDHome, "zoneIDFromHomeUUID:", v14);
            v15 = (void *)objc_claimAutoreleasedReturnValue();

            v16 = (void *)MEMORY[0x1D17BA0A0]();
            v17 = v10;
            HMFGetOSLogHandle();
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v37 = v16;
              v20 = v11;
              v21 = v10;
              v22 = a1;
              if (objc_msgSend(v13, "objectChangeType") == 1)
                v23 = CFSTR("add");
              else
                v23 = CFSTR("delete");
              objc_msgSend(v13, "uuid");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138544130;
              v44 = v19;
              v45 = 2112;
              v46 = v23;
              a1 = v22;
              v10 = v21;
              v11 = v20;
              v16 = v37;
              v47 = 2112;
              v48 = v24;
              v49 = 2112;
              v50 = v15;
              _os_log_impl(&dword_1CD062000, v18, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] There is a %@ found home %@%@, ignoring home zone for recovery", buf, 0x2Au);

            }
            objc_autoreleasePoolPop(v16);
            v25 = *(void **)(a1 + 32);
LABEL_16:
            objc_msgSend(v25, "addObject:", v15);

          }
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v13, "objectChangeType", v34, v35) != 3)
          {
            v26 = (void *)MEMORY[0x1D17BA0A0]();
            v27 = v10;
            HMFGetOSLogHandle();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "uuid");
              v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543618;
              v44 = v29;
              v45 = 2112;
              v46 = v30;
              _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_INFO, "%{public}@[Recover Home] There is a delete found home zone %@, ignoring home zone for recovery", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v26);
            v31 = *(void **)(a1 + 32);
            objc_msgSend(v13, "uuid");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = v31;
            goto LABEL_16;
          }
        }
        ++v12;
      }
      while (v38 != v12);
      v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v51, 16);
      v38 = v32;
    }
    while (v32);
  }

  return 1;
}

void __46__HMDHomeManager__findCloudHomeZonesToIgnore___block_invoke_443(uint64_t a1, void *a2)
{
  void (**v3)(void *, void *, id);
  void *v4;
  id v5;

  v5 = a2;
  v3 = (void (**)(void *, void *, id))_Block_copy(*(const void **)(a1 + 40));
  if (v3)
  {
    v4 = (void *)objc_msgSend(*(id *)(a1 + 32), "copy");
    v3[2](v3, v4, v5);

  }
}

void __48__HMDHomeManager__reloadHomeDataFromLocalStore___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _BOOL4 v16;
  id v17;
  void *v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _BOOL4 v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  const char *v31;
  NSObject *v32;
  uint32_t v33;
  id obj;
  id v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!v9)
  {
    if (!v7)
      goto LABEL_20;
    v35 = 0;
    v16 = +[HMDPersistentStore hasControllerKeyWithUsername:error:](HMDPersistentStore, "hasControllerKeyWithUsername:error:", v8, &v35);
    v17 = v35;
    v18 = (void *)MEMORY[0x1D17BA0A0]();
    v19 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = v20;
    if (v16)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v37 = v22;
        _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Found controller key for loaded home data", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v18);
      objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "updateActiveControllerPairingIdentifier:", v8);

      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      obj = *(id *)(v24 + 40);
      v25 = +[HMDPersistentStore deserializeHomeData:localStorage:fromData:](HMDPersistentStore, "deserializeHomeData:localStorage:fromData:", &obj, 1, v7);
      objc_storeStrong((id *)(v24 + 40), obj);
      v18 = (void *)MEMORY[0x1D17BA0A0]();
      v19 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v26 = objc_claimAutoreleasedReturnValue();
      v21 = v26;
      if (v25)
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v7, "length"));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v37 = v27;
          v38 = 2112;
          v39 = (uint64_t)v28;
          _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_INFO, "%{public}@Deserialized homes size: %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v18);
        objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "ensureControllerKeyExistsForAllViews");

        goto LABEL_19;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v37 = v30;
        v31 = "%{public}@Failed to deserialize homes from sql archive";
        v32 = v21;
        v33 = 12;
        goto LABEL_17;
      }
    }
    else if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v37 = v30;
      v38 = 2112;
      v39 = (uint64_t)v17;
      v31 = "%{public}@Could not find controller key in keychain error: %@";
      v32 = v21;
      v33 = 22;
LABEL_17:
      _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_ERROR, v31, buf, v33);

    }
    objc_autoreleasePoolPop(v18);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
LABEL_19:

    goto LABEL_20;
  }
  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v9, "code");
    objc_msgSend(v9, "localizedDescription");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543874;
    v37 = v13;
    v38 = 2048;
    v39 = v14;
    v40 = 2112;
    v41 = v15;
    _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_ERROR, "%{public}@Could not load home data from archived file -- continuing with error %ld:%@", buf, 0x20u);

  }
  objc_autoreleasePoolPop(v10);
LABEL_20:

}

void __48__HMDHomeManager__reloadHomeDataFromLocalStore___block_invoke_430(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_eraseLocalHomeData");
  else
    objc_msgSend(*(id *)(a1 + 32), "resume");

}

uint64_t __47__HMDHomeManager_reloadHomeDataFromLocalStore___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reloadHomeDataFromLocalStore:", *(unsigned __int8 *)(a1 + 40));
}

void __62__HMDHomeManager__updateHomesDiscoveredBonjourServicesMetrics__block_invoke(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (!a2)
  {
    v5 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(WeakRetained, "bonjourBrowser");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "numberWithUnsignedInteger:", objc_msgSend(v6, "discoveredServicesCountForServiceType:", CFSTR("_meshcop._udp.")));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v4, "bonjourBrowser");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "numberWithUnsignedInteger:", objc_msgSend(v9, "discoveredServicesCountForServiceType:", CFSTR("_sleep-proxy._udp.")));
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    objc_msgSend(v4, "homes", 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v19 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          if (objc_msgSend(v16, "homeLocation") == 1)
          {
            objc_msgSend(v16, "setAvailableBorderRouters:", v7);
            objc_msgSend(v16, "setAvailableBSPsCount:", v10);
          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v13);
    }

  }
  objc_msgSend(v4, "bonjourBrowser");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stop");

}

void __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = 138543618;
    v8 = v6;
    v9 = 2112;
    v10 = v3;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Completed creating cloud cached with error %@", (uint8_t *)&v7, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

uint64_t __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_409(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:", 0, 0, 0, 0);
}

void __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_419(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  HMDIDSFirewallManagerContext *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  HMDIDSFirewallManagerContext *v11;
  HMDIDSFirewallManager *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    v7 = [HMDIDSFirewallManagerContext alloc];
    v8 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[HMDIDSFirewallManagerContext initWithHomeManager:IDSFirewall:notificationCenter:workQueue:](v7, "initWithHomeManager:IDSFirewall:notificationCenter:workQueue:", v8, v5, v9, v10);

    v12 = -[HMDIDSFirewallManager initWithContext:]([HMDIDSFirewallManager alloc], "initWithContext:", v11);
    objc_msgSend(*(id *)(a1 + 32), "setIdsFirewallManager:", v12);

    objc_msgSend(*(id *)(a1 + 32), "idsFirewallManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "start");

  }
  else
  {
    v14 = (void *)MEMORY[0x1D17BA0A0]();
    v15 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543618;
      v19 = v17;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to retrieve IDSFirewall with error: %@", (uint8_t *)&v18, 0x16u);

    }
    objc_autoreleasePoolPop(v14);
  }

}

uint64_t __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke_424(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "postFinishSetupForCurrentAccessoryFollowUpIfNeeded");
}

uint64_t __200__HMDHomeManager__loadMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_uncommittedTransactions_backingStoreFactory_reloadData___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setWatchSkipVersionCheck:", 1);
}

HMDBackingStore *__277__HMDHomeManager_initWithMessageDispatcher_accessoryBrowser_messageFilterChain_homeData_localDataDecryptionFailed_identityRegistry_accountRegistry_metricsManager_configuringStateController_diagnosticInfoController_currentAccessorySetupMetricDispatcher_uncommittedTransactions___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  HMDBackingStore *v3;
  void *v4;
  HMDBackingStore *v5;

  v2 = a2;
  v3 = [HMDBackingStore alloc];
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("030440CB-974B-44F3-8786-7191F302252E"));
  v5 = -[HMDBackingStore initWithUUID:homeManager:](v3, "initWithUUID:homeManager:", v4, v2);

  return v5;
}

+ (void)saveAccessoryCache:(id)a3 forIdentifier:(id)a4
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D28628]), "initWithName:", CFSTR("com.apple.homed.btle-cache-save."));
  getBLEAccessoryCachePath();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringByAppendingFormat:", CFSTR("/%@"), v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (!v11 || (objc_msgSend(v11, "writeToFile:atomically:", v10, 1) & 1) == 0)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v17 = v15;
      v18 = 2112;
      v19 = v10;
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, "%{public}@Failed caching to file: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v13);
  }

  objc_autoreleasePoolPop(v7);
}

+ (id)getAccessoryCacheForIdentifier:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  void *v16;
  uint64_t v17;
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  getBLEAccessoryCachePath();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAppendingFormat:", CFSTR("/%@"), v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = 0;
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:options:error:", v5, 2, &v20);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v20;
  v8 = v7;
  if (!v6)
  {
    objc_msgSend(v7, "domain");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v16, "isEqualToString:", *MEMORY[0x1E0CB28A8]))
    {

      goto LABEL_12;
    }
    v17 = objc_msgSend(v8, "code");

    if (v17 == 260)
    {
LABEL_12:
      v9 = 0;
      goto LABEL_13;
    }
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v22 = v12;
      v23 = 2112;
      v24 = v5;
      v25 = 2112;
      v26 = v8;
      v13 = "%{public}@Unable to load contents of cache file %@ - error %@";
      v14 = v11;
      v15 = 32;
      goto LABEL_9;
    }
LABEL_10:

    objc_autoreleasePoolPop(v10);
    goto LABEL_12;
  }

  v19 = 0;
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v6, &v19);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v19;
  if (!v9)
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v12;
      v23 = 2112;
      v24 = v8;
      v13 = "%{public}@Failed to unarchive accessory cache from data: %@";
      v14 = v11;
      v15 = 22;
LABEL_9:
      _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);

      goto LABEL_10;
    }
    goto LABEL_10;
  }
LABEL_13:

  return v9;
}

+ (void)removeAccessoryCacheForIdentifier:(id)a3
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = (void *)MEMORY[0x1E0CB3620];
  v4 = a3;
  objc_msgSend(v3, "defaultManager");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  getBLEAccessoryCachePath();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByAppendingFormat:", CFSTR("/%@"), v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "removeItemAtPath:error:", v6, 0);
}

+ (id)convertSaveReasonToTransationReason:(id)a3
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  __CFString *v7;

  v3 = a3;
  if (v3)
  {
    if (convertSaveReasonToTransationReason__pred != -1)
      dispatch_once(&convertSaveReasonToTransationReason__pred, &__block_literal_global_538);
    objc_msgSend((id)convertSaveReasonToTransationReason___reasonMap, "objectForKey:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (v4)
      v6 = (void *)v4;
    else
      v6 = v3;
    v7 = v6;

  }
  else
  {
    v7 = CFSTR("kUnknownSaveReason");
  }

  return v7;
}

+ (BOOL)doesSaveReasonAffectHomeManager:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = doesSaveReasonAffectHomeManager__pred;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&doesSaveReasonAffectHomeManager__pred, &__block_literal_global_539);
  v5 = objc_msgSend((id)doesSaveReasonAffectHomeManager___homeManagerReason, "containsObject:", v4);

  return v5;
}

+ (BOOL)doesSaveReasonAffectOnlyLocalData:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = doesSaveReasonAffectOnlyLocalData__pred;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&doesSaveReasonAffectOnlyLocalData__pred, &__block_literal_global_541);
  v5 = objc_msgSend((id)doesSaveReasonAffectOnlyLocalData___localReason, "containsObject:", v4);

  return v5;
}

+ (BOOL)doesSaveReasonRequireForceSyncToWatch:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = doesSaveReasonRequireForceSyncToWatch__pred;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&doesSaveReasonRequireForceSyncToWatch__pred, &__block_literal_global_542);
  v5 = objc_msgSend((id)doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons, "containsObject:", v4);

  return v5;
}

+ (BOOL)shouldIncrementGenerationCounterForReason:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = shouldIncrementGenerationCounterForReason__onceToken;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&shouldIncrementGenerationCounterForReason__onceToken, &__block_literal_global_543);
  v5 = objc_msgSend((id)shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons, "containsObject:", v4);

  return v5 ^ 1;
}

+ (BOOL)shouldIgnoreExpectedConfigurationVersionUpdateForReason:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = shouldIgnoreExpectedConfigurationVersionUpdateForReason__pred;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&shouldIgnoreExpectedConfigurationVersionUpdateForReason__pred, &__block_literal_global_544);
  v5 = objc_msgSend((id)shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons, "containsObject:", v4);

  return v5;
}

+ (BOOL)doesSaveReasonNotAffectLocalData:(id)a3
{
  uint64_t v3;
  id v4;
  char v5;

  v3 = doesSaveReasonNotAffectLocalData__onceToken;
  v4 = a3;
  if (v3 != -1)
    dispatch_once(&doesSaveReasonNotAffectLocalData__onceToken, &__block_literal_global_545);
  v5 = objc_msgSend((id)doesSaveReasonNotAffectLocalData___noLocalReason, "containsObject:", v4);

  return v5;
}

+ (unint64_t)legacyDataSizeLimit
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unint64_t v6;

  objc_msgSend(MEMORY[0x1E0D28678], "sharedPreferences");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "preferenceForKey:", CFSTR("legacyDataSizeLimit"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "numberValue");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v3, "numberValue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "unsignedIntegerValue");

  }
  else
  {
    v6 = 800000;
  }

  return v6;
}

+ (id)getUniqueDeviceIdSalt
{
  void *v2;
  id v3;

  v2 = (void *)CFPreferencesCopyAppValue(CFSTR("kUniqueDeviceIdentifierSaltkey"), CFSTR("com.apple.homed.notbackedup"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = v2;
  else
    v3 = 0;

  return v3;
}

+ (id)deriveIntentGroupIdentifierFromBaseUUID:(id)a3
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0CB3A28];
  v4 = a3;
  +[HMDHomeManager _getIntentGroupClientIdentifierSalt](HMDHomeManager, "_getIntentGroupClientIdentifierSalt");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "hm_deriveUUIDFromBaseUUID:identifierSalt:", v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

+ (id)_getIntentGroupClientIdentifierSalt
{
  void *v2;
  void *v3;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("F28CD9BC-565D-4CA8-980A-6B1680D76593"));
  objc_msgSend(v2, "hm_convertToData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

+ (id)createIdentifierSalt:(id)a3 deviceSpecific:(BOOL)a4
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v5 = a3;
  if (!isWatch() || a4)
  {
    +[HMDHomeManager saltForDeviceSpecificIdentifier](HMDHomeManager, "saltForDeviceSpecificIdentifier");
    v6 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    +[HMDHomeManager getUniqueDeviceIdSalt](HMDHomeManager, "getUniqueDeviceIdSalt");
    v6 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)v6;
  if (v6)
  {
    v8 = (void *)objc_msgSend(v5, "mutableCopy");
    objc_msgSend(v8, "appendData:", v7);
    objc_msgSend(v8, "hm_generateSHA1");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

+ (id)saltForDeviceSpecificIdentifier
{
  id v2;
  void *v3;

  v2 = (id)uniqueDeviceId;
  objc_msgSend(v2, "hm_generateSHA1");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

+ (BOOL)isThisDeviceAdminOfHome:(id)a3
{
  id v3;
  char v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v10;
  id v11;

  v3 = a3;
  if (isWatch())
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D165F0], "systemStore");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 0;
    v11 = 0;
    objc_msgSend(v5, "getAllAvailableControllerPublicKeys:secretKeys:userNames:error:", 0, 0, &v11, &v10);
    v6 = v11;
    v7 = v10;

    objc_msgSend(v3, "ownerName");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v6, "containsObject:", v8);

  }
  return v4;
}

+ (id)remotePeerDeviceAddress:(id)a3
{
  void *v3;
  void *v4;

  v3 = (void *)IDSCopyIDForDevice();
  if (v3)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", v3);
    objc_msgSend(v4, "replaceOccurrencesOfString:withString:options:range:", CFSTR("self-token"), CFSTR("token"), 1, 0, objc_msgSend(v4, "length"));
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

+ (id)getAllBackingStoreObjects:(int64_t)a3 primaryHomeUUID:(id)a4 cloudZone:(id)a5 appData:(id)a6
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v9 = a4;
  v10 = a5;
  v11 = a6;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("1CAEDC10-E3E5-41A4-BB17-A9EEBA14A938"));
  objc_msgSend((id)objc_opt_class(), "emptyModelObjectWithChangeType:homeManagerUUID:", 1, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(v9, "UUIDString");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setPrimaryHomeUUID:", v15);

  }
  +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:](HMDCloudZoneInformation, "cloudZoneInformationWithCloudZones:", v10);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setCloudZoneInformation:", v16);

  objc_msgSend(v12, "addObject:", v14);
  if (a3 >= 3 && v11)
  {
    objc_msgSend(v11, "modelObjectWithChangeType:", 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addObject:", v17);

  }
  return v12;
}

+ (id)emptyModelObjectWithChangeType:(unint64_t)a3 homeManagerUUID:(id)a4
{
  id v5;
  HMDHomeManagerModel *v6;

  v5 = a4;
  v6 = -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:]([HMDHomeManagerModel alloc], "initWithObjectChangeType:uuid:parentUUID:", a3, v5, 0);

  return v6;
}

void __51__HMDHomeManager_doesSaveReasonNotAffectLocalData___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4[0] = CFSTR("MetadataUpdate");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)doesSaveReasonNotAffectLocalData___noLocalReason;
  doesSaveReasonNotAffectLocalData___noLocalReason = v2;

}

void __74__HMDHomeManager_shouldIgnoreExpectedConfigurationVersionUpdateForReason___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4[0] = CFSTR("userUserIDUpdated");
  v4[1] = CFSTR("userUpdateAccountIdentifier");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 2);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons;
  shouldIgnoreExpectedConfigurationVersionUpdateForReason___ignoredReasons = v2;

}

void __60__HMDHomeManager_shouldIncrementGenerationCounterForReason___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v4[5] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4[0] = CFSTR("HMDApplicationTerminatedSaveReason");
  v4[1] = CFSTR("kModifyCharacterisiticNotificationsRequestKey");
  v4[2] = CFSTR("lastSyncedHomeConfigVersion");
  v4[3] = CFSTR("kCharacteristicPreviousValue");
  v4[4] = CFSTR("kCharacteristicValueUpdateStateNumberKey");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons;
  shouldIncrementGenerationCounterForReason__noIncreaseGenerationCounterReasons = v2;

}

void __56__HMDHomeManager_doesSaveReasonRequireForceSyncToWatch___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4[0] = *MEMORY[0x1E0CB9EB0];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons;
  doesSaveReasonRequireForceSyncToWatch___watchForceSyncReasons = v2;

}

void __52__HMDHomeManager_doesSaveReasonAffectOnlyLocalData___block_invoke()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[41];

  v6[40] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v6[0] = CFSTR("kTriggerFiredNotificationKey");
  v6[1] = CFSTR("triggerSourceInternalMessage");
  v6[2] = CFSTR("kResetConfigRequestKey");
  v6[3] = CFSTR("kModifyCharacterisiticNotificationsRequestKey");
  v6[4] = CFSTR("kCharacteristicEnableNotificationRequestKey");
  v6[5] = CFSTR("Incoming invitations updated");
  v6[6] = CFSTR("kAccessHomeInviteRequestKey");
  v6[7] = CFSTR("kDismissBulletinInternalRequestKey");
  v6[8] = CFSTR("kDismissDialogInternalRequestKey");
  v6[9] = CFSTR("kApplicationVendorIDStoreUpdate");
  v1 = *MEMORY[0x1E0CBAAE8];
  v6[10] = *MEMORY[0x1E0CBAAB8];
  v6[11] = v1;
  v6[12] = CFSTR("kExecuteActionSetRequestKey");
  v6[13] = CFSTR("HMDApplicationTerminatedSaveReason");
  v6[14] = CFSTR("kSearchForNewAccessoriesRequestKey");
  v6[15] = CFSTR("kUpdateAccessAllowedWhenLockedRequestKey");
  v6[16] = CFSTR("kBulletinBoardNotificationUpdateNotificationKey");
  v6[17] = CFSTR("HMDBulletinBoardNotificationServiceGroupUpdatedSaveReason");
  v6[18] = CFSTR("kCharacteristicPreviousValue");
  v6[19] = CFSTR("kCharacteristicValueUpdateStateNumberKey");
  v6[20] = CFSTR("kTransactionUpdate");
  v6[21] = CFSTR("HMDHomePresenceMonitorUpdatedReason");
  v6[22] = CFSTR("userDisplayNameUpdated");
  v6[23] = CFSTR("lastSyncedHomeConfigVersion");
  v6[24] = CFSTR("AccessoryHasSymptomsHandlerUpdated");
  v6[25] = CFSTR("HMDUserCloudShareIDCodingKey");
  v6[26] = CFSTR("Update Shared Home Source Version");
  v6[27] = CFSTR("HMDHAPAccessoryUpdateCameraProfileNotificationSettingsReason");
  v6[28] = CFSTR("HMDHAPAccessorySaveAuthMethodReason");
  v6[29] = CFSTR("HMDAccessoryResidentReachabilityNotificationRegistrationMessage");
  v6[30] = CFSTR("HMDHomeManagerRecoveryVersionUpdated");
  v6[31] = CFSTR("Upgraded To HH2");
  v2 = *MEMORY[0x1E0CB7B90];
  v6[32] = CFSTR("HMDAccessorySoftwareUpdate");
  v6[33] = v2;
  v6[34] = *MEMORY[0x1E0CB9EB0];
  v6[35] = CFSTR("HMDHAPAccessoryWoLUpdateLocallyLabel");
  v6[36] = CFSTR("HMDHAPAccessoryUpdateHasPostedBulletinForWalletKeyOnboardingReason");
  v6[37] = CFSTR("HMDAppleMediaAccessoryWiFiMACLocalOnlyUpdateLabel");
  v6[38] = CFSTR("Add Accessory Locally");
  v6[39] = CFSTR("kAccessoryLastSeenKey");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)doesSaveReasonAffectOnlyLocalData___localReason;
  doesSaveReasonAffectOnlyLocalData___localReason = v4;

}

void __50__HMDHomeManager_doesSaveReasonAffectHomeManager___block_invoke()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[24];

  v4[23] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1E0C99E60];
  v4[0] = CFSTR("kAddHomeRequestKey");
  v4[1] = CFSTR("kRemoveHomeRequestKey");
  v4[2] = CFSTR("kRemoveAllUsersFromAccessoriesRequestKey");
  v4[3] = CFSTR("kHomeManagerUpdatedKey");
  v4[4] = CFSTR("kHomeManagerCloudZoneAddedKey");
  v4[5] = CFSTR("kHomeManagerCloudZoneRemovedKey");
  v4[6] = CFSTR("kSetPrimaryHomeRequestKey");
  v4[7] = CFSTR("kUserRemovedRequestKey");
  v4[8] = CFSTR("kUserManagementOperationAddedKey");
  v4[9] = CFSTR("kUserManagementOperationRemovedKey");
  v4[10] = CFSTR("kHomeDataSyncRequestKey");
  v4[11] = CFSTR("kHomeDataFragmentedSyncRequestKey");
  v4[12] = *MEMORY[0x1E0CB90C8];
  v4[13] = CFSTR("MetadataUpdate");
  v4[14] = CFSTR("Object registration");
  v4[15] = CFSTR("Add Account");
  v4[16] = CFSTR("Update Devices");
  v4[17] = CFSTR("Update Handles");
  v4[18] = CFSTR("Remove Account");
  v4[19] = CFSTR("Update Device Name");
  v4[20] = CFSTR("Update Device");
  v4[21] = CFSTR("device pushback");
  v4[22] = CFSTR("accountHandle pushback");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 23);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setWithArray:", v1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)doesSaveReasonAffectHomeManager___homeManagerReason;
  doesSaveReasonAffectHomeManager___homeManagerReason = v2;

}

void __54__HMDHomeManager_convertSaveReasonToTransationReason___block_invoke()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[3];
  _QWORD v3[4];

  v3[3] = *MEMORY[0x1E0C80C00];
  v2[0] = CFSTR("kRemoteUsersDeregistered");
  v2[1] = CFSTR("kAddEventTriggerRequestKey");
  v3[0] = CFSTR("kRemoveUserRequestKey");
  v3[1] = CFSTR("kAddTriggerRequestKey");
  v2[2] = CFSTR("kAddTimerTriggerRequestKey");
  v3[2] = CFSTR("kAddTriggerRequestKey");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, v2, 3);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)convertSaveReasonToTransationReason___reasonMap;
  convertSaveReasonToTransationReason___reasonMap = v0;

}

void __29__HMDHomeManager_logCategory__block_invoke()
{
  uint64_t v0;
  void *v1;

  HMFCreateOSLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)logCategory__hmf_once_v15_166197;
  logCategory__hmf_once_v15_166197 = v0;

}

- (void)initializeHH2FrameworkSwitch
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  HMDHH2FrameworkSwitch *v7;
  HMDHH2FrameworkSwitch *v8;
  _QWORD v9[4];
  id v10;
  uint8_t buf[4];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v12 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Initializing framework switch with auto switch enabled", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  objc_initWeak((id *)buf, v4);
  v7 = [HMDHH2FrameworkSwitch alloc];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __66__HMDHomeManager_HH2FrameworkSwitch__initializeHH2FrameworkSwitch__block_invoke;
  v9[3] = &unk_1E89C00C8;
  objc_copyWeak(&v10, (id *)buf);
  v8 = -[HMDHH2FrameworkSwitch initWithAutoSwitchEnabledWithHomeManager:callBeforeFrameworkSwitchCompletionHandler:](v7, "initWithAutoSwitchEnabledWithHomeManager:callBeforeFrameworkSwitchCompletionHandler:", v4, v9);
  -[HMDHomeManager setHh2FrameworkSwitch:](v4, "setHh2FrameworkSwitch:", v8);

  objc_destroyWeak(&v10);
  objc_destroyWeak((id *)buf);
}

- (id)_performPreHH2RebootTasks
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 138543362;
    v19 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Perform HH2 Pre reboot task", (uint8_t *)&v18, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeObjectForKey:", CFSTR("HMDHomeWalletKeyManagerDidTryReplacingKeyAlready"));

  +[HMDXPCMessageTransport defaultTransport](HMDXPCMessageTransport, "defaultTransport");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stop");

  +[HMDResetConfigPostCleanup writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:](HMDResetConfigPostCleanup, "writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:", 5);
  +[HMDHH2MigratorRecord removeMigrationFailureRecord](HMDHH2MigratorRecord, "removeMigrationFailureRecord");
  +[HMDHH2MigratorRecord singleRecord](HMDHH2MigratorRecord, "singleRecord");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v9, "dryRun") & 1) != 0 || objc_msgSend(v9, "migrateFromTestDirectory"))
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = v4;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138543362;
      v19 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@Not running per device migration as we are doing a dryRun for HH2 migration.", (uint8_t *)&v18, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0D28588], "futureWithNoValue");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[HMDHomeManager maybeStashOwnerMetadataForPostMigrationPingUsingMigratorRecord:](v4, "maybeStashOwnerMetadataForPostMigrationPingUsingMigratorRecord:", v9);
    -[HMDHomeManager stashSharedHomeInfoNotYetMigrated](v4, "stashSharedHomeInfoNotYetMigrated");
    -[HMDHomeManager metricsManager](v4, "metricsManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "saveCounters");

    -[HMDHomeManager metricsManager](v4, "metricsManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "waitToCompleteCurrentlyQueuedTasks");

    -[HMDHomeManager _pushChangesToAllUsersOfAllHomesForMigration](v4, "_pushChangesToAllUsersOfAllHomesForMigration");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager _storeAllLocalSettingsForThisDevice](v4, "_storeAllLocalSettingsForThisDevice");
    -[HMDHomeManager _migrateCurrentAccessoryDataIfNeeded](v4, "_migrateCurrentAccessoryDataIfNeeded");
    -[HMDHomeManager migrateLocalMediaGroupParticipantData](v4, "migrateLocalMediaGroupParticipantData");
  }

  return v14;
}

- (void)_storeAllLocalSettingsForThisDevice
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[HMDHomeManager homes](v4, "homes");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543618;
    v10 = v6;
    v11 = 2112;
    v12 = v7;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Going to store Bulletin board notification settings for each home. %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager homes](v4, "homes");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_176434);

  -[HMDHomeManager saveAccessAllowedWhenLockedSettingToLocalDisk](v4, "saveAccessAllowedWhenLockedSettingToLocalDisk");
}

- (void)maybeStashOwnerMetadataForPostMigrationPingUsingMigratorRecord:(id)a3
{
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HMDHomeManager *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  id obj;
  uint64_t v38;
  HMDHomeManager *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  void *v50;
  __int16 v51;
  void *v52;
  _QWORD v53[3];
  _QWORD v54[3];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v35 = a3;
  v36 = (void *)objc_opt_new();
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v39 = self;
  -[HMDHomeManager homes](self, "homes");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v55, 16);
  if (v40)
  {
    v38 = *(_QWORD *)v42;
    do
    {
      for (i = 0; i != v40; ++i)
      {
        if (*(_QWORD *)v42 != v38)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
        if ((objc_msgSend(v5, "isOwnerUser") & 1) != 0)
          goto LABEL_11;
        objc_msgSend(v5, "owner");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "account");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "senderCorrelationIdentifier");
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v8)
        {
LABEL_11:
          v24 = (void *)MEMORY[0x1D17BA0A0]();
          v25 = v39;
          HMFGetOSLogHandle();
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "owner");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "account");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "senderCorrelationIdentifier");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "uuid");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "isOwnerUser");
            HMFBooleanToString();
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138544130;
            v46 = v27;
            v47 = 2112;
            v48 = v30;
            v49 = 2112;
            v50 = v31;
            v51 = 2112;
            v52 = v32;
            _os_log_impl(&dword_1CD062000, v26, OS_LOG_TYPE_INFO, "%{public}@Not stashing owner merge id (%@) for home %@ (isOwnerUser=%@)", buf, 0x2Au);

          }
          objc_autoreleasePoolPop(v24);
        }
        else
        {
          v9 = (void *)MEMORY[0x1D17BA0A0]();
          v10 = v39;
          HMFGetOSLogHandle();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "uuid");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v46 = v12;
            v47 = 2112;
            v48 = v13;
            _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_INFO, "%{public}@Stashing owner account metadata for home %@ to ping after migration", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v9);
          v53[0] = CFSTR("HMDHomeManagerAutoAcceptMigrationDateKey");
          objc_msgSend(MEMORY[0x1E0C99D68], "now");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v54[0] = v14;
          v53[1] = CFSTR("HMDHomeManagerAutoAcceptOwnerMergeIDKey");
          objc_msgSend(v5, "owner");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "account");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "senderCorrelationIdentifier");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v54[1] = v17;
          v53[2] = CFSTR("HMDHomeManagerAutoAcceptOwnerHandleKey");
          objc_msgSend(v5, "owner");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "accountHandle");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "remoteDestinationString");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v54[2] = v20;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v54, v53, 3);
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v5, "uuid");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "UUIDString");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "setObject:forKeyedSubscript:", v21, v23);

        }
      }
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v55, 16);
    }
    while (v40);
  }

  if (objc_msgSend(v36, "count"))
  {
    -[HMDHomeManager userDefaults](v39, "userDefaults");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)objc_msgSend(v36, "copy");
    objc_msgSend(v33, "setObject:forKey:", v34, CFSTR("HMDHomeManagerHomesAwaitingHH2AutoAcceptKey"));

  }
}

- (void)stashSharedHomeInfoNotYetMigrated
{
  void *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  const __CFString *v30;
  void *v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  void *v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v25 = (void *)objc_opt_new();
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  -[HMDHomeManager homes](self, "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v27;
    *(_QWORD *)&v4 = 138543618;
    v23 = v4;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v27 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
        if ((objc_msgSend(v8, "isOwnerUser", v23) & 1) == 0)
        {
          objc_msgSend(v8, "owner");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "account");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "senderCorrelationIdentifier");
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          if (v11)
          {
            v12 = (void *)MEMORY[0x1D17BA0A0]();
            v13 = self;
            HMFGetOSLogHandle();
            v14 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              HMFGetLogIdentifier();
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "uuid");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v23;
              v33 = v15;
              v34 = 2112;
              v35 = v16;
              _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Stashing info of shared home %@ not being migrated, not yet", buf, 0x16u);

            }
            objc_autoreleasePoolPop(v12);
            v30 = CFSTR("HMDHomeManagerAutoAcceptMigrationDateKey");
            objc_msgSend(MEMORY[0x1E0C99D68], "now");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = v17;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "uuid");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "UUIDString");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "setObject:forKeyedSubscript:", v18, v20);

          }
        }
      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v26, v36, 16);
    }
    while (v5);
  }

  if (objc_msgSend(v25, "count"))
  {
    -[HMDHomeManager userDefaults](self, "userDefaults");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)objc_msgSend(v25, "copy");
    objc_msgSend(v21, "setObject:forKey:", v22, CFSTR("HMDHomeManagerSharedHomesNotYetMigratedKey"));

  }
}

- (void)_registerForFrameworkSwitch
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint8_t buf[4];
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (isiOSDevice() || isMac())
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@Registering for Upgrade to HH2 migration request", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    -[HMDHomeManager messageDispatcher](v4, "messageDispatcher");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *MEMORY[0x1E0CB9128];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v9;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v25, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "registerForMessage:receiver:policies:selector:", v8, v4, v10, sel__handleUpgradeToHH2Message_);

  }
  -[HMDHomeManager _initializeAutoMigration](self, "_initializeAutoMigration");
  if (isInternalBuild())
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v27 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Registering for test HH2 migration request message", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    -[HMDHomeManager messageDispatcher](v12, "messageDispatcher");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *MEMORY[0x1E0CB9110];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v17;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v24, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "registerForMessage:receiver:policies:selector:", v16, v12, v18, sel__handleTestHH2Migration_);

  }
  -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = *MEMORY[0x1E0CB8F80];
  +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v21;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v23, 1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "registerForMessage:receiver:policies:selector:", v20, self, v22, sel__handleFetchSetupMode_);

}

- (void)_handleFetchSetupMode:(id)a3
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v7 = *MEMORY[0x1E0CB90D8];
  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a3;
  objc_msgSend(v3, "numberWithBool:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "respondWithPayload:", v6);

}

- (void)_handleSwitchSetupMode:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  CFIndex AppIntegerValue;
  CFIndex v10;
  void *v11;
  int v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  Boolean keyExistsAndHasValidFormat[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((_os_feature_enabled_impl() & 1) != 0)
  {
    v5 = *MEMORY[0x1E0CB90D8];
    objc_msgSend(v4, "numberForKey:", *MEMORY[0x1E0CB90D8]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v6, "integerValue");
      keyExistsAndHasValidFormat[0] = 0;
      AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("HHTTSUMode"), CFSTR("com.apple.homed"), keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat[0])
        v10 = AppIntegerValue;
      else
        v10 = 0;
      -[HMDHomeManager hh2FrameworkSwitch](self, "hh2FrameworkSwitch");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "switchToSetupMode:", v8);

      if (v12)
      {
        objc_msgSend(v4, "respondWithSuccess");
      }
      else
      {
        v22 = (void *)MEMORY[0x1D17BA0A0]();
        v23 = self;
        HMFGetOSLogHandle();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          HMFGetLogIdentifier();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
          v31 = v25;
          _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Mode switch will result in a change do not callback message.", keyExistsAndHasValidFormat, 0xCu);

        }
        objc_autoreleasePoolPop(v22);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v10, v5);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = v26;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "respondWithPayload:", v27);

      }
    }
    else
    {
      v17 = (void *)MEMORY[0x1D17BA0A0]();
      v18 = self;
      HMFGetOSLogHandle();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
        v31 = v20;
        _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@No setup mode in request", keyExistsAndHasValidFormat, 0xCu);

      }
      objc_autoreleasePoolPop(v17);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 3);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "respondWithError:", v21);

      v7 = 0;
    }
  }
  else
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = self;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)keyExistsAndHasValidFormat = 138543362;
      v31 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_ERROR, "%{public}@Setup mode is not enabled Failing", keyExistsAndHasValidFormat, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "respondWithError:", v7);
  }

}

- (void)waitForHH2SentinelZoneToBeRemoved
{
  id v2;

  -[HMDHomeManager hh2FrameworkSwitch](self, "hh2FrameworkSwitch");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "waitForHH2SentinelZoneToBeRemoved");

}

- (void)_initializeAutoMigration
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  HMDHH2AutoMigrationMonitor *v7;
  void *v8;
  HMDHH2AutoMigrationMonitor *v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((_os_feature_enabled_impl() & 1) != 0 || (_os_feature_enabled_impl() & 1) != 0)
  {
    -[HMDHomeManager messageDispatcher](self, "messageDispatcher");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *MEMORY[0x1E0CB8E78];
    +[HMDXPCMessagePolicy policyWithEntitlements:](HMDXPCMessagePolicy, "policyWithEntitlements:", 5);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v15, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "registerForMessage:receiver:policies:selector:", v4, self, v6, sel__handleAttemptHH2AutoMigrationMessage_);

    v7 = [HMDHH2AutoMigrationMonitor alloc];
    -[HMDHomeManager hh2AutoMigrationEligibilityChecker](self, "hh2AutoMigrationEligibilityChecker");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = -[HMDHH2AutoMigrationMonitor initWithHomeManager:eligibilityChecker:](v7, "initWithHomeManager:eligibilityChecker:", self, v8);
    -[HMDHomeManager setHh2AutoMigrationMonitor:](self, "setHh2AutoMigrationMonitor:", v9);

    -[HMDHomeManager hh2AutoMigrationMonitor](self, "hh2AutoMigrationMonitor");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "startMonitoring");

  }
  else
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v17 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Not initializing auto-migration support because feature is disabled", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
  }
}

- (void)fetchHasOnlyEmptyHomesWithCompletion:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    -[HMDHomeManager workQueue](self, "workQueue");
    v5 = objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __75__HMDHomeManager_HH2FrameworkSwitch__fetchHasOnlyEmptyHomesWithCompletion___block_invoke;
    v10[3] = &unk_1E89C1D68;
    v10[4] = self;
    v11 = v4;
    dispatch_async(v5, v10);

  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = self;
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v13 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Nil completion provided", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
  }

}

- (void)_fetchHasOnlyEmptyHomesWithCompletion:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[5];
  id v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isHomeManagerFirstFetchFinished");

  if ((v6 & 1) != 0)
  {
    -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __76__HMDHomeManager_HH2FrameworkSwitch___fetchHasOnlyEmptyHomesWithCompletion___block_invoke;
    v14[3] = &unk_1E89C01D8;
    v14[4] = self;
    v15 = v4;
    objc_msgSend(v7, "totalHomesInCloudZones:", v14);

  }
  else
  {
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v17 = v11;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@First fetch for Home Manager's zone is not done yet.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v8);
    v12 = _Block_copy(v4);
    v13 = v12;
    if (v12)
      (*((void (**)(void *, _QWORD))v12 + 2))(v12, 0);

  }
}

- (void)_determineEmptyHomesForOwnersWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  dispatch_group_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  _QWORD block[4];
  id v28;
  HMDHomeManager *v29;
  id v30;
  _QWORD v31[4];
  id v32;
  HMDHomeManager *v33;
  dispatch_group_t v34;
  id v35;
  uint8_t buf[4];
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "cloudCache");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v9 = dispatch_group_create();
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager homes](self, "homes");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = MEMORY[0x1E0C809B0];
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke;
      v31[3] = &unk_1E89C0228;
      v13 = v10;
      v32 = v13;
      v33 = self;
      v34 = v9;
      v35 = v8;
      v14 = v9;
      objc_msgSend(v11, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v31);

      -[HMDHomeManager workQueue](self, "workQueue");
      v15 = objc_claimAutoreleasedReturnValue();
      block[0] = v12;
      block[1] = 3221225472;
      block[2] = __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_44;
      block[3] = &unk_1E89C1B48;
      v28 = v13;
      v29 = self;
      v30 = v4;
      v16 = v13;
      dispatch_group_notify(v14, v15, block);

    }
    else
    {
      v22 = (void *)MEMORY[0x1D17BA0A0]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v37 = v25;
        _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@Cloud cache is nil. Cannot proceed to determine empty homes. aborting...", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v22);
      v26 = _Block_copy(v4);
      v14 = v26;
      if (v26)
        ((void (*)(NSObject *, _QWORD))v26[2].isa)(v26, 0);
    }

  }
  else
  {
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v37 = v20;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@No homes found.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
    v21 = _Block_copy(v4);
    v8 = v21;
    if (v21)
      (*((void (**)(void *, _QWORD))v21 + 2))(v21, 0);
  }

}

- (void)determineEmptyHomesForSharedUsersWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  dispatch_group_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  HMDHomeManager *v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  _QWORD block[5];
  id v28;
  id v29;
  _QWORD v30[5];
  id v31;
  dispatch_group_t v32;
  id v33;
  uint8_t buf[4];
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[HMDHomeManager homes](self, "homes");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    -[HMDHomeManager cloudDataSyncManager](self, "cloudDataSyncManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "cloudCache");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v9 = dispatch_group_create();
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[HMDHomeManager homes](self, "homes");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = MEMORY[0x1E0C809B0];
      v30[0] = MEMORY[0x1E0C809B0];
      v30[1] = 3221225472;
      v30[2] = __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke;
      v30[3] = &unk_1E89C0228;
      v30[4] = self;
      v13 = v10;
      v31 = v13;
      v32 = v9;
      v33 = v8;
      v14 = v9;
      objc_msgSend(v11, "hmf_enumerateWithAutoreleasePoolUsingBlock:", v30);

      -[HMDHomeManager workQueue](self, "workQueue");
      v15 = objc_claimAutoreleasedReturnValue();
      block[0] = v12;
      block[1] = 3221225472;
      block[2] = __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_50;
      block[3] = &unk_1E89C1B48;
      block[4] = self;
      v28 = v13;
      v29 = v4;
      v16 = v13;
      dispatch_group_notify(v14, v15, block);

    }
    else
    {
      v22 = (void *)MEMORY[0x1D17BA0A0]();
      v23 = self;
      HMFGetOSLogHandle();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v35 = v25;
        _os_log_impl(&dword_1CD062000, v24, OS_LOG_TYPE_DEFAULT, "%{public}@[Shared User] : Cloud cache is nil. Cannot proceed to determine empty homes. aborting...", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v22);
      v26 = _Block_copy(v4);
      v14 = v26;
      if (v26)
        ((void (*)(NSObject *, _QWORD))v26[2].isa)(v26, MEMORY[0x1E0C9AA70]);
    }

  }
  else
  {
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v35 = v20;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_DEFAULT, "%{public}@[Shared User] : No homes found.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
    v21 = _Block_copy(v4);
    v8 = v21;
    if (v21)
      (*((void (**)(void *, _QWORD))v21 + 2))(v21, MEMORY[0x1E0C9AA70]);
  }

}

- (void)autoMigrateToHH2WithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = 138543362;
    v10 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Auto Migration: Upgrading to HH2", (uint8_t *)&v9, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager _performAutoMigrationToHH2WithIsDryRun:completionHandler:](v6, "_performAutoMigrationToHH2WithIsDryRun:completionHandler:", 0, v4);

}

- (void)dryRunHH2MigrationWithCompletionHandler:(id)a3
{
  id v4;
  BOOL v5;
  void *v6;
  HMDHomeManager *v7;
  NSObject *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void (**v15)(void *, void *);
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = self;
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Not running the dry run as FF is OFF", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v11);
    v15 = (void (**)(void *, void *))_Block_copy(v4);
    if (!v15)
      goto LABEL_15;
    v16 = (void *)MEMORY[0x1E0CB35C8];
    v17 = 2724;
    goto LABEL_14;
  }
  v5 = -[HMDHomeManager canPerformDryRunOfHH2Migration](self, "canPerformDryRunOfHH2Migration");
  v6 = (void *)MEMORY[0x1D17BA0A0]();
  v7 = self;
  HMFGetOSLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
  if (!v5)
  {
    if (v9)
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v18;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Not running the dry run as it ran previously for this software version", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v15 = (void (**)(void *, void *))_Block_copy(v4);
    if (!v15)
      goto LABEL_15;
    v16 = (void *)MEMORY[0x1E0CB35C8];
    v17 = 2725;
LABEL_14:
    objc_msgSend(v16, "hmPrivateErrorWithCode:", v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v15[2](v15, v19);

LABEL_15:
    goto LABEL_16;
  }
  if (v9)
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 138543362;
    v21 = v10;
    _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_INFO, "%{public}@Going to do a Dry run of HH2 migration as we never ran it on this software version", (uint8_t *)&v20, 0xCu);

  }
  objc_autoreleasePoolPop(v6);
  -[HMDHomeManager _performAutoMigrationToHH2WithIsDryRun:completionHandler:](v7, "_performAutoMigrationToHH2WithIsDryRun:completionHandler:", 1, v4);
LABEL_16:

}

- (BOOL)canPerformDryRunOfHH2Migration
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (isInternalBuild())
  {
    v3 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = self;
    HMFGetOSLogHandle();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543362;
      v21 = v6;
      _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_INFO, "%{public}@No restriction for dry run for internal build", (uint8_t *)&v20, 0xCu);

    }
    objc_autoreleasePoolPop(v3);
    LOBYTE(v4) = 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D28690], "productInfo");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "softwareVersion");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "buildVersion");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = self;
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v13;
      v22 = 2112;
      v23 = v9;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_INFO, "%{public}@current OS version : %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringForKey:", CFSTR("hh2MigrationDryRunBuildNumber"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v16 = (void *)MEMORY[0x1D17BA0A0]();
    v4 = v11;
    HMFGetOSLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138543618;
      v21 = v18;
      v22 = 2112;
      v23 = v15;
      _os_log_impl(&dword_1CD062000, v17, OS_LOG_TYPE_INFO, "%{public}@Stored OS version : %@", (uint8_t *)&v20, 0x16u);

    }
    objc_autoreleasePoolPop(v16);
    LODWORD(v4) = HMFEqualObjects() ^ 1;

  }
  return (char)v4;
}

- (void)_performAutoMigrationToHH2WithIsDryRun:(BOOL)a3 completionHandler:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  _QWORD v21[5];
  id v22;
  BOOL v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v4 = a3;
  v28 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v25 = v10;
    v26 = 2112;
    v27 = v11;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@Performing Auto Migration to HH2 with is dry run: %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v7);
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v4)
    objc_msgSend(v12, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CB8FA0]);
  v14 = (void *)MEMORY[0x1E0D285F8];
  v15 = *MEMORY[0x1E0CB9128];
  v16 = objc_alloc(MEMORY[0x1E0D285D8]);
  -[HMDHomeManager uuid](v8, "uuid");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend(v16, "initWithTarget:", v17);
  objc_msgSend(v14, "messageWithName:destination:payload:", v15, v18, v13);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __95__HMDHomeManager_HH2FrameworkSwitch___performAutoMigrationToHH2WithIsDryRun_completionHandler___block_invoke;
  v21[3] = &unk_1E89C0290;
  v23 = v4;
  v21[4] = v8;
  v22 = v6;
  v20 = v6;
  objc_msgSend(v19, "setResponseHandler:", v21);
  -[HMDHomeManager _handleUpgradeToHH2Message:autoMigration:](v8, "_handleUpgradeToHH2Message:autoMigration:", v19, !v4);

}

- (void)_handleUpgradeToHH2Message:(id)a3
{
  -[HMDHomeManager _handleUpgradeToHH2Message:autoMigration:](self, "_handleUpgradeToHH2Message:autoMigration:", a3, 0);
}

- (void)_handleUpgradeToHH2Message:(id)a3 autoMigration:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  int AppBooleanValue;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  id v17;
  void *v18;
  int v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v4 = a4;
  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("isHH2Enabled"), CFSTR("com.apple.homed"), 0);
  v8 = (void *)MEMORY[0x1D17BA0A0]();
  v9 = self;
  HMFGetOSLogHandle();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 138543618;
    v20 = v11;
    v21 = 2112;
    v22 = v12;
    _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Received request to upgrade to HH2 with current isHH2Enabled: %@", (uint8_t *)&v19, 0x16u);

  }
  objc_autoreleasePoolPop(v8);
  if (AppBooleanValue)
  {
    v13 = (void *)MEMORY[0x1D17BA0A0]();
    v14 = v9;
    HMFGetOSLogHandle();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = 138543362;
      v20 = v16;
      _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@HomeKit Daemon is already running HH2 framework. Nothing to be done.", (uint8_t *)&v19, 0xCu);

    }
    objc_autoreleasePoolPop(v13);
    objc_msgSend(v6, "respondWithSuccess");
  }
  else
  {
    if ((objc_msgSend(v6, "BOOLForKey:", *MEMORY[0x1E0CB8FA0]) & 1) == 0 && !v4)
    {
      v17 = -[HMDHH2MigrationDailyTotalsLogEvent initStartWithAutoMigration:dryRun:attemptCount:]([HMDHH2MigrationDailyTotalsLogEvent alloc], "initStartWithAutoMigration:dryRun:attemptCount:", 0, 0, 0);
      -[HMDHomeManager logEventSubmitter](v9, "logEventSubmitter");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "submitLogEvent:", v17);

    }
    -[HMDHomeManager _startHH2MigrationWithRequestMessage:isAutoMigration:](v9, "_startHH2MigrationWithRequestMessage:isAutoMigration:", v6, v4);
  }

}

- (void)_handleAttemptHH2AutoMigrationMessage:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v14 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Received request to attempt auto migration", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager hh2AutoMigrationMonitor](v6, "hh2AutoMigrationMonitor");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __76__HMDHomeManager_HH2FrameworkSwitch___handleAttemptHH2AutoMigrationMessage___block_invoke;
  v11[3] = &unk_1E89C02B8;
  v12 = v4;
  v10 = v4;
  objc_msgSend(v9, "attemptAutoMigrationWithCompletionHandler:", v11);

}

- (BOOL)moveDirectlyToHH2
{
  void *v3;
  HMDHomeManager *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  char v8;
  id v9;
  void *v10;
  HMDHomeManager *v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v4 = self;
  HMFGetOSLogHandle();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v20 = v6;
    _os_log_impl(&dword_1CD062000, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Skipping migration to HH2 as there are no homes need to migrate for this account", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v3);
  -[HMDHomeManager hh2FrameworkSwitch](v4, "hh2FrameworkSwitch");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  v8 = objc_msgSend(v7, "waitForHH2SentinelZoneToBeCreated:error:", &v18, 6.0e10);
  v9 = v18;

  v10 = (void *)MEMORY[0x1D17BA0A0]();
  v11 = v4;
  HMFGetOSLogHandle();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if ((v8 & 1) != 0)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v20 = v14;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Successfully created HH2 sentinel zone as this account does not have any home data.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
    +[HMDResetConfigPostCleanup writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:](HMDResetConfigPostCleanup, "writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:", 5);
    -[HMDHomeManager hh2FrameworkSwitch](v11, "hh2FrameworkSwitch");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "switchToHH2AfterPerformingHH2PreRebootTask");

  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v20 = v16;
      v21 = 2114;
      v22 = v9;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@Cannot move empty account to HH2 because HH2 sentinel zone creation failed: %{public}@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v10);
  }

  return v8;
}

- (BOOL)_onlyHH2SharedHomesExist
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  BOOL v11;
  void *v12;
  HMDHomeManager *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager homes](self, "homes");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  if (!v4)
    return 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  -[HMDHomeManager homes](self, "homes", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v29, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v20 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        if ((objc_msgSend(v10, "isOwnerUser") & 1) != 0 || (objc_msgSend(v10, "isUpdatedToHH2") & 1) == 0)
        {
          v12 = (void *)MEMORY[0x1D17BA0A0]();
          v13 = self;
          HMFGetOSLogHandle();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            HMFGetLogIdentifier();
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "isOwnerUser");
            HMFBooleanToString();
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "isUpdatedToHH2");
            HMFBooleanToString();
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543874;
            v24 = v15;
            v25 = 2112;
            v26 = v16;
            v27 = 2112;
            v28 = v17;
            _os_log_impl(&dword_1CD062000, v14, OS_LOG_TYPE_INFO, "%{public}@Skipping migration because there is at least home that cannot be migrated: owner = %@, isUpdatedToHH2 = %@", buf, 0x20u);

          }
          objc_autoreleasePoolPop(v12);
          v11 = 0;
          goto LABEL_17;
        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v29, 16);
      v11 = 1;
      if (v7)
        continue;
      break;
    }
  }
  else
  {
    v11 = 1;
  }
LABEL_17:

  return v11;
}

- (void)checkAndMoveDirectlyToHH2IfOnlyHH2SharedHomesExistAllowEmptyOwnedHomes:(BOOL)a3
{
  NSObject *v5;
  _QWORD v6[5];
  BOOL v7;

  -[HMDHomeManager workQueue](self, "workQueue");
  v5 = objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __109__HMDHomeManager_HH2FrameworkSwitch__checkAndMoveDirectlyToHH2IfOnlyHH2SharedHomesExistAllowEmptyOwnedHomes___block_invoke;
  v6[3] = &unk_1E89C2758;
  v7 = a3;
  v6[4] = self;
  dispatch_async(v5, v6);

}

- (BOOL)moveDirectlyToHH2IfOnlyHH2SharedHomesExist
{
  _BOOL4 v3;

  v3 = -[HMDHomeManager _onlyHH2SharedHomesExist](self, "_onlyHH2SharedHomesExist");
  if (v3)
    LOBYTE(v3) = -[HMDHomeManager moveDirectlyToHH2](self, "moveDirectlyToHH2");
  return v3;
}

- (void)_startHH2MigrationWithRequestMessage:(id)a3 isAutoMigration:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  uint64_t v7;
  void *v8;
  HMDHomeManager *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  id v16;
  void *v17;
  HMDHomeManager *v18;
  NSObject *v19;
  void *v20;
  id v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  char v25;
  BOOL v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v4 = a4;
  v32 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (_os_feature_enabled_impl())
  {
    v7 = objc_msgSend(v6, "BOOLForKey:", *MEMORY[0x1E0CB8FA0]);
    v8 = (void *)MEMORY[0x1D17BA0A0]();
    v9 = self;
    HMFGetOSLogHandle();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v29 = v11;
      v30 = 2112;
      v31 = v12;
      _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_INFO, "%{public}@Starting HH2 migration with dry run:: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v8);
  }
  else
  {
    v7 = 0;
  }
  if (isInternalBuild())
  {
    v13 = objc_msgSend(v6, "BOOLForKey:", *MEMORY[0x1E0CB90E8]);
    v14 = objc_msgSend(v6, "BOOLForKey:", *MEMORY[0x1E0CB8F88]);
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v27 = 0;
  v15 = -[HMDHomeManager canHH2MigrationBeStarted:](self, "canHH2MigrationBeStarted:", &v27);
  v16 = v27;
  if (v15)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __91__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithRequestMessage_isAutoMigration___block_invoke;
    v23[3] = &unk_1E89C02E0;
    v23[4] = self;
    v24 = v6;
    v25 = v7;
    v26 = v4;
    -[HMDHomeManager _startHH2MigrationWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:isAutoMigration:dryRun:completionHandler:](self, "_startHH2MigrationWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:isAutoMigration:dryRun:completionHandler:", v13, v14, v4, v7, v23);

  }
  else
  {
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = self;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v29 = v20;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@Could not perform migration as migration criteria did not match", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v17);
    objc_msgSend(v6, "respondWithError:", v16);
    if (!(v7 | v4))
    {
      v21 = -[HMDHH2MigrationDailyTotalsLogEvent initEndWithAutoMigration:dryRun:attemptCount:error:]([HMDHH2MigrationDailyTotalsLogEvent alloc], "initEndWithAutoMigration:dryRun:attemptCount:error:", 0, 0, 0, v16);
      -[HMDHomeManager logEventSubmitter](v18, "logEventSubmitter");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "submitLogEvent:", v21);

    }
  }

}

- (void)_startHH2MigrationWithShouldSkipKeyRollOperations:(BOOL)a3 forceMigrationFailureForTesting:(BOOL)a4 isAutoMigration:(BOOL)a5 dryRun:(BOOL)a6 completionHandler:(id)a7
{
  id v12;
  void *v13;
  HMDHomeManager *v14;
  NSObject *v15;
  void *v16;
  HMDHH2FrameworkSwitch *v17;
  uint64_t v18;
  id v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  id v27;
  uint8_t buf[4];
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v12 = a7;
  v13 = (void *)MEMORY[0x1D17BA0A0]();
  v14 = self;
  HMFGetOSLogHandle();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v29 = v16;
    _os_log_impl(&dword_1CD062000, v15, OS_LOG_TYPE_INFO, "%{public}@checking whether CK servers are reachable or not", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v13);
  v17 = -[HMDHH2FrameworkSwitch initWithAutoSwitchDisabledWithHomeManager:]([HMDHH2FrameworkSwitch alloc], "initWithAutoSwitchDisabledWithHomeManager:", v14);
  v27 = 0;
  v18 = -[HMDHH2FrameworkSwitch areCloudKitServersReachableWithError:](v17, "areCloudKitServersReachableWithError:", &v27);
  v19 = v27;
  if (v18 == 1)
  {
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __161__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithShouldSkipKeyRollOperations_forceMigrationFailureForTesting_isAutoMigration_dryRun_completionHandler___block_invoke;
    v21[3] = &unk_1E89C0330;
    v21[4] = v14;
    v22 = v12;
    v23 = a5;
    v24 = a3;
    v25 = a4;
    v26 = a6;
    +[HMDRemoteLoginUtilities fetchIsTwoFactorAuthenticationEnabledForAccountWithReason:completionHandler:](HMDRemoteLoginUtilities, "fetchIsTwoFactorAuthenticationEnabledForAccountWithReason:completionHandler:", CFSTR("HH2 Migration"), v21);

  }
  else
  {
    if (v18)
      +[HMDHH2FrameworkSwitch errorFromHMDCKAccountStatus:](HMDHH2FrameworkSwitch, "errorFromHMDCKAccountStatus:", v18);
    else
      objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:underlyingError:", 2727, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
      (*((void (**)(id, void *))v12 + 2))(v12, v20);

  }
}

- (void)refreshHomeDataAndArchiveLocallyWithIsAutoMigration:(BOOL)a3 completion:(id)a4
{
  id v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  BOOL v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = (void *)MEMORY[0x1D17BA0A0]();
  v8 = self;
  HMFGetOSLogHandle();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v17 = v10;
    _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_INFO, "%{public}@refreshing home data fetch from cloud and going to archive it to local persistent store", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v7);
  objc_initWeak((id *)buf, v8);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __101__HMDHomeManager_HH2FrameworkSwitch__refreshHomeDataAndArchiveLocallyWithIsAutoMigration_completion___block_invoke;
  v12[3] = &unk_1E89C0358;
  objc_copyWeak(&v14, (id *)buf);
  v15 = a3;
  v11 = v6;
  v13 = v11;
  -[HMDHomeManager _fetchAllZones:](v8, "_fetchAllZones:", v12);

  objc_destroyWeak(&v14);
  objc_destroyWeak((id *)buf);

}

- (void)saveToPersistentStoreForHH2MigrationWithCompletionHandler:(id)a3
{
  id v4;
  void *v5;
  HMDHomeManager *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = self;
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 138543362;
    v13 = v8;
    _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@Going to save the home graph to local archive before starting the migration", (uint8_t *)&v12, 0xCu);

  }
  objc_autoreleasePoolPop(v5);
  -[HMDHomeManager backingStore](v6, "backingStore");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_opt_class();
  -[HMDHomeManager backingStore](v6, "backingStore");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "saveToPersistentStoreWithReason:homeManager:shouldIncrementGenerationCounter:backingStore:completionHandler:", CFSTR("RefreshBeforeMigrationToHH2"), v6, 1, v11, v4);

}

- (BOOL)canHH2MigrationBeStarted:(id *)a3
{
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  HMDHH2FrameworkSwitch *v11;
  uint64_t v12;
  id v13;
  void *v14;
  HMDHomeManager *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  HMDHomeManager *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  HMDHomeManager *v27;
  NSObject *v28;
  void *v29;
  BOOL v30;
  void *v31;
  HMDHomeManager *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  HMDHomeManager *v36;
  NSObject *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  int v45;
  void *v46;
  HMDHomeManager *v47;
  NSObject *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  HMDHomeManager *v53;
  NSObject *v54;
  void *v55;
  void *v56;
  HMDHomeManager *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  id v64;
  uint8_t buf[4];
  void *v66;
  __int16 v67;
  void *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isiCloudSwitchEnabled");

  if ((v6 & 1) != 0)
  {
    -[HMDHomeManager cloudDataSyncStateFilter](self, "cloudDataSyncStateFilter");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isKeychainSyncSwitchEnabled");

    if ((v8 & 1) != 0)
    {
      -[HMDHomeManager cloudReachabilityMonitor](self, "cloudReachabilityMonitor");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "isReachable");

      if ((v10 & 1) != 0)
      {
        v11 = -[HMDHH2FrameworkSwitch initWithAutoSwitchDisabledWithHomeManager:]([HMDHH2FrameworkSwitch alloc], "initWithAutoSwitchDisabledWithHomeManager:", self);
        v64 = 0;
        v12 = -[HMDHH2FrameworkSwitch areCloudKitServersReachableWithError:](v11, "areCloudKitServersReachableWithError:", &v64);
        v13 = v64;
        if (v12 != 1)
        {
          if (v12)
          {
            v52 = (void *)MEMORY[0x1D17BA0A0]();
            v53 = self;
            HMFGetOSLogHandle();
            v54 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v66 = v55;
              _os_log_impl(&dword_1CD062000, v54, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as there is a CloudKit account status issue", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v52);
            if (a3)
            {
              +[HMDHH2FrameworkSwitch errorFromHMDCKAccountStatus:](HMDHH2FrameworkSwitch, "errorFromHMDCKAccountStatus:", v12);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              goto LABEL_42;
            }
          }
          else
          {
            v14 = (void *)MEMORY[0x1D17BA0A0]();
            v15 = self;
            HMFGetOSLogHandle();
            v16 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              HMFGetLogIdentifier();
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138543362;
              v66 = v17;
              _os_log_impl(&dword_1CD062000, v16, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as CloudKit account status could not be queried", buf, 0xCu);

            }
            objc_autoreleasePoolPop(v14);
            if (a3)
            {
              objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:underlyingError:", 2727, v13);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_42:
              v30 = 0;
              *a3 = v18;
LABEL_44:

              return v30;
            }
          }
LABEL_43:
          v30 = 0;
          goto LABEL_44;
        }
        v35 = (void *)MEMORY[0x1D17BA0A0]();
        v36 = self;
        HMFGetOSLogHandle();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          HMFGetLogIdentifier();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v39 = (void *)MEMORY[0x1E0CB37E8];
          -[HMDHomeManager reachabilityMonitor](v36, "reachabilityMonitor");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "numberWithUnsignedInteger:", objc_msgSend(v40, "reachabilityPath"));
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138543618;
          v66 = v38;
          v67 = 2112;
          v68 = v41;
          _os_log_impl(&dword_1CD062000, v37, OS_LOG_TYPE_INFO, "%{public}@Current Network path : %@", buf, 0x16u);

        }
        objc_autoreleasePoolPop(v35);
        -[HMDHomeManager reachabilityMonitor](v36, "reachabilityMonitor");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = objc_msgSend(v42, "reachabilityPath");

        if (v43 == 2)
        {
          objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = objc_msgSend(v44, "isLowPowerModeEnabled");

          if (!v45)
          {
            v30 = 1;
            goto LABEL_44;
          }
          v46 = (void *)MEMORY[0x1D17BA0A0]();
          v47 = v36;
          HMFGetOSLogHandle();
          v48 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543362;
            v66 = v49;
            _os_log_impl(&dword_1CD062000, v48, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as low power mode is enabled", buf, 0xCu);

          }
          objc_autoreleasePoolPop(v46);
          if (!a3)
            goto LABEL_43;
          v50 = (void *)MEMORY[0x1E0CB35C8];
          v51 = 2712;
        }
        else
        {
          v56 = (void *)MEMORY[0x1D17BA0A0]();
          v57 = v36;
          HMFGetOSLogHandle();
          v58 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            HMFGetLogIdentifier();
            v59 = (void *)objc_claimAutoreleasedReturnValue();
            v60 = (void *)MEMORY[0x1E0CB37E8];
            -[HMDHomeManager reachabilityMonitor](v57, "reachabilityMonitor");
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v60, "numberWithUnsignedInteger:", objc_msgSend(v61, "reachabilityPath"));
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v66 = v59;
            v67 = 2112;
            v68 = v62;
            _os_log_impl(&dword_1CD062000, v58, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as user is connected on cellular network : %@", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v56);
          if (!a3)
            goto LABEL_43;
          v50 = (void *)MEMORY[0x1E0CB35C8];
          v51 = 2726;
        }
        objc_msgSend(v50, "hmPrivateErrorWithCode:", v51);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_42;
      }
      v31 = (void *)MEMORY[0x1D17BA0A0]();
      v32 = self;
      HMFGetOSLogHandle();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v66 = v34;
        _os_log_impl(&dword_1CD062000, v33, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as CloudKit servers are not reachable", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v31);
      if (a3)
      {
        v23 = (void *)MEMORY[0x1E0CB35C8];
        v24 = 2705;
        goto LABEL_14;
      }
    }
    else
    {
      v26 = (void *)MEMORY[0x1D17BA0A0]();
      v27 = self;
      HMFGetOSLogHandle();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        HMFGetLogIdentifier();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543362;
        v66 = v29;
        _os_log_impl(&dword_1CD062000, v28, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as iCloud keychain sync is not enabled", buf, 0xCu);

      }
      objc_autoreleasePoolPop(v26);
      if (a3)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 76);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_19;
      }
    }
    return 0;
  }
  v19 = (void *)MEMORY[0x1D17BA0A0]();
  v20 = self;
  HMFGetOSLogHandle();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v66 = v22;
    _os_log_impl(&dword_1CD062000, v21, OS_LOG_TYPE_ERROR, "%{public}@Cannot start the HH2 migration as iCloud switch for HomeKit is not enabled", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v19);
  if (!a3)
    return 0;
  v23 = (void *)MEMORY[0x1E0CB35C8];
  v24 = 2013;
LABEL_14:
  objc_msgSend(v23, "hmPrivateErrorWithCode:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_19:
  v30 = 0;
  *a3 = v25;
  return v30;
}

- (void)_handleTestHH2Migration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  HMDHomeManager *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if ((isInternalBuild() & 1) == 0)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = self;
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138543362;
      v12 = v10;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_FAULT, "%{public}@Not sure how this message made it through isInternalBuild checks. DEBUG THIS!!!", (uint8_t *)&v11, 0xCu);

    }
    objc_autoreleasePoolPop(v7);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 10);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  -[HMDHomeManager writeMigrationRecordWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:migrateFromTestDirectory:dryRun:](self, "writeMigrationRecordWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:migrateFromTestDirectory:dryRun:", 1, 0, 1, objc_msgSend(v4, "BOOLForKey:", *MEMORY[0x1E0CB8FA0]));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
LABEL_7:
    objc_msgSend(v4, "respondWithError:", v5);
    goto LABEL_8;
  }
  +[HMDResetConfigPostCleanup writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:](HMDResetConfigPostCleanup, "writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:", 5);
  -[HMDHomeManager hh2FrameworkSwitch](self, "hh2FrameworkSwitch");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)objc_opt_class(), "switchToHH2AndRelaunchHomed");

  objc_msgSend(v4, "respondWithSuccess");
LABEL_8:

}

- (id)writeMigrationRecordWithShouldSkipKeyRollOperations:(BOOL)a3 forceMigrationFailureForTesting:(BOOL)a4 migrateFromTestDirectory:(BOOL)a5 dryRun:(BOOL)a6
{
  _BOOL8 v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  void *v11;
  HMDHomeManager *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _BOOL8 v18;
  void *v19;
  _BOOL8 v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  HMDHomeManager *v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  HMDHomeManager *v31;
  NSObject *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  unsigned int v37;
  unsigned int v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  uint64_t v49;

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v9 = a3;
  v49 = *MEMORY[0x1E0C80C00];
  v11 = (void *)MEMORY[0x1D17BA0A0](self, a2);
  v12 = self;
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v38 = v7;
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    HMFBooleanToString();
    v37 = v9;
    v18 = v8;
    v19 = v11;
    v20 = v6;
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138544386;
    v40 = v14;
    v41 = 2112;
    v42 = v15;
    v43 = 2112;
    v44 = v16;
    v45 = 2112;
    v46 = v17;
    v47 = 2112;
    v48 = v21;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Going to write migration record to disk with shouldSkipKeyRollOperations: %@ forceMigrationFailureForTesting: %@, migrateFromTestDirectory: %@, dryRun: %@", buf, 0x34u);

    v6 = v20;
    v11 = v19;
    v8 = v18;
    v9 = v37;

    v7 = v38;
  }

  objc_autoreleasePoolPop(v11);
  +[HMDHH2MigratorRecord singleRecord](HMDHH2MigratorRecord, "singleRecord");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setShouldSkipKeyRollOperations:", v9);
  objc_msgSend(v22, "setForceMigrationFailureForTesting:", v8);
  objc_msgSend(v22, "setMigrateFromTestDirectory:", v7);
  objc_msgSend(v22, "setDryRun:", v6);
  if ((objc_msgSend(v22, "writeNewMigrationRecord") & 1) == 0)
  {
    v30 = (void *)MEMORY[0x1D17BA0A0]();
    v31 = v12;
    HMFGetOSLogHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v33;
      _os_log_impl(&dword_1CD062000, v32, OS_LOG_TYPE_ERROR, "%{public}@Unable to write migration record locally. Cannot start the migration work.", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v30);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 2702);
    v34 = objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }
  v23 = objc_msgSend(v22, "isMigrationInProgress");
  v24 = (void *)MEMORY[0x1D17BA0A0]();
  v25 = v12;
  HMFGetOSLogHandle();
  v26 = objc_claimAutoreleasedReturnValue();
  v27 = v26;
  if ((v23 & 1) == 0)
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v40 = v35;
      _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_ERROR, "%{public}@Not sure what happened here. We tried taking the ownership of the migration but could not. Failing the request...", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v24);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:description:reason:suggestion:", -1, CFSTR("Error occurred while trying to take ownership of the migration work"), CFSTR("Taking the ownership writes the record to disk"), CFSTR("Check why the disk operation failed on HMDHH2MigratorRecord"));
    v34 = objc_claimAutoreleasedReturnValue();
LABEL_14:
    v29 = (void *)v34;
    goto LABEL_15;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543618;
    v40 = v28;
    v41 = 2112;
    v42 = v22;
    _os_log_impl(&dword_1CD062000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@Successfully wrote migration record : %@", buf, 0x16u);

  }
  objc_autoreleasePoolPop(v24);
  v29 = 0;
LABEL_15:

  return v29;
}

void __101__HMDHomeManager_HH2FrameworkSwitch__refreshHomeDataAndArchiveLocallyWithIsAutoMigration_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      objc_msgSend(v3, "domain");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v5, "isEqual:", *MEMORY[0x1E0C947D8]) & 1) != 0)
      {
        v6 = objc_msgSend(v3, "code");

        if (v6 == 26)
        {
          v7 = (void *)MEMORY[0x1D17BA0A0]();
          v8 = WeakRetained;
          HMFGetOSLogHandle();
          v9 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            HMFGetLogIdentifier();
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138543618;
            v24 = v10;
            v25 = 2114;
            v26 = v3;
            _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Ignoring %{public}@ for dry-run/manual migration when refreshing home data before migration", buf, 0x16u);

          }
          objc_autoreleasePoolPop(v7);
          goto LABEL_8;
        }
      }
      else
      {

      }
    }
    v17 = (void *)MEMORY[0x1D17BA0A0]();
    v18 = WeakRetained;
    HMFGetOSLogHandle();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v24 = v20;
      v25 = 2112;
      v26 = v3;
      _os_log_impl(&dword_1CD062000, v19, OS_LOG_TYPE_ERROR, "%{public}@Unable to refresh data from cloud before starting the migration: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v17);
    v15 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:description:underlyingError:", 2704, 0, v3);
    v16 = objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
LABEL_8:
  if (WeakRetained)
  {
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __101__HMDHomeManager_HH2FrameworkSwitch__refreshHomeDataAndArchiveLocallyWithIsAutoMigration_completion___block_invoke_67;
    v21[3] = &unk_1E89C1A48;
    v22 = *(id *)(a1 + 32);
    objc_msgSend(WeakRetained, "saveToPersistentStoreForHH2MigrationWithCompletionHandler:", v21);
    v11 = v22;
    goto LABEL_19;
  }
  v12 = (void *)MEMORY[0x1D17BA0A0]();
  HMFGetOSLogHandle();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    HMFGetLogIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v24 = v14;
    _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_ERROR, "%{public}@(A) HomeManager is not available", buf, 0xCu);

  }
  objc_autoreleasePoolPop(v12);
  v15 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 20);
  v16 = objc_claimAutoreleasedReturnValue();
LABEL_17:
  v11 = (void *)v16;
  if (v15)
    (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v15, v16);
LABEL_19:

}

uint64_t __101__HMDHomeManager_HH2FrameworkSwitch__refreshHomeDataAndArchiveLocallyWithIsAutoMigration_completion___block_invoke_67(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void __161__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithShouldSkipKeyRollOperations_forceMigrationFailureForTesting_isAutoMigration_dryRun_completionHandler___block_invoke(uint64_t a1, char a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  uint8x8_t v6;
  int16x8_t v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  id v15;
  unsigned __int32 v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 48);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __161__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithShouldSkipKeyRollOperations_forceMigrationFailureForTesting_isAutoMigration_dryRun_completionHandler___block_invoke_65;
    v14[3] = &unk_1E89C0308;
    v4 = *(void **)(a1 + 32);
    v5 = *(id *)(a1 + 40);
    v14[4] = *(_QWORD *)(a1 + 32);
    v15 = v5;
    v6.i32[0] = *(_DWORD *)(a1 + 48);
    v7 = (int16x8_t)vmovl_u8(v6);
    *(int8x8_t *)v7.i8 = vext_s8(*(int8x8_t *)v7.i8, *(int8x8_t *)v7.i8, 2uLL);
    v16 = vmovn_s16(v7).u32[0];
    objc_msgSend(v4, "refreshHomeDataAndArchiveLocallyWithIsAutoMigration:completion:", v3, v14);
    v8 = v15;
  }
  else
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v18 = v12;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_ERROR, "%{public}@This account does not have HSA2 enabled", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
    v13 = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmPrivateErrorWithCode:", 2719);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
      (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v8);
  }

}

void __161__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithShouldSkipKeyRollOperations_forceMigrationFailureForTesting_isAutoMigration_dryRun_completionHandler___block_invoke_65(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
      (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "writeMigrationRecordWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:migrateFromTestDirectory:dryRun:", *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), 0, *(unsigned __int8 *)(a1 + 50));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 40);
      if (v6)
        (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v5);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "setHh2MigrationInProgress:", 1);
      +[HMDHH2MigrationStateLogger recordMigrationStart:isDryRun:](HMDHH2MigrationStateLogger, "recordMigrationStart:isDryRun:", *(unsigned __int8 *)(a1 + 51), *(unsigned __int8 *)(a1 + 50));
      v7 = *(_QWORD *)(a1 + 40);
      if (v7)
        v7 = (*(uint64_t (**)(uint64_t, _QWORD))(v7 + 16))(v7, 0);
      v8 = (void *)MEMORY[0x1D17BA0A0](v7);
      v9 = *(id *)(a1 + 32);
      HMFGetOSLogHandle();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        HMFGetLogIdentifier();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138543362;
        v14 = v11;
        _os_log_impl(&dword_1CD062000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Migration request is successfully received. Starting the migration work locally first...", (uint8_t *)&v13, 0xCu);

      }
      objc_autoreleasePoolPop(v8);
      objc_msgSend(*(id *)(a1 + 32), "hh2FrameworkSwitch");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "switchToHH2AndRelaunchHomedToPerformHH2Migration");

    }
  }

}

void __91__HMDHomeManager_HH2FrameworkSwitch___startHH2MigrationWithRequestMessage_isAutoMigration___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)MEMORY[0x1D17BA0A0]();
  v5 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    HMFGetLogIdentifier();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = 138543618;
    v11 = v7;
    v12 = 2112;
    v13 = v3;
    _os_log_impl(&dword_1CD062000, v6, OS_LOG_TYPE_INFO, "%{public}@Migration requested with error : [%@]", (uint8_t *)&v10, 0x16u);

  }
  objc_autoreleasePoolPop(v4);
  objc_msgSend(*(id *)(a1 + 40), "respondWithPayload:error:", 0, v3);
  if (!*(_BYTE *)(a1 + 48) && v3 && !*(_BYTE *)(a1 + 49))
  {
    v8 = -[HMDHH2MigrationDailyTotalsLogEvent initEndWithAutoMigration:dryRun:attemptCount:error:]([HMDHH2MigrationDailyTotalsLogEvent alloc], "initEndWithAutoMigration:dryRun:attemptCount:error:", 0, 0, 0, v3);
    objc_msgSend(*(id *)(a1 + 32), "logEventSubmitter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "submitLogEvent:", v8);

  }
}

void __109__HMDHomeManager_HH2FrameworkSwitch__checkAndMoveDirectlyToHH2IfOnlyHH2SharedHomesExistAllowEmptyOwnedHomes___block_invoke(uint64_t a1)
{
  id v2;

  if (*(_BYTE *)(a1 + 40) || objc_msgSend(*(id *)(a1 + 32), "_onlyHH2SharedHomesExist"))
  {
    objc_msgSend(*(id *)(a1 + 32), "cloudDataSyncStateFilter");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "moveDirectlyToHH2IfAccountOnlyHasUpgradedSharedHomesAllowEmptyOwnedHomes:", *(unsigned __int8 *)(a1 + 40));

  }
}

void __76__HMDHomeManager_HH2FrameworkSwitch___handleAttemptHH2AutoMigrationMessage___block_invoke(uint64_t a1, int a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "respondWithSuccess");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hmErrorWithCode:", 48);
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "respondWithError:", v3);

  }
}

void __95__HMDHomeManager_HH2FrameworkSwitch___performAutoMigrationToHH2WithIsDryRun_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = _os_feature_enabled_impl();
  if (!v5 && v7 && *(_BYTE *)(a1 + 48))
  {
    objc_msgSend(MEMORY[0x1E0D28690], "productInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "softwareVersion");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "buildVersion");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138543618;
      v17 = v14;
      v18 = 2112;
      v19 = v10;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_INFO, "%{public}@Request to run dry run is accepted. Saving the build number: %@", (uint8_t *)&v16, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setObject:forKey:", v10, CFSTR("hh2MigrationDryRunBuildNumber"));

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  id v15;
  id v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_msgSend(v3, "isOwnerUser") & 1) != 0)
  {
    v4 = *(void **)(a1 + 40);
    objc_msgSend(v3, "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], v5);

    dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
    v6 = *(void **)(a1 + 56);
    objc_msgSend(v3, "zoneID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "UUIDString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_48;
    v13[3] = &unk_1E89C0200;
    v13[4] = *(_QWORD *)(a1 + 32);
    v14 = *(id *)(a1 + 48);
    v15 = v3;
    v16 = *(id *)(a1 + 40);
    objc_msgSend(v6, "homeZoneWithName:owner:completion:", v8, &stru_1E89C3E38, v13);

  }
  else
  {
    v9 = (void *)MEMORY[0x1D17BA0A0]();
    v10 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v18 = v12;
      _os_log_impl(&dword_1CD062000, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Having a shared home (empty or full) will be considered home as non-empty", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v9);
  }

}

void __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_50(uint64_t a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17BA0A0]();
  v3 = *(id *)(a1 + 32);
  HMFGetOSLogHandle();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    HMFGetLogIdentifier();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v9 = 138543618;
    v10 = v5;
    v11 = 2112;
    v12 = v6;
    _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@[Shared User] : Empty home determination map: %@", (uint8_t *)&v9, 0x16u);

  }
  objc_autoreleasePoolPop(v2);
  v7 = _Block_copy(*(const void **)(a1 + 48));
  v8 = v7;
  if (v7)
    (*((void (**)(void *, _QWORD))v7 + 2))(v7, *(_QWORD *)(a1 + 40));

}

void __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_48(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD block[4];
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v10;
      v23 = 2112;
      v24 = v6;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@[Shared User] : Error occurred while querying cloud cache: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_49;
    block[3] = &unk_1E89C1710;
    v16 = *(id *)(a1 + 48);
    v12 = v5;
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(a1 + 40);
    v17 = v12;
    v18 = v13;
    v19 = v14;
    v20 = *(id *)(a1 + 56);
    dispatch_async(v11, block);

  }
}

void __93__HMDHomeManager_HH2FrameworkSwitch__determineEmptyHomesForSharedUsersWithCompletionHandler___block_invoke_49(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "wasTheHomeFetchedFromCloud");

  if (objc_msgSend(*(id *)(a1 + 40), "hasServerTokenAvailable") && (v3 & 1) != 0)
  {
    if (HMDIsEmptyHome(*(void **)(a1 + 32)))
    {
      v4 = *(void **)(a1 + 64);
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v5);

    }
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*(id *)(a1 + 32), "rooms");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "numberWithUnsignedInteger:", objc_msgSend(v25, "count"));
      v24 = v6;
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*(id *)(a1 + 32), "accessories");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "numberWithUnsignedInteger:", objc_msgSend(v23, "count"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*(id *)(a1 + 32), "sharedUsers");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "numberWithUnsignedInteger:", objc_msgSend(v15, "count"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*(id *)(a1 + 32), "outgoingInvitations");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "numberWithUnsignedInteger:", objc_msgSend(v18, "count"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v27 = v9;
      v28 = 2112;
      v29 = v11;
      v30 = 2112;
      v31 = v13;
      v32 = 2112;
      v33 = v16;
      v34 = 2112;
      v35 = v19;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@[Shared User] : Home Stats: [Total Rooms: %@], [Total Accessories: %@], [Total Shared Users: %@], [Total Invitations: %@]", buf, 0x34u);

      v6 = v24;
    }
  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "hasServerTokenAvailable");
      HMFBooleanToString();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v27 = v20;
      v28 = 2114;
      v29 = v21;
      v30 = 2114;
      v31 = v22;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@[Shared User] : Either Server token is not available (%{public}@) or the home was not fetched from the cloud (%{public}@)", buf, 0x20u);

    }
  }

  objc_autoreleasePoolPop(v6);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  _QWORD v14[5];
  id v15;
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(a1 + 32);
  objc_msgSend(v3, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], v5);

  if ((objc_msgSend(v3, "isOwnerUser") & 1) != 0)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
    v6 = *(void **)(a1 + 56);
    objc_msgSend(v3, "zoneID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "UUIDString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_41;
    v14[3] = &unk_1E89C0200;
    v9 = *(void **)(a1 + 48);
    v14[4] = *(_QWORD *)(a1 + 40);
    v15 = v9;
    v16 = v3;
    v17 = *(id *)(a1 + 32);
    objc_msgSend(v6, "homeZoneWithName:owner:completion:", v8, &stru_1E89C3E38, v14);

  }
  else
  {
    v10 = (void *)MEMORY[0x1D17BA0A0]();
    v11 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v19 = v13;
      _os_log_impl(&dword_1CD062000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Having a shared home (empty or full) will be considered home as non-empty", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v10);
  }

}

void __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_44(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void (**v16)(void);
  void (**v17)(void);
  void (*v18)(void);
  void *v19;
  void (**v20)(void);
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "count");
  objc_msgSend(*(id *)(a1 + 40), "homes");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  v5 = (void *)MEMORY[0x1D17BA0A0]();
  v6 = *(id *)(a1 + 40);
  HMFGetOSLogHandle();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v2 == v4)
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = *(void **)(a1 + 32);
      v21 = 138543618;
      v22 = v9;
      v23 = 2112;
      v24 = v10;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Empty home determination map: %@", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v5);
    objc_msgSend(*(id *)(a1 + 32), "na_allSatisfy:", &__block_literal_global_47_176410);
    v11 = (void *)MEMORY[0x1D17BA0A0]();
    v12 = *(id *)(a1 + 40);
    HMFGetOSLogHandle();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543618;
      v22 = v14;
      v23 = 2112;
      v24 = v15;
      _os_log_impl(&dword_1CD062000, v13, OS_LOG_TYPE_DEFAULT, "%{public}@Did we found any empty homes for this user: %@", (uint8_t *)&v21, 0x16u);

    }
    objc_autoreleasePoolPop(v11);
    v16 = (void (**)(void))_Block_copy(*(const void **)(a1 + 48));
    v17 = v16;
    if (v16)
    {
      v18 = v16[2];
LABEL_12:
      v18();
    }
  }
  else
  {
    if (v8)
    {
      HMFGetLogIdentifier();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 138543362;
      v22 = v19;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Actual homes in the list and empty home map do not agree. Aborting...", (uint8_t *)&v21, 0xCu);

    }
    objc_autoreleasePoolPop(v5);
    v20 = (void (**)(void))_Block_copy(*(const void **)(a1 + 48));
    v17 = v20;
    if (v20)
    {
      v18 = v20[2];
      goto LABEL_12;
    }
  }

}

uint64_t __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_45(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "BOOLValue");
}

void __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_41(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD block[4];
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = (void *)MEMORY[0x1D17BA0A0]();
    v8 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v22 = v10;
      v23 = 2112;
      v24 = v6;
      _os_log_impl(&dword_1CD062000, v9, OS_LOG_TYPE_ERROR, "%{public}@Error occurred while querying cloud cache: %@", buf, 0x16u);

    }
    objc_autoreleasePoolPop(v7);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v11 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_42;
    block[3] = &unk_1E89C1710;
    v16 = *(id *)(a1 + 48);
    v12 = v5;
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(void **)(a1 + 40);
    v17 = v12;
    v18 = v13;
    v19 = v14;
    v20 = *(id *)(a1 + 56);
    dispatch_async(v11, block);

  }
}

void __89__HMDHomeManager_HH2FrameworkSwitch___determineEmptyHomesForOwnersWithCompletionHandler___block_invoke_42(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "residentDeviceManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "wasTheHomeFetchedFromCloud");

  if (objc_msgSend(*(id *)(a1 + 40), "hasServerTokenAvailable") && (v3 & 1) != 0)
  {
    if (HMDIsEmptyHome(*(void **)(a1 + 32)))
    {
      v4 = *(void **)(a1 + 64);
      objc_msgSend(*(id *)(a1 + 32), "uuid");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v5);

    }
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*(id *)(a1 + 32), "rooms");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "numberWithUnsignedInteger:", objc_msgSend(v25, "count"));
      v24 = v6;
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*(id *)(a1 + 32), "accessories");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "numberWithUnsignedInteger:", objc_msgSend(v23, "count"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*(id *)(a1 + 32), "sharedUsers");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "numberWithUnsignedInteger:", objc_msgSend(v15, "count"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*(id *)(a1 + 32), "outgoingInvitations");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "numberWithUnsignedInteger:", objc_msgSend(v18, "count"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138544386;
      v27 = v9;
      v28 = 2112;
      v29 = v11;
      v30 = 2112;
      v31 = v13;
      v32 = 2112;
      v33 = v16;
      v34 = 2112;
      v35 = v19;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Home Stats: [Total Rooms: %@], [Total Accessories: %@], [Total Shared Users: %@], [Total Invitations: %@]", buf, 0x34u);

      v6 = v24;
    }
  }
  else
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = *(id *)(a1 + 48);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      HMFGetLogIdentifier();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "hasServerTokenAvailable");
      HMFBooleanToString();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      HMFBooleanToString();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543874;
      v27 = v20;
      v28 = 2114;
      v29 = v21;
      v30 = 2114;
      v31 = v22;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Either Server token is not available (%{public}@) or the home was not fetched from the cloud (%{public}@)", buf, 0x20u);

    }
  }

  objc_autoreleasePoolPop(v6);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __76__HMDHomeManager_HH2FrameworkSwitch___fetchHasOnlyEmptyHomesWithCompletion___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  _QWORD block[5];
  id v15;
  uint64_t v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    v6 = (void *)MEMORY[0x1D17BA0A0]();
    v7 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v18 = v9;
      _os_log_impl(&dword_1CD062000, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to fetch all homes from the cloud. Aborting...", buf, 0xCu);

    }
    objc_autoreleasePoolPop(v6);
    v10 = _Block_copy(*(const void **)(a1 + 40));
    v11 = v10;
    if (v10)
      (*((void (**)(void *, _QWORD))v10 + 2))(v10, 0);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "workQueue");
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __76__HMDHomeManager_HH2FrameworkSwitch___fetchHasOnlyEmptyHomesWithCompletion___block_invoke_37;
    block[3] = &unk_1E89C01B0;
    v13 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v16 = a2;
    v15 = v13;
    dispatch_async(v12, block);

  }
}

void __76__HMDHomeManager_HH2FrameworkSwitch___fetchHasOnlyEmptyHomesWithCompletion___block_invoke_37(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "homes");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count");
  v4 = *(_QWORD *)(a1 + 48);

  if (v3 == v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "_determineEmptyHomesForOwnersWithCompletionHandler:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    v5 = (void *)MEMORY[0x1D17BA0A0]();
    v6 = *(id *)(a1 + 32);
    HMFGetOSLogHandle();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      HMFGetLogIdentifier();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 48));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(*(id *)(a1 + 32), "homes");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "numberWithUnsignedInteger:", objc_msgSend(v11, "count"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138543874;
      v16 = v8;
      v17 = 2112;
      v18 = v9;
      v19 = 2112;
      v20 = v12;
      _os_log_impl(&dword_1CD062000, v7, OS_LOG_TYPE_INFO, "%{public}@There are still homes in the cloud which are not yet downloaded : [HomesInCloud: %@] [HomesInMemory: %@]", (uint8_t *)&v15, 0x20u);

    }
    objc_autoreleasePoolPop(v5);
    v13 = _Block_copy(*(const void **)(a1 + 40));
    v14 = v13;
    if (v13)
      (*((void (**)(void *, _QWORD))v13 + 2))(v13, 0);

  }
}

uint64_t __75__HMDHomeManager_HH2FrameworkSwitch__fetchHasOnlyEmptyHomesWithCompletion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fetchHasOnlyEmptyHomesWithCompletion:", *(_QWORD *)(a1 + 40));
}

void __73__HMDHomeManager_HH2FrameworkSwitch___storeAllLocalSettingsForThisDevice__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;

  v2 = a2;
  objc_msgSend(v2, "storeMigrationBulletinBoardNotificationsToDisk");
  objc_msgSend(v2, "storeMigrationCameraNotificationSettingsToDisk");
  objc_msgSend(v2, "storeMigrationCharacteristicsAuthorizationData");
  objc_msgSend(v2, "walletKeyManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "storeWalletKeyMigrationSettingsToDisk");

  objc_msgSend(v2, "users");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_14_176435);

  objc_msgSend(v2, "accessories");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "hmf_enumerateWithAutoreleasePoolUsingBlock:", &__block_literal_global_16_176436);
}

void __73__HMDHomeManager_HH2FrameworkSwitch___storeAllLocalSettingsForThisDevice__block_invoke_3(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v5;
  else
    v2 = 0;
  v3 = v2;
  v4 = v3;
  if (v3)
    objc_msgSend(v3, "saveCharacteristicsToLocalDiskForHH2Migration");

}

void __73__HMDHomeManager_HH2FrameworkSwitch___storeAllLocalSettingsForThisDevice__block_invoke_2(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  objc_msgSend(v2, "saveAnnounceNotificationModeForCurrentUserToLocalDisk");
  objc_msgSend(v2, "savePersonClassificationSettingsForCurrentUserToLocalDisk");

}

id __66__HMDHomeManager_HH2FrameworkSwitch__initializeHH2FrameworkSwitch__block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  id v6;
  void *v7;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained)
  {
    v2 = (void *)MEMORY[0x1D17BA0A0]();
    objc_opt_class();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    HMFGetOSLogHandle();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HMFGetLogIdentifier();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138543362;
      v10 = v5;
      _os_log_impl(&dword_1CD062000, v4, OS_LOG_TYPE_ERROR, "%{public}@Home manager died before framework switch completed", (uint8_t *)&v9, 0xCu);

    }
    objc_autoreleasePoolPop(v2);
    v6 = (id)objc_msgSend(MEMORY[0x1E0D28588], "futureWithNoValue");
  }
  objc_msgSend(WeakRetained, "_performPreHH2RebootTasks");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

@end
