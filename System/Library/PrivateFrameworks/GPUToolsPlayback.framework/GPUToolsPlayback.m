_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_23C72E3B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_23C72E6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_23C72E748(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void sub_23C72F098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C72F1F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_23C72F2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DYMTLFunctionPlayer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_23C72F40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23C72F4B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C72F5A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C72F650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C72FCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58)
{
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;

  AutoPerfStatSamplingControl::~AutoPerfStatSamplingControl((id *)(v63 - 216));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_23C730D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58)
{
  void *v58;
  void *v59;

  _Unwind_Resume(a1);
}

void DecodeRGB10A8_2P_XR10(void *a1, uint64_t a2)
{
  __IOSurface *v3;
  size_t PlaneCount;
  size_t v5;
  uint64_t v6;
  size_t HeightOfPlane;
  size_t WidthOfPlane;
  size_t BytesPerRowOfPlane;
  size_t BytesPerElementOfPlane;
  char *BaseAddressOfPlane;
  char *v12;
  size_t v13;
  id v14;

  v14 = a1;
  v3 = (__IOSurface *)objc_msgSend(v14, "iosurface");
  IOSurfaceLock(v3, 0, 0);
  PlaneCount = IOSurfaceGetPlaneCount(v3);
  if (PlaneCount)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      HeightOfPlane = IOSurfaceGetHeightOfPlane(v3, v5);
      WidthOfPlane = IOSurfaceGetWidthOfPlane(v3, v5);
      BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v3, v5);
      BytesPerElementOfPlane = IOSurfaceGetBytesPerElementOfPlane(v3, v5);
      BaseAddressOfPlane = (char *)IOSurfaceGetBaseAddressOfPlane(v3, v5);
      if (HeightOfPlane)
      {
        v12 = BaseAddressOfPlane;
        v13 = BytesPerElementOfPlane * WidthOfPlane;
        do
        {
          memcpy(v12, (const void *)(a2 + v6), v13);
          v6 += v13;
          v12 += BytesPerRowOfPlane;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
      }
      ++v5;
    }
    while (v5 != PlaneCount);
  }
  IOSurfaceUnlock(v3, 0, 0);

}

void sub_23C7310C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void GPUTools::MTL::Utils::DYMTLDeviceDescriptor::~DYMTLDeviceDescriptor(GPUTools::MTL::Utils::DYMTLDeviceDescriptor *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void sub_23C7312E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a2);

  AutoPerfStatSamplingControl::~AutoPerfStatSamplingControl((id *)va);
  _Unwind_Resume(a1);
}

void sub_23C731CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

objc_object *DYMTLGetOriginalObject(objc_object *a1)
{
  objc_object *v1;
  SEL Uid;
  uint64_t v3;

  v1 = a1;
  Uid = sel_getUid("baseObject");
  while ((objc_opt_respondsToSelector() & 1) != 0)
  {
    ((void (*)(objc_object *, SEL))-[objc_object methodForSelector:](v1, "methodForSelector:", Uid))(v1, Uid);
    v3 = objc_claimAutoreleasedReturnValue();

    v1 = (objc_object *)v3;
  }
  return v1;
}

void sub_23C731FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AutoPerfStatSamplingControl::AutoPerfStatSamplingControl(uint64_t a1, void *a2)
{
  id v4;
  int v5;

  v4 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  objc_storeStrong((id *)(a1 + 16), a2);
  v5 = objc_msgSend(*(id *)(a1 + 16), "isStatEnabled");
  *(_BYTE *)(a1 + 8) = v5;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    *(_QWORD *)a1 = objc_msgSend(*(id *)(a1 + 16), "getStatLocations");
    objc_msgSend(*(id *)(a1 + 16), "setStatLocations:", 0);
  }

  return a1;
}

void sub_23C73205C(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  _Unwind_Resume(a1);
}

void AutoPerfStatSamplingControl::~AutoPerfStatSamplingControl(id *this)
{
  if (*((_BYTE *)this + 8))
    objc_msgSend(this[2], "setStatLocations:", *this);

}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C7322E0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,NSData * {__strong}>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,NSData * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,NSData * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,objc_object  {objcproto9MTLDevice}* {__strong}>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  v13 = *a3;
  v14 = a3[1];
  a3[1] = 0;
  *i = 0;
  i[1] = v6;
  i[2] = v13;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v21 + 8 * v3) = v12;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7)
        v23 %= v7;
    }
    else
    {
      v23 &= v7 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C7326B0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C7328F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  id *v3;
  void *__p;
  char v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6)

    operator delete(v3);
  }
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C732CD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C732D48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C733018(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,NSData * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C733258(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

unint64_t GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(uint64_t a1, unint64_t a2)
{
  __int16 v2;
  unint64_t result;
  int v4;
  double v5;

  v2 = *(_WORD *)(a1 + 22);
  if ((v2 & 1) != 0)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2)
      goto LABEL_5;
    return 0;
  }
  if (a2)
    return 0;
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(_QWORD *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(_QWORD *)a1 + a2);
    case 3:
      return *(__int16 *)(*(_QWORD *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    case 5:
      v4 = *(_DWORD *)(a1 + 12);
      result = *(int *)(*(_QWORD *)a1 + 4 * a2);
      if (v4 != 19)
        return result;
      v5 = (double)(int)result * 0.0000152587891;
LABEL_10:
      result = (unint64_t)v5;
      break;
    case 6:
      return *(unsigned int *)(*(_QWORD *)a1 + 4 * a2);
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    case 9:
      return (unint64_t)*(float *)(*(_QWORD *)a1 + 4 * a2);
    case 0xA:
      v5 = *(double *)(*(_QWORD *)a1 + 8 * a2);
      goto LABEL_10;
    case 0xD:
      if ((v2 & 0x10) == 0)
        return 0;
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

uint64_t GPUTools::FD::Argument::ViewAsScalarArray<unsigned int>(uint64_t a1, unint64_t a2)
{
  __int16 v2;
  uint64_t result;
  int v4;
  double v5;

  v2 = *(_WORD *)(a1 + 22);
  if ((v2 & 1) != 0)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2)
      goto LABEL_5;
    return 0;
  }
  if (a2)
    return 0;
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(_QWORD *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(_QWORD *)a1 + a2);
    case 3:
      return *(__int16 *)(*(_QWORD *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    case 5:
      v4 = *(_DWORD *)(a1 + 12);
      result = *(unsigned int *)(*(_QWORD *)a1 + 4 * a2);
      if (v4 != 19)
        return result;
      v5 = (double)(int)result * 0.0000152587891;
LABEL_12:
      result = v5;
      break;
    case 6:
      return *(unsigned int *)(*(_QWORD *)a1 + 4 * a2);
    case 7:
    case 0xB:
    case 0xC:
      return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    case 8:
      return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    case 9:
      return *(float *)(*(_QWORD *)a1 + 4 * a2);
    case 0xA:
      v5 = *(double *)(*(_QWORD *)a1 + 8 * a2);
      goto LABEL_12;
    case 0xD:
      if ((v2 & 0x10) == 0)
        return 0;
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,NSData * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_23C733550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C733668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C73430C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

__n64 GPUTools::FD::Argument::ViewAsScalarArray<double>(uint64_t a1, unint64_t a2)
{
  __int16 v2;
  __n64 result;
  int v4;

  v2 = *(_WORD *)(a1 + 22);
  if ((v2 & 1) != 0)
  {
    result.n64_f64[0] = 0.0;
    if (*(unsigned __int16 *)(a1 + 20) <= a2)
      return result;
  }
  else
  {
    result.n64_f64[0] = 0.0;
    if (a2)
      return result;
  }
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      v4 = *(char *)(*(_QWORD *)a1 + a2);
      goto LABEL_12;
    case 2:
      result.n64_u8[0] = *(_BYTE *)(*(_QWORD *)a1 + a2);
      goto LABEL_18;
    case 3:
      v4 = *(__int16 *)(*(_QWORD *)a1 + 2 * a2);
LABEL_12:
      result.n64_f64[0] = (double)v4;
      return result;
    case 4:
      result.n64_u16[0] = *(_WORD *)(*(_QWORD *)a1 + 2 * a2);
      goto LABEL_18;
    case 5:
      result.n64_f64[0] = (double)*(int *)(*(_QWORD *)a1 + 4 * a2);
      if (*(_DWORD *)(a1 + 12) == 19)
        result.n64_f64[0] = result.n64_f64[0] * 0.0000152587891;
      return result;
    case 6:
      result.n64_u32[0] = *(_DWORD *)(*(_QWORD *)a1 + 4 * a2);
      goto LABEL_18;
    case 7:
    case 0xB:
      result.n64_f64[0] = (double)*(uint64_t *)(*(_QWORD *)a1 + 8 * a2);
      return result;
    case 8:
    case 0xC:
      result.n64_u64[0] = *(unint64_t *)(*(_QWORD *)a1 + 8 * a2);
LABEL_18:
      result.n64_f64[0] = (double)result.n64_u64[0];
      break;
    case 9:
      result.n64_f64[0] = *(float *)(*(_QWORD *)a1 + 4 * a2);
      break;
    case 0xA:
      result.n64_u64[0] = *(unint64_t *)(*(_QWORD *)a1 + 8 * a2);
      break;
    case 0xD:
      if ((v2 & 0x10) != 0)
        result.n64_f64[0] = (double)GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t GPUTools::FD::Argument::ViewAsScalarArray<long long>(uint64_t a1, unint64_t a2)
{
  __int16 v2;
  uint64_t result;
  int v4;
  double v5;

  v2 = *(_WORD *)(a1 + 22);
  if ((v2 & 1) != 0)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2)
      goto LABEL_5;
    return 0;
  }
  if (a2)
    return 0;
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(_QWORD *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(_QWORD *)a1 + a2);
    case 3:
      return *(__int16 *)(*(_QWORD *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    case 5:
      v4 = *(_DWORD *)(a1 + 12);
      result = *(int *)(*(_QWORD *)a1 + 4 * a2);
      if (v4 != 19)
        return result;
      v5 = (double)(int)result * 0.0000152587891;
LABEL_10:
      result = (uint64_t)v5;
      break;
    case 6:
      return *(unsigned int *)(*(_QWORD *)a1 + 4 * a2);
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    case 9:
      return (uint64_t)*(float *)(*(_QWORD *)a1 + 4 * a2);
    case 0xA:
      v5 = *(double *)(*(_QWORD *)a1 + 8 * a2);
      goto LABEL_10;
    case 0xD:
      if ((v2 & 0x10) == 0)
        return 0;
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

unint64_t GPUTools::FD::Argument::ViewAsScalarArray<MTLPixelFormat>(uint64_t a1, unint64_t a2)
{
  __int16 v2;
  unint64_t result;
  int v4;
  double v5;

  v2 = *(_WORD *)(a1 + 22);
  if ((v2 & 1) != 0)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2)
      goto LABEL_5;
    return 0;
  }
  if (a2)
    return 0;
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(_QWORD *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(_QWORD *)a1 + a2);
    case 3:
      return *(__int16 *)(*(_QWORD *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    case 5:
      v4 = *(_DWORD *)(a1 + 12);
      result = *(int *)(*(_QWORD *)a1 + 4 * a2);
      if (v4 != 19)
        return result;
      v5 = (double)(int)result * 0.0000152587891;
LABEL_10:
      result = (unint64_t)v5;
      break;
    case 6:
      return *(unsigned int *)(*(_QWORD *)a1 + 4 * a2);
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    case 9:
      return (unint64_t)*(float *)(*(_QWORD *)a1 + 4 * a2);
    case 0xA:
      v5 = *(double *)(*(_QWORD *)a1 + 8 * a2);
      goto LABEL_10;
    case 0xD:
      if ((v2 & 0x10) == 0)
        return 0;
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

BOOL GPUTools::FD::Argument::ViewAsScalarArray<BOOL>(uint64_t a1, unint64_t a2)
{
  __int16 v2;
  BOOL v3;
  int v4;
  double v5;

  v2 = *(_WORD *)(a1 + 22);
  if ((v2 & 1) == 0)
  {
    if (!a2)
      goto LABEL_5;
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 20) <= a2)
    return 0;
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
    case 2:
      v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + a2);
      goto LABEL_14;
    case 3:
    case 4:
      v4 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
      goto LABEL_14;
    case 5:
      v4 = *(_DWORD *)(*(_QWORD *)a1 + 4 * a2);
      if (*(_DWORD *)(a1 + 12) != 19)
        goto LABEL_14;
      v5 = (double)v4 * 0.0000152587891;
      goto LABEL_12;
    case 6:
      v4 = *(_DWORD *)(*(_QWORD *)a1 + 4 * a2);
LABEL_14:
      v3 = v4 == 0;
      return !v3;
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      v3 = *(_QWORD *)(*(_QWORD *)a1 + 8 * a2) == 0;
      return !v3;
    case 9:
      v3 = *(float *)(*(_QWORD *)a1 + 4 * a2) == 0.0;
      return !v3;
    case 0xA:
      v5 = *(double *)(*(_QWORD *)a1 + 8 * a2);
LABEL_12:
      v3 = v5 == 0.0;
      break;
    case 0xD:
      if ((v2 & 0x10) == 0)
        return 0;
      v3 = GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1) == 0;
      break;
    default:
      return 0;
  }
  return !v3;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto15CAMetalDrawable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C734BC4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,BOOL>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BOOL>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((_BYTE *)v11 + 24) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23C734DEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto15CAMetalDrawable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C73502C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::FD::Argument::ViewAsScalarArray<int>(uint64_t a1, unint64_t a2)
{
  __int16 v2;
  uint64_t result;
  int v4;
  double v5;

  v2 = *(_WORD *)(a1 + 22);
  if ((v2 & 1) != 0)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2)
      goto LABEL_5;
    return 0;
  }
  if (a2)
    return 0;
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(_QWORD *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(_QWORD *)a1 + a2);
    case 3:
      return *(__int16 *)(*(_QWORD *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    case 5:
      v4 = *(_DWORD *)(a1 + 12);
      result = *(unsigned int *)(*(_QWORD *)a1 + 4 * a2);
      if (v4 != 19)
        return result;
      v5 = (double)(int)result * 0.0000152587891;
LABEL_12:
      result = (int)v5;
      break;
    case 6:
      return *(unsigned int *)(*(_QWORD *)a1 + 4 * a2);
    case 7:
    case 0xB:
    case 0xC:
      return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    case 8:
      return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
    case 9:
      return (int)*(float *)(*(_QWORD *)a1 + 4 * a2);
    case 0xA:
      v5 = *(double *)(*(_QWORD *)a1 + 8 * a2);
      goto LABEL_12;
    case 0xD:
      if ((v2 & 0x10) == 0)
        return 0;
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,BOOL>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BOOL>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_23C7354FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C73561C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C735B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23C735C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C735EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C73611C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C7363A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C73649C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x242623D28);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_23C736948(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void DYMTLEncodeIndirectCommandBuffer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void *a6)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_object *v21;
  void *v22;
  const char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  objc_object *v27;
  uint64_t v28;
  const char *TessellationFactorArguments;
  unint64_t v30;
  uint64_t v31;
  objc_object *v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  objc_object *v44;
  uint64_t v45;
  int v46;
  int v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  objc_object *v52;
  void *v53;
  int v54;
  unint64_t v55;
  objc_object *v56;
  void *v57;
  const char *VertexBuffers;
  unint64_t v59;
  const char *v60;
  unint64_t i;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  objc_object *v65;
  void *v66;
  const char *FragmentBuffers;
  unint64_t v68;
  const char *v69;
  unint64_t j;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  objc_object *v74;
  void *v75;
  id v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  __int128 v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  __int128 v91;
  unint64_t v92;
  objc_object *v93;
  void *v94;
  const char *KernelBuffers;
  unint64_t v96;
  const char *v97;
  unint64_t k;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  objc_object *v102;
  void *v103;
  const char *ThreadgroupMemoryLength;
  const char *v105;
  unint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  void *v114;
  uint64_t v115;
  _QWORD *v116;
  void *v117;
  void *v118;
  id v119;
  _OWORD v123[3];
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  _OWORD v128[3];
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

  v8 = a1;
  v9 = a6;
  if (*(_QWORD *)a2 <= 0xFuLL)
  {
    v109 = v8;
    v119 = v8;
    v108 = v9;
    v10 = v9;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    GPUTools::MTL::Utils::DYMTLCreateIndirectCommandEncoder((uint64_t *)a2, (uint64_t)&v133);
    if (a3)
    {
      v11 = 0;
      do
      {
        v12 = (const char *)(a4 + *((_QWORD *)&v139 + 1) * v11);
        v13 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::commandType((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
        objc_msgSend(v119, "indirectRenderCommandAtIndex:", v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v14;
        switch(v13)
        {
          case 0:
            objc_msgSend(v14, "reset");
            goto LABEL_40;
          case 1:
            v16 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            objc_msgSend(v15, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", *(_QWORD *)v16, *((_QWORD *)v16 + 1), *((_QWORD *)v16 + 2), *((_QWORD *)v16 + 3), *((_QWORD *)v16 + 4));
            break;
          case 2:
            v17 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            v18 = objc_msgSend(v10, "bufferIdAndOffsetForGPUVirtualAddress:", *((_QWORD *)v17 + 3));
            v20 = v19;
            GetObjectForKey(a5, v18);
            v21 = (objc_object *)objc_claimAutoreleasedReturnValue();
            DYMTLGetOriginalObject(v21);
            v22 = (void *)objc_claimAutoreleasedReturnValue();

            if (v22)
            {
              objc_msgSend(v15, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", *(_QWORD *)v17, *((_QWORD *)v17 + 1), *((_QWORD *)v17 + 2), v22, v20, *((_QWORD *)v17 + 4), *((_QWORD *)v17 + 5), *((_QWORD *)v17 + 6));
            }
            else
            {
              objc_msgSend(v15, "reset");
              v22 = 0;
            }
            goto LABEL_26;
          case 4:
            v23 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawPatchesArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            v24 = objc_msgSend(v10, "bufferIdAndOffsetForGPUVirtualAddress:", *((_QWORD *)v23 + 3));
            v26 = v25;
            GetObjectForKey(a5, v24);
            v27 = (objc_object *)objc_claimAutoreleasedReturnValue();
            v113 = v23;
            v115 = v26;
            DYMTLGetOriginalObject(v27);
            v28 = objc_claimAutoreleasedReturnValue();

            v117 = (void *)v28;
            LODWORD(v23) = v24 == 0;
            TessellationFactorArguments = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getTessellationFactorArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            v30 = objc_msgSend(v10, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)TessellationFactorArguments);
            v111 = v31;
            GetObjectForKey(a5, v30);
            v32 = (objc_object *)objc_claimAutoreleasedReturnValue();
            DYMTLGetOriginalObject(v32);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            v34 = v23 ^ (v28 != 0);

            if (v33)
              v35 = v34;
            else
              v35 = 0;
            v22 = v117;
            if (v35 == 1)
              objc_msgSend(v15, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", *v113, v113[1], v113[2], v117, v115, v113[4], v113[5], v33, v111, *((_QWORD *)TessellationFactorArguments + 1));
            else
              objc_msgSend(v15, "reset");
            goto LABEL_25;
          case 8:
            v36 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedPatchesArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            v37 = objc_msgSend(v10, "bufferIdAndOffsetForGPUVirtualAddress:", *((_QWORD *)v36 + 3));
            v39 = v38;
            GetObjectForKey(a5, v37);
            v40 = objc_claimAutoreleasedReturnValue();
            v116 = v36;
            DYMTLGetOriginalObject((objc_object *)v40);
            v41 = objc_claimAutoreleasedReturnValue();

            LODWORD(v40) = v41 != 0;
            LODWORD(v36) = v37 == 0;
            v118 = (void *)v41;
            v42 = objc_msgSend(v10, "bufferIdAndOffsetForGPUVirtualAddress:", v116[4]);
            v112 = v43;
            GetObjectForKey(a5, v42);
            v44 = (objc_object *)objc_claimAutoreleasedReturnValue();
            DYMTLGetOriginalObject(v44);
            v45 = objc_claimAutoreleasedReturnValue();
            v110 = v39;
            v46 = v36 ^ v40;

            v114 = (void *)v45;
            if (v45)
              v47 = v46;
            else
              v47 = 0;
            v48 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getTessellationFactorArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            v49 = objc_msgSend(v10, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)v48);
            v51 = v50;
            GetObjectForKey(a5, v49);
            v52 = (objc_object *)objc_claimAutoreleasedReturnValue();
            DYMTLGetOriginalObject(v52);
            v53 = (void *)objc_claimAutoreleasedReturnValue();

            if (v53)
              v54 = v47;
            else
              v54 = 0;
            if (v54 == 1)
            {
              v33 = v114;
              v107 = v51;
              v22 = v118;
              objc_msgSend(v15, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", *v116, v116[1], v116[2], v118, v110, v114, v112, v116[5], v116[6], v53, v107, *((_QWORD *)v48 + 1));
            }
            else
            {
              v22 = v118;
              v33 = v114;
              objc_msgSend(v15, "reset");
            }

LABEL_25:
LABEL_26:

            break;
          default:
            break;
        }
        if (!*(_BYTE *)(a2 + 9))
        {
          v55 = objc_msgSend(v10, "renderPipelineIdForUniqueIdentifier:", GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getPipelineStateUniqueIdentifier((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12));
          GetObjectForKey(a5, v55);
          v56 = (objc_object *)objc_claimAutoreleasedReturnValue();
          DYMTLGetOriginalObject(v56);
          v57 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v15, "setRenderPipelineState:", v57);
        }
        if (!*(_BYTE *)(a2 + 8))
        {
          VertexBuffers = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getVertexBuffers((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
          v59 = *(_QWORD *)(a2 + 16);
          if (v59)
          {
            v60 = VertexBuffers;
            for (i = 0; i < v59; ++i)
            {
              if (*(_QWORD *)&v60[8 * i])
              {
                v62 = objc_msgSend(v10, "bufferIdAndOffsetForGPUVirtualAddress:");
                v64 = v63;
                GetObjectForKey(a5, v62);
                v65 = (objc_object *)objc_claimAutoreleasedReturnValue();
                DYMTLGetOriginalObject(v65);
                v66 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v15, "setVertexBuffer:offset:atIndex:", v66, v64, i);
                v59 = *(_QWORD *)(a2 + 16);
              }
            }
          }
          FragmentBuffers = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getFragmentBuffers((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
          v68 = *(_QWORD *)(a2 + 24);
          if (v68)
          {
            v69 = FragmentBuffers;
            for (j = 0; j < v68; ++j)
            {
              if (*(_QWORD *)&v69[8 * j])
              {
                v71 = objc_msgSend(v10, "bufferIdAndOffsetForGPUVirtualAddress:");
                v73 = v72;
                GetObjectForKey(a5, v71);
                v74 = (objc_object *)objc_claimAutoreleasedReturnValue();
                DYMTLGetOriginalObject(v74);
                v75 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v15, "setFragmentBuffer:offset:atIndex:", v75, v73, j);
                v68 = *(_QWORD *)(a2 + 24);
              }
            }
          }
        }
LABEL_40:

        ++v11;
      }
      while (v11 != a3);
    }

    goto LABEL_68;
  }
  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFF9FLL) == 0)
  {
    v109 = v8;
    v119 = v8;
    v108 = v9;
    v76 = v9;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    GPUTools::MTL::Utils::DYMTLCreateIndirectCommandEncoder((uint64_t *)a2, (uint64_t)&v133);
    if (!a3)
    {
LABEL_66:

LABEL_68:
      v9 = v108;
      v8 = v109;
      goto LABEL_69;
    }
    v77 = 0;
    while (1)
    {
      v78 = (const char *)(a4 + *((_QWORD *)&v139 + 1) * v77);
      v79 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::commandType((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
      objc_msgSend(v119, "indirectComputeCommandAtIndex:", v77);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      v81 = v80;
      if (v79 == 64)
        break;
      if (v79 == 32)
      {
        v87 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreadgroupsArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
        v88 = *((_QWORD *)v87 + 2);
        v131 = *(_OWORD *)v87;
        v132 = v88;
        v89 = *((_QWORD *)v87 + 5);
        v129 = *(_OWORD *)(v87 + 24);
        v130 = v89;
        objc_msgSend(v81, "concurrentDispatchThreadgroups:threadsPerThreadgroup:", &v131, &v129);
        v90 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::indirectDispatchArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
        v91 = *((_OWORD *)v90 + 1);
        v128[0] = *(_OWORD *)v90;
        v128[1] = v91;
        v128[2] = *((_OWORD *)v90 + 2);
        objc_msgSend(v81, "setStageInRegion:", v128);
        if (v90[64])
          goto LABEL_53;
        goto LABEL_54;
      }
      if (v79)
        goto LABEL_54;
      objc_msgSend(v80, "reset");
LABEL_65:

      if (++v77 == a3)
        goto LABEL_66;
    }
    v82 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreadsArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
    v83 = *((_QWORD *)v82 + 2);
    v126 = *(_OWORD *)v82;
    v127 = v83;
    v84 = *((_QWORD *)v82 + 5);
    v124 = *(_OWORD *)(v82 + 24);
    v125 = v84;
    objc_msgSend(v81, "concurrentDispatchThreads:threadsPerThreadgroup:", &v126, &v124);
    v85 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::indirectDispatchArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
    v86 = *((_OWORD *)v85 + 1);
    v123[0] = *(_OWORD *)v85;
    v123[1] = v86;
    v123[2] = *((_OWORD *)v85 + 2);
    objc_msgSend(v81, "setStageInRegion:", v123);
    if (v85[64])
LABEL_53:
      objc_msgSend(v81, "setBarrier");
LABEL_54:
    if (!*(_BYTE *)(a2 + 9))
    {
      v92 = objc_msgSend(v76, "computePipelineIdForUniqueIdentifier:", GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getPipelineStateUniqueIdentifier((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78));
      GetObjectForKey(a5, v92);
      v93 = (objc_object *)objc_claimAutoreleasedReturnValue();
      DYMTLGetOriginalObject(v93);
      v94 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v81, "setComputePipelineState:", v94);
    }
    if (!*(_BYTE *)(a2 + 8))
    {
      KernelBuffers = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getKernelBuffers((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
      v96 = *(_QWORD *)(a2 + 48);
      if (v96)
      {
        v97 = KernelBuffers;
        for (k = 0; k < v96; ++k)
        {
          if (*(_QWORD *)&v97[8 * k])
          {
            v99 = objc_msgSend(v76, "bufferIdAndOffsetForGPUVirtualAddress:");
            v101 = v100;
            GetObjectForKey(a5, v99);
            v102 = (objc_object *)objc_claimAutoreleasedReturnValue();
            DYMTLGetOriginalObject(v102);
            v103 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v81, "setKernelBuffer:offset:atIndex:", v103, v101, k);
            v96 = *(_QWORD *)(a2 + 48);
          }
        }
      }
    }
    ThreadgroupMemoryLength = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getThreadgroupMemoryLength((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
    if (*(_QWORD *)(a2 + 64))
    {
      v105 = ThreadgroupMemoryLength;
      v106 = 0;
      do
      {
        objc_msgSend(v81, "setThreadgroupMemoryLength:atIndex:", *(_QWORD *)&v105[8 * v106], v106);
        ++v106;
      }
      while (v106 < *(_QWORD *)(a2 + 64));
    }
    goto LABEL_65;
  }
LABEL_69:

}

void sub_23C7371E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_23C73751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_23C73787C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C737A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_23C737C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C737CFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C738060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_23C738250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void MakeDYMTLIndirectCommandBufferDescriptor(MTLIndirectCommandBufferDescriptor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MTLIndirectCommandBufferDescriptor *v5;
  MTLIndirectCommandBufferDescriptor *v6;

  v5 = a1;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  v6 = v5;
  *(_QWORD *)a3 = -[MTLIndirectCommandBufferDescriptor commandTypes](v5, "commandTypes");
  *(_BYTE *)(a3 + 9) = -[MTLIndirectCommandBufferDescriptor inheritPipelineState](v6, "inheritPipelineState");
  *(_BYTE *)(a3 + 8) = -[MTLIndirectCommandBufferDescriptor inheritBuffers](v6, "inheritBuffers");
  *(_QWORD *)(a3 + 16) = -[MTLIndirectCommandBufferDescriptor maxVertexBufferBindCount](v6, "maxVertexBufferBindCount");
  *(_QWORD *)(a3 + 24) = -[MTLIndirectCommandBufferDescriptor maxFragmentBufferBindCount](v6, "maxFragmentBufferBindCount");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    *(_QWORD *)(a3 + 48) = -[MTLIndirectCommandBufferDescriptor maxKernelBufferBindCount](v6, "maxKernelBufferBindCount");
    *(_QWORD *)(a3 + 64) = a2;
  }

}

void sub_23C738324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL DYMTLDrawRenderCommandEncoder(void *a1, uint64_t a2, uint64_t a3, GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *a4, _QWORD *a5, _QWORD *a6)
{
  id v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *TessellationFactorArguments;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  double v25;
  const char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  double v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int v46;

  v11 = a1;
  v12 = (const char *)(a3 + *((_QWORD *)a4 + 13) * a2);
  v13 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::commandType(a4, v12);
  if (v13)
  {
    switch(v13)
    {
      case 1:
        v14 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawArguments(a4, v12);
        objc_msgSend(v11, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", *(_QWORD *)v14, *((_QWORD *)v14 + 1), *((_QWORD *)v14 + 2), *((_QWORD *)v14 + 3), *((_QWORD *)v14 + 4));
        break;
      case 2:
        v15 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedArguments(a4, v12);
        v16 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *((_QWORD *)v15 + 3));
        v18 = v17;
        GetObjectForKey(a5, v16);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend(v11, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", *(_QWORD *)v15, *((_QWORD *)v15 + 1), *((_QWORD *)v15 + 2), v19, v18, *((_QWORD *)v15 + 4), *((_QWORD *)v15 + 5), *((_QWORD *)v15 + 6));
        goto LABEL_22;
      case 4:
        TessellationFactorArguments = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getTessellationFactorArguments(a4, v12);
        v21 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *(_QWORD *)TessellationFactorArguments);
        v23 = v22;
        GetObjectForKey(a5, v21);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (v24)
          objc_msgSend(v11, "setTessellationFactorBuffer:offset:instanceStride:", v24, v23, *((_QWORD *)TessellationFactorArguments + 1));
        LODWORD(v25) = *((_DWORD *)TessellationFactorArguments + 4);
        objc_msgSend(v11, "setTessellationFactorScale:", v25);

        v26 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawPatchesArguments(a4, v12);
        v27 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *((_QWORD *)v26 + 3));
        v29 = v28;
        GetObjectForKey(a5, v27);
        v30 = objc_claimAutoreleasedReturnValue();
        v19 = (void *)v30;
        if (v24 && (v27 == 0) != (v30 != 0))
          objc_msgSend(v11, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:", *(_QWORD *)v26, *((_QWORD *)v26 + 1), *((_QWORD *)v26 + 2), v30, v29, *((_QWORD *)v26 + 4), *((_QWORD *)v26 + 5));
        goto LABEL_22;
      case 8:
        v31 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getTessellationFactorArguments(a4, v12);
        v32 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *(_QWORD *)v31);
        v34 = v33;
        GetObjectForKey(a5, v32);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        if (v35)
          objc_msgSend(v11, "setTessellationFactorBuffer:offset:instanceStride:", v35, v34, *((_QWORD *)v31 + 1));
        LODWORD(v36) = *((_DWORD *)v31 + 4);
        objc_msgSend(v11, "setTessellationFactorScale:", v36);

        v37 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedPatchesArguments(a4, v12);
        v38 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *((_QWORD *)v37 + 3));
        v40 = v39;
        GetObjectForKey(a5, v38);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v35)
          v41 = (v38 == 0) ^ (v19 != 0);
        else
          v41 = 0;
        v42 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *((_QWORD *)v37 + 4));
        v44 = v43;
        GetObjectForKey(a5, v42);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        if (v45)
          v46 = v41;
        else
          v46 = 0;
        if (v46 == 1)
          objc_msgSend(v11, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:", *(_QWORD *)v37, *((_QWORD *)v37 + 1), *((_QWORD *)v37 + 2), v19, v40, v45, v44, *((_QWORD *)v37 + 5), *((_QWORD *)v37 + 6));

LABEL_22:
        break;
      default:
        break;
    }
  }

  return v13 != 0;
}

void sub_23C738660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C738878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

unint64_t DYMTSetupRenderCommandEncoder(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *a5, _QWORD *a6, void *a7)
{
  id v13;
  id v14;
  const char *v15;
  unint64_t v16;
  void *v17;
  const char *VertexBuffers;
  const char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *FragmentBuffers;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v33;

  v13 = a1;
  v14 = a7;
  v15 = (const char *)(a4 + *((_QWORD *)a5 + 13) * a3);
  if (*(_BYTE *)(a2 + 9))
  {
    v16 = 0;
  }
  else
  {
    v16 = objc_msgSend(v14, "renderPipelineIdForUniqueIdentifier:", GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getPipelineStateUniqueIdentifier(a5, v15));
    GetObjectForKey(a6, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setRenderPipelineState:", v17);

  }
  if (!*(_BYTE *)(a2 + 8))
  {
    v33 = v16;
    VertexBuffers = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getVertexBuffers(a5, v15);
    if (*(_QWORD *)(a2 + 16))
    {
      v19 = VertexBuffers;
      v20 = 0;
      do
      {
        v21 = objc_msgSend(v14, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)&v19[8 * v20]);
        v23 = v22;
        GetObjectForKey(a6, v21);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setVertexBuffer:offset:atIndex:", v24, v23, v20);

        ++v20;
      }
      while (v20 < *(_QWORD *)(a2 + 16));
    }
    FragmentBuffers = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getFragmentBuffers(a5, v15);
    v16 = v33;
    if (*(_QWORD *)(a2 + 24))
    {
      v26 = FragmentBuffers;
      v27 = 0;
      do
      {
        v28 = objc_msgSend(v14, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)&v26[8 * v27]);
        v30 = v29;
        GetObjectForKey(a6, v28);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setFragmentBuffer:offset:atIndex:", v31, v30, v27);

        ++v27;
      }
      while (v27 < *(_QWORD *)(a2 + 24));
    }
  }

  return v16;
}

void sub_23C738A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C738CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23C738EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23C7390EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23C739250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C739468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_23C739C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20)
{
  a20 = &a9;
  std::vector<std::pair<unsigned long long,objc_object * {__strong}>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_23C739E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_QWORD *GetObjectForKey(_QWORD *a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;

  v4 = a2;
  v2 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, &v4);
  if (v2)
    v2 = (_QWORD *)v2[3];
  return v2;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C73A354(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  __int128 *v18;
  unint64_t *v19;
  __int128 v20;
  unint64_t *v21;
  char v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;

LABEL_1:
  v9 = (unint64_t *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v25 = *(a2 - 3);
        v24 = a2 - 3;
        if (v25 < *v9)
        {
          v36 = v9[2];
          v33 = *(_OWORD *)v9;
          v26 = *(_OWORD *)v24;
          v9[2] = v24[2];
          *(_OWORD *)v9 = v26;
          *(_OWORD *)v24 = v33;
          v24[2] = v36;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__int128 *)v9, v9 + 3, a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)v9, v9 + 3, v9 + 6, (uint64_t)(a2 - 3));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__n128 *)v9, v9 + 3, v9 + 6, (__n128 *)(v9 + 9), (__n128 *)(a2 - 3));
        return;
      default:
        if (v12 > 575)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__int128 *)&v9[3 * v14], v9, a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__int128 *)v9, &v9[3 * v14], a2 - 3);
            v16 = 3 * v14;
            v17 = &v9[3 * v14 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__int128 *)(v9 + 3), v17, a2 - 6);
            v18 = (__int128 *)(v9 + 6);
            v19 = &v9[v16 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(v18, v19, a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__int128 *)v17, v15, v19);
            v35 = *(_QWORD *)(a1 + 16);
            v32 = *(_OWORD *)a1;
            v20 = *(_OWORD *)v15;
            *(_QWORD *)(a1 + 16) = v15[2];
            *(_OWORD *)a1 = v20;
            v15[2] = v35;
            *(_OWORD *)v15 = v32;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_QWORD *)(a1 - 24) >= *(_QWORD *)a1)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,std::__less<void,void> &>((unint64_t *)a1, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,std::__less<void,void> &>((unint64_t *)a1, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(a1, (uint64_t)v21);
          v9 = v21 + 3;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)(v21 + 3), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 3;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)v9, (uint64_t)a2);
        }
        else if (v9 != a2)
        {
          v27 = v9 + 3;
          while (v27 != a2)
          {
            v28 = (uint64_t)v27;
            v29 = *(_QWORD *)(a1 + 24);
            if (v29 < *(_QWORD *)a1)
            {
              v34 = *(_OWORD *)(a1 + 32);
              v30 = v28;
              do
              {
                *(_OWORD *)v30 = *(_OWORD *)(v30 - 24);
                *(_QWORD *)(v30 + 16) = *(_QWORD *)(v30 - 8);
                v31 = *(_QWORD *)(v30 - 48);
                v30 -= 24;
              }
              while (v29 < v31);
              *(_QWORD *)v30 = v29;
              *(_OWORD *)(v30 + 8) = v34;
            }
            v27 = (unint64_t *)(v28 + 24);
            a1 = v28;
          }
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = (__int128 *)(a2 - 2);
        v21 = *(a2 - 2);
        if (v21 < *v9 || *v9 >= v21 && *(a2 - 1) < v9[1])
        {
          v23 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v20;
          *v20 = v23;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__int128 *)v9, v9 + 2, (__int128 *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)v9, v9 + 2, (uint64_t)(v9 + 4), (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__n128 *)v9, v9 + 2, (__n128 *)v9 + 2, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__int128 *)&v9[2 * (v13 >> 1)], v9, (__int128 *)a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__int128 *)v9, &v9[2 * (v13 >> 1)], (__int128 *)a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__int128 *)v9 + 1, v15 - 2, (__int128 *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__int128 *)v9 + 2, &v9[2 * v14 + 2], (__int128 *)a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__int128 *)v15 - 1, v15, (__int128 *)&v9[2 * v14 + 2]);
            v22 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v22;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v16 = *(v9 - 2);
          if (v16 >= *v9 && (*v9 < v16 || *(v9 - 1) >= v9[1]))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,OffsetPair *,std::__less<void,void> &>(v9, (unint64_t)a2);
            goto LABEL_18;
          }
LABEL_13:
          v17 = (__int128 *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,OffsetPair *,std::__less<void,void> &>(v9, (unint64_t)a2);
          if ((v18 & 1) == 0)
            goto LABEL_16;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)v9, v17);
          v9 = (unint64_t *)(v17 + 1);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)(v17 + 1), (__int128 *)a2))
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *,false>(a1, v17, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v17 + 1);
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (unint64_t *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *,OffsetPair *>(v9, a2, a2, a3);
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (result != a2)
  {
    v2 = result + 24;
    if (result + 24 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 24);
        if (v6 < *(_QWORD *)v4)
        {
          v10 = *(_OWORD *)(v4 + 32);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_QWORD *)(v8 + 40) = *(_QWORD *)(result + v7 + 16);
            if (!v7)
              break;
            v7 -= 24;
            if (v6 >= *(_QWORD *)(v8 - 24))
            {
              v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_QWORD *)v9 = v6;
          *(_OWORD *)(v9 + 8) = v10;
        }
        v2 = v5 + 24;
        v3 += 24;
        v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(__int128 *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_QWORD *)a1)
  {
    if (v4 < v3)
    {
      v5 = *((_QWORD *)a1 + 2);
      v6 = *a1;
      v7 = a3[2];
      *a1 = *(_OWORD *)a3;
      *((_QWORD *)a1 + 2) = v7;
      *(_OWORD *)a3 = v6;
      a3[2] = v5;
      return 1;
    }
    v14 = *((_QWORD *)a1 + 2);
    v15 = *a1;
    v16 = a2[2];
    *a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = v16;
    *(_OWORD *)a2 = v15;
    a2[2] = v14;
    if (*a3 >= *a2)
      return 1;
    v17 = a2[2];
    v18 = *(_OWORD *)a2;
    v19 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v19;
    *(_OWORD *)a3 = v18;
    a3[2] = v17;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = a2[2];
    v9 = *(_OWORD *)a2;
    v10 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v10;
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
    if (*a2 >= *(_QWORD *)a1)
      return 1;
    v11 = *((_QWORD *)a1 + 2);
    v12 = *a1;
    v13 = a2[2];
    *a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = v13;
    *(_OWORD *)a2 = v12;
    a2[2] = v11;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  unint64_t v14;

  v2 = *a1;
  if (*a1 >= *(_QWORD *)(a2 - 24))
  {
    v5 = a1 + 3;
    do
    {
      v3 = v5;
      if ((unint64_t)v5 >= a2)
        break;
      v5 += 3;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if ((unint64_t)v3 < a2)
  {
    do
    {
      v6 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v2 < v6);
  }
  while ((unint64_t)v3 < a2)
  {
    v14 = v3[2];
    v13 = *(_OWORD *)v3;
    v7 = *(_OWORD *)a2;
    v3[2] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v3 = v7;
    *(_QWORD *)(a2 + 16) = v14;
    *(_OWORD *)a2 = v13;
    do
    {
      v8 = v3[3];
      v3 += 3;
    }
    while (v2 >= v8);
    do
    {
      v9 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v2 < v9);
  }
  if (v3 - 3 != a1)
  {
    v10 = *(_OWORD *)(v3 - 3);
    a1[2] = *(v3 - 1);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 3) = v2;
  *((_OWORD *)v3 - 1) = v12;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v17;

  v2 = 0;
  v3 = *a1;
  do
  {
    v4 = a1[v2 + 3];
    v2 += 3;
  }
  while (v4 < v3);
  v5 = &a1[v2];
  if (v2 == 3)
  {
    do
    {
      if ((unint64_t)v5 >= a2)
        break;
      v7 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      v6 = *(_QWORD *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  v8 = &a1[v2];
  if ((unint64_t)v5 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *(_OWORD *)v8;
      v11 = v8[2];
      v12 = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[2] = v12;
      *(_QWORD *)(v9 + 16) = v11;
      *(_OWORD *)v9 = v10;
      do
      {
        v13 = v8[3];
        v8 += 3;
      }
      while (v13 < v3);
      do
      {
        v14 = *(_QWORD *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if (v8 - 3 != a1)
  {
    v15 = *(_OWORD *)(v8 - 3);
    a1[2] = *(v8 - 1);
    *(_OWORD *)a1 = v15;
  }
  *(v8 - 3) = v3;
  *((_OWORD *)v8 - 1) = v17;
  return v8 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)(a2 - 24) < *(_QWORD *)a1)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__n128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      v10 = (_QWORD *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < *v10)
    {
      v18 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(_QWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (_QWORD *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__int128 *)a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    v9 = a3[2];
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    if (*a3 < *a2)
    {
      v11 = a2[2];
      result = *(__n128 *)a2;
      v12 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v12;
      *(__n128 *)a3 = result;
      a3[2] = v11;
      if (*a2 < *(_QWORD *)a1)
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        a2[2] = v13;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(__n128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)a1, a2, a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    v11 = a4[1].n128_u64[0];
    result = *a4;
    v12 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v12;
    *a5 = result;
    a5[1].n128_u64[0] = v11;
    if (a4->n128_u64[0] < *a3)
    {
      v13 = a3[2];
      result = *(__n128 *)a3;
      v14 = a4[1].n128_u64[0];
      *(__n128 *)a3 = *a4;
      a3[2] = v14;
      *a4 = result;
      a4[1].n128_u64[0] = v13;
      if (*a3 < *a2)
      {
        v15 = a2[2];
        result = *(__n128 *)a2;
        v16 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v16;
        *(__n128 *)a3 = result;
        a3[2] = v15;
        if (*a2 < a1->n128_u64[0])
        {
          v17 = a1[1].n128_u64[0];
          result = *a1;
          v18 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v18;
          *(__n128 *)a2 = result;
          a2[2] = v17;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v28;
  unint64_t v29;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[3 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = v14[2];
          v16 = *(_OWORD *)v14;
          v17 = a1[2];
          *(_OWORD *)v14 = *(_OWORD *)a1;
          v14[2] = v17;
          *(_OWORD *)a1 = v16;
          a1[2] = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      do
      {
        v19 = 0;
        v28 = *(_OWORD *)a1;
        v29 = a1[2];
        v20 = a1;
        do
        {
          v21 = &v20[3 * v19 + 3];
          v22 = (2 * v19) | 1;
          v23 = 2 * v19 + 2;
          if (v23 < v18 && *v21 < v21[3])
          {
            v21 += 3;
            v22 = v23;
          }
          v24 = *(_OWORD *)v21;
          v20[2] = v21[2];
          *(_OWORD *)v20 = v24;
          v20 = v21;
          v19 = v22;
        }
        while (v22 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v6 -= 3;
        if (v21 == v6)
        {
          v21[2] = v29;
          *(_OWORD *)v21 = v28;
        }
        else
        {
          v25 = *(_OWORD *)v6;
          v21[2] = v6[2];
          *(_OWORD *)v21 = v25;
          *(_OWORD *)v6 = v28;
          v6[2] = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)a1, (uint64_t)(v21 + 3), a4, 0xAAAAAAAAAAAAAAABLL * (v21 + 3 - a1));
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 result;
  __n128 v16;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v6 = (unint64_t *)(a1 + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2 >= a3)
      {
        v7 = *v6;
      }
      else
      {
        v7 = *v6;
        v8 = v6[3];
        if (*v6 <= v8)
          v7 = v6[3];
        if (*v6 < v8)
        {
          v6 += 3;
          v5 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      v9 = *a4;
      if (v7 >= *a4)
      {
        v16 = *(__n128 *)(a4 + 1);
        do
        {
          v10 = a4;
          a4 = v6;
          v11 = *(_OWORD *)v6;
          v10[2] = v6[2];
          *(_OWORD *)v10 = v11;
          if (v4 < v5)
            break;
          v12 = (2 * v5) | 1;
          v6 = (unint64_t *)(a1 + 24 * v12);
          v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            v13 = *v6;
            v5 = v12;
          }
          else
          {
            v13 = *v6;
            v14 = v6[3];
            if (*v6 <= v14)
              v13 = v6[3];
            if (*v6 >= v14)
              v5 = v12;
            else
              v6 += 3;
          }
        }
        while (v13 >= v9);
        *a4 = v9;
        result = v16;
        *(__n128 *)(a4 + 1) = v16;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  __n128 result;
  __n128 v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (__int128 *)(a1 + 24 * v4);
    v6 = (__int128 *)(a2 - 24);
    v7 = *(_QWORD *)(a2 - 24);
    if (*(_QWORD *)v5 < v7)
    {
      v11 = *(__n128 *)(a2 - 16);
      do
      {
        v8 = v6;
        v6 = v5;
        v9 = *v5;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v5 + 2);
        *v8 = v9;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (__int128 *)(a1 + 24 * v4);
      }
      while (*(_QWORD *)v5 < v7);
      *(_QWORD *)v6 = v7;
      result = v11;
      *(__int128 *)((char *)v6 + 8) = (__int128)v11;
    }
  }
  return result;
}

void std::vector<std::pair<unsigned long long,objc_object * {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<unsigned long long,objc_object * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23C73B46C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_23C73B510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C73BAC8(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v20;
  va_list va;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v20 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  v23 = va_arg(va1, _QWORD);
  v24 = va_arg(va1, _QWORD);

  MEMORY[0x242623B0C](va1);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_23C73BD10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C73BDD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL DYCommandBufferUID::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2 == *(_QWORD *)a1 && *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8);
}

uint64_t CommandBufferUIDFromString(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  -[NSString componentsSeparatedByString:](v1, "componentsSeparatedByString:", CFSTR("-"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x24BDD17A8];
  objc_msgSend(v2, "objectAtIndexedSubscript:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "scannerWithString:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "scanUnsignedLongLong:", &v8);
  objc_msgSend(v2, "objectAtIndexedSubscript:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v9) = objc_msgSend(v6, "unsignedIntValue");

  return v8;
}

void sub_23C73BEF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_23C73C6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23C73CA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23C73CDAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ProcessPerBufferPatchingRequest(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *i;
  void *v8;
  void *v9;
  id v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  for (i = *(_QWORD **)(a1 + 32); i; i = (_QWORD *)*i)
  {
    GetMTLBufferFromObjectMap(a4, i[2]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      v10 = v8;
      v12 = (unint64_t *)i[3];
      v11 = (unint64_t *)i[4];
      while (v12 != v11)
      {
        if (*v12 >= a3)
        {
          NSLog(CFSTR("Buffer offset (%llu) greater than buffer length (%llu)"), *v12, a3);
          break;
        }
        v13 = v12[1];
        if (v13 >= objc_msgSend(v10, "length"))
        {
          NSLog(CFSTR("Buffer offset (%llu) greater than buffer length (%lu)"), v12[1], objc_msgSend(v10, "length"));
        }
        else
        {
          v14 = *v12;
          *(_QWORD *)(a2 + v14) = v12[1] + objc_msgSend(v10, "gpuAddress");
        }
        v12 += 2;
      }

    }
    else
    {
      NSLog(CFSTR("Pointee buffer %llu not found"), i[2]);
    }

  }
}

void sub_23C73CFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::~__hash_table(result);
    JUMPOUT(0x242623D28);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::~__hash_table((uint64_t)(v2 + 5));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t BufferAndOffsetFromDictionary(NSDictionary *a1)
{
  NSDictionary *v1;
  uint64_t UInt64WithKey;

  v1 = a1;
  UInt64WithKey = GetUInt64WithKey(v1, CFSTR("buffer_device_object"));
  GetUInt64WithKey(v1, CFSTR("buffer_offset"));

  return UInt64WithKey;
}

void sub_23C73D198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GetUInt64WithKey(NSDictionary *a1, NSString *a2)
{
  NSString *v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  -[NSDictionary objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    NSLog(CFSTR("Error: '%@' key not found."), v3);
LABEL_6:
    v5 = 0;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    NSLog(CFSTR("Error: '%@' is not a number."), v3);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v4, "unsignedLongLongValue");
LABEL_7:

  return v5;
}

void sub_23C73D24C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x50uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_QWORD *)v14 + 2) = **a4;
  *((_QWORD *)v14 + 9) = 0;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 18) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_23C73D4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::~__hash_table((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C73D750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

id DictionaryFromBufferAndOffset(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[2];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v6[0] = CFSTR("buffer_device_object");
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[1] = CFSTR("buffer_offset");
  v7[0] = v2;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", a1[1]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v3;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v7, v6, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_23C73D884(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id GetMTLBufferFromObjectMap(_QWORD *a1, unint64_t a2)
{
  _QWORD *v2;
  id v3;
  id v4;
  unint64_t v6;

  v6 = a2;
  v2 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, &v6);
  if (v2)
  {
    v3 = (id)v2[3];
    if ((objc_msgSend(v3, "conformsToProtocol:", &unk_256BDB468) & 1) != 0)
    {
      v4 = v3;
    }
    else
    {
      NSLog(CFSTR("Object %llu is not an MTLBuffer."), v6);
      v4 = 0;
    }

    return v4;
  }
  else
  {
    NSLog(CFSTR("Buffer %llu not found in the object map."), v6);
    return 0;
  }
}

void sub_23C73D940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CPUAccessibleMTLBufferData::CPUAccessibleMTLBufferData(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v5 = a2;
  v6 = a3;
  *(_QWORD *)a1 = v6;
  v7 = v5;
  v8 = v7;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = 0;
  if (!v7 || !*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v7;
    goto LABEL_6;
  }
  if (objc_msgSend(v7, "storageMode") == 2)
  {
    objc_msgSend(*(id *)a1, "commandBuffer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "blitCommandEncoder");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setLabel:", CFSTR("Dyson - blit buffer from GPU"));
    objc_msgSend(*(id *)(a1 + 8), "device");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "newBufferWithLength:options:", objc_msgSend(*(id *)(a1 + 8), "length"), 0);
    v13 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v12;

    objc_msgSend(v10, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", *(_QWORD *)(a1 + 8), 0, *(_QWORD *)(a1 + 16), 0, objc_msgSend(*(id *)(a1 + 8), "length"));
    objc_msgSend(v10, "endEncoding");
    objc_msgSend(v9, "commit");
    objc_msgSend(v9, "waitUntilCompleted");

LABEL_6:
  }

  return a1;
}

void sub_23C73DA88(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void CPUAccessibleMTLBufferData::~CPUAccessibleMTLBufferData(CPUAccessibleMTLBufferData *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2 && objc_msgSend(v2, "storageMode") == 2)
  {
    objc_msgSend(*(id *)this, "commandBuffer");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "blitCommandEncoder");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setLabel:", CFSTR("Dyson - blit buffer from GPU"));
    objc_msgSend(v4, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", *((_QWORD *)this + 2), 0, *((_QWORD *)this + 1), 0, objc_msgSend(*((id *)this + 1), "length"));
    objc_msgSend(v4, "endEncoding");
    objc_msgSend(v3, "commit");
    objc_msgSend(v3, "waitUntilCompleted");

  }
}

void std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::__deallocate_node(a1, *(_QWORD ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::__deallocate_node(uint64_t a1, _QWORD **a2)
{
  _QWORD **v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::__tree<BufferEntry>::destroy((uint64_t)(v2 + 4), v2[5]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
}

void std::__tree<BufferEntry>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<BufferEntry>::destroy(a1, *a2);
    std::__tree<BufferEntry>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C73DEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 3;
    std::vector<PatchingRequest>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void std::vector<PatchingRequest>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;
        std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v4 - 1, 0);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<PatchingRequest>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 *v17;
  char v18;
  BOOL v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  _OWORD *v10;
  unint64_t v11;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      while (1)
      {
        v5 = v4;
        v4 = v2;
        v6 = v5[2];
        if (v6 < *v5)
          break;
        if (*v5 >= v6)
        {
          v7 = v5[3];
          if (v7 < v5[1])
            goto LABEL_6;
        }
LABEL_19:
        v2 = v4 + 2;
        v3 += 16;
        if (v4 + 2 == a2)
          return result;
      }
      v7 = v5[3];
LABEL_6:
      *(_OWORD *)v4 = *(_OWORD *)v5;
      v8 = result;
      if (v5 != result)
      {
        v9 = v3;
        while (1)
        {
          v10 = (_OWORD *)((char *)result + v9);
          v11 = *(unint64_t *)((char *)result + v9 - 16);
          if (v6 >= v11)
          {
            if (v11 < v6)
            {
              v8 = v5;
              goto LABEL_18;
            }
            if (v7 >= *((_QWORD *)v10 - 1))
              break;
          }
          v5 -= 2;
          *v10 = *(_OWORD *)((char *)result + v9 - 16);
          v9 -= 16;
          if (!v9)
          {
            v8 = result;
            goto LABEL_18;
          }
        }
        v8 = (unint64_t *)((char *)result + v9);
      }
LABEL_18:
      *v8 = v6;
      v8[1] = v7;
      goto LABEL_19;
    }
  }
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;

  if (result != a2)
  {
    while (1)
    {
      if (result + 2 == a2)
        return result;
      v2 = result;
      result += 2;
      v3 = v2[2];
      if (v3 >= *v2)
      {
        if (*v2 >= v3)
        {
          v4 = v2[3];
          if (v4 < v2[1])
            goto LABEL_7;
        }
      }
      else
      {
        v4 = v2[3];
        do
        {
          do
          {
LABEL_7:
            v5 = v2;
            *((_OWORD *)v2 + 1) = *(_OWORD *)v2;
            v7 = *(v2 - 2);
            v2 -= 2;
            v6 = v7;
          }
          while (v3 < v7);
        }
        while (v6 >= v3 && v4 < *(v5 - 1));
        *v5 = v3;
        v5[1] = v4;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(__int128 *a1, unint64_t *a2, __int128 *a3)
{
  unint64_t v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  if (*a2 < *(_QWORD *)a1 || *(_QWORD *)a1 >= v3 && a2[1] < *((_QWORD *)a1 + 1))
  {
    if (*(_QWORD *)a3 < v3 || v3 >= *(_QWORD *)a3 && *((_QWORD *)a3 + 1) < a2[1])
    {
      v4 = *a1;
      *a1 = *a3;
      *a3 = v4;
    }
    else
    {
      v8 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*(_QWORD *)a3 < *a2 || *a2 >= *(_QWORD *)a3 && *((_QWORD *)a3 + 1) < a2[1])
      {
        v9 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *a3;
        *a3 = v9;
        return 2;
      }
    }
    return 1;
  }
  if (*(_QWORD *)a3 < v3 || v3 >= *(_QWORD *)a3 && *((_QWORD *)a3 + 1) < a2[1])
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v6;
    if (*a2 < *(_QWORD *)a1 || *(_QWORD *)a1 >= *a2 && a2[1] < *((_QWORD *)a1 + 1))
    {
      v7 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v7;
      return 2;
    }
    return 1;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,OffsetPair *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)(a2 - 16);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(_QWORD *)(a2 - 8)))
  {
    for (i = a1 + 2; (unint64_t)i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(_QWORD *)(a2 + 8); a2 -= 16)
    {
      v8 = *(_QWORD *)(a2 - 16);
      v4 = v8;
    }
  }
  while ((unint64_t)i < a2)
  {
    v14 = *(_OWORD *)i;
    *(_OWORD *)i = *(_OWORD *)a2;
    *(_OWORD *)a2 = v14;
    do
    {
      v10 = i[2];
      i += 2;
      v9 = v10;
    }
    while (v2 >= v10 && (v9 < v2 || v3 >= i[1]));
    do
    {
      do
      {
        v12 = *(_QWORD *)(a2 - 16);
        a2 -= 16;
        v11 = v12;
      }
      while (v2 < v12);
    }
    while (v11 >= v2 && v3 < *(_QWORD *)(a2 + 8));
  }
  if (i - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)i - 1);
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,OffsetPair *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v19;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v8 = *(_QWORD *)(a2 - 16);
      a2 -= 16;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_QWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v10 = *(_QWORD *)(a2 - 16);
        a2 -= 16;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (*(_QWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  v12 = v6;
  if (v6 < a2)
  {
    v13 = a2;
    do
    {
      v19 = *(_OWORD *)v12;
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_OWORD *)v13 = v19;
      do
      {
        do
        {
          v15 = *(_QWORD *)(v12 + 16);
          v12 += 16;
          v14 = v15;
        }
        while (v15 < v3);
      }
      while (v3 >= v14 && *(_QWORD *)(v12 + 8) < v4);
      do
      {
        v17 = *(_QWORD *)(v13 - 16);
        v13 -= 16;
        v16 = v17;
      }
      while (v17 >= v3 && (v3 < v16 || *(_QWORD *)(v13 + 8) >= v4));
    }
    while (v12 < v13);
  }
  if ((unint64_t *)(v12 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v12 - 16);
  *(_QWORD *)(v12 - 16) = v3;
  *(_QWORD *)(v12 - 8) = v4;
  return v12 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unint64_t v7;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      v7 = *((_QWORD *)a2 - 2);
      if (v7 < *(_QWORD *)a1 || *(_QWORD *)a1 >= v7 && *((_QWORD *)a2 - 1) < *(_QWORD *)(a1 + 8))
      {
        v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(a1, (unint64_t *)(a1 + 16), a1 + 32, (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__n128 *)a1, (unint64_t *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v9 = (__int128 *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__int128 *)a1, (unint64_t *)(a1 + 16), (__int128 *)(a1 + 32));
      v10 = (__int128 *)(a1 + 48);
      if ((__int128 *)(a1 + 48) == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)v10;
    if (*(_QWORD *)v10 < *(_QWORD *)v9)
      break;
    if (*(_QWORD *)v9 >= v13)
    {
      v14 = *((_QWORD *)v10 + 1);
      if (v14 < *((_QWORD *)v9 + 1))
        goto LABEL_12;
    }
LABEL_22:
    v9 = v10;
    v11 += 16;
    if (++v10 == a2)
      return 1;
  }
  v14 = *((_QWORD *)v10 + 1);
LABEL_12:
  *v10 = *v9;
  v15 = (_QWORD *)a1;
  if (v9 != (__int128 *)a1)
  {
    v16 = v11;
    while (1)
    {
      v17 = a1 + v16;
      v18 = *(_QWORD *)(a1 + v16 + 16);
      if (v13 >= v18)
      {
        if (v18 < v13)
        {
          v15 = v9;
          goto LABEL_21;
        }
        if (v14 >= *(_QWORD *)(v17 + 24))
          break;
      }
      --v9;
      *(_OWORD *)(v17 + 32) = *(_OWORD *)(a1 + v16 + 16);
      v16 -= 16;
      if (v16 == -32)
      {
        v15 = (_QWORD *)a1;
        goto LABEL_21;
      }
    }
    v15 = (_QWORD *)(a1 + v16 + 32);
  }
LABEL_21:
  *v15 = v13;
  v15[1] = v14;
  if (++v12 != 8)
    goto LABEL_22;
  return v10 + 1 == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__int128 *)a1, a2, (__int128 *)a3);
  if (*(_QWORD *)a4 < *(_QWORD *)a3 || *(_QWORD *)a3 >= *(_QWORD *)a4 && *(_QWORD *)(a4 + 8) < *(_QWORD *)(a3 + 8))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_QWORD *)a3 < *a2 || *a2 >= *(_QWORD *)a3 && *(_QWORD *)(a3 + 8) < a2[1])
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1 || *(_QWORD *)a1 >= *a2 && a2[1] < *(_QWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(__n128 *a1, unint64_t *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0] || a4->n128_u64[0] >= a5->n128_u64[0] && a5->n128_u64[1] < a4->n128_u64[1])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < a3->n128_u64[0] || a3->n128_u64[0] >= a4->n128_u64[0] && a4->n128_u64[1] < a3->n128_u64[1])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (a3->n128_u64[0] < *a2 || *a2 >= a3->n128_u64[0] && a3->n128_u64[1] < a2[1])
      {
        result = *(__n128 *)a2;
        *(__n128 *)a2 = *a3;
        *a3 = result;
        if (*a2 < a1->n128_u64[0] || a1->n128_u64[0] >= *a2 && a2[1] < a1->n128_u64[1])
        {
          result = *a1;
          *a1 = *(__n128 *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *,OffsetPair *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  __int128 v21;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*v14 < *a1 || *a1 >= *v14 && v14[1] < a1[1])
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 2;
      do
      {
        v21 = *(_OWORD *)a1;
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(a1, a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)v18 = v21;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v17;
          *(_OWORD *)v17 = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)a1, (uint64_t)(v18 + 2), a4, ((char *)(v18 + 2) - (char *)a1) >> 4);
        }
        v17 -= 2;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && v8[1] < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *a4;
      if (*v8 >= *a4)
      {
        v12 = a4[1];
        if (v11 < *v8 || v8[1] >= v12)
        {
          *(_OWORD *)a4 = *(_OWORD *)v8;
          if (v5 >= v7)
          {
            while (1)
            {
              v14 = 2 * v7;
              v7 = (2 * v7) | 1;
              v13 = (unint64_t *)(result + 16 * v7);
              v15 = v14 + 2;
              if (v15 < a3)
              {
                v16 = v13[2];
                if (*v13 < v16 || v16 >= *v13 && v13[1] < v13[3])
                {
                  v13 += 2;
                  v7 = v15;
                }
              }
              if (*v13 < v11 || v11 >= *v13 && v13[1] < v12)
                break;
              *(_OWORD *)v8 = *(_OWORD *)v13;
              v8 = v13;
              if (v5 < v7)
                goto LABEL_22;
            }
          }
          v13 = v8;
LABEL_22:
          *v13 = v11;
          v13[1] = v12;
        }
      }
    }
  }
  return result;
}

__n128 std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    a1 += 2 * v3 + 2;
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3)
    {
      v9 = a1[2];
      if (*a1 < v9 || v9 >= *a1 && a1[1] < a1[3])
      {
        a1 += 2;
        v3 = v8;
      }
    }
    result = *(__n128 *)a1;
    *(_OWORD *)v6 = *(_OWORD *)a1;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    v7 = *(_QWORD *)(a2 - 16);
    if (*v6 >= v7)
    {
      if (v7 < *v6)
        return result;
      v8 = *(_QWORD *)(a2 - 8);
      if (v6[1] >= v8)
        return result;
    }
    else
    {
      v8 = *(_QWORD *)(a2 - 8);
    }
    *(_OWORD *)(a2 - 16) = *(_OWORD *)v6;
    if (v4 >= 2)
    {
      while (1)
      {
        v10 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v9 = (unint64_t *)(result + 16 * v5);
        if (*v9 >= v7 && (v7 < *v9 || v9[1] >= v8))
          break;
        *(_OWORD *)v6 = *(_OWORD *)v9;
        v6 = (unint64_t *)(result + 16 * v5);
        if (v10 <= 1)
          goto LABEL_12;
      }
    }
    v9 = v6;
LABEL_12:
    *v9 = v7;
    v9[1] = v8;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  char v18;
  _BOOL4 v19;
  unsigned int v20;
  int *v21;
  int *v22;
  int *v23;

  v7 = a2;
  v8 = (int *)result;
  v22 = a2;
  v23 = (int *)result;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = (char *)v7 - (char *)v8;
    v11 = ((char *)v7 - (char *)v8) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(v7 - 4);
        v22 = v7 - 4;
        if (v20 < *v8)
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v23, &v22);
        return result;
      case 3uLL:
        v22 = v7 - 4;
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v8, v8 + 4, v7 - 4);
      case 4uLL:
        v22 = v7 - 4;
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v8, v8 + 4, v8 + 8, v7 - 4);
      case 5uLL:
        v22 = v7 - 4;
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v8, v8 + 4, v8 + 8, v8 + 12, v7 - 4);
      default:
        if (v10 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((uint64_t)v8, (uint64_t)v7);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((uint64_t)v8, (uint64_t)v7);
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *,PatchingRequest *>(v8, v7, v7, a3);
          return result;
        }
        v12 = v11 >> 1;
        v13 = v7 - 4;
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(&v8[4 * (v11 >> 1)], v8, v13);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v8, &v8[4 * (v11 >> 1)], v13);
          v14 = v22;
          v15 = 16 * v12 - 16;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v23 + 4, (int *)((char *)v23 + v15), v22 - 8);
          v16 = 16 * v12 + 16;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v23 + 8, (int *)((char *)v23 + v16), v14 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((int *)((char *)v23 + v15), &v23[4 * v12], (int *)((char *)v23 + v16));
          v21 = &v23[4 * v12];
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v23, &v21);
        }
        if ((a5 & 1) == 0)
        {
          v7 = v22;
          if (*(v23 - 4) < *v23)
            goto LABEL_12;
          result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PatchingRequest *,std::__less<void,void> &>((uint64_t)v23, v22);
          v8 = (int *)result;
LABEL_21:
          a5 = 0;
          v23 = v8;
          a4 = -v9;
          continue;
        }
        v7 = v22;
LABEL_12:
        v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PatchingRequest *,std::__less<void,void> &>((uint64_t)v23, v7);
        if ((v18 & 1) == 0)
        {
LABEL_19:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *,false>(v23, v17, a3, -v9, a5 & 1);
          v8 = v17 + 4;
          goto LABEL_21;
        }
        v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v23, v17);
        v8 = v17 + 4;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v17 + 4, v7);
        if (!(_DWORD)result)
        {
          if (v19)
          {
            v23 = v17 + 4;
            goto LABEL_18;
          }
          goto LABEL_19;
        }
        if (!v19)
        {
          v22 = v17;
          v8 = v23;
          v7 = v17;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return result;
    }
  }
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(int **a1, int **a2)
{
  int *v2;
  int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v8;
  char v9;

  v2 = *a1;
  v3 = *a2;
  v8 = **a1;
  v9 = *((_BYTE *)*a1 + 4);
  v4 = *((_QWORD *)*a1 + 1);
  *((_QWORD *)v2 + 1) = 0;
  v5 = *v3;
  *((_BYTE *)v2 + 4) = *((_BYTE *)v3 + 4);
  *v2 = v5;
  v6 = *((_QWORD *)v3 + 1);
  *((_QWORD *)v3 + 1) = 0;
  std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v2 + 1, v6);
  *v3 = v8;
  *((_BYTE *)v3 + 4) = v9;
  return std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v3 + 1, v4);
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 16;
    if (result + 16 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = v4;
        v8 = *(_DWORD *)(v6 + 16);
        if (v8 < *(_DWORD *)v6)
        {
          v9 = *(_BYTE *)(v4 + 4);
          v10 = *(_QWORD *)(v6 + 24);
          v11 = v5;
          *(_QWORD *)(v6 + 24) = 0;
          while (1)
          {
            v12 = v3 + v11;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v3 + v11);
            *(_BYTE *)(v12 + 20) = *(_BYTE *)(v3 + v11 + 4);
            v13 = *(_QWORD *)(v3 + v11 + 8);
            *(_QWORD *)(v12 + 8) = 0;
            std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)(v3 + v11 + 24), v13);
            if (!v11)
              break;
            v11 -= 16;
            if (v8 >= *(_DWORD *)(v12 - 16))
            {
              v14 = v3 + v11 + 16;
              goto LABEL_10;
            }
          }
          v14 = v3;
LABEL_10:
          *(_DWORD *)v14 = v8;
          *(_BYTE *)(v14 + 4) = v9;
          result = std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)(v14 + 8), v10);
        }
        v4 = v7 + 16;
        v5 += 16;
        v6 = v7;
      }
      while (v7 + 16 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;

  if (result != a2)
  {
    v3 = result + 16;
    if (result + 16 != a2)
    {
      v4 = (uint64_t *)(result + 24);
      do
      {
        v5 = v3;
        v6 = *(_DWORD *)(result + 16);
        if (v6 < *(_DWORD *)result)
        {
          v7 = *(_BYTE *)(v3 + 4);
          v8 = *(_QWORD *)(result + 24);
          *(_QWORD *)(result + 24) = 0;
          v9 = v4;
          v10 = v4;
          do
          {
            *((_DWORD *)v9 - 2) = *((_DWORD *)v9 - 6);
            *((_BYTE *)v9 - 4) = *((_BYTE *)v9 - 20);
            v11 = *(v10 - 2);
            v10 -= 2;
            *v10 = 0;
            std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v9, v11);
            v12 = *((_DWORD *)v9 - 10);
            v9 = v10;
          }
          while (v6 < v12);
          *((_DWORD *)v10 - 2) = v6;
          *((_BYTE *)v10 - 4) = v7;
          std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v10, v8);
        }
        v3 = v5 + 16;
        v4 += 2;
        result = v5;
      }
      while (v5 + 16 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(int *a1, int *a2, int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int **v5;
  int **v6;
  int *v8;
  unsigned int *v9;
  unsigned int *v10;

  v10 = (unsigned int *)a1;
  v8 = a3;
  v9 = (unsigned int *)a2;
  v3 = *a2;
  v4 = *a3;
  if (*a2 < *a1)
  {
    if (v4 < v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v10, &v8);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v10, (int **)&v9);
    if (*v8 >= *v9)
      return 1;
    v5 = &v9;
    v6 = &v8;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)v5, v6);
    return 2;
  }
  if (v4 < v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v9, &v8);
    if (*v9 >= *v10)
      return 1;
    v5 = &v10;
    v6 = (int **)&v9;
    goto LABEL_9;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PatchingRequest *,std::__less<void,void> &>(uint64_t a1, int *a2)
{
  unsigned int v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  int *v7;
  unsigned int v8;
  int *v9;
  unsigned int v10;
  unsigned int v11;
  int *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int *v17;
  int *v18;

  v17 = a2;
  v3 = *(_DWORD *)a1;
  v4 = *(_BYTE *)(a1 + 4);
  v6 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3 >= *(a2 - 4))
  {
    v9 = (int *)(a1 + 16);
    do
    {
      v7 = v9;
      if (v9 >= a2)
        break;
      v9 += 4;
    }
    while (v3 >= *v7);
  }
  else
  {
    v7 = (int *)a1;
    do
    {
      v8 = v7[4];
      v7 += 4;
    }
    while (v3 >= v8);
  }
  v18 = v7;
  if (v7 < a2)
  {
    do
    {
      v10 = *(a2 - 4);
      a2 -= 4;
    }
    while (v3 < v10);
    v17 = a2;
  }
  if (v7 < a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v18, &v17);
      v7 = v18;
      do
      {
        v11 = v7[4];
        v7 += 4;
      }
      while (v3 >= v11);
      v18 = v7;
      v12 = v17;
      do
      {
        v13 = *(v12 - 4);
        v12 -= 4;
      }
      while (v3 < v13);
      v17 = v12;
    }
    while (v7 < v12);
  }
  if (v7 - 4 != (int *)a1)
  {
    v14 = *(v7 - 4);
    *(_BYTE *)(a1 + 4) = *((_BYTE *)v7 - 12);
    *(_DWORD *)a1 = v14;
    v15 = *((_QWORD *)v7 - 1);
    *((_QWORD *)v7 - 1) = 0;
    std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v6, v15);
  }
  *(v7 - 4) = v3;
  *((_BYTE *)v7 - 12) = v4;
  std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v7 - 1, v5);
  return v18;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PatchingRequest *,std::__less<void,void> &>(uint64_t a1, int *a2)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  unsigned int v14;
  int *v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int *v20;
  int *v21;

  v4 = 0;
  v5 = *(_DWORD *)a1;
  v6 = *(_BYTE *)(a1 + 4);
  v8 = (uint64_t *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  do
  {
    v9 = *(_DWORD *)(a1 + v4 + 16);
    v4 += 16;
  }
  while (v9 < v5);
  v10 = a1 + v4;
  v21 = (int *)(a1 + v4);
  if (v4 == 16)
  {
    do
    {
      if (v10 >= (unint64_t)a2)
        break;
      v12 = *(a2 - 4);
      a2 -= 4;
    }
    while (v12 >= v5);
  }
  else
  {
    do
    {
      v11 = *(a2 - 4);
      a2 -= 4;
    }
    while (v11 >= v5);
  }
  v20 = a2;
  v13 = (int *)(a1 + v4);
  if (v10 < (unint64_t)a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v21, &v20);
      v13 = v21;
      do
      {
        v14 = v13[4];
        v13 += 4;
      }
      while (v14 < v5);
      v21 = v13;
      v15 = v20;
      do
      {
        v16 = *(v15 - 4);
        v15 -= 4;
      }
      while (v16 >= v5);
      v20 = v15;
    }
    while (v13 < v15);
  }
  if (v13 - 4 != (int *)a1)
  {
    v17 = *(v13 - 4);
    *(_BYTE *)(a1 + 4) = *((_BYTE *)v13 - 12);
    *(_DWORD *)a1 = v17;
    v18 = *((_QWORD *)v13 - 1);
    *((_QWORD *)v13 - 1) = 0;
    std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v8, v18);
  }
  *(v13 - 4) = v5;
  *((_BYTE *)v13 - 12) = v6;
  std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v13 - 1, v7);
  return v13 - 4;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(int *a1, int *a2)
{
  int *v2;
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  int *v7;
  int *v8;
  int v9;
  uint64_t *v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  int *v15;
  uint64_t v16;
  unsigned int v17;
  int *v18;
  int *v19;

  v2 = a2;
  v18 = a2;
  v19 = a1;
  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 4);
      v18 = a2 - 4;
      if (v6 < *a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v19, &v18);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v7 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a1 + 4, a1 + 8);
      v8 = a1 + 12;
      if (a1 + 12 == v2)
        return 1;
      v9 = 0;
      v10 = (uint64_t *)(a1 + 14);
      break;
  }
  while (1)
  {
    v11 = *v8;
    if (*v8 < *v7)
    {
      v12 = *((_BYTE *)v8 + 4);
      v13 = *((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = 0;
      v14 = v10;
      v15 = v19;
      while (1)
      {
        *((_DWORD *)v14 - 2) = *((_DWORD *)v14 - 6);
        *((_BYTE *)v14 - 4) = *((_BYTE *)v14 - 20);
        v16 = *(v14 - 2);
        *(v14 - 2) = 0;
        std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v14, v16);
        if (v14 - 3 == (uint64_t *)v15)
          break;
        v17 = *((_DWORD *)v14 - 10);
        v14 -= 2;
        if (v11 >= v17)
        {
          v15 = (int *)(v14 - 1);
          break;
        }
      }
      *v15 = v11;
      *((_BYTE *)v15 + 4) = v12;
      std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v15 + 1, v13);
      ++v9;
      v2 = v18;
      if (v9 == 8)
        return v8 + 4 == v18;
    }
    v7 = v8;
    v10 += 2;
    v8 += 4;
    if (v8 == v2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result;
  int *v9;
  unsigned int *v10;
  unsigned int *v11;
  int *v12;

  v11 = (unsigned int *)a2;
  v12 = a1;
  v9 = a4;
  v10 = (unsigned int *)a3;
  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v10, &v9);
    if (*v10 < *a2)
    {
      result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v11, (int **)&v10);
      if (*v11 < *a1)
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v12, (int **)&v11);
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  int *v15;

  v14 = (unsigned int *)a2;
  v15 = a1;
  v12 = (unsigned int *)a4;
  v13 = (unsigned int *)a3;
  v11 = a5;
  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a2, a3, a4);
  if (*a5 < *a4)
  {
    result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v12, &v11);
    if (*v12 < *a3)
    {
      result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v13, (int **)&v12);
      if (*v13 < *a2)
      {
        result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v14, (int **)&v13);
        if (*v14 < *a1)
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v15, (int **)&v14);
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *,PatchingRequest *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  int *v12;
  int *v14;
  unsigned int *v15;

  v15 = (unsigned int *)a1;
  if (a1 != a2)
  {
    v7 = a1;
    v8 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v9 = (unint64_t)(v8 - 2) >> 1;
      v10 = v9 + 1;
      v11 = (unsigned int *)&a1[4 * v9];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((uint64_t)v7, a4, v8, v11);
        v11 -= 4;
        --v10;
      }
      while (v10);
    }
    v14 = a2;
    if (a2 != a3)
    {
      v12 = a2;
      do
      {
        if (*v12 < *v15)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v14, (int **)&v15);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((uint64_t)v15, a4, v8, v15);
          v12 = v14;
        }
        v12 += 4;
        v14 = v12;
      }
      while (v12 != a3);
      v7 = (int *)v15;
    }
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((uint64_t)v7, (uint64_t)a2, a4);
    return v14;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = result;
    v6 = (uint64_t)a4 - result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v9 = v6 >> 3;
      v10 = (v6 >> 3) + 1;
      v11 = (unsigned int *)(result + 16 * v10);
      v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        v13 = *v11;
      }
      else
      {
        v13 = *v11;
        v14 = v11[4];
        if (*v11 <= v14)
          v13 = v11[4];
        if (*v11 < v14)
        {
          v11 += 4;
          v10 = v12;
        }
      }
      v15 = *a4;
      if (v13 >= *a4)
      {
        v16 = *((_BYTE *)a4 + 4);
        v17 = *((_QWORD *)a4 + 1);
        *((_QWORD *)a4 + 1) = 0;
        do
        {
          v18 = v11;
          v19 = *v11;
          *((_BYTE *)a4 + 4) = *((_BYTE *)v18 + 4);
          *a4 = v19;
          v20 = *((_QWORD *)v18 + 1);
          *((_QWORD *)v18 + 1) = 0;
          std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)a4 + 1, v20);
          if (v7 < v10)
            break;
          v11 = (unsigned int *)(v5 + 16 * ((2 * v10) | 1));
          if (2 * v10 + 2 >= a3)
          {
            v21 = *v11;
            v10 = (2 * v10) | 1;
          }
          else
          {
            v21 = *v11;
            v22 = v11[4];
            if (*v11 <= v22)
              v21 = v11[4];
            if (*v11 >= v22)
            {
              v10 = (2 * v10) | 1;
            }
            else
            {
              v11 += 4;
              v10 = 2 * v10 + 2;
            }
          }
          a4 = v18;
        }
        while (v21 >= v15);
        *v18 = v15;
        *((_BYTE *)v18 + 4) = v16;
        return std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v18 + 1, v17);
      }
    }
  }
  return result;
}

uint64_t std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v14;
  char v15;

  if (a2 - result >= 17)
  {
    v4 = result;
    v5 = (unint64_t)(a2 - result) >> 4;
    v6 = (uint64_t *)(a2 - 8);
    do
    {
      v14 = *(_DWORD *)v4;
      v15 = *(_BYTE *)(v4 + 4);
      v7 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v4, a3, v5);
      v9 = v6 - 1;
      v10 = (uint64_t *)(v8 + 8);
      if (v6 - 1 == (uint64_t *)v8)
      {
        *(_DWORD *)v8 = v14;
        *(_BYTE *)(v8 + 4) = v15;
        result = std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v10, v7);
      }
      else
      {
        v11 = *(_DWORD *)v9;
        *(_BYTE *)(v8 + 4) = *((_BYTE *)v6 - 4);
        *(_DWORD *)v8 = v11;
        v12 = *v6;
        *v6 = 0;
        std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v10, v12);
        *(_DWORD *)v9 = v14;
        *((_BYTE *)v6 - 4) = v15;
        std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v6, v7);
        result = std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v4, v8 + 16, a3, (v8 + 16 - v4) >> 4);
      }
      v6 -= 2;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_23C73FF40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v4 = 0;
  v5 = a3 - 2;
  if (a3 < 2)
    v5 = a3 - 1;
  v6 = v5 >> 1;
  do
  {
    v7 = a1 + 16 * v4 + 16;
    v8 = (2 * v4) | 1;
    v9 = 2 * v4 + 2;
    if (v9 < a3 && *(_DWORD *)v7 < *(_DWORD *)(v7 + 16))
    {
      v7 += 16;
      v8 = v9;
    }
    v10 = *(_DWORD *)v7;
    *(_BYTE *)(a1 + 4) = *(_BYTE *)(v7 + 4);
    *(_DWORD *)a1 = v10;
    v11 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)(a1 + 8), v11);
    a1 = v7;
    v4 = v8;
  }
  while (v8 <= v6);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = result;
    v6 = v4 >> 1;
    v7 = (unsigned int *)(result + 16 * (v4 >> 1));
    v8 = (unsigned int *)(a2 - 16);
    v9 = *(_DWORD *)(a2 - 16);
    if (*v7 < v9)
    {
      v10 = *(_BYTE *)(a2 - 12);
      v11 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v12 = v7;
        v13 = *v7;
        *((_BYTE *)v8 + 4) = *((_BYTE *)v12 + 4);
        *v8 = v13;
        v14 = *((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v8 + 1, v14);
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (unsigned int *)(v5 + 16 * v6);
        v8 = v12;
      }
      while (*v7 < v9);
      *v12 = v9;
      *((_BYTE *)v12 + 4) = v10;
      return std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v12 + 1, v11);
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::__emplace_unique_key_args<DYCommandBufferUID,std::piecewise_construct_t const&,std::tuple<DYCommandBufferUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = *(unsigned int *)(a2 + 8);
  v8 = *(_QWORD *)a2 ^ (2 * v7);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *(_QWORD *)a2 ^ (2 * v7);
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*(_QWORD *)a2 == v12[2] && (_DWORD)v7 == *((_DWORD *)v12 + 6))
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x38uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = **a4;
  v12[6] = 0;
  v12[5] = 0;
  v12[4] = v12 + 5;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v12 = *v23;
LABEL_42:
    *v23 = v12;
    goto LABEL_43;
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*v12)
  {
    v24 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_23C740308(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<BufferEntry>::destroy((uint64_t)(a2 + 4), a2[5]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__tree<BufferEntry>::__emplace_unique_key_args<BufferEntry,BufferEntry const&>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t v10;

  v5 = (void **)std::__tree<BufferEntry>::__find_equal<BufferEntry>((uint64_t)a1, &v10, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x40uLL);
    v8 = a3[1];
    *((_OWORD *)v6 + 2) = *a3;
    *((_OWORD *)v6 + 3) = v8;
    std::__tree<BufferEntry>::__insert_node_at(a1, v10, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<BufferEntry>::__find_equal<BufferEntry>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  char v16;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a3 + 2;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4 + 4;
        v14 = a3;
        v15 = v7;
        v10 = v4 + 6;
        v12 = v4 + 4;
        v13 = v4 + 6;
        if (!std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<BufferAndOffset const&,BufferAndOffset const&>,std::tuple<BufferAndOffset const&,BufferAndOffset const&>>((uint64_t)&v16, &v14, &v12))break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      v14 = v9;
      v15 = v10;
      v12 = a3;
      v13 = v7;
      if (!std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<BufferAndOffset const&,BufferAndOffset const&>,std::tuple<BufferAndOffset const&,BufferAndOffset const&>>((uint64_t)&v16, &v14, &v12))break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::__tree<BufferEntry>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<BufferAndOffset const&,BufferAndOffset const&>,std::tuple<BufferAndOffset const&,BufferAndOffset const&>>(uint64_t a1, unint64_t **a2, unint64_t **a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _BOOL8 result;

  v3 = **a2;
  v4 = **a3;
  result = 1;
  if (v3 >= v4)
  {
    if (v4 < v3)
      return 0;
    v5 = (*a2)[1];
    v6 = (*a3)[1];
    if (v5 >= v6)
    {
      if (v6 < v5)
        return 0;
      v7 = (uint64_t *)a2[1];
      v8 = (uint64_t *)a3[1];
      if (*v7 >= (unint64_t)*v8 && (*v8 < (unint64_t)*v7 || v7[1] >= (unint64_t)v8[1]))
        return 0;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::__deallocate_node(a1, *(_QWORD ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      std::vector<PatchingRequest>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

id DYMTLGetAssociatedObject(void *a1, unsigned int a2)
{
  getAssociatedObject(a1, a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id getAssociatedObject(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  v4 = v3;
  v5 = 0;
  if (v3 && a2 <= 4)
  {
    objc_getAssociatedObject(v3, (char *)&sAssociatedTypes + 4 * a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

void sub_23C7406AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id DYMTLGetNullableAssociatedObject(void *a1, unsigned int a2)
{
  getAssociatedObject(a1, a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void DYMTLSetAssociatedObject(void *a1, unsigned int a2, void *a3)
{
  id v5;
  id object;

  object = a1;
  v5 = a3;
  if (a2 <= 4 && object && v5)
    objc_setAssociatedObject(object, (char *)&sAssociatedTypes + 4 * a2, v5, (void *)0x301);

}

void sub_23C740744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C7407F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id DYMTLNewTexture(void *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = (void *)objc_msgSend(a1, "newTextureWithDescriptor:", v3);
  DYMTLSetAssociatedObject(v4, 0, v3);

  return v4;
}

void sub_23C740918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id DYMTLNewTextureView(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v13 = a1;
  v14 = v13;
  if (a5 <= 1)
    v15 = 1;
  else
    v15 = a5;
  if (a7 <= 1)
    v16 = 1;
  else
    v16 = a7;
  v17 = (void *)objc_msgSend(v13, "newTextureViewWithPixelFormat:textureType:levels:slices:", a2, a3, a4, v15, a6, v16);
  getAssociatedObject(v14, 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_msgSend(v18, "copy");

  objc_msgSend(v19, "setPixelFormat:", a2);
  objc_msgSend(v19, "setTextureType:", a3);
  objc_msgSend(v19, "setMipmapLevelCount:", a5);
  objc_msgSend(v19, "setArrayLength:", a7);
  DYMTLSetAssociatedObject(v17, 0, v19);

  return v17;
}

void sub_23C740A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id DYMTLNewTextureViewSwizzled(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unsigned int a8)
{
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;

  v15 = a1;
  v16 = v15;
  if (a5 <= 1)
    v17 = 1;
  else
    v17 = a5;
  if (a7 <= 1)
    v18 = 1;
  else
    v18 = a7;
  v19 = (void *)objc_msgSend(v15, "newTextureViewWithPixelFormat:textureType:levels:slices:", a2, a3, a4, v17, a6, v18);
  getAssociatedObject(v16, 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)objc_msgSend(v20, "copy");

  objc_msgSend(v21, "setPixelFormat:", a2);
  objc_msgSend(v21, "setTextureType:", a3);
  objc_msgSend(v21, "setMipmapLevelCount:", a5);
  objc_msgSend(v21, "setArrayLength:", a7);
  objc_msgSend(v21, "setSwizzle:", a8);
  DYMTLSetAssociatedObject(v19, 0, v21);

  return v19;
}

void sub_23C740B48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void DYMTLAddDrawableTextureDescriptor(void *a1)
{
  id v1;
  id v2;

  v2 = a1;
  getAssociatedObject(v2, 0);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  if (!v1)
  {
    v1 = objc_alloc_init(MEMORY[0x24BDDD748]);
    objc_msgSend(v1, "setTextureType:", objc_msgSend(v2, "textureType"));
    objc_msgSend(v1, "setPixelFormat:", objc_msgSend(v2, "pixelFormat"));
    objc_msgSend(v1, "setWidth:", objc_msgSend(v2, "width"));
    objc_msgSend(v1, "setHeight:", objc_msgSend(v2, "height"));
    objc_msgSend(v1, "setDepth:", objc_msgSend(v2, "depth"));
    objc_msgSend(v1, "setMipmapLevelCount:", objc_msgSend(v2, "mipmapLevelCount"));
    objc_msgSend(v1, "setSampleCount:", objc_msgSend(v2, "sampleCount"));
    objc_msgSend(v1, "setArrayLength:", objc_msgSend(v2, "arrayLength"));
    objc_msgSend(v1, "setCpuCacheMode:", objc_msgSend(v2, "cpuCacheMode"));
    objc_msgSend(v1, "setStorageMode:", objc_msgSend(v2, "storageMode"));
    objc_msgSend(v1, "setUsage:", objc_msgSend(v2, "usage"));
    DYMTLSetAssociatedObject(v2, 0, v1);
  }

}

void sub_23C740D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id DYMTLNewRenderPipelineStateWithDescriptor(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v15;

  v7 = a1;
  v8 = a2;
  v9 = a3 & 0xFFFFFFFFFFF8FFFCLL;
  v10 = a3 & 0xFFFFFFFFFFF8FFFCLL | 0x50003;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v8, "pipelineLibrary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
      v10 = v9 | 0x10003;
  }
  v15 = 0;
  v12 = (void *)objc_msgSend(v7, "newRenderPipelineStateWithDescriptor:options:reflection:error:", v8, v10, &v15, a4);
  v13 = v15;
  DYMTLSetAssociatedObject(v12, 0, v8);
  DYMTLSetAssociatedObject(v12, 2u, v13);

  return v12;
}

void sub_23C740E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id DYMTLNewRenderPipelineStateWithTileDescriptor(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  id v9;
  id v11;

  v7 = a2;
  v11 = 0;
  v8 = (void *)objc_msgSend(a1, "newRenderPipelineStateWithTileDescriptor:options:reflection:error:", v7, a3 & 0xFFFFFFFFFFF8FFFCLL | 0x50003, &v11, a4);
  v9 = v11;
  DYMTLSetAssociatedObject(v8, 1u, v7);
  DYMTLSetAssociatedObject(v8, 2u, v9);

  return v8;
}

void sub_23C740F00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id DYMTLNewComputePipelineStateWithDescriptor(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v15;

  v7 = a1;
  v8 = a2;
  v9 = a3 & 0xFFFFFFFFFFF8FFFCLL;
  v10 = a3 & 0xFFFFFFFFFFF8FFFCLL | 0x50003;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v8, "pipelineLibrary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
      v10 = v9 | 0x10003;
  }
  v15 = 0;
  v12 = (void *)objc_msgSend(v7, "newComputePipelineStateWithDescriptor:options:reflection:error:", v8, v10, &v15, a4);
  v13 = v15;
  DYMTLSetAssociatedObject(v12, 0, v8);
  DYMTLSetAssociatedObject(v12, 2u, v13);

  return v12;
}

void sub_23C74101C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id DYMTLNewComputePipelineStateWithFunction(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  id v9;
  id v10;
  id v12;

  v7 = a2;
  v12 = 0;
  v8 = (void *)objc_msgSend(a1, "newComputePipelineStateWithFunction:options:reflection:error:", v7, a3 & 0xFFFFFFFFFFF8FFFCLL | 0x50003, &v12, a4);
  v9 = v12;
  v10 = objc_alloc_init(MEMORY[0x24BDDD548]);
  objc_msgSend(v10, "setComputeFunction:", v7);
  DYMTLSetAssociatedObject(v8, 0, v10);
  DYMTLSetAssociatedObject(v8, 2u, v9);

  return v8;
}

void sub_23C741108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C7414B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C741878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23C7419CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C741B28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C741BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C741E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C741F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_23C741FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_23C74211C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_23C742188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_23C7422C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_23C742C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  std::__tree<DYMTLIABDecodingOp>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void sub_23C743098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C7434C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t *std::set<DYMTLIABDecodingOp>::insert[abi:ne180100]<std::__tree_const_iterator<DYMTLIABDecodingOp,std::__tree_node<DYMTLIABDecodingOp,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<DYMTLIABDecodingOp>::__emplace_hint_unique_key_args<DYMTLIABDecodingOp,DYMTLIABDecodingOp const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_23C743968(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void rencodeBufferData(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27)
{
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  objc_object *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  id *v53;
  id *v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  id *v59;
  id *v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD v78[3];
  id v79;
  id v80;
  uint64_t v81;
  id v82;
  id v83;
  uint64_t v84;
  _QWORD v85[2];
  _BYTE v86[24];
  _BYTE *v87;
  _QWORD v88[3];
  _QWORD *v89;
  _QWORD v90[3];
  _QWORD *v91;
  uint64_t v92;

  v34 = a22;
  v33 = a23;
  v35 = a25;
  v92 = *MEMORY[0x24BDAC8D0];
  v85[0] = a26;
  v85[1] = a27;
  v84 = a1;
  v83 = a2;
  v82 = a3;
  v36 = a4;
  v81 = a5;
  v37 = v34;
  v80 = v35;
  objc_msgSend(v83, "setArgumentBuffer:offset:", v37, v33);
  DYMTLGetOriginalObject(v37);
  v78[0] = &a21;
  v78[1] = &v84;
  v78[2] = &a23;
  v79 = (id)objc_claimAutoreleasedReturnValue();
  v53 = &v82;
  v54 = &v79;
  v55 = &a23;
  v56 = v78;
  v57 = a6;
  v58 = a13;
  v59 = &v83;
  v60 = &v80;
  v61 = &v84;
  v62 = v85;
  v63 = &a14;
  v64 = a20;
  v65 = &v81;
  v66 = &a21;
  v67 = a7;
  v68 = &a15;
  v69 = a9;
  v70 = a8;
  v71 = &a16;
  v72 = a10;
  v73 = &a17;
  v74 = a11;
  v75 = &a18;
  v76 = a12;
  v77 = &a19;
  v89 = 0;
  v38 = operator new(0x28uLL);
  *v38 = &off_250D6F2A8;
  v38[1] = v88;
  v38[2] = v86;
  v38[3] = &a24;
  v38[4] = &v53;
  v87 = v38;
  v39 = operator new(0x28uLL);
  *v39 = &off_250D6F2F0;
  v39[1] = v88;
  v39[2] = v86;
  v39[3] = &a24;
  v39[4] = &v53;
  v91 = v39;
  std::__function::__value_func<void ()(MTLStructType *,unsigned long)>::swap[abi:ne180100](v90, v88);
  v47 = v91;
  if (v91 == v90)
  {
    v48 = 4;
    v47 = v90;
  }
  else
  {
    if (!v91)
      goto LABEL_6;
    v48 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id *, id *, uint64_t *, _QWORD *, uint64_t, uint64_t, id *, id *, uint64_t *, _QWORD *, uint64_t *, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t *, uint64_t))(*v47 + 8 * v48))(v47, v40, v41, v42, v43, v44, v45, v46, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63,
    v64,
    v65,
    v66,
    v67,
    v68,
    v69);
LABEL_6:
  std::function<void ()(MTLStructType *,unsigned long)>::operator()((uint64_t)v88, v36, 0);
  v49 = v87;
  if (v87 == v86)
  {
    v50 = 4;
    v49 = v86;
  }
  else
  {
    if (!v87)
      goto LABEL_11;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_11:
  v51 = v89;
  if (v89 == v88)
  {
    v52 = 4;
    v51 = v88;
    goto LABEL_15;
  }
  if (v89)
  {
    v52 = 5;
LABEL_15:
    (*(void (**)(void))(*v51 + 8 * v52))();
  }

}

void sub_23C743C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38)
{
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v42 = *(_QWORD **)(v40 - 168);
  if (v42 == (_QWORD *)(v40 - 192))
  {
    v43 = 4;
    v42 = (_QWORD *)(v40 - 192);
  }
  else
  {
    if (!v42)
      goto LABEL_6;
    v43 = 5;
  }
  (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
LABEL_6:
  v44 = *(_QWORD **)(v40 - 136);
  if (v44 == (_QWORD *)(v40 - 160))
  {
    v45 = 4;
    v44 = (_QWORD *)(v40 - 160);
  }
  else
  {
    if (!v44)
      goto LABEL_11;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_11:

  _Unwind_Resume(a1);
}

void sub_23C743EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  void *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:

  _Unwind_Resume(a1);
}

id std::function<MTLStructType * ()(MTLStructType *,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v7;
  id v8;

  v7 = a3;
  v8 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_23C743F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_23C7440A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74426C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  DYMTLReplayerIAB::~DYMTLReplayerIAB((DYMTLReplayerIAB *)va);
  _Unwind_Resume(a1);
}

void DYMTLReplayerIAB::~DYMTLReplayerIAB(DYMTLReplayerIAB *this)
{
  void **v2;

  v2 = (void **)((char *)this + 8);
  std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&v2);

}

void sub_23C744384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C744484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23C744D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27)
{

  _Unwind_Resume(a1);
}

void std::function<void ()(MTLStructType *,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v5 = a3;
  v6 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v6, &v5);

}

void sub_23C745238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_0,std::less<std::set><DYIABPatcher>,void ()(MTLArrayType *,unsigned long)>::~__func()
{
  JUMPOUT(0x242623D28);
}

__n128 std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_0,std::less<std::set><DYIABPatcher>,void ()(MTLArrayType *,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250D6F2A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_0,std::less<std::set><DYIABPatcher>,void ()(MTLArrayType *,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D6F2A8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_0,std::less<std::set><DYIABPatcher>,void ()(MTLArrayType *,unsigned long)>::operator()(uint64_t a1, id *a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v4 = *a3;
  v14 = *a2;
  for (i = 0; ; i = v6 + 1)
  {
    v6 = i;
    if (objc_msgSend(v14, "arrayLength") <= (unint64_t)i)
      break;
    objc_msgSend(v14, "elementStructType");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      objc_msgSend(v14, "elementStructType");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      std::function<void ()(MTLStructType *,unsigned long)>::operator()(v8, v9, v4 + objc_msgSend(v14, "argumentIndexStride") * v6);
LABEL_7:

      continue;
    }
    objc_msgSend(v14, "elementArrayType");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 16);
      objc_msgSend(v14, "elementArrayType");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      std::function<void ()(MTLArrayType *,unsigned long)>::operator()(v11, v9, v4 + objc_msgSend(v14, "argumentIndexStride") * v6);
      goto LABEL_7;
    }
    v12 = objc_msgSend(v14, "elementType");
    v13 = v12;
    if ((unint64_t)(v12 - 58) <= 0x16 && ((1 << (v12 - 58)) & 0x700007) != 0)
    {
      if (DYMTLDataTypeNeedsReencoding(v12, **(_QWORD **)(a1 + 24)))
        rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *,MTLStructType *::map<unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,DYMTLIABDecodingOp<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>>> const&,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const&,std::__1<unsigned long long,MTLStructType *::map<unsigned long long,MTLStructType *::less<MTLStructType *::set><unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><unsigned long long>>>> const&,std::__1<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object  {objcproto15MTLSamplerState}>>> &,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,objc_object * {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object>>> const&,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>> *,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>*,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::set const&,std::__1<unsigned long long,std::__1<unsigned long long,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_3::operator()(*(_QWORD *)(a1 + 32), v13, (uint64_t *)(v4 + objc_msgSend(v14, "argumentIndexStride") * v6), 0);
    }
  }

}

void sub_23C745434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::function<void ()(MTLArrayType *,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v5 = a3;
  v6 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v6, &v5);

}

void sub_23C7454B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t DYMTLDataTypeNeedsReencoding(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = 1;
  if (a1 > 77)
  {
    if (a1 == 78 || a1 == 79)
    {
      result = 4;
    }
    else
    {
      if (a1 != 80)
        return result;
      result = 5;
    }
  }
  else if (a1 == 58)
  {
    result = 0;
  }
  else if (a1 != 59)
  {
    if (a1 != 60)
      return result;
    result = 3;
  }
  return *(_QWORD *)(a2 + 8 * result) == 2;
}

void rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *,MTLStructType *::map<unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,DYMTLIABDecodingOp<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>>> const&,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const&,std::__1<unsigned long long,MTLStructType *::map<unsigned long long,MTLStructType *::less<MTLStructType *::set><unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><unsigned long long>>>> const&,std::__1<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object  {objcproto15MTLSamplerState}>>> &,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,objc_object * {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object>>> const&,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>> *,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>*,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::set const&,std::__1<unsigned long long,std::__1<unsigned long long,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_3::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  objc_object *v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t **v82;
  uint64_t **v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  id *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  unint64_t v92;
  __int128 *v93;
  __int128 *v94;
  _QWORD *v95;
  objc_object *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t **v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t *v110[2];
  char v111;
  void *__p;
  void *v113;
  uint64_t v114;
  uint64_t *v115;
  _QWORD v116[4];
  __int128 v117;
  uint64_t *v118;

  if (a2 > 77)
  {
    switch(a2)
    {
      case 'N':
        v50 = objc_msgSend(**(id **)a1, "uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
        *(_QWORD *)&v117 = v50;
        v51 = *(_QWORD *)(a1 + 24);
        v52 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(_QWORD ***)v51, *(unint64_t **)(v51 + 8));
        if (v52)
        {
          v53 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v52 + 3, *(unint64_t **)(v51 + 16));
          if (v53)
          {
            v110[0] = a3;
            v54 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v53 + 3, (unint64_t *)v110);
            if (v54)
            {
              if (v54[3] == v50)
                return;
            }
          }
        }
        v55 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 152), (unint64_t *)&v117);
        if (!v55)
          return;
        v56 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 40), v55 + 3);
        if (!v56)
          return;
        v29 = (objc_object *)(id)v56[3];
        if ((-[objc_object conformsToProtocol:](v29, "conformsToProtocol:", &unk_256BDB910) & 1) == 0)
          goto LABEL_81;
        objc_msgSend(**(id **)(a1 + 48), "setRenderPipelineState:atIndex:", v29, a3);
        DYMTLGetOriginalObject(v29);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = (uint64_t *)objc_msgSend(v57, "uniqueIdentifier");

        v118 = v58;
        v59 = v117;
        v60 = **(_QWORD **)(a1 + 160);
        v110[0] = (uint64_t *)&v118;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v60, (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v59;
        v34 = v118;
        if (v118 == (uint64_t *)v117)
          goto LABEL_81;
        break;
      case 'O':
        v67 = objc_msgSend(**(id **)a1, "uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
        *(_QWORD *)&v117 = v67;
        v68 = *(_QWORD *)(a1 + 24);
        v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(_QWORD ***)v68, *(unint64_t **)(v68 + 8));
        if (v69)
        {
          v70 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v69 + 3, *(unint64_t **)(v68 + 16));
          if (v70)
          {
            v110[0] = a3;
            v71 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v70 + 3, (unint64_t *)v110);
            if (v71)
            {
              if (v71[3] == v67)
                return;
            }
          }
        }
        v72 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 168), (unint64_t *)&v117);
        if (!v72)
          return;
        v73 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 40), v72 + 3);
        if (!v73)
          return;
        v29 = (objc_object *)(id)v73[3];
        if ((-[objc_object conformsToProtocol:](v29, "conformsToProtocol:", &unk_256BDBBA8) & 1) == 0)
          goto LABEL_81;
        objc_msgSend(**(id **)(a1 + 48), "setComputePipelineState:atIndex:", v29, a3);
        DYMTLGetOriginalObject(v29);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        v75 = (uint64_t *)objc_msgSend(v74, "uniqueIdentifier");

        v118 = v75;
        v76 = v117;
        v77 = **(_QWORD **)(a1 + 176);
        v110[0] = (uint64_t *)&v118;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v77, (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v76;
        v34 = v118;
        if (v118 == (uint64_t *)v117)
          goto LABEL_81;
        break;
      case 'P':
        v22 = objc_msgSend(**(id **)a1, "uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
        *(_QWORD *)&v117 = v22;
        v23 = *(_QWORD *)(a1 + 24);
        v24 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(_QWORD ***)v23, *(unint64_t **)(v23 + 8));
        if (v24)
        {
          v25 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v24 + 3, *(unint64_t **)(v23 + 16));
          if (v25)
          {
            v110[0] = a3;
            v26 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v25 + 3, (unint64_t *)v110);
            if (v26)
            {
              if (v26[3] == v22)
                return;
            }
          }
        }
        v27 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 184), (unint64_t *)&v117);
        if (!v27)
          return;
        v28 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 40), v27 + 3);
        if (!v28)
          return;
        v29 = (objc_object *)(id)v28[3];
        if (!NSClassFromString(CFSTR("MTLIOAccelIndirectCommandBuffer"))
          || (NSClassFromString(CFSTR("MTLIOAccelIndirectCommandBuffer")), (objc_opt_isKindOfClass() & 1) == 0))
        {
          if ((-[objc_object conformsToProtocol:](v29, "conformsToProtocol:", &unk_256BDBE68) & 1) == 0)
            goto LABEL_81;
        }
        objc_msgSend(**(id **)(a1 + 48), "setIndirectCommandBuffer:atIndex:", v29, a3);
        DYMTLGetOriginalObject(v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = (uint64_t *)objc_msgSend(v30, "uniqueIdentifier");

        v118 = v31;
        v32 = v117;
        v33 = **(_QWORD **)(a1 + 192);
        v110[0] = (uint64_t *)&v118;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v33, (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v32;
        v34 = v118;
        if (v118 == (uint64_t *)v117)
          goto LABEL_81;
        break;
      default:
        return;
    }
    v78 = **(_QWORD **)(a1 + 104);
    v110[0] = *(uint64_t **)(a1 + 64);
    v79 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v78, (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
    v110[0] = *(uint64_t **)(a1 + 16);
    v80 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v79 + 3), (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
    v115 = a3;
    v110[0] = (uint64_t *)&v115;
    v49 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)(v80 + 3), (unint64_t *)&v115, (uint64_t)&std::piecewise_construct, v110);
    goto LABEL_74;
  }
  switch(a2)
  {
    case ':':
      v36 = objc_msgSend(**(id **)a1, "uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
      *(_QWORD *)&v117 = v36;
      v37 = *(_QWORD *)(a1 + 24);
      v38 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(_QWORD ***)v37, *(unint64_t **)(v37 + 8));
      if (v38)
      {
        v39 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v38 + 3, *(unint64_t **)(v37 + 16));
        if (v39)
        {
          v110[0] = a3;
          v40 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v39 + 3, (unint64_t *)v110);
          if (v40)
          {
            if (v40[3] == v36)
              return;
          }
        }
      }
      v41 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 112), (unint64_t *)&v117);
      if (!v41)
        return;
      v42 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 40), v41 + 3);
      if (!v42)
        return;
      v29 = (objc_object *)(id)v42[3];
      if ((-[objc_object conformsToProtocol:](v29, "conformsToProtocol:", &unk_256BD5410) & 1) != 0)
      {
        objc_msgSend(**(id **)(a1 + 48), "setTexture:atIndex:", v29, a3);
        v43 = v117;
        v44 = **(_QWORD **)(a1 + 120);
        DYMTLGetOriginalObject(v29);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        v118 = (uint64_t *)objc_msgSend(v45, "uniqueIdentifier");
        v110[0] = (uint64_t *)&v118;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v44, (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v43;

        v34 = (uint64_t *)objc_msgSend(**(id **)a1, "uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
        if (v34 != (uint64_t *)v117)
        {
LABEL_46:
          v46 = **(_QWORD **)(a1 + 104);
          v110[0] = *(uint64_t **)(a1 + 64);
          v47 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v46, (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
          v110[0] = *(uint64_t **)(a1 + 16);
          v48 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v47 + 3), (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
          v118 = a3;
          v110[0] = (uint64_t *)&v118;
          v49 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)(v48 + 3), (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110);
LABEL_74:
          v49[3] = v34;
        }
      }
LABEL_81:

      return;
    case ';':
      *(_QWORD *)&v117 = 0;
      v61 = objc_msgSend(**(id **)a1, "uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
      *(_QWORD *)&v117 = v61;
      v62 = *(_QWORD *)(a1 + 24);
      v63 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(_QWORD ***)v62, *(unint64_t **)(v62 + 8));
      if (v63)
      {
        v64 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v63 + 3, *(unint64_t **)(v62 + 16));
        if (v64)
        {
          v110[0] = a3;
          v65 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v64 + 3, (unint64_t *)v110);
          if (v65)
          {
            if (v65[3] == v61)
              return;
          }
        }
      }
      v66 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 128), (unint64_t *)&v117);
      if (!v66 || (v29 = (objc_object *)(id)v66[3]) == 0)
      {
        v81 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 136), (unint64_t *)&v117);
        if (v81)
        {
          v82 = (uint64_t **)v81[3];
          v83 = (uint64_t **)v81[4];
          while (v82 != v83)
          {
            v110[0] = *v82;
            v84 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 40), (unint64_t *)v110);
            if (v84)
            {
              v86 = (void *)v84[3];
              v29 = v86;
              if (!v29)
                goto LABEL_81;
              v87 = *(_QWORD *)(a1 + 128);
              v110[0] = (uint64_t *)&v117;
              v88 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(v87, (unint64_t *)&v117, (uint64_t)&std::piecewise_construct, v110);
              objc_storeStrong(v88 + 3, v86);
              v89 = v117;
              v90 = **(_QWORD **)(a1 + 144);
              DYMTLGetOriginalObject(v29);
              v91 = (void *)objc_claimAutoreleasedReturnValue();
              v118 = (uint64_t *)objc_msgSend(v91, "uniqueIdentifier");
              v110[0] = (uint64_t *)&v118;
              std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v90, (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v89;

              goto LABEL_62;
            }
            ++v82;
          }
        }
        v29 = 0;
        goto LABEL_81;
      }
LABEL_62:
      if (-[objc_object conformsToProtocol:](v29, "conformsToProtocol:", &unk_256BDBCB0))
      {
        objc_msgSend(**(id **)(a1 + 48), "setSamplerState:atIndex:", v29, a3);
        v34 = (uint64_t *)objc_msgSend(**(id **)a1, "uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
        if (v34 != (uint64_t *)v117)
          goto LABEL_46;
      }
      goto LABEL_81;
    case '<':
      v7 = objc_msgSend(**(id **)a1, "virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
      v8 = *(_QWORD *)(a1 + 24);
      v9 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(_QWORD ***)v8, *(unint64_t **)(v8 + 8));
      if (!v9
        || (v10 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v9 + 3, *(unint64_t **)(v8 + 16))) == 0|| (v110[0] = a3, (v11 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v10 + 3, (unint64_t *)v110)) == 0)|| v11[3] != v7)
      {
        v12 = *(_QWORD **)(a1 + 32);
        v13 = v12 + 1;
        v14 = (_QWORD *)v12[1];
        if (v14)
        {
          v15 = v12 + 1;
          v16 = (_QWORD *)v12[1];
          do
          {
            v17 = v16[4];
            v18 = v17 > v7;
            if (v17 <= v7)
              v19 = v16 + 1;
            else
              v19 = v16;
            if (v18)
              v15 = v16;
            v16 = (_QWORD *)*v19;
          }
          while (*v19);
          if (v15 == v13)
          {
            if (v12[2])
            {
              do
              {
                v21 = v14;
                v14 = (_QWORD *)v14[1];
              }
              while (v14);
            }
            else
            {
              v21 = v12 + 1;
            }
          }
          else if (v15 == (_QWORD *)*v12)
          {
            v21 = v15;
          }
          else
          {
            v20 = (_QWORD *)*v15;
            if (*v15)
            {
              do
              {
                v21 = v20;
                v20 = (_QWORD *)v20[1];
              }
              while (v20);
            }
            else
            {
              do
              {
                v21 = (_QWORD *)v15[2];
                v35 = *v21 == (_QWORD)v15;
                v15 = v21;
              }
              while (v35);
            }
          }
        }
        else
        {
          v85 = v12[2];
          v21 = v12 + 1;
          if (v85)
          {
            do
            {
              v21 = (_QWORD *)v13[2];
              v35 = *v21 == (_QWORD)v13;
              v13 = v21;
            }
            while (v35);
          }
        }
        v92 = v21[4];
        if (v92 <= v7)
        {
          *(_QWORD *)&v117 = 0;
          v93 = (__int128 *)v21[5];
          v94 = (__int128 *)v21[6];
          while (v93 != v94)
          {
            if (*((_QWORD *)v93 + 1) + v92 > v7)
            {
              v117 = *v93;
              if ((_QWORD)v117)
              {
                v95 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(_QWORD **)(a1 + 40), (unint64_t *)&v117);
                if (v95)
                {
                  v96 = (objc_object *)(id)v95[3];
                  if ((-[objc_object conformsToProtocol:](v96, "conformsToProtocol:", &unk_256BDB468) & 1) != 0)
                  {
                    objc_msgSend(**(id **)(a1 + 48), "setBuffer:offset:atIndex:", v96, v7 - v92, a3);
                    if (objc_msgSend(**(id **)(a1 + 56), "patchingMode") == 1)
                    {
                      v97 = **(_QWORD **)(a1 + 16) + 8 * (_QWORD)a3;
                      v98 = **(void ***)(a1 + 56);
                      v116[0] = **(_QWORD **)(a1 + 64);
                      v116[1] = v97;
                      v116[2] = v117;
                      v116[3] = v7 - v92;
                      objc_msgSend(v98, "insertPatchingOp:commandBufferUid:", v116, **(_QWORD **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8));
                    }
                    DYMTLGetOriginalObject(v96);
                    v99 = (void *)objc_claimAutoreleasedReturnValue();
                    v100 = objc_msgSend(v99, "gpuAddress");

                    v115 = (uint64_t *)v100;
                    v101 = **(uint64_t ****)(a1 + 80);
                    v110[0] = (uint64_t *)&v115;
                    std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v101, (unint64_t *)&v115, (uint64_t)&std::piecewise_construct, v110)[5] = v92;
                    if (a4)
                    {
                      __p = 0;
                      v113 = 0;
                      v114 = 0;
                      v102 = *(_QWORD *)(a1 + 88);
                      v103 = *(uint64_t **)(v102 + 8);
                      v110[0] = (uint64_t *)(v7 - v92);
                      v110[1] = v103;
                      if (v110 != (uint64_t **)v102)
                        std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((char *)&__p, *(char **)(v102 + 24), *(_QWORD *)(v102 + 32), (uint64_t)(*(_QWORD *)(v102 + 32) - *(_QWORD *)(v102 + 24)) >> 3);
                      v118 = a3;
                      std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&__p, &v118);
                      v111 = 1;
                      v104 = **(_QWORD **)(a1 + 96);
                      v118 = (uint64_t *)&v117;
                      v105 = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v104, (unint64_t *)&v117, (uint64_t)&std::piecewise_construct, &v118);
                      std::__tree<DYMTLIABDecodingOp>::__emplace_unique_key_args<DYMTLIABDecodingOp,DYMTLIABDecodingOp const&>(v105 + 3, (uint64_t)v110, (uint64_t)v110);
                      if (__p)
                      {
                        v113 = __p;
                        operator delete(__p);
                      }
                    }
                    v106 = objc_msgSend(**(id **)a1, "virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
                    if (v7 != v106)
                    {
                      v107 = **(_QWORD **)(a1 + 104);
                      v110[0] = *(uint64_t **)(a1 + 64);
                      v108 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v107, (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
                      v110[0] = *(uint64_t **)(a1 + 16);
                      v109 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v108 + 3), (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
                      v118 = a3;
                      v110[0] = (uint64_t *)&v118;
                      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)(v109 + 3), (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v106;
                    }
                  }

                }
              }
              return;
            }
            ++v93;
          }
        }
      }
      break;
  }
}

void sub_23C7461EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::push_back[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
      v8 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

char *std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_23C7467A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned long long,BOOL>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BOOL>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_23C746ACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<unsigned long long,BOOL>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BOOL>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C746D54(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_1,std::less<std::set><DYIABPatcher>,void ()(MTLStructType,unsigned long)>::~__func()
{
  JUMPOUT(0x242623D28);
}

__n128 std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_1,std::less<std::set><DYIABPatcher>,void ()(MTLStructType,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250D6F2F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_1,std::less<std::set><DYIABPatcher>,void ()(MTLStructType,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D6F2F0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_1,std::less<std::set><DYIABPatcher>,void ()(MTLStructType,unsigned long)>::operator()(uint64_t a1, id *a2, uint64_t *a3)
{
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v7[6];
  __int128 v8;
  uint64_t v9;

  v4 = *a3;
  objc_msgSend(*a2, "members");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = 3221225472;
  v7[2] = ___ZZL17rencodeBufferDatayPvPU29objcproto18MTLArgumentEncoder11objc_objectP32_MTLIndirectArgumentBufferLayoutP13MTLStructTypePNSt3__113unordered_mapIyNS6_3setI18DYMTLIABDecodingOpNS6_4lessIS9_EENS6_9allocatorIS9_EEEENS6_4hashIyEENS6_8equal_toIyEENSC_INS6_4pairIKySE_EEEEEERKNS6_3mapIyNS6_6vectorI26DYMTLOriginalProcessBufferNSC_ISR_EEEENSA_IyEENSC_INSJ_ISK_ST_EEEEEERKNS7_IyySG_SI_NSC_INSJ_ISK_yEEEEEERKNS7_IyNSQ_IyNSC_IyEEEESG_SI_NSC_INSJ_ISK_S16_EEEEEERNS7_IyU8__strongPU26objcproto15MTLSamplerState11objc_objectSG_SI_NSC_INSJ_ISK_S1E_EEEEEES14_S14_S14_RKNS7_IyU8__strongP11objc_objectSG_SI_NSC_INSJ_ISK_S1L_EEEEEEPNSP_IyySU_S11_EEPS12_S1T_S1T_S1T_S1T_RKS9_PNS7_IyNS7_IyS12_SG_SI_NSC_INSJ_ISK_S12_EEEEEESG_SI_NSC_INSJ_ISK_S1Y_EEEEEEPU19objcproto9MTLBuffer11objc_objectyP30_MTLArgumentBufferPatchingTypeP12DYIABPatcher18DYCommandBufferUIDENK3__1clES5_m_block_invoke;
  v7[3] = &__block_descriptor_72_e32_v32__0__MTLStructMember_8Q16_B24l;
  v7[4] = *(_QWORD *)(a1 + 8);
  v7[5] = v4;
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 32);
  v6 = v5;
  v7[0] = MEMORY[0x24BDAC760];
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v7);

}

void sub_23C746E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void ___ZZL17rencodeBufferDatayPvPU29objcproto18MTLArgumentEncoder11objc_objectP32_MTLIndirectArgumentBufferLayoutP13MTLStructTypePNSt3__113unordered_mapIyNS6_3setI18DYMTLIABDecodingOpNS6_4lessIS9_EENS6_9allocatorIS9_EEEENS6_4hashIyEENS6_8equal_toIyEENSC_INS6_4pairIKySE_EEEEEERKNS6_3mapIyNS6_6vectorI26DYMTLOriginalProcessBufferNSC_ISR_EEEENSA_IyEENSC_INSJ_ISK_ST_EEEEEERKNS7_IyySG_SI_NSC_INSJ_ISK_yEEEEEERKNS7_IyNSQ_IyNSC_IyEEEESG_SI_NSC_INSJ_ISK_S16_EEEEEERNS7_IyU8__strongPU26objcproto15MTLSamplerState11objc_objectSG_SI_NSC_INSJ_ISK_S1E_EEEEEES14_S14_S14_RKNS7_IyU8__strongP11objc_objectSG_SI_NSC_INSJ_ISK_S1L_EEEEEEPNSP_IyySU_S11_EEPS12_S1T_S1T_S1T_S1T_RKS9_PNS7_IyNS7_IyS12_SG_SI_NSC_INSJ_ISK_S12_EEEEEESG_SI_NSC_INSJ_ISK_S1Y_EEEEEEPU19objcproto9MTLBuffer11objc_objectyP30_MTLArgumentBufferPatchingTypeP12DYIABPatcher18DYCommandBufferUIDENK3__1clES5_m_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  MTLStructType *v9;
  int IsArgumentBuffer;
  id v11;

  v11 = a2;
  objc_msgSend(v11, "structType");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    objc_msgSend(v11, "structType");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    std::function<void ()(MTLStructType *,unsigned long)>::operator()(v4, v5, objc_msgSend(v11, "indirectArgumentIndex") + *(_QWORD *)(a1 + 40));
LABEL_5:

    goto LABEL_6;
  }
  objc_msgSend(v11, "arrayType");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v11, "arrayType");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    std::function<void ()(MTLArrayType *,unsigned long)>::operator()(v7, v5, objc_msgSend(v11, "indirectArgumentIndex") + *(_QWORD *)(a1 + 40));
    goto LABEL_5;
  }
  objc_msgSend(v11, "pointerType");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "elementStructType");
  v9 = (MTLStructType *)objc_claimAutoreleasedReturnValue();
  IsArgumentBuffer = DYStructIsArgumentBuffer(v9);

  if (DYMTLDataTypeNeedsReencoding(objc_msgSend(v11, "dataType"), **(_QWORD **)(a1 + 56)))
    rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *,MTLStructType *::map<unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,DYMTLIABDecodingOp<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>>> const&,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const&,std::__1<unsigned long long,MTLStructType *::map<unsigned long long,MTLStructType *::less<MTLStructType *::set><unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><unsigned long long>>>> const&,std::__1<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object  {objcproto15MTLSamplerState}>>> &,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,objc_object * {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object>>> const&,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>> *,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>*,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::set const&,std::__1<unsigned long long,std::__1<unsigned long long,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_3::operator()(*(_QWORD *)(a1 + 64), objc_msgSend(v11, "dataType"), (uint64_t *)(objc_msgSend(v11, "indirectArgumentIndex") + *(_QWORD *)(a1 + 40)), IsArgumentBuffer);
LABEL_6:

}

void sub_23C746FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t DYStructIsArgumentBuffer(MTLStructType *a1)
{
  MTLStructType *v1;
  MTLStructType *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  MTLArrayType *v9;
  char IsArgumentBuffer;
  MTLStructType *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    -[MTLStructType members](v1, "members", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (!v4)
    {
      v12 = 0;
      goto LABEL_21;
    }
    v5 = *(_QWORD *)v15;
    while (1)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        v8 = objc_msgSend(v7, "dataType");
        if (v8 <= 1)
        {
          if (v8 != 1)
            continue;
          objc_msgSend(v7, "structType");
          v11 = (MTLStructType *)objc_claimAutoreleasedReturnValue();
          IsArgumentBuffer = DYStructIsArgumentBuffer(v11);

        }
        else
        {
          if (v8 != 2)
          {
            v12 = 1;
            if ((unint64_t)(v8 - 57) < 4 || (unint64_t)(v8 - 78) < 3)
              goto LABEL_21;
            continue;
          }
          objc_msgSend(v7, "arrayType");
          v9 = (MTLArrayType *)objc_claimAutoreleasedReturnValue();
          IsArgumentBuffer = DYArrayIsArgumentBuffer(v9);

        }
        if ((IsArgumentBuffer & 1) != 0)
        {
          v12 = 1;
          goto LABEL_21;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v12 = 0;
      if (!v4)
      {
LABEL_21:

        goto LABEL_22;
      }
    }
  }
  v12 = 0;
LABEL_22:

  return v12;
}

void sub_23C7471A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t DYArrayIsArgumentBuffer(MTLArrayType *a1)
{
  MTLArrayType *v1;
  uint64_t v2;
  uint64_t v3;
  MTLStructType *v4;
  uint64_t IsArgumentBuffer;

  v1 = a1;
  v2 = -[MTLArrayType elementType](v1, "elementType");
  v3 = 1;
  if (v2 > 77)
  {
    if ((unint64_t)(v2 - 78) >= 3)
LABEL_7:
      v3 = 0;
  }
  else if ((unint64_t)(v2 - 57) >= 4)
  {
    if (v2 == 1)
    {
      -[MTLArrayType elementStructType](v1, "elementStructType");
      v4 = (MTLStructType *)objc_claimAutoreleasedReturnValue();
      IsArgumentBuffer = DYStructIsArgumentBuffer(v4);
      goto LABEL_9;
    }
    if (v2 == 2)
    {
      -[MTLArrayType elementArrayType](v1, "elementArrayType");
      v4 = (MTLStructType *)objc_claimAutoreleasedReturnValue();
      IsArgumentBuffer = DYArrayIsArgumentBuffer((MTLArrayType *)v4);
LABEL_9:
      v3 = IsArgumentBuffer;

      goto LABEL_10;
    }
    goto LABEL_7;
  }
LABEL_10:

  return v3;
}

void sub_23C747294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(MTLStructType *,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23C74741C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DYMTLReplayerIAB::Usage>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<DYMTLReplayerIAB::Usage>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 24)
  {

  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::function<void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;

  v7 = a4;
  v8 = a2;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v8, a3, &v7);

}

void sub_23C74752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_0,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(MTLArrayType *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::~__func()
{
  JUMPOUT(0x242623D28);
}

__n128 std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_0,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(MTLArrayType *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250D6F358;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_0,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(MTLArrayType *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D6F358;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_0,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(MTLArrayType *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::operator()(_QWORD *a1, id *a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v6 = *a4;
  v16 = *a2;
  for (i = 0; ; i = v8 + 1)
  {
    v8 = i;
    if (objc_msgSend(v16, "arrayLength") <= (unint64_t)i)
      break;
    objc_msgSend(v16, "elementStructType");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      v10 = a1[1];
      objc_msgSend(v16, "elementStructType");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "members");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      std::function<void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(v10, v12, (uint64_t)a3, v6 + objc_msgSend(v16, "argumentIndexStride") * v8);

LABEL_7:
      continue;
    }
    objc_msgSend(v16, "elementArrayType");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      v14 = a1[2];
      objc_msgSend(v16, "elementArrayType");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      std::function<void ()(MTLArrayType *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(v14, v11, (uint64_t)a3, v6 + objc_msgSend(v16, "argumentIndexStride") * v8);
      goto LABEL_7;
    }
    v15 = objc_msgSend(v16, "elementType");
    if ((unint64_t)(v15 - 58) <= 0x16 && ((1 << (v15 - 58)) & 0x700007) != 0)
      decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const&,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLArgument *::less,MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,objc_object * {__strong},MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,objc_object *>>> const&)::$_2::operator()(a1[3], v15, v6 + objc_msgSend(v16, "argumentIndexStride") * v8, a3);
  }

}

void sub_23C747738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::function<void ()(MTLArrayType *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  id v8;

  v7 = a4;
  v8 = a2;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v8, a3, &v7);

}

void sub_23C7477D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t *decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const&,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLArgument *::less,MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,objc_object * {__strong},MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,objc_object *>>> const&)::$_2::operator()(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t **a4)
{
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *result;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;

  v39 = -1;
  if (a2 > 77)
  {
    switch(a2)
    {
      case 'N':
        v39 = objc_msgSend(**(id **)a1, "uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
        v18 = *(_QWORD **)(a1 + 56);
        break;
      case 'O':
        v39 = objc_msgSend(**(id **)a1, "uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
        v18 = *(_QWORD **)(a1 + 64);
        break;
      case 'P':
        v39 = objc_msgSend(**(id **)a1, "uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
        v18 = *(_QWORD **)(a1 + 72);
        break;
      default:
        goto LABEL_31;
    }
  }
  else if (a2 == 58)
  {
    v39 = objc_msgSend(**(id **)a1, "uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
    v18 = *(_QWORD **)(a1 + 40);
  }
  else
  {
    if (a2 != 59)
    {
      if (a2 == 60)
      {
        v7 = objc_msgSend(**(id **)a1, "virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
        v39 = v7;
        v8 = *(_QWORD **)(a1 + 24);
        v9 = v8 + 1;
        v10 = (_QWORD *)v8[1];
        if (v10)
        {
          v11 = v8 + 1;
          v12 = (_QWORD *)v8[1];
          do
          {
            v13 = v12[4];
            v14 = v13 > v7;
            if (v13 <= v7)
              v15 = v12 + 1;
            else
              v15 = v12;
            if (v14)
              v11 = v12;
            v12 = (_QWORD *)*v15;
          }
          while (*v15);
          if (v11 == v9)
          {
            if (v8[2])
            {
              do
              {
                v17 = v10;
                v10 = (_QWORD *)v10[1];
              }
              while (v10);
            }
            else
            {
              v17 = v8 + 1;
            }
          }
          else if (v11 == (_QWORD *)*v8)
          {
            v17 = v11;
          }
          else
          {
            v16 = (_QWORD *)*v11;
            if (*v11)
            {
              do
              {
                v17 = v16;
                v16 = (_QWORD *)v16[1];
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (_QWORD *)v11[2];
                v19 = *v17 == (_QWORD)v11;
                v11 = v17;
              }
              while (v19);
            }
          }
        }
        else
        {
          v24 = v8[2];
          v17 = v8 + 1;
          if (v24)
          {
            do
            {
              v17 = (_QWORD *)v9[2];
              v19 = *v17 == (_QWORD)v9;
              v9 = v17;
            }
            while (v19);
          }
        }
        v25 = v17[4];
        if (v25 <= v7)
        {
          v26 = *(_QWORD *)(a1 + 32);
          v29 = *(_QWORD **)(v26 + 8);
          v27 = (_QWORD *)(v26 + 8);
          v28 = v29;
          if (v29)
          {
            v30 = v17[5];
            v31 = v27;
            do
            {
              v32 = v28[4];
              v33 = v32 >= v30;
              if (v32 >= v30)
                v34 = v28;
              else
                v34 = v28 + 1;
              if (v33)
                v31 = v28;
              v28 = (_QWORD *)*v34;
            }
            while (*v34);
            if (v31 != v27 && v30 >= v31[4])
            {
              v36 = v31[5];
              v35 = v31[6];
              if (v36 != v35)
              {
                v37 = v7 - v25;
                while (v37 >= *(_QWORD *)(v36 + 8))
                {
                  v36 += 16;
                  if (v36 == v35)
                    goto LABEL_31;
                }
                v21 = v30 + v37;
                goto LABEL_30;
              }
            }
          }
        }
      }
      goto LABEL_31;
    }
    v39 = objc_msgSend(**(id **)a1, "uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:", a3, **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 16));
    v18 = *(_QWORD **)(a1 + 48);
  }
  v20 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v18, (unint64_t *)&v39);
  if (v20)
  {
    v21 = v20[3];
LABEL_30:
    v39 = v21;
  }
LABEL_31:
  v22 = v39;
  v38 = a3;
  v40 = &v38;
  result = std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a4, &v38, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
  result[5] = v22;
  return result;
}

void std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_1,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::~__func()
{
  JUMPOUT(0x242623D28);
}

__n128 std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_1,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250D6F3A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_1,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D6F3A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_1,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::operator()(uint64_t a1, void **a2, uint64_t a3, uint64_t *a4)
{
  void *v4;
  uint64_t v5;
  _QWORD v7[7];
  __int128 v8;

  v4 = *a2;
  v5 = *a4;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = ___ZZL20decodeReplayerBufferPU19objcproto9MTLBuffer11objc_objectyP32_MTLIndirectArgumentBufferLayoutP11MTLArgumentRKNSt3__13mapIyNS5_6vectorI26DYMTLOriginalProcessBufferNS5_9allocatorIS8_EEEENS5_4lessIyEENS9_INS5_4pairIKySB_EEEEEERKNS5_13unordered_mapIyyNS5_4hashIyEENS5_8equal_toIyEENS9_INSE_ISF_yEEEEEERKNSL_IyNS7_IyNS9_IyEEEESN_SP_NS9_INSE_ISF_SW_EEEEEESU_SU_SU_RKNS6_IyySD_SR_EESU_SU_SU_SU_SU_RKNSL_IyU8__strongP11objc_objectSN_SP_NS9_INSE_ISF_S17_EEEEEEENK3__1clEP7NSArrayIP15MTLStructMemberERS12_m_block_invoke;
  v7[3] = &__block_descriptor_72_e32_v32__0__MTLStructMember_8Q16_B24l;
  v7[4] = *(_QWORD *)(a1 + 8);
  v7[5] = a3;
  v7[6] = v5;
  v8 = *(_OWORD *)(a1 + 16);
  return objc_msgSend(v4, "enumerateObjectsUsingBlock:", v7);
}

void ___ZZL20decodeReplayerBufferPU19objcproto9MTLBuffer11objc_objectyP32_MTLIndirectArgumentBufferLayoutP11MTLArgumentRKNSt3__13mapIyNS5_6vectorI26DYMTLOriginalProcessBufferNS5_9allocatorIS8_EEEENS5_4lessIyEENS9_INS5_4pairIKySB_EEEEEERKNS5_13unordered_mapIyyNS5_4hashIyEENS5_8equal_toIyEENS9_INSE_ISF_yEEEEEERKNSL_IyNS7_IyNS9_IyEEEESN_SP_NS9_INSE_ISF_SW_EEEEEESU_SU_SU_RKNS6_IyySD_SR_EESU_SU_SU_SU_SU_RKNSL_IyU8__strongP11objc_objectSN_SP_NS9_INSE_ISF_S17_EEEEEEENK3__1clEP7NSArrayIP15MTLStructMemberERS12_m_block_invoke(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  objc_msgSend(v9, "structType");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = a1[4];
    objc_msgSend(v9, "structType");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "members");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    std::function<void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(v4, v6, a1[5], objc_msgSend(v9, "indirectArgumentIndex") + a1[6]);

  }
  else
  {
    objc_msgSend(v9, "arrayType");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const&,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLArgument *::less,MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,objc_object * {__strong},MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,objc_object *>>> const&)::$_2::operator()(a1[8], objc_msgSend(v9, "dataType"), objc_msgSend(v9, "indirectArgumentIndex") + a1[6], (uint64_t **)a1[5]);
      goto LABEL_6;
    }
    v8 = a1[7];
    objc_msgSend(v9, "arrayType");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    std::function<void ()(MTLArrayType *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(v8, v5, a1[5], objc_msgSend(v9, "indirectArgumentIndex") + a1[6]);
  }

LABEL_6:
}

void sub_23C747CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23C747E74(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t *std::map<unsigned long long,unsigned long long>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long long,unsigned long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,unsigned long long>,std::__tree_node<std::__value_type<unsigned long long,unsigned long long>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_23C747EBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<BufferEntry>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,unsigned long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,unsigned long long>,std::__tree_node<std::__value_type<unsigned long long,unsigned long long>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,unsigned long long> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,unsigned long long> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<BufferEntry>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__find_equal<unsigned long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::function<void ()(NSArray<MTLStructMember *> *,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v5 = a3;
  v6 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v6, &v5);

}

void sub_23C7481E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_0,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(MTLArrayType *,unsigned long)>::~__func()
{
  JUMPOUT(0x242623D28);
}

__n128 std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_0,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(MTLArrayType *,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250D6F3E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_0,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(MTLArrayType *,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D6F3E8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_0,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(MTLArrayType *,unsigned long)>::operator()(uint64_t a1, id *a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v4 = *a3;
  v14 = *a2;
  for (i = 0; ; i = v6 + 1)
  {
    v6 = i;
    if (objc_msgSend(v14, "arrayLength") <= (unint64_t)i)
      break;
    objc_msgSend(v14, "elementStructType");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      objc_msgSend(v14, "elementStructType");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "members");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      std::function<void ()(NSArray<MTLStructMember *> *,unsigned long)>::operator()(v8, v10, v4 + objc_msgSend(v14, "argumentIndexStride") * v6);

LABEL_7:
      continue;
    }
    objc_msgSend(v14, "elementArrayType");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 16);
      objc_msgSend(v14, "elementArrayType");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      std::function<void ()(MTLArrayType *,unsigned long)>::operator()(v12, v9, v4 + objc_msgSend(v14, "argumentIndexStride") * v6);
      goto LABEL_7;
    }
    v13 = objc_msgSend(v14, "elementType");
    if ((unint64_t)(v13 - 58) <= 0x16 && ((1 << (v13 - 58)) & 0x700007) != 0)
      decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long,MTLArgument *::less<unsigned long long>,MTLArgument *::allocator<MTLArgument *::pair<unsigned long long const,unsigned long long>>> *)::$_2::operator()(*(uint64_t *****)(a1 + 24), v13, v4 + objc_msgSend(v14, "argumentIndexStride") * v6);
  }

}

void sub_23C7483D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t *decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long,MTLArgument *::less<unsigned long long>,MTLArgument *::allocator<MTLArgument *::pair<unsigned long long const,unsigned long long>>> *)::$_2::operator()(uint64_t ****a1, uint64_t a2, unint64_t a3)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  unint64_t *v12;

  v6 = **a1;
  v11 = a3;
  v12 = &v11;
  result = std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v6, &v11, (uint64_t)&std::piecewise_construct, (uint64_t **)&v12);
  if (result[5] != -1)
  {
    if (a2 > 77)
    {
      switch(a2)
      {
        case 'N':
          v8 = objc_msgSend(*a1[1], "uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:", a3, *a1[2], *a1[3]);
          break;
        case 'O':
          v8 = objc_msgSend(*a1[1], "uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:", a3, *a1[2], *a1[3]);
          break;
        case 'P':
          v8 = objc_msgSend(*a1[1], "uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:", a3, *a1[2], *a1[3]);
          break;
        default:
          return result;
      }
    }
    else
    {
      switch(a2)
      {
        case ':':
          v8 = objc_msgSend(*a1[1], "uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:", a3, *a1[2], *a1[3]);
          break;
        case ';':
          v8 = objc_msgSend(*a1[1], "uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:", a3, *a1[2], *a1[3]);
          break;
        case '<':
          v8 = objc_msgSend(*a1[1], "virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:", a3, *a1[2], *a1[3]);
          break;
        default:
          return result;
      }
    }
    v9 = v8;
    v10 = **a1;
    v11 = a3;
    v12 = &v11;
    result = std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v10, &v11, (uint64_t)&std::piecewise_construct, (uint64_t **)&v12);
    result[5] = v9;
  }
  return result;
}

void std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_1,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(NSArray<MTLStructMember *> *,unsigned long)>::~__func()
{
  JUMPOUT(0x242623D28);
}

__n128 std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_1,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(NSArray<MTLStructMember *> *,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250D6F430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_1,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(NSArray<MTLStructMember *> *,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D6F430;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_1,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(NSArray<MTLStructMember *> *,unsigned long)>::operator()(uint64_t a1, void **a2, uint64_t *a3)
{
  void *v3;
  uint64_t v4;
  _QWORD v6[6];
  __int128 v7;

  v3 = *a2;
  v4 = *a3;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = ___ZZL20decodeOriginalBufferPU19objcproto9MTLBuffer11objc_objectyP32_MTLIndirectArgumentBufferLayoutP11MTLArgumentPNSt3__13mapIyyNS5_4lessIyEENS5_9allocatorINS5_4pairIKyyEEEEEEENK3__1clEP7NSArrayIP15MTLStructMemberEm_block_invoke;
  v6[3] = &__block_descriptor_64_e32_v32__0__MTLStructMember_8Q16_B24l;
  v6[4] = *(_QWORD *)(a1 + 8);
  v6[5] = v4;
  v7 = *(_OWORD *)(a1 + 16);
  return objc_msgSend(v3, "enumerateObjectsUsingBlock:", v6);
}

void ___ZZL20decodeOriginalBufferPU19objcproto9MTLBuffer11objc_objectyP32_MTLIndirectArgumentBufferLayoutP11MTLArgumentPNSt3__13mapIyyNS5_4lessIyEENS5_9allocatorINS5_4pairIKyyEEEEEEENK3__1clEP7NSArrayIP15MTLStructMemberEm_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  objc_msgSend(v9, "structType");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    objc_msgSend(v9, "structType");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "members");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    std::function<void ()(NSArray<MTLStructMember *> *,unsigned long)>::operator()(v4, v6, objc_msgSend(v9, "indirectArgumentIndex") + *(_QWORD *)(a1 + 40));

  }
  else
  {
    objc_msgSend(v9, "arrayType");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long,MTLArgument *::less<unsigned long long>,MTLArgument *::allocator<MTLArgument *::pair<unsigned long long const,unsigned long long>>> *)::$_2::operator()(*(uint64_t *****)(a1 + 56), objc_msgSend(v9, "dataType"), objc_msgSend(v9, "indirectArgumentIndex") + *(_QWORD *)(a1 + 40));
      goto LABEL_6;
    }
    v8 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v9, "arrayType");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    std::function<void ()(MTLArrayType *,unsigned long)>::operator()(v8, v5, objc_msgSend(v9, "indirectArgumentIndex") + *(_QWORD *)(a1 + 40));
  }

LABEL_6:
}

void sub_23C748790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(NSArray<MTLStructMember *> *,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23C748928(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C749148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[5] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C74939C(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<DYMTLIABDecodingOp>::destroy((uint64_t)(a2 + 3), a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__tree<DYMTLIABDecodingOp>::__emplace_unique_key_args<DYMTLIABDecodingOp,DYMTLIABDecodingOp const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<DYMTLIABDecodingOp>::__construct_node<DYMTLIABDecodingOp const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<BufferEntry>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!DYMTLIABDecodingOp::operator<(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!DYMTLIABDecodingOp::operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *std::__tree<DYMTLIABDecodingOp>::__construct_node<DYMTLIABDecodingOp const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[2] = *(_OWORD *)a2;
  *((_BYTE *)v6 + 48) = *(_BYTE *)(a2 + 16);
  *((_QWORD *)v6 + 8) = 0;
  *((_QWORD *)v6 + 9) = 0;
  *((_QWORD *)v6 + 7) = 0;
  result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((_QWORD *)v6 + 7, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_23C74958C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<DYMTLIABDecodingOp,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

BOOL DYMTLIABDecodingOp::operator<(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[4];
  _QWORD v6[4];
  char v7;

  v6[0] = a1 + 8;
  v6[1] = a1 + 24;
  v6[2] = a1;
  v6[3] = a1 + 16;
  v2 = *(_QWORD *)(a2 + 8);
  v5[0] = a2 + 8;
  v5[1] = a2 + 24;
  v5[2] = a2;
  v5[3] = a2 + 16;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 < v2)
    return 1;
  if (v2 >= v3)
    return std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<unsigned long long const&,std::vector<unsigned long long> const&,unsigned long long const&,BOOL const&>,std::tuple<unsigned long long const&,std::vector<unsigned long long> const&,unsigned long long const&,BOOL const&>>((uint64_t)&v7, (uint64_t)v6, (uint64_t)v5);
  return 0;
}

BOOL std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<unsigned long long const&,std::vector<unsigned long long> const&,unsigned long long const&,BOOL const&>,std::tuple<unsigned long long const&,std::vector<unsigned long long> const&,unsigned long long const&,BOOL const&>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t **v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;

  v3 = *(unint64_t ***)(a3 + 8);
  v4 = *v3;
  v5 = v3[1];
  v7 = **(unint64_t ***)(a2 + 8);
  v6 = *(unint64_t **)(*(_QWORD *)(a2 + 8) + 8);
  if (v4 != v5)
  {
    v8 = v4 + 1;
    v9 = **(unint64_t ***)(a2 + 8);
    while (v9 != v6)
    {
      v10 = *v9;
      v11 = *(v8 - 1);
      if (*v9 < v11)
        break;
      ++v9;
      if (v11 < v10 || v8++ == v5)
        goto LABEL_10;
    }
    return 1;
  }
LABEL_10:
  if (v7 != v6)
  {
    v13 = v7 + 1;
    while (v4 != v5)
    {
      v14 = *v4;
      v15 = *(v13 - 1);
      if (*v4 < v15)
        break;
      ++v4;
      if (v15 < v14 || v13++ == v6)
        goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  v17 = **(_QWORD **)(a2 + 16);
  v18 = **(_QWORD **)(a3 + 16);
  if (v17 < v18)
    return 1;
  if (v18 < v17)
    return 0;
  return **(unsigned __int8 **)(a2 + 24) < **(unsigned __int8 **)(a3 + 24);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<DYMTLIABDecodingOp,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[7];
    if (v3)
    {
      __p[8] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<DYMTLIABDecodingOp>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<DYMTLIABDecodingOp>::destroy(a1, *a2);
    std::__tree<DYMTLIABDecodingOp>::destroy(a1, a2[1]);
    v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<DYMTLIABDecodingOp>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *result;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v5 = result[1];
  v4 = result[2];
  v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (result[2])
    result = (uint64_t *)(*v3 + 16);
  *result = (uint64_t)v3;
  v6 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  if (!v4)
    v6 = (_QWORD *)a2;
  *v6 = a2 + 8;
  return result;
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::__deallocate_node(a1, *(_QWORD ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::__deallocate_node(uint64_t a1, _QWORD **a2)
{
  _QWORD **v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::__tree<DYMTLIABDecodingOp>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
}

uint64_t *std::__tree<DYMTLIABDecodingOp>::__emplace_hint_unique_key_args<DYMTLIABDecodingOp,DYMTLIABDecodingOp const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<DYMTLIABDecodingOp>::__construct_node<DYMTLIABDecodingOp const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<BufferEntry>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || DYMTLIABDecodingOp::operator<(a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (DYMTLIABDecodingOp::operator<((uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>((uint64_t)a1, a3, a5);
  }
  if (DYMTLIABDecodingOp::operator<((uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!DYMTLIABDecodingOp::operator<(a5, (uint64_t)(v15 + 4)))
        return std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

void sub_23C749C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id std::function<MTLStructType * ()(MTLArrayType *,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v7;
  id v8;

  v7 = a3;
  v8 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_23C749D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_23C749E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void ___ZZ82__DYMTLIndirectArgumentBufferManager_findStructTypeForArgumentIndex_inStructType__ENK3__1clEP13MTLStructTypem_block_invoke(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 40);
  v16 = v6;
  if (objc_msgSend(v6, "indirectArgumentIndex") + v7 == **(_QWORD **)(a1 + 48) && objc_msgSend(v16, "dataType") == 60)
  {
    objc_msgSend(v16, "pointerType");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "elementStructType");
    v9 = objc_claimAutoreleasedReturnValue();
LABEL_8:
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v9;

    goto LABEL_9;
  }
  objc_msgSend(v16, "structType");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 56);
    objc_msgSend(v16, "structType");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    std::function<MTLStructType * ()(MTLStructType *,unsigned long)>::operator()(v11, v8, objc_msgSend(v16, "indirectArgumentIndex") + *(_QWORD *)(a1 + 40));
    v9 = objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  objc_msgSend(v16, "arrayType");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 64);
    objc_msgSend(v16, "arrayType");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    std::function<MTLStructType * ()(MTLArrayType *,unsigned long)>::operator()(v13, v8, objc_msgSend(v16, "indirectArgumentIndex") + *(_QWORD *)(a1 + 40));
    v9 = objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
LABEL_9:
  *a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) != 0;

}

void sub_23C74A028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<MTLStructType * ()(MTLStructType *,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23C74A1B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::vector<DYMTLReplayerIAB::Usage>::__push_back_slow_path<DYMTLReplayerIAB::Usage const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 1) = *(id *)(a2 + 8);
  *((_QWORD *)v11 + 2) = *(id *)(a2 + 16);
  v14[2] = v11 + 24;
  std::vector<DYMTLReplayerIAB::Usage>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<DYMTLReplayerIAB::Usage>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_23C74A2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DYMTLReplayerIAB::Usage>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DYMTLReplayerIAB::Usage>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_QWORD *)(a3 - 24);
      a3 -= 24;
      *(_QWORD *)(v8 - 24) = v9;
      v8 -= 24;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v8 + 8) = v10;
      v7 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB::Usage*>>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB::Usage*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB::Usage*>>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB::Usage*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {

    i = *(_QWORD *)(a2 + 32) + 24;
  }
}

uint64_t std::__split_buffer<DYMTLReplayerIAB::Usage>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<DYMTLReplayerIAB::Usage>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<DYMTLReplayerIAB::Usage>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;

  }
}

uint64_t std::vector<DYMTLReplayerIAB>::__push_back_slow_path<DYMTLReplayerIAB const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t *v15;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DYMTLReplayerIAB>>((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[32 * v3];
  v14 = &v8[32 * v7];
  std::allocator<DYMTLReplayerIAB>::construct[abi:ne180100]<DYMTLReplayerIAB,DYMTLReplayerIAB const&>((uint64_t)(a1 + 2), v12, a2);
  v13 = v12 + 32;
  std::vector<DYMTLReplayerIAB>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<DYMTLReplayerIAB>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_23C74A64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DYMTLReplayerIAB>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<DYMTLReplayerIAB>::construct[abi:ne180100]<DYMTLReplayerIAB,DYMTLReplayerIAB const&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = *(id *)a3;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<DYMTLReplayerIAB::Usage>::__init_with_size[abi:ne180100]<DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*>(a2 + 1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3));
}

void sub_23C74A6B4(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<DYMTLReplayerIAB::Usage>::__init_with_size[abi:ne180100]<DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<DYMTLReplayerIAB::Usage>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23C74A72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<DYMTLReplayerIAB::Usage>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 == a3)
  {
    v7 = a4;
  }
  else
  {
    v6 = a2;
    v7 = v12;
    do
    {
      *v4 = *(_QWORD *)v6;
      v4[1] = *(id *)(v6 + 8);
      v4[2] = *(id *)(v6 + 16);
      v7 += 3;
      v6 += 24;
      v4 = v7;
    }
    while (v6 != a3);
    v12 = v7;
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,DYMTLReplayerIAB::Usage*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v7;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,DYMTLReplayerIAB::Usage*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  if (a3 != a5)
  {
    v6 = a3;
    do
    {

      v6 -= 24;
    }
    while (v6 != a5);
  }
}

uint64_t std::vector<DYMTLReplayerIAB>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>,std::reverse_iterator<DYMTLReplayerIAB*>,std::reverse_iterator<DYMTLReplayerIAB*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DYMTLReplayerIAB>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>,std::reverse_iterator<DYMTLReplayerIAB*>,std::reverse_iterator<DYMTLReplayerIAB*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB*>>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB*>>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *i;
  void **v6;

  for (i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = i + 1;
    std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&v6);

    i = (id *)(*(_QWORD *)(a2 + 32) + 32);
  }
}

uint64_t std::__split_buffer<DYMTLReplayerIAB>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<DYMTLReplayerIAB>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<DYMTLReplayerIAB>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v5 = (void **)(i - 24);
    std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&v5);

  }
}

void std::vector<DYMTLReplayerIAB>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 32)
  {
    v6 = (void **)(i - 24);
    std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&v6);
    v5 = *(void **)(i - 32);

  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        std::__tree<BufferEntry>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v8 = a3 - 2;
    do
    {
      *(_QWORD *)(v7 - 32) = *(v8 - 2);
      *(_QWORD *)(v7 - 24) = *(v8 - 1);
      v9 = *v8;
      *(_QWORD *)(v7 - 16) = *v8;
      v10 = v7 - 16;
      v11 = v8[1];
      *(_QWORD *)(v7 - 8) = v11;
      if (v11)
      {
        *(_QWORD *)(v9 + 16) = v10;
        *(v8 - 1) = (uint64_t)v8;
        *v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v10;
      }
      v7 = *((_QWORD *)&v18 + 1) - 32;
      *((_QWORD *)&v18 + 1) -= 32;
      v12 = v8 - 2;
      v8 -= 4;
    }
    while (v12 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    v3 = v1 + 8;
    do
    {
      std::__tree<BufferEntry>::destroy(v3, *(_QWORD **)(v3 + 8));
      v4 = v3 + 24;
      v3 += 32;
    }
    while (v4 != v2);
  }
}

void **std::__split_buffer<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::__tree<BufferEntry>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

void std::vector<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<DYMTLReplayerIAB>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<DYMTLReplayerIAB>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_23C74B2D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23C74B4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C74B868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_23C74BAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_23C74BBAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74BC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C74BE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_23C74BF44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74BFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C74C1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_23C74C2DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74C36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C74C578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_23C74C674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74C704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C74D2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;

  _Block_object_dispose(&STACK[0x228], 8);
  std::__tree<BufferEntry>::destroy(a11, (_QWORD *)STACK[0x260]);

  _Unwind_Resume(a1);
}

void sub_23C74D780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__2(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  std::__tree<BufferEntry>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
}

void sub_23C74D88C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74D94C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74DA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C74DB10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74DBD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74DCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C74DD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C74DDFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74DEBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74E354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  uint64_t v39;

  _Block_object_dispose(&a32, 8);
  std::__tree<BufferEntry>::destroy(a9, a39);

  _Unwind_Resume(a1);
}

void sub_23C74E5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C74E6B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74E770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C74E874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23C74E94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23C74EB38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23C74ED10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23C74EEE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_23C74F10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23C74F2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C74FC1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

__n128 ShaderDebugger::FragmentTraceBufferVersionedHeader::setPositionMin(uint64_t a1, unsigned __int32 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  if (*(_DWORD *)(a1 + 16) <= 2u)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_OWORD *)(v2 + 16);
    v2 += 16;
    v4 = v3;
    result.n128_u32[0] = *a2;
    *(__n128 *)v2 = result;
    result.n128_u32[1] = a2[1];
    *(__n128 *)v2 = result;
    result.n128_u32[2] = a2[2];
    *(__n128 *)v2 = result;
    result.n128_u32[3] = a2[3];
    *(__n128 *)v2 = result;
  }
  return result;
}

__n128 ShaderDebugger::FragmentTraceBufferVersionedHeader::setPositionMax(uint64_t a1, unsigned __int32 *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  if (*(_DWORD *)(a1 + 16) <= 2u)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_OWORD *)(v2 + 32);
    v2 += 32;
    v4 = v3;
    result.n128_u32[0] = *a2;
    *(__n128 *)v2 = result;
    result.n128_u32[1] = a2[1];
    *(__n128 *)v2 = result;
    result.n128_u32[2] = a2[2];
    *(__n128 *)v2 = result;
    result.n128_u32[3] = a2[3];
    *(__n128 *)v2 = result;
  }
  return result;
}

void sub_23C74FFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23C750500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *__p, uint64_t a17)
{

  _Unwind_Resume(a1);
}

void sub_23C750888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a12);

  dy_defer::~dy_defer((dy_defer *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<DYMTLOriginalProcessBuffer>::__init_with_size[abi:ne180100]<DYMTLOriginalProcessBuffer*,DYMTLOriginalProcessBuffer*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<DYMTLOriginalProcessBuffer>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C750A2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<DYMTLOriginalProcessBuffer>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void dy_defer::~dy_defer(dy_defer *this)
{
  uint64_t v2;
  dy_defer *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (dy_defer *)*((_QWORD *)this + 3);
  if (v3 == this)
  {
    v4 = 4;
    v3 = this;
  }
  else
  {
    if (!v3)
      return;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
}

uint64_t *std::__tree<std::__value_type<unsigned long,DYMTLBoundSamplerInfo>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,DYMTLBoundSamplerInfo>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,DYMTLBoundSamplerInfo>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<objc_object  {objcproto15MTLSamplerState}* {__strong},unsigned long long>,std::__map_value_compare<objc_object  {objcproto15MTLSamplerState}*,objc_object  {objcproto15MTLSamplerState}* {__strong},std::less<objc_object  {objcproto15MTLSamplerState}*>,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::__emplace_unique_key_args<objc_object  {objcproto15MTLSamplerState}*,std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto15MTLSamplerState} const {__strong}&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = (uint64_t)**a4;
    v11[5] = 0;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong}>,std::__unordered_map_hasher<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong},std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto9MTLBuffer}* {__strong}>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C750E9C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<objc_object  {objcproto15MTLSamplerState}* {__strong},unsigned long long>,std::__map_value_compare<objc_object  {objcproto15MTLSamplerState}*,objc_object  {objcproto15MTLSamplerState}* {__strong},std::less<objc_object  {objcproto15MTLSamplerState}*>,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<objc_object  {objcproto15MTLSamplerState}* {__strong},unsigned long long>,std::__map_value_compare<objc_object  {objcproto15MTLSamplerState}*,objc_object  {objcproto15MTLSamplerState}* {__strong},std::less<objc_object  {objcproto15MTLSamplerState}*>,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::destroy(a1, *a2);
    std::__tree<std::__value_type<objc_object  {objcproto15MTLSamplerState}* {__strong},unsigned long long>,std::__map_value_compare<objc_object  {objcproto15MTLSamplerState}*,objc_object  {objcproto15MTLSamplerState}* {__strong},std::less<objc_object  {objcproto15MTLSamplerState}*>,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong},std::less<MTLTextureType>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong},std::less<MTLTextureType>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(a1, *a2);
    std::__tree<std::__value_type<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong},std::less<MTLTextureType>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _OWORD v5[2];
  int v6;

  memset(v5, 0, sizeof(v5));
  v6 = 1065353216;
  ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(a1, a2, v5, a3, a4);
  return std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)v5);
}

void sub_23C751048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  size_t v16;
  std::string *v17;
  __int128 *v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  uint64_t GlobalVariable;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v29;
  unsigned int v30;
  llvm::NamedMDNode *v31;
  llvm::NamedMDNode *v32;
  int NumOperands;
  int i;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  llvm::NamedMDNode *v38;
  llvm::NamedMDNode *v39;
  int v40;
  int j;
  uint64_t v42;
  unint64_t v45;
  std::string v47;
  uint64_t v48;
  __int16 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  void **v75;
  uint64_t v76;
  __int128 __p;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  std::string v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  _BYTE v99[40];
  void *v100[2];
  _BYTE v101[40];
  _QWORD v102[3];
  void *v103;
  uint64_t v104;
  _BYTE v105[16];
  _QWORD v106[6];
  void *v107;
  uint64_t v108;
  _BYTE v109[48];
  uint64_t v110;
  void *v111;
  uint64_t v112;
  _BYTE v113[24];
  _QWORD v114[5];
  void *v115;
  uint64_t v116;
  _QWORD v117[7];
  uint64_t v118;
  _BYTE *v119;
  void *v120;
  uint64_t v121;
  int v122;
  _BYTE v123[16];
  _QWORD v124[7];
  _QWORD v125[7];
  _QWORD v126[7];
  _QWORD v127[7];
  _QWORD v128[7];
  _QWORD v129[7];
  _QWORD v130[7];
  _QWORD v131[7];
  _QWORD v132[7];
  _QWORD v133[7];
  _QWORD v134[7];
  _QWORD v135[10];

  v135[7] = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 16) = 0;
  *v8 = 0;
  *(_QWORD *)&v97 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeThreadTracePoint;
  *((_QWORD *)&v97 + 1) = 0;
  v98 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[24],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(v100, "tracepoint_thread_begin", &v97);
  *(_QWORD *)&v95 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionBeginTracePoint;
  *((_QWORD *)&v95 + 1) = 0;
  v96 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[26],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(v102, "tracepoint_function_begin", &v95);
  *(_QWORD *)&v93 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionEndTracePoint;
  *((_QWORD *)&v93 + 1) = 0;
  v94 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[24],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(v106, "tracepoint_function_end", &v93);
  *(_QWORD *)&v91 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionCallTracePoint;
  *((_QWORD *)&v91 + 1) = 0;
  v92 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[16],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(&v108, "tracepoint_call", &v91);
  *(_QWORD *)&v89 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeVariableTracePoint;
  *((_QWORD *)&v89 + 1) = 0;
  v90 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[20],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(&v110, "tracepoint_variable", &v89);
  *(_QWORD *)&v87 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataTracePoint;
  *((_QWORD *)&v87 + 1) = 0;
  v88 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[16],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(v114, "tracepoint_data", &v87);
  *(_QWORD *)&v85 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataValueTracePoint;
  *((_QWORD *)&v85 + 1) = 0;
  v86 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[22],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(v117, "tracepoint_data_value", &v85);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  v47.__r_.__value_.__l.__size_ = 0;
  v47.__r_.__value_.__r.__words[2] = a1;
  v48 = 0;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[26],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(&v118, "tracepoint_loop_begin_for", (__int128 *)&v47);
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = (unint64_t)ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  v83.__r_.__value_.__r.__words[2] = a1;
  v84 = 1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[28],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v124, "tracepoint_loop_begin_while", (__int128 *)&v83);
  *(_QWORD *)&v80 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&v80 + 1) = 0;
  v81 = a1;
  v82 = 2;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[25],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v125, "tracepoint_loop_begin_do", &v80);
  *(_QWORD *)&__p = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&__p + 1) = 0;
  v78 = a1;
  v79 = 3;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[27],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v126, "tracepoint_loop_init_begin", &__p);
  *(_QWORD *)&v74 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&v74 + 1) = 0;
  v75 = (void **)a1;
  v76 = 4;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[25],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v127, "tracepoint_loop_init_end", &v74);
  *(_QWORD *)&v71 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&v71 + 1) = 0;
  v72 = a1;
  v73 = 5;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[27],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v128, "tracepoint_loop_cond_begin", &v71);
  *(_QWORD *)&v68 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&v68 + 1) = 0;
  v69 = a1;
  v70 = 6;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[25],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v129, "tracepoint_loop_cond_end", &v68);
  *(_QWORD *)&v65 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&v65 + 1) = 0;
  v66 = a1;
  v67 = 7;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[26],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v130, "tracepoint_loop_inc_begin", &v65);
  *(_QWORD *)&v62 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&v62 + 1) = 0;
  v63 = a1;
  v64 = 8;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[24],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v131, "tracepoint_loop_inc_end", &v62);
  *(_QWORD *)&v59 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&v59 + 1) = 0;
  v60 = a1;
  v61 = 9;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[27],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v132, "tracepoint_loop_body_begin", &v59);
  *(_QWORD *)&v56 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&v56 + 1) = 0;
  v57 = a1;
  v58 = 10;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[25],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v133, "tracepoint_loop_body_end", &v56);
  *(_QWORD *)&v53 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&v53 + 1) = 0;
  v54 = a1;
  v55 = 11;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[20],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v134, "tracepoint_loop_end", &v53);
  *(_QWORD *)&v50 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((_QWORD *)&v50 + 1) = 0;
  v51 = a1;
  v52 = 12;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[23],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v135, "tracepoint_thread_exit", &v50);
  std::unordered_map<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::unordered_map((uint64_t)v99, (unsigned __int8 *)v100, 20);
  v9 = 1120;
  do
  {
    v10 = *(_BYTE **)&v99[v9 + 32];
    if (&v99[v9 + 8] == v10)
    {
      v10 = &v99[v9 + 8];
      v11 = 4;
    }
    else
    {
      if (!v10)
        goto LABEL_7;
      v11 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_7:
    if ((char)v99[v9 + 7] < 0)
      operator delete(*(void **)((char *)&v97 + v9 + 8));
    v9 -= 56;
  }
  while (v9);
  LODWORD(v71) = 0;
  v45 = (unint64_t)(a2[1] - *a2) >> 3;
  if ((_DWORD)v45)
  {
    v12 = 0;
    do
    {
      v13 = *a2;
      v100[0] = v101;
      v100[1] = (void *)0x800000000;
      v103 = v105;
      v104 = 0x800000000;
      v107 = v109;
      v108 = 0x800000000;
      v111 = v113;
      v112 = 0x800000000;
      v115 = v117;
      v116 = 0x800000000;
      v119 = v123;
      v120 = v123;
      v121 = 32;
      v122 = 0;
      llvm::DebugInfoFinder::processModule();
      if ((_DWORD)v104)
      {
        v14 = std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::find<unsigned int>(a3, (unsigned int *)&v71);
        if (v14)
          v15 = (uint64_t)(v14 + 3);
        else
          v15 = *(_QWORD *)(v13 + 8 * v12) + 192;
        if (*(char *)(v15 + 23) < 0)
          std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
        else
          v83 = *(std::string *)v15;
        std::string::basic_string[abi:ne180100]<0>(&v80, "__trace.base_id");
        if (v81 >= 0)
          v16 = HIBYTE(v81);
        else
          v16 = *((_QWORD *)&v80 + 1);
        std::string::basic_string[abi:ne180100]((uint64_t)&v47, v16 + 1);
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v47;
        else
          v17 = (std::string *)v47.__r_.__value_.__r.__words[0];
        if (v16)
        {
          if (v81 >= 0)
            v18 = &v80;
          else
            v18 = (__int128 *)v80;
          memmove(v17, v18, v16);
        }
        *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 46;
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v83;
        else
          v19 = (std::string *)v83.__r_.__value_.__r.__words[0];
        if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
        else
          size = v83.__r_.__value_.__l.__size_;
        v21 = std::string::append(&v47, (const std::string::value_type *)v19, size);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v78 = v21->__r_.__value_.__r.__words[2];
        __p = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        LODWORD(v68) = 0;
        GlobalVariable = llvm::Module::getGlobalVariable();
        if (GlobalVariable || (GlobalVariable = llvm::Module::getGlobalVariable()) != 0)
        {
          v24 = *(_QWORD *)(GlobalVariable - 32);
          if (v24)
          {
            v25 = *(_DWORD *)(v24 + 32);
            if (v25 > 0x40)
              v26 = **(_QWORD **)(v24 + 24);
            else
              v26 = (uint64_t)(*(_QWORD *)(v24 + 24) << -(char)v25) >> -(char)v25;
            LODWORD(v68) = v26;
          }
        }
        v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"tracepoint_library_version";
        v49 = 259;
        NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata();
        if (NamedMetadata)
        {
          Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
          v29 = *(_QWORD *)(*(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128);
          v30 = *(_DWORD *)(v29 + 32);
          if (v30 > 0x40)
            LODWORD(v29) = **(_DWORD **)(v29 + 24);
          else
            v29 = (uint64_t)(*(_QWORD *)(v29 + 24) << -(char)v30) >> -(char)v30;
          *(_QWORD *)(a1 + 64) = v29;
        }
        *(_QWORD *)&v74 = &v68;
        *((_QWORD *)&v74 + 1) = v99;
        v75 = v100;
        v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"tracepoint.sets";
        v49 = 259;
        v31 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata();
        v32 = v31;
        if (v31)
        {
          NumOperands = llvm::NamedMDNode::getNumOperands(v31);
          if (NumOperands)
          {
            for (i = 0; i != NumOperands; ++i)
            {
              v35 = llvm::NamedMDNode::getOperand(v32);
              if (v35)
              {
                v36 = *(_QWORD *)(v35 - 8 * *(unsigned int *)(v35 + 8) + 16);
                if (v36)
                  v37 = (uint64_t *)(v36 - 8 * *(unsigned int *)(v36 + 8));
                else
                  v37 = 0;
                while (v37 != (uint64_t *)v36)
                  ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(std::vector<std::unique_ptr<llvm::Module>> const&,std::unordered_map<unsigned int,std::string> const&,unsigned long long *)::$_0::operator()((int **)&v74, *v37++);
              }
            }
          }
        }
        else
        {
          v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"tracepoint";
          v49 = 259;
          v38 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata();
          v39 = v38;
          if (v38)
          {
            v40 = llvm::NamedMDNode::getNumOperands(v38);
            if (v40)
            {
              for (j = 0; j != v40; ++j)
              {
                v42 = llvm::NamedMDNode::getOperand(v39);
                ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(std::vector<std::unique_ptr<llvm::Module>> const&,std::unordered_map<unsigned int,std::string> const&,unsigned long long *)::$_0::operator()((int **)&v74, v42);
              }
            }
          }
        }
        if (SHIBYTE(v78) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v81) < 0)
          operator delete((void *)v80);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
      }
      if (v120 != v119)
        free(v120);
      if (v115 != v117)
        free(v115);
      if (v111 != v113)
        free(v111);
      if (v107 != v109)
        free(v107);
      if (v103 != v105)
        free(v103);
      if (v100[0] != v101)
        free(v100[0]);
      v12 = v71 + 1;
      LODWORD(v71) = v12;
    }
    while (v12 < v45);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    ShaderDebugger::Metadata::MDSerializer::serializeToBuffer(a1, (uint64_t)a5);
    *a4 = *(_QWORD *)(a1 + 64);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::~__hash_table((uint64_t)v99);
}

void sub_23C751948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(a10 + 8) = v12;
    operator delete(v12);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::~__hash_table((uint64_t)&STACK[0x290]);
  _Unwind_Resume(a1);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeThreadTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  v7 = *((_DWORD *)a2 + 4);
  ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v8 = *(_QWORD *)(*(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32) + 128);
  v9 = *(_DWORD *)(v8 + 32);
  if (v9 > 0x40)
    LODWORD(v8) = **(_DWORD **)(v8 + 24);
  else
    v8 = (uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v9) >> -(char)v9;
  return ShaderDebugger::Metadata::MDSerializer::serializeThreadTracepoint(a1, v3, v6 & 0xFFFFFF | (v7 << 24), v8);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionBeginTracePoint(uint64_t **a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)a2 - 8 * *(unsigned int *)(*(_QWORD *)a2 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 128);
  v6 = *(_DWORD *)(v5 + 32);
  if (v6 > 0x40)
    v7 = **(_QWORD **)(v5 + 24);
  else
    v7 = (uint64_t)(*(_QWORD *)(v5 + 24) << -(char)v6) >> -(char)v6;
  v8 = v7 & 0xFFFFFF | (a2[4] << 24);
  v9 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, *(_QWORD *)(v4 + 32));
  return ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v8, 1uLL, v9, -1, -1);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionEndTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TracePointLocation;
  uint64_t v9;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  v7 = v6 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v9 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32));
  return ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 2uLL, v9, TracePointLocation, -1);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionCallTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *result;
  uint64_t v9;
  llvm::MDString *v10;
  uint64_t v11;
  uint64_t v12;
  void *String;
  size_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  v7 = v6 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  result = (unint64_t *)ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v9 = (uint64_t)result;
  v10 = *(llvm::MDString **)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32);
  if (v10)
  {
    if (*(_BYTE *)v10)
    {
      if (*(_BYTE *)v10 == 17)
      {
        v11 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, (uint64_t)v10);
        return ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 0, v11, v9, -1);
      }
      return result;
    }
    String = (void *)llvm::MDString::getString(v10);
    if (String)
    {
      std::string::basic_string[abi:ne180100](__p, String, v14);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v17 = 0;
    }
    v12 = ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(a1, -1, (uint64_t)__p, v9);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "__gt_unnamed_function_call__");
    v12 = ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(a1, -1, (uint64_t)__p, v9);
  }
  v15 = v12;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  return ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 0, v15, v9, -1);
}

void sub_23C751E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeVariableTracePoint(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  llvm::DIVariable *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  llvm::MDString *v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t Subprogram;
  uint64_t v27;
  size_t v28;
  uint64_t *v29;
  uint64_t v30;
  llvm::MDString *v31;
  void *v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  void **v36;
  int v37;
  size_t v38;
  BOOL v39;
  void **p_p;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  llvm::MDString *v45;
  void *v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  void **v50;
  int v51;
  _BOOL4 v52;
  void **v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  llvm::MDString *Filename;
  size_t v59;
  size_t v60;
  llvm::MDString *v61;
  size_t v62;
  llvm::MDString *Directory;
  uint64_t v64;
  llvm::MDString *v65;
  void *v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::MDString *v70;
  void *String;
  size_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char *__s2;
  size_t __n;
  int v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD **v87;
  _QWORD *v88[2];
  _QWORD **v89;
  _QWORD *v90[2];
  void *__dst;
  uint64_t v92;
  uint64_t v93;
  void *__p;
  unint64_t v95;
  uint64_t v96;
  _QWORD **v97;
  _QWORD *v98[3];

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)a2 - 8 * *(unsigned int *)(*(_QWORD *)a2 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 128);
  v6 = *(_DWORD *)(v5 + 32);
  if (v6 > 0x40)
    v7 = **(_QWORD **)(v5 + 24);
  else
    v7 = (uint64_t)(*(_QWORD *)(v5 + 24) << -(char)v6) >> -(char)v6;
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 128);
  v9 = *(_DWORD *)(v8 + 32);
  if (v9 > 0x40)
    v10 = **(_QWORD **)(v8 + 24);
  else
    v10 = (uint64_t)(*(_QWORD *)(v8 + 24) << -(char)v9) >> -(char)v9;
  v11 = *(_DWORD *)(a2 + 16);
  v12 = *(llvm::DIVariable **)(v4 + 32);
  v13 = *(unsigned __int8 *)v12;
  if (*(_BYTE *)v12)
  {
    if (v13 == 24)
    {
      v56 = (_BYTE *)((_QWORD *)v12 - *((unsigned int *)v12 + 2))[3];
      v90[0] = 0;
      v90[1] = 0;
      v89 = v90;
      v57 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v56, (uint64_t)&v89);
      std::__tree<BufferEntry>::destroy((uint64_t)&v89, v90[0]);
      Filename = llvm::DIVariable::getFilename(v12);
      if (Filename)
      {
        std::string::basic_string[abi:ne180100](&__p, Filename, v59);
      }
      else
      {
        __p = 0;
        v95 = 0;
        v96 = 0;
      }
      Directory = llvm::DIVariable::getDirectory(v12);
      if (Directory)
      {
        std::string::basic_string[abi:ne180100](&__dst, Directory, v62);
      }
      else
      {
        __dst = 0;
        v92 = 0;
        v93 = 0;
      }
      v69 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v12 + 1, (std::string::value_type *)&__p, (uint64_t)&__dst, *((unsigned int *)v12 + 6), -1);
      if (SHIBYTE(v93) < 0)
        operator delete(__dst);
      if (SHIBYTE(v96) < 0)
        operator delete(__p);
      v70 = (llvm::MDString *)((_QWORD *)v12 - *((unsigned int *)v12 + 2))[1];
      if (v70 && (String = (void *)llvm::MDString::getString(v70)) != 0)
      {
        std::string::basic_string[abi:ne180100](&__p, String, v72);
      }
      else
      {
        __p = 0;
        v95 = 0;
        v96 = 0;
      }
      v68 = ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(a1, (uint64_t)v12, (uint64_t)&__p, v57, v69);
      goto LABEL_104;
    }
    if (v13 == 25)
    {
      v14 = (_BYTE *)((_QWORD *)v12 - *((unsigned int *)v12 + 2))[3];
      v98[0] = 0;
      v98[1] = 0;
      v97 = v98;
      v15 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v14, (uint64_t)&v97);
      std::__tree<BufferEntry>::destroy((uint64_t)&v97, v98[0]);
      v16 = llvm::DIVariable::getFilename(v12);
      if (v16)
      {
        std::string::basic_string[abi:ne180100](&__p, v16, v17);
      }
      else
      {
        __p = 0;
        v95 = 0;
        v96 = 0;
      }
      v61 = llvm::DIVariable::getDirectory(v12);
      if (v61)
      {
        std::string::basic_string[abi:ne180100](&__dst, v61, v60);
      }
      else
      {
        __dst = 0;
        v92 = 0;
        v93 = 0;
      }
      v64 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v12 + 1, (std::string::value_type *)&__p, (uint64_t)&__dst, *((unsigned int *)v12 + 6), -1);
      if (SHIBYTE(v93) < 0)
        operator delete(__dst);
      if (SHIBYTE(v96) < 0)
        operator delete(__p);
      v65 = (llvm::MDString *)((_QWORD *)v12 - *((unsigned int *)v12 + 2))[1];
      if (v65 && (v66 = (void *)llvm::MDString::getString(v65)) != 0)
      {
        std::string::basic_string[abi:ne180100](&__p, v66, v67);
      }
      else
      {
        __p = 0;
        v95 = 0;
        v96 = 0;
      }
      v68 = ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(a1, (uint64_t)v12, (uint64_t)&__p, v15, v64, *((_WORD *)v12 + 16) != 0);
      goto LABEL_104;
    }
LABEL_75:
    v55 = -1;
    return ShaderDebugger::Metadata::MDSerializer::serializeVariableTracepoint(a1, v3, v7 & 0xFFFFFF | (v11 << 24), v55, v10);
  }
  v18 = *(_QWORD *)(a2 + 8);
  v19 = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v4 + 32));
  if (v20 < 0xD)
    goto LABEL_75;
  v21 = v19;
  if (*v19 != 0x765F6E7275746572 || *(_QWORD *)((char *)v19 + 5) != 0x2865756C61765F6ELL)
    goto LABEL_75;
  v23 = v20;
  if (*((_BYTE *)v19 + v20 - 1) != 41)
    goto LABEL_75;
  v80 = v18;
  std::string::basic_string[abi:ne180100]<0>(&__p, "return_value(");
  v24 = v95;
  if (v96 >= 0)
    v24 = HIBYTE(v96);
  if (v23 < v24)
    v24 = v23;
  v86 = v24;
  if (v24 <= v23 - 1)
    v24 = v23 - 1;
  if (v23 < v24)
    v24 = v23;
  v85 = v24;
  if (SHIBYTE(v96) < 0)
    operator delete(__p);
  v25 = *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 24);
  if (v25)
  {
    if (*(_BYTE *)v25 == 5)
    {
      Subprogram = llvm::DILocalScope::getSubprogram(*(llvm::DILocalScope **)(v25 - 8 * *(unsigned int *)(v25 + 8)));
      if (Subprogram)
      {
LABEL_108:
        v74 = *(_QWORD *)(Subprogram - 8 * *(unsigned int *)(Subprogram + 8) + 32);
        if (v74)
        {
          v75 = *(_QWORD *)(v74 - 8 * *(unsigned int *)(v74 + 8) + 24);
          if (v75)
          {
            v76 = *(unsigned int *)(v75 + 8);
            if ((_DWORD)v76)
            {
              v77 = *(_BYTE **)(v75 - 8 * v76);
              if (v77)
              {
                v88[0] = 0;
                v88[1] = 0;
                v87 = v88;
                v78 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v77, (uint64_t)&v87);
                std::__tree<BufferEntry>::destroy((uint64_t)&v87, v88[0]);
                goto LABEL_114;
              }
            }
          }
        }
LABEL_113:
        v78 = -1;
        goto LABEL_114;
      }
    }
  }
  v27 = *(unsigned int *)(v80 + 88);
  if (!(_DWORD)v27)
    goto LABEL_113;
  v81 = v7;
  __s2 = (char *)v21 + v86;
  v28 = v85 - v86;
  v29 = *(uint64_t **)(v80 + 80);
  v30 = 8 * v27;
  __n = v85 - v86;
  v84 = v10;
  do
  {
    Subprogram = *v29;
    v31 = *(llvm::MDString **)(*v29 - 8 * *(unsigned int *)(*v29 + 8) + 24);
    if (v31 && (v32 = (void *)llvm::MDString::getString(v31)) != 0)
    {
      std::string::basic_string[abi:ne180100](&__p, v32, v33);
      v34 = HIBYTE(v96);
      v36 = (void **)__p;
      v35 = v95;
    }
    else
    {
      v35 = 0;
      v36 = 0;
      v34 = 0;
      __p = 0;
      v95 = 0;
      v96 = 0;
    }
    v37 = (char)v34;
    if ((v34 & 0x80u) != 0)
      v34 = v35;
    v38 = v28;
    v39 = v34 == v28;
    if (v39 && v85 != v86)
    {
      if (v37 >= 0)
        p_p = &__p;
      else
        p_p = v36;
      v39 = memcmp(p_p, __s2, v38) == 0;
    }
    if (v37 < 0)
      operator delete(v36);
    if (v39)
    {
LABEL_107:
      LODWORD(v7) = v81;
      LODWORD(v10) = v84;
      goto LABEL_108;
    }
    ++v29;
    v30 -= 8;
    v28 = v85 - v86;
    LODWORD(v10) = v84;
  }
  while (v30);
  v42 = *(unsigned int *)(v80 + 88);
  if ((_DWORD)v42)
  {
    v43 = *(uint64_t **)(v80 + 80);
    v44 = 8 * v42;
    while (1)
    {
      Subprogram = *v43;
      v45 = *(llvm::MDString **)(*v43 - 8 * *(unsigned int *)(*v43 + 8) + 16);
      if (v45 && (v46 = (void *)llvm::MDString::getString(v45)) != 0)
      {
        std::string::basic_string[abi:ne180100](&__p, v46, v47);
        v48 = HIBYTE(v96);
        v50 = (void **)__p;
        v49 = v95;
      }
      else
      {
        v49 = 0;
        v50 = 0;
        v48 = 0;
        __p = 0;
        v95 = 0;
        v96 = 0;
      }
      v51 = (char)v48;
      if ((v48 & 0x80u) != 0)
        v48 = v49;
      v52 = v48 == __n;
      if (v48 != __n || v85 == v86)
      {
        if (v51 < 0)
          goto LABEL_72;
      }
      else
      {
        if (v51 >= 0)
          v54 = &__p;
        else
          v54 = v50;
        v52 = memcmp(v54, __s2, __n) == 0;
        if (v51 < 0)
        {
LABEL_72:
          operator delete(v50);
          if (v52)
            goto LABEL_107;
          goto LABEL_73;
        }
      }
      if (v52)
        goto LABEL_107;
LABEL_73:
      ++v43;
      v44 -= 8;
      LODWORD(v7) = v81;
      LODWORD(v10) = v84;
      if (!v44)
        goto LABEL_113;
    }
  }
  v78 = -1;
  LODWORD(v7) = v81;
LABEL_114:
  v79 = *(_QWORD *)(v4 + 32);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ret");
  v68 = ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(a1, v79, (uint64_t)&__p, v78, -1, 0);
LABEL_104:
  v55 = v68;
  if (SHIBYTE(v96) < 0)
    operator delete(__p);
  return ShaderDebugger::Metadata::MDSerializer::serializeVariableTracepoint(a1, v3, v7 & 0xFFFFFF | (v11 << 24), v55, v10);
}

void sub_23C7524F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::__tree<BufferEntry>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t TracePointLocation;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  v7 = *((_DWORD *)a2 + 4);
  TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v9 = v3 - 8 * *(unsigned int *)(v3 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 128);
  v11 = *(_DWORD *)(v10 + 32);
  if (v11 > 0x40)
    v12 = **(_QWORD **)(v10 + 24);
  else
    v12 = (uint64_t)(*(_QWORD *)(v10 + 24) << -(char)v11) >> -(char)v11;
  v13 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 128);
  v14 = *(_DWORD *)(v13 + 32);
  if (v14 > 0x40)
    v15 = **(_QWORD **)(v13 + 24);
  else
    v15 = (uint64_t)(*(_QWORD *)(v13 + 24) << -(char)v14) >> -(char)v14;
  return ShaderDebugger::Metadata::MDSerializer::serializeDataTracepoint(a1, v3, v6 & 0xFFFFFF | (v7 << 24), TracePointLocation, v12, v15);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataValueTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t TracePointLocation;
  llvm::DIVariable *v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  llvm::MDString *v13;
  size_t v14;
  _BYTE *v15;
  uint64_t v16;
  llvm::MDString *Filename;
  size_t v18;
  uint64_t v19;
  size_t v20;
  llvm::MDString *v21;
  size_t v22;
  llvm::MDString *Directory;
  uint64_t v24;
  llvm::MDString *v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::MDString *v30;
  void *String;
  size_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD **v40;
  _QWORD *v41[2];
  void *__p;
  uint64_t v43;
  uint64_t v44;
  void *__dst;
  uint64_t v46;
  uint64_t v47;
  _QWORD **v48;
  _QWORD *v49[2];

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  v7 = *((_DWORD *)a2 + 4);
  TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  v9 = *(llvm::DIVariable **)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32);
  v10 = *(unsigned __int8 *)v9;
  if (v10 == 24)
  {
    v15 = (_BYTE *)((_QWORD *)v9 - *((unsigned int *)v9 + 2))[3];
    v41[0] = 0;
    v41[1] = 0;
    v40 = v41;
    v16 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v15, (uint64_t)&v40);
    std::__tree<BufferEntry>::destroy((uint64_t)&v40, v41[0]);
    Filename = llvm::DIVariable::getFilename(v9);
    if (Filename)
    {
      std::string::basic_string[abi:ne180100](&__dst, Filename, v18);
    }
    else
    {
      __dst = 0;
      v46 = 0;
      v47 = 0;
    }
    Directory = llvm::DIVariable::getDirectory(v9);
    if (Directory)
    {
      std::string::basic_string[abi:ne180100](&__p, Directory, v22);
    }
    else
    {
      __p = 0;
      v43 = 0;
      v44 = 0;
    }
    v29 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v9 + 1, (std::string::value_type *)&__dst, (uint64_t)&__p, *((unsigned int *)v9 + 6), -1);
    if (SHIBYTE(v44) < 0)
      operator delete(__p);
    if (SHIBYTE(v47) < 0)
      operator delete(__dst);
    v30 = (llvm::MDString *)((_QWORD *)v9 - *((unsigned int *)v9 + 2))[1];
    if (v30 && (String = (void *)llvm::MDString::getString(v30)) != 0)
    {
      std::string::basic_string[abi:ne180100](&__dst, String, v32);
    }
    else
    {
      __dst = 0;
      v46 = 0;
      v47 = 0;
    }
    v28 = ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(a1, (uint64_t)v9, (uint64_t)&__dst, v16, v29);
  }
  else
  {
    if (v10 != 25)
    {
      v19 = -1;
      goto LABEL_39;
    }
    v11 = (_BYTE *)((_QWORD *)v9 - *((unsigned int *)v9 + 2))[3];
    v49[0] = 0;
    v49[1] = 0;
    v48 = v49;
    v12 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v11, (uint64_t)&v48);
    std::__tree<BufferEntry>::destroy((uint64_t)&v48, v49[0]);
    v13 = llvm::DIVariable::getFilename(v9);
    if (v13)
    {
      std::string::basic_string[abi:ne180100](&__dst, v13, v14);
    }
    else
    {
      __dst = 0;
      v46 = 0;
      v47 = 0;
    }
    v21 = llvm::DIVariable::getDirectory(v9);
    if (v21)
    {
      std::string::basic_string[abi:ne180100](&__p, v21, v20);
    }
    else
    {
      __p = 0;
      v43 = 0;
      v44 = 0;
    }
    v24 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v9 + 1, (std::string::value_type *)&__dst, (uint64_t)&__p, *((unsigned int *)v9 + 6), -1);
    if (SHIBYTE(v44) < 0)
      operator delete(__p);
    if (SHIBYTE(v47) < 0)
      operator delete(__dst);
    v25 = (llvm::MDString *)((_QWORD *)v9 - *((unsigned int *)v9 + 2))[1];
    if (v25 && (v26 = (void *)llvm::MDString::getString(v25)) != 0)
    {
      std::string::basic_string[abi:ne180100](&__dst, v26, v27);
    }
    else
    {
      __dst = 0;
      v46 = 0;
      v47 = 0;
    }
    v28 = ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(a1, (uint64_t)v9, (uint64_t)&__dst, v12, v24, *((_WORD *)v9 + 16) != 0);
  }
  v19 = v28;
  if (SHIBYTE(v47) < 0)
    operator delete(__dst);
LABEL_39:
  v33 = *(unsigned int *)(v3 + 8);
  if (**(_BYTE **)(v3 - 8 * v33 + 40) == 6)
  {
    llvm::DIExpression::getFragmentInfo();
    if ((_BYTE)v47)
      v34 = __dst;
    else
      v34 = 0;
    if ((_BYTE)v47)
      v35 = v46;
    else
      v35 = 0;
    v33 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v3 - 8 * v33 + 48) + 128);
  v37 = *(_DWORD *)(v36 + 32);
  if (v37 > 0x40)
    v38 = **(_QWORD **)(v36 + 24);
  else
    v38 = (uint64_t)(*(_QWORD *)(v36 + 24) << -(char)v37) >> -(char)v37;
  return ShaderDebugger::Metadata::MDSerializer::serializeDataValueTracepoint(a1, v3, v6 & 0xFFFFFF | (v7 << 24), TracePointLocation, v19, v38, (uint64_t)v34, v35);
}

void sub_23C752A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint(uint64_t **a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TracePointLocation;

  v5 = *a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  v7 = *(_DWORD *)(v6 + 32);
  if (v7 > 0x40)
    v8 = **(_QWORD **)(v6 + 24);
  else
    v8 = (uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v7) >> -(char)v7;
  v9 = v8 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  return ShaderDebugger::Metadata::MDSerializer::serializeWaypointTracepoint(a1, v5, v9, a3, TracePointLocation);
}

uint64_t std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::~pair(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(std::vector<std::unique_ptr<llvm::Module>> const&,std::unordered_map<unsigned int,std::string> const&,unsigned long long *)::$_0::operator()(int **a1, uint64_t a2)
{
  void *String;
  size_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  int *v13;
  uint64_t v14;
  _QWORD v15[2];
  int v16;
  int v17;
  void *__p[2];
  uint64_t v19;
  _QWORD *v20;

  if (a2)
  {
    String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8)));
    if (String)
    {
      std::string::basic_string[abi:ne180100](__p, String, v5);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v19 = 0;
    }
    v6 = **a1;
    v7 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
    if (v7 && *(_BYTE *)v7 == 1)
    {
      v8 = *(_QWORD *)(v7 + 128);
      if (v8 && *(_BYTE *)(v8 + 16) == 3)
      {
        v10 = *(_QWORD *)(v8 - 32);
        v11 = (_QWORD *)(v10 + 24);
        if (*(_DWORD *)(v10 + 32) >= 0x41u)
          v11 = (_QWORD *)*v11;
        v6 = *(_DWORD *)v11;
      }
    }
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::find<std::string>(a1[1], (unsigned __int8 *)__p);
    if (v12)
    {
      v13 = a1[2];
      v15[0] = a2;
      v15[1] = v13;
      v16 = v6;
      v17 = 0;
      v20 = v15;
      v14 = *((_QWORD *)v12 + 8);
      if (!v14)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v14 + 48))(v14, &v20);
    }
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
  }
}

void sub_23C752C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void llvm::DebugInfoFinder::~DebugInfoFinder(llvm::DebugInfoFinder *this)
{
  void *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  v2 = (void *)*((_QWORD *)this + 51);
  if (v2 != *((void **)this + 50))
    free(v2);
  v3 = (char *)*((_QWORD *)this + 40);
  if (v3 != (char *)this + 336)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 30);
  if (v4 != (char *)this + 256)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 20);
  if (v5 != (char *)this + 176)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 10);
  if (v6 != (char *)this + 96)
    free(v6);
  if (*(llvm::DebugInfoFinder **)this != (llvm::DebugInfoFinder *)((char *)this + 16))
    free(*(void **)this);
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::MDString *Filename;
  size_t v6;
  uint64_t v7;
  size_t v8;
  llvm::MDString *Directory;
  void *__p[2];
  uint64_t v12;
  void *__dst[2];
  uint64_t v14;

  v2 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return -1;
  Filename = llvm::DILocation::getFilename(*(llvm::DILocation **)(v2 + 24));
  if (Filename)
  {
    std::string::basic_string[abi:ne180100](__dst, Filename, v6);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v14 = 0;
  }
  Directory = llvm::DILocation::getDirectory((llvm::DILocation *)v3);
  if (Directory)
  {
    std::string::basic_string[abi:ne180100](__p, Directory, v8);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
  }
  v7 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, v3, (std::string::value_type *)__dst, (uint64_t)__p, *(unsigned int *)(v3 + 4), *(unsigned __int16 *)(v3 + 2));
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
  return v7;
}

void sub_23C752E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

llvm::MDString *llvm::DILocation::getFilename(llvm::DILocation *this)
{
  uint64_t v1;
  llvm::MDString *result;

  v1 = *((_QWORD *)this - *((unsigned int *)this + 2));
  if (*(_BYTE *)v1 != 15)
  {
    v1 = *(_QWORD *)(v1 - 8 * *(unsigned int *)(v1 + 8));
    if (!v1)
      return (llvm::MDString *)"";
  }
  result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8));
  if (result)
    return (llvm::MDString *)llvm::MDString::getString(result);
  return result;
}

llvm::MDString *llvm::DILocation::getDirectory(llvm::DILocation *this)
{
  uint64_t v1;
  llvm::MDString *result;

  v1 = *((_QWORD *)this - *((unsigned int *)this + 2));
  if (*(_BYTE *)v1 != 15)
  {
    v1 = *(_QWORD *)(v1 - 8 * *(unsigned int *)(v1 + 8));
    if (!v1)
      return (llvm::MDString *)"";
  }
  result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8) + 8);
  if (result)
    return (llvm::MDString *)llvm::MDString::getString(result);
  return result;
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::MDString *v6;
  uint64_t String;
  size_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  llvm::MDString *v12;
  size_t v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  llvm::MDString *v17;
  void *v18;
  size_t v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v23;
  void *__dst;
  uint64_t v25;
  uint64_t v26;

  v4 = a2 + 1;
  v5 = a2;
  if (*(_BYTE *)a2 != 15)
  {
    v5 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    if (!v5)
    {
      v10 = 0;
      v9 = "";
      goto LABEL_8;
    }
  }
  v6 = *(llvm::MDString **)(v5 - 8 * *(unsigned int *)(v5 + 8));
  if (v6)
  {
    String = llvm::MDString::getString(v6);
    if (String)
    {
      v9 = (char *)String;
      v10 = v8;
LABEL_8:
      std::string::basic_string[abi:ne180100](&__dst, v9, v10);
      goto LABEL_9;
    }
  }
  __dst = 0;
  v25 = 0;
  v26 = 0;
LABEL_9:
  v11 = a2;
  if (*(_BYTE *)a2 == 15 || (v11 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8))) != 0)
  {
    v12 = *(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8);
    if (!v12 || (v14 = (char *)llvm::MDString::getString(v12)) == 0)
    {
      __p[0] = 0;
      __p[1] = 0;
      v23 = 0;
      goto LABEL_17;
    }
    v15 = v13;
  }
  else
  {
    v15 = 0;
    v14 = "";
  }
  std::string::basic_string[abi:ne180100](__p, v14, v15);
LABEL_17:
  v16 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, v4, (std::string::value_type *)&__dst, (uint64_t)__p, *(unsigned int *)(a2 + 24), -1);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst);
  v17 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v17 && (v18 = (void *)llvm::MDString::getString(v17)) != 0)
  {
    std::string::basic_string[abi:ne180100](&__dst, v18, v19);
  }
  else
  {
    __dst = 0;
    v25 = 0;
    v26 = 0;
  }
  v20 = ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(a1, a2, (uint64_t)&__dst, v16);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst);
  return v20;
}

void sub_23C7530A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(uint64_t **a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t **v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t **v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v18[3];
  uint64_t v19[3];
  uint64_t v20[3];
  unint64_t v21;
  _BYTE *v22;
  unint64_t *v23;

  v22 = a2;
  v5 = *(_QWORD **)(a3 + 8);
  if (!v5)
    goto LABEL_22;
  v7 = a3 + 8;
  do
  {
    v8 = v5[4];
    v9 = v8 >= (unint64_t)a2;
    if (v8 >= (unint64_t)a2)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = (uint64_t)v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != a3 + 8 && *(_QWORD *)(v7 + 32) <= (unint64_t)a2)
  {
    v21 = 3;
    v23 = &v21;
    v14 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v21, (uint64_t)&std::piecewise_construct, &v23);
    return ShaderDebugger::Metadata::MDSerializer::getLinearMetadataId((uint64_t)a1, (uint64_t)(v14 + 5), (uint64_t)a2);
  }
  else
  {
LABEL_22:
    std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t **)a3, (unint64_t *)&v22, (uint64_t *)&v22);
    v21 = 3;
    v23 = &v21;
    v11 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v21, (uint64_t)&std::piecewise_construct, &v23);
    v12 = ShaderDebugger::Metadata::MDSerializer::reserveAndLinearizeMetadataId((uint64_t)a1, (uint64_t)(v11 + 5), (uint64_t)v22);
    v13 = v22;
    switch(*v22)
    {
      case 0xB:
        ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeBasicType(a1, (uint64_t)v22);
        return v12;
      case 0xC:
        std::set<llvm::DIType *>::set[abi:ne180100](v20, a3);
        ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDerivedType(a1, (uint64_t)v13, (uint64_t)v20);
        v15 = (_QWORD *)v20[1];
        v16 = v20;
        goto LABEL_18;
      case 0xD:
        std::set<llvm::DIType *>::set[abi:ne180100](v19, a3);
        ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeCompositeType(a1, (uint64_t)v13, (uint64_t)v19);
        v15 = (_QWORD *)v19[1];
        v16 = v19;
        goto LABEL_18;
      case 0xE:
        std::set<llvm::DIType *>::set[abi:ne180100](v18, a3);
        ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubroutineType(a1, (uint64_t)v13, (uint64_t)v18);
        v15 = (_QWORD *)v18[1];
        v16 = v18;
LABEL_18:
        std::__tree<BufferEntry>::destroy((uint64_t)v16, v15);
        break;
      default:
        return v12;
    }
  }
  return v12;
}

void sub_23C7532A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  std::__tree<BufferEntry>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

llvm::MDString *llvm::DIVariable::getFilename(llvm::DIVariable *this)
{
  uint64_t v1;
  llvm::MDString *result;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[2];
  if (!v1)
    return (llvm::MDString *)"";
  result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8));
  if (result)
    return (llvm::MDString *)llvm::MDString::getString(result);
  return result;
}

llvm::MDString *llvm::DIVariable::getDirectory(llvm::DIVariable *this)
{
  uint64_t v1;
  llvm::MDString *result;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[2];
  if (!v1)
    return (llvm::MDString *)"";
  result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8) + 8);
  if (result)
    return (llvm::MDString *)llvm::MDString::getString(result);
  return result;
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeBasicType(uint64_t **a1, uint64_t a2)
{
  llvm::MDString *v4;
  void *String;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 Tag;
  uint64_t v12;
  void *__p[2];
  uint64_t v15;

  v4 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v4 && (String = (void *)llvm::MDString::getString(v4)) != 0)
  {
    std::string::basic_string[abi:ne180100](__p, String, v6);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v15 = 0;
  }
  v7 = *(unsigned int *)(a2 + 28);
  v8 = *(unsigned int *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  Tag = llvm::DINode::getTag((llvm::DINode *)a2);
  v12 = ShaderDebugger::Metadata::MDSerializer::serializeBasicType(a1, a2, (uint64_t)__p, v7, v10, v8, v9, Tag, *(_DWORD *)(a2 + 52));
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return v12;
}

void sub_23C753430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDerivedType(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  llvm::MDString *v12;
  void *String;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 Tag;
  uint64_t v20;
  void *__p[2];
  uint64_t v23;
  uint64_t v24[3];

  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(_QWORD *)(a2 - 8 * v5 + 24);
  if (v6)
  {
    std::set<llvm::DIType *>::set[abi:ne180100](v24, a3);
    v7 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v6, v24);
    std::__tree<BufferEntry>::destroy((uint64_t)v24, (_QWORD *)v24[1]);
    v8 = -(uint64_t)*(unsigned int *)(a2 + 8);
  }
  else
  {
    v8 = -v5;
    v7 = -1;
  }
  v9 = *(_QWORD *)(a2 + 52);
  if (v9 >= 9)
    v10 = 100;
  else
    v10 = *(_QWORD *)(a2 + 52);
  if ((v9 & 0xFF00000000) != 0)
    v11 = v10;
  else
    v11 = 100;
  v12 = *(llvm::MDString **)(a2 + 8 * v8 + 16);
  if (v12 && (String = (void *)llvm::MDString::getString(v12)) != 0)
  {
    std::string::basic_string[abi:ne180100](__p, String, v14);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v23 = 0;
  }
  v15 = *(unsigned int *)(a2 + 28);
  v16 = *(unsigned int *)(a2 + 48);
  v18 = *(_QWORD *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 40);
  Tag = llvm::DINode::getTag((llvm::DINode *)a2);
  v20 = ShaderDebugger::Metadata::MDSerializer::serializeDerivedType(a1, a2, (uint64_t)__p, v15, v18, v16, v17, Tag, v7, SHIDWORD(v7), v11);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  return v20;
}

void sub_23C753580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, _QWORD *a18)
{
  std::__tree<BufferEntry>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeCompositeType(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  llvm::DISubrange **v11;
  llvm::DISubrange *v12;
  int v13;
  unint64_t *v14;
  char *v15;
  char *v16;
  uint64_t Count;
  unint64_t v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unsigned int v29;
  uint64_t LowerBound;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  llvm::MDString *v37;
  size_t v38;
  void *String;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 Tag;
  uint64_t v45;
  void *__dst[2];
  uint64_t v48;
  uint64_t v49[3];
  void *__p;
  char *v51;
  char *v52;
  uint64_t v53[3];

  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(_QWORD *)(a2 - 8 * v6 + 24);
  if (v7)
  {
    std::set<llvm::DIType *>::set[abi:ne180100](v53, a3);
    v8 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v7, v53);
    std::__tree<BufferEntry>::destroy((uint64_t)v53, (_QWORD *)v53[1]);
    v9 = -(uint64_t)*(unsigned int *)(a2 + 8);
  }
  else
  {
    v9 = -v6;
    v8 = -1;
  }
  __p = 0;
  v51 = 0;
  v52 = 0;
  v10 = *(_QWORD *)(a2 + 8 * v9 + 32);
  if (v10)
    v11 = (llvm::DISubrange **)(v10 - 8 * *(unsigned int *)(v10 + 8));
  else
    v11 = 0;
  if (v11 != (llvm::DISubrange **)v10)
  {
    while (1)
    {
      v12 = *v11;
      v13 = *(unsigned __int8 *)*v11;
      if ((v13 - 11) < 4 || v13 == 33)
        break;
      if (v13 == 9)
      {
        Count = llvm::DISubrange::getCount(*v11);
        v18 = Count & 0xFFFFFFFFFFFFFFF8;
        if ((Count & 6) != 0 || v18 == 0)
        {
          v20 = -1;
        }
        else
        {
          v29 = *(_DWORD *)(v18 + 32);
          if (v29 > 0x40)
            v20 = **(_QWORD **)(v18 + 24);
          else
            v20 = (uint64_t)(*(_QWORD *)(v18 + 24) << -(char)v29) >> -(char)v29;
        }
        LowerBound = llvm::DISubrange::getLowerBound(v12);
        v31 = 0;
        if ((LowerBound & 6) == 0)
        {
          v32 = LowerBound & 0xFFFFFFFFFFFFFFF8;
          if ((LowerBound & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v33 = *(_DWORD *)(v32 + 32);
            if (v33 > 0x40)
              v31 = **(_QWORD **)(v32 + 24);
            else
              v31 = (uint64_t)(*(_QWORD *)(v32 + 24) << -(char)v33) >> -(char)v33;
          }
        }
        v14 = ShaderDebugger::Metadata::MDSerializer::serializeSubrange(a1, (uint64_t)v12, v31, v20);
        v15 = v51;
        if (v51 < v52)
        {
          *(_QWORD *)v51 = 4;
LABEL_11:
          *((_QWORD *)v15 + 1) = v14;
          v16 = v15 + 16;
LABEL_34:
          v51 = v16;
          goto LABEL_35;
        }
        v21 = (char *)__p;
        v34 = (v51 - (_BYTE *)__p) >> 4;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60)
          std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
        v36 = v52 - (_BYTE *)__p;
        if ((v52 - (_BYTE *)__p) >> 3 > v35)
          v35 = v36 >> 3;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v35;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>((uint64_t)&v52, v25);
          v21 = (char *)__p;
          v15 = v51;
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[16 * v34];
        *(_QWORD *)v27 = 4;
        *((_QWORD *)v27 + 1) = v14;
        v28 = v27;
        if (v15 != v21)
        {
          do
          {
            *((_OWORD *)v28 - 1) = *((_OWORD *)v15 - 1);
            v28 -= 16;
            v15 -= 16;
          }
          while (v15 != v21);
LABEL_31:
          v21 = (char *)__p;
        }
        goto LABEL_32;
      }
LABEL_35:
      if (++v11 == (llvm::DISubrange **)v10)
      {
        v9 = -(uint64_t)*(unsigned int *)(a2 + 8);
        goto LABEL_59;
      }
    }
    std::set<llvm::DIType *>::set[abi:ne180100](v49, a3);
    v14 = (unint64_t *)ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v12, v49);
    std::__tree<BufferEntry>::destroy((uint64_t)v49, (_QWORD *)v49[1]);
    v15 = v51;
    if (v51 < v52)
    {
      *(_QWORD *)v51 = 3;
      goto LABEL_11;
    }
    v21 = (char *)__p;
    v22 = (v51 - (_BYTE *)__p) >> 4;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v24 = v52 - (_BYTE *)__p;
    if ((v52 - (_BYTE *)__p) >> 3 > v23)
      v23 = v24 >> 3;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>((uint64_t)&v52, v25);
      v21 = (char *)__p;
      v15 = v51;
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[16 * v22];
    *(_QWORD *)v27 = 3;
    *((_QWORD *)v27 + 1) = v14;
    v28 = v27;
    if (v15 != v21)
    {
      do
      {
        *((_OWORD *)v28 - 1) = *((_OWORD *)v15 - 1);
        v28 -= 16;
        v15 -= 16;
      }
      while (v15 != v21);
      goto LABEL_31;
    }
LABEL_32:
    v16 = v27 + 16;
    __p = v28;
    v51 = v27 + 16;
    v52 = &v26[16 * v25];
    if (v21)
      operator delete(v21);
    goto LABEL_34;
  }
LABEL_59:
  v37 = *(llvm::MDString **)(a2 + 8 * v9 + 16);
  if (v37 && (String = (void *)llvm::MDString::getString(v37)) != 0)
  {
    std::string::basic_string[abi:ne180100](__dst, String, v38);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v48 = 0;
  }
  v40 = *(unsigned int *)(a2 + 28);
  v41 = *(unsigned int *)(a2 + 48);
  v43 = *(_QWORD *)(a2 + 32);
  v42 = *(_QWORD *)(a2 + 40);
  Tag = llvm::DINode::getTag((llvm::DINode *)a2);
  v45 = ShaderDebugger::Metadata::MDSerializer::serializeCompositeType(a1, a2, (uint64_t)__dst, v40, v43, v41, v42, Tag, v8, (uint64_t **)&__p);
  if (SHIBYTE(v48) < 0)
    operator delete(__dst[0]);
  if (__p)
  {
    v51 = (char *)__p;
    operator delete(__p);
  }
  return v45;
}

void sub_23C7539AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,_QWORD *a26)
{
  std::__tree<BufferEntry>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubroutineType(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  llvm::MDString *v31;
  size_t v32;
  void *String;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 Tag;
  uint64_t v39;
  void *__dst[2];
  uint64_t v42;
  uint64_t v43[3];
  void *__p;
  char *v45;
  unint64_t v46;

  __p = 0;
  v45 = 0;
  v46 = 0;
  v5 = *(unsigned int *)(a2 + 8);
  v6 = -v5;
  v7 = *(_QWORD *)(a2 - 8 * v5 + 24);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 8);
    if ((int)v8 >= 1)
    {
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8 * v11);
        if (v11 || v12)
        {
          std::set<llvm::DIType *>::set[abi:ne180100](v43, a3);
          v14 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v12, v43);
          std::__tree<BufferEntry>::destroy((uint64_t)v43, (_QWORD *)v43[1]);
          v15 = v45;
          if ((unint64_t)v45 >= v46)
          {
            v16 = (char *)__p;
            v22 = (v45 - (_BYTE *)__p) >> 4;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 60)
              std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
            v24 = v46 - (_QWORD)__p;
            if ((uint64_t)(v46 - (_QWORD)__p) >> 3 > v23)
              v23 = v24 >> 3;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
              v25 = 0xFFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>((uint64_t)&v46, v25);
              v16 = (char *)__p;
              v15 = v45;
            }
            else
            {
              v26 = 0;
            }
            v29 = &v26[16 * v22];
            *(_QWORD *)v29 = 3;
            *((_QWORD *)v29 + 1) = v14;
            v30 = v29;
            if (v15 != v16)
            {
              do
              {
                *((_OWORD *)v30 - 1) = *((_OWORD *)v15 - 1);
                v30 -= 16;
                v15 -= 16;
              }
              while (v15 != v16);
              v16 = (char *)__p;
            }
            v28 = &v26[16 * v25];
            v13 = v29 + 16;
            __p = v30;
            goto LABEL_36;
          }
          *(_QWORD *)v45 = 3;
          *((_QWORD *)v15 + 1) = v14;
          v13 = v15 + 16;
        }
        else
        {
          if ((unint64_t)v10 >= v46)
          {
            v16 = (char *)__p;
            v17 = (v10 - (_BYTE *)__p) >> 4;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 60)
              std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
            v19 = v46 - (_QWORD)__p;
            if ((uint64_t)(v46 - (_QWORD)__p) >> 3 > v18)
              v18 = v19 >> 3;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
              v20 = 0xFFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>((uint64_t)&v46, v20);
              v16 = (char *)__p;
              v10 = v45;
            }
            else
            {
              v21 = 0;
            }
            v27 = &v21[16 * v17];
            *(_OWORD *)v27 = xmmword_23C7A48D0;
            v13 = v27 + 16;
            if (v10 != v16)
            {
              do
              {
                *((_OWORD *)v27 - 1) = *((_OWORD *)v10 - 1);
                v27 -= 16;
                v10 -= 16;
              }
              while (v10 != v16);
              v16 = (char *)__p;
            }
            v28 = &v21[16 * v20];
            __p = v27;
LABEL_36:
            v45 = v13;
            v46 = (unint64_t)v28;
            if (v16)
              operator delete(v16);
            goto LABEL_38;
          }
          *(_OWORD *)v10 = xmmword_23C7A48D0;
          v13 = v10 + 16;
        }
LABEL_38:
        v45 = v13;
        ++v11;
        v10 = v13;
        if (v11 == v8)
        {
          v6 = -(uint64_t)*(unsigned int *)(a2 + 8);
          break;
        }
      }
    }
  }
  v31 = *(llvm::MDString **)(a2 + 8 * v6 + 16);
  if (v31 && (String = (void *)llvm::MDString::getString(v31)) != 0)
  {
    std::string::basic_string[abi:ne180100](__dst, String, v32);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v42 = 0;
  }
  v34 = *(unsigned int *)(a2 + 28);
  v35 = *(unsigned int *)(a2 + 48);
  v37 = *(_QWORD *)(a2 + 32);
  v36 = *(_QWORD *)(a2 + 40);
  Tag = llvm::DINode::getTag((llvm::DINode *)a2);
  v39 = ShaderDebugger::Metadata::MDSerializer::serializeSubroutineType(a1, a2, (uint64_t)__dst, v34, v37, v35, v36, Tag, (uint64_t **)&__p);
  if (SHIBYTE(v42) < 0)
    operator delete(__dst[0]);
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
  return v39;
}

void sub_23C753D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[24],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_250D6F6F0;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C753E00(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__func()
{
  JUMPOUT(0x242623D28);
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250D6F6F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D6F6F0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[26],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_250D6F6F0;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C753F28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[16],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_250D6F6F0;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C753FB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[20],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_250D6F6F0;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C754038(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[22],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v5[6] = 0;
  v6 = (char *)operator new(0x20uLL);
  *(_QWORD *)v6 = &off_250D6F6F0;
  *(_OWORD *)(v6 + 8) = v8;
  *((_QWORD *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C7540C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[26],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  __int128 v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = a3[1];
  v5[6] = 0;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)v6 = &off_250D6F738;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C75413C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__func()
{
  JUMPOUT(0x242623D28);
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250D6F738;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D6F738;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v4 + v3);
  return v3(v4, *a2, a1[4]);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[28],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  __int128 v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = a3[1];
  v5[6] = 0;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)v6 = &off_250D6F738;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C754260(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[25],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  __int128 v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = a3[1];
  v5[6] = 0;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)v6 = &off_250D6F738;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C7542DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[27],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  __int128 v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = a3[1];
  v5[6] = 0;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)v6 = &off_250D6F738;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C754358(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[24],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  __int128 v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = a3[1];
  v5[6] = 0;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)v6 = &off_250D6F738;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C7543D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[20],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  __int128 v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = a3[1];
  v5[6] = 0;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)v6 = &off_250D6F738;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C754450(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[23],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  char *v6;
  __int128 v8;
  __int128 v9;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v8 = *a3;
  v9 = a3[1];
  v5[6] = 0;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)v6 = &off_250D6F738;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_23C7544CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType const,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,0>(a2 + 4);
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType const,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

uint64_t std::unordered_map<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>> const&>(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_23C754760(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__construct_node_hash<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_23C7549DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__construct_node_hash<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_23C754A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_23C754AC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (char *)operator new(0x70uLL);
    v14[1] = v7;
    *((_QWORD *)v12 + 4) = **a4;
    *((_QWORD *)v12 + 13) = 0;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    v15 = 1;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType const,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,0>(v2 + 4);
    operator delete(v2);
  }
}

uint64_t *std::set<llvm::DIType *>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<llvm::DIType *>::insert[abi:ne180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_23C754E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<BufferEntry>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<llvm::DIType *>::insert[abi:ne180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<llvm::DIType *>::__emplace_hint_unique_key_args<llvm::DIType *,llvm::DIType * const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<llvm::DIType *>::__emplace_hint_unique_key_args<llvm::DIType *,llvm::DIType * const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<BufferEntry>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void sub_23C75508C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_23C755170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C7551F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

DYMTLParallelRenderCommandEncoderStateTracker *DYMTLNewStatefulParallelRenderCommandEncoder(void *a1, void *a2)
{
  id v3;
  void *v4;
  DYMTLParallelRenderCommandEncoderStateTracker *v5;

  v3 = a2;
  objc_msgSend(a1, "parallelRenderCommandEncoderWithDescriptor:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[DYMTLParallelRenderCommandEncoderStateTracker initWithEncoder:descriptor:]([DYMTLParallelRenderCommandEncoderStateTracker alloc], "initWithEncoder:descriptor:", v4, v3);

  return v5;
}

{
  id v3;
  id v4;
  DYMTLParallelRenderCommandEncoderStateTracker *v5;

  v3 = a1;
  v4 = a2;
  v5 = -[DYMTLParallelRenderCommandEncoderStateTracker initWithDevice:descriptor:]([DYMTLParallelRenderCommandEncoderStateTracker alloc], "initWithDevice:descriptor:", v3, v4);

  return v5;
}

void sub_23C755338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C7553B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GPUTools::MTL::DispatchSetCaptureVersion(uint64_t this)
{
  GPUTools::MTL::_captureVersion = this;
  return this;
}

id GPUTools::MTL::MakeMTLCompileOptions(GPUTools::MTL *this, const void *a2)
{
  void *v3;
  unsigned int v4;
  const void **v5;
  void *v6;
  int v7;
  int v8;
  _QWORD *v9;
  _DWORD *v10;
  _DWORD *v12;

  if (!this)
    return 0;
  v3 = (void *)objc_opt_new();
  v4 = *(_DWORD *)this;
  v12 = (_DWORD *)((char *)this + 8);
  GPUTools::ReadDynamicBufferObject((GPUTools *)&v12, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPreprocessorMacros:", v6);

  v7 = *v12;
  v12 += 2;
  objc_msgSend(v3, "setFastMathEnabled:", v7 != 0);
  v8 = *v12;
  v12 += 2;
  objc_msgSend(v3, "setDebuggingEnabled:", v8 != 0);
  if (v4 > 0xF)
  {
    v9 = v12;
    v10 = v12 + 2;
    goto LABEL_7;
  }
  if (v4 >= 6)
  {
    v9 = v12 + 6;
    v10 = v12 + 8;
LABEL_7:
    v12 = v10;
    objc_msgSend(v3, "setLanguageVersion:", *v9);
  }
  return v3;
}

void sub_23C7554B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id GPUTools::ReadDynamicBufferObject(GPUTools *this, const void **a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v13;

  *(_QWORD *)this += 8 + ((**(_QWORD **)this + 7) & 0xFFFFFFFFFFFFFFF8);
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x24BE39120];
  v4 = (void *)MEMORY[0x24BDBCF20];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  objc_msgSend(v4, "setWithObjects:", v5, v6, v7, v8, v9, objc_opt_class(), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0;
  objc_msgSend(v3, "unarchivedObjectOfClasses:fromData:error:", v10, v2, &v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_23C7555F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLFunctionConstantValue(GPUTools::MTL *this, const void *a2)
{
  void *v3;
  char *v4;
  uint64_t i;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  v3 = (void *)objc_opt_new();
  v6 = *((_QWORD *)this + 1);
  v4 = (char *)this + 8;
  for (i = v6; i != -1; i = *(_QWORD *)v4)
  {
    v7 = (size_t)&v4[(strlen(v4 + 8) & 0xFFFFFFFFFFFFFFF8) + 8];
    v4 = (char *)(v7 + 32);
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      objc_msgSend(v3, "setConstantValue:type:atIndex:", v4, *(_QWORD *)(v7 + 8), i);
      v4 += (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  return v3;
}

void sub_23C755698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLTextureDescriptor(GPUTools::MTL *this, const void *a2)
{
  void *v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (void *)objc_opt_new();
  v4 = *(_DWORD *)this;
  objc_msgSend(v3, "setTextureType:", *((_QWORD *)this + 1));
  objc_msgSend(v3, "setPixelFormat:", *((_QWORD *)this + 2));
  objc_msgSend(v3, "setWidth:", *((_QWORD *)this + 3));
  objc_msgSend(v3, "setHeight:", *((_QWORD *)this + 4));
  objc_msgSend(v3, "setDepth:", *((_QWORD *)this + 5));
  objc_msgSend(v3, "setMipmapLevelCount:", *((_QWORD *)this + 6));
  objc_msgSend(v3, "setSampleCount:", *((_QWORD *)this + 7));
  objc_msgSend(v3, "setArrayLength:", *((_QWORD *)this + 8));
  v5 = 72;
  if (v4 < 3)
    v5 = 80;
  v6 = (char *)this + v5;
  objc_msgSend(v3, "setFramebufferOnly:", *(_DWORD *)v6 != 0);
  objc_msgSend(v3, "setIsDrawable:", *((_DWORD *)v6 + 2) != 0);
  if (v4)
  {
    objc_msgSend(v3, "setUsage:", *((_QWORD *)v6 + 2));
    v7 = v6 + 24;
  }
  else
  {
    v7 = v6 + 16;
  }
  objc_msgSend(v3, "setRotation:", *(_QWORD *)v7);
  if (v4 >= 3)
  {
    if (*((_QWORD *)v7 + 1) != 15)
      objc_msgSend(v3, "setStorageMode:");
    objc_msgSend(v3, "setCpuCacheMode:", *((_QWORD *)v7 + 2));
    if (v4 >= 0x15)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v3, "setAllowGPUOptimizedContents:", *((_QWORD *)v7 + 3) != 0);
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v3, "setCompressionMode:", *((_QWORD *)v7 + 4));
      if (v4 >= 0x16)
      {
        v8 = *((_QWORD *)v7 + 5);
        v9 = *((_DWORD *)v7 + 12);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          objc_msgSend(v3, "setForceResourceIndex:", v9 != 0);
          objc_msgSend(v3, "setResourceIndex:", v8);
        }
        if (v4 >= 0x23)
        {
          v10 = v7[56];
          v11 = *((_QWORD *)v7 + 8);
          v12 = *((_QWORD *)v7 + 9);
          v13 = *((_QWORD *)v7 + 10);
          if ((objc_opt_respondsToSelector() & 1) != 0)
            objc_msgSend(v3, "setSwizzle:", v10 & 0xFFFFFFFFFF0000FFLL | (unsigned __int16)(v11 << 8) | ((unint64_t)v12 << 16) | ((_DWORD)v13 << 24));
          if (v4 >= 0x27 && (objc_opt_respondsToSelector() & 1) != 0)
            objc_msgSend(v3, "setSwizzleKey:", *((unsigned int *)v7 + 22));
        }
      }
    }
  }
  return v3;
}

void sub_23C7558D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLRenderPassDescriptor(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  uint64_t i;
  void *v7;
  id v8;
  double *v9;
  _QWORD *v10;
  id v11;
  double *v12;
  _QWORD *v13;
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  id v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  double *v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  void *__p[3];
  unint64_t v45;
  double *v46;

  objc_msgSend(MEMORY[0x24BDDD698], "renderPassDescriptor");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(_DWORD *)a1;
  v45 = *(_QWORD *)(a1 + 8);
  __p[0] = &v45;
  objc_msgSend(v4, "setVisibilityResultBuffer:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v45, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)[3]);
  v46 = (double *)(a1 + 24);
  for (i = *(_QWORD *)(a1 + 16); i != -1; v46 = (double *)(v10 + 1))
  {
    objc_msgSend(v4, "colorAttachments");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectAtIndexedSubscript:", i);
    v8 = (id)objc_claimAutoreleasedReturnValue();
    GPUTools::MTL::MakeMTLRenderPassAttachmentDescriptor((_QWORD **)&v46, v8, a2, v5);
    v9 = v46;
    objc_msgSend(v8, "setClearColor:", *v46, v46[1], v46[2], v46[3]);
    v10 = v9 + 4;
    if (v5 >= 0x27 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v8, "setYInvert:", *((_QWORD *)v9 + 4) != 0);
      v10 = v9 + 5;
    }

    i = *v10;
  }
  objc_msgSend(v4, "depthAttachment");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  GPUTools::MTL::MakeMTLRenderPassAttachmentDescriptor((_QWORD **)&v46, v11, a2, v5);
  v12 = v46;
  objc_msgSend(v11, "setClearDepth:", *v46);
  v13 = v12 + 4;
  v46 = v12 + 4;
  if (v5 < 0x27)
  {

    if (v5 < 5)
      goto LABEL_13;
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v11, "setYInvert:", *((_QWORD *)v12 + 4) != 0);
      v13 = v12 + 5;
    }

  }
  objc_msgSend(v4, "depthAttachment");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_opt_respondsToSelector();

  v46 = (double *)(v13 + 1);
  if ((v15 & 1) != 0)
  {
    v16 = *v13;
    objc_msgSend(v4, "depthAttachment");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setDepthResolveFilter:", v16);

  }
LABEL_13:
  objc_msgSend(v4, "stencilAttachment");
  v18 = (id)objc_claimAutoreleasedReturnValue();
  GPUTools::MTL::MakeMTLRenderPassAttachmentDescriptor((_QWORD **)&v46, v18, a2, v5);
  v19 = v46;
  objc_msgSend(v18, "setClearStencil:", *v46);
  v20 = v19 + 4;
  if (v5 < 0x27)
  {

    v21 = v19 + 4;
    if (v5 < 7)
      goto LABEL_48;
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v20 = v19 + 5;
      v46 = v19 + 5;
      objc_msgSend(v18, "setYInvert:", *((_QWORD *)v19 + 4) != 0);
    }

  }
  v21 = v20 + 1;
  v22 = *(_QWORD *)v20;
  if ((objc_opt_respondsToSelector() & (v22 != -1)) == 1)
    objc_msgSend(v4, "setRenderTargetArrayLength:", v22);
  if (v5 >= 0xD)
  {
    v24 = *((_QWORD *)v20 + 1);
    v23 = *((_QWORD *)v20 + 2);
    v26 = *((_QWORD *)v20 + 3);
    v25 = *((_QWORD *)v20 + 4);
    v27 = *((_QWORD *)v20 + 7);
    v42 = *((_QWORD *)v20 + 6);
    v43 = *((_QWORD *)v20 + 5);
    v21 = v20 + 8;
    v46 = v20 + 8;
    if ((objc_opt_respondsToSelector() & (v24 != -1)) == 1)
    {
      objc_msgSend(v4, "setImageblockSampleLength:", v24);
      objc_msgSend(v4, "setThreadgroupMemoryLength:", v23);
      objc_msgSend(v4, "setTileWidth:", v26);
      objc_msgSend(v4, "setTileHeight:", v25);
    }
    if ((objc_opt_respondsToSelector() & (v27 != -1)) == 1)
      objc_msgSend(v4, "setDefaultRasterSampleCount:", v27);
    if ((objc_opt_respondsToSelector() & (v43 != -1)) == 1 && v42 != -1)
    {
      objc_msgSend(v4, "setRenderTargetWidth:", v43);
      objc_msgSend(v4, "setRenderTargetHeight:", v42);
    }
    if (v5 >= 0xE)
    {
      v21 = v20 + 9;
      v28 = *((_QWORD *)v20 + 8);
      if (v28)
      {
        std::vector<MTLSamplePosition>::vector(__p, *((_QWORD *)v20 + 8));
        v29 = (char *)__p[0] + 4;
        v30 = v28;
        do
        {
          *(v29 - 1) = *(_DWORD *)v21;
          v31 = v21 + 2;
          *v29 = *((_DWORD *)v21 + 2);
          v29 += 2;
          v21 += 2;
          --v30;
        }
        while (v30);
        objc_msgSend(v4, "setSamplePositions:count:");
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v21 = v31;
      }
      if (v5 >= 0x14)
      {
        objc_msgSend(v4, "stencilAttachment");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_opt_respondsToSelector();

        if ((v33 & 1) != 0)
        {
          v34 = *(_QWORD *)v21;
          if (*(_QWORD *)v21 != -1)
          {
            objc_msgSend(v4, "stencilAttachment");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "setStencilResolveFilter:", v34);

          }
        }
        if (v5 < 0x18)
        {
          ++v21;
        }
        else
        {
          if ((objc_opt_respondsToSelector() & 1) != 0)
            objc_msgSend(v4, "setOpenGLModeEnabled:", *((_QWORD *)v21 + 1) != 0);
          if (v5 < 0x21)
          {
            v21 += 2;
          }
          else
          {
            if ((objc_opt_respondsToSelector() & 1) != 0)
            {
              v45 = *((_QWORD *)v21 + 2);
              __p[0] = &v45;
              objc_msgSend(v4, "setRasterizationRateMap:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v45, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)[3]);
            }
            v21 += 3;
          }
        }
      }
    }
  }
LABEL_48:
  objc_msgSend(v4, "depthAttachment", v42);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "texture");
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v37)
    objc_msgSend(v4, "setDepthAttachment:", 0);
  objc_msgSend(v4, "stencilAttachment");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "texture");
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v39)
    objc_msgSend(v4, "setStencilAttachment:", 0);
  if ((v5 & 0xFFFFFFFE) == 0x22)
  {
    v21 -= 3;
    do
    {
      v40 = *((_QWORD *)v21 + 3);
      v21 += 4;
    }
    while (v40 != -1);
  }
  if (v5 >= 0x27 && (objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v4, "setDitherEnabled:", *(_QWORD *)v21 != 0);
  return v4;
}

void sub_23C755EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLDepthStencilDescriptor(GPUTools::MTL *this, const void *a2)
{
  void *v3;
  void *v4;
  const void **v5;
  void *v6;
  const void **v7;
  void *v8;
  uint64_t *v10;

  v3 = (void *)objc_opt_new();
  objc_msgSend(v3, "setDepthCompareFunction:", *((_QWORD *)this + 1));
  objc_msgSend(v3, "setDepthWriteEnabled:", *((_DWORD *)this + 4) != 0);
  this = (GPUTools::MTL *)((char *)this + 24);
  v10 = (uint64_t *)((char *)this + (strlen((const char *)this) & 0xFFFFFFFFFFFFFFF8) + 8);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setLabel:", v4);

  GPUTools::MTL::MakeMTLStencilDescriptor(&v10, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setFrontFaceStencil:", v6);

  GPUTools::MTL::MakeMTLStencilDescriptor(&v10, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setBackFaceStencil:", v8);

  return v3;
}

void sub_23C756074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLStencilDescriptor(uint64_t **this, const void **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  ++*this;
  v3 = (void *)objc_opt_new();
  v4 = *(*this)++;
  objc_msgSend(v3, "setStencilCompareFunction:", v4);
  v5 = *(*this)++;
  objc_msgSend(v3, "setStencilFailureOperation:", v5);
  v6 = *(*this)++;
  objc_msgSend(v3, "setDepthFailureOperation:", v6);
  v7 = *(*this)++;
  objc_msgSend(v3, "setDepthStencilPassOperation:", v7);
  v8 = *(unsigned int *)(*this)++;
  objc_msgSend(v3, "setReadMask:", v8);
  v9 = *(unsigned int *)(*this)++;
  objc_msgSend(v3, "setWriteMask:", v9);
  return v3;
}

void sub_23C75614C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLSamplerDescriptor(GPUTools::MTL *this, const void *a2)
{
  void *v3;
  unsigned int v4;
  double v5;
  double v6;
  const char *v7;
  size_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v3 = (void *)objc_opt_new();
  v4 = *(_DWORD *)this;
  objc_msgSend(v3, "setMinFilter:", *((_QWORD *)this + 1));
  objc_msgSend(v3, "setMagFilter:", *((_QWORD *)this + 2));
  objc_msgSend(v3, "setMipFilter:", *((_QWORD *)this + 3));
  objc_msgSend(v3, "setMaxAnisotropy:", *((_QWORD *)this + 4));
  objc_msgSend(v3, "setSAddressMode:", *((_QWORD *)this + 5));
  objc_msgSend(v3, "setTAddressMode:", *((_QWORD *)this + 6));
  objc_msgSend(v3, "setRAddressMode:", *((_QWORD *)this + 7));
  objc_msgSend(v3, "setNormalizedCoordinates:", *((_DWORD *)this + 16) != 0);
  LODWORD(v5) = *((_DWORD *)this + 18);
  objc_msgSend(v3, "setLodMinClamp:", v5);
  LODWORD(v6) = *((_DWORD *)this + 20);
  objc_msgSend(v3, "setLodMaxClamp:", v6);
  v7 = (char *)this + 88;
  v8 = strlen(v7);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setLabel:", v9);

  if (v4 >= 2)
  {
    v10 = &v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 8];
    objc_msgSend(v3, "setLodAverage:", *(_DWORD *)v10 != 0);
    if (v4 >= 8)
    {
      objc_msgSend(v3, "setCompareFunction:", *(unsigned int *)&v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 16]);
      if (v4 > 0x10)
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v3, "setSupportArgumentBuffers:", *(_DWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 32] != 0);
        if (v4 >= 0x16)
        {
          v11 = *(_QWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 40];
          v12 = *((_DWORD *)v10 + 10);
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            objc_msgSend(v3, "setForceResourceIndex:", v12 != 0);
            objc_msgSend(v3, "setResourceIndex:", v11);
          }
          if (v4 >= 0x27)
          {
            v13 = *((unsigned int *)v10 + 14);
            v14 = *((unsigned int *)v10 + 16);
            v15 = *((unsigned int *)v10 + 18);
            v16 = *((unsigned int *)v10 + 20);
            v17 = *((unsigned int *)v10 + 22);
            v18 = *((_DWORD *)v10 + 24);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v3, "setBorderColorSPI:", v13);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v3, "setCustomBorderColorValue_0:", v14);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v3, "setCustomBorderColorValue_1:", v15);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v3, "setCustomBorderColorValue_2:", v16);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v3, "setCustomBorderColorValue_3:", v17);
            if ((objc_opt_respondsToSelector() & 1) != 0)
              objc_msgSend(v3, "setForceSeamsOnCubemapFiltering:", v18 != 0);
          }
        }
      }
    }
  }
  return v3;
}

void sub_23C7563F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLStageInputOutputDescriptor(uint64_t **this, const void **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (void *)objc_opt_new();
  if (GPUTools::MTL::_captureVersion >= 0x1A)
  {
    v4 = *(unsigned int *)(*this)++;
    if (!(_DWORD)v4)
      goto LABEL_8;
  }
  else
  {
    v4 = 31;
  }
  for (i = 0; i != v4; ++i)
  {
    v6 = *(*this)++;
    objc_msgSend(v3, "layouts");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectAtIndexedSubscript:", i);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setStride:", v6);

    v9 = *(*this)++;
    objc_msgSend(v3, "layouts");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectAtIndexedSubscript:", i);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setStepRate:", v9);

    v12 = *(*this)++;
    objc_msgSend(v3, "layouts");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectAtIndexedSubscript:", i);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setStepFunction:", v12);

  }
  if (GPUTools::MTL::_captureVersion >= 0x1A)
  {
LABEL_8:
    v15 = *(unsigned int *)(*this)++;
    if (!(_DWORD)v15)
      goto LABEL_11;
    goto LABEL_9;
  }
  v15 = 31;
LABEL_9:
  for (j = 0; j != v15; ++j)
  {
    v17 = *(*this)++;
    objc_msgSend(v3, "attributes");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "objectAtIndexedSubscript:", j);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setFormat:", v17);

    v20 = *(*this)++;
    objc_msgSend(v3, "attributes");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "objectAtIndexedSubscript:", j);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setOffset:", v20);

    v23 = *(*this)++;
    objc_msgSend(v3, "attributes");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "objectAtIndexedSubscript:", j);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setBufferIndex:", v23);

  }
LABEL_11:
  v26 = *(*this)++;
  objc_msgSend(v3, "setIndexType:", v26);
  v27 = *(*this)++;
  objc_msgSend(v3, "setIndexBufferIndex:", v27);
  return v3;
}

void sub_23C756660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchMemoryBarrierWithResources(void *a1, int a2, void ***a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v11;
  uint64_t v12;
  void **v13;
  id v14;
  char *v15[3];
  void ***v16;
  char **v17;

  v11 = a1;
  memset(v15, 0, sizeof(v15));
  if (a4)
  {
    v12 = a4;
    do
    {
      v13 = *a3++;
      v16 = (void ***)&v17;
      v17 = (char **)v13;
      v14 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a7, (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, &v16)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v15, &v14);

      --v12;
    }
    while (v12);
  }
  if (a2 == -16008)
    objc_msgSend(v11, "memoryBarrierWithResources:count:", v15[0], a4);
  v17 = v15;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);

}

void sub_23C75679C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

id std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](char **a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  id result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v24 = v16;
    *(_QWORD *)v15 = *a2;
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = (id)std::__split_buffer<objc_object  {objcproto11MTLResource}* {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    result = *a2;
    *(_QWORD *)v7 = result;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void GPUTools::MTL::DispatchTextures(void *a1, int a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  id v9;
  unint64_t v10;
  void **v11;
  unint64_t v12;
  id v13;
  char *v14[3];
  void ***v15;
  char **v16;

  v9 = a1;
  memset(v14, 0, sizeof(v14));
  if (a4[1])
  {
    v10 = 0;
    do
    {
      v11 = *(void ***)(a3 + 8 * v10);
      v15 = (void ***)&v16;
      v16 = (char **)v11;
      v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, &v15)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v14, &v13);

      ++v10;
      v12 = a4[1];
    }
    while (v10 < v12);
  }
  else
  {
    v12 = 0;
  }
  if (a2 <= -16261)
  {
    if (a2 == -16333)
    {
      objc_msgSend(v9, "setTextures:withRange:", v14[0], *a4, v12);
    }
    else if (a2 == -16275)
    {
      objc_msgSend(v9, "setVertexTextures:withRange:", v14[0], *a4, v12);
    }
  }
  else if (a2 == -16260 || a2 == -16184)
  {
    objc_msgSend(v9, "setFragmentTextures:withRange:", v14[0], *a4, v12);
  }
  else if (a2 == -16086)
  {
    objc_msgSend(v9, "setTileTextures:withRange:", v14[0], *a4, v12);
  }
  v16 = v14;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);

}

void sub_23C756A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchBuffers(void *a1, int a2, unint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t a6)
{
  id v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  id v29;
  id v30;
  unint64_t v31;
  void *__p;
  char *v33;
  char *v34;
  char *v35[3];
  unint64_t *v36;

  v11 = a1;
  v12 = v11;
  memset(v35, 0, sizeof(v35));
  __p = 0;
  v33 = 0;
  v34 = 0;
  if (a5[1])
  {
    v28 = a2;
    v29 = v11;
    v13 = 0;
    do
    {
      v14 = *a3++;
      v31 = v14;
      v16 = *a4++;
      v15 = v16;
      v36 = &v31;
      v30 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a6, &v31, (uint64_t)&std::piecewise_construct, &v36)[3];
      v17 = v33;
      if (v33 >= v34)
      {
        v19 = (char *)__p;
        v20 = (v33 - (_BYTE *)__p) >> 3;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
        v22 = v34 - (_BYTE *)__p;
        if ((v34 - (_BYTE *)__p) >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v34, v23);
          v19 = (char *)__p;
          v17 = v33;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = v15;
        v18 = v25 + 8;
        while (v17 != v19)
        {
          v26 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v25 - 1) = v26;
          v25 -= 8;
        }
        __p = v25;
        v33 = v18;
        v34 = &v24[8 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v33 = v15;
        v18 = v17 + 8;
      }
      v33 = v18;
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v35, &v30);

      ++v13;
      v27 = a5[1];
    }
    while (v13 < v27);
    v12 = v29;
    a2 = v28;
  }
  else
  {
    v27 = 0;
  }
  if (a2 <= -16263)
  {
    if (a2 == -16335)
    {
      objc_msgSend(v12, "setBuffers:offsets:withRange:", v35[0], __p, *a5, v27);
    }
    else if (a2 == -16277)
    {
      objc_msgSend(v12, "setVertexBuffers:offsets:withRange:", v35[0], __p, *a5, v27);
    }
  }
  else if (a2 == -16262 || a2 == -16186)
  {
    objc_msgSend(v12, "setFragmentBuffers:offsets:withRange:", v35[0], __p, *a5, v27);
  }
  else if (a2 == -16087)
  {
    objc_msgSend(v12, "setTileBuffers:offsets:withRange:", v35[0], __p, *a5, v27);
  }
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
  __p = v35;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

}

void sub_23C756D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16)
{
  void *v16;

  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchSamplerStates(void *a1, int a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  id v9;
  unint64_t v10;
  void **v11;
  unint64_t v12;
  id v13;
  char *v14[3];
  void ***v15;
  char **v16;

  v9 = a1;
  memset(v14, 0, sizeof(v14));
  if (a4[1])
  {
    v10 = 0;
    do
    {
      v11 = *(void ***)(a3 + 8 * v10);
      v15 = (void ***)&v16;
      v16 = (char **)v11;
      v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, &v15)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v14, &v13);

      ++v10;
      v12 = a4[1];
    }
    while (v10 < v12);
  }
  else
  {
    v12 = 0;
  }
  switch(a2)
  {
    case -16331:
      objc_msgSend(v9, "setSamplerStates:withRange:", v14[0], *a4, v12);
      break;
    case -16273:
      objc_msgSend(v9, "setVertexSamplerStates:withRange:", v14[0], *a4, v12);
      break;
    case -16258:
      objc_msgSend(v9, "setFragmentSamplerStates:withRange:", v14[0], *a4, v12);
      break;
  }
  v16 = v14;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);

}

void sub_23C756E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchSamplerStates(void *a1, int a2, unint64_t *a3, int *a4, int *a5, _QWORD *a6, uint64_t a7)
{
  id v13;
  void *v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  int v42;
  id v43;
  id v44;
  unint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  void *__p;
  char *v50;
  char *v51;
  char *v52[3];
  unint64_t *v53;

  v13 = a1;
  v14 = v13;
  memset(v52, 0, sizeof(v52));
  __p = 0;
  v50 = 0;
  v51 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (a6[1])
  {
    v42 = a2;
    v43 = v13;
    v15 = 0;
    do
    {
      v16 = *a4;
      a4 += 2;
      v17 = v16;
      v18 = *a5;
      a5 += 2;
      v19 = v18;
      v20 = *a3++;
      v45 = v20;
      v53 = &v45;
      v44 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a7, &v45, (uint64_t)&std::piecewise_construct, &v53)[3];
      v21 = v50;
      if (v50 >= v51)
      {
        v23 = (char *)__p;
        v24 = (v50 - (_BYTE *)__p) >> 2;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
          goto LABEL_53;
        v26 = v51 - (_BYTE *)__p;
        if ((v51 - (_BYTE *)__p) >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v51, v27);
          v23 = (char *)__p;
          v21 = v50;
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = v19;
        v22 = v29 + 4;
        while (v21 != v23)
        {
          v30 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        __p = v29;
        v50 = v22;
        v51 = &v28[4 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v50 = v19;
        v22 = v21 + 4;
      }
      v50 = v22;
      v31 = v47;
      if (v47 >= v48)
      {
        v33 = (char *)v46;
        v34 = (v47 - (_BYTE *)v46) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
LABEL_53:
          std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
        v36 = v48 - (_BYTE *)v46;
        if ((v48 - (_BYTE *)v46) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v48, v37);
          v33 = (char *)v46;
          v31 = v47;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[4 * v34];
        *(_DWORD *)v39 = v17;
        v32 = v39 + 4;
        while (v31 != v33)
        {
          v40 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v39 - 1) = v40;
          v39 -= 4;
        }
        v46 = v39;
        v47 = v32;
        v48 = &v38[4 * v37];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_DWORD *)v47 = v17;
        v32 = v31 + 4;
      }
      v47 = v32;
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v52, &v44);

      ++v15;
      v41 = a6[1];
    }
    while (v15 < v41);
    v14 = v43;
    a2 = v42;
  }
  else
  {
    v41 = 0;
  }
  if (a2 <= -16257)
  {
    if (a2 == -16329)
    {
      objc_msgSend(v14, "setSamplerStates:lodMinClamps:lodMaxClamps:withRange:", v52[0], v46, __p, *a6, v41);
    }
    else if (a2 == -16271)
    {
      objc_msgSend(v14, "setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:", v52[0], v46, __p, *a6, v41);
    }
  }
  else if (a2 == -16256 || a2 == -16178)
  {
    objc_msgSend(v14, "setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:", v52[0], v46, __p, *a6, v41);
  }
  else if (a2 == -16084)
  {
    objc_msgSend(v14, "setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:", v52[0], v46, __p, *a6, v41);
  }
  if (v46)
  {
    v47 = (char *)v46;
    operator delete(v46);
  }
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  __p = v52;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

}

void sub_23C757224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char *a18, char *a19, uint64_t a20,char a21)
{
  void *v21;

  if (__p)
    operator delete(__p);
  if (a18)
  {
    a19 = a18;
    operator delete(a18);
  }
  a18 = &a21;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchResources(void *a1, int a2, void ***a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  uint64_t v12;
  void **v13;
  id v14;
  char *v15[3];
  void ***v16;
  char **v17;

  v11 = a1;
  memset(v15, 0, sizeof(v15));
  if (a4)
  {
    v12 = a4;
    do
    {
      v13 = *a3++;
      v16 = (void ***)&v17;
      v17 = (char **)v13;
      v14 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a6, (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, &v16)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v15, &v14);

      --v12;
    }
    while (v12);
  }
  if (a2 == -16042)
    objc_msgSend(v11, "useResources:count:usage:", v15[0], a4, a5);
  v17 = v15;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);

}

void sub_23C757378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchHeaps(void *a1, int a2, void ***a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  void **v11;
  id v12;
  char *v13[3];
  void ***v14;
  char **v15;

  v9 = a1;
  memset(v13, 0, sizeof(v13));
  if (a4)
  {
    v10 = a4;
    do
    {
      v11 = *a3++;
      v14 = (void ***)&v15;
      v15 = (char **)v11;
      v12 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v15, (uint64_t)&std::piecewise_construct, &v14)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v13, &v12);

      --v10;
    }
    while (v10);
  }
  if (a2 == -16044 || a2 == -16040)
    objc_msgSend(v9, "useHeaps:count:", v13[0], a4);
  v15 = v13;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);

}

void sub_23C75749C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchResourceGroups(void *a1, int a2, void ***a3, uint64_t a4, uint64_t a5, void ***a6)
{
  id v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  void **v18;
  id v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void ***v23;
  char **v24;

  v11 = a1;
  if (a2 == -15900)
  {
    v12 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      v13 = a3[v12];
      v23 = (void ***)&v24;
      v24 = (char **)v13;
      v19 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v24, (uint64_t)&std::piecewise_construct, &v23)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](&v20, &v19);

      ++v12;
    }
    while (a4 != v12);
    v14 = objc_msgSend(v11, "newResourceGroupFromResources:count:", v20, a4);
    v23 = a6;
    v15 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)a6, (uint64_t)&std::piecewise_construct, &v23);
    v16 = (void *)v15[3];
    v15[3] = v14;

    v24 = &v20;
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    if (a4)
    {
      v17 = a4;
      do
      {
        v18 = *a3++;
        v23 = (void ***)&v24;
        v24 = (char **)v18;
        v19 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v24, (uint64_t)&std::piecewise_construct, &v23)[3];
        std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](&v20, &v19);

        --v17;
      }
      while (v17);
    }
    if (a2 == -15898)
    {
      objc_msgSend(v11, "setResourceGroups:count:", v20, a4);
    }
    else if (a2 == -15897)
    {
      objc_msgSend(v11, "dropResourceGroups:count:", v20, a4);
    }
    v24 = &v20;
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  }

}

void sub_23C75769C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchResources(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v12;
  uint64_t v13;
  void **v14;
  id v15;
  char *v16[3];
  void ***v17;
  char **v18;

  v12 = a1;
  v13 = 0;
  memset(v16, 0, sizeof(v16));
  do
  {
    v14 = *(void ***)(a3 + 8 * v13);
    v17 = (void ***)&v18;
    v18 = (char **)v14;
    v15 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a7, (unint64_t *)&v18, (uint64_t)&std::piecewise_construct, &v17)[3];
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v16, &v15);

    ++v13;
  }
  while (a4 != v13);
  objc_msgSend(v12, "useResources:count:usage:stages:", v16[0], a4, a5, a6);
  v18 = v16;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);

}

void sub_23C7577F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchHeaps(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  uint64_t v11;
  void **v12;
  id v13;
  char *v14[3];
  void ***v15;
  char **v16;

  v10 = a1;
  v11 = 0;
  memset(v14, 0, sizeof(v14));
  do
  {
    v12 = *(void ***)(a3 + 8 * v11);
    v15 = (void ***)&v16;
    v16 = (char **)v12;
    v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a6, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, &v15)[3];
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v14, &v13);

    ++v11;
  }
  while (a4 != v11);
  objc_msgSend(v10, "useHeaps:count:stages:", v14[0], a4, a5);
  v16 = v14;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);

}

void sub_23C757904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchIndirectCommandBuffers(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  id v8;
  unint64_t v9;
  void **v10;
  id v11;
  char *v12[3];
  void ***v13;
  char **v14;

  v8 = a1;
  v9 = 0;
  memset(v12, 0, sizeof(v12));
  do
  {
    v10 = *(void ***)(a3 + 8 * v9);
    v13 = (void ***)&v14;
    v14 = (char **)v10;
    v11 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v14, (uint64_t)&std::piecewise_construct, &v13)[3];
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v12, &v11);

    ++v9;
  }
  while (v9 < a4[1]);
  objc_msgSend(v8, "setIndirectCommandBuffers:withRange:", v12[0], *a4);
  v14 = v12;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);

}

void sub_23C757A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeIndirectCommandBufferOptimizedRangeList(GPUTools::MTL *this, const void *a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;

  v3 = *((_QWORD *)this + 1);
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v5 = (_QWORD *)((char *)this + 24);
    do
    {
      objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", *(v5 - 1), *v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v6);
      v5 += 2;

      --v3;
    }
    while (v3);
  }
  v7 = (void *)objc_msgSend(v4, "copy");

  return v7;
}

void sub_23C757ADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchPipelineStates(void *a1, int a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  id v9;
  unint64_t v10;
  void **v11;
  unint64_t v12;
  id v13;
  char *v14[3];
  void ***v15;
  char **v16;

  v9 = a1;
  if (a2 == -16001)
  {
    memset(v14, 0, sizeof(v14));
    std::vector<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>::reserve(v14, a4[1]);
    if (a4[1])
    {
      v10 = 0;
      do
      {
        v11 = *(void ***)(a3 + 8 * v10);
        v15 = (void ***)&v16;
        v16 = (char **)v11;
        v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, &v15)[3];
        std::vector<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>::emplace_back<objc_object  {objcproto22MTLRenderPipelineState}*&>(v14, &v13);

        ++v10;
        v12 = a4[1];
      }
      while (v10 < v12);
    }
    else
    {
      v12 = 0;
    }
    objc_msgSend(v9, "setRenderPipelineStates:withRange:", v14[0], *a4, v12);
    v16 = v14;
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  }

}

void sub_23C757C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  void *v16;

  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

uint64_t std::vector<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<objc_object  {objcproto11MTLResource}* {__strong}>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

char *std::vector<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>::emplace_back<objc_object  {objcproto22MTLRenderPipelineState}*&>(char **a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int64x2_t v19;
  char *v20;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v25 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    v24 = v15;
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v23.i64[1] = (uint64_t)(v14 + 8);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v8;
    v23 = v19;
    v20 = a1[2];
    a1[2] = v15;
    v24 = v20;
    v22 = v19.i64[0];
    std::__split_buffer<objc_object  {objcproto11MTLResource}* {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(_QWORD *)v7 = *a2;
    v8 = v7 + 8;
  }
  a1[1] = v8;
  return v8 - 8;
}

id GPUTools::MTL::MakeMTLRenderPipelineDescriptor(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  void *v39;
  void *v40;
  size_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  void *v47;
  uint64_t k;
  uint64_t v49;
  void *v50;
  int v51;
  int v52;
  void *v53;
  uint64_t m;
  uint64_t v55;
  void *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t *v64;

  v4 = (void *)objc_opt_new();
  v5 = *(_DWORD *)a1;
  v63 = *(_QWORD *)(a1 + 8);
  v64 = &v63;
  objc_msgSend(v4, "setVertexFunction:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v63, (uint64_t)&std::piecewise_construct, &v64)[3]);
  v63 = *(_QWORD *)(a1 + 16);
  v64 = &v63;
  objc_msgSend(v4, "setFragmentFunction:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v63, (uint64_t)&std::piecewise_construct, &v64)[3]);
  v6 = (void *)objc_opt_new();
  v61 = a2;
  v62 = v5;
  if (GPUTools::MTL::_captureVersion >= 0x1A)
  {
    v7 = (uint64_t *)(a1 + 32);
    v8 = *(unsigned int *)(a1 + 24);
    if (!(_DWORD)v8)
      goto LABEL_8;
  }
  else
  {
    v7 = (uint64_t *)(a1 + 24);
    v8 = 31;
  }
  for (i = 0; i != v8; ++i)
  {
    v10 = v7;
    v12 = *v7;
    v11 = v7[1];
    v13 = v7[2];
    objc_msgSend(v6, "layouts");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectAtIndexedSubscript:", i);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setStride:", v12);

    objc_msgSend(v6, "layouts");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "objectAtIndexedSubscript:", i);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setStepFunction:", v13);

    objc_msgSend(v6, "layouts");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "objectAtIndexedSubscript:", i);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setStepRate:", v11);

    v7 = v10 + 3;
  }
  v7 = v10 + 3;
  if (GPUTools::MTL::_captureVersion < 0x1A)
  {
    v20 = 31;
    goto LABEL_9;
  }
LABEL_8:
  v21 = *(_DWORD *)v7++;
  v20 = v21;
  if (v21)
  {
LABEL_9:
    v22 = 0;
    do
    {
      v23 = v7;
      v25 = *v7;
      v24 = v7[1];
      v26 = v23[2];
      objc_msgSend(v6, "attributes");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "objectAtIndexedSubscript:", v22);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setFormat:", v25);

      objc_msgSend(v6, "attributes");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "objectAtIndexedSubscript:", v22);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "setOffset:", v24);

      objc_msgSend(v6, "attributes");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "objectAtIndexedSubscript:", v22);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "setBufferIndex:", v26);

      ++v22;
      v7 = v23 + 3;
    }
    while (v20 != v22);
    v7 = v23 + 3;
  }
  objc_msgSend(v4, "setVertexDescriptor:", v6);

  v33 = objc_opt_respondsToSelector();
  v34 = *v7;
  if ((v33 & 1) != 0)
    objc_msgSend(v4, "setRasterSampleCount:", v34);
  else
    objc_msgSend(v4, "setSampleCount:", v34);
  objc_msgSend(v4, "setSampleMask:", v7[1]);
  LODWORD(v35) = *((_DWORD *)v7 + 4);
  objc_msgSend(v4, "setSampleCoverage:", v35);
  objc_msgSend(v4, "setAlphaToCoverageEnabled:", *((_DWORD *)v7 + 6) != 0);
  objc_msgSend(v4, "setAlphaToOneEnabled:", *((_DWORD *)v7 + 8) != 0);
  objc_msgSend(v4, "setRasterizationEnabled:", *((_DWORD *)v7 + 10) != 0);
  objc_msgSend(v4, "setDepthAttachmentPixelFormat:", v7[6]);
  objc_msgSend(v4, "setStencilAttachmentPixelFormat:", v7[7]);
  v36 = *((unsigned int *)v7 + 16);
  v37 = (uint64_t)(v7 + 9);
  if ((_DWORD)v36)
  {
    for (j = 0; j != v36; ++j)
    {
      v39 = (void *)objc_opt_new();
      objc_msgSend(v39, "setBlendingEnabled:", *(_DWORD *)v37 != 0);
      objc_msgSend(v39, "setSourceRGBBlendFactor:", *(_QWORD *)(v37 + 8));
      objc_msgSend(v39, "setDestinationRGBBlendFactor:", *(_QWORD *)(v37 + 16));
      objc_msgSend(v39, "setRgbBlendOperation:", *(_QWORD *)(v37 + 24));
      objc_msgSend(v39, "setSourceAlphaBlendFactor:", *(_QWORD *)(v37 + 32));
      objc_msgSend(v39, "setDestinationAlphaBlendFactor:", *(_QWORD *)(v37 + 40));
      objc_msgSend(v39, "setAlphaBlendOperation:", *(_QWORD *)(v37 + 48));
      objc_msgSend(v39, "setWriteMask:", *(_QWORD *)(v37 + 56));
      objc_msgSend(v39, "setPixelFormat:", *(_QWORD *)(v37 + 64));
      objc_msgSend(v4, "colorAttachments");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "setObject:atIndexedSubscript:", v39, j);

      v37 += 72;
    }
  }
  v41 = strlen((const char *)v37);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v37);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setLabel:", v42);

  if (v62 >= 7)
  {
    v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + v37 + 8;
    v44 = *(_QWORD *)v43;
    if ((objc_opt_respondsToSelector() & (v44 != -1)) == 1)
      objc_msgSend(v4, "setInputPrimitiveTopology:", v44);
    if (v62 >= 9)
    {
      objc_msgSend(v4, "setTessellationPartitionMode:", *(_QWORD *)(v43 + 8));
      objc_msgSend(v4, "setMaxTessellationFactor:", *(_QWORD *)(v43 + 16));
      objc_msgSend(v4, "setTessellationFactorScaleEnabled:", *(_DWORD *)(v43 + 24) != 0);
      objc_msgSend(v4, "setTessellationFactorFormat:", *(_QWORD *)(v43 + 32));
      objc_msgSend(v4, "setTessellationControlPointIndexType:", *(_QWORD *)(v43 + 40));
      objc_msgSend(v4, "setTessellationFactorStepFunction:", *(_QWORD *)(v43 + 48));
      objc_msgSend(v4, "setTessellationOutputWindingOrder:", *(_QWORD *)(v43 + 56));
      if (v62 >= 0x12)
      {
        if (GPUTools::MTL::_captureVersion >= 0x1A)
        {
          v45 = v43 + 72;
          v46 = *(_DWORD *)(v43 + 64);
        }
        else
        {
          v45 = v43 + 64;
          v46 = 31;
        }
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v47 = (void *)objc_opt_new();
          if (v46)
          {
            for (k = 0; k != v46; ++k)
            {
              v49 = *(_QWORD *)v45;
              v45 += 8;
              objc_msgSend(v47, "setMutability:", v49);
              objc_msgSend(v4, "vertexBuffers");
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v50, "setObject:atIndexedSubscript:", v47, k);

            }
          }

        }
        else if (v46)
        {
          v45 += 8 * (v46 - 1) + 8;
        }
        if (GPUTools::MTL::_captureVersion >= 0x1A)
        {
          v52 = *(_DWORD *)v45;
          v45 += 8;
          v51 = v52;
        }
        else
        {
          v51 = 31;
        }
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v53 = (void *)objc_opt_new();
          if (v51)
          {
            for (m = 0; m != v51; ++m)
            {
              v55 = *(_QWORD *)v45;
              v45 += 8;
              objc_msgSend(v53, "setMutability:", v55);
              objc_msgSend(v4, "fragmentBuffers");
              v56 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v56, "setObject:atIndexedSubscript:", v53, m);

            }
          }

        }
        else if (v51)
        {
          v45 += 8 * (v51 - 1) + 8;
        }
        if (v62 >= 0x17)
        {
          v57 = *(_DWORD *)v45;
          if ((objc_opt_respondsToSelector() & 1) != 0)
            objc_msgSend(v4, "setSupportIndirectCommandBuffers:", v57 != 0);
          if (v62 >= 0x20)
          {
            v58 = *(_QWORD *)(v45 + 16);
            if (v58 != -1)
            {
              v59 = *(_QWORD *)(v45 + 8);
              if ((objc_opt_respondsToSelector() & 1) != 0)
                objc_msgSend(v4, "setVertexAmplificationMode:", v59);
              if ((objc_opt_respondsToSelector() & 1) != 0)
                objc_msgSend(v4, "setMaxVertexAmplificationCount:", v58);
            }
            if (v62 >= 0x26)
            {
              v63 = *(_QWORD *)(v45 + 24);
              if ((objc_opt_respondsToSelector() & 1) != 0)
              {
                v64 = &v63;
                objc_msgSend(v4, "setPipelineLibrary:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v61, &v63, (uint64_t)&std::piecewise_construct, &v64)[3]);
              }
              if (v62 >= 0x27 && (objc_opt_respondsToSelector() & 1) != 0)
              {
                objc_msgSend(v4, "setLogicOperation:", *(_QWORD *)(v45 + 32));
                objc_msgSend(v4, "setAlphaTestFunction:", *(_QWORD *)(v45 + 40));
                objc_msgSend(v4, "setVertexDepthCompareClampMask:", *(unsigned int *)(v45 + 48));
                objc_msgSend(v4, "setFragmentDepthCompareClampMask:", *(unsigned int *)(v45 + 56));
                objc_msgSend(v4, "setLogicOperationEnabled:", *(_QWORD *)(v45 + 64) != 0);
                objc_msgSend(v4, "setOpenGLModeEnabled:", *(_QWORD *)(v45 + 72) != 0);
                objc_msgSend(v4, "setPointCoordLowerLeft:", *(_QWORD *)(v45 + 80) != 0);
                objc_msgSend(v4, "setPointSizeOutputVS:", *(_QWORD *)(v45 + 88) != 0);
                objc_msgSend(v4, "setTwoSideEnabled:", *(_QWORD *)(v45 + 96) != 0);
                objc_msgSend(v4, "setAlphaTestEnabled:", *(_QWORD *)(v45 + 104) != 0);
                objc_msgSend(v4, "setPointSmoothEnabled:", *(_QWORD *)(v45 + 112) != 0);
                objc_msgSend(v4, "setClipDistanceEnableMask:", *(_QWORD *)(v45 + 120) != 0);
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

void sub_23C758610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLTileRenderPipelineDescriptor(const char *a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  unsigned int v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v26;
  unint64_t *v27;

  v4 = (void *)objc_opt_new();
  v6 = *(_DWORD *)a1;
  a1 += 8;
  v5 = v6;
  v7 = strlen(a1);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setLabel:", v8);
  v9 = (unint64_t)&a1[(v7 & 0xFFFFFFFFFFFFFFF8) + 8];

  v26 = *(_QWORD *)v9;
  v27 = &v26;
  objc_msgSend(v4, "setTileFunction:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v26, (uint64_t)&std::piecewise_construct, &v27)[3]);
  v10 = objc_opt_respondsToSelector();
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 1) != 0)
    objc_msgSend(v4, "setRasterSampleCount:", v11);
  else
    objc_msgSend(v4, "setSampleCount:", v11);
  v14 = *(_DWORD *)(v9 + 16);
  v12 = (_QWORD *)(v9 + 16);
  v13 = v14;
  v15 = v12 + 1;
  if (v14)
  {
    v16 = 0;
    do
    {
      v17 = (void *)objc_opt_new();
      objc_msgSend(v17, "setPixelFormat:", *v15);
      objc_msgSend(v4, "colorAttachments");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setObject:atIndexedSubscript:", v17, v16);

      ++v16;
      ++v15;
    }
    while (v13 != v16);
    v12 = v15 - 1;
  }
  objc_msgSend(v4, "setThreadgroupSizeMatchesTileSize:", *(_DWORD *)v15 != 0);
  if (v5 >= 0x12)
  {
    if (GPUTools::MTL::_captureVersion >= 0x1A)
    {
      v19 = v12 + 3;
      v20 = *((_DWORD *)v12 + 4);
    }
    else
    {
      v19 = v12 + 2;
      v20 = 31;
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v21 = (void *)objc_opt_new();
      if (v20)
      {
        v22 = 0;
        v23 = v20;
        do
        {
          objc_msgSend(v21, "setMutability:", v19[v22]);
          objc_msgSend(v4, "tileBuffers");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "setObject:atIndexedSubscript:", v21, v22);

          ++v22;
        }
        while (v23 != v22);
      }

    }
  }
  return v4;
}

void sub_23C758900(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLComputePipelineDescriptor(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  const void **v8;
  void *v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  unint64_t *v27;

  v4 = (void *)objc_opt_new();
  v5 = *(_DWORD *)a1;
  v25 = *(_QWORD *)(a1 + 8);
  v27 = (unint64_t *)&v25;
  objc_msgSend(v4, "setComputeFunction:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, &v27)[3]);
  objc_msgSend(v4, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", *(_DWORD *)(a1 + 16) != 0);
  a1 += 24;
  v6 = (uint64_t *)((strlen((const char *)a1) & 0xFFFFFFFFFFFFFFF8) + a1 + 8);
  v26 = v6;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setLabel:", v7);

  if (v5 < 0xB)
    return v4;
  if (*v6 != -1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      GPUTools::MTL::MakeMTLStageInputOutputDescriptor(&v26, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setStageInputDescriptor:", v9);

      goto LABEL_12;
    }
    if (GPUTools::MTL::_captureVersion > 0x19)
    {
      v13 = &v6[3 * *(unsigned int *)v6];
      v11 = v13 + 2;
      v12 = *((_DWORD *)v13 + 2);
      if (!v12)
      {
LABEL_10:
        v10 = v11 + 2;
        goto LABEL_11;
      }
    }
    else
    {
      v11 = v6 + 93;
      v12 = 31;
    }
    v11 += 3 * v12;
    goto LABEL_10;
  }
  v10 = v6 + 1;
LABEL_11:
  v26 = v10;
LABEL_12:
  if (v5 >= 0x12)
  {
    if (GPUTools::MTL::_captureVersion >= 0x1A)
      v14 = *(_DWORD *)v26++;
    else
      v14 = 31;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v15 = (void *)objc_opt_new();
      v16 = v26;
      if (v14)
      {
        v17 = 0;
        v18 = 0;
        v19 = v14;
        do
        {
          objc_msgSend(v15, "setMutability:", v16[v18]);
          objc_msgSend(v4, "buffers");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:atIndexedSubscript:", v15, v18);

          ++v18;
          v17 -= 8;
        }
        while (v19 != v18);
        v16 = (uint64_t *)((char *)v16 - v17);
      }

    }
    else
    {
      v21 = 8 * (v14 - 1) + 8;
      if (!v14)
        v21 = 0;
      v16 = (uint64_t *)((char *)v26 + v21);
    }
    if (v5 >= 0x1B)
    {
      v22 = *(_DWORD *)v16;
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v4, "setSupportIndirectCommandBuffers:", v22 != 0);
      if (v5 >= 0x25)
      {
        v23 = v16[1];
        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v4, "setMaxTotalThreadsPerThreadgroup:", v23);
        if (v5 >= 0x26)
        {
          v25 = v16[2];
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            v27 = (unint64_t *)&v25;
            objc_msgSend(v4, "setPipelineLibrary:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a2, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, &v27)[3]);
          }
        }
      }
    }
  }
  return v4;
}

void sub_23C758C58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLIOCommandQueueDescriptor()
{
  return (id)objc_opt_new();
}

id GPUTools::MTL::MakeMTLCommandQueueDescriptor(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)a1;
  v3 = (void *)objc_opt_new();
  objc_msgSend(v3, "setMaxCommandBufferCount:", *(_QWORD *)(a1 + 8));
  if (v2 >= 0x1E)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v3, "setQosLevel:", v4);
      objc_msgSend(v3, "setCommitSynchronously:", v5 != 0);
    }
    if (v2 >= 0x27 && (objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v3, "setIsOpenGLQueue:", *(_QWORD *)(a1 + 32) != 0);
  }
  return v3;
}

void sub_23C758D78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DictionarySetInt(GPUTools::MTL *this, __CFDictionary *a2, const void *a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  const void *valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionarySetValue(this, a2, v5);
    CFRelease(v6);
  }
}

__IOSurface *GPUTools::MTL::MakeIOSurface(uint64_t a1, _QWORD *a2)
{
  void *v3;
  CFIndex v4;
  char *v5;
  uint64_t v6;
  GPUTools::MTL **v7;
  CFIndex v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  GPUTools::MTL *Mutable;
  _QWORD *v14;
  __IOSurface *v15;
  GPUTools::MTL *v16;
  CFIndex v17;
  const void **v18;
  CFArrayRef v19;
  const void *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  CFIndex numValues;
  void **values;
  __CFDictionary *v33;
  __CFDictionary *v34;
  __CFDictionary *v35;
  __CFDictionary *v36;
  __CFDictionary *v37;
  __CFDictionary *v38;
  __CFDictionary *v39;
  __CFDictionary *v40;
  const __CFAllocator *v41;
  const void *v42;
  const void *v43;
  __IOSurface *v44;
  uint64_t v45[2];

  v3 = *(void **)(a1 + 16);
  v45[0] = *(_QWORD *)(a1 + 8);
  v22 = v3;
  v23 = *(void **)(a1 + 24);
  v24 = *(void **)(a1 + 32);
  v25 = *(void **)(a1 + 40);
  v26 = *(void **)(a1 + 48);
  v27 = *(void **)(a1 + 56);
  v28 = *(void **)(a1 + 64);
  v29 = (void *)*(unsigned int *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  values = (void **)malloc_type_malloc(8 * v4, 0x80040B8603338uLL);
  numValues = v4;
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 88;
    v41 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v40 = (__CFDictionary *)*MEMORY[0x24BDD8FA8];
    v39 = (__CFDictionary *)*MEMORY[0x24BDD8F70];
    v38 = (__CFDictionary *)*MEMORY[0x24BDD8F10];
    v37 = (__CFDictionary *)*MEMORY[0x24BDD8F18];
    v36 = (__CFDictionary *)*MEMORY[0x24BDD8F58];
    v35 = (__CFDictionary *)*MEMORY[0x24BDD8F50];
    v34 = (__CFDictionary *)*MEMORY[0x24BDD8F90];
    v33 = (__CFDictionary *)*MEMORY[0x24BDD8F98];
    v7 = (GPUTools::MTL **)values;
    v8 = v4;
    do
    {
      v9 = *(const void **)v6;
      v10 = *(const void **)(v6 + 8);
      v11 = *(const void **)(v6 + 16);
      v12 = *(const void **)(v6 + 24);
      v42 = *(const void **)(v6 + 32);
      v43 = *(const void **)(v6 + 40);
      Mutable = CFDictionaryCreateMutable(v41, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      GPUTools::MTL::DictionarySetInt(Mutable, v40, v9);
      GPUTools::MTL::DictionarySetInt(Mutable, v39, v10);
      GPUTools::MTL::DictionarySetInt(Mutable, v38, v11);
      GPUTools::MTL::DictionarySetInt(Mutable, v37, v12);
      GPUTools::MTL::DictionarySetInt(Mutable, v36, v42);
      GPUTools::MTL::DictionarySetInt(Mutable, v35, v43);
      GPUTools::MTL::DictionarySetInt(Mutable, v34, v5);
      GPUTools::MTL::DictionarySetInt(Mutable, v33, (const void *)((_QWORD)v12 * (_QWORD)v10));
      *v7++ = Mutable;
      v6 += 48;
      v5 += (_QWORD)v12 * (_QWORD)v10;
      --v8;
    }
    while (v8);
  }
  v14 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a2, (unint64_t *)v45);
  if (v14)
  {
    v15 = (__IOSurface *)v14[3];
  }
  else
  {
    v16 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x24BDD8E18], v22);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x24BDD8FD0], v23);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x24BDD8EB0], v24);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x24BDD8E30], v25);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x24BDD8E38], v26);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x24BDD8EA8], v27);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x24BDD8EA0], v28);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x24BDD8EF8], v29);
    v17 = v4;
    if (v4)
    {
      v18 = (const void **)values;
      v19 = CFArrayCreate(0, (const void **)values, numValues, MEMORY[0x24BDBD690]);
      CFDictionarySetValue(v16, (const void *)*MEMORY[0x24BDD8F88], v19);
      CFRelease(v19);
      do
      {
        v20 = *v18++;
        CFRelease(v20);
        --v17;
      }
      while (v17);
    }
    v15 = IOSurfaceCreate(v16);
    v44 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,objc_object * {__strong}>((uint64_t)a2, (unint64_t *)v45, v45, (uint64_t *)&v44);

  }
  free(values);
  return v15;
}

void sub_23C759198(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t GPUTools::MTL::MakeNSRange(GPUTools::MTL *this, const void *a2)
{
  return *(_QWORD *)this;
}

__n128 GPUTools::MTL::MakeMTLSize@<Q0>(GPUTools::MTL *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)this;
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  return result;
}

__n128 GPUTools::MTL::MakeMTLRegion@<Q0>(GPUTools::MTL *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __n128 result;

  v3 = *((_OWORD *)this + 1);
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_OWORD *)(a2 + 16) = v3;
  result = *((__n128 *)this + 2);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 GPUTools::MTL::MakeMTLScissorRect@<Q0>(GPUTools::MTL *this@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)this;
  v4 = *((_OWORD *)this + 1);
  *a2 = *(_OWORD *)this;
  a2[1] = v4;
  return result;
}

uint64_t GPUTools::MTL::MakeMTLTextureSwizzleChannels(GPUTools::MTL *this, const void *a2)
{
  return *(unsigned int *)this;
}

uint64_t GPUTools::MTL::MakeSizeAndAlign(GPUTools::MTL *this, const void *a2)
{
  return *(_QWORD *)this;
}

id GPUTools::MTL::MakeMTLHeapDescriptor(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void *)objc_opt_new();
  v3 = *(_DWORD *)a1;
  objc_msgSend(v2, "setSize:", *(_QWORD *)(a1 + 8));
  objc_msgSend(v2, "setCpuCacheMode:", *(_QWORD *)(a1 + 16));
  objc_msgSend(v2, "setStorageMode:", *(_QWORD *)(a1 + 24));
  if (v3 >= 0x1D)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v2, "setType:", v4);
    if (v3 >= 0x1F)
    {
      v6 = *(_QWORD *)(a1 + 48);
      v5 = *(_QWORD *)(a1 + 56);
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v2, "setHazardTrackingMode:", v6);
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(v2, "setResourceOptions:", v5);
    }
  }
  return v2;
}

void sub_23C7592D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLIndirectCommandBufferDescriptor(GPUTools::MTL *this, _QWORD *a2, unint64_t *a3)
{
  void *v5;
  unsigned int v6;

  v5 = (void *)objc_opt_new();
  v6 = *(_DWORD *)this;
  objc_msgSend(v5, "setCommandTypes:", *((_QWORD *)this + 1));
  objc_msgSend(v5, "setInheritPipelineState:", *((_DWORD *)this + 4) != 0);
  objc_msgSend(v5, "setInheritBuffers:", *((_DWORD *)this + 6) != 0);
  objc_msgSend(v5, "setMaxVertexBufferBindCount:", *((_QWORD *)this + 4));
  objc_msgSend(v5, "setMaxFragmentBufferBindCount:", *((_QWORD *)this + 5));
  *a2 = 0;
  if (v6 >= 0x1B)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v5, "setMaxKernelBufferBindCount:", *((_QWORD *)this + 6));
    *a2 = *((_QWORD *)this + 7);
  }
  return v5;
}

void sub_23C7593A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLRasterizationRateMapDescriptor(GPUTools::MTL *this, const void *a2)
{
  char *v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t i;
  int v17;
  uint64_t j;
  int v19;
  void *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  id v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 8;
  v3 = strlen((const char *)this + 8);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v2);
  v26 = (id)objc_claimAutoreleasedReturnValue();
  v23 = (uint64_t)&v23;
  v4 = &v2[(v3 & 0xFFFFFFFFFFFFFFF8) + 8];
  v25 = *(_OWORD *)v4;
  v5 = *(_QWORD *)&v2[(v3 & 0xFFFFFFFFFFFFFFF8) + 24];
  v6 = *(_QWORD *)&v2[(v3 & 0xFFFFFFFFFFFFFFF8) + 32];
  v24 = v5;
  v7 = 8 * v6;
  MEMORY[0x24BDAC7A8](v26);
  v8 = (char *)&v23 - ((8 * v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v8, 8 * v6);
  if (v6)
  {
    v9 = 0;
    v10 = (int *)(v4 + 32);
    do
    {
      v11 = *(_QWORD *)v10;
      v12 = *((_QWORD *)v10 + 1);
      v13 = *((_QWORD *)v10 + 2);
      v14 = objc_alloc(MEMORY[0x24BDDD668]);
      v29[0] = v11;
      v29[1] = v12;
      v29[2] = v13;
      v15 = (void *)objc_msgSend(v14, "initWithSampleCount:", v29);
      v10 += 6;
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v17 = *v10;
          v10 += 2;
          *(_DWORD *)(objc_msgSend(v15, "horizontalSampleStorage") + 4 * i) = v17;
        }
      }
      if (v12)
      {
        for (j = 0; j != v12; ++j)
        {
          v19 = *v10;
          v10 += 2;
          *(_DWORD *)(objc_msgSend(v15, "verticalSampleStorage") + 4 * j) = v19;
        }
      }
      v20 = *(void **)&v8[8 * v9];
      *(_QWORD *)&v8[8 * v9] = v15;

      ++v9;
    }
    while (v9 != v6);
  }
  v27 = v25;
  v28 = v24;
  objc_msgSend(MEMORY[0x24BDDD670], "rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:", &v27, v6, (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setLabel:", v26);
  if (v6)
  {
    do
    {

      v7 -= 8;
    }
    while (v7);
  }

  return v21;
}

void sub_23C7595B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if (v2)
  {
    do
    {

      v1 -= 8;
    }
    while (v1);
  }

  _Unwind_Resume(a1);
}

_QWORD *GPUTools::MTL::MakeMTLImageFilterFunctionInfo(GPUTools::MTL *this, const void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  BOOL *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v3 = *((_QWORD *)this + 1);
  v4 = malloc_type_malloc(24 * v3, 0x1060040D275764BuLL);
  if (v3)
  {
    v5 = 0;
    v6 = (char *)this + 16;
    do
    {
      v7 = (BOOL *)&v4[3 * v5];
      *v7 = *(_DWORD *)v6 != 0;
      v8 = *((_QWORD *)v6 + 1);
      v6 += 16;
      *((_QWORD *)v7 + 1) = v8;
      v9 = (uint64_t *)(v7 + 8);
      if (v8)
      {
        v10 = (char *)malloc_type_malloc(24 * v8, 0x1000040504FFAC1uLL);
        v11 = *v9;
        if (*v9)
        {
          v12 = 0;
          do
          {
            v13 = &v10[v12];
            *(_OWORD *)v13 = *(_OWORD *)&v6[v12];
            *((_QWORD *)v13 + 2) = *(_QWORD *)&v6[v12 + 16];
            v12 += 24;
            --v11;
          }
          while (v11);
          v6 += v12;
        }
      }
      else
      {
        v10 = 0;
      }
      v4[3 * v5++ + 2] = v10;
    }
    while (v5 != v3);
  }
  return v4;
}

id GPUTools::MTL::MakeMTLArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", v4);
  if (v4)
  {
    v6 = (unint64_t *)(a1 + 16);
    do
    {
      v7 = *v6++;
      v10 = v7;
      v11 = &v10;
      v8 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v10, (uint64_t)&std::piecewise_construct, &v11)[3];
      objc_msgSend(v5, "addObject:", v8);

      --v4;
    }
    while (v4);
  }
  return v5;
}

void sub_23C7597BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLArray(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *i;
  id v7;
  _QWORD *v9;

  v4 = a2;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", a2);
  for (i = (void *)objc_claimAutoreleasedReturnValue(); v4; --v4)
  {
    v9 = a1;
    v7 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a3, a1, (uint64_t)&std::piecewise_construct, &v9)[3];
    objc_msgSend(i, "addObject:", v7);
    ++a1;

  }
  return i;
}

void sub_23C759880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLCounterSampleBufferDescriptor(GPUTools::MTL *this, void *a2, objc_object *a3)
{
  void *v4;
  void *v5;
  id v6;
  char *v7;
  size_t v8;
  void *v9;
  size_t v10;
  const char *v11;
  int v12;
  const char *v13;
  id v14;
  size_t v15;
  void *v16;
  const char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  int v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5 = (void *)objc_opt_new();
  v6 = objc_alloc(MEMORY[0x24BDD17C8]);
  v7 = (char *)this + 8;
  v8 = strlen((const char *)this + 8);
  v9 = (void *)objc_msgSend(v6, "initWithUTF8String:", (char *)this + 8);
  v10 = (size_t)&v7[(v8 & 0xFFFFFFFFFFFFFFF8)
                  + 8
                  + (strlen(&v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 8]) & 0xFFFFFFFFFFFFFFF8)];
  v11 = (const char *)(v10 + 24);
  v12 = *(_DWORD *)(v10 + 16);
  if (v12 >= 1)
  {
    do
    {
      v13 = &v11[(strlen(v11) & 0xFFFFFFFFFFFFFFF8) + 8];
      v11 = &v13[(strlen(v13) & 0xFFFFFFFFFFFFFFF8) + 8];
      --v12;
    }
    while (v12);
  }
  v14 = objc_alloc(MEMORY[0x24BDD17C8]);
  v15 = strlen(v11);
  v16 = (void *)objc_msgSend(v14, "initWithUTF8String:", v11);
  objc_msgSend(v5, "setLabel:", v16);
  v17 = &v11[(v15 & 0xFFFFFFFFFFFFFFF8) + 8];

  objc_msgSend(v5, "setStorageMode:", *(_QWORD *)v17);
  objc_msgSend(v5, "setSampleCount:", *((_QWORD *)v17 + 1));
  objc_msgSend(v4, "counterSets");
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v18 = (id)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v27;
    while (2)
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v27 != v20)
          objc_enumerationMutation(v18);
        v22 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
        objc_msgSend(v22, "name");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "isEqualToString:", v9);

        if (v24)
        {
          objc_msgSend(v5, "setCounterSet:", v22);
          goto LABEL_13;
        }
      }
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v19)
        continue;
      break;
    }
  }
LABEL_13:

  return v5;
}

void sub_23C759AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

double GPUTools::MTL::MakeViewportArray(GPUTools::MTL *this, char *a2)
{
  char *v2;
  char *v4;
  double result;
  char *v6;
  char *v7;

  v2 = a2;
  v4 = (char *)malloc_type_malloc(48 * (_QWORD)a2, 0x1000040EED21634uLL);
  if (v2)
  {
    v6 = (char *)this + 24;
    v7 = v4 + 24;
    do
    {
      *((_QWORD *)v7 - 3) = *((_QWORD *)v6 - 2);
      *((_QWORD *)v7 - 2) = *((_QWORD *)v6 - 1);
      *((_QWORD *)v7 - 1) = *(_QWORD *)v6;
      *(_QWORD *)v7 = *((_QWORD *)v6 + 1);
      *((_QWORD *)v7 + 1) = *((_QWORD *)v6 + 2);
      result = *((double *)v6 + 3);
      *((double *)v7 + 2) = result;
      v6 += 48;
      v7 += 48;
      --v2;
    }
    while (v2);
  }
  return result;
}

double GPUTools::MTL::MakeScissorRectArray(GPUTools::MTL *this, char *a2)
{
  char *v2;
  char *v4;
  double result;
  _OWORD *v6;
  __int128 *v7;
  __int128 v8;

  v2 = a2;
  v4 = (char *)malloc_type_malloc(32 * (_QWORD)a2, 0x1000040E0EAB150uLL);
  if (v2)
  {
    v6 = v4 + 16;
    v7 = (__int128 *)((char *)this + 24);
    do
    {
      *(v6 - 1) = *(v7 - 1);
      v8 = *v7;
      v7 += 2;
      result = *(double *)&v8;
      *v6 = v8;
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

__n128 GPUTools::MTL::MakeRegionArray(__n128 *this, char *a2)
{
  char *v2;
  __n128 *v4;
  __n128 result;
  __n128 *v6;
  __n128 v7;

  v2 = a2;
  v4 = (__n128 *)malloc_type_malloc(48 * (_QWORD)a2, 0x1000040EED21634uLL);
  if (v2)
  {
    v6 = v4 + 2;
    do
    {
      v7 = this[1];
      v6[-2] = *this;
      v6[-1] = v7;
      result = this[2];
      *v6 = result;
      v6 += 3;
      this += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

dispatch_data_t GPUTools::MTL::MakeDispatchDataT(GPUTools::MTL *this, size_t a2)
{
  return dispatch_data_create(this, a2, 0, 0);
}

id GPUTools::MTL::MakePipelineLibraryDirectory(GPUTools::MTL *this, const void *a2)
{
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void *v22;
  void *v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  id v30;
  char v31;
  _BYTE v32[135];
  char v33;
  _BYTE v34[64];
  unsigned __int8 md[32];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  CC_SHA256(this, (CC_LONG)a2, md);
  v4 = 0;
  v5 = v34;
  do
  {
    v6 = md[v4];
    *(v5 - 1) = a0123456789abcd[v6 >> 4];
    *v5 = a0123456789abcd[v6 & 0xF];
    v5 += 2;
    ++v4;
  }
  while (v4 != 32);
  v34[63] = 0;
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  NSTemporaryDirectory();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", &v33);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringByAppendingPathComponent:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v31 = 0;
  if ((objc_msgSend(v7, "fileExistsAtPath:isDirectory:", v10, &v31) & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    v30 = 0;
    objc_msgSend(v7, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v10, 0, 0, &v30);
    v11 = v30;
  }
  v12 = (void *)MEMORY[0x24BDD1620];
  v13 = objc_opt_class();
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", this, a2, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = v11;
  objc_msgSend(v12, "unarchivedObjectOfClass:fromData:error:", v13, v14, &v29);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v29;

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v17 = v15;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v25, v32, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v26 != v19)
          objc_enumerationMutation(v17);
        v21 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend(v17, "objectForKeyedSubscript:", v21, (_QWORD)v25);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "stringByAppendingPathComponent:", v21);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "writeToFile:atomically:", v23, 0);

      }
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v25, v32, 16);
    }
    while (v18);
  }

  return v10;
}

void sub_23C759F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void GPUTools::MTL::MakeMTLRenderPassAttachmentDescriptor(_QWORD **a1, void *a2, uint64_t a3, unsigned int a4)
{
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;

  v7 = a2;
  v8 = *(*a1)++;
  v20 = v8;
  v21 = &v20;
  objc_msgSend(v7, "setTexture:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a3, &v20, (uint64_t)&std::piecewise_construct, &v21)[3]);
  v9 = *(*a1)++;
  objc_msgSend(v7, "setLevel:", v9);
  v10 = *(*a1)++;
  objc_msgSend(v7, "setSlice:", v10);
  v11 = *(*a1)++;
  objc_msgSend(v7, "setDepthPlane:", v11);
  v12 = *(*a1)++;
  v20 = v12;
  v21 = &v20;
  objc_msgSend(v7, "setResolveTexture:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a3, &v20, (uint64_t)&std::piecewise_construct, &v21)[3]);
  v13 = *(*a1)++;
  objc_msgSend(v7, "setResolveLevel:", v13);
  v14 = *(*a1)++;
  objc_msgSend(v7, "setResolveSlice:", v14);
  v15 = *(*a1)++;
  objc_msgSend(v7, "setResolveDepthPlane:", v15);
  v16 = *(*a1)++;
  objc_msgSend(v7, "setLoadAction:", v16);
  v17 = *(*a1)++;
  objc_msgSend(v7, "setStoreAction:", v17);
  if (a4 >= 0x13)
  {
    v18 = objc_opt_respondsToSelector();
    v19 = (*a1)++;
    if ((v18 & 1) != 0)
      objc_msgSend(v7, "setStoreActionOptions:", *v19);
  }

}

void sub_23C75A160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<MTLSamplePosition>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23C75A1D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<objc_object  {objcproto11MTLResource}* {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,objc_object * {__strong}>(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  v15 = *a3;
  v16 = *a4;
  *a4 = 0;
  *i = 0;
  i[1] = v8;
  i[2] = v15;
  i[3] = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *i = *v14;
  *v14 = i;
  *(_QWORD *)(v23 + 8 * v4) = v14;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C75A510(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void sub_23C75A608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C75A800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23C75A8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C75A9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C75AA3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C75ABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  _Block_object_dispose((const void *)(v17 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_23C75AE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C75B1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23C75B62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C75B7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_23C75BBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_23C75C010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_23C75C224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C75C2A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C75C488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23C75C618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C75C6C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C75C8BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C75CCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_23C75CE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::vector<DYMTLImageBlockMember>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 40)
  {

    v5 = *(void **)(i - 40);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::vector<DYMTLImageBlockMember>::__push_back_slow_path<DYMTLImageBlockMember const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DYMTLImageBlockMember>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[40 * v9];
  *(_QWORD *)v11 = *(id *)a2;
  *((_QWORD *)v11 + 1) = *(id *)(a2 + 8);
  v12 = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  *((_OWORD *)v11 + 1) = v12;
  v15[2] = v11 + 40;
  std::vector<DYMTLImageBlockMember>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<DYMTLImageBlockMember>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_23C75DD14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DYMTLImageBlockMember>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DYMTLImageBlockMember>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>,std::reverse_iterator<DYMTLImageBlockMember*>,std::reverse_iterator<DYMTLImageBlockMember*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DYMTLImageBlockMember>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>,std::reverse_iterator<DYMTLImageBlockMember*>,std::reverse_iterator<DYMTLImageBlockMember*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_OWORD *)(v8 - 40) = v9;
      v8 -= 40;
      v10 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v8 + 16) = v10;
      v7 -= 40;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<std::reverse_iterator<DYMTLImageBlockMember*>>,std::reverse_iterator<std::reverse_iterator<DYMTLImageBlockMember*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<std::reverse_iterator<DYMTLImageBlockMember*>>,std::reverse_iterator<std::reverse_iterator<DYMTLImageBlockMember*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *i;

  for (i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {

    i = (id *)(*(_QWORD *)(a2 + 32) + 40);
  }
}

uint64_t std::__split_buffer<DYMTLImageBlockMember>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<DYMTLImageBlockMember>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<DYMTLImageBlockMember>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;

  }
}

id ShaderDebuggerMDSerializerLLVM3XXXBridge_Serialize(void *a1, void *a2, void *a3, void **a4, _QWORD *a5)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *@<X8>);
  char **v11;
  const char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char **v18;
  const char *v19;
  void (*v20)(_BYTE *@<X8>);
  __int128 *v21;
  uint64_t v22;
  id v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  void *v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int64x2_t v34;
  char *v35;
  void *v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  llvm::MemoryBuffer *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  void *v47;
  void *v48;
  id v49;
  llvm::MemoryBuffer *v50;
  llvm::MemoryBuffer *v51;
  void *v52;
  void **v54;
  id v55;
  id v57;
  void *v58;
  void *__p[2];
  char v60;
  llvm::MemoryBuffer *v61;
  llvm::MemoryBuffer *v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unsigned int *v68;
  int64x2_t v69;
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  _OWORD v75[2];
  int v76;
  int64x2_t v77;
  char *v78;
  _BYTE v79[15];
  _BYTE v80[128];
  __int128 v81;
  void *v82[2];
  __int128 v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  char *v90[2];
  _QWORD v91[24];

  v54 = a4;
  v91[21] = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v57 = a2;
  v55 = a3;
  v84 = 0;
  *(_OWORD *)v82 = 0u;
  v83 = 0u;
  v81 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0;
  v90[0] = (char *)v91;
  v90[1] = (char *)0x400000000;
  v58 = v7;
  MEMORY[0x242623A34](v79);
  v77 = 0uLL;
  v78 = 0;
  memset(v75, 0, sizeof(v75));
  v76 = 1065353216;
  v8 = objc_msgSend(v7, "count");
  if (v8)
  {
    v9 = 0;
    v10 = llvm::function_ref<llvm::Optional<std::string> ()(llvm::StringRef)>::callback_fn<llvm::$_0>;
    v11 = &v78;
    v12 = "";
    while (1)
    {
      objc_msgSend(v7, "objectAtIndexedSubscript:", v9, v54);
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v13, "bytes");
      objc_msgSend(v13, "length");
      llvm::MemoryBuffer::getMemBuffer();
      llvm::MemoryBuffer::getMemBufferRef(v61);
      llvm::parseIR();
      v14 = __p[0];
      if (__p[0])
      {
        v15 = v77.i64[1];
        v16 = (v77.i64[1] - v77.i64[0]) >> 3;
        v74 = v16;
        if (v77.i64[1] >= (unint64_t)v78)
        {
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
          v25 = (uint64_t)&v78[-v77.i64[0]] >> 2;
          if (v25 <= v16 + 1)
            v25 = v16 + 1;
          v26 = (unint64_t)&v78[-v77.i64[0]] >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v25;
          *((_QWORD *)&v70 + 1) = v11;
          v27 = v26
              ? (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v11, v26)
              : 0;
          v28 = __p[0];
          v29 = &v27[8 * v16];
          v30 = &v27[8 * v26];
          *(_QWORD *)&v70 = v30;
          __p[0] = 0;
          *(_QWORD *)v29 = v28;
          v17 = v29 + 8;
          v69.i64[1] = (uint64_t)(v29 + 8);
          v31 = (_QWORD *)v77.i64[1];
          v32 = (_QWORD *)v77.i64[0];
          if (v77.i64[1] == v77.i64[0])
          {
            v34 = vdupq_n_s64(v77.u64[1]);
          }
          else
          {
            do
            {
              v33 = *--v31;
              *v31 = 0;
              *((_QWORD *)v29 - 1) = v33;
              v29 -= 8;
            }
            while (v31 != v32);
            v34 = v77;
            v17 = (_QWORD *)v69.i64[1];
            v30 = (char *)v70;
          }
          v77.i64[0] = (uint64_t)v29;
          v77.i64[1] = (uint64_t)v17;
          v69 = v34;
          v35 = v78;
          v78 = v30;
          *(_QWORD *)&v70 = v35;
          v68 = (unsigned int *)v34.i64[0];
          std::__split_buffer<std::unique_ptr<llvm::Module>>::~__split_buffer((uint64_t)&v68);
        }
        else
        {
          __p[0] = 0;
          *(_QWORD *)v77.i64[1] = v14;
          v17 = (_QWORD *)(v15 + 8);
        }
        v77.i64[1] = (uint64_t)v17;
        objc_msgSend(v57, "objectAtIndexedSubscript:", v9);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDBCEF8], "null");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = v24 == v36;

        if (!v37)
        {
          v38 = objc_msgSend(objc_retainAutorelease(v24), "UTF8String");
          v68 = &v74;
          v39 = std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v75, &v74, (uint64_t)&std::piecewise_construct, &v68);
          MEMORY[0x242623CC8](v39 + 3, v38);
        }
      }
      else
      {
        v18 = v11;
        v19 = v12;
        v20 = v10;
        if ((SBYTE7(v86) & 0x80u) == 0)
          v21 = &v85;
        else
          v21 = (__int128 *)v85;
        if ((SBYTE7(v86) & 0x80u) == 0)
          v22 = BYTE7(v86);
        else
          v22 = *((_QWORD *)&v85 + 1);
        v23 = objc_alloc(MEMORY[0x24BDD17C8]);
        v24 = (void *)objc_msgSend(v23, "initWithBytes:length:encoding:", v21, v22, objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
        v10 = v20;
        v12 = v19;
        v11 = v18;
        if (a5)
        {
          GTShaderDebuggerMDSerializerError(1u, (NSString *)v24);
          *a5 = (id)objc_claimAutoreleasedReturnValue();
        }
      }

      v40 = __p[0];
      __p[0] = 0;
      if (v40)
      {
        v41 = MEMORY[0x242623A70]();
        MEMORY[0x242623D28](v41, 0x10B2C407FF26C1CLL);
      }
      v42 = v61;
      v61 = 0;
      if (v42)
        (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v42 + 8))(v42);

      if (!v14)
        break;
      ++v9;
      v7 = v58;
      if (v9 == v8)
        goto LABEL_37;
    }
    v52 = 0;
  }
  else
  {
LABEL_37:
    v69 = 0uLL;
    v68 = (unsigned int *)&v69;
    v70 = 0u;
    v71 = 0u;
    v72 = 1065353216;
    v73 = 0;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v43 = v55;
    v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v64, v80, 16);
    if (v44)
    {
      v45 = *(_QWORD *)v65;
      do
      {
        for (i = 0; i != v44; ++i)
        {
          if (*(_QWORD *)v65 != v45)
            objc_enumerationMutation(v43);
          v47 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * i);
          objc_msgSend(v43, "objectForKeyedSubscript:", v47, v54);
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          std::string::basic_string[abi:ne180100]<0>(&v61, (char *)objc_msgSend(objc_retainAutorelease(v47), "UTF8String"));
          v49 = objc_retainAutorelease(v48);
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v49, "UTF8String"));
          ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile((uint64_t)&v68, &v61, (uint64_t)__p);
          if (v60 < 0)
            operator delete(__p[0]);
          if (v63 < 0)
            operator delete(v61);

        }
        v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v64, v80, 16);
      }
      while (v44);
    }

    __p[0] = 0;
    ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules((uint64_t)&v68, v77.i64, v75, __p, &v61);
    v50 = v61;
    v51 = v62;
    if (v61 == v62)
    {
      if (a5)
      {
        GTShaderDebuggerMDSerializerError(2u, CFSTR("Metadata serialization error"));
        v52 = 0;
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v52 = 0;
      }
    }
    else
    {
      if (v54)
        *v54 = __p[0];
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v50, v51 - v50, v54);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
    }
    if (v61)
    {
      v62 = v61;
      operator delete(v61);
    }
    ShaderDebugger::Metadata::MDSerializer::~MDSerializer((ShaderDebugger::Metadata::MDSerializer *)&v68);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)v75);
  v68 = (unsigned int *)&v77;
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v79);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v90);
  if ((_QWORD)v88)
  {
    *((_QWORD *)&v88 + 1) = v88;
    operator delete((void *)v88);
  }
  if (SHIBYTE(v87) < 0)
    operator delete(*((void **)&v86 + 1));
  if (SBYTE7(v86) < 0)
    operator delete((void *)v85);
  if (SBYTE7(v83) < 0)
    operator delete(v82[0]);

  return v52;
}

void sub_23C75E66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  if (__p)
    operator delete(__p);
  ShaderDebugger::Metadata::MDSerializer::~MDSerializer((ShaderDebugger::Metadata::MDSerializer *)&a29);
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)&a43);
  a43 = (uint64_t)&a49;
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&a53);
  llvm::SMDiagnostic::~SMDiagnostic((llvm::SMDiagnostic *)&a71);

  _Unwind_Resume(a1);
}

id GTShaderDebuggerMDSerializerError(unsigned int a1, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  void *v8;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = v3;
  v5 = (void *)MEMORY[0x24BDD1540];
  if (v3)
    v6 = (const __CFString *)v3;
  else
    v6 = &stru_250D704F8;
  v10 = *MEMORY[0x24BDD0FC8];
  v11[0] = v6;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "errorWithDomain:code:userInfo:", CFSTR("GTShaderDebuggerMDSerializerErrorDomain"), a1, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_23C75E888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void llvm::SMDiagnostic::~SMDiagnostic(llvm::SMDiagnostic *this)
{
  void *v2;

  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector((char **)this + 16);
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

id ShaderDebuggerMDSerializerLLVM3XXXBridge_Serialize(void *a1, void *a2, void **a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  llvm::MemoryBuffer *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  void *v32;
  id v33;
  llvm::MemoryBuffer *v34;
  llvm::MemoryBuffer *v35;
  void *v36;
  llvm::MemoryBuffer *v37;
  id v40;
  void *__p[2];
  char v42;
  llvm::MemoryBuffer *v43;
  llvm::MemoryBuffer *v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int64x2_t *v50;
  int64x2_t v51;
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int64x2_t v60;
  char *v61;
  char v62[8];
  _BYTE v63[128];
  _BYTE v64[128];
  __int128 v65;
  void *v66[2];
  __int128 v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char *v74[2];
  _QWORD v75[24];

  v75[21] = *MEMORY[0x24BDAC8D0];
  v4 = a1;
  v40 = a2;
  v68 = 0;
  *(_OWORD *)v66 = 0u;
  v67 = 0u;
  v65 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0;
  v74[0] = (char *)v75;
  v74[1] = (char *)0x400000000;
  MEMORY[0x242623A34](v62);
  v60 = 0uLL;
  v61 = 0;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v57;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v57 != v7)
          objc_enumerationMutation(v5);
        v9 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v56 + 1) + 8 * i));
        objc_msgSend(v9, "bytes");
        objc_msgSend(v9, "length");
        llvm::MemoryBuffer::getMemBuffer();
        llvm::MemoryBuffer::getMemBufferRef(v43);
        llvm::parseIR();
        v10 = __p[0];
        if (!__p[0])
        {
          v37 = v43;
          v43 = 0;
          if (v37)
            (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v37 + 8))(v37);

          v36 = 0;
          goto LABEL_49;
        }
        v11 = v60.i64[1];
        if (v60.i64[1] >= (unint64_t)v61)
        {
          v13 = (v60.i64[1] - v60.i64[0]) >> 3;
          if ((unint64_t)(v13 + 1) >> 61)
            std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
          v14 = (uint64_t)&v61[-v60.i64[0]] >> 2;
          if (v14 <= v13 + 1)
            v14 = v13 + 1;
          if ((unint64_t)&v61[-v60.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          *((_QWORD *)&v52 + 1) = &v61;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v61, v15);
            v10 = __p[0];
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[8 * v13];
          v18 = &v16[8 * v15];
          *(_QWORD *)&v52 = v18;
          __p[0] = 0;
          *(_QWORD *)v17 = v10;
          v12 = v17 + 8;
          v51.i64[1] = (uint64_t)(v17 + 8);
          v19 = (_QWORD *)v60.i64[1];
          v20 = (_QWORD *)v60.i64[0];
          if (v60.i64[1] == v60.i64[0])
          {
            v22 = vdupq_n_s64(v60.u64[1]);
          }
          else
          {
            do
            {
              v21 = *--v19;
              *v19 = 0;
              *((_QWORD *)v17 - 1) = v21;
              v17 -= 8;
            }
            while (v19 != v20);
            v22 = v60;
            v12 = (_QWORD *)v51.i64[1];
            v18 = (char *)v52;
          }
          v60.i64[0] = (uint64_t)v17;
          v60.i64[1] = (uint64_t)v12;
          v51 = v22;
          v23 = v61;
          v61 = v18;
          *(_QWORD *)&v52 = v23;
          v50 = (int64x2_t *)v22.i64[0];
          std::__split_buffer<std::unique_ptr<llvm::Module>>::~__split_buffer((uint64_t)&v50);
        }
        else
        {
          __p[0] = 0;
          *(_QWORD *)v60.i64[1] = v10;
          v12 = (_QWORD *)(v11 + 8);
        }
        v60.i64[1] = (uint64_t)v12;
        v24 = __p[0];
        __p[0] = 0;
        if (v24)
        {
          v25 = MEMORY[0x242623A70]();
          MEMORY[0x242623D28](v25, 0x10B2C407FF26C1CLL);
        }
        v26 = v43;
        v43 = 0;
        if (v26)
          (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v26 + 8))(v26);
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
      if (v6)
        continue;
      break;
    }
  }

  v51 = 0uLL;
  v50 = &v51;
  v52 = 0u;
  v53 = 0u;
  v54 = 1065353216;
  v55 = 0;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v27 = v40;
  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v63, 16);
  if (v28)
  {
    v29 = *(_QWORD *)v47;
    do
    {
      for (j = 0; j != v28; ++j)
      {
        if (*(_QWORD *)v47 != v29)
          objc_enumerationMutation(v27);
        v31 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
        objc_msgSend(v27, "objectForKeyedSubscript:", v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        std::string::basic_string[abi:ne180100]<0>(&v43, (char *)objc_msgSend(objc_retainAutorelease(v31), "UTF8String"));
        v33 = objc_retainAutorelease(v32);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v33, "UTF8String"));
        ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile((uint64_t)&v50, &v43, (uint64_t)__p);
        if (v42 < 0)
          operator delete(__p[0]);
        if (v45 < 0)
          operator delete(v43);

      }
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v46, v63, 16);
    }
    while (v28);
  }

  __p[0] = 0;
  ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules((uint64_t)&v50, v60.i64, __p, &v43);
  v34 = v43;
  v35 = v44;
  if (v43 == v44)
  {
    v36 = 0;
    if (!v43)
      goto LABEL_45;
  }
  else
  {
    if (a3)
      *a3 = __p[0];
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v34, v35 - v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v43;
    if (!v43)
      goto LABEL_45;
  }
  v44 = v34;
  operator delete(v34);
LABEL_45:
  ShaderDebugger::Metadata::MDSerializer::~MDSerializer((ShaderDebugger::Metadata::MDSerializer *)&v50);
LABEL_49:
  v50 = &v60;
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v62);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v74);
  if ((_QWORD)v72)
  {
    *((_QWORD *)&v72 + 1) = v72;
    operator delete((void *)v72);
  }
  if (SHIBYTE(v71) < 0)
    operator delete(*((void **)&v70 + 1));
  if (SBYTE7(v70) < 0)
    operator delete((void *)v69);
  if (SBYTE7(v67) < 0)
    operator delete(v66[0]);

  return v36;
}

void sub_23C75EE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  ShaderDebugger::Metadata::MDSerializer::~MDSerializer((ShaderDebugger::Metadata::MDSerializer *)&a28);
  __p = &a49;
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&a52);
  llvm::SMDiagnostic::~SMDiagnostic((llvm::SMDiagnostic *)&STACK[0x260]);

  _Unwind_Resume(a1);
}

char **llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<llvm::Module>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void llvm::function_ref<llvm::Optional<std::string> ()(llvm::StringRef)>::callback_fn<llvm::$_0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t std::unique_ptr<llvm::Module>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x242623A70]();
    JUMPOUT(0x242623D28);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::Module>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<llvm::Module>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23C75F318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_23C75F434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_23C75F57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_23C75F9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 48 * a2;
  }
}

unint64_t `anonymous namespace'::AverageValue(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  if (v2 == v3)
    return 0;
  if ((unint64_t)(v3 - v2) <= 0x17)
    return *(_QWORD *)v2;
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  v5 = (unint64_t)(a1[1] - *a1) >> 3;
  v6 = (v5 + 2) / 3uLL;
  v7 = v5 - v6;
  if (v7 <= (int)v6 + 1)
    v8 = (v6 + 1);
  else
    v8 = v7;
  v9 = (uint64_t *)(*a1 + 8 * v6);
  v10 = (uint64_t)(8 * v8 - 8 * v6) >> 3;
  if ((_DWORD)v6 == (_DWORD)v8)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 8 * v8 - 8 * v6;
    do
    {
      v13 = *v9++;
      v11 += v13;
      v12 -= 8;
    }
    while (v12);
  }
  return (v10 + v11 - 1) / v10;
}

void sub_23C75FFF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 56 * a2;
  }
}

void sub_23C761360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  uint64_t a71;
  void *v71;
  void *v72;
  void *v73;

  std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::destroy((uint64_t)&a70, (_QWORD *)a71);
  _Unwind_Resume(a1);
}

void sub_23C761848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C7621C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34)
{

  _Unwind_Resume(a1);
}

void sub_23C7625C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C76278C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C762C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  _Block_object_dispose((const void *)(v14 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

__n128 __Block_byref_object_copy__59(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__60(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_23C762E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_23C763198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  void *v31;
  uint64_t v32;
  void *v34;

  _Block_object_dispose(&a26, 8);

  _Block_object_dispose((const void *)(v32 - 168), 8);
  v34 = *(void **)(v32 - 120);
  if (v34)
  {
    *(_QWORD *)(v32 - 112) = v34;
    operator delete(v34);
  }

  _Unwind_Resume(a1);
}

void sub_23C7640A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a67;
  uint64_t a68;
  uint64_t a70;

  std::__tree<DYMTLIABDecodingOp>::destroy((uint64_t)&a67, (_QWORD *)a68);
  _Unwind_Resume(a1);
}

void _ZZZ141__DYMTLDebugPlaybackEngineCounterSupport__profileFrameWithCounterListsForProfileInfoAsync_encoderPass_updateStatSampling_setConsistentState__EUb_ENK3__0clEb(uint64_t a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t i;
  void *v15;
  uint64_t j;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void **v21;
  void *v22;
  id v23;

  if (!*(_BYTE *)(**(_QWORD **)a1 + 104))
  {
    objc_msgSend(**(id **)(a1 + 8), "objectForKeyedSubscript:", CFSTR("perEncoderIndexDrawCallCount"));
    v23 = (id)objc_claimAutoreleasedReturnValue();
    if (**(_BYTE **)(a1 + 16))
    {
LABEL_3:

      return;
    }
    if ((a2 & 1) == 0)
      ++**(_QWORD **)(a1 + 24);
    v4 = objc_msgSend(**(id **)(a1 + 32), "count");
    while (1)
    {
      while (1)
      {
        v5 = **(_QWORD **)(a1 + 40);
        if (v5 >= objc_msgSend(**(id **)(a1 + 48), "count"))
          goto LABEL_3;
        objc_msgSend(**(id **)(a1 + 48), "objectAtIndexedSubscript:", **(_QWORD **)(a1 + 40));
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "unsignedIntegerValue");

        if (**(_QWORD **)(a1 + 24) != v7)
          goto LABEL_3;
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "objectForKeyedSubscript:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "unsignedIntegerValue");

        if (**(_BYTE **)(a1 + 56))
          v10 = v10 != 0;
        if ((a2 & 1) != 0)
          break;
        ++**(_QWORD **)(a1 + 24);
        if (!v10)
          goto LABEL_22;
        v11 = objc_opt_new();
        v12 = *(void ***)(a1 + 64);
        v13 = *v12;
        *v12 = (void *)v11;

        objc_msgSend(**(id **)(a1 + 72), "addObject:", **(_QWORD **)(a1 + 64));
LABEL_16:
        for (i = 0; i != v10; ++i)
        {
          v15 = (void *)objc_opt_new();
          for (j = v4; j; --j)
            objc_msgSend(v15, "addObject:", &unk_250D7C6E0);
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(**(id **)(a1 + 88), "count") - 1);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:atIndexedSubscript:", v17, **(_QWORD **)(a1 + 80));

          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(**(id **)(a1 + 72), "count") - 1);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:atIndexedSubscript:", v18, **(_QWORD **)(a1 + 96));

          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(**(id **)(a1 + 64), "count"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "setObject:atIndexedSubscript:", v19, **(_QWORD **)(a1 + 104));

          objc_msgSend(**(id **)(a1 + 64), "addObject:", v15);
        }
        ++**(_QWORD **)(a1 + 40);
        if ((a2 & 1) != 0)
        {
          ++**(_QWORD **)(a1 + 24);
          v20 = objc_opt_new();
          v21 = *(void ***)(a1 + 64);
          v22 = *v21;
          *v21 = (void *)v20;

          objc_msgSend(**(id **)(a1 + 72), "addObject:", **(_QWORD **)(a1 + 64));
        }
      }
      if (v10)
        goto LABEL_16;
LABEL_22:
      ++**(_QWORD **)(a1 + 40);
    }
  }
}

void sub_23C764728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C7647BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C764810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C764A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C764B00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C764B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C764BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[48 * v8];
    v15 = &v12[48 * v11];
    v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 3);
        v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

_QWORD *std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C764EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> const*>,std::__wrap_iter<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> const*>,std::back_insert_iterator<std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>,0>(__int128 *a1, __int128 *a2, void **a3)
{
  __int128 *v3;
  __int128 *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>::operator=[abi:ne180100](&v6, v3);
    v3 += 3;
  }
  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>::operator=[abi:ne180100](void ***a1, __int128 *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*v4) >> 4);
    v14 = v13 + 1;
    if (v13 + 1 > 0x555555555555555)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)*v4) >> 4);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x2AAAAAAAAAAAAAALL)
      v16 = 0x555555555555555;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(v7, v16);
    else
      v17 = 0;
    v18 = &v17[48 * v13];
    v19 = &v17[48 * v16];
    v20 = *a2;
    v21 = a2[2];
    *((_OWORD *)v18 + 1) = a2[1];
    *((_OWORD *)v18 + 2) = v21;
    *(_OWORD *)v18 = v20;
    v12 = v18 + 48;
    v23 = (char *)*v4;
    v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        v24 = *((_OWORD *)v22 - 3);
        v25 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v18 - 1) = v25;
        *((_OWORD *)v18 - 3) = v24;
        v18 -= 48;
        v22 -= 48;
      }
      while (v22 != v23);
      v22 = (char *)*v4;
    }
    *v4 = v18;
    v4[1] = v12;
    v4[2] = v19;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v10 = *a2;
    v11 = a2[2];
    v5[1] = a2[1];
    v5[2] = v11;
    *v5 = v10;
    v12 = v5 + 3;
  }
  v4[1] = v12;
  return a1;
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[56 * v8];
    v15 = &v12[56 * v11];
    v16 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 56);
        v21 = *(_OWORD *)(v18 - 40);
        v22 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 40) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v14 -= 56;
        v18 -= 56;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  BOOL v22;
  char v23;
  char v24;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v9) >> 4);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, a2 - 6, v9);
        if ((_DWORD)result)
          return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v9, a2 - 6);
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9, v9 + 6, a2 - 6);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9, v9 + 6, v9 + 12, a2 - 6);
      case 5uLL:
        return (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9, v9 + 6, v9 + 12, v9 + 18, a2 - 6);
      default:
        if (v12 <= 1151)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((_BOOL8)v9, a2);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((_BOOL8)v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[6 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v15, v9, a2 - 6);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9, v15, a2 - 6);
            v16 = 3 * v14;
            v17 = &v9[6 * v14 - 6];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9 + 6, v17, a2 - 12);
            v18 = v9 + 12;
            v19 = &v9[2 * v16 + 6];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v18, v19, a2 - 18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v17, v15, v19);
            std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v8, v15);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v24, v8 - 6, v8))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(v8, a2);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(v8, a2);
          if ((v21 & 1) == 0)
            goto LABEL_15;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v8, v20);
          v9 = v20 + 6;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v20 + 6, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(v8, v20, a3, -v11, a5 & 1);
            v9 = v20 + 6;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(_BOOL8 result, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[57];
  uint64_t v17;

  if ((_OWORD *)result != a2)
  {
    *(_QWORD *)&v16[49] = v2;
    v17 = v3;
    v5 = result;
    v6 = (_QWORD *)(result + 48);
    if ((_OWORD *)(result + 48) != a2)
    {
      v7 = 0;
      v8 = (_OWORD *)result;
      do
      {
        v9 = v8;
        v8 = v6;
        result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v14, v6, v9);
        if (result)
        {
          v10 = v8[1];
          v14 = *v8;
          *(_OWORD *)v15 = v10;
          *(_OWORD *)&v15[16] = v8[2];
          v11 = v7;
          while (1)
          {
            v12 = v5 + v11;
            *(_OWORD *)(v12 + 48) = *(_OWORD *)(v5 + v11);
            *(_QWORD *)(v12 + 64) = *(_QWORD *)(v5 + v11 + 16);
            *(_OWORD *)(v12 + 72) = *(_OWORD *)(v5 + v11 + 24);
            *(_QWORD *)(v12 + 88) = *(_QWORD *)(v5 + v11 + 40);
            if (!v11)
              break;
            v11 -= 48;
            result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)v16, &v14, (_QWORD *)(v11 + v5));
            if (!result)
            {
              v13 = v5 + v11 + 48;
              goto LABEL_10;
            }
          }
          v13 = v5;
LABEL_10:
          *(_OWORD *)v13 = v14;
          *(_QWORD *)(v13 + 16) = *(_QWORD *)v15;
          *(_OWORD *)(v13 + 24) = *(_OWORD *)&v15[8];
          *(_QWORD *)(v13 + 40) = *(_QWORD *)&v15[24];
        }
        v6 = v8 + 3;
        v7 += 48;
      }
      while (v8 + 3 != a2);
    }
  }
  return result;
}

BOOL std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(_BOOL8 result, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[32];
  _BYTE v13[41];
  uint64_t v14;

  if ((_OWORD *)result != a2)
  {
    *(_QWORD *)&v13[33] = v2;
    v14 = v3;
    v5 = (_OWORD *)result;
    v6 = (_QWORD *)(result + 48);
    if ((_OWORD *)(result + 48) != a2)
    {
      v7 = result - 48;
      do
      {
        v8 = v5;
        v5 = v6;
        result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, v6, v8);
        if (result)
        {
          v9 = v5[1];
          v11 = *v5;
          *(_OWORD *)v12 = v9;
          *(_OWORD *)&v12[16] = v5[2];
          v10 = v7;
          do
          {
            *(_OWORD *)(v10 + 96) = *(_OWORD *)(v10 + 48);
            *(_QWORD *)(v10 + 112) = *(_QWORD *)(v10 + 64);
            *(_OWORD *)(v10 + 120) = *(_OWORD *)(v10 + 72);
            *(_QWORD *)(v10 + 136) = *(_QWORD *)(v10 + 88);
            result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)v13, &v11, (_QWORD *)v10);
            v10 -= 48;
          }
          while (result);
          *(_OWORD *)(v10 + 96) = v11;
          *(_QWORD *)(v10 + 112) = *(_QWORD *)v12;
          *(_OWORD *)(v10 + 120) = *(_OWORD *)&v12[8];
          *(_QWORD *)(v10 + 136) = *(_QWORD *)&v12[24];
        }
        v6 = v5 + 3;
        v7 += 48;
      }
      while (v5 + 3 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v9, a2, a1))
  {
    result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v10, a3, a2);
    if (!(_DWORD)result)
      return result;
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
    if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a2, a1))return 1;
    v7 = a1;
    v8 = a2;
    goto LABEL_9;
  }
  if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, a3, a2))
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
    if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a3, a2))return 1;
    v7 = a2;
    v8 = a3;
LABEL_9:
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v7, v8);
    return 2;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a3);
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  __int128 v4;
  uint64_t *v5;
  uint64_t *v6;
  _BOOL4 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;

  v2 = a2;
  v4 = *((_OWORD *)a1 + 1);
  v9 = *(_OWORD *)a1;
  v10 = v4;
  v11 = *((_OWORD *)a1 + 2);
  if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, a2 - 6))
  {
    v5 = a1;
    do
      v5 += 6;
    while (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, v5));
  }
  else
  {
    v6 = a1 + 6;
    do
    {
      v5 = v6;
      if (v6 >= v2)
        break;
      v7 = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, v6);
      v6 = v5 + 6;
    }
    while (!v7);
  }
  if (v5 < v2)
  {
    do
      v2 -= 6;
    while (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, v2));
  }
  while (v5 < v2)
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v5, v2);
    do
      v5 += 6;
    while (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, v5));
    do
      v2 -= 6;
    while (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, v2));
  }
  if (v5 - 6 != a1)
  {
    *a1 = *(v5 - 6);
    a1[1] = *(v5 - 5);
    a1[2] = *(v5 - 4);
    a1[3] = *(v5 - 3);
    a1[4] = *(v5 - 2);
    a1[5] = *(v5 - 1);
  }
  *((_OWORD *)v5 - 3) = v9;
  *((_OWORD *)v5 - 2) = v10;
  *((_OWORD *)v5 - 1) = v11;
  return v5;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v4 = 0;
  v5 = *((_OWORD *)a1 + 1);
  v10 = *(_OWORD *)a1;
  v11 = v5;
  v12 = *((_OWORD *)a1 + 2);
  do
    v4 += 6;
  while (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, &a1[v4], &v10));
  v6 = (unint64_t)&a1[v4];
  if (v4 == 6)
  {
    do
    {
      if (v6 >= (unint64_t)a2)
        break;
      a2 -= 6;
    }
    while (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a2, &v10));
  }
  else
  {
    do
      a2 -= 6;
    while (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a2, &v10));
  }
  v7 = &a1[v4];
  if (v6 < (unint64_t)a2)
  {
    v8 = a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v7, v8);
      do
        v7 += 6;
      while (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, v7, &v10));
      do
        v8 -= 6;
      while (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, v8, &v10));
    }
    while (v7 < v8);
  }
  result = v7 - 6;
  if (v7 - 6 != a1)
  {
    *a1 = *(v7 - 6);
    a1[1] = *(v7 - 5);
    a1[2] = *(v7 - 4);
    a1[3] = *(v7 - 3);
    a1[4] = *(v7 - 2);
    a1[5] = *(v7 - 1);
  }
  *((_OWORD *)v7 - 3) = v10;
  *((_OWORD *)v7 - 2) = v11;
  *((_OWORD *)v7 - 1) = v12;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[32];
  char v17;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 6;
      if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v15, a2 - 6, a1))
      {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, v6);
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 6, a2 - 6);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 6, a1 + 12, a2 - 6);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 6, a1 + 12, a1 + 18, a2 - 6);
      return 1;
    default:
      v7 = a1 + 12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 6, a1 + 12);
      v8 = a1 + 18;
      if (a1 + 18 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v15, v8, v7))
    {
      v11 = *((_OWORD *)v8 + 1);
      v15 = *(_OWORD *)v8;
      *(_OWORD *)v16 = v11;
      *(_OWORD *)&v16[16] = *((_OWORD *)v8 + 2);
      v12 = v9;
      while (1)
      {
        v13 = (char *)a1 + v12;
        *((_OWORD *)v13 + 9) = *(_OWORD *)((char *)a1 + v12 + 96);
        *((_QWORD *)v13 + 20) = *(uint64_t *)((char *)a1 + v12 + 112);
        *(_OWORD *)(v13 + 168) = *(_OWORD *)((char *)a1 + v12 + 120);
        *((_QWORD *)v13 + 23) = *(uint64_t *)((char *)a1 + v12 + 136);
        if (v12 == -96)
          break;
        v12 -= 48;
        if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v17, &v15, (_QWORD *)v13 + 6))
        {
          v14 = (uint64_t)a1 + v12 + 144;
          goto LABEL_12;
        }
      }
      v14 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v14 = v15;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)v16;
      *(_OWORD *)(v14 + 24) = *(_OWORD *)&v16[8];
      *(_QWORD *)(v14 + 40) = *(_QWORD *)&v16[24];
      if (++v10 == 8)
        return v8 + 6 == a2;
    }
    v7 = v8;
    v9 += 48;
    v8 += 6;
    if (v8 == a2)
      return 1;
  }
}

BOOL std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  char v6;

  if (*a2 < *a3)
    return 1;
  if (*a3 < *a2)
    return 0;
  v3 = a2[1];
  v4 = a3[1];
  if (v3 < v4)
    return 1;
  return v4 >= v3
      && std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v6, a2, a3);
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = a2[2];
  v4 = a3[2];
  if (v3 < v4)
    return 1;
  if (v4 < v3)
    return 0;
  v5 = a2[3];
  v6 = a3[3];
  if (v5 < v6)
    return 1;
  if (v6 < v5)
    return 0;
  v7 = a2[4];
  v8 = a3[4];
  if (v7 < v8)
    return 1;
  return v8 >= v7 && a2[5] < a3[5];
}

uint64_t *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  v4 = result[2];
  result[2] = a2[2];
  a2[2] = v4;
  v5 = result[3];
  result[3] = a2[3];
  a2[3] = v5;
  v6 = result[4];
  result[4] = a2[4];
  a2[4] = v6;
  v7 = result[5];
  result[5] = a2[5];
  a2[5] = v7;
  return result;
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  char v9;
  char v10;
  char v11;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3);
  result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v9, a4, a3);
  if ((_DWORD)result)
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a3, a4);
    result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v10, a3, a2);
    if ((_DWORD)result)
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
      result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a2, a1);
      if ((_DWORD)result)
        return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
    }
  }
  return result;
}

uint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  char v11;
  char v12;
  char v13;
  char v14;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3, a4);
  result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a5, a4);
  if ((_DWORD)result)
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a4, a5);
    result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, a4, a3);
    if ((_DWORD)result)
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a3, a4);
      result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a3, a2);
      if ((_DWORD)result)
      {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
        result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v14, a2, a1);
        if ((_DWORD)result)
          return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v26;
  char v27;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 48;
    if ((char *)a2 - (char *)a1 >= 49)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[6 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((_BOOL8)a1, a4, v9, v12);
        v12 -= 6;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, v14, a1))
        {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((_BOOL8)a1, a4, v9, a1);
        }
        v14 += 6;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 49)
    {
      return v13;
    }
    else
    {
      v26 = v13;
      v15 = v8 / 0x30uLL;
      v16 = a2 - 6;
      do
      {
        v17 = *a1;
        v18 = a1[1];
        v20 = a1[2];
        v19 = a1[3];
        v22 = a1[4];
        v21 = a1[5];
        v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a4, v15);
        if (v16 == v23)
        {
          *v23 = v17;
          v23[1] = v18;
          v23[2] = v20;
          v23[3] = v19;
          v23[4] = v22;
          v23[5] = v21;
        }
        else
        {
          *v23 = *v16;
          v23[1] = v16[1];
          v23[2] = v16[2];
          v23[3] = v16[3];
          v23[4] = v16[4];
          v23[5] = v16[5];
          *v16 = v17;
          v16[1] = v18;
          v16[2] = v20;
          v16[3] = v19;
          v16[4] = v22;
          v16[5] = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t)a1, (uint64_t)(v23 + 6), a4, 0xAAAAAAAAAAAAAAABLL * (((char *)(v23 + 6) - (char *)a1) >> 4));
        }
        v16 -= 6;
      }
      while (v15-- > 2);
      return v26;
    }
  }
  return a3;
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(_BOOL8 result, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 4)))
    {
      v11 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 4)) | 1;
      v12 = (_QWORD *)(result + 48 * v11);
      v13 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 4) + 2;
      if (v13 < a3
        && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v18, (_QWORD *)(result + 48 * v11), v12 + 6))
      {
        v12 += 6;
        v11 = v13;
      }
      result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v18, v12, v7);
      if (!result)
      {
        v14 = v7[1];
        v18 = *v7;
        v19 = v14;
        v20 = v7[2];
        do
        {
          v15 = v12;
          *(_QWORD *)v7 = *v12;
          *((_QWORD *)v7 + 1) = v12[1];
          *((_QWORD *)v7 + 2) = v12[2];
          *((_QWORD *)v7 + 3) = v12[3];
          *((_QWORD *)v7 + 4) = v12[4];
          *((_QWORD *)v7 + 5) = v12[5];
          if (v9 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (_QWORD *)(v8 + 48 * v16);
          v17 = 2 * v11 + 2;
          if (v17 < a3
            && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v21, (_QWORD *)(v8 + 48 * v16), v12 + 6))
          {
            v12 += 6;
            v16 = v17;
          }
          result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v21, v12, &v18);
          v7 = v15;
          v11 = v16;
        }
        while (!result);
        *v15 = v18;
        v15[1] = v19;
        v15[2] = v20;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[6 * v5 + 6];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3
      && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &a1[6 * v5 + 6], &a1[6 * v5 + 12]))
    {
      v8 += 6;
      v9 = v10;
    }
    *a1 = *v8;
    a1[1] = v8[1];
    a1[2] = v8[2];
    a1[3] = v8[3];
    a1[4] = v8[4];
    a1[5] = v8[5];
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _OWORD *v9;
  double result;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16[3];
  _BYTE v17[57];
  uint64_t v18;

  if (a4 >= 2)
  {
    *(_QWORD *)&v17[49] = v4;
    v18 = v5;
    v7 = (unint64_t)(a4 - 2) >> 1;
    v8 = (_QWORD *)(a1 + 48 * v7);
    v9 = (_OWORD *)(a2 - 48);
    if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v14, v8, (_QWORD *)(a2 - 48)))
    {
      v11 = v9[1];
      v14 = *v9;
      v15 = v11;
      *(_OWORD *)v16 = v9[2];
      do
      {
        v12 = v8;
        *(_QWORD *)v9 = *v8;
        *((_QWORD *)v9 + 1) = v8[1];
        *((_QWORD *)v9 + 2) = v8[2];
        *((_QWORD *)v9 + 3) = v8[3];
        *((_QWORD *)v9 + 4) = v8[4];
        *((_QWORD *)v9 + 5) = v8[5];
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (_QWORD *)(a1 + 48 * v7);
        v9 = v12;
      }
      while (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)v17, v8, &v14));
      v13 = v15;
      *v12 = v14;
      v12[1] = v13;
      result = v16[0];
      v12[2] = *(_OWORD *)v16;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  char v22;
  BOOL v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  char v27;
  char v28;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v26 = *(a2 - 7);
        v25 = (uint64_t *)(a2 - 7);
        v24 = v26;
        if (v26 < *v9)
          return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v9, v25);
        if (*v9 >= v24)
        {
          result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, v25, v9);
          if ((_DWORD)result)
            return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v9, v25);
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9, v9 + 7, (uint64_t *)a2 - 7);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9, v9 + 7, v9 + 14, (uint64_t *)a2 - 7);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9, v9 + 7, v9 + 14, v9 + 21, (uint64_t *)a2 - 7);
      default:
        if (v12 <= 1343)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((unint64_t *)v9, a2);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t)v9, (uint64_t)a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[7 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v15, v9, (uint64_t *)a2 - 7);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9, v15, (uint64_t *)a2 - 7);
            v16 = 7 * v14;
            v17 = &v9[7 * v14 - 7];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9 + 7, v17, (uint64_t *)a2 - 14);
            v18 = v9 + 14;
            v19 = &v9[v16 + 7];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v18, v19, (uint64_t *)a2 - 21);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v17, v15, v19);
            std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v8, v15);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v20 = *(v8 - 7);
          if (v20 >= *v8
            && (*v8 < v20
             || !std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v28, v8 - 7, v8)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(v8, (uint64_t *)a2);
            v9 = (uint64_t *)result;
            goto LABEL_19;
          }
LABEL_14:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(v8, (uint64_t *)a2);
          if ((v22 & 1) == 0)
            goto LABEL_17;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v8, v21);
          v9 = v21 + 7;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v21 + 7, (uint64_t *)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(v8, v21, a3, -v11, a5 & 1);
            v9 = v21 + 7;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (unint64_t *)v21;
          if (v23)
            return result;
          goto LABEL_2;
        }
        if (v9 != (uint64_t *)a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v9, (uint64_t *)a2, (uint64_t *)a2, a3);
        return result;
    }
  }
}

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  if (result == a2)
    return result;
  v23 = v2;
  v24 = v3;
  v5 = result;
  v6 = (__int128 *)(result + 7);
  if (result + 7 == a2)
    return result;
  v7 = 0;
  v8 = (__int128 *)result;
  do
  {
    v9 = (unint64_t *)v8;
    v8 = v6;
    v10 = v9[7];
    if (v10 >= *v9)
    {
      if (*v9 < v10)
        goto LABEL_19;
      result = (unint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v18, v8, v9);
      if (!(_DWORD)result)
        goto LABEL_19;
    }
    v11 = v8[1];
    v18 = *v8;
    v19 = v11;
    v20 = v8[2];
    v21 = *((_QWORD *)v8 + 6);
    v12 = v9[1];
    v9[7] = *v9;
    *((_QWORD *)v8 + 1) = v12;
    *((_QWORD *)v8 + 2) = v9[2];
    *((_QWORD *)v8 + 3) = v9[3];
    *((_QWORD *)v8 + 4) = v9[4];
    *((_QWORD *)v8 + 5) = v9[5];
    *((_QWORD *)v8 + 6) = v9[6];
    v13 = v5;
    if (v9 == v5)
      goto LABEL_18;
    v14 = v7;
    while (1)
    {
      v15 = (char *)v5 + v14;
      v16 = *(unint64_t *)((char *)v5 + v14 - 56);
      if ((unint64_t)v18 >= v16)
        break;
LABEL_11:
      v9 -= 7;
      *(_QWORD *)v15 = v16;
      v17 = *((_OWORD *)v15 - 2);
      *(_OWORD *)(v15 + 8) = *((_OWORD *)v15 - 3);
      *(_OWORD *)(v15 + 24) = v17;
      *(_OWORD *)(v15 + 40) = *((_OWORD *)v15 - 1);
      v14 -= 56;
      if (!v14)
      {
        v13 = v5;
        goto LABEL_18;
      }
    }
    if (v16 < (unint64_t)v18)
    {
      v13 = v9;
      goto LABEL_18;
    }
    result = (unint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v22, &v18, (unint64_t *)((char *)v5 + v14 - 56));
    if ((_DWORD)result)
    {
      v16 = *(unint64_t *)((char *)v5 + v14 - 56);
      goto LABEL_11;
    }
    v13 = (unint64_t *)((char *)v5 + v14);
LABEL_18:
    *(_OWORD *)v13 = v18;
    *((_OWORD *)v13 + 1) = v19;
    *((_OWORD *)v13 + 2) = v20;
    v13[6] = v21;
LABEL_19:
    v6 = (__int128 *)((char *)v8 + 56);
    v7 += 56;
  }
  while ((unint64_t *)((char *)v8 + 56) != a2);
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _QWORD *i;
  unint64_t v12;
  uint64_t v13;
  _BYTE v14[32];
  __int128 v15;
  uint64_t v16;
  _BYTE v17[41];
  uint64_t v18;

  if (result != a2)
  {
    *(_QWORD *)&v17[33] = v2;
    v18 = v3;
    v5 = result;
    v6 = result + 56;
    if (result + 56 != a2)
    {
      v7 = (_QWORD *)(result + 104);
      do
      {
        v8 = (unint64_t *)v5;
        v5 = v6;
        v9 = v8[7];
        if (v9 < *v8
          || *v8 >= v9
          && (result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)v14, (_QWORD *)v5, v8), (_DWORD)result))
        {
          v10 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)v14 = *(_OWORD *)v5;
          *(_OWORD *)&v14[16] = v10;
          v15 = *(_OWORD *)(v5 + 32);
          v16 = *(_QWORD *)(v5 + 48);
          for (i = v7; ; i -= 7)
          {
            *(i - 6) = *(i - 13);
            *(_OWORD *)(i - 5) = *((_OWORD *)i - 6);
            *(i - 3) = *(i - 10);
            *((_OWORD *)i - 1) = *(_OWORD *)(i - 9);
            *i = *(i - 7);
            v12 = *(i - 20);
            v13 = *(_QWORD *)v14;
            if (*(_QWORD *)v14 >= v12)
            {
              if (v12 < *(_QWORD *)v14)
                goto LABEL_14;
              result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)v17, v14, i - 20);
              if (!(_DWORD)result)
                break;
            }
          }
          v13 = *(_QWORD *)v14;
LABEL_14:
          *(i - 13) = v13;
          *((_OWORD *)i - 6) = *(_OWORD *)&v14[8];
          *(i - 10) = *(_QWORD *)&v14[24];
          *(_OWORD *)(i - 9) = v15;
          *(i - 7) = v16;
        }
        v6 = v5 + 56;
        v7 += 7;
      }
      while (v5 + 56 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  BOOL v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v6 = *a2;
  if (*a2 < (unint64_t)*a1
    || *a1 >= v6
    && (v7 = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a2, a1), v6 = *a2, v7))
  {
    if (*a3 < v6
      || v6 >= *a3
      && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v14, a3, a2))
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a3);
    }
    else
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
      if (*a3 < (unint64_t)*a2
        || *a2 >= (unint64_t)*a3
        && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v15, a3, a2))
      {
        v9 = a2;
        v10 = a3;
        goto LABEL_18;
      }
    }
    return 1;
  }
  if (*a3 < v6)
  {
LABEL_8:
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
    if (*a2 < (unint64_t)*a1
      || *a1 >= (unint64_t)*a2
      && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a2, a1))
    {
      v9 = a1;
      v10 = a2;
LABEL_18:
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v9, v10);
      return 2;
    }
    return 1;
  }
  if (v6 < *a3)
    return 0;
  result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, a3, a2);
  if ((_DWORD)result)
    goto LABEL_8;
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *i;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v2 = a2;
  v4 = *((_OWORD *)a1 + 1);
  v19 = *(_OWORD *)a1;
  v20 = v4;
  v21 = *((_OWORD *)a1 + 2);
  v22 = a1[6];
  v5 = *(a2 - 7);
  v6 = v19;
  if ((unint64_t)v19 >= v5)
  {
    if (v5 < (unint64_t)v19
      || !std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, a2 - 7))
    {
      for (i = a1 + 7;
            i < v2
         && (unint64_t)v19 >= *i
         && (*i < (unint64_t)v19
          || !std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, i));
      goto LABEL_16;
    }
    v6 = v19;
  }
  i = a1;
  while (1)
  {
    v9 = i[7];
    i += 7;
    v8 = v9;
    if (v6 < v9)
      break;
    if (v8 >= v6)
    {
      if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, i))
      {
        break;
      }
      v6 = v19;
    }
  }
LABEL_16:
  if (i < v2)
  {
    do
    {
      do
      {
        v11 = *(v2 - 7);
        v2 -= 7;
        v10 = v11;
      }
      while ((unint64_t)v19 < v11);
    }
    while (v10 >= (unint64_t)v19
         && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, v2));
  }
  while (i < v2)
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](i, v2);
    v13 = i[7];
    i += 7;
    v12 = v13;
    v14 = v19;
    while (v14 >= v12)
    {
      if (v12 >= v14)
      {
        if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, i))
        {
          goto LABEL_27;
        }
        v14 = v19;
      }
      v15 = i[7];
      i += 7;
      v12 = v15;
    }
    do
    {
      do
      {
LABEL_27:
        v17 = *(v2 - 7);
        v2 -= 7;
        v16 = v17;
      }
      while ((unint64_t)v19 < v17);
    }
    while (v16 >= (unint64_t)v19
         && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, v2));
  }
  if (i - 7 != a1)
  {
    *a1 = *(i - 7);
    a1[1] = *(i - 6);
    a1[2] = *(i - 5);
    a1[3] = *(i - 4);
    a1[4] = *(i - 3);
    a1[5] = *(i - 2);
    a1[6] = *(i - 1);
  }
  *(_OWORD *)(i - 7) = v19;
  *(_OWORD *)(i - 5) = v20;
  *(_OWORD *)(i - 3) = v21;
  *(i - 1) = v22;
  return i;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;

  v4 = *((_OWORD *)a1 + 1);
  v23 = *(_OWORD *)a1;
  v24 = v4;
  v25 = *((_OWORD *)a1 + 2);
  v26 = a1[6];
  for (i = 7; ; i += 7)
  {
    v6 = a1[i];
    if (v6 >= (unint64_t)v23
      && ((unint64_t)v23 < v6
       || !std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, &a1[i], &v23)))
    {
      break;
    }
  }
  v7 = (unint64_t)&a1[i];
  if (i == 7)
  {
LABEL_18:
    if (v7 < (unint64_t)a2)
    {
      do
      {
        v13 = *(a2 - 7);
        a2 -= 7;
        v12 = v13;
        if (v13 < (unint64_t)v23)
          break;
        if ((unint64_t)v23 < v12)
          goto LABEL_18;
        v14 = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, a2, &v23);
        if (v7 >= (unint64_t)a2)
          break;
      }
      while (!v14);
    }
  }
  else
  {
    v9 = *(a2 - 7);
    a2 -= 7;
    v8 = v9;
    v10 = v23;
    while (v8 >= v10)
    {
      if (v10 >= v8)
      {
        if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, a2, &v23))
        {
          break;
        }
        v10 = v23;
      }
      v11 = *(a2 - 7);
      a2 -= 7;
      v8 = v11;
    }
  }
  v15 = &a1[i];
  if (v7 < (unint64_t)a2)
  {
    v16 = a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v15, v16);
      while (1)
      {
        do
        {
          v18 = v15[7];
          v15 += 7;
          v17 = v18;
          v19 = v23;
        }
        while (v18 < (unint64_t)v23);
        if ((unint64_t)v23 < v17)
          break;
        if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, v15, &v23))goto LABEL_25;
      }
      do
      {
LABEL_26:
        v21 = *(v16 - 7);
        v16 -= 7;
        v20 = v21;
        if (v21 < v19)
          goto LABEL_29;
      }
      while (v19 < v20);
      if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, v16, &v23))
      {
LABEL_25:
        v19 = v23;
        goto LABEL_26;
      }
LABEL_29:
      ;
    }
    while (v15 < v16);
  }
  result = v15 - 7;
  if (v15 - 7 != a1)
  {
    *a1 = *(v15 - 7);
    a1[1] = *(v15 - 6);
    a1[2] = *(v15 - 5);
    a1[3] = *(v15 - 4);
    a1[4] = *(v15 - 3);
    a1[5] = *(v15 - 2);
    a1[6] = *(v15 - 1);
  }
  *(_OWORD *)(v15 - 7) = v23;
  *(_OWORD *)(v15 - 5) = v24;
  *(_OWORD *)(v15 - 3) = v25;
  *(v15 - 1) = v26;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v4 = 0x6DB6DB6DB6DB6DB7 * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 7;
      v6 = *(a2 - 7);
      if (v6 < *a1)
        goto LABEL_5;
      if (*a1 >= v6)
      {
        if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v19, v7, a1))return 1;
LABEL_5:
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, v7);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 7, a2 - 7);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 7, a1 + 14, a2 - 7);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 7, a1 + 14, a1 + 21, a2 - 7);
      return 1;
    default:
      v8 = a1 + 14;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 7, a1 + 14);
      v9 = a1 + 21;
      if (a1 + 21 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  do
  {
    if (*v9 >= (unint64_t)*v8
      && (*v8 < (unint64_t)*v9
       || !std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v19, v9, v8)))
    {
      goto LABEL_22;
    }
    v22 = v9[6];
    v12 = *((_OWORD *)v9 + 2);
    v13 = *(_OWORD *)v9;
    v20 = *((_OWORD *)v9 + 1);
    v21 = v12;
    v19 = v13;
    *v9 = *v8;
    v9[1] = v8[1];
    v9[2] = v8[2];
    v9[3] = v8[3];
    v9[4] = v8[4];
    v9[5] = v8[5];
    v9[6] = v8[6];
    v14 = (uint64_t)a1;
    if (v8 == a1)
      goto LABEL_21;
    v15 = v10;
    while (1)
    {
      v16 = (char *)a1 + v15;
      v17 = *(uint64_t *)((char *)a1 + v15 + 56);
      if ((unint64_t)v19 >= v17)
        break;
LABEL_17:
      v8 -= 7;
      *((_QWORD *)v16 + 14) = v17;
      v18 = *((_OWORD *)v16 + 5);
      *(_OWORD *)(v16 + 120) = *((_OWORD *)v16 + 4);
      *(_OWORD *)(v16 + 136) = v18;
      *(_OWORD *)(v16 + 152) = *((_OWORD *)v16 + 6);
      v15 -= 56;
      if (v15 == -112)
      {
        v14 = (uint64_t)a1;
        goto LABEL_21;
      }
    }
    if (v17 < (unint64_t)v19)
    {
      v14 = (uint64_t)v8;
      goto LABEL_21;
    }
    if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, (uint64_t *)((char *)a1 + v15 + 56)))
    {
      v17 = *(uint64_t *)((char *)a1 + v15 + 56);
      goto LABEL_17;
    }
    v14 = (uint64_t)a1 + v15 + 112;
LABEL_21:
    *(_OWORD *)v14 = v19;
    *(_OWORD *)(v14 + 16) = v20;
    *(_OWORD *)(v14 + 32) = v21;
    *(_QWORD *)(v14 + 48) = v22;
    if (++v11 == 8)
      return v9 + 7 == a2;
LABEL_22:
    v8 = v9;
    v10 += 56;
    v9 += 7;
  }
  while (v9 != a2);
  return 1;
}

BOOL std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 < v4)
    return 1;
  if (v4 < v3)
    return 0;
  v5 = a2[2];
  v6 = a3[2];
  if (v5 < v6)
    return 1;
  return v6 >= v5
      && std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v8, a2, a3);
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = a2[3];
  v4 = a3[3];
  if (v3 < v4)
    return 1;
  if (v4 < v3)
    return 0;
  v5 = a2[4];
  v6 = a3[4];
  if (v5 < v6)
    return 1;
  if (v6 < v5)
    return 0;
  v7 = a2[5];
  v8 = a3[5];
  if (v7 < v8)
    return 1;
  return v8 >= v7 && a2[6] < a3[6];
}

uint64_t *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  v4 = result[2];
  result[2] = a2[2];
  a2[2] = v4;
  v5 = result[3];
  result[3] = a2[3];
  a2[3] = v5;
  v6 = result[4];
  result[4] = a2[4];
  a2[4] = v6;
  v7 = result[5];
  result[5] = a2[5];
  a2[5] = v7;
  v8 = result[6];
  result[6] = a2[6];
  a2[6] = v8;
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  char v9;
  char v10;
  char v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3);
  if (*a4 < (unint64_t)*a3
    || *a3 >= (unint64_t)*a4
    && (result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v9, a4, a3), (_DWORD)result))
  {
    result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a3, a4);
    if (*a3 < (unint64_t)*a2
      || *a2 >= (unint64_t)*a3
      && (result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v10, a3, a2), (_DWORD)result))
    {
      result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
      if (*a2 < (unint64_t)*a1)
        return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
      if (*a1 >= (unint64_t)*a2)
      {
        result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a2, a1);
        if ((_DWORD)result)
          return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  char v11;
  char v12;
  char v13;
  char v14;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3, a4);
  if (*a5 < (unint64_t)*a4
    || *a4 >= (unint64_t)*a5
    && (result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a5, a4), (_DWORD)result))
  {
    result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a4, a5);
    if (*a4 < (unint64_t)*a3
      || *a3 >= (unint64_t)*a4
      && (result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, a4, a3), (_DWORD)result))
    {
      result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a3, a4);
      if (*a3 < (unint64_t)*a2
        || *a2 >= (unint64_t)*a3
        && (result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a3, a2), (_DWORD)result))
      {
        result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
        if (*a2 < (unint64_t)*a1)
          return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
        if (*a1 >= (unint64_t)*a2)
        {
          result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v14, a2, a1);
          if ((_DWORD)result)
            return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t *v13;
  uint64_t *v14;
  int64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t *v27;
  uint64_t v28;
  char v29;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 56;
    if ((char *)a2 - (char *)a1 >= 57)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__int128 *)&a1[7 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((_BOOL8)a1, a4, v9, v12);
        v12 = (__int128 *)((char *)v12 - 56);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (*v14 < (unint64_t)*a1
          || *a1 >= (unint64_t)*v14
          && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v29, v14, a1))
        {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((_BOOL8)a1, a4, v9, (__int128 *)a1);
        }
        v14 += 7;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 57)
    {
      return v13;
    }
    else
    {
      v27 = v13;
      v15 = v8 / 0x38uLL;
      v16 = (unint64_t *)(a2 - 7);
      v17 = a4;
      do
      {
        v18 = *a1;
        v19 = a1[1];
        v20 = a1[2];
        v21 = a1[3];
        v23 = a1[4];
        v22 = a1[5];
        v28 = a1[6];
        v24 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((unint64_t *)a1, v17, v15);
        if (v16 == v24)
        {
          *v24 = v18;
          v24[1] = v19;
          v24[2] = v20;
          v24[3] = v21;
          v24[4] = v23;
          v24[5] = v22;
          v24[6] = v28;
        }
        else
        {
          *v24 = *v16;
          v24[1] = v16[1];
          v24[2] = v16[2];
          v24[3] = v16[3];
          v24[4] = v16[4];
          v24[5] = v16[5];
          v24[6] = v16[6];
          *v16 = v18;
          v16[1] = v19;
          v16[2] = v20;
          v16[3] = v21;
          v16[4] = v23;
          v16[5] = v22;
          v16[6] = v28;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((_BOOL8)a1, (uint64_t)(v24 + 7), v17, 0x6DB6DB6DB6DB6DB7 * (((char *)(v24 + 7) - (char *)a1) >> 3));
        }
        v16 -= 7;
      }
      while (v15-- > 2);
      return v27;
    }
  }
  return a3;
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(_BOOL8 result, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v8;
  int64_t v9;
  int64_t v11;
  unint64_t *v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v27 = v4;
    v28 = v5;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - result) >> 3))
    {
      v11 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - result) >> 3)) | 1;
      v12 = (unint64_t *)(result + 56 * v11);
      v13 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - result) >> 3) + 2;
      if (v13 < a3)
      {
        v14 = v12[7];
        if (*v12 < v14
          || v14 >= *v12
          && (result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v22, (_QWORD *)(result + 56 * v11), v12 + 7)))
        {
          v12 += 7;
          v11 = v13;
        }
      }
      v15 = *v12;
      if (*v12 >= *(_QWORD *)a4)
      {
        if (*(_QWORD *)a4 >= v15)
        {
          result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v22, v12, a4);
          if (result)
            return result;
          v15 = *v12;
        }
        v16 = a4[1];
        v22 = *a4;
        v23 = v16;
        v24 = a4[2];
        v25 = *((_QWORD *)a4 + 6);
        *(_QWORD *)a4 = v15;
        *((_QWORD *)a4 + 1) = v12[1];
        *((_QWORD *)a4 + 2) = v12[2];
        *((_QWORD *)a4 + 3) = v12[3];
        *((_QWORD *)a4 + 4) = v12[4];
        *((_QWORD *)a4 + 5) = v12[5];
        *((_QWORD *)a4 + 6) = v12[6];
        if (v9 >= v11)
        {
          while (1)
          {
            v18 = 2 * v11;
            v11 = (2 * v11) | 1;
            v17 = (unint64_t *)(v8 + 56 * v11);
            v19 = v18 + 2;
            if (v18 + 2 < a3)
            {
              v20 = v17[7];
              if (*v17 < v20
                || v20 >= *v17
                && (result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v26, (_QWORD *)(v8 + 56 * v11), v17 + 7)))
              {
                v17 += 7;
                v11 = v19;
              }
            }
            v21 = *v17;
            if (*v17 < (unint64_t)v22)
              break;
            if ((unint64_t)v22 >= v21)
            {
              result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v26, v17, &v22);
              if (result)
                break;
              v21 = *v17;
            }
            *v12 = v21;
            v12[1] = v17[1];
            v12[2] = v17[2];
            v12[3] = v17[3];
            v12[4] = v17[4];
            v12[5] = v17[5];
            v12[6] = v17[6];
            v12 = v17;
            if (v9 < v11)
              goto LABEL_24;
          }
        }
        v17 = v12;
LABEL_24:
        *(_OWORD *)v17 = v22;
        *((_OWORD *)v17 + 1) = v23;
        *((_OWORD *)v17 + 2) = v24;
        v17[6] = v25;
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v13;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    a1 += 7 * v5 + 7;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v9 + 2 < a3)
    {
      v11 = a1[7];
      if (*a1 < v11
        || v11 >= *a1
        && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a1, a1 + 7))
      {
        a1 += 7;
        v5 = v10;
      }
    }
    *v8 = *a1;
    v8[1] = a1[1];
    v8[2] = a1[2];
    v8[3] = a1[3];
    v8[4] = a1[4];
    v8[5] = a1[5];
    v8[6] = a1[6];
  }
  while (v5 <= v7);
  return a1;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 *v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  char v21;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (unint64_t *)(result + 56 * (v4 >> 1));
    v10 = (__int128 *)(a2 - 56);
    v9 = *(_QWORD *)(a2 - 56);
    v11 = *v8;
    if (*v8 >= v9)
    {
      if (v9 < v11)
        return result;
      result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v17, v8, v10);
      if (!result)
        return result;
      v11 = *v8;
    }
    v12 = v10[1];
    v17 = *v10;
    v18 = v12;
    v19 = v10[2];
    v20 = *((_QWORD *)v10 + 6);
    *(_QWORD *)(a2 - 56) = v11;
    *(_QWORD *)(a2 - 48) = v8[1];
    *(_QWORD *)(a2 - 40) = v8[2];
    *(_QWORD *)(a2 - 32) = v8[3];
    *(_QWORD *)(a2 - 24) = v8[4];
    *(_QWORD *)(a2 - 16) = v8[5];
    *(_QWORD *)(a2 - 8) = v8[6];
    if (v4 >= 2)
    {
      while (1)
      {
        v14 = v7 - 1;
        v7 = (v7 - 1) >> 1;
        v13 = (unint64_t *)(v6 + 56 * v7);
        v15 = *v13;
        if (*v13 >= (unint64_t)v17)
        {
          if ((unint64_t)v17 < v15)
            break;
          result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v21, (_QWORD *)(v6 + 56 * v7), &v17);
          if (!result)
            break;
          v15 = *v13;
        }
        v16 = v13[1];
        *v8 = v15;
        v8[1] = v16;
        v8[2] = v13[2];
        v8[3] = v13[3];
        v8[4] = v13[4];
        v8[5] = v13[5];
        v8[6] = v13[6];
        v8 = (unint64_t *)(v6 + 56 * v7);
        if (v14 <= 1)
          goto LABEL_13;
      }
    }
    v13 = v8;
LABEL_13:
    *(_OWORD *)v13 = v17;
    *((_OWORD *)v13 + 1) = v18;
    *((_OWORD *)v13 + 2) = v19;
    v13[6] = v20;
  }
  return result;
}

void std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[8];
    if (v4)
    {
      a2[9] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_QWORD *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::find<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;
  char v9;
  char v10;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v9, v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v10, a2, v5 + 4))
  {
    return v2;
  }
  return v5;
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (*a2 < *a3)
    return 1;
  if (*a3 < *a2)
    return 0;
  v3 = a2[1];
  v4 = a3[1];
  if (v3 < v4)
    return 1;
  if (v4 < v3)
    return 0;
  v5 = a2[2];
  v6 = a3[2];
  if (v5 < v6)
    return 1;
  return v6 >= v5 && a2[3] < a3[3];
}

_OWORD *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__find_equal<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x58uLL);
    v9 = (*a4)[1];
    v7[2] = **a4;
    v7[3] = v9;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 10) = 0;
    *((_QWORD *)v7 + 8) = 0;
    std::__tree<BufferEntry>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__find_equal<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  char v10;
  char v11;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v10, a3, v4 + 4))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, v8, a3))break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *std::vector<std::pair<unsigned long long,unsigned long long>>::vector(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<DYMTLOriginalProcessBuffer>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23C7681AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C7683CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::find<std::tuple<unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = (_QWORD *)(a1 + 8);
  result = std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__lower_bound<std::tuple<unsigned long long,unsigned long long,unsigned long long>>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == result)
    return v3;
  v5 = result[4];
  if (*a2 < v5)
    return v3;
  if (v5 >= *a2)
  {
    v6 = a2[1];
    v7 = result[5];
    if (v6 < v7 || v7 >= v6 && a2[2] < result[6])
      return v3;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__lower_bound<std::tuple<unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, unint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = a4;
  if (a3)
  {
    v5 = *a2;
    v6 = a2[1];
    while (1)
    {
      v7 = a3[4];
      if (v7 >= v5)
      {
        if (v5 < v7)
          goto LABEL_6;
        v8 = a3[5];
        if (v8 >= v6)
          break;
      }
      ++a3;
LABEL_7:
      a3 = (_QWORD *)*a3;
      if (!a3)
        return result;
    }
    if (v6 >= v8)
    {
      if (a3[6] < a2[2])
        ++a3;
      else
        result = a3;
      goto LABEL_7;
    }
LABEL_6:
    result = a3;
    goto LABEL_7;
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::tuple<unsigned long long,unsigned long long,unsigned long long> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__find_equal<std::tuple<unsigned long long,unsigned long long,unsigned long long>>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v9 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v9;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    std::__tree<BufferEntry>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__find_equal<std::tuple<unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    v8 = a3[2];
    while (1)
    {
      while (1)
      {
        v9 = v4;
        v10 = v4[4];
        if (v6 >= v10)
          break;
LABEL_4:
        v4 = (_QWORD *)*v9;
        result = v9;
        if (!*v9)
          goto LABEL_17;
      }
      if (v10 >= v6)
      {
        v11 = v9[5];
        if (v7 < v11 || v11 >= v7 && v8 < v9[6])
          goto LABEL_4;
        v12 = v9[5];
        if (v12 >= v7 && (v7 < v12 || v9[6] >= v8))
          goto LABEL_17;
      }
      result = v9 + 1;
      v4 = (_QWORD *)v9[1];
      if (!v4)
        goto LABEL_17;
    }
  }
  v9 = result;
LABEL_17:
  *a2 = v9;
  return result;
}

void sub_23C768804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C768910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C768A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_23C768BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_23C768CA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C768DC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_23C769394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_23C7696E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C7698E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C769C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C769F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C76A178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C76EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,void *a38,uint64_t a39,void *a40)
{
  void *v40;

  _Unwind_Resume(a1);
}

void GPUTraceResourceResolutionDecode(NSDictionary *a1@<X0>, uint64_t a2@<X8>)
{
  NSDictionary *v3;
  void *v4;
  void *v5;
  void *v6;
  NSDictionary *v7;

  v3 = a1;
  *(_OWORD *)a2 = xmmword_23C7A4990;
  *(_QWORD *)(a2 + 16) = 32;
  if (v3)
  {
    v7 = v3;
    -[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", CFSTR("width"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("height"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", CFSTR("format"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
      *(_QWORD *)a2 = objc_msgSend(v4, "unsignedIntegerValue");
    if (v5)
      *(_QWORD *)(a2 + 8) = objc_msgSend(v5, "unsignedIntegerValue");
    if (v6)
      *(_QWORD *)(a2 + 16) = objc_msgSend(v6, "unsignedIntegerValue");

    v3 = v7;
  }

}

void sub_23C77007C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t GPUThumbnailOptionsColorGetIndex(NSString *a1)
{
  NSString *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  v2 = objc_msgSend(CFSTR("Color."), "length");
  -[NSString substringWithRange:](v1, "substringWithRange:", v2, -[NSString length](v1, "length") - v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "integerValue");

  return v4;
}

void sub_23C7701C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C770410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C7704E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL IsFuncEnumPixelHistoryInterestingRenderPassStateItems(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 + 16279) > 0x3C || ((1 << (a1 - 105)) & 0x100000000700FE01) == 0)
    return (a1 + 16077) < 2;
  return result;
}

void sub_23C7707FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23C7709F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23C770A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C771400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_23C77161C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C771688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C771764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_23C771894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C771910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C7719C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C771A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_23C771B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C771C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C771DA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C7721B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_23C772358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C7723B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C77249C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  void *v11;

  std::__tree<std::__value_type<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>,std::__map_value_compare<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::less<objc_object  {objcproto9MTLBuffer}*>,true>,std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}><std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_23C7724F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C772A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,_QWORD *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,id a62)
{
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;

  _Block_object_dispose(&a28, 8);
  std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a10, a35);

  _Block_object_dispose(&a49, 8);
  std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a12, a56);

  _Block_object_dispose((const void *)(v71 - 184), 8);
  std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a14, *(_QWORD **)(v71 - 128));

  _Unwind_Resume(a1);
}

void sub_23C772BEC()
{
  JUMPOUT(0x23C772BD8);
}

void sub_23C772BF4()
{
  JUMPOUT(0x23C772BDCLL);
}

void sub_23C772BFC()
{
  JUMPOUT(0x23C772BE0);
}

_QWORD *__Block_byref_object_copy__4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
}

id *DYMTLBoundBufferInfo::operator=(id *location, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;

  v4 = location[1];
  if (v4)
    free(v4);
  objc_storeStrong(location, *(id *)a2);
  v5 = *(void **)(a2 + 16);
  location[1] = *(id *)(a2 + 8);
  location[2] = v5;
  if (*(_QWORD *)(a2 + 8))
  {
    v6 = malloc_type_malloc((size_t)v5, 0x76E40FuLL);
    location[1] = v6;
    memcpy(v6, *(const void **)(a2 + 8), (size_t)location[2]);
  }
  return location;
}

void sub_23C772EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[24 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[24 * v13];
    *(_QWORD *)v15 = *(_QWORD *)a2;
    v16 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(v15 + 8) = v16;
    v17[2] = v15 + 24;
    std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>::__swap_out_circular_buffer(a1, v17);
    v9 = a1[1];
    result = std::__split_buffer<DYMTLReplayerIAB::Usage>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(v7 + 8) = v8;
    v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void sub_23C773038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<DYMTLReplayerIAB::Usage>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23C773258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_23C7734BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_23C773770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  _Block_object_dispose(&a25, 8);
  std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a11, a32);

  _Unwind_Resume(a1);
}

void sub_23C7737F8()
{
  JUMPOUT(0x23C7737E4);
}

void sub_23C773800()
{
  JUMPOUT(0x23C7737E8);
}

void sub_23C773808()
{
  JUMPOUT(0x23C7737ECLL);
}

void sub_23C773A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_23C773D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  _Block_object_dispose(&a23, 8);
  *(_QWORD *)(v26 - 96) = a10;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 96));
  a23 = (void **)(v26 - 120);
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__478(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__479(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_23C773E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_23C7741E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C7742DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77438C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C774404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C7744F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C774954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_23C774AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C774B34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C774DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C775570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  va_list va;

  va_start(va, a14);

  GPUTools::AutoCATransaction::~AutoCATransaction((GPUTools::AutoCATransaction *)va);
  _Unwind_Resume(a1);
}

void sub_23C775888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C775A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  GPUTools::AutoCATransaction::~AutoCATransaction((GPUTools::AutoCATransaction *)(v4 - 96));
  _Unwind_Resume(a1);
}

void sub_23C775B74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C775C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_23C775D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23C775F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23C7769E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23C776BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__600(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_23C77740C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C7774BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C777728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23C7779F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23C777C44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_23C778144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23C778470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23C778600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_23C7787DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C7788B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C778A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C778AFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C778C6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  id *v3;

  _Unwind_Resume(a1);
}

void sub_23C779184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{

  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long long>::__append((char **)a1, a2 - v2);
  }
}

void sub_23C779918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  void *v25;

  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<unsigned long long,BOOL>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BOOL>>>::~__hash_table((uint64_t)&a23);
  v25 = *(void **)(v23 - 120);
  if (v25)
  {
    *(_QWORD *)(v23 - 112) = v25;
    operator delete(v25);
  }

  _Unwind_Resume(a1);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 48;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(v3, a2);
    v7 = &v6[48 * v5];
    v9 = &v6[48 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 3);
        v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_23C779B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_23C779CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_23C77A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_23C77A298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23C77A6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_23C77A818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77A880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77A8EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77A960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77A9E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77ABAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C77AC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C77AD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C77AF88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

GPUTools::AutoCATransaction *GPUTools::AutoCATransaction::AutoCATransaction(GPUTools::AutoCATransaction *this, int a2, char a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  objc_msgSend(MEMORY[0x24BDE57D8], "animationTimingFunction");
  *((_QWORD *)this + 1) = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDE57D8], "animationDuration");
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = objc_msgSend(MEMORY[0x24BDE57D8], "disableActions");
  *((_BYTE *)this + 33) = a3;
  objc_msgSend(MEMORY[0x24BDE57D8], "completionBlock");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "copy");
  v9 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v8;

  if (a2)
    objc_msgSend(MEMORY[0x24BDE57D8], "setDisableActions:", 1);
  return this;
}

void sub_23C77B7A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GPUTools::AutoCATransaction::~AutoCATransaction(GPUTools::AutoCATransaction *this)
{
  void *v2;
  id v3;

  if (*((_BYTE *)this + 33))
    objc_msgSend(MEMORY[0x24BDE57D8], "flush");
  v2 = (void *)MEMORY[0x24BDE57D8];
  v3 = *((id *)this + 1);
  objc_msgSend(v2, "setAnimationTimingFunction:", v3);

  objc_msgSend(MEMORY[0x24BDE57D8], "setAnimationDuration:", *((double *)this + 2));
  objc_msgSend(MEMORY[0x24BDE57D8], "setCompletionBlock:", *((_QWORD *)this + 3));
  objc_msgSend(MEMORY[0x24BDE57D8], "setDisableActions:", *((unsigned __int8 *)this + 32));

}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>>>::__emplace_unique_key_args<unsigned long,unsigned long,std::vector<std::pair<unsigned int,unsigned int>>&>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>>>::__construct_node_hash<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>&>(a1, *a2, a3, a4, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23C77BAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>>>::__construct_node_hash<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  void *v10;
  char *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  *((_QWORD *)v10 + 2) = *a3;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 3) = 0;
  result = std::vector<std::pair<unsigned int,unsigned int>>::__init_with_size[abi:ne180100]<std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>((char *)v10 + 24, *a4, a4[1], a4[1] - *a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_23C77BB90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned int,unsigned int>>::__init_with_size[abi:ne180100]<std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23C77BC00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,EncoderInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,EncoderInfo>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,EncoderInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,EncoderInfo>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,EncoderInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,EncoderInfo>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,EncoderInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,EncoderInfo>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,EncoderInfo>(uint64_t a1, unint64_t *a2, _QWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  __int128 v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x38uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  v14 = a4[1];
  *(_OWORD *)(v12 + 24) = *a4;
  *(_OWORD *)(v12 + 40) = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v12 = *v22;
LABEL_38:
    *v22 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_23C77BF00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>,std::__map_value_compare<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::less<objc_object  {objcproto9MTLBuffer}*>,true>,std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}><std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>,std::__map_value_compare<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::less<objc_object  {objcproto9MTLBuffer}*>,true>,std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}><std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>,std::__map_value_compare<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::less<objc_object  {objcproto9MTLBuffer}*>,true>,std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}><std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a1, a2[1]);
    free((void *)a2[6]);

    operator delete(a2);
  }
}

uint64_t std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::reverse_iterator<MTLArgument * {__strong}*>,MTLArgument * {__strong}*,MTLArgument * {__strong}*>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::reverse_iterator<MTLArgument * {__strong}*>,MTLArgument * {__strong}*,MTLArgument * {__strong}*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_QWORD *)(a3 - 24);
      a3 -= 24;
      *(_QWORD *)(v8 - 24) = v9;
      v8 -= 24;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v8 + 8) = v10;
      v7 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::reverse_iterator<MTLArgument * {__strong}*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::reverse_iterator<MTLArgument * {__strong}*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CAMetalLayer * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CAMetalLayer * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CAMetalLayer * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CAMetalLayer * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C77C324(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,unsigned long long &>(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C77C554(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6)
              return result;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, *a2, a4, (uint64_t)&v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *v20 = *v18;
    *v18 = v20;
  }
  else
  {
    *v20 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      v19 = *(_QWORD *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20;
    }
  }
  result = v20;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23C77C778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x658uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = std::pair<unsigned long long const,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>::pair[abi:ne180100]<unsigned long long const&>((uint64_t)(v8 + 2), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_23C77C7F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned long long const,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>::pair[abi:ne180100]<unsigned long long const&>(uint64_t a1, _QWORD *a2)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *a2;
  v3 = (_OWORD *)(a1 + 1176);
  bzero((void *)(a1 + 8), 0x640uLL);
  v4 = 24;
  do
  {
    v5 = a1 + v4;
    *(_OWORD *)(v5 + 32) = 0uLL;
    *(_OWORD *)(v5 + 48) = 0uLL;
    *(_OWORD *)v5 = 0uLL;
    *(_OWORD *)(v5 + 16) = 0uLL;
    *(_QWORD *)(v5 + 64) = 0;
    *(_QWORD *)(v5 + 72) = 1;
    *(_OWORD *)(v5 + 80) = 0uLL;
    *(_OWORD *)(v5 + 96) = 0uLL;
    *(_QWORD *)(v5 + 112) = 0x3FF0000000000000;
    v4 += 144;
    *(_QWORD *)(v5 + 128) = 0;
    *(_QWORD *)(v5 + 136) = 0;
  }
  while ((_OWORD *)(v5 + 144) != v3);
  *(_QWORD *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *v3 = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_QWORD *)(a1 + 1248) = 1;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_QWORD *)(a1 + 1288) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_QWORD *)(a1 + 1392) = 1;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_QWORD *)(a1 + 1432) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1456) = 0;
  *(_QWORD *)(a1 + 1448) = 0;
  return a1;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,CommandBufferInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CommandBufferInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CommandBufferInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CommandBufferInfo>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,CommandBufferInfo>(uint64_t a1, unint64_t *a2, _QWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_23C77CAF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C77CD08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_23C77CEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

BOOL ShaderDebugger::MmapFile::open(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  int v6;
  void *v7;
  stat v9;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  if (stat(v4, &v9) || (v9.st_mode & 0xF000) != 0x8000)
    return 0;
  *(_QWORD *)(a1 + 32) = v9.st_size;
  if (*(char *)(a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  v6 = open(v5, 0, 0);
  *(_DWORD *)(a1 + 24) = v6;
  v7 = mmap(0, *(_QWORD *)(a1 + 32), 1, 2, v6, 0);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v7;
  return *(_DWORD *)(a1 + 24) != -1;
}

uint64_t ShaderDebugger::MmapFile::close(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 24) != -1)
  {
    v1 = this;
    munmap(*(void **)(this + 40), *(_QWORD *)(this + 32));
    this = close(*(_DWORD *)(v1 + 24));
    *(_DWORD *)(v1 + 24) = -1;
  }
  return this;
}

uint64_t ShaderDebugger::TraceBufferVersionedHeader::TraceBufferVersionedHeader(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = &off_250D6FA68;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

void ShaderDebugger::TraceBufferVersionedHeader::~TraceBufferVersionedHeader(ShaderDebugger::TraceBufferVersionedHeader *this)
{
  JUMPOUT(0x242623D28);
}

uint64_t ShaderDebugger::VertexTraceBufferVersionedHeader::getHeaderSize(ShaderDebugger::VertexTraceBufferVersionedHeader *this)
{
  int v1;
  unsigned int *v2;
  uint64_t v3;

  v1 = *((_DWORD *)this + 4);
  if ((v1 - 1) < 2)
  {
    v2 = (unsigned int *)(*((_QWORD *)this + 1) + 20);
    v3 = 24;
    return v3 + 4 * *v2;
  }
  if (!v1)
  {
    v2 = (unsigned int *)(*((_QWORD *)this + 1) + 16);
    v3 = 20;
    return v3 + 4 * *v2;
  }
  return 0;
}

unint64_t ShaderDebugger::FragmentTraceBufferVersionedHeader::getHeaderSize(ShaderDebugger::FragmentTraceBufferVersionedHeader *this)
{
  return (unint64_t)(*((_DWORD *)this + 4) < 3u) << 6;
}

uint64_t ShaderDebugger::KernelTraceBufferVersionedHeader::getHeaderSize(ShaderDebugger::KernelTraceBufferVersionedHeader *this)
{
  return 48;
}

uint64_t ShaderDebugger::PostTessellationVertexTraceBufferVersionedHeader::getHeaderSize(ShaderDebugger::PostTessellationVertexTraceBufferVersionedHeader *this)
{
  int v1;
  unsigned int *v2;
  uint64_t v3;

  v1 = *((_DWORD *)this + 4);
  if ((v1 - 1) < 2)
  {
    v2 = (unsigned int *)(*((_QWORD *)this + 1) + 20);
    v3 = 24;
    return v3 + 4 * *v2;
  }
  if (!v1)
  {
    v2 = (unsigned int *)(*((_QWORD *)this + 1) + 16);
    v3 = 20;
    return v3 + 4 * *v2;
  }
  return 0;
}

void ShaderDebugger::MmapFile::~MmapFile(void **this)
{
  ShaderDebugger::MmapFile::close((uint64_t)this);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void ShaderDebugger::VertexTraceBufferVersionedHeader::~VertexTraceBufferVersionedHeader(ShaderDebugger::VertexTraceBufferVersionedHeader *this)
{
  JUMPOUT(0x242623D28);
}

void ShaderDebugger::FragmentTraceBufferVersionedHeader::~FragmentTraceBufferVersionedHeader(ShaderDebugger::FragmentTraceBufferVersionedHeader *this)
{
  JUMPOUT(0x242623D28);
}

void ShaderDebugger::KernelTraceBufferVersionedHeader::~KernelTraceBufferVersionedHeader(ShaderDebugger::KernelTraceBufferVersionedHeader *this)
{
  JUMPOUT(0x242623D28);
}

void ShaderDebugger::PostTessellationVertexTraceBufferVersionedHeader::~PostTessellationVertexTraceBufferVersionedHeader(ShaderDebugger::PostTessellationVertexTraceBufferVersionedHeader *this)
{
  JUMPOUT(0x242623D28);
}

void sub_23C77D6A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77D728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77D834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  free(a11);

  _Unwind_Resume(a1);
}

void sub_23C77D8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23C77D9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  free(a11);

  _Unwind_Resume(a1);
}

void sub_23C77DC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C77DDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_23C77DF04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77DF98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77E034(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77E278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_23C77E3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

DYMTLComputeCommandEncoderStateTracker *DYMTLNewStatefulComputeCommandEncoder(void *a1, uint64_t a2)
{
  void *v3;
  DYMTLComputeCommandEncoderStateTracker *v4;

  objc_msgSend(a1, "computeCommandEncoderWithDispatchType:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[DYMTLComputeCommandEncoderStateTracker initWithEncoder:dispatchType:]([DYMTLComputeCommandEncoderStateTracker alloc], "initWithEncoder:dispatchType:", v3, a2);

  return v4;
}

void sub_23C77E4E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void DYMTLBoundBufferInfo::DYMTLBoundBufferInfo(DYMTLBoundBufferInfo *this, const void *a2, size_t size)
{
  void *v6;

  this->m_buffer = 0;
  this->m_bytes = 0;
  this->m_offsetOrLength = size;
  if (a2)
  {
    if (size)
    {
      v6 = malloc_type_malloc(size, 0xC7CCC3EuLL);
      this->m_bytes = v6;
      memcpy(v6, a2, size);
    }
  }
}

void sub_23C77E550(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void sub_23C77EA2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23C77EB98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C77ED2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C77EE30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77EEF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77EFA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C77F1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23C77F714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_23C77FC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_23C780110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_23C780680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_23C780B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_23C780D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_23C780DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C780EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_23C78112C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_23C781210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C781298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C7814A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

char *std::vector<MTLViewport>::assign(char **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 4) >= a2)
  {
    v16 = (a1[1] - result) / 48;
    if (v16 >= a2)
      v17 = a2;
    else
      v17 = (a1[1] - result) / 48;
    for (; v17; --v17)
    {
      v18 = *a3;
      v19 = a3[2];
      *((_OWORD *)result + 1) = a3[1];
      *((_OWORD *)result + 2) = v19;
      *(_OWORD *)result = v18;
      result += 48;
    }
    if (a2 <= v16)
    {
      a1[1] = &(*a1)[48 * a2];
    }
    else
    {
      v20 = a1[1];
      v21 = &v20[48 * (a2 - v16)];
      v22 = -48 * v16 + 48 * a2;
      do
      {
        v23 = *a3;
        v24 = a3[2];
        *((_OWORD *)v20 + 1) = a3[1];
        *((_OWORD *)v20 + 2) = v24;
        *(_OWORD *)v20 = v23;
        v20 += 48;
        v22 -= 48;
      }
      while (v22);
      a1[1] = v21;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0x555555555555555)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v9;
    result = std::vector<MTLViewport>::__vallocate[abi:ne180100](a1, v10);
    v11 = a1[1];
    v12 = &v11[48 * a2];
    v13 = 48 * a2;
    do
    {
      v14 = *a3;
      v15 = a3[2];
      *((_OWORD *)v11 + 1) = a3[1];
      *((_OWORD *)v11 + 2) = v15;
      *(_OWORD *)v11 = v14;
      v11 += 48;
      v13 -= 48;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

char *std::vector<MTLScissorRect>::assign(char **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 5)
  {
    v14 = (a1[1] - result) >> 5;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (a1[1] - result) >> 5;
    for (; v15; --v15)
    {
      v16 = a3[1];
      *(_OWORD *)result = *a3;
      *((_OWORD *)result + 1) = v16;
      result += 32;
    }
    if (a2 <= v14)
    {
      a1[1] = &(*a1)[32 * a2];
    }
    else
    {
      v17 = a1[1];
      v18 = &v17[32 * (a2 - v14)];
      v19 = 32 * a2 - 32 * v14;
      do
      {
        v20 = a3[1];
        *(_OWORD *)v17 = *a3;
        *((_OWORD *)v17 + 1) = v20;
        v17 += 32;
        v19 -= 32;
      }
      while (v19);
      a1[1] = v18;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 59)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 4;
    if (v6 >> 4 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<MTLScissorRect>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[32 * a2];
    v12 = 32 * a2;
    do
    {
      v13 = a3[1];
      *(_OWORD *)v10 = *a3;
      *((_OWORD *)v10 + 1) = v13;
      v10 += 32;
      v12 -= 32;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void sub_23C7817F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C7818AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  free(a11);

  _Unwind_Resume(a1);
}

void sub_23C78194C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23C781A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  free(a11);

  _Unwind_Resume(a1);
}

void sub_23C781BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  free(a11);

  _Unwind_Resume(a1);
}

void sub_23C781C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23C781D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  free(a11);

  _Unwind_Resume(a1);
}

void sub_23C781F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  free(a11);

  _Unwind_Resume(a1);
}

void sub_23C781FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23C7820D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  free(a11);

  _Unwind_Resume(a1);
}

void sub_23C782310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C78255C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C782C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C782E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_23C782F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C7830A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_23C7831BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23C783250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C7832D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C7834FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_23C783630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void enumerateObjects(_QWORD *a1, void *a2)
{
  void (**v3)(id, _QWORD *, unint64_t, char *);
  unint64_t v4;
  uint64_t v5;
  char v6;

  v3 = a2;
  v4 = 0;
  v6 = 0;
  while (1)
  {
    v5 = a1[1];
    if (!*a1)
      break;
    if (!v5)
      goto LABEL_7;
LABEL_4:
    if (v4 > 0x1D)
      goto LABEL_10;
LABEL_9:
    ++v4;
    a1 += 3;
  }
  if (!v5)
    goto LABEL_4;
LABEL_7:
  v3[2](v3, a1, v4, &v6);
  if (!v6 && v4 < 0x1E)
    goto LABEL_9;
LABEL_10:

}

{
  void (**v3)(id, _QWORD *, unint64_t, char *);
  unint64_t v4;
  BOOL v5;
  char v6;

  v3 = a2;
  v4 = 0;
  v6 = 0;
  while (!*a1)
  {
    if (v4 > 0xE)
      goto LABEL_11;
LABEL_10:
    ++v4;
    a1 += 2;
  }
  v3[2](v3, a1, v4, &v6);
  if (v6)
    v5 = 1;
  else
    v5 = v4 >= 0xF;
  if (!v5)
    goto LABEL_10;
LABEL_11:

}

void sub_23C783714(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void enumerateObjects(uint64_t a1, void *a2)
{
  void (**v3)(id, uint64_t, unint64_t, char *);
  unint64_t v4;
  uint64_t v5;
  char v6;

  v3 = a2;
  v4 = 0;
  v6 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 8 * v4);
    if (v5)
      break;
    if (v4 > 0x7E)
      goto LABEL_8;
LABEL_7:
    ++v4;
  }
  v3[2](v3, v5, v4, &v6);
  if (!v6 && v4 < 0x7F)
    goto LABEL_7;
LABEL_8:

}

void sub_23C7837B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C783854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C783948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

DYMTLRenderCommandEncoderStateTracker *DYMTLNewStatefulRenderCommandEncoder(void *a1, void *a2)
{
  id v3;
  void *v4;
  DYMTLRenderCommandEncoderStateTracker *v5;

  v3 = a2;
  objc_msgSend(a1, "renderCommandEncoderWithDescriptor:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[DYMTLRenderCommandEncoderStateTracker initWithEncoder:descriptor:]([DYMTLRenderCommandEncoderStateTracker alloc], "initWithEncoder:descriptor:", v4, v3);

  return v5;
}

{
  id v3;
  id v4;
  DYMTLRenderCommandEncoderStateTracker *v5;

  v3 = a1;
  v4 = a2;
  v5 = -[DYMTLRenderCommandEncoderStateTracker initWithDevice:descriptor:]([DYMTLRenderCommandEncoderStateTracker alloc], "initWithDevice:descriptor:", v3, v4);

  return v5;
}

void sub_23C783B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

DYMTLRenderCommandEncoderStateTracker *DYMTLNewStatefulRenderCommandEncoder(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  DYMTLRenderCommandEncoderStateTracker *v5;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "renderCommandEncoder");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    DYMTLGetAssociatedObject(v2, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[DYMTLRenderCommandEncoderStateTracker initWithEncoder:descriptor:]([DYMTLRenderCommandEncoderStateTracker alloc], "initWithEncoder:descriptor:", v3, v4);

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_23C783C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C783C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<MTLViewport>::__init_with_size[abi:ne180100]<MTLViewport*,MTLViewport*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MTLViewport>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C783D00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MTLViewport>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

char *std::vector<MTLScissorRect>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DYMTLReplayerIAB>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *std::vector<MTLViewport>::__assign_with_size[abi:ne180100]<MTLViewport const*,MTLViewport const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    result = std::vector<MTLViewport>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4)
    goto LABEL_16;
  v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<MTLScissorRect>::__assign_with_size[abi:ne180100]<MTLScissorRect const*,MTLScissorRect const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<MTLScissorRect>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,DYMTLStoreInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,DYMTLStoreInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,DYMTLStoreInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,DYMTLStoreInfo>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_23C7841F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;

  v2 = a1[1] - *a1;
  if (!v2)
    return 0;
  v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  v4 = (_QWORD *)*a1;
  do
  {
    v5 = v3 >> 1;
    v6 = &v4[3 * (v3 >> 1)];
    v8 = *v6;
    v7 = v6 + 3;
    v3 += ~(v3 >> 1);
    if (v8 > a2)
      v3 = v5;
    else
      v4 = v7;
  }
  while (v3);
  if (v4 == (_QWORD *)*a1 || *(v4 - 2) + *(v4 - 3) <= a2)
    return 0;
  else
    return *(v4 - 1);
}

uint64_t *GPUTools::MTL::Utils::DYMTLCreateIndirectCommandEncoder@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  *(_QWORD *)(a2 + 104) = -1;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)(a2 + 88) = v2;
  *(_OWORD *)(a2 + 72) = v2;
  *(_OWORD *)(a2 + 56) = v2;
  *(_OWORD *)(a2 + 40) = v2;
  *(_OWORD *)(a2 + 24) = v2;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)a2 = 0;
  if (*((_BYTE *)result + 9))
  {
    v3 = 8;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 8;
    v3 = 16;
  }
  if (!*((_BYTE *)result + 8))
  {
    v4 = result[2];
    v5 = result[3];
    *(_QWORD *)(a2 + 16) = v3;
    *(_QWORD *)(a2 + 24) = v3 + 8 * v4;
    v6 = v4 + v5;
    v7 = v3 + 8 * v6;
    v8 = result[5];
    v9 = v6 + result[4];
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = v3 + 8 * v9;
    v10 = v9 + v8;
    *(_QWORD *)(a2 + 48) = v3 + 8 * v10;
    v3 += 8 * (v10 + result[6]);
  }
  v11 = result[7];
  v12 = result[8];
  *(_QWORD *)(a2 + 56) = v3;
  *(_QWORD *)(a2 + 64) = v3 + 8 * v11;
  v13 = v11 + v12;
  v14 = v3 + 8 * (v11 + v12);
  *(_QWORD *)(a2 + 72) = v14;
  v15 = *result;
  if (*((_BYTE *)result + 11))
  {
    if ((v15 & 0xF) != 0)
    {
      v16 = result + 2;
    }
    else
    {
      if ((v15 & 0x60) == 0)
        goto LABEL_12;
      v16 = result + 6;
    }
    v17 = *v16;
    v14 = v3 + 8 * (v13 + *v16);
    *(_QWORD *)(a2 + 80) = v17;
  }
LABEL_12:
  if (*((_BYTE *)result + 12))
    v18 = v14 + 8;
  else
    v18 = v14;
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = v18;
  v19 = (v15 << 63 >> 63) & 0x28;
  if ((v15 & 2) != 0)
    v19 = 56;
  v20 = 72;
  if ((v15 & 4) != 0)
    v19 = 72;
  if ((v15 & 8) != 0)
    v19 = 80;
  if (v19 <= 0x48)
    v21 = 72;
  else
    v21 = v19;
  if ((v15 & 0x80) != 0)
    v19 = v21;
  if (v19 > 0x48)
    v20 = v19;
  if ((v15 & 0x100) != 0)
    v19 = v20;
  v22 = (v15 & 0x60) == 0;
  v23 = 120;
  if (v22)
    v23 = v19;
  *(_QWORD *)(a2 + 104) = v18 + v23;
  return result;
}

uint64_t GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::commandType(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return *(_QWORD *)&a2[*(_QWORD *)this];
}

uint64_t GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getPipelineStateUniqueIdentifier(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return *(_QWORD *)&a2[*((_QWORD *)this + 1)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getTessellationFactorArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawPatchesArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12) + 24];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedPatchesArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12) + 24];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawMeshThreadgroupsArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawMeshThreadsArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::dispatchThreadsPerTileArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreadgroupsArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12) + 72];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreadsArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12) + 72];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::indirectDispatchArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getVertexBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 2)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getFragmentBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 3)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getObjectBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 4)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getMeshBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 5)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getKernelBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 6)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getThreadgroupMemoryLength(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 8)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getObjectThreadgroupMemoryLength(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 7)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getAttributeStrides(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((_QWORD *)this + 9)];
}

_QWORD *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setCommandType(_QWORD *this, char *a2, uint64_t a3)
{
  *(_QWORD *)&a2[*this] = a3;
  return this;
}

uint64_t GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setPipelineStateUniqueIdentifier(uint64_t this, char *a2, uint64_t a3)
{
  *(_QWORD *)&a2[*(_QWORD *)(this + 8)] = a3;
  return this;
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawPrimitives(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedPrimitives(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setTessellationFactorArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawPatches(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 12) + 24];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedPatches(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 12) + 24];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::dispatchThreadsPerTile(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreadgroups(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 12) + 72];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreads(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 12) + 72];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setIndirectDispatchArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 12)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setVertexBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 2)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setFragmentBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 3)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setKernelBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 6)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setThreadgroupMemoryLength(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((_QWORD *)this + 8)];
}

__CFData *GPUTools::MTL::Utils::DYMTLConvertIndirectCommandBufferDataToFBufStream(uint64_t a1, void *a2, char a3, unint64_t a4, uint64_t a5, void *a6, __int16 a7)
{
  id v13;
  __CFData *v14;
  GPUTools::FB::Stream *v15;
  int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  GPUTools::FB::Stream *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t j;
  uint64_t k;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t i;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  unsigned int v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  id v129;
  __CFData *v130;
  __CFData *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  _QWORD v146[2];
  int v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _BYTE v155[64];
  _QWORD v156[2];
  int v157;
  _BYTE v158[24];
  uint64_t v159;

  v159 = *MEMORY[0x24BDAC8D0];
  v116 = a2;
  v117 = a6;
  if (GPUTools::MTL::Utils::IsIndirectCommandBufferRender())
  {
    v125 = v116;
    v13 = v117;
    v14 = (__CFData *)objc_alloc_init(MEMORY[0x24BDBCEC8]);
    v15 = (GPUTools::FB::Stream *)GPUTools::FB::Stream::Stream((GPUTools::FB::Stream *)v155, v14);
    GPUTools::FB::Stream::Open(v15, CFSTR("ConvertIndirectCommandBufferDataToFBufStreamRender"));
    v153 = 0u;
    v154 = 0u;
    v151 = 0u;
    v152 = 0u;
    v149 = 0u;
    v150 = 0u;
    v148 = 0u;
    GPUTools::MTL::Utils::DYMTLCreateIndirectCommandEncoder((uint64_t *)a1, (uint64_t)&v148);
    v156[0] = 0;
    v156[1] = 0;
    v157 = 0;
    if ((a7 & 0x8004) == 4)
      v16 = 4;
    else
      v16 = 32772;
    v120 = v16;
    v123 = a4 + a5;
    if (a4 < a4 + a5)
    {
      v115 = v16 | 2;
      v17 = *((_QWORD *)&v154 + 1);
      v118 = v154;
      v18 = (char *)(*((_QWORD *)&v152 + 1) + a4 * *((_QWORD *)&v154 + 1));
      v142 = v149 + a4 * *((_QWORD *)&v154 + 1);
      v140 = *((_QWORD *)&v149 + 1) + a4 * *((_QWORD *)&v154 + 1);
      v138 = v151 + a4 * *((_QWORD *)&v154 + 1);
      v136 = v150 + a4 * *((_QWORD *)&v154 + 1);
      v134 = *((_QWORD *)&v150 + 1) + a4 * *((_QWORD *)&v154 + 1);
      v144 = *((_QWORD *)&v151 + 1) + a4 * *((_QWORD *)&v154 + 1);
      v19 = v148;
      v130 = v14;
      do
      {
        v24 = objc_msgSend(objc_retainAutorelease(v125), "bytes");
        v25 = v24 + a4 * v17;
        v132 = *(_QWORD *)(v25 + v19);
        if (v132)
        {
          v128 = v18;
          if (!*(_BYTE *)(a1 + 9))
          {
            objc_msgSend(v13, "renderPipelineIdForUniqueIdentifier:", *(_QWORD *)(v25 + *((_QWORD *)&v19 + 1)));
            GPUTools::FB::Encode((uint64_t)v156, 4294951017, 4, (uint64_t)"Ct", v26, v27, v28, v29, a3);
            GPUTools::FB::Stream::Write((uint64_t)v155);
          }
          v126 = v24 + a4 * v17;
          if (!*(_BYTE *)(a1 + 8))
          {
            if (*(_QWORD *)(a1 + 16))
            {
              v30 = 0;
              v31 = &v18[v24];
              do
              {
                objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v24 + v142 + 8 * v30));
                if (!*(_BYTE *)(a1 + 11) || *(_QWORD *)&v31[8 * v30] == -1)
                  GPUTools::FB::Encode((uint64_t)v156, 4294951018, 4, (uint64_t)"Ctulul", v32, v33, v34, v35, a3);
                else
                  GPUTools::FB::Encode((uint64_t)v156, 4294952021, 4, (uint64_t)"Ctulul", v32, v33, v34, v35, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
                ++v30;
              }
              while (v30 < *(_QWORD *)(a1 + 16));
            }
            if (*(_QWORD *)(a1 + 24))
            {
              v36 = 0;
              do
              {
                objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v24 + v140 + 8 * v36));
                GPUTools::FB::Encode((uint64_t)v156, 4294951033, 4, (uint64_t)"Ctulul", v37, v38, v39, v40, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
                ++v36;
              }
              while (v36 < *(_QWORD *)(a1 + 24));
            }
            if (*(_QWORD *)(a1 + 48))
            {
              v41 = 0;
              do
              {
                objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v24 + v138 + 8 * v41));
                GPUTools::FB::Encode((uint64_t)v156, 4294951154, 4, (uint64_t)"Ctulul", v42, v43, v44, v45, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
                ++v41;
              }
              while (v41 < *(_QWORD *)(a1 + 48));
            }
            if (*(_QWORD *)(a1 + 32))
            {
              v46 = 0;
              do
              {
                objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v24 + v136 + 8 * v46));
                GPUTools::FB::Encode((uint64_t)v156, 4294951905, 4, (uint64_t)"Ctulul", v47, v48, v49, v50, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
                ++v46;
              }
              while (v46 < *(_QWORD *)(a1 + 32));
            }
            if (*(_QWORD *)(a1 + 40))
            {
              v51 = 0;
              do
              {
                objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v24 + v134 + 8 * v51));
                GPUTools::FB::Encode((uint64_t)v156, 4294951895, 4, (uint64_t)"Ctulul", v52, v53, v54, v55, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
                ++v51;
              }
              while (v51 < *(_QWORD *)(a1 + 40));
            }
          }
          v18 = v128;
          if (*(_QWORD *)(a1 + 56))
          {
            v56 = 0;
            do
            {
              GPUTools::FB::Encode((uint64_t)v156, 4294951915, 0, (uint64_t)"Culul", v20, v21, v22, v23, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              ++v56;
            }
            while (v56 < *(_QWORD *)(a1 + 56));
          }
          switch(v132)
          {
            case 1:
              GPUTools::FB::Encode((uint64_t)v156, 4294951078, v120, (uint64_t)"Cululululul", v20, v21, v22, v23, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              break;
            case 2:
              objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v126 + v118 + 24));
              GPUTools::FB::Encode((uint64_t)v156, 4294951079, v120, (uint64_t)"Cululultulullul", v57, v58, v59, v60, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              break;
            case 3:
            case 5:
            case 6:
            case 7:
              break;
            case 4:
              objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v126 + v118));
              objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v126 + v118 + 48));
              GPUTools::FB::Encode((uint64_t)v156, 4294951344, v120, (uint64_t)"Cululultululultulul", v61, v62, v63, v64, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              break;
            case 8:
              objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v126 + v118));
              GPUTools::FB::Encode((uint64_t)v156, 4294951148, v120, (uint64_t)"Ctulul", v65, v66, v67, v68, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              GPUTools::FB::Encode((uint64_t)v156, 4294951164, v120, (uint64_t)"Cf", v69, v70, v71, v72, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v126 + v118 + 48));
              objc_msgSend(v13, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v126 + v118 + 56));
              GPUTools::FB::Encode((uint64_t)v156, 4294951151, v120, (uint64_t)"Cululultultululul", v73, v74, v75, v76, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              break;
            default:
              if (v126 == 128)
              {
                GPUTools::FB::Encode((uint64_t)v156, 4294951880, v120, (uint64_t)"C@3ul@3ul@3ul", v20, v21, v22, v23, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
              }
              else if (v126 == 256)
              {
                GPUTools::FB::Encode((uint64_t)v156, 4294951882, v120, (uint64_t)"C@3ul@3ul@3ul", v20, v21, v22, v23, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
              }
              break;
          }
        }
        else
        {
          GPUTools::FB::Encode((uint64_t)v156, 4294957079, v115, (uint64_t)"C", v20, v21, v22, v23, a3);
          GPUTools::FB::Stream::Write((uint64_t)v155);
        }
        ++a4;
        v18 += v17;
        v142 += v17;
        v140 += v17;
        v138 += v17;
        v136 += v17;
        v134 += v17;
        v144 += v17;
        v14 = v130;
      }
      while (a4 != v123);
    }
    GPUTools::FB::Stream::Flush((GPUTools::FB::Stream *)v155);
    GPUTools::FB::Stream::Close((GPUTools::FB::Stream *)v155);
    v113 = (void *)v156[0];
    if (!v156[0])
      goto LABEL_86;
    goto LABEL_85;
  }
  if (!GPUTools::MTL::Utils::IsIndirectCommandBufferCompute())
  {
    v14 = 0;
    goto LABEL_88;
  }
  v129 = v116;
  v145 = v117;
  v14 = (__CFData *)objc_alloc_init(MEMORY[0x24BDBCEC8]);
  v77 = (GPUTools::FB::Stream *)GPUTools::FB::Stream::Stream((GPUTools::FB::Stream *)v155, v14);
  GPUTools::FB::Stream::Open(v77, CFSTR("ConvertIndirectCommandBufferDataToFBufStreamCompute"));
  v153 = 0u;
  v154 = 0u;
  v151 = 0u;
  v152 = 0u;
  v149 = 0u;
  v150 = 0u;
  v148 = 0u;
  GPUTools::MTL::Utils::DYMTLCreateIndirectCommandEncoder((uint64_t *)a1, (uint64_t)&v148);
  v146[0] = 0;
  v146[1] = 0;
  v147 = 0;
  if ((a7 & 0x8004) == 4)
    v78 = 4;
  else
    v78 = 32772;
  v124 = v78;
  v127 = a4 + a5;
  if (a4 < a4 + a5)
  {
    v79 = *((_QWORD *)&v154 + 1);
    v121 = v78 | 2;
    v80 = *((_QWORD *)&v152 + 1) + a4 * *((_QWORD *)&v154 + 1);
    v137 = v151 + a4 * *((_QWORD *)&v154 + 1);
    v141 = v152 + a4 * *((_QWORD *)&v154 + 1);
    v119 = v154;
    v81 = v154 + a4 * *((_QWORD *)&v154 + 1);
    v143 = v81 + 24;
    v82 = v148;
    v131 = v14;
    v122 = *((_QWORD *)&v154 + 1);
    do
    {
      v139 = v81;
      v87 = objc_msgSend(objc_retainAutorelease(v129), "bytes");
      v135 = v87 + a4 * v79;
      v88 = *(_QWORD *)(v135 + v82);
      if (v88)
      {
        v133 = v80;
        if (!*(_BYTE *)(a1 + 9))
        {
          objc_msgSend(v145, "computePipelineIdForUniqueIdentifier:", *(_QWORD *)(v135 + *((_QWORD *)&v82 + 1)));
          GPUTools::FB::Encode((uint64_t)v146, 4294950959, 4, (uint64_t)"Ct", v89, v90, v91, v92, a3);
          GPUTools::FB::Stream::Write((uint64_t)v155);
        }
        if (!*(_BYTE *)(a1 + 8) && *(_QWORD *)(a1 + 48))
        {
          v93 = 0;
          do
          {
            objc_msgSend(v145, "bufferIdAndOffsetForGPUVirtualAddress:", *(_QWORD *)(v87 + v137 + 8 * v93));
            if (!*(_BYTE *)(a1 + 11) || *(_QWORD *)(v87 + v80 + 8 * v93) == -1)
              GPUTools::FB::Encode((uint64_t)v146, 4294950960, 4, (uint64_t)"Ctulul", v94, v95, v96, v97, a3);
            else
              GPUTools::FB::Encode((uint64_t)v146, 4294952012, 4, (uint64_t)"Ctulul", v94, v95, v96, v97, a3);
            GPUTools::FB::Stream::Write((uint64_t)v155);
            ++v93;
          }
          while (v93 < *(_QWORD *)(a1 + 48));
        }
        v14 = v131;
        if (*(_QWORD *)(a1 + 64))
        {
          v98 = 0;
          do
          {
            GPUTools::FB::Encode((uint64_t)v146, 4294950968, 0, (uint64_t)"Culul", v83, v84, v85, v86, a3);
            GPUTools::FB::Stream::Write((uint64_t)v155);
            ++v98;
          }
          while (v98 < *(_QWORD *)(a1 + 64));
        }
        if (v88 == 32)
        {
          v107 = 0;
          v80 = v133;
          v79 = v122;
          do
          {
            v156[v107] = *(_QWORD *)(v87 + v139 + v107 * 8);
            ++v107;
          }
          while (v107 != 3);
          for (i = 0; i != 24; i += 8)
            *(_QWORD *)&v158[i] = *(_QWORD *)(v87 + v143 + i);
          GPUTools::FB::Encode((uint64_t)v146, 4294951196, v124, (uint64_t)"C@6ul", v83, v84, v85, v86, a3);
          GPUTools::FB::Stream::Write((uint64_t)v155);
          if (*(_BYTE *)(v135 + v119 + 64))
          {
            GPUTools::FB::Encode((uint64_t)v146, 4294951471, v121, (uint64_t)"C", v109, v110, v111, v112, a3);
            GPUTools::FB::Stream::Write((uint64_t)v155);
          }
          GPUTools::FB::Encode((uint64_t)v146, 4294950969, v124, (uint64_t)"C@3ul@3ul", v109, v110, v111, v112, a3);
          v100 = v139;
          GPUTools::FB::Stream::Write((uint64_t)v155);
        }
        else
        {
          v99 = v88 == 64;
          v79 = v122;
          v80 = v133;
          v100 = v139;
          if (v99)
          {
            for (j = 0; j != 3; ++j)
              v156[j] = *(_QWORD *)(v87 + v139 + j * 8);
            for (k = 0; k != 24; k += 8)
              *(_QWORD *)&v158[k] = *(_QWORD *)(v87 + v143 + k);
            GPUTools::FB::Encode((uint64_t)v146, 4294951196, v124, (uint64_t)"C@6ul", v83, v84, v85, v86, a3);
            GPUTools::FB::Stream::Write((uint64_t)v155);
            GPUTools::FB::Encode((uint64_t)v146, 4294951218, v124, (uint64_t)"C@3ul@3ul", v103, v104, v105, v106, a3);
            v80 = v133;
            GPUTools::FB::Stream::Write((uint64_t)v155);
          }
        }
      }
      else
      {
        GPUTools::FB::Encode((uint64_t)v146, 4294957079, v121, (uint64_t)"C", v83, v84, v85, v86, a3);
        v100 = v139;
        GPUTools::FB::Stream::Write((uint64_t)v155);
      }
      ++a4;
      v80 += v79;
      v137 += v79;
      v141 += v79;
      v81 = v100 + v79;
      v143 += v79;
    }
    while (a4 != v127);
  }
  GPUTools::FB::Stream::Flush((GPUTools::FB::Stream *)v155);
  GPUTools::FB::Stream::Close((GPUTools::FB::Stream *)v155);
  v113 = (void *)v146[0];
  if (v146[0])
LABEL_85:
    free(v113);
LABEL_86:
  MEMORY[0x242623ADC](v155);

LABEL_88:
  return v14;
}

void sub_23C7852D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40)
{
  void *v40;
  uint64_t v41;

  MEMORY[0x242623ADC](v41 - 208);

  _Unwind_Resume(a1);
}

void GPUTools::FB::Encode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _BYTE v9[16];
  char *v10;

  v10 = &a9;
  GPUTools::FB::VAListArgumentProvider::VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v9, &a9);
  GPUTools::FB::Encode();
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v9);
}

void sub_23C785470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)va);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::FB::Stream::Write(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t result;

  v1 = (unsigned int *)(a1 + 56);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(1u, v1));
  if (v2 == 1)
  {
    do
    {
      while (*v1 == 1)
        ;
      do
        v3 = __ldaxr(v1);
      while (__stlxr(1u, v1));
    }
    while (v3 == 1);
  }
  result = GPUTools::FB::Stream::Write_nolock();
  atomic_store(0, v1);
  return result;
}

void sub_23C7854F0(_Unwind_Exception *a1)
{
  unsigned int *v1;

  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::FB::Stream::Flush(GPUTools::FB::Stream *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;

  v2 = (unsigned int *)((char *)this + 56);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(1u, v2));
  if (v3 == 1)
  {
    do
    {
      while (*v2 == 1)
        ;
      do
        v4 = __ldaxr(v2);
      while (__stlxr(1u, v2));
    }
    while (v4 == 1);
  }
  result = (*(uint64_t (**)(void))(*((_QWORD *)this + 5) + 16))();
  *((_QWORD *)this + 2) = *((_QWORD *)this + 1) + 8;
  *((_BYTE *)this + 60) = 1;
  atomic_store(0, (unsigned int *)this + 14);
  return result;
}

void sub_23C785580(_Unwind_Exception *a1)
{
  unsigned int *v1;

  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void DYMTLDispatchFunc(_QWORD *a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t *a6, void *a7)
{
  id v12;
  id v13;
  const void *v14;
  unint64_t *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  void ***v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  DYMTLLibraryInfo *v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  DYMTLIndirectCommandBufferInfo *v41;
  _QWORD *v42;
  id v43;
  const void *v44;
  uint64_t NSRange;
  uint64_t v46;
  const char *v47;
  _QWORD *v48;
  double v49;
  double v50;
  GPUTools::MTL **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  const void *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  DYMTLLibraryInfo *v70;
  const char *v71;
  void *v72;
  const void *v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  void *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  const void *v101;
  _QWORD *MTLImageFilterFunctionInfo;
  void *v103;
  id *v104;
  unint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  _QWORD *v109;
  void *v110;
  _QWORD *v111;
  GPUTools::MTL **v112;
  GPUTools::MTL *v113;
  _QWORD *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  const void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  void *v137;
  _QWORD *v138;
  uint64_t v139;
  DYMTLLibraryInfo *v140;
  const char *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  _QWORD *v145;
  void *v146;
  _QWORD *v147;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const void *v163;
  id *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  void *v169;
  _QWORD *v170;
  char *v171;
  double ViewportArray;
  void *v173;
  void *v174;
  uint64_t v175;
  GPUTools::MTL **v176;
  uint64_t v177;
  GPUTools::MTL *v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  void *v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  const void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  const void *v191;
  unint64_t v192;
  uint64_t v193;
  const void *v194;
  unint64_t v195;
  unsigned int MTLTextureSwizzleChannels;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  id v206;
  char *v207;
  double ScissorRectArray;
  void *v209;
  __n128 **v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  double v215;
  void *v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  const char *v222;
  const void *v223;
  uint64_t v224;
  _QWORD *v225;
  void *v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  void *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  const void *v241;
  const void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  const void *v250;
  const void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  _OWORD *v262;
  __int128 v263;
  __int128 v264;
  GPUTools::MTL **v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  double v274;
  double v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  const void *v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  double v283;
  double v284;
  uint64_t v285;
  _QWORD *v286;
  void *v287;
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  void *v291;
  _QWORD *v292;
  _DWORD *v293;
  const char *v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  id v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  id v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  _QWORD *v311;
  void *v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  const char *v320;
  const char *v321;
  const void *v322;
  uint64_t v323;
  _QWORD *v324;
  void *v325;
  _QWORD *v326;
  uint64_t v327;
  _QWORD *v328;
  void *v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  void *v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  GPUTools::MTL **v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  GPUTools::MTL **v344;
  GPUTools::MTL *v345;
  _QWORD *v346;
  void *v347;
  DYMTLLibraryInfo *v348;
  uint64_t v349;
  _QWORD *v350;
  void *v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  void *v356;
  _QWORD *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  double v362;
  double v363;
  uint64_t v364;
  uint64_t v365;
  GPUTools::MTL **v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  DYMTLLibraryInfo *v372;
  const char *v373;
  void *v374;
  const void *v375;
  void *v376;
  void *v377;
  void *v378;
  uint64_t v379;
  _QWORD *v380;
  void *v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  id v390;
  uint64_t v391;
  uint64_t v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  _OWORD v399[3];
  _OWORD v400[3];
  _OWORD v401[2];
  __int128 v402;
  uint64_t v403;
  __int128 v404;
  uint64_t v405;
  __int128 v406;
  uint64_t v407;
  _OWORD v408[3];
  __int128 v409;
  uint64_t v410;
  __int128 v411;
  uint64_t v412;
  id v413;
  id v414;
  id v415;
  id v416;
  _OWORD v417[3];
  __int128 v418;
  uint64_t v419;
  __int128 v420;
  uint64_t v421;
  id v422;
  id v423;
  _OWORD v424[3];
  __int128 v425;
  uint64_t v426;
  __int128 v427;
  uint64_t v428;
  __int128 v429;
  uint64_t v430;
  __int128 v431;
  uint64_t v432;
  __int128 v433;
  uint64_t v434;
  _OWORD v435[3];
  _OWORD v436[3];
  __int128 v437;
  uint64_t v438;
  __int128 v439;
  uint64_t v440;
  __int128 v441;
  uint64_t v442;
  __int128 v443;
  uint64_t v444;
  __int128 v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  __int128 v449;
  uint64_t v450;
  __int128 v451;
  uint64_t v452;
  __int128 v453;
  uint64_t v454;
  __int128 v455;
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  __int128 v459;
  uint64_t v460;
  __int128 v461;
  uint64_t v462;
  id v463;
  id v464;
  id v465;
  id v466;
  id v467;
  id v468;
  id v469;
  id v470;
  id v471;
  id v472;
  id v473;
  id v474;
  id v475;
  _OWORD v476[3];
  __int128 v477;
  __int128 v478;
  __int128 v479;
  id v480;
  id v481;
  unint64_t v482;

  v482 = a2;
  v12 = a7;
  *(_QWORD *)&v477 = &v482;
  v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, &v482, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
  v20 = v13;
  if (a3 <= -7159)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    switch(a3)
    {
      case -16384:
        if (**(_QWORD **)(a4 + 8))
          v116 = **(const char ***)(a4 + 8);
        else
          v116 = "";
        goto LABEL_317;
      case -16383:
      case -16370:
      case -16363:
      case -16344:
      case -16338:
      case -16321:
      case -16320:
      case -16317:
      case -16293:
      case -16291:
      case -16287:
      case -16280:
      case -16242:
      case -16241:
      case -16238:
      case -16127:
      case -16118:
      case -16097:
      case -16062:
      case -15973:
      case -15957:
      case -15935:
      case -15923:
      case -15879:
      case -15867:
      case -15801:
      case -15790:
      case -15769:
      case -15742:
      case -15685:
      case -15675:
      case -15659:
      case -15495:
      case -15494:
      case -15489:
        goto LABEL_3;
      case -16382:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v388 = **(_QWORD **)(a4 + 16);
        v389 = **(_QWORD **)(a4 + 24);
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 32), (uint64_t)&v477);
        v461 = 0uLL;
        v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 40), (uint64_t)&v461);
        *(_QWORD *)&v443 = *(_QWORD *)(a4 + 48);
        v390 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v443, (uint64_t)&std::piecewise_construct, (_QWORD **)&v443)[3];
        v391 = **(_QWORD **)(a4 + 56);
        v392 = **(_QWORD **)(a4 + 64);
        v443 = 0uLL;
        v444 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 72), (uint64_t)&v443);
        v441 = v477;
        v442 = v478;
        v439 = v461;
        v440 = v462;
        v437 = v443;
        v438 = v444;
        objc_msgSend(v20, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v43, v388, v389, &v441, &v439, v390, v391, v392, &v437);

        goto LABEL_461;
      case -16381:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v364 = **(_QWORD **)(a4 + 16);
        v365 = **(_QWORD **)(a4 + 24);
        v366 = *(GPUTools::MTL ***)(a4 + 40);
        v367 = **(_QWORD **)(a4 + 32);
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(*v366, (uint64_t)&v477);
        *(_QWORD *)&v461 = *(_QWORD *)(a4 + 48);
        v305 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v461, (uint64_t)&std::piecewise_construct, (_QWORD **)&v461)[3];
        v368 = **(_QWORD **)(a4 + 56);
        v369 = **(_QWORD **)(a4 + 64);
        v461 = 0uLL;
        v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 72), (uint64_t)&v461);
        v459 = v477;
        v460 = v478;
        v457 = v461;
        v458 = v462;
        objc_msgSend(v20, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v43, v364, v365, v367, &v459, v305, v368, v369, &v457);
        goto LABEL_430;
      case -16380:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v314 = **(_QWORD **)(a4 + 16);
        v315 = **(_QWORD **)(a4 + 24);
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 32), (uint64_t)&v477);
        v461 = 0uLL;
        v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 40), (uint64_t)&v461);
        *(_QWORD *)&v443 = *(_QWORD *)(a4 + 48);
        v316 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v443, (uint64_t)&std::piecewise_construct, (_QWORD **)&v443)[3];
        v317 = **(_QWORD **)(a4 + 56);
        v318 = **(_QWORD **)(a4 + 64);
        v319 = **(_QWORD **)(a4 + 72);
        v451 = v477;
        v452 = v478;
        v449 = v461;
        v450 = v462;
        objc_msgSend(v20, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", v43, v314, v315, &v451, &v449, v316, v317, v318, v319);
        goto LABEL_461;
      case -16379:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "generateMipmapsForTexture:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -16378:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        NSRange = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v44);
        objc_msgSend(v20, "fillBuffer:range:value:", v43, NSRange, v46, **(unsigned __int8 **)(a4 + 24));
        goto LABEL_461;
      case -16377:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v175 = **(_QWORD **)(a4 + 16);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 24);
        objc_msgSend(v20, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v43, v175, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 32), **(_QWORD **)(a4 + 40));
        goto LABEL_461;
      case -16376:
      case -16325:
      case -16285:
      case -15789:
        objc_msgSend(v13, "endEncoding");
        break;
      case -16375:
        if (**(_QWORD **)(a4 + 8))
          v126 = **(const char ***)(a4 + 8);
        else
          v126 = "";
        goto LABEL_302;
      case -16374:
      case -16373:
      case -16371:
      case -16367:
      case -16366:
      case -16348:
      case -16323:
      case -16322:
      case -16244:
      case -16243:
      case -16239:
      case -16237:
      case -16235:
      case -16232:
      case -16231:
      case -16206:
      case -16205:
      case -16166:
      case -16115:
      case -16113:
      case -16112:
      case -16111:
      case -16108:
      case -16073:
      case -16072:
      case -16071:
      case -16070:
      case -16069:
      case -16068:
      case -16067:
      case -16065:
      case -16064:
      case -16037:
      case -16034:
      case -15920:
      case -15918:
      case -15917:
      case -15902:
      case -15807:
      case -15804:
      case -15797:
      case -15792:
      case -15791:
      case -15755:
      case -15754:
      case -15750:
      case -15746:
      case -15741:
      case -15739:
      case -15737:
      case -15736:
      case -15717:
      case -15701:
      case -15697:
      case -15694:
      case -15693:
      case -15687:
      case -15686:
      case -15684:
      case -15682:
      case -15681:
      case -15679:
      case -15678:
      case -15677:
      case -15674:
      case -15666:
      case -15665:
      case -15664:
      case -15660:
      case -15650:
      case -15606:
      case -15531:
      case -15411:
        break;
      case -16372:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16369:
        objc_msgSend(objc_retainAutorelease(v13), "contents");
        break;
      case -16368:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        v135 = objc_msgSend(v20, "newTextureWithDescriptor:offset:bytesPerRow:", v34, **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        *(_QWORD *)&v477 = a6;
        v136 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v137 = (void *)v136[3];
        v136[3] = v135;

        *(_QWORD *)&v477 = a6;
        v138 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v138[3], 0, v34);
        goto LABEL_467;
      case -16365:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16364:
      case -16345:
        objc_msgSend(v13, "setProfilingEnabled:", **(_DWORD **)(a4 + 8) != 0);
        break;
      case -16362:
        objc_msgSend(v13, "enqueue");
        break;
      case -16361:
        objc_msgSend(v13, "commit");
        break;
      case -16360:
        objc_msgSend(v13, "addScheduledHandler:", &__block_literal_global_29);
        break;
      case -16359:
        if (std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)(a4 + 8)))
        {
          *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
          objc_msgSend(v20, "presentDrawable:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        }
        break;
      case -16358:
        if (std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)(a4 + 8)))
        {
          *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
          objc_msgSend(v20, "presentDrawable:atTime:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(double **)(a4 + 16));
        }
        break;
      case -16357:
        objc_msgSend(v13, "waitUntilScheduled");
        break;
      case -16356:
        objc_msgSend(v13, "addCompletedHandler:", &__block_literal_global_28);
        break;
      case -16355:
        objc_msgSend(v13, "waitUntilCompleted");
        break;
      case -16354:
        objc_msgSend(v13, "blitCommandEncoder");
        v85 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16353:
        GPUTools::MTL::MakeMTLRenderPassDescriptor(**(_QWORD **)(a4 + 8), (uint64_t)a1);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        DYMTLNewStatefulRenderCommandEncoder(v20, v28);
        v97 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_458;
      case -16352:
        DYMTLNewStatefulComputeCommandEncoder(v13, 0);
        v85 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16351:
        GPUTools::MTL::MakeMTLRenderPassDescriptor(**(_QWORD **)(a4 + 8), (uint64_t)a1);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        DYMTLNewStatefulParallelRenderCommandEncoder(v20, v28);
        v97 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_458;
      case -16350:
        objc_msgSend(v13, "debugCommandEncoder");
        v85 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16349:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16347:
        objc_msgSend(v13, "setSkipRender:", **(_DWORD **)(a4 + 8) != 0);
        break;
      case -16346:
        objc_msgSend(v13, "setExecutionEnabled:", **(_DWORD **)(a4 + 8) != 0);
        break;
      case -16343:
      case -16342:
        objc_msgSend(v13, "commandBuffer");
        v85 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16341:
        objc_msgSend(v13, "insertDebugCaptureBoundary");
        break;
      case -16340:
        objc_msgSend(v13, "finish");
        break;
      case -16339:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16337:
      case -15934:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setComputePipelineState:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -16336:
      case -16060:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setBuffer:offset:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        break;
      case -16335:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        *((_QWORD *)&v477 + 1) = v184;
        GPUTools::MTL::DispatchBuffers(v20, -16335, **(unint64_t ***)(a4 + 8), **(uint64_t ***)(a4 + 16), &v477, (uint64_t)a1);
        break;
      case -16334:
      case -16058:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setTexture:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16333:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v385;
        GPUTools::MTL::DispatchTextures(v20, -16333, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16332:
      case -16056:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setSamplerState:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16331:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v161;
        GPUTools::MTL::DispatchSamplerStates(v20, -16331, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16330:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v273 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        LODWORD(v274) = **(_DWORD **)(a4 + 16);
        LODWORD(v275) = **(_DWORD **)(a4 + 24);
        objc_msgSend(v20, "setSamplerState:lodMinClamp:lodMaxClamp:atIndex:", v273[3], **(_QWORD **)(a4 + 32), v274, v275);
        break;
      case -16329:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v14);
        *((_QWORD *)&v477 + 1) = v384;
        GPUTools::MTL::DispatchSamplerStates(v20, -16329, **(unint64_t ***)(a4 + 8), **(int ***)(a4 + 16), **(int ***)(a4 + 24), &v477, (uint64_t)a1);
        break;
      case -16328:
      case -15927:
        objc_msgSend(v13, "setThreadgroupMemoryLength:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -16327:
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        v461 = 0uLL;
        v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v461);
        v433 = v477;
        v434 = v478;
        v431 = v461;
        v432 = v462;
        objc_msgSend(v20, "dispatchThreadgroups:threadsPerThreadgroup:", &v433, &v431);
        break;
      case -16324:
        if (**(_QWORD **)(a4 + 8))
          v126 = **(const char ***)(a4 + 8);
        else
          v126 = "";
        goto LABEL_302;
      case -16318:
        objc_msgSend(v13, "setMetalAssertionsEnabled:", **(_DWORD **)(a4 + 8) != 0);
        break;
      case -16316:
        v85 = objc_msgSend(v13, "newCommandQueue");
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16315:
        v85 = objc_msgSend(v13, "newCommandQueueWithMaxCommandBufferCount:", **(_QWORD **)(a4 + 8));
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16314:
        v85 = objc_msgSend(v13, "newBufferWithLength:options:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16313:
      case -16312:
        objc_msgSend(v12, "encodeIndirectArgumentsForBuffer:data:", *a6, **(_QWORD **)(a4 + 8), 0, 0, 0);
        v85 = objc_msgSend(v20, "newBufferWithBytes:length:options:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16311:
        GPUTools::MTL::MakeMTLDepthStencilDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        v327 = objc_msgSend(v20, "newDepthStencilStateWithDescriptor:", v28);
        *(_QWORD *)&v477 = a6;
        v328 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v329 = (void *)v328[3];
        v328[3] = v327;

        *(_QWORD *)&v477 = a6;
        v330 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v330[3], 0, v28);
        goto LABEL_459;
      case -16310:
      case -16116:
      case -15980:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        v289 = objc_msgSend(v20, "newTextureWithDescriptor:", v28);
        *(_QWORD *)&v477 = a6;
        v290 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v291 = (void *)v290[3];
        v290[3] = v289;

        *(_QWORD *)&v477 = a6;
        v292 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v292[3], 0, v28);
        goto LABEL_459;
      case -16309:
        GPUTools::MTL::MakeMTLSamplerDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        v180 = objc_msgSend(v20, "newSamplerStateWithDescriptor:", v28);
        *(_QWORD *)&v477 = a6;
        v181 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v182 = (void *)v181[3];
        v181[3] = v180;

        *(_QWORD *)&v477 = a6;
        v183 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v183[3], 0, v28);
        goto LABEL_459;
      case -16308:
        v85 = objc_msgSend(v13, "newDefaultLibrary");
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16307:
        v140 = [DYMTLLibraryInfo alloc];
        if (**(_QWORD **)(a4 + 8))
          v141 = **(const char ***)(a4 + 8);
        else
          v141 = "";
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v141);
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = -[DYMTLLibraryInfo initWithType:code:compileOptions:](v140, "initWithType:code:compileOptions:", 1, v142, 0);

        -[DYMTLLibraryInfo code](v32, "code");
        v143 = (void *)objc_claimAutoreleasedReturnValue();
        v466 = 0;
        v144 = objc_msgSend(v20, "newLibraryWithFile:error:", v143, &v466);
        v34 = v466;
        *(_QWORD *)&v477 = a6;
        v145 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v146 = (void *)v145[3];
        v145[3] = v144;

        *(_QWORD *)&v477 = a6;
        v147 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v147[3], 3u, v32);
        goto LABEL_354;
      case -16306:
        v344 = *(GPUTools::MTL ***)(a4 + 8);
        v345 = *v344;
        *(_QWORD *)&v477 = v344;
        v346 = std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(a5, v344, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        GPUTools::MTL::MakeDispatchDataT(v345, v346[3]);
        v347 = (void *)objc_claimAutoreleasedReturnValue();
        v348 = -[DYMTLLibraryInfo initWithType:code:compileOptions:]([DYMTLLibraryInfo alloc], "initWithType:code:compileOptions:", 3, v347, 0);
        v467 = 0;
        v349 = objc_msgSend(v20, "newLibraryWithData:error:", v347, &v467);
        v34 = v467;
        *(_QWORD *)&v477 = a6;
        v350 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v351 = (void *)v350[3];
        v350[3] = v349;

        *(_QWORD *)&v477 = a6;
        v352 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v352[3], 3u, v348);

        goto LABEL_467;
      case -16305:
        v372 = [DYMTLLibraryInfo alloc];
        if (**(_QWORD **)(a4 + 8))
          v373 = **(const char ***)(a4 + 8);
        else
          v373 = "";
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v373);
        v374 = (void *)objc_claimAutoreleasedReturnValue();
        GPUTools::MTL::MakeMTLCompileOptions(**(GPUTools::MTL ***)(a4 + 16), v375);
        v376 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = -[DYMTLLibraryInfo initWithType:code:compileOptions:](v372, "initWithType:code:compileOptions:", 2, v374, v376);

        -[DYMTLLibraryInfo code](v32, "code");
        v377 = (void *)objc_claimAutoreleasedReturnValue();
        -[DYMTLLibraryInfo compileOptions](v32, "compileOptions");
        v378 = (void *)objc_claimAutoreleasedReturnValue();
        v464 = 0;
        v379 = objc_msgSend(v20, "newLibraryWithSource:options:error:", v377, v378, &v464);
        v34 = v464;
        *(_QWORD *)&v477 = a6;
        v380 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v381 = (void *)v380[3];
        v380[3] = v379;

        *(_QWORD *)&v477 = a6;
        v382 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v382[3], 3u, v32);
        goto LABEL_354;
      case -16304:
        v70 = [DYMTLLibraryInfo alloc];
        if (**(_QWORD **)(a4 + 8))
          v71 = **(const char ***)(a4 + 8);
        else
          v71 = "";
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v71);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        GPUTools::MTL::MakeMTLCompileOptions(**(GPUTools::MTL ***)(a4 + 16), v73);
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = -[DYMTLLibraryInfo initWithType:code:compileOptions:](v70, "initWithType:code:compileOptions:", 2, v72, v74);

        -[DYMTLLibraryInfo code](v32, "code");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        -[DYMTLLibraryInfo compileOptions](v32, "compileOptions");
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        v465 = 0;
        v77 = objc_msgSend(v20, "newLibraryWithSource:options:error:", v75, v76, &v465);
        v34 = v465;
        *(_QWORD *)&v477 = a6;
        v78 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v79 = (void *)v78[3];
        v78[3] = v77;

        *(_QWORD *)&v477 = a6;
        v80 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v80[3], 3u, v32);
        goto LABEL_354;
      case -16303:
      case -16301:
        GPUTools::MTL::MakeMTLRenderPipelineDescriptor(**(_QWORD **)(a4 + 8), (uint64_t)a1);
        v32 = (DYMTLLibraryInfo *)objc_claimAutoreleasedReturnValue();
        v475 = 0;
        DYMTLNewRenderPipelineStateWithDescriptor(v20, v32, 0, (uint64_t)&v475);
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = v475;
        *(_QWORD *)&v477 = a6;
        v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_353;
      case -16302:
      case -16300:
        GPUTools::MTL::MakeMTLRenderPipelineDescriptor(**(_QWORD **)(a4 + 8), (uint64_t)a1);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        v26 = **(_QWORD **)(a4 + 16);
        v474 = 0;
        DYMTLNewRenderPipelineStateWithDescriptor(v20, v25, v26, (uint64_t)&v474);
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = v474;
        *(_QWORD *)&v477 = a6;
        v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_345;
      case -16299:
      case -16297:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v32 = (DYMTLLibraryInfo *)(id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v469 = 0;
        DYMTLNewComputePipelineStateWithFunction(v20, v32, 0, (uint64_t)&v469);
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = v469;
        *(_QWORD *)&v477 = a6;
        v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_353;
      case -16298:
      case -16296:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v25 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v36 = **(_QWORD **)(a4 + 16);
        v468 = 0;
        DYMTLNewComputePipelineStateWithFunction(v20, v25, v36, (uint64_t)&v468);
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = v468;
        *(_QWORD *)&v477 = a6;
        v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_345;
      case -16295:
        objc_msgSend(v13, "unmapShaderSampleBuffer");
        break;
      case -16294:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        v354 = objc_msgSend(v20, "newTextureWithDescriptor:iosurface:plane:", v34, GPUTools::MTL::MakeIOSurface(**(_QWORD **)(a4 + 16), a1), **(_QWORD **)(a4 + 24));
        *(_QWORD *)&v477 = a6;
        v355 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v356 = (void *)v355[3];
        v355[3] = v354;

        *(_QWORD *)&v477 = a6;
        v357 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v357[3], 0, v34);
        goto LABEL_467;
      case -16292:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16290:
        if (**(_QWORD **)(a4 + 8))
          v96 = **(const char ***)(a4 + 8);
        else
          v96 = "";
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v96);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        v97 = objc_msgSend(v20, "newFunctionWithName:", v28);
        *(_QWORD *)&v477 = a6;
        v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_458;
      case -16288:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16286:
        DYMTLNewStatefulRenderCommandEncoder(v13);
        v85 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16284:
        if (**(_QWORD **)(a4 + 8))
          v126 = **(const char ***)(a4 + 8);
        else
          v126 = "";
        goto LABEL_302;
      case -16283:
        if (**(_QWORD **)(a4 + 8))
          v107 = **(const char ***)(a4 + 8);
        else
          v107 = "";
        goto LABEL_86;
      case -16282:
      case -15787:
        objc_msgSend(v13, "popDebugGroup");
        break;
      case -16281:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16279:
      case -15956:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setRenderPipelineState:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -16278:
      case -15955:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setVertexBuffer:offset:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        break;
      case -16277:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        *((_QWORD *)&v477 + 1) = v90;
        GPUTools::MTL::DispatchBuffers(v20, -16277, **(unint64_t ***)(a4 + 8), **(uint64_t ***)(a4 + 16), &v477, (uint64_t)a1);
        break;
      case -16276:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setVertexTexture:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16275:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v56;
        GPUTools::MTL::DispatchTextures(v20, -16275, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16274:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setVertexSamplerState:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16273:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v99;
        GPUTools::MTL::DispatchSamplerStates(v20, -16273, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16272:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v282 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        LODWORD(v283) = **(_DWORD **)(a4 + 16);
        LODWORD(v284) = **(_DWORD **)(a4 + 24);
        objc_msgSend(v20, "setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:", v282[3], **(_QWORD **)(a4 + 32), v283, v284);
        break;
      case -16271:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v14);
        *((_QWORD *)&v477 + 1) = v155;
        GPUTools::MTL::DispatchSamplerStates(v20, -16271, **(unint64_t ***)(a4 + 8), **(int ***)(a4 + 16), **(int ***)(a4 + 24), &v477, (uint64_t)a1);
        break;
      case -16270:
        v262 = **(_OWORD ***)(a4 + 8);
        v264 = v262[1];
        v263 = v262[2];
        v400[0] = *v262;
        v400[1] = v264;
        v400[2] = v263;
        objc_msgSend(v13, "setViewport:", v400);
        break;
      case -16269:
        objc_msgSend(v13, "setFrontFacingWinding:", **(_QWORD **)(a4 + 8));
        break;
      case -16268:
        objc_msgSend(v13, "setCullMode:", **(_QWORD **)(a4 + 8));
        break;
      case -16267:
        objc_msgSend(v13, "setDepthClipMode:", **(_QWORD **)(a4 + 8));
        break;
      case -16266:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        LODWORD(v17) = **(_DWORD **)(a4 + 16);
        LODWORD(v18) = **(_DWORD **)(a4 + 24);
        objc_msgSend(v13, "setDepthBias:slopeScale:clamp:", v16, v17, v18);
        break;
      case -16265:
        v477 = 0u;
        v478 = 0u;
        GPUTools::MTL::MakeMTLScissorRect(**(GPUTools::MTL ***)(a4 + 8), &v477);
        v401[0] = v477;
        v401[1] = v478;
        objc_msgSend(v20, "setScissorRect:", v401);
        break;
      case -16264:
        objc_msgSend(v13, "setTriangleFillMode:", **(_QWORD **)(a4 + 8));
        break;
      case -16263:
      case -15954:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setFragmentBuffer:offset:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        break;
      case -16262:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        *((_QWORD *)&v477 + 1) = v343;
        GPUTools::MTL::DispatchBuffers(v20, -16262, **(unint64_t ***)(a4 + 8), **(uint64_t ***)(a4 + 16), &v477, (uint64_t)a1);
        break;
      case -16261:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setFragmentTexture:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16260:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v383;
        GPUTools::MTL::DispatchTextures(v20, -16260, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16259:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setFragmentSamplerState:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16258:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v358;
        GPUTools::MTL::DispatchSamplerStates(v20, -16258, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16257:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v48 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        LODWORD(v49) = **(_DWORD **)(a4 + 16);
        LODWORD(v50) = **(_DWORD **)(a4 + 24);
        objc_msgSend(v20, "setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:", v48[3], **(_QWORD **)(a4 + 32), v49, v50);
        break;
      case -16256:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v14);
        *((_QWORD *)&v477 + 1) = v139;
        GPUTools::MTL::DispatchSamplerStates(v20, -16256, **(unint64_t ***)(a4 + 8), **(int ***)(a4 + 16), **(int ***)(a4 + 24), &v477, (uint64_t)a1);
        break;
      case -16255:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        LODWORD(v17) = **(_DWORD **)(a4 + 16);
        LODWORD(v18) = **(_DWORD **)(a4 + 24);
        LODWORD(v19) = **(_DWORD **)(a4 + 32);
        objc_msgSend(v13, "setBlendColorRed:green:blue:alpha:", v16, v17, v18, v19);
        break;
      case -16254:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setDepthStencilState:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -16253:
        objc_msgSend(v13, "setStencilReferenceValue:", **(unsigned int **)(a4 + 8));
        break;
      case -16252:
        objc_msgSend(v13, "setVisibilityResultMode:offset:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -16251:
        objc_msgSend(v13, "drawPrimitives:vertexStart:vertexCount:instanceCount:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32), 0);
        break;
      case -16250:
        objc_msgSend(v13, "drawPrimitives:vertexStart:vertexCount:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), 0, 0);
        break;
      case -16249:
        v57 = **(_QWORD **)(a4 + 8);
        v58 = **(_QWORD **)(a4 + 16);
        v59 = **(_QWORD **)(a4 + 24);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 32);
        objc_msgSend(v13, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:", v57, v58, v59, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 40), **(_QWORD **)(a4 + 48));
        break;
      case -16248:
        v91 = **(_QWORD **)(a4 + 8);
        v92 = **(_QWORD **)(a4 + 16);
        v93 = **(_QWORD **)(a4 + 24);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 32);
        objc_msgSend(v13, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", v91, v92, v93, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 40));
        break;
      case -16247:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        objc_msgSend(v13, "setLineWidth:", v16);
        break;
      case -16246:
        objc_msgSend(v13, "endEncoding");
LABEL_3:
        std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__erase_unique<unsigned long long>(a1, &v482);
        break;
      case -16245:
        if (**(_QWORD **)(a4 + 8))
          v126 = **(const char ***)(a4 + 8);
        else
          v126 = "";
        goto LABEL_302;
      case -16240:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16234:
        v478 = 0u;
        v479 = 0u;
        v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        v276 = **(_QWORD **)(a4 + 16);
        v277 = **(_QWORD **)(a4 + 24);
        v278 = **(_QWORD **)(a4 + 32);
        v399[0] = v477;
        v399[1] = v478;
        v399[2] = v479;
        objc_msgSend(v20, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", v399, v276, v277, v278);
        break;
      case -16233:
        v34 = v13;
        v370 = **(_QWORD **)(a4 + 8);
        if (objc_msgSend(v34, "textureType") == 5)
        {
          v371 = 6;
        }
        else if (objc_msgSend(v34, "textureType") == 6)
        {
          v371 = 6;
        }
        else
        {
          v371 = 1;
        }
        DYMTLNewTextureView(v34, v370, objc_msgSend(v34, "textureType"), 0, objc_msgSend(v34, "mipmapLevelCount"), 0, objc_msgSend(v34, "arrayLength") * v371);
        v68 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_466;
      case -16227:
        objc_msgSend(v13, "setBytes:length:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), 0, 0);
        break;
      case -16226:
        objc_msgSend(v13, "setBufferOffset:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -16225:
        objc_msgSend(v13, "setVertexBytes:length:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), 0, 0);
        break;
      case -16224:
        objc_msgSend(v13, "setVertexBufferOffset:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -16223:
        objc_msgSend(v13, "setFragmentBytes:length:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), 0, 0);
        break;
      case -16222:
        objc_msgSend(v13, "setFragmentBufferOffset:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -16220:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v51 = *(GPUTools::MTL ***)(a4 + 24);
        v52 = **(_QWORD **)(a4 + 16);
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(*v51, (uint64_t)&v477);
        v429 = v477;
        v430 = v478;
        objc_msgSend(v20, "dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:", v43, v52, &v429);
        goto LABEL_461;
      case -16219:
        objc_msgSend(v13, "setStencilFrontReferenceValue:backReferenceValue:", **(unsigned int **)(a4 + 8), **(unsigned int **)(a4 + 16), 0, 0, 0);
        break;
      case -16218:
      case -15949:
        objc_msgSend(v13, "drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32), **(_QWORD **)(a4 + 40));
        break;
      case -16217:
      case -15948:
        v53 = **(_QWORD **)(a4 + 8);
        v54 = **(_QWORD **)(a4 + 16);
        v55 = **(_QWORD **)(a4 + 24);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 32);
        objc_msgSend(v13, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", v53, v54, v55, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 40), **(_QWORD **)(a4 + 48), **(_QWORD **)(a4 + 56), **(_QWORD **)(a4 + 64));
        break;
      case -16216:
        v115 = **(_QWORD **)(a4 + 8);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 16);
        objc_msgSend(v13, "drawPrimitives:indirectBuffer:indirectBufferOffset:", v115, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 24));
        break;
      case -16215:
        v87 = **(_QWORD **)(a4 + 8);
        v88 = **(_QWORD **)(a4 + 16);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 24);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v89 = **(_QWORD **)(a4 + 32);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 40);
        objc_msgSend(v20, "drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:", v87, v88, v43, v89, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 48));
        goto LABEL_461;
      case -16214:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v353 = **(_QWORD **)(a4 + 16);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 24);
        objc_msgSend(v20, "setFragmentTexture:atTextureIndex:samplerState:atSamplerIndex:", v43, v353, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 32));
        goto LABEL_461;
      case -16210:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v336 = **(_QWORD **)(a4 + 16);
        v337 = **(_QWORD **)(a4 + 24);
        v338 = *(GPUTools::MTL ***)(a4 + 40);
        v339 = **(_QWORD **)(a4 + 32);
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(*v338, (uint64_t)&v477);
        *(_QWORD *)&v461 = *(_QWORD *)(a4 + 48);
        v305 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v461, (uint64_t)&std::piecewise_construct, (_QWORD **)&v461)[3];
        v340 = **(_QWORD **)(a4 + 56);
        v341 = **(_QWORD **)(a4 + 64);
        v461 = 0uLL;
        v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 72), (uint64_t)&v461);
        v342 = **(_QWORD **)(a4 + 80);
        v455 = v477;
        v456 = v478;
        v453 = v461;
        v454 = v462;
        objc_msgSend(v20, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:", v43, v336, v337, v339, &v455, v305, v340, v341, &v453, v342);
        goto LABEL_430;
      case -16209:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v119 = **(_QWORD **)(a4 + 16);
        v120 = **(_QWORD **)(a4 + 24);
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 32), (uint64_t)&v477);
        v461 = 0uLL;
        v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 40), (uint64_t)&v461);
        *(_QWORD *)&v443 = *(_QWORD *)(a4 + 48);
        v121 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v443, (uint64_t)&std::piecewise_construct, (_QWORD **)&v443)[3];
        v122 = **(_QWORD **)(a4 + 56);
        v123 = **(_QWORD **)(a4 + 64);
        v124 = **(_QWORD **)(a4 + 72);
        v125 = **(_QWORD **)(a4 + 80);
        v447 = v477;
        v448 = v478;
        v445 = v461;
        v446 = v462;
        objc_msgSend(v20, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:", v43, v119, v120, &v447, &v445, v121, v122, v123, v124, v125);
        goto LABEL_461;
      case -16202:
        objc_msgSend(v13, "commitAndHold");
        break;
      case -16200:
      case -16198:
        GPUTools::MTL::MakeMTLComputePipelineDescriptor(**(_QWORD **)(a4 + 8), (uint64_t)a1);
        v32 = (DYMTLLibraryInfo *)objc_claimAutoreleasedReturnValue();
        v471 = 0;
        DYMTLNewComputePipelineStateWithDescriptor(v20, v32, 0, (uint64_t)&v471);
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = v471;
        *(_QWORD *)&v477 = a6;
        v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_353;
      case -16199:
      case -16197:
        GPUTools::MTL::MakeMTLComputePipelineDescriptor(**(_QWORD **)(a4 + 8), (uint64_t)a1);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        v30 = **(_QWORD **)(a4 + 16);
        v470 = 0;
        DYMTLNewComputePipelineStateWithDescriptor(v20, v25, v30, (uint64_t)&v470);
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = v470;
        *(_QWORD *)&v477 = a6;
        v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_345;
      case -16196:
        v34 = v13;
        v60 = **(_QWORD **)(a4 + 8);
        v61 = **(_QWORD **)(a4 + 16);
        v63 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v62);
        v65 = (unint64_t)v64;
        v66 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v64);
        DYMTLNewTextureView(v34, v60, v61, v63, v65, v66, v67);
        v68 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_466;
      case -16165:
        GPUTools::MTL::MakeMTLCommandQueueDescriptor(**(_QWORD **)(a4 + 8));
        v28 = (id)objc_claimAutoreleasedReturnValue();
        v81 = objc_msgSend(v20, "newCommandQueueWithDescriptor:", v28);
        *(_QWORD *)&v477 = a6;
        v82 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v83 = (void *)v82[3];
        v82[3] = v81;

        *(_QWORD *)&v477 = a6;
        v84 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v84[3], 0, v28);
        goto LABEL_459;
      case -16163:
        v85 = objc_msgSend(v13, "newBufferWithIOSurface:", GPUTools::MTL::MakeIOSurface(**(_QWORD **)(a4 + 8), a1));
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16162:
      case -16159:
        objc_msgSend(v13, "setColorStoreAction:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -16161:
      case -16158:
        objc_msgSend(v13, "setDepthStoreAction:", **(_QWORD **)(a4 + 8));
        break;
      case -16160:
      case -16157:
        objc_msgSend(v13, "setStencilStoreAction:", **(_QWORD **)(a4 + 8));
        break;
      case -16156:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setColorResolveTexture:slice:depthPlane:level:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32), **(_QWORD **)(a4 + 40));
        break;
      case -16155:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setDepthResolveTexture:slice:depthPlane:level:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32));
        break;
      case -16149:
        objc_msgSend(v13, "setImageblockWidth:height:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -16148:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setTessellationFactorBuffer:offset:instanceStride:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        break;
      case -16147:
        v202 = **(_QWORD **)(a4 + 8);
        v203 = **(_QWORD **)(a4 + 16);
        v204 = **(_QWORD **)(a4 + 24);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 32);
        objc_msgSend(v13, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:", v202, v203, v204, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 40), **(_QWORD **)(a4 + 48), **(_QWORD **)(a4 + 56));
        break;
      case -16146:
        v359 = **(_QWORD **)(a4 + 8);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 16);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v360 = **(_QWORD **)(a4 + 24);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 32);
        objc_msgSend(v20, "drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:", v359, v43, v360, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 40));
        goto LABEL_461;
      case -16145:
        v269 = **(_QWORD **)(a4 + 8);
        v270 = **(_QWORD **)(a4 + 16);
        v271 = **(_QWORD **)(a4 + 24);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 32);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v272 = **(_QWORD **)(a4 + 40);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 48);
        objc_msgSend(v20, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:", v269, v270, v271, v43, v272, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 56), **(_QWORD **)(a4 + 64), **(_QWORD **)(a4 + 72));
        goto LABEL_461;
      case -16144:
        v130 = **(_QWORD **)(a4 + 8);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 16);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v131 = **(_QWORD **)(a4 + 24);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 32);
        v132 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v133 = **(_QWORD **)(a4 + 40);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 48);
        objc_msgSend(v20, "drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:", v130, v43, v131, v132, v133, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 56));

        goto LABEL_461;
      case -16143:
        objc_msgSend(v13, "setTileBytes:length:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), 0, 0);
        break;
      case -16142:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setTileBuffer:offset:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        break;
      case -16141:
        objc_msgSend(v13, "setTileBufferOffset:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -16140:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setTileTexture:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16139:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setTileSamplerState:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16138:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v361 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        LODWORD(v362) = **(_DWORD **)(a4 + 16);
        LODWORD(v363) = **(_DWORD **)(a4 + 24);
        objc_msgSend(v20, "setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:", v361[3], **(_QWORD **)(a4 + 32), v362, v363);
        break;
      case -16137:
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        v411 = v477;
        v412 = v478;
        objc_msgSend(v20, "dispatchThreadsPerTile:", &v411);
        break;
      case -16136:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16133:
        if (std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)(a4 + 8)))
        {
          *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
          objc_msgSend(v20, "presentDrawable:afterMinimumDuration:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(double **)(a4 + 16));
        }
        break;
      case -16132:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        objc_msgSend(v13, "setTessellationFactorScale:", v16);
        break;
      case -16131:
      case -16129:
      case -15781:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "waitForFence:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -16130:
      case -16124:
      case -15785:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "updateFence:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -16128:
        v85 = objc_msgSend(v13, "newFence");
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16126:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "updateFence:afterStages:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16125:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "waitForFence:beforeStages:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16123:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16122:
      case -16114:
      case -15919:
      case -15651:
        objc_msgSend(v13, "makeAliasable");
        break;
      case -16120:
        GPUTools::MTL::MakeMTLHeapDescriptor(**(_QWORD **)(a4 + 8));
        v28 = (id)objc_claimAutoreleasedReturnValue();
        v310 = objc_msgSend(v20, "newHeapWithDescriptor:", v28);
        *(_QWORD *)&v477 = a6;
        v311 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v312 = (void *)v311[3];
        v311[3] = v310;

        *(_QWORD *)&v477 = a6;
        v313 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v313[3], 0, v28);
        goto LABEL_459;
      case -16119:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -16117:
        objc_msgSend(v12, "encodeIndirectArgumentsForBuffer:data:", *a6, **(_QWORD **)(a4 + 8), 0, 0, 0);
        v85 = objc_msgSend(v20, "newBufferWithLength:options:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16));
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16107:
        if (**(_QWORD **)(a4 + 8))
          v222 = **(const char ***)(a4 + 8);
        else
          v222 = "";
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v222);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        GPUTools::MTL::MakeMTLFunctionConstantValue(**(GPUTools::MTL ***)(a4 + 16), v223);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        v415 = 0;
        v224 = objc_msgSend(v20, "newFunctionWithName:constantValues:error:", v25, v103, &v415);
        v28 = v415;
        *(_QWORD *)&v477 = a6;
        v225 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v226 = (void *)v225[3];
        v225[3] = v224;

        *(_QWORD *)&v477 = a6;
        v227 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v227[3], 4u, v103);
        goto LABEL_380;
      case -16106:
        if (**(_QWORD **)(a4 + 8))
          v321 = **(const char ***)(a4 + 8);
        else
          v321 = "";
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v321);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        GPUTools::MTL::MakeMTLFunctionConstantValue(**(GPUTools::MTL ***)(a4 + 16), v322);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        v416 = 0;
        v323 = objc_msgSend(v20, "newFunctionWithName:constantValues:error:", v25, v103, &v416);
        v28 = v416;
        *(_QWORD *)&v477 = a6;
        v324 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v325 = (void *)v324[3];
        v324[3] = v323;

        *(_QWORD *)&v477 = a6;
        v326 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v326[3], 4u, v103);
        goto LABEL_380;
      case -16105:
        objc_msgSend(v13, "maxAvailableSizeWithAlignment:", **(_QWORD **)(a4 + 8));
        break;
      case -16101:
        GPUTools::MTL::MakeMTLArray(**(_QWORD **)(a4 + 8), (uint64_t)a1);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        MTLImageFilterFunctionInfo = GPUTools::MTL::MakeMTLImageFilterFunctionInfo(**(GPUTools::MTL ***)(a4 + 16), v101);
        v480 = 0;
        v103 = (void *)objc_msgSend(v20, "newComputePipelineStateWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:", v25, MTLImageFilterFunctionInfo, &v480);
        v28 = v480;
        *(_QWORD *)&v477 = a6;
        v104 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        objc_storeStrong(v104 + 3, v103);
        v105 = 0;
        v106 = 2;
        while (v105 < objc_msgSend(v25, "count"))
        {
          free((void *)MTLImageFilterFunctionInfo[v106]);
          ++v105;
          v106 += 3;
        }
        goto LABEL_160;
      case -16100:
        v478 = 0u;
        v479 = 0u;
        v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        v424[0] = v477;
        v424[1] = v478;
        v424[2] = v479;
        objc_msgSend(v20, "setStageInRegion:", v424);
        break;
      case -16099:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        v331 = objc_msgSend(v20, "newTextureLayoutWithDescriptor:isHeapOrBufferBacked:", v34, **(_DWORD **)(a4 + 16) != 0);
        *(_QWORD *)&v477 = a6;
        v332 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v333 = (void *)v332[3];
        v332[3] = v331;

        *(_QWORD *)&v477 = a6;
        v334 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v334[3], 0, v34);
        goto LABEL_467;
      case -16098:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        v108 = objc_msgSend(v20, "newLinearTextureWithDescriptor:offset:bytesPerRow:bytesPerImage:", v34, **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32));
        *(_QWORD *)&v477 = a6;
        v109 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v110 = (void *)v109[3];
        v109[3] = v108;

        *(_QWORD *)&v477 = a6;
        v111 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v111[3], 0, v34);
        goto LABEL_467;
      case -16096:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 24), v14);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        v167 = objc_msgSend(v20, "newTextureWithBytesNoCopy:length:descriptor:deallocator:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), v34, &__block_literal_global_3);
        *(_QWORD *)&v477 = a6;
        v168 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v169 = (void *)v168[3];
        v168[3] = v167;

        *(_QWORD *)&v477 = a6;
        v170 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v170[3], 0, v34);
        goto LABEL_467;
      case -16093:
        objc_msgSend(v13, "minLinearTextureAlignmentForPixelFormat:", **(_QWORD **)(a4 + 8));
        break;
      case -16091:
      case -16089:
        GPUTools::MTL::MakeMTLTileRenderPipelineDescriptor(**(const char ***)(a4 + 8), (uint64_t)a1);
        v32 = (DYMTLLibraryInfo *)objc_claimAutoreleasedReturnValue();
        v473 = 0;
        DYMTLNewRenderPipelineStateWithTileDescriptor(v20, v32, 0, (uint64_t)&v473);
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = v473;
        *(_QWORD *)&v477 = a6;
        v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_353;
      case -16090:
      case -16088:
        GPUTools::MTL::MakeMTLTileRenderPipelineDescriptor(**(const char ***)(a4 + 8), (uint64_t)a1);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        v31 = **(_QWORD **)(a4 + 16);
        v472 = 0;
        DYMTLNewRenderPipelineStateWithTileDescriptor(v20, v25, v31, (uint64_t)&v472);
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = v472;
        *(_QWORD *)&v477 = a6;
        v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_345;
      case -16087:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        *((_QWORD *)&v477 + 1) = v118;
        GPUTools::MTL::DispatchBuffers(v20, -16087, **(unint64_t ***)(a4 + 8), **(uint64_t ***)(a4 + 16), &v477, (uint64_t)a1);
        break;
      case -16086:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v151;
        GPUTools::MTL::DispatchTextures(v20, -16086, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16085:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v335;
        GPUTools::MTL::DispatchSamplerStates(v20, -16085, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16084:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v14);
        *((_QWORD *)&v477 + 1) = v117;
        GPUTools::MTL::DispatchSamplerStates(v20, -16084, **(unint64_t ***)(a4 + 8), **(int ***)(a4 + 16), **(int ***)(a4 + 24), &v477, (uint64_t)a1);
        break;
      case -16083:
        if (**(_QWORD **)(a4 + 8))
          v94 = **(const char ***)(a4 + 8);
        else
          v94 = "";
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v94);
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setOverrideTriple:", v95);
        goto LABEL_456;
      case -16079:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "dispatchThreadsWithIndirectBuffer:indirectBufferOffset:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16078:
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        v461 = 0uLL;
        v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v461);
        v427 = v477;
        v428 = v478;
        v425 = v461;
        v426 = v462;
        objc_msgSend(v20, "dispatchThreads:threadsPerThreadgroup:", &v427, &v425);
        break;
      case -16077:
        v171 = **(char ***)(a4 + 16);
        ViewportArray = GPUTools::MTL::MakeViewportArray(**(GPUTools::MTL ***)(a4 + 8), v171);
        v174 = v173;
        objc_msgSend(v20, "setViewports:count:", v173, v171, ViewportArray);
        goto LABEL_213;
      case -16076:
        v207 = **(char ***)(a4 + 16);
        ScissorRectArray = GPUTools::MTL::MakeScissorRectArray(**(GPUTools::MTL ***)(a4 + 8), v207);
        v174 = v209;
        objc_msgSend(v20, "setScissorRects:count:", v209, v207, ScissorRectArray);
LABEL_213:
        free(v174);
        break;
      case -16075:
        v112 = *(GPUTools::MTL ***)(a4 + 8);
        v113 = *v112;
        *(_QWORD *)&v477 = v112;
        v114 = std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(a5, v112, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        GPUTools::MTL::MakePipelineLibraryDirectory(v113, (const void *)v114[3]);
        v32 = (DYMTLLibraryInfo *)objc_claimAutoreleasedReturnValue();
        v463 = 0;
        v33 = objc_msgSend(v20, "newPipelineLibraryWithFilePath:error:", v32, &v463);
        v34 = v463;
        *(_QWORD *)&v477 = a6;
        v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_353;
      case -16074:
        objc_msgSend(v13, "setThreadgroupMemoryLength:offset:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), 0, 0);
        break;
      case -16063:
        if (**(_QWORD **)(a4 + 8))
          v116 = **(const char ***)(a4 + 8);
        else
          v116 = "";
        goto LABEL_317;
      case -16061:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setArgumentBuffer:offset:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16059:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        *((_QWORD *)&v477 + 1) = v185;
        GPUTools::MTL::DispatchBuffers(v20, -16059, **(unint64_t ***)(a4 + 8), **(uint64_t ***)(a4 + 16), &v477, (uint64_t)a1);
        break;
      case -16057:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v162;
        GPUTools::MTL::DispatchTextures(v20, -16057, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16055:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v100;
        GPUTools::MTL::DispatchSamplerStates(v20, -16055, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16053:
        v85 = objc_msgSend(v13, "newArgumentEncoderForBufferAtIndex:", **(_QWORD **)(a4 + 8));
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16052:
      case -16051:
        v85 = objc_msgSend(v13, "newArgumentEncoderWithBufferIndex:", **(_QWORD **)(a4 + 8));
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16047:
      case -16043:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "useResource:usage:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16046:
      case -16042:
        GPUTools::MTL::DispatchResources(v13, a3, **(void *****)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), (uint64_t)a1);
        break;
      case -16045:
      case -16041:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "useHeap:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -16044:
      case -16040:
        GPUTools::MTL::DispatchHeaps(v13, a3, **(void *****)(a4 + 8), **(_QWORD **)(a4 + 16), (uint64_t)a1);
        break;
      case -16038:
        if (**(_QWORD **)(a4 + 8))
          v320 = **(const char ***)(a4 + 8);
        else
          v320 = "";
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v320);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        v97 = objc_msgSend(v20, "newExternFunctionWithName:", v28);
        *(_QWORD *)&v477 = a6;
        v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_458;
      case -16033:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setArgumentBuffer:startOffset:arrayElement:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        break;
      case -16029:
        GPUTools::MTL::MakeMTLArray(**(_QWORD **)(a4 + 8), (uint64_t)a1);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        MTLImageFilterFunctionInfo = GPUTools::MTL::MakeMTLImageFilterFunctionInfo(**(GPUTools::MTL ***)(a4 + 16), v163);
        v481 = 0;
        v103 = (void *)objc_msgSend(v20, "newLibraryWithCIFilters:imageFilterFunctionInfo:error:", v25, MTLImageFilterFunctionInfo, &v481);
        v28 = v481;
        *(_QWORD *)&v477 = a6;
        v164 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        objc_storeStrong(v164 + 3, v103);
        v165 = 0;
        v166 = 2;
        while (v165 < objc_msgSend(v25, "count"))
        {
          free((void *)MTLImageFilterFunctionInfo[v166]);
          ++v165;
          v166 += 3;
        }
LABEL_160:
        free(MTLImageFilterFunctionInfo);
LABEL_380:

        goto LABEL_381;
      case -16028:
      case -16022:
        objc_msgSend(v13, "setColorStoreActionOptions:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -16027:
      case -16021:
        objc_msgSend(v13, "setDepthStoreActionOptions:", **(_QWORD **)(a4 + 8));
        break;
      case -16026:
      case -16020:
        objc_msgSend(v13, "setStencilStoreActionOptions:", **(_QWORD **)(a4 + 8));
        break;
      case -16017:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setStageInRegionWithIndirectBuffer:indirectBufferOffset:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16014:
        DYMTLNewStatefulComputeCommandEncoder(v13, **(_QWORD **)(a4 + 8));
        v85 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -16009:
        objc_msgSend(v13, "memoryBarrierWithScope:", **(_QWORD **)(a4 + 8));
        break;
      case -16008:
        goto LABEL_374;
      case -16003:
        v22 = *(_QWORD *)(a4 + 24);
        v23 = *(_QWORD *)(a4 + 32);
LABEL_374:
        GPUTools::MTL::DispatchMemoryBarrierWithResources(v13, a3, **(void *****)(a4 + 8), **(_QWORD **)(a4 + 16), v22, v23, (uint64_t)a1);
        break;
      case -16002:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setRenderPipelineState:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -16001:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v205;
        GPUTools::MTL::DispatchPipelineStates(v20, -16001, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -15999:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v134;
        GPUTools::MTL::DispatchPipelineStates(v20, -15999, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -15997:
        v85 = objc_msgSend(v13, "newEvent");
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15996:
        v85 = objc_msgSend(v13, "newSharedEvent");
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15995:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "optimizeContentsForGPUAccess:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -15994:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "optimizeContentsForGPUAccess:slice:level:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        break;
      case -15993:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "optimizeContentsForCPUAccess:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -15992:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "optimizeContentsForCPUAccess:slice:level:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        break;
      case -15991:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "encodeWaitForEvent:value:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -15990:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "encodeSignalEvent:value:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -15988:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        objc_msgSend(v13, "setPointSize:", v16);
        break;
      case -15984:
        objc_msgSend(v13, "setPrimitiveRestartEnabled:index:", **(_DWORD **)(a4 + 8) != 0, **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -15977:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v478 = 0u;
        v479 = 0u;
        v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v477);
        v257 = **(_QWORD **)(a4 + 24);
        v258 = **(_QWORD **)(a4 + 32);
        v259 = **(_DWORD **)(a4 + 40);
        *(_QWORD *)&v461 = *(_QWORD *)(a4 + 48);
        v260 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v461, (uint64_t)&std::piecewise_construct, (_QWORD **)&v461)[3];
        v261 = **(_QWORD **)(a4 + 56);
        v436[0] = v477;
        v436[1] = v478;
        v436[2] = v479;
        objc_msgSend(v20, "getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:", v43, v436, v257, v258, v259 != 0, v260, v261);
        goto LABEL_461;
      case -15976:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v478 = 0u;
        v479 = 0u;
        v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v477);
        v232 = **(_QWORD **)(a4 + 24);
        v233 = **(_QWORD **)(a4 + 32);
        v435[0] = v477;
        v435[1] = v478;
        v435[2] = v479;
        objc_msgSend(v20, "resetTextureAccessCounters:region:mipLevel:slice:", v43, v435, v232, v233);
        goto LABEL_461;
      case -15975:
      case -15490:
        objc_msgSend(v13, "setSignaledValue:", **(_QWORD **)(a4 + 8));
        break;
      case -15974:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -15972:
      case -15969:
        *(_QWORD *)&v461 = 0;
        GPUTools::MTL::MakeMTLIndirectCommandBufferDescriptor(**(GPUTools::MTL ***)(a4 + 8), &v461, v15);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        v37 = objc_msgSend(v20, "newIndirectCommandBufferWithDescriptor:maxCommandCount:options:", v34, **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        *(_QWORD *)&v477 = a6;
        v38 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v39 = (void *)v38[3];
        v38[3] = v37;

        *(_QWORD *)&v477 = a6;
        v40 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v40[3], 0, v34);
        v41 = [DYMTLIndirectCommandBufferInfo alloc];
        v32 = -[DYMTLIndirectCommandBufferInfo initWithMaxCommandCount:options:maxKernelThreadgroupMemoryBindCount:](v41, "initWithMaxCommandCount:options:maxKernelThreadgroupMemoryBindCount:", **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), (_QWORD)v461);
        *(_QWORD *)&v477 = a6;
        v42 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v42[3], 3u, v32);
        goto LABEL_354;
      case -15971:
        v254 = **(_QWORD **)(a4 + 8);
        v255 = **(_QWORD **)(a4 + 16);
        v256 = **(_QWORD **)(a4 + 24);
        if (objc_msgSend(v13, "resourcePatchingTypeForResourceType:", v254) == 1)
          objc_msgSend(v20, "reserveResourceIndicesForResourceType:indices:indexCount:", v254, v255, v256);
        break;
      case -15970:
        objc_msgSend(v13, "setPrimitiveRestartEnabled:", **(_DWORD **)(a4 + 8) != 0);
        break;
      case -15967:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "addPurgedResource:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -15966:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "addPurgedHeap:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        break;
      case -15964:
      case -15962:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v187 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v186);
        objc_msgSend(v20, "executeCommandsInBuffer:withRange:", v43, v187, v188);
        goto LABEL_461;
      case -15963:
      case -15961:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 16);
        objc_msgSend(v20, "executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:", v43, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 24));
        goto LABEL_461;
      case -15960:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v280 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v279);
        objc_msgSend(v20, "resetCommandsInBuffer:withRange:", v43, v280, v281);
        goto LABEL_461;
      case -15959:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v128 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v127);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 24);
        objc_msgSend(v20, "copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:", v43, v128, v129, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 32));
        goto LABEL_461;
      case -15958:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v149 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v148);
        objc_msgSend(v20, "optimizeIndirectCommandBuffer:withRange:", v43, v149, v150);
        goto LABEL_461;
      case -15952:
        v156 = **(_QWORD **)(a4 + 8);
        v396 = **(_QWORD **)(a4 + 16);
        v157 = **(_QWORD **)(a4 + 24);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 32);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v158 = **(_QWORD **)(a4 + 40);
        v159 = **(_QWORD **)(a4 + 48);
        v160 = **(_QWORD **)(a4 + 56);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 64);
        objc_msgSend(v20, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", v156, v396, v157, v43, v158, v159, v160, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 72), **(_QWORD **)(a4 + 80));
        goto LABEL_461;
      case -15950:
        v301 = **(_QWORD **)(a4 + 8);
        v302 = **(_QWORD **)(a4 + 16);
        v303 = **(_QWORD **)(a4 + 24);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 32);
        v394 = v303;
        v395 = v301;
        v398 = v302;
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v304 = **(_QWORD **)(a4 + 40);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 48);
        v305 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v306 = **(_QWORD **)(a4 + 56);
        v307 = **(_QWORD **)(a4 + 64);
        v308 = **(_QWORD **)(a4 + 72);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 80);
        objc_msgSend(v20, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", v395, v398, v394, v43, v304, v305, v306, v307, v308, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 88),
          **(_QWORD **)(a4 + 96));
LABEL_430:

        goto LABEL_461;
      case -15933:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setKernelBuffer:offset:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        break;
      case -15931:
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        v461 = 0uLL;
        v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v461);
        v420 = v477;
        v421 = v478;
        v418 = v461;
        v419 = v462;
        objc_msgSend(v20, "concurrentDispatchThreadgroups:threadsPerThreadgroup:", &v420, &v418);
        break;
      case -15926:
        v478 = 0u;
        v479 = 0u;
        v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        v417[0] = v477;
        v417[1] = v478;
        v417[2] = v479;
        objc_msgSend(v20, "setStageInRegion:", v417);
        break;
      case -15925:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -15924:
        objc_msgSend(v13, "setResponsibleProcess:", **(unsigned int **)(a4 + 8));
        break;
      case -15922:
        objc_msgSend(v13, "indirectRenderCommandAtIndex:", **(_QWORD **)(a4 + 8));
        v85 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15921:
        objc_msgSend(v13, "indirectComputeCommandAtIndex:", **(_QWORD **)(a4 + 8));
        v85 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15916:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setIndirectCommandBuffer:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -15915:
        *(_QWORD *)&v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((_QWORD *)&v477 + 1) = v154;
        GPUTools::MTL::DispatchIndirectCommandBuffers(v20, 4294951381, **(_QWORD **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -15910:
        v85 = objc_msgSend(v13, "newSharedTextureHandle");
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15907:
      case -15488:
        v85 = objc_msgSend(v13, "newSharedEventHandle");
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15906:
      case -15905:
        objc_msgSend(v13, "reset");
        break;
      case -15900:
        v21 = (void ***)a6;
        goto LABEL_311;
      case -15898:
      case -15897:
LABEL_311:
        GPUTools::MTL::DispatchResourceGroups(v13, a3, **(void *****)(a4 + 8), **(_QWORD **)(a4 + 16), (uint64_t)a1, v21);
        break;
      case -15896:
        v152 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 8), v14);
        objc_msgSend(v20, "resetWithRange:", v152, v153);
        break;
      case -15880:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -15878:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v218 = **(_QWORD **)(a4 + 16);
        v219 = **(_QWORD **)(a4 + 24);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 32);
        objc_msgSend(v20, "copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:", v43, v218, v219, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 40), **(_QWORD **)(a4 + 48), **(_QWORD **)(a4 + 56), **(_QWORD **)(a4 + 64));
        goto LABEL_461;
      case -15877:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 16);
        objc_msgSend(v20, "copyFromTexture:toTexture:", v43, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3]);
        goto LABEL_461;
      case -15870:
        objc_msgSend(v13, "resourceStateCommandEncoder");
        v85 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15848:
        GPUTools::MTL::MakeMTLCounterSampleBufferDescriptor(**(GPUTools::MTL ***)(a4 + 8), v13, (objc_object *)v15);
        v32 = (DYMTLLibraryInfo *)objc_claimAutoreleasedReturnValue();
        v423 = 0;
        v33 = objc_msgSend(v20, "newCounterSampleBufferWithDescriptor:error:", v32, &v423);
        v34 = v423;
        *(_QWORD *)&v477 = a6;
        v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_353;
      case -15830:
        v34 = *(id *)(a4 + 8);
        v68 = objc_msgSend(v20, "newFunctionWithPluginData:bitcodeType:", v34, **(unsigned __int8 **)(a4 + 16));
        *(_QWORD *)&v477 = a6;
        v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_466;
      case -15822:
        v236 = **(_QWORD **)(a4 + 16);
        if (v236)
          v237 = v236 + 8;
        else
          v237 = 0;
        objc_msgSend(v13, "setVertexAmplificationCount:viewMappings:", **(_QWORD **)(a4 + 8), v237, 0, 0, 0);
        break;
      case -15821:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "useHeap:stages:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -15820:
        GPUTools::MTL::DispatchHeaps(v13, 4294951476, **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), (uint64_t)a1);
        break;
      case -15819:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "useResource:usage:stages:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        break;
      case -15818:
        GPUTools::MTL::DispatchResources(v13, 4294951478, **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32), (uint64_t)a1);
        break;
      case -15812:
        objc_msgSend(v13, "setVertexAmplificationMode:value:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -15809:
        objc_msgSend(v13, "setBackgroundGPUPriority:", **(_QWORD **)(a4 + 8));
        break;
      case -15808:
        objc_msgSend(v13, "setBackgroundGPUPriority:offset:", **(_QWORD **)(a4 + 8), **(unsigned __int16 **)(a4 + 16), 0, 0, 0);
        break;
      case -15806:
        objc_msgSend(v13, "setGPUPriority:", **(_QWORD **)(a4 + 8));
        break;
      case -15805:
        objc_msgSend(v13, "setGPUPriority:offset:", **(_QWORD **)(a4 + 8), **(unsigned __int16 **)(a4 + 16), 0, 0, 0);
        break;
      case -15796:
        if (v13)
        {
          objc_msgSend(v13, "tileSizeWithSparsePageSize:textureType:pixelFormat:sampleCount:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32), 0);
        }
        else
        {
          v477 = 0uLL;
          *(_QWORD *)&v478 = 0;
        }
        GPUTools::MTL::MakeMTLSize((GPUTools::MTL *)*a6, (uint64_t)&v461);
        break;
      case -15794:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -15793:
        GPUTools::MTL::MakeMTLRasterizationRateMapDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        v97 = objc_msgSend(v20, "newRasterizationRateMapWithDescriptor:", v28);
        *(_QWORD *)&v477 = a6;
        v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_458;
      case -15788:
        if (**(_QWORD **)(a4 + 8))
          v126 = **(const char ***)(a4 + 8);
        else
          v126 = "";
LABEL_302:
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v126);
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "insertDebugSignpost:", v95);
        goto LABEL_456;
      case -15786:
        if (**(_QWORD **)(a4 + 8))
          v107 = **(const char ***)(a4 + 8);
        else
          v107 = "";
LABEL_86:
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v107);
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "pushDebugGroup:", v95);
        goto LABEL_456;
      case -15784:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v221 = **(_QWORD **)(a4 + 16);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 24);
        objc_msgSend(v20, "updateTextureMapping:mode:indirectBuffer:indirectBufferOffset:", v43, v221, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 32));
        goto LABEL_461;
      case -15783:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v265 = *(GPUTools::MTL ***)(a4 + 24);
        v266 = **(_QWORD **)(a4 + 16);
        v478 = 0u;
        v479 = 0u;
        v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(*v265, (uint64_t)&v477);
        v267 = **(_QWORD **)(a4 + 32);
        v268 = **(_QWORD **)(a4 + 40);
        v476[0] = v477;
        v476[1] = v478;
        v476[2] = v479;
        objc_msgSend(v20, "updateTextureMapping:mode:region:mipLevel:slice:", v43, v266, v476, v267, v268);
        goto LABEL_461;
      case -15782:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v210 = *(__n128 ***)(a4 + 24);
        v211 = **(_QWORD **)(a4 + 16);
        v212 = **(_QWORD **)(a4 + 32);
        v213 = **(_QWORD **)(a4 + 40);
        v214 = **(char ***)(a4 + 48);
        *(_QWORD *)&v215 = GPUTools::MTL::MakeRegionArray(*v210, v214).n128_u64[0];
        v217 = v216;
        objc_msgSend(v20, "updateTextureMappings:mode:regions:mipLevels:slices:numRegions:", v43, v211, v216, v212, v213, v214, v215);
        free(v217);
LABEL_461:

        break;
      case -15778:
        v85 = objc_msgSend(v13, "newBufferWithLength:options:offset:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), 0, 0);
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15777:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        v285 = objc_msgSend(v20, "newTextureWithDescriptor:offset:", v34, **(_QWORD **)(a4 + 16));
        *(_QWORD *)&v477 = a6;
        v286 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v287 = (void *)v286[3];
        v286[3] = v285;

        *(_QWORD *)&v477 = a6;
        v288 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v288[3], 0, v34);
        goto LABEL_467;
      case -15776:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "copyParameterDataToBuffer:offset:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16));
        break;
      case -15775:
        v189 = **(_QWORD **)(a4 + 8);
        v397 = **(_QWORD **)(a4 + 16);
        v190 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        v192 = (unint64_t)v191;
        v193 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v191);
        v195 = (unint64_t)v194;
        MTLTextureSwizzleChannels = GPUTools::MTL::MakeMTLTextureSwizzleChannels(**(GPUTools::MTL ***)(a4 + 40), v194);
        DYMTLNewTextureViewSwizzled(v20, v189, v397, v190, v192, v193, v195, MTLTextureSwizzleChannels);
        v85 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15770:
        v293 = *(_DWORD **)(a4 + 8);
        LODWORD(v16) = *v293;
        LODWORD(v17) = v293[1];
        objc_msgSend(v13, "mapScreenToPhysicalCoordinates:forLayer:", **(_QWORD **)(a4 + 16), v16, v17);
        break;
      case -15753:
        v298 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 8), v14);
        v300 = (id)objc_msgSend(v20, "resolveCounterRange:", v298, v299);
        break;
      case -15749:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "encodeWaitForEvent:value:timeout:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(unsigned int **)(a4 + 24));
        break;
      case -15744:
        objc_msgSend(v13, "setDisableRunTimeCompilation:", **(_DWORD **)(a4 + 8) != 0);
        break;
      case -15743:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -15740:
        if (**(_QWORD **)(a4 + 8))
          v197 = **(const char ***)(a4 + 8);
        else
          v197 = "";
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v197);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        v198 = **(_QWORD **)(a4 + 16);
        v199 = **(_QWORD **)(a4 + 24);
        v414 = 0;
        v27 = objc_msgSend(v20, "newComputePipelineStateWithName:options:reflection:error:", v25, v198, v199, &v414);
        v28 = v414;
        *(_QWORD *)&v477 = a6;
        v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_345;
      case -15738:
        if (**(_QWORD **)(a4 + 8))
          v294 = **(const char ***)(a4 + 8);
        else
          v294 = "";
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v294);
        v25 = (id)objc_claimAutoreleasedReturnValue();
        v295 = **(_QWORD **)(a4 + 16);
        v296 = **(_QWORD **)(a4 + 24);
        v413 = 0;
        v27 = objc_msgSend(v20, "newRenderPipelineStateWithName:options:reflection:error:", v25, v295, v296, &v413);
        v28 = v413;
        *(_QWORD *)&v477 = a6;
        v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
LABEL_345:
        v297 = (void *)v29[3];
        v29[3] = v27;

LABEL_381:
        goto LABEL_459;
      case -15732:
        objc_msgSend(v13, "enableNullBufferBinds:", **(_DWORD **)(a4 + 8) != 0);
        break;
      case -15731:
        v85 = objc_msgSend(v13, "newFunctionWithGLIR:functionType:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15730:
        v176 = *(GPUTools::MTL ***)(a4 + 16);
        v177 = **(_QWORD **)(a4 + 8);
        v178 = *v176;
        *(_QWORD *)&v477 = v176;
        v179 = std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(a5, v176, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        GPUTools::MTL::MakeDispatchDataT(v178, v179[3]);
        v34 = (id)objc_claimAutoreleasedReturnValue();
        v68 = objc_msgSend(v20, "newFunctionWithGLIR:inputsDescription:functionType:", v177, v34, **(_QWORD **)(a4 + 24));
        *(_QWORD *)&v477 = a6;
        v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_466;
      case -15729:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        objc_msgSend(v13, "setAlphaTestReferenceValue:", v16);
        break;
      case -15728:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setColorResolveTexture:slice:depthPlane:level:yInvert:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32), **(_DWORD **)(a4 + 40) != 0, **(_QWORD **)(a4 + 48));
        break;
      case -15727:
        objc_msgSend(v13, "setDepthCleared");
        break;
      case -15726:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setDepthResolveTexture:slice:depthPlane:level:yInvert:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32), **(_DWORD **)(a4 + 40) != 0);
        break;
      case -15725:
        objc_msgSend(v13, "setProvokingVertexMode:", **(_QWORD **)(a4 + 8));
        break;
      case -15724:
        objc_msgSend(v13, "setStencilCleared");
        break;
      case -15723:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setStencilResolveTexture:slice:depthPlane:level:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32));
        break;
      case -15722:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        objc_msgSend(v13, "setStencilResolveTexture:slice:depthPlane:level:yInvert:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3], **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32), **(_DWORD **)(a4 + 40) != 0);
        break;
      case -15721:
        objc_msgSend(v13, "setTriangleFrontFillMode:backFillMode:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        break;
      case -15720:
        objc_msgSend(v13, "setViewportTransformEnabled:", **(_DWORD **)(a4 + 8) != 0);
        break;
      case -15715:
        v246 = **(_QWORD **)(a4 + 8);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 16);
        v28 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v97 = objc_msgSend(v20, "newArgumentEncoderWithBufferIndex:pipelineLibrary:", v246, v28);
        *(_QWORD *)&v477 = a6;
        v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_458;
      case -15714:
        v234 = **(_QWORD **)(a4 + 8);
        v235 = **(_QWORD **)(a4 + 16);
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 24);
        v28 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v97 = objc_msgSend(v20, "newArgumentEncoderWithBufferIndex:reflection:pipelineLibrary:", v234, v235, v28);
        *(_QWORD *)&v477 = a6;
        v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
LABEL_458:
        v387 = (void *)v98[3];
        v98[3] = v97;

        goto LABEL_459;
      case -15711:
        objc_msgSend(v13, "setSubstream:", **(unsigned int **)(a4 + 8));
        break;
      case -15710:
        objc_msgSend(v13, "signalProgress:", **(unsigned int **)(a4 + 8));
        break;
      case -15709:
        objc_msgSend(v13, "waitForProgress:", **(unsigned int **)(a4 + 8));
        break;
      case -15707:
        v85 = objc_msgSend(v13, "newBufferWithBytes:length:options:gpuAddress:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), **(_QWORD **)(a4 + 32), 0);
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15705:
        v85 = objc_msgSend(v13, "newBufferWithLength:options:gpuAddress:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), 0, 0);
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15698:
        objc_msgSend(v13, "setCommandBufferErrorOptions:", **(_QWORD **)(a4 + 8));
        break;
      case -15695:
        *(_QWORD *)&v477 = *(_QWORD *)(a4 + 8);
        v32 = (DYMTLLibraryInfo *)(id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477)[3];
        v422 = 0;
        v33 = objc_msgSend(v20, "newDynamicLibrary:error:", v32, &v422);
        v34 = v422;
        *(_QWORD *)&v477 = a6;
        v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
LABEL_353:
        v309 = (void *)v35[3];
        v35[3] = v33;

LABEL_354:
        goto LABEL_467;
      case -15690:
        v85 = objc_msgSend(v13, "newTextureViewWithPixelFormat:resourceIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15689:
        v247 = **(_QWORD **)(a4 + 8);
        v248 = **(_QWORD **)(a4 + 16);
        v249 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        v251 = v250;
        v252 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v250);
        v85 = objc_msgSend(v20, "newTextureViewWithPixelFormat:textureType:levels:slices:resourceIndex:", v247, v248, v249, v251, v252, v253, **(_QWORD **)(a4 + 40));
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15688:
        v238 = **(_QWORD **)(a4 + 8);
        v239 = **(_QWORD **)(a4 + 16);
        v240 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        v242 = v241;
        v243 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v241);
        v85 = objc_msgSend(v20, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:resourceIndex:", v238, v239, v240, v242, v243, v244, **(unsigned int **)(a4 + 40), **(_QWORD **)(a4 + 48));
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15676:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
        goto LABEL_455;
      case -15668:
        if (**(_QWORD **)(a4 + 8))
          v116 = **(const char ***)(a4 + 8);
        else
          v116 = "";
        goto LABEL_317;
      case -15661:
        if (**(_QWORD **)(a4 + 8))
          v116 = **(const char ***)(a4 + 8);
        else
          v116 = "";
LABEL_317:
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v116);
        v28 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setLabel:", v28);
        goto LABEL_459;
      case -15649:
        objc_msgSend(v13, "waitUntilComplete");
        break;
      case -15624:
        v206 = (id)objc_msgSend(v13, "getSPIStats");
        break;
      case -15584:
        v34 = **(id **)(a4 + 8);
        objc_msgSend(v20, "sampledComputeCommandEncoderWithDescriptor:programInfoBuffer:capacity:", v34, **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24));
        v68 = objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v477 = a6;
        v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_466;
      case -15505:
        objc_msgSend(v13, "setParentGPUAddress:", **(_QWORD **)(a4 + 8));
        break;
      case -15504:
        objc_msgSend(v13, "setParentGPUSize:", **(_QWORD **)(a4 + 8));
        break;
      case -15500:
        objc_msgSend(v13, "encodeDashboardTagForResourceGroup:", **(_QWORD **)(a4 + 8));
        break;
      case -15496:
        v85 = objc_msgSend(v13, "newLateEvalEvent");
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15491:
        if (**(_QWORD **)(a4 + 8))
          v47 = **(const char ***)(a4 + 8);
        else
          v47 = "";
LABEL_455:
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v47);
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setLabel:", v95);
LABEL_456:

        break;
      case -15486:
        v461 = 0uLL;
        v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v461);
        v478 = 0u;
        v479 = 0u;
        v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v477);
        v410 = v462;
        v408[0] = v477;
        v408[1] = v478;
        v408[2] = v479;
        v409 = v461;
        objc_msgSend(v20, "dispatchThreadsPerTile:inRegion:", &v409, v408);
        break;
      case -15430:
        v85 = objc_msgSend(v13, "newFunctionWithGLCoreIR:functionType:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_449;
      case -15429:
        v245 = **(_QWORD **)(a4 + 8);
        v34 = **(id **)(a4 + 16);
        v68 = objc_msgSend(v20, "newFunctionWithGLCoreIR:inputsDescription:functionType:", v245, v34, **(_QWORD **)(a4 + 24));
        *(_QWORD *)&v477 = a6;
        v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        goto LABEL_466;
      case -15428:
        v85 = objc_msgSend(v13, "newFunctionWithGLESIR:functionType:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), 0, 0, 0);
        *(_QWORD *)&v477 = a6;
        v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
LABEL_449:
        v386 = (void *)v86[3];
        v86[3] = v85;

        break;
      case -15427:
        v220 = **(_QWORD **)(a4 + 8);
        v34 = **(id **)(a4 + 16);
        v68 = objc_msgSend(v20, "newFunctionWithGLESIR:inputsDescription:functionType:", v220, v34, **(_QWORD **)(a4 + 24));
        *(_QWORD *)&v477 = a6;
        v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
LABEL_466:
        v393 = (void *)v69[3];
        v69[3] = v68;

LABEL_467:
        break;
      case -15416:
        v477 = 0uLL;
        *(_QWORD *)&v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        v461 = 0uLL;
        v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v461);
        v443 = 0uLL;
        v444 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 24), (uint64_t)&v443);
        v406 = v477;
        v407 = v478;
        v404 = v461;
        v405 = v462;
        v402 = v443;
        v403 = v444;
        objc_msgSend(v20, "drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:", &v406, &v404, &v402);
        break;
      case -15398:
        objc_msgSend(v13, "setMeshBytes:length:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), 0, 0);
        break;
      case -15388:
        objc_msgSend(v13, "setObjectBytes:length:atIndex:", **(_QWORD **)(a4 + 8), **(_QWORD **)(a4 + 16), **(_QWORD **)(a4 + 24), 0, 0);
        break;
      case -15350:
        GPUTools::MTL::MakeMTLIOCommandQueueDescriptor();
        v28 = (id)objc_claimAutoreleasedReturnValue();
        v228 = objc_msgSend(v20, "newIOCommandQueueWithDescriptor:error:", v28, 0);
        *(_QWORD *)&v477 = a6;
        v229 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        v230 = (void *)v229[3];
        v229[3] = v228;

        *(_QWORD *)&v477 = a6;
        v231 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v477);
        DYMTLSetAssociatedObject((void *)v231[3], 0, v28);
LABEL_459:

        break;
      default:
        goto LABEL_471;
    }
LABEL_468:

    return;
  }
  switch(a3)
  {
    case -7158:
      v200 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)a4);
      if (v200)
        objc_msgSend((id)v200[3], "present");
      goto LABEL_468;
    case -7157:
      v201 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)a4);
      if (v201)
        objc_msgSend((id)v201[3], "presentAtTime:", **(double **)(a4 + 8));
      goto LABEL_468;
    case -7156:
      v24 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)a4);
      if (v24)
        objc_msgSend((id)v24[3], "presentAfterMinimumDuration:", **(double **)(a4 + 8));
      goto LABEL_468;
  }
LABEL_471:
  dy_abort();
  __break(1u);
}

void sub_23C78B8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ShaderDebugger::Metadata::MDSerializer::~MDSerializer(ShaderDebugger::Metadata::MDSerializer *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 24);
  std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  std::string *p_p;
  unsigned __int8 *v9;
  std::string __p;
  void *v11[2];
  uint64_t v12;
  int v13;
  std::string::size_type __n;
  const void *v15;
  uint64_t v16;
  __int128 *v17;

  v5 = a1 + 24;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(a1 + 24), (unsigned __int8 *)a2))
  {
    v6 = *(unsigned __int8 *)(a3 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(a3 + 8);
    if (v6)
    {
      v11[0] = a2;
      v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v11);
      std::string::operator=((std::string *)(v7 + 40), (const std::string *)a3);
    }
    else
    {
      v11[0] = 0;
      v11[1] = 0;
      v12 = 0;
      v13 = -1;
      v15 = 0;
      v16 = 0;
      __n = 0;
      ShaderDebugger::MmapFile::open((uint64_t)v11, (uint64_t)a2);
      if (v13 != -1)
      {
        memset(&__p, 0, sizeof(__p));
        if (__n)
        {
          std::string::resize(&__p, __n, 0);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          memcpy(p_p, v15, __n);
        }
        v17 = (__int128 *)a2;
        v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v17);
        std::string::operator=((std::string *)(v9 + 40), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      ShaderDebugger::MmapFile::close((uint64_t)v11);
      if (SHIBYTE(v12) < 0)
        operator delete(v11[0]);
    }
  }
}

void sub_23C78C348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ShaderDebugger::Metadata::MDSerializer::serializeToBuffer(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t *i;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v19 = 4;
  ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, (_BYTE *)(a1 + 64), 8);
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      v5 = v4[4];
      v18 = (uint64_t)(v4[6] - v4[5]) >> 3;
      v19 = v5;
      ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
      ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v18, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(a2, *(char **)(a2 + 8), (char *)v4[11], (char *)v4[12], v4[12] - v4[11]);
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != (_QWORD *)(a1 + 8));
  }
  v19 = -1;
  ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
  v19 = *(_QWORD *)(a1 + 48);
  ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
  for (i = *(uint64_t **)(a1 + 40); i; i = (uint64_t *)*i)
  {
    v10 = *((unsigned __int8 *)i + 39);
    if ((v10 & 0x80u) != 0)
      v10 = i[3];
    v19 = v10;
    ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
    v11 = *((char *)i + 39);
    if (v11 >= 0)
      v12 = i + 2;
    else
      v12 = (_BYTE *)i[2];
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)i + 39);
    else
      v13 = i[3];
    ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, v12, v13);
    v14 = *((unsigned __int8 *)i + 63);
    if ((v14 & 0x80u) != 0)
      v14 = i[6];
    v19 = v14;
    ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
    v15 = *((char *)i + 63);
    if (v15 >= 0)
      v16 = i + 5;
    else
      v16 = (_BYTE *)i[5];
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)i + 63);
    else
      v17 = i[6];
    ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, v16, v17);
  }
}

uint64_t ShaderDebugger::Metadata::MDSerializer::reserveAndLinearizeMetadataId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v20;

  v5 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v7 = *(char **)a2;
  if (*(char **)a2 != v6)
  {
    v7 = *(char **)a2;
    while (*(_QWORD *)v7 != a3)
    {
      v7 += 8;
      if (v7 == v6)
      {
        v7 = *(char **)(a2 + 8);
        break;
      }
    }
  }
  if (v7 == v6)
    v8 = -1;
  else
    v8 = (v7 - v5) >> 3;
  if (v8 == -1)
  {
    v9 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v6 >= v9)
    {
      v11 = (v6 - v5) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
      v13 = v9 - (_QWORD)v5;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 16, v14);
        v5 = *(char **)a2;
        v6 = *(char **)(a2 + 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *(_QWORD *)v16 = a3;
      v10 = v16 + 8;
      while (v6 != v5)
      {
        v18 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v16 - 1) = v18;
        v16 -= 8;
      }
      *(_QWORD *)a2 = v16;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v17;
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_QWORD *)v6 = a3;
      v10 = v6 + 8;
    }
    *(_QWORD *)(a2 + 8) = v10;
    v20 = 1;
    std::vector<BOOL>::push_back(a2 + 24, &v20);
    return ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) - 1;
  }
  return v8;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::getLinearMetadataId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = *(_QWORD **)(a2 + 8);
  v4 = *(_QWORD **)a2;
  if (*(_QWORD **)a2 != v3)
  {
    while (*v4 != a3)
    {
      if (++v4 == v3)
      {
        v4 = *(_QWORD **)(a2 + 8);
        break;
      }
    }
  }
  if (v4 == v3)
    return -1;
  else
    return ((uint64_t)v4 - *(_QWORD *)a2) >> 3;
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int isMetadataIdReserved;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  char v22;

  isMetadataIdReserved = ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved(a1, (char **)a2, a3);
  v6 = *(char **)a2;
  v7 = *(char **)(a2 + 8);
  v8 = *(char **)a2;
  if (*(char **)a2 != v7)
  {
    v8 = *(char **)a2;
    while (*(_QWORD *)v8 != a3)
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = *(char **)(a2 + 8);
        break;
      }
    }
  }
  if (v8 == v7)
    v9 = -1;
  else
    v9 = (v8 - v6) >> 3;
  if (v9 == -1)
    v10 = 1;
  else
    v10 = isMetadataIdReserved;
  if (v10 != 1)
    return -1;
  if (isMetadataIdReserved)
  {
    if (*(_QWORD *)(a2 + 32) <= v9)
      std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
    *(_QWORD *)(*(_QWORD *)(a2 + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v9);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v7 >= v11)
    {
      v13 = (v7 - v6) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
      v15 = v11 - (_QWORD)v6;
      if (v15 >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 16, v16);
        v6 = *(char **)a2;
        v7 = *(char **)(a2 + 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (uint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = a3;
      v12 = v18 + 1;
      while (v7 != v6)
      {
        v20 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v18 = v20;
      }
      *(_QWORD *)a2 = v18;
      *(_QWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 16) = v19;
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_QWORD *)v7 = a3;
      v12 = v7 + 8;
    }
    *(_QWORD *)(a2 + 8) = v12;
    v22 = 0;
    std::vector<BOOL>::push_back(a2 + 24, &v22);
    return ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) - 1;
  }
  return v9;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved(uint64_t a1, char **a2, uint64_t a3)
{
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a2;
  if (*a2 != v4)
  {
    while (*(_QWORD *)v5 != a3)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = a2[1];
        break;
      }
    }
  }
  if (v5 == v4)
    return 0;
  v6 = v5 - v3;
  v7 = (v5 - v3) >> 3;
  if ((unint64_t)a2[4] <= v7)
    std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
  return (*(_QWORD *)&a2[3][(v7 >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v6 >> 3)) & 1;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeThreadTracepoint(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;

  v16 = a4;
  v17 = a3;
  v15 = 5;
  v18 = &v15;
  v6 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(this, &v15, (uint64_t)&std::piecewise_construct, &v18);
  v7 = v6;
  v9 = (uint64_t)(v6 + 5);
  v8 = v6[5];
  v10 = v6[6];
  v11 = v8;
  if (v8 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        v11 = v6[6];
        break;
      }
    }
  }
  v12 = v11 - v8;
  if (v11 == v10)
    v13 = -1;
  else
    v13 = v12;
  if (v13 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v6, (char **)v6 + 5, a2))
  {
    v18 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)this, v9, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v18, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v17, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v16, 8);
    return v18;
  }
  return (unint64_t *)v13;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeLocation(uint64_t **a1, uint64_t a2, std::string::value_type *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string::value_type *v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  size_t v23;
  std::string *v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  char v31;
  unint64_t *v32;
  std::string *p_str;
  std::string::size_type size;
  char *v35;
  int v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  char v47;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string __str;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v54 = a6;
  v55 = a5;
  v51.__r_.__value_.__r.__words[0] = 1;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, (unint64_t *)&v51, (uint64_t)&std::piecewise_construct, &__str);
  v11 = v10;
  v13 = (uint64_t)(v10 + 5);
  v12 = v10[5];
  v14 = v10[6];
  v15 = v12;
  if (v12 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        v15 = v10[6];
        break;
      }
    }
  }
  v16 = v15 - v12;
  if (v15 == v14)
    v16 = -1;
  v53 = v16;
  if (v16 != -1
    && (ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v10, (char **)v10 + 5, a2) & 1) == 0)
  {
    return v53;
  }
  v53 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v13, a2);
  if (a3[23] < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    __str = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v51 = *(std::string *)a4;
  LODWORD(v18) = a3[23];
  if ((v18 & 0x80000000) == 0)
  {
    v50 = *(std::string *)a3;
    goto LABEL_19;
  }
  std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  LODWORD(v18) = a3[23];
  if ((v18 & 0x80000000) == 0)
  {
LABEL_19:
    v18 = v18;
    v19 = a3;
    if (!(_BYTE)v18)
      goto LABEL_28;
    goto LABEL_20;
  }
  v19 = *(std::string::value_type **)a3;
  v18 = *((_QWORD *)a3 + 1);
  if (!v18)
    goto LABEL_28;
LABEL_20:
  v20 = 0;
  while (v19[v20] != 47)
  {
    if (v18 == ++v20)
      goto LABEL_28;
  }
  if (v18 == v20 || v20)
  {
LABEL_28:
    v21 = *(unsigned __int8 *)(a4 + 23);
    if (*(char *)(a4 + 23) < 0)
    {
      if (*(_QWORD *)(a4 + 8) != 1)
      {
LABEL_37:
        if ((v21 & 0x80u) == 0)
          v23 = *(unsigned __int8 *)(a4 + 23);
        else
          v23 = *(_QWORD *)(a4 + 8);
        v24 = &v49;
        std::string::basic_string[abi:ne180100]((uint64_t)&v49, v23 + 1);
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v24 = (std::string *)v49.__r_.__value_.__r.__words[0];
        if (v23)
        {
          if (*(char *)(a4 + 23) >= 0)
            v25 = (const void *)a4;
          else
            v25 = *(const void **)a4;
          memmove(v24, v25, v23);
        }
        *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v23) = 47;
        v26 = a3[23];
        if (v26 >= 0)
          v27 = a3;
        else
          v27 = *(const std::string::value_type **)a3;
        if (v26 >= 0)
          v28 = a3[23];
        else
          v28 = *((_QWORD *)a3 + 1);
        v29 = std::string::append(&v49, v27, v28);
        v30 = v29->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v56 = v29->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
        v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str.__r_.__value_.__r.__words[0] = v30;
        __str.__r_.__value_.__l.__size_ = v56;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v56 + 7);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v31;
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        goto LABEL_57;
      }
      v22 = *(_BYTE **)a4;
    }
    else
    {
      v22 = (_BYTE *)a4;
      if (v21 != 1)
        goto LABEL_37;
    }
    if (*v22 == 47)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a4, (const void **)a3, (uint64_t)&v49);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v49;
      goto LABEL_57;
    }
    goto LABEL_37;
  }
LABEL_57:
  v32 = (unint64_t *)(v11 + 11);
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  v35 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    v36 = v35[size--];
    if (v36 == 47)
    {
      if (size != -1)
      {
        v37 = size + 1;
        std::string::basic_string(&v49, &__str, 0, size + 1, (std::allocator<char> *)&v56);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        v51 = v49;
        std::string::basic_string(&v49, &__str, v37, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v56);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        v50 = v49;
      }
      break;
    }
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    v38 = v51.__r_.__value_.__l.__size_;
    if (v51.__r_.__value_.__l.__size_)
    {
      v39 = (std::string *)v51.__r_.__value_.__r.__words[0];
LABEL_75:
      if (v39->__r_.__value_.__s.__data_[v38 - 1] != 47)
        std::string::append(&v51, "/");
    }
  }
  else
  {
    v38 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&v51.__r_.__value_.__s + 23))
    {
      v39 = &v51;
      goto LABEL_75;
    }
  }
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, &v53, 8);
  v40 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v40 = v50.__r_.__value_.__l.__size_;
  v49.__r_.__value_.__r.__words[0] = v40;
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, &v49, 8);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v50;
  else
    v41 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  else
    v42 = v50.__r_.__value_.__l.__size_;
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, v41, v42);
  v43 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v43 = v51.__r_.__value_.__l.__size_;
  v49.__r_.__value_.__r.__words[0] = v43;
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, &v49, 8);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v51;
  else
    v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  else
    v45 = v51.__r_.__value_.__l.__size_;
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, v44, v45);
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, &v55, 8);
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, &v54, 8);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v51.__r_.__value_.__l.__data_, (const void **)&v50.__r_.__value_.__l.__data_, (uint64_t)&v49);
  v46 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  v47 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v46 = v49.__r_.__value_.__l.__size_;
  if (v46)
  {
    v56 = 0uLL;
    v57 = 0;
    ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile((uint64_t)a1, &v49, (uint64_t)&v56);
    if (SHIBYTE(v57) < 0)
      operator delete((void *)v56);
    v47 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  v17 = v53;
  if (v47 < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v17;
}

void sub_23C78D070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v20 = 0;
  v21 = a4;
  v22 = &v20;
  v7 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, (unint64_t *)&v20, (uint64_t)&std::piecewise_construct, &v22);
  v8 = v7;
  v10 = (uint64_t)(v7 + 5);
  v9 = v7[5];
  v11 = v7[6];
  v12 = v9;
  if (v9 != v11)
  {
    while (*v12 != a2)
    {
      if (++v12 == v11)
      {
        v12 = v7[6];
        break;
      }
    }
  }
  v13 = v12 - v9;
  if (v12 == v11)
    v14 = -1;
  else
    v14 = v13;
  if (v14 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v7, (char **)v7 + 5, a2))
  {
    v20 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v10, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v8 + 11, &v20, 8);
    v15 = (uint64_t *)*(unsigned __int8 *)(a3 + 23);
    if ((char)v15 < 0)
      v15 = *(uint64_t **)(a3 + 8);
    v22 = v15;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v8 + 11, &v22, 8);
    v16 = *(char *)(a3 + 23);
    if (v16 >= 0)
      v17 = (_BYTE *)a3;
    else
      v17 = *(_BYTE **)a3;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a3 + 23);
    else
      v18 = *(_QWORD *)(a3 + 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v8 + 11, v17, v18);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v8 + 11, &v21, 8);
    return v20;
  }
  return v14;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeSubrange(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;

  v16 = a4;
  v17 = a3;
  v15 = 4;
  v18 = &v15;
  v6 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(this, &v15, (uint64_t)&std::piecewise_construct, &v18);
  v7 = v6;
  v9 = (uint64_t)(v6 + 5);
  v8 = v6[5];
  v10 = v6[6];
  v11 = v8;
  if (v8 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        v11 = v6[6];
        break;
      }
    }
  }
  v12 = v11 - v8;
  if (v11 == v10)
    v13 = -1;
  else
    v13 = v12;
  if (v13 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v6, (char **)v6 + 5, a2))
  {
    v18 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)this, v9, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v18, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v17, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v16, 8);
    return v18;
  }
  return (unint64_t *)v13;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(uint64_t **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;

  v22 = a5;
  v23 = a3;
  v20 = a7;
  v21 = a6;
  v19 = 6;
  v24 = &v19;
  v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v19, (uint64_t)&std::piecewise_construct, &v24);
  v11 = v10;
  v13 = (uint64_t)(v10 + 5);
  v12 = v10[5];
  v14 = v10[6];
  v15 = v12;
  if (v12 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        v15 = v10[6];
        break;
      }
    }
  }
  v16 = v15 - v12;
  if (v15 == v14)
    v17 = -1;
  else
    v17 = v16;
  if (v17 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v10, (char **)v10 + 5, a2))
  {
    v24 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v13, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v24, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v23, 8);
    v19 = a4;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v19, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v22, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v21, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v20, 8);
    return v24;
  }
  return (unint64_t *)v17;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeWaypointTracepoint(uint64_t **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;

  v18 = a5;
  v19 = a3;
  v17 = 9;
  v20 = &v17;
  v8 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v17, (uint64_t)&std::piecewise_construct, &v20);
  v9 = v8;
  v11 = (uint64_t)(v8 + 5);
  v10 = v8[5];
  v12 = v8[6];
  v13 = v10;
  if (v10 != v12)
  {
    while (*v13 != a2)
    {
      if (++v13 == v12)
      {
        v13 = v8[6];
        break;
      }
    }
  }
  v14 = v13 - v10;
  if (v13 == v12)
    v15 = -1;
  else
    v15 = v14;
  if (v15 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v8, (char **)v8 + 5, a2))
  {
    v20 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v11, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v20, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v19, 8);
    v17 = a4;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v17, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v18, 8);
    return v20;
  }
  return (unint64_t *)v15;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeDataTracepoint(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;

  v20 = a4;
  v21 = a3;
  v19 = a5;
  v18 = 8;
  v22 = &v18;
  v9 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v18, (uint64_t)&std::piecewise_construct, &v22);
  v10 = v9;
  v12 = (uint64_t)(v9 + 5);
  v11 = v9[5];
  v13 = v9[6];
  v14 = v11;
  if (v11 != v13)
  {
    while (*v14 != a2)
    {
      if (++v14 == v13)
      {
        v14 = v9[6];
        break;
      }
    }
  }
  v15 = v14 - v11;
  if (v14 == v13)
    v16 = -1;
  else
    v16 = v15;
  if (v16 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v9, (char **)v9 + 5, a2))
  {
    v22 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v12, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v10 + 11, &v22, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v10 + 11, &v21, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v10 + 11, &v20, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v10 + 11, &v19, 4);
    v18 = a6;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v10 + 11, &v18, 8);
    return v22;
  }
  return (unint64_t *)v16;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeDataValueTracepoint(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;

  v24 = a4;
  v25 = a3;
  v22 = a6;
  v23 = a5;
  v20 = a8;
  v21 = a7;
  v19 = 10;
  v26 = &v19;
  v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(this, &v19, (uint64_t)&std::piecewise_construct, &v26);
  v11 = v10;
  v13 = (uint64_t)(v10 + 5);
  v12 = v10[5];
  v14 = v10[6];
  v15 = v12;
  if (v12 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        v15 = v10[6];
        break;
      }
    }
  }
  v16 = v15 - v12;
  if (v15 == v14)
    v17 = -1;
  else
    v17 = v16;
  if (v17 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v10, (char **)v10 + 5, a2))
  {
    v26 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)this, v13, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v26, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v25, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v24, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v23, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v22, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v21, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v20, 8);
    return v26;
  }
  return (unint64_t *)v17;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeVariableTracepoint(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;

  v18 = a4;
  v19 = a3;
  v17 = 7;
  v20 = &v17;
  v8 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v17, (uint64_t)&std::piecewise_construct, &v20);
  v9 = v8;
  v11 = (uint64_t)(v8 + 5);
  v10 = v8[5];
  v12 = v8[6];
  v13 = v10;
  if (v10 != v12)
  {
    while (*v13 != a2)
    {
      if (++v13 == v12)
      {
        v13 = v8[6];
        break;
      }
    }
  }
  v14 = v13 - v10;
  if (v13 == v12)
    v15 = -1;
  else
    v15 = v14;
  if (v15 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v8, (char **)v8 + 5, a2))
  {
    v20 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v11, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v20, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v19, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v18, 8);
    v17 = a5;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v17, 8);
    return v20;
  }
  return (unint64_t *)v15;
}

void ShaderDebugger::Metadata::MDSerializer::serializeVariableBase(int a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = a5;
  v17 = a3;
  v15 = a6;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v17, 8);
  v11 = *(unsigned __int8 *)(a4 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  v18 = v11;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v18, 8);
  v12 = *(char *)(a4 + 23);
  if (v12 >= 0)
    v13 = (_BYTE *)a4;
  else
    v13 = *(_BYTE **)a4;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a4 + 23);
  else
    v14 = *(_QWORD *)(a4 + 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, v13, v14);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v16, 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v15, 8);
  v18 = a7;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v18, 8);
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  char v21;
  unint64_t *v22;

  v21 = a6;
  v20 = 2;
  v22 = &v20;
  v11 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v20, (uint64_t)&std::piecewise_construct, &v22);
  v12 = v11;
  v14 = (uint64_t)(v11 + 5);
  v13 = v11[5];
  v15 = v11[6];
  v16 = v13;
  if (v13 != v15)
  {
    while (*v16 != a2)
    {
      if (++v16 == v15)
      {
        v16 = v11[6];
        break;
      }
    }
  }
  v17 = v16 - v13;
  if (v16 == v15)
    v18 = -1;
  else
    v18 = v17;
  if (v18 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v11, (char **)v11 + 5, a2))
  {
    v18 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v14, a2);
    ShaderDebugger::Metadata::MDSerializer::serializeVariableBase((int)a1, (unint64_t *)v12 + 11, v18, a3, a4, a5, 0);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v12 + 11, &v21, 1);
  }
  return v18;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t *v20;

  v19 = 2;
  v20 = &v19;
  v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v19, (uint64_t)&std::piecewise_construct, &v20);
  v11 = v10;
  v13 = (uint64_t)(v10 + 5);
  v12 = v10[5];
  v14 = v10[6];
  v15 = v12;
  if (v12 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        v15 = v10[6];
        break;
      }
    }
  }
  v16 = v15 - v12;
  if (v15 == v14)
    v17 = -1;
  else
    v17 = v16;
  if (v17 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v10, (char **)v10 + 5, a2))
  {
    v17 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v13, a2);
    ShaderDebugger::Metadata::MDSerializer::serializeVariableBase((int)a1, (unint64_t *)v11 + 11, v17, a3, a4, a5, 1);
  }
  return v17;
}

void ShaderDebugger::Metadata::MDSerializer::serializeTypeBase(int a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, uint64_t a10)
{
  uint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a5;
  v21 = a3;
  v18 = a7;
  v19 = a6;
  v17 = a8;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v21, 8);
  v13 = *(unsigned __int8 *)(a4 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a4 + 8);
  v22 = v13;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v22, 8);
  v14 = *(char *)(a4 + 23);
  if (v14 >= 0)
    v15 = (_BYTE *)a4;
  else
    v15 = *(_BYTE **)a4;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a4 + 23);
  else
    v16 = *(_QWORD *)(a4 + 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, v15, v16);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v20, 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v19, 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v18, 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v17, 8);
  v22 = a9;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v22, 8);
  v22 = a10;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v22, 8);
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeBasicType(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, char a9)
{
  uint64_t **v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;

  v28 = 3;
  v29 = &v28;
  v17 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v28, (uint64_t)&std::piecewise_construct, &v29);
  v18 = v17;
  v20 = (uint64_t)(v17 + 5);
  v19 = v17[5];
  v21 = v17[6];
  v27 = a3;
  if (v19 == v21)
  {
    v23 = a8;
    v22 = v17[5];
  }
  else
  {
    v22 = v17[5];
    while (*v22 != a2)
    {
      if (++v22 == v21)
      {
        v23 = a8;
        v22 = v17[6];
        goto LABEL_8;
      }
    }
    v23 = a8;
  }
LABEL_8:
  v24 = v22 - v19;
  if (v22 == v21)
    v25 = -1;
  else
    v25 = v24;
  if (v25 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v17, (char **)v17 + 5, a2))
  {
    v25 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v20, a2);
    ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((int)a1, (unint64_t *)v18 + 11, v25, v27, a4, a5, a6, a7, v23, 0);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v18 + 11, &a9, 4);
  }
  return v25;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeDerivedType(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, char a9, int a10, unsigned int a11)
{
  uint64_t **v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v32;

  v31 = 3;
  v32 = &v31;
  v19 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v31, (uint64_t)&std::piecewise_construct, &v32);
  v20 = v19;
  v22 = (uint64_t)(v19 + 5);
  v21 = v19[5];
  v23 = v19[6];
  v30 = a3;
  v24 = v21;
  if (v21 != v23)
  {
    while (*v24 != a2)
    {
      if (++v24 == v23)
      {
        v24 = v19[6];
        break;
      }
    }
  }
  v25 = v24 - v21;
  if (v24 == v23)
    v26 = -1;
  else
    v26 = v25;
  if (v26 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v19, (char **)v19 + 5, a2))
  {
    v29 = (unint64_t *)a11;
    v26 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v22, a2);
    v27 = (unint64_t *)(v20 + 11);
    ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((int)a1, v27, v26, v30, a4, a5, a6, a7, a8, 2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, v27, &a9, 8);
    v32 = v29;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, v27, &v32, 8);
  }
  return v26;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeCompositeType(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, char a9, uint64_t **a10)
{
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  unint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v33 = 3;
  v34 = (uint64_t)&v33;
  v18 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v33, (uint64_t)&std::piecewise_construct, (_QWORD **)&v34);
  v19 = v18;
  v21 = (uint64_t)(v18 + 5);
  v20 = v18[5];
  v22 = v18[6];
  v32 = a3;
  v23 = v20;
  if (v20 != v22)
  {
    while (*v23 != a2)
    {
      if (++v23 == v22)
      {
        v23 = v18[6];
        break;
      }
    }
  }
  v24 = v23 - v20;
  if (v23 == v22)
    v25 = -1;
  else
    v25 = v24;
  if (v25 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v18, (char **)v18 + 5, a2))
  {
    v31 = a7;
    v26 = a10;
    v25 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v21, a2);
    v27 = (unint64_t *)(v19 + 11);
    ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((int)a1, (unint64_t *)v19 + 11, v25, v32, a4, a5, a6, v31, a8, 1);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v19 + 11, &a9, 8);
    v34 = ((char *)v26[1] - (char *)*v26) >> 4;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v19 + 11, &v34, 8);
    v28 = *v26;
    v29 = v26[1];
    while (v28 != v29)
    {
      v34 = *v28;
      ShaderDebugger::Metadata::MDSerializer::write((int)a1, v27, &v34, 8);
      v34 = v28[1];
      ShaderDebugger::Metadata::MDSerializer::write((int)a1, v27, &v34, 8);
      v28 += 2;
    }
  }
  return v25;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeSubroutineType(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, uint64_t **a9)
{
  uint64_t **v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v30 = 3;
  v31 = (uint64_t)&v30;
  v17 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v30, (uint64_t)&std::piecewise_construct, (_QWORD **)&v31);
  v18 = v17;
  v20 = (uint64_t)(v17 + 5);
  v19 = v17[5];
  v21 = v17[6];
  v29 = a3;
  v22 = v19;
  if (v19 != v21)
  {
    while (*v22 != a2)
    {
      if (++v22 == v21)
      {
        v22 = v17[6];
        break;
      }
    }
  }
  v23 = v22 - v19;
  if (v22 == v21)
    v24 = -1;
  else
    v24 = v23;
  if (v24 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v17, (char **)v17 + 5, a2))
  {
    v24 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v20, a2);
    v25 = (unint64_t *)(v18 + 11);
    ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((int)a1, (unint64_t *)v18 + 11, v24, v29, a4, a5, a6, a7, a8, 3);
    v31 = ((char *)a9[1] - (char *)*a9) >> 4;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v18 + 11, &v31, 8);
    v26 = *a9;
    v27 = a9[1];
    while (v26 != v27)
    {
      v31 = *v26;
      ShaderDebugger::Metadata::MDSerializer::write((int)a1, v25, &v31, 8);
      v31 = v26[1];
      ShaderDebugger::Metadata::MDSerializer::write((int)a1, v25, &v31, 8);
      v26 += 2;
    }
  }
  return v24;
}

void ShaderDebugger::Metadata::MDSerializer::write(int a1, unint64_t *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  char v20;

  v4 = a4;
  v7 = a2[2] - *a2;
  if (v7 < a4 - *a2 + a2[1])
    std::vector<unsigned char>::reserve(a2, (2 * v7) | 1);
  if (v4)
  {
    v8 = (_BYTE *)a2[1];
    do
    {
      v9 = a2[2];
      if ((unint64_t)v8 >= v9)
      {
        v11 = *a2;
        v12 = &v8[-*a2];
        v13 = (unint64_t)(v12 + 1);
        if ((uint64_t)(v12 + 1) < 0)
          std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
        v14 = v9 - v11;
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (char *)operator new(v15);
        else
          v16 = 0;
        v17 = &v12[(_QWORD)v16];
        v18 = &v12[(_QWORD)v16];
        *v18 = *a3;
        v10 = v18 + 1;
        if (v8 != (_BYTE *)v11)
        {
          v19 = &v8[~v11];
          do
          {
            v20 = *--v8;
            (v19--)[(_QWORD)v16] = v20;
          }
          while (v8 != (_BYTE *)v11);
          v8 = (_BYTE *)*a2;
          v17 = v16;
        }
        *a2 = (unint64_t)v17;
        a2[1] = (unint64_t)v10;
        a2[2] = (unint64_t)&v16[v15];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = *a3;
        v10 = v8 + 1;
      }
      ++a3;
      a2[1] = (unint64_t)v10;
      v8 = v10;
      --v4;
    }
    while (v4);
  }
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v6];
    v28 = v26;
    do
    {
      v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      v32 = v26;
    }
    else
    {
      v31 = v5;
      v32 = v26;
      do
      {
        v33 = *--v31;
        *--v32 = v33;
      }
      while (v31 != v30);
      v10 = *(char **)(a1 + 8);
    }
    v34 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v27, v5, v10 - v5);
    v35 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v27[v10 - v5];
    *(_QWORD *)(a1 + 16) = v34;
    if (v35)
      operator delete(v35);
    return v26;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
LABEL_17:
    v21 = &v5[v6];
    v22 = &v20[-v6];
    v23 = v20;
    if (&v20[-v6] < v10)
    {
      v24 = &v10[v6] - v20;
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v5[v6], v5, v20 - v21);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
    return v5;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
  return v5;
}

void std::vector<BOOL>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void sub_23C78EA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_23C78ECEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C78EDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  a9.super_class = (Class)DYReplayController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_23C78EFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;
  void *v16;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_23C78F09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C78F254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C78F450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_23C78F75C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C78F8D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C78FAB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C791024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_23C7914EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C791574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C7915FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C791684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_23C7918F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_23C791B40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C791BD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C791EAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v3;

  _Unwind_Resume(a1);
}

void sub_23C792050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C79219C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_23C7923D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_23C792528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C792670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23C79273C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C7927FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 9];
    v7 = (void **)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (void **)v8)
    {
      do
      {
        v9 = *v7++;

        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v10 = (void **)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (void **)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 256;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 512;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = ((v5 - v4) << 6) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (uint64_t *)(*(_QWORD *)(v4 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF));
  }
  result = MEMORY[0x242624058](*a2);
  *v8 = result;
  ++a1[5];
  return result;
}

void std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_23C792E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::pop_front(int64x2_t *a1)
{
  objc_release(*(id *)(*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (a1[2].i64[0] & 0x1FF)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_23C7A5240);
  return std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::~__hash_table(a1);
  JUMPOUT(0x242623D28);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x24BDAC358](data, *(_QWORD *)&len, md);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x24BDBB7F0](allocator, values, numValues, callBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x24BDBC8E8](alloc, uuid);
}

uint64_t DYDictionaryFromError()
{
  return MEMORY[0x24BE39070]();
}

uint64_t DYGetGlobalClientTransport()
{
  return MEMORY[0x24BE390A8]();
}

uint64_t DYGetGlobalTransportSource()
{
  return MEMORY[0x24BE390B0]();
}

uint64_t DYGetInterposeVersion()
{
  return MEMORY[0x24BE390C0]();
}

uint64_t DYHarvesterGetData()
{
  return MEMORY[0x24BE38FC8]();
}

uint64_t DYHarvesterGetDataSize()
{
  return MEMORY[0x24BE38FD0]();
}

uint64_t DYHarvesterGetMetadata()
{
  return MEMORY[0x24BE38FD8]();
}

uint64_t DYHarvesterGetOffset()
{
  return MEMORY[0x24BE38FE0]();
}

uint64_t DYIOSurfaceUtilsPlaneCount()
{
  return MEMORY[0x24BE390D0]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x24BDD8B50](properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8B78](buffer);
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDD8BA8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8BC8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8BE0](buffer, planeIndex);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8C58](buffer, planeIndex);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8C88](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x24BDD8CE0](buffer, planeIndex);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x24BDD8D08](buffer, *(_QWORD *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x24BDD8DD0](buffer, *(_QWORD *)&options, seed);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x24BDDD1E8]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x24BDDD380]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x24BDD0B80](aClassName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x24BDD1218](aSelectorName);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

uint64_t _DYOLog()
{
  return MEMORY[0x24BE39158]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t llvm::LLVMContext::LLVMContext(llvm::LLVMContext *this)
{
  return MEMORY[0x24BED56C0](this);
}

void llvm::LLVMContext::~LLVMContext(llvm::LLVMContext *this)
{
  MEMORY[0x24BED56D0](this);
}

uint64_t llvm::DIExpression::getFragmentInfo()
{
  return MEMORY[0x24BED5900]();
}

uint64_t llvm::MemoryBuffer::getMemBuffer()
{
  return MEMORY[0x24BED5988]();
}

uint64_t llvm::DebugInfoFinder::processModule()
{
  return MEMORY[0x24BED5D30]();
}

void llvm::Module::~Module(llvm::Module *this)
{
  MEMORY[0x24BED70D0](this);
}

uint64_t llvm::parseIR()
{
  return MEMORY[0x24BED7378]();
}

uint64_t GPUTools::FB::VAListArgumentProvider::VAListArgumentProvider(GPUTools::FB::VAListArgumentProvider *this, char *a2)
{
  return MEMORY[0x24BE39178](this, a2);
}

void GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider(GPUTools::FB::VAListArgumentProvider *this)
{
  MEMORY[0x24BE39180](this);
}

uint64_t GPUTools::FB::Encode()
{
  return MEMORY[0x24BE39188]();
}

uint64_t GPUTools::FB::Stream::Write_nolock()
{
  return MEMORY[0x24BE39190]();
}

uint64_t GPUTools::FB::Stream::Open(GPUTools::FB::Stream *this, const __CFString *a2)
{
  return MEMORY[0x24BE391A0](this, a2);
}

uint64_t GPUTools::FB::Stream::Close(GPUTools::FB::Stream *this)
{
  return MEMORY[0x24BE391A8](this);
}

uint64_t GPUTools::FB::Stream::Stream(GPUTools::FB::Stream *this, __CFData *a2)
{
  return MEMORY[0x24BE391B0](this, a2);
}

void GPUTools::FB::Stream::~Stream(GPUTools::FB::Stream *this)
{
  MEMORY[0x24BE391B8](this);
}

uint64_t GPUTools::MTL::CaptureHelper::SaveObject()
{
  return MEMORY[0x24BE63588]();
}

{
  return MEMORY[0x24BE63590]();
}

uint64_t GPUTools::MTL::CaptureHelper::CaptureHelper(GPUTools::MTL::CaptureHelper *this)
{
  return MEMORY[0x24BE63598](this);
}

void GPUTools::MTL::CaptureHelper::~CaptureHelper(GPUTools::MTL::CaptureHelper *this)
{
  MEMORY[0x24BE635A0](this);
}

uint64_t GPUTools::MTL::IsFuncEnumDrawCall(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635A8](this);
}

uint64_t GPUTools::MTL::IsFuncEnumTileCall(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635B0](this);
}

uint64_t GPUTools::MTL::IsFuncEnumSampleCall(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635B8](this);
}

uint64_t GPUTools::MTL::IsFuncEnumComputeCall(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635C0](this);
}

uint64_t GPUTools::MTL::IsFuncEnumEndEncoding(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635C8](this);
}

uint64_t GPUTools::MTL::GetFuncEnumReceiverType(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635D0](this);
}

uint64_t GPUTools::MTL::IsFuncEnumGPUCommandCall(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635D8](this);
}

uint64_t GPUTools::MTL::IsFuncEnumSampledBlitCall(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635E0](this);
}

uint64_t GPUTools::MTL::IsFuncEnumSampledBlitCallAGX(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635E8](this);
}

uint64_t GPUTools::MTL::IsFuncEnumCreateCommandBuffer(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635F0](this);
}

uint64_t GPUTools::MTL::IsFuncEnumIndirectExecuteCall(GPUTools::MTL *this)
{
  return MEMORY[0x24BE635F8](this);
}

uint64_t GPUTools::MTL::IsFuncEnumIndirectExecuteDrawCall(GPUTools::MTL *this)
{
  return MEMORY[0x24BE63600](this);
}

uint64_t GPUTools::MTL::IsFuncEnumIndirectExecuteComputeCall(GPUTools::MTL *this)
{
  return MEMORY[0x24BE63608](this);
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLDeviceDescriptor(GPUTools::MTL::Utils *this, const void *a2, GPUTools::MTL::Utils::DYMTLDeviceDescriptor *a3)
{
  return MEMORY[0x24BE63610](this, a2, a3);
}

uint64_t GPUTools::MTL::Utils::IsIndirectCommandBufferRender()
{
  return MEMORY[0x24BE63618]();
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLRenderPassDescriptor(GPUTools::MTL::Utils *this, const void *a2, DYMTLRenderPassDescriptor *a3)
{
  return MEMORY[0x24BE63620](this, a2, a3);
}

uint64_t GPUTools::MTL::Utils::IsIndirectCommandBufferCompute()
{
  return MEMORY[0x24BE63628]();
}

uint64_t GPUTools::MTL::Utils::EnumerateValidAttachmentsForType()
{
  return MEMORY[0x24BE63630]();
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLMutableBufferAncestorMaps()
{
  return MEMORY[0x24BE63638]();
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLIndirectArgumentBufferInfos()
{
  return MEMORY[0x24BE63640]();
}

uint64_t llvm::DISubrange::getLowerBound(llvm::DISubrange *this)
{
  return MEMORY[0x24BED78F8](this);
}

uint64_t llvm::DISubrange::getCount(llvm::DISubrange *this)
{
  return MEMORY[0x24BED7900](this);
}

uint64_t llvm::NamedMDNode::getOperand(llvm::NamedMDNode *this)
{
  return MEMORY[0x24BED7A60](this);
}

uint64_t llvm::NamedMDNode::getNumOperands(llvm::NamedMDNode *this)
{
  return MEMORY[0x24BED7A78](this);
}

uint64_t llvm::DILocalScope::getSubprogram(llvm::DILocalScope *this)
{
  return MEMORY[0x24BED7B18](this);
}

uint64_t llvm::MemoryBuffer::getMemBufferRef(llvm::MemoryBuffer *this)
{
  return MEMORY[0x24BED7B40](this);
}

uint64_t llvm::DINode::getTag(llvm::DINode *this)
{
  return MEMORY[0x24BED7FF0](this);
}

uint64_t llvm::Module::getNamedMetadata()
{
  return MEMORY[0x24BED8030]();
}

uint64_t llvm::Module::getGlobalVariable()
{
  return MEMORY[0x24BED8048]();
}

uint64_t llvm::MDString::getString(llvm::MDString *this)
{
  return MEMORY[0x24BED82C8](this);
}

uint64_t GPUTools::FD::Argument::ViewAsGLObjectName(GPUTools::FD::Argument *this)
{
  return MEMORY[0x24BE39238](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACE8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>()
{
  return MEMORY[0x24BEDB3D8]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_250D6E958(__p);
}

uint64_t operator delete()
{
  return off_250D6E960();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_250D6E968(__sz);
}

uint64_t operator new()
{
  return off_250D6E970();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return (const char *)MEMORY[0x24BDACA40](*(_QWORD *)&image_index);
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x24BDACA78]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x24BDADD60](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

uint64_t dy_abort()
{
  return MEMORY[0x24BE39240]();
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x24BEDD080](object, key);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x24BEDD3C0](object, key, value, policy);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x24BEDD468](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

SEL sel_getUid(const char *str)
{
  return (SEL)MEMORY[0x24BEDD508](str);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x24BDAFFC8](__s1, __s2);
}

