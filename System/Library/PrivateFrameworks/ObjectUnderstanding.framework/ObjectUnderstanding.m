void sub_2294C9864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2294CA258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL float4x4FromNSArray(NSArray *a1, simd_float4x4 *a2)
{
  NSArray *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t i;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  simd_float4 v17;
  unsigned int v18;
  _BOOL8 v19;
  NSArray *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v3 = a1;
  v4 = -[NSArray count](v3, "count");
  if (v4 == 4)
  {
    -[NSArray objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSArray objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSArray objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v3;
    -[NSArray objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i != 4; ++i)
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", i);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "floatValue");
      v24 = v11;
      objc_msgSend(v6, "objectAtIndexedSubscript:", i);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "floatValue");
      v23 = v13;
      objc_msgSend(v7, "objectAtIndexedSubscript:", i);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "floatValue");
      v22 = v15;
      objc_msgSend(v8, "objectAtIndexedSubscript:", i);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "floatValue");
      v17.i64[0] = __PAIR64__(v23, v24);
      v17.i64[1] = __PAIR64__(v18, v22);
      a2->columns[i] = v17;

    }
    v4 = 4;
    v3 = v21;
  }
  v19 = v4 == 4;

  return v19;
}

{
  NSArray *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t i;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  void *v16;
  simd_float4 v17;
  unsigned int v18;
  _BOOL8 v19;
  NSArray *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;

  v3 = a1;
  v4 = -[NSArray count](v3, "count");
  if (v4 == 4)
  {
    -[NSArray objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSArray objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSArray objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v3;
    -[NSArray objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i != 4; ++i)
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", i);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "floatValue");
      v24 = v11;
      objc_msgSend(v6, "objectAtIndexedSubscript:", i);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "floatValue");
      v23 = v13;
      objc_msgSend(v7, "objectAtIndexedSubscript:", i);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "floatValue");
      v22 = v15;
      objc_msgSend(v8, "objectAtIndexedSubscript:", i);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "floatValue");
      v17.i64[0] = __PAIR64__(v23, v24);
      v17.i64[1] = __PAIR64__(v18, v22);
      a2->columns[i] = v17;

    }
    v4 = 4;
    v3 = v21;
  }
  v19 = v4 == 4;

  return v19;
}

void sub_2294CA5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_2294CA740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)_OUFrame;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_2294CAC40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id OUFrameToDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  __CVBuffer *v17;
  void *BaseAddress;
  size_t DataSize;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  __CVBuffer *v24;
  void *v25;
  size_t v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  __CVBuffer *v31;
  void *v32;
  size_t v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  __CVBuffer *v38;
  void *v39;
  size_t v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  __CVBuffer *v45;
  void *v46;
  size_t v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  __CVBuffer *v52;
  void *v53;
  size_t v54;
  id v55;
  void *v56;
  simd_float4x4 v58;

  v1 = a1;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v1, "timestamp");
  objc_msgSend(v3, "numberWithDouble:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("timestamp"));

  objc_msgSend(v1, "referenceOriginTransform");
  v58.columns[0] = v5;
  v58.columns[1] = v6;
  v58.columns[2] = v7;
  v58.columns[3] = v8;
  float4x4ToNSArray(&v58, *(double *)v5.i64);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, CFSTR("reference_origin_transform"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v1, "deviceOrientation"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CFSTR("device_orientation"));

  objc_msgSend(v1, "camera");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  OUCameraToDictionary(v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CFSTR("camera"));

  objc_msgSend(v1, "sceneCamera");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  OUCameraToDictionary(v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, CFSTR("scene_camera"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "colorBuffer")));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, CFSTR("color_width"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "colorBuffer")));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, CFSTR("color_height"));

  v17 = (__CVBuffer *)objc_msgSend(v1, "colorBuffer");
  CVPixelBufferLockBaseAddress(v17, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(v17);
  DataSize = CVPixelBufferGetDataSize(v17);
  if (BaseAddress && DataSize)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", BaseAddress);
    v20 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v20 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v21 = v20;
  CVPixelBufferUnlockBaseAddress(v17, 1uLL);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v21, CFSTR("color_buffer"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "sceneColorBuffer")));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v22, CFSTR("scene_color_width"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "sceneColorBuffer")));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v23, CFSTR("scene_color_height"));

  v24 = (__CVBuffer *)objc_msgSend(v1, "sceneColorBuffer");
  CVPixelBufferLockBaseAddress(v24, 1uLL);
  v25 = CVPixelBufferGetBaseAddress(v24);
  v26 = CVPixelBufferGetDataSize(v24);
  if (v25 && v26)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v25);
    v27 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v27 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v28 = v27;
  CVPixelBufferUnlockBaseAddress(v24, 1uLL);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v28, CFSTR("scene_color_buffer"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "semanticLabelBuffer")));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v29, CFSTR("semantic_label_width"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "semanticLabelBuffer")));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v30, CFSTR("semantic_label_height"));

  v31 = (__CVBuffer *)objc_msgSend(v1, "semanticLabelBuffer");
  CVPixelBufferLockBaseAddress(v31, 1uLL);
  v32 = CVPixelBufferGetBaseAddress(v31);
  v33 = CVPixelBufferGetDataSize(v31);
  if (v32 && v33)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v32);
    v34 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v34 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v35 = v34;
  CVPixelBufferUnlockBaseAddress(v31, 1uLL);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v35, CFSTR("semantic_label_buffer"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "semanticConfidenceBuffer")));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v36, CFSTR("semantic_confidence_width"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "semanticConfidenceBuffer")));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v37, CFSTR("semantic_confidence_height"));

  v38 = (__CVBuffer *)objc_msgSend(v1, "semanticConfidenceBuffer");
  CVPixelBufferLockBaseAddress(v38, 1uLL);
  v39 = CVPixelBufferGetBaseAddress(v38);
  v40 = CVPixelBufferGetDataSize(v38);
  if (v39 && v40)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v39);
    v41 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v41 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v42 = v41;
  CVPixelBufferUnlockBaseAddress(v38, 1uLL);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v42, CFSTR("semantic_confidence_buffer"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "sceneDepthBuffer")));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v43, CFSTR("scene_depth_width"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "sceneDepthBuffer")));
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v44, CFSTR("scene_depth_height"));

  v45 = (__CVBuffer *)objc_msgSend(v1, "sceneDepthBuffer");
  CVPixelBufferLockBaseAddress(v45, 1uLL);
  v46 = CVPixelBufferGetBaseAddress(v45);
  v47 = CVPixelBufferGetDataSize(v45);
  if (v46 && v47)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v46);
    v48 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v48 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v49 = v48;
  CVPixelBufferUnlockBaseAddress(v45, 1uLL);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v49, CFSTR("scene_depth_buffer"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v1, "sceneDepthConfidenceBuffer")));
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v50, CFSTR("scene_depth_confidence_width"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v1, "sceneDepthConfidenceBuffer")));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v51, CFSTR("scene_depth_confidence_height"));

  v52 = (__CVBuffer *)objc_msgSend(v1, "sceneDepthConfidenceBuffer");
  CVPixelBufferLockBaseAddress(v52, 1uLL);
  v53 = CVPixelBufferGetBaseAddress(v52);
  v54 = CVPixelBufferGetDataSize(v52);
  if (v53 && v54)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v53);
    v55 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v55 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v56 = v55;
  CVPixelBufferUnlockBaseAddress(v52, 1uLL);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v56, CFSTR("scene_depth_confidence_buffer"));

  return v2;
}

void sub_2294CB454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id float4x4ToNSArray(const simd_float4x4 *a1, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  double v17;
  void *v18;
  double v19;
  void *v20;
  double v21;
  void *v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD v40[4];
  _QWORD v41[4];
  _QWORD v42[4];
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  _QWORD v47[6];

  v47[4] = *MEMORY[0x24BDAC8D0];
  LODWORD(a2) = a1->columns[0].i32[0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", a2);
  v43 = objc_claimAutoreleasedReturnValue();
  LODWORD(v3) = a1->columns[1].i32[0];
  v39 = (void *)v43;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v3);
  v44 = objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = a1->columns[2].i32[0];
  v38 = (void *)v44;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v4);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = v37;
  LODWORD(v5) = a1->columns[3].i32[0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v5);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = v36;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v43, 4);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v47[0] = v35;
  LODWORD(v6) = a1->columns[0].i32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v6);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v42[0] = v34;
  LODWORD(v7) = a1->columns[1].i32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v7);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v42[1] = v33;
  LODWORD(v8) = a1->columns[2].i32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v8);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v42[2] = v32;
  LODWORD(v9) = a1->columns[3].i32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v9);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v42[3] = v31;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v42, 4);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v47[1] = v30;
  LODWORD(v10) = a1->columns[0].i32[2];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v10);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v41[0] = v29;
  LODWORD(v11) = a1->columns[1].i32[2];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v11);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v41[1] = v28;
  LODWORD(v12) = a1->columns[2].i32[2];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v41[2] = v13;
  LODWORD(v14) = a1->columns[3].i32[2];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v41[3] = v15;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v41, 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v47[2] = v16;
  LODWORD(v17) = a1->columns[0].i32[3];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v40[0] = v18;
  LODWORD(v19) = a1->columns[1].i32[3];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v40[1] = v20;
  LODWORD(v21) = a1->columns[2].i32[3];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v40[2] = v22;
  LODWORD(v23) = a1->columns[3].i32[3];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v40[3] = v24;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v40, 4);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v47[3] = v25;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v47, 4);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  return v26;
}

{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  double v17;
  void *v18;
  double v19;
  void *v20;
  double v21;
  void *v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  _QWORD v40[4];
  _QWORD v41[4];
  _QWORD v42[4];
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  _QWORD v47[6];

  v47[4] = *MEMORY[0x24BDAC8D0];
  LODWORD(a2) = a1->columns[0].i32[0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", a2);
  v43 = objc_claimAutoreleasedReturnValue();
  LODWORD(v3) = a1->columns[1].i32[0];
  v39 = (void *)v43;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v3);
  v44 = objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = a1->columns[2].i32[0];
  v38 = (void *)v44;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v4);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = v37;
  LODWORD(v5) = a1->columns[3].i32[0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v5);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = v36;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v43, 4);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v47[0] = v35;
  LODWORD(v6) = a1->columns[0].i32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v6);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v42[0] = v34;
  LODWORD(v7) = a1->columns[1].i32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v7);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v42[1] = v33;
  LODWORD(v8) = a1->columns[2].i32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v8);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v42[2] = v32;
  LODWORD(v9) = a1->columns[3].i32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v9);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v42[3] = v31;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v42, 4);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v47[1] = v30;
  LODWORD(v10) = a1->columns[0].i32[2];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v10);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v41[0] = v29;
  LODWORD(v11) = a1->columns[1].i32[2];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v11);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v41[1] = v28;
  LODWORD(v12) = a1->columns[2].i32[2];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v41[2] = v13;
  LODWORD(v14) = a1->columns[3].i32[2];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v41[3] = v15;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v41, 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v47[2] = v16;
  LODWORD(v17) = a1->columns[0].i32[3];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v40[0] = v18;
  LODWORD(v19) = a1->columns[1].i32[3];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v40[1] = v20;
  LODWORD(v21) = a1->columns[2].i32[3];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v40[2] = v22;
  LODWORD(v23) = a1->columns[3].i32[3];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v40[3] = v24;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v40, 4);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v47[3] = v25;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v47, 4);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  return v26;
}

void sub_2294CB80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

_OUFrame *OUFrameFromDictionary(void *a1)
{
  id v1;
  _OUFrame *v2;

  v1 = a1;
  v2 = -[_OUFrame initWithDictionary:]([_OUFrame alloc], "initWithDictionary:", v1);

  return v2;
}

void sub_2294CB978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GetDeviceOrientation(__n128 a1, __n128 a2)
{
  NSObject *v3;

  if (a1.n128_f32[2] < -0.6)
    return 1;
  if (a1.n128_f32[2] > 0.6)
    return 2;
  if (a2.n128_f32[2] > 0.25)
    return 4;
  if (a2.n128_f32[2] < -0.25)
    return 3;
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    GetDeviceOrientation_cold_1();

  return 0;
}

CVPixelBufferRef LoadImageToCVPixelBuffer(NSString *a1, OSType a2)
{
  NSString *v3;
  const __CFURL *v4;
  CGImageSource *v5;
  CGImage *ImageAtIndex;
  size_t Width;
  size_t Height;
  void *v9;
  void *v10;
  void *v11;
  const __CFDictionary *pixelBufferAttributes;
  CGDataProvider *DataProvider;
  const __CFData *v14;
  UInt8 *BytePtr;
  size_t BytesPerRow;
  CVPixelBufferRef v17;
  char *BaseAddress;
  size_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  _BYTE *v23;
  size_t v24;
  _BYTE *i;
  char v26;
  NSObject *v28;
  std::logic_error *exception;
  CVPixelBufferRef pixelBuffer;

  v3 = a1;
  if (a2 != 1111970369 && a2 != 1278226742)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      LoadImageToCVPixelBuffer();

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, (const char *)&unk_22956FEC2);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v3);
  v4 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v5 = CGImageSourceCreateWithURL(v4, 0);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v5, 0, (CFDictionaryRef)&unk_24F24ABC0);
  CFRelease(v5);
  Width = CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  v9 = (void *)MEMORY[0x24BDBCE70];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "dictionaryWithObjectsAndKeys:", v10, *MEMORY[0x24BDC55E8], v11, *MEMORY[0x24BDC55E0], 0);
  pixelBufferAttributes = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  pixelBuffer = 0;
  DataProvider = CGImageGetDataProvider(ImageAtIndex);
  v14 = CGDataProviderCopyData(DataProvider);
  BytePtr = (UInt8 *)CFDataGetBytePtr(v14);
  BytesPerRow = CGImageGetBytesPerRow(ImageAtIndex);
  if (CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], (unint64_t)(double)Width, (unint64_t)(double)Height, a2, BytePtr, BytesPerRow, 0, 0, pixelBufferAttributes, &pixelBuffer))
  {
    v17 = 0;
  }
  else
  {
    if (a2 == 1111970369)
    {
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
      v19 = CVPixelBufferGetWidth(pixelBuffer);
      v20 = CVPixelBufferGetHeight(pixelBuffer);
      v21 = CVPixelBufferGetBytesPerRow(pixelBuffer);
      if (v20)
      {
        v22 = 0;
        v23 = BaseAddress + 2;
        do
        {
          v24 = v19;
          for (i = v23; v24; --v24)
          {
            v26 = *(i - 2);
            *(i - 2) = *i;
            *i = v26;
            i += 4;
          }
          ++v22;
          v23 += v21;
        }
        while (v22 != v20);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    }
    v17 = pixelBuffer;
  }

  return v17;
}

void sub_2294CBCD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL LoadRGBToDictionary(NSString *a1, NSMutableDictionary *a2)
{
  NSMutableDictionary *v3;
  utils *ImageToCVPixelBuffer;
  __CVBuffer **v5;
  __CVBuffer *v6;
  _BOOL8 v7;
  size_t Width;
  size_t Height;
  NSObject *v10;
  __CVBuffer *v11;
  void *BaseAddress;
  size_t DataSize;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  size_t v23;
  id v24;
  void *v25;
  CVPixelBufferRef pixelBuffer;

  v3 = a2;
  ImageToCVPixelBuffer = LoadImageToCVPixelBuffer(a1, 0x42475241u);
  v6 = ImageToCVPixelBuffer;
  if (ImageToCVPixelBuffer)
  {
    pixelBuffer = 0;
    utils::ConvertColor32BGRATo420f(ImageToCVPixelBuffer, &pixelBuffer, v5);
    v7 = pixelBuffer != 0;
    if (pixelBuffer)
    {
      Width = CVPixelBufferGetWidth(pixelBuffer);
      Height = CVPixelBufferGetHeight(pixelBuffer);
      _OULoggingGetOSLogForCategoryObjectUnderstanding();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        LoadRGBToDictionary();

      v11 = pixelBuffer;
      CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
      BaseAddress = CVPixelBufferGetBaseAddress(v11);
      DataSize = CVPixelBufferGetDataSize(v11);
      if (BaseAddress && DataSize)
      {
        objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", BaseAddress);
        v14 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v14 = objc_alloc_init(MEMORY[0x24BDBCE50]);
      }
      v15 = v14;
      CVPixelBufferUnlockBaseAddress(v11, 1uLL);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v15, CFSTR("color_buffer"));

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", Width);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v16, CFSTR("color_width"));

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", Height);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v17, CFSTR("color_height"));

      -[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", CFSTR("color_buffer"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (void *)objc_msgSend(v18, "copy");
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v19, CFSTR("scene_color_buffer"));

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", Width);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v20, CFSTR("scene_color_width"));

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", Height);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v21, CFSTR("scene_color_height"));

      CVPixelBufferLockBaseAddress(v6, 1uLL);
      v22 = CVPixelBufferGetBaseAddress(v6);
      v23 = CVPixelBufferGetDataSize(v6);
      if (v22 && v23)
      {
        objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v22);
        v24 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v24 = objc_alloc_init(MEMORY[0x24BDBCE50]);
      }
      v25 = v24;
      CVPixelBufferUnlockBaseAddress(v6, 1uLL);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v25, CFSTR("scene_color_buffer_bgra"));

      CVPixelBufferRelease(v6);
      CVPixelBufferRelease(pixelBuffer);
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_2294CC00C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL LoadSemanticToDictionary(NSString *a1, NSMutableDictionary *a2)
{
  NSString *v3;
  NSMutableDictionary *v4;
  __CVBuffer *ImageToCVPixelBuffer;
  __CVBuffer *v6;
  size_t Width;
  size_t Height;
  NSObject *v9;
  const __CFDictionary *v10;
  _BYTE *BaseAddress;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  __CVBuffer *v18;
  void *v19;
  size_t DataSize;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  CVPixelBufferRef pixelBuffer;
  uint64_t v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  ImageToCVPixelBuffer = LoadImageToCVPixelBuffer(v3, 0x42475241u);
  v6 = ImageToCVPixelBuffer;
  if (ImageToCVPixelBuffer)
  {
    Width = CVPixelBufferGetWidth(ImageToCVPixelBuffer);
    Height = CVPixelBufferGetHeight(v6);
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      LoadSemanticToDictionary();

    pixelBuffer = 0;
    v27 = *MEMORY[0x24BDC5668];
    v28[0] = MEMORY[0x24BDBD1B8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v28, &v27, 1);
    v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (int)Width, (int)Height, 0x4C303038u, v10, &pixelBuffer);
    CVPixelBufferLockBaseAddress(v6, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(v6);
    v12 = CVPixelBufferGetBaseAddress(pixelBuffer);
    if ((int)Height >= 1)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = Width;
        v16 = v12;
        v17 = v13;
        if ((int)Width >= 1)
        {
          do
          {
            *v16++ = BaseAddress[v17 + 2];
            v17 += 4;
            --v15;
          }
          while (v15);
        }
        ++v14;
        v13 += 4 * Width;
        v12 += (int)Width;
      }
      while (v14 != Height);
    }
    CVPixelBufferUnlockBaseAddress(v6, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);

    v18 = pixelBuffer;
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    v19 = CVPixelBufferGetBaseAddress(v18);
    DataSize = CVPixelBufferGetDataSize(v18);
    if (v19 && DataSize)
    {
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v19);
      v21 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v21 = objc_alloc_init(MEMORY[0x24BDBCE50]);
    }
    v22 = v21;
    CVPixelBufferUnlockBaseAddress(v18, 1uLL);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v22, CFSTR("semantic_label_buffer"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", Width);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v23, CFSTR("semantic_label_width"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", Height);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v24, CFSTR("semantic_label_height"));

    CVPixelBufferRelease(v6);
    CVPixelBufferRelease(pixelBuffer);
  }

  return v6 != 0;
}

void sub_2294CC350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL LoadSemanticConfToDictionary(NSString *a1, NSMutableDictionary *a2)
{
  NSString *v3;
  NSMutableDictionary *v4;
  __CVBuffer *ImageToCVPixelBuffer;
  __CVBuffer *v6;
  size_t Width;
  size_t Height;
  NSObject *v9;
  const __CFDictionary *v10;
  char *BaseAddress;
  float *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  float v21;
  __CVBuffer *v22;
  void *v23;
  size_t DataSize;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  CVPixelBufferRef pixelBuffer;
  uint64_t v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  ImageToCVPixelBuffer = LoadImageToCVPixelBuffer(v3, 0x42475241u);
  v6 = ImageToCVPixelBuffer;
  if (ImageToCVPixelBuffer)
  {
    Width = CVPixelBufferGetWidth(ImageToCVPixelBuffer);
    Height = CVPixelBufferGetHeight(v6);
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      LoadSemanticConfToDictionary();

    pixelBuffer = 0;
    v31 = *MEMORY[0x24BDC5668];
    v32[0] = MEMORY[0x24BDBD1B8];
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
    v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (int)Width, (int)Height, 0x4C303066u, v10, &pixelBuffer);
    CVPixelBufferLockBaseAddress(v6, 1uLL);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(v6);
    v12 = (float *)CVPixelBufferGetBaseAddress(pixelBuffer);
    if ((int)Height >= 1)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = Width;
        v16 = v12;
        v17 = v13;
        if ((int)Width >= 1)
        {
          do
          {
            v18 = &BaseAddress[v17];
            v19 = v18[2];
            v20 = v18[1] + *v18 + v19 + v18[3];
            if (v20)
              v21 = (float)(char)v19 / (float)v20;
            else
              v21 = 0.0;
            *v16++ = v21;
            v17 += 4;
            --v15;
          }
          while (v15);
        }
        ++v14;
        v13 += 4 * Width;
        v12 += (int)Width;
      }
      while (v14 != Height);
    }
    CVPixelBufferUnlockBaseAddress(v6, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);

    v22 = pixelBuffer;
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    v23 = CVPixelBufferGetBaseAddress(v22);
    DataSize = CVPixelBufferGetDataSize(v22);
    if (v23 && DataSize)
    {
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v23);
      v25 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v25 = objc_alloc_init(MEMORY[0x24BDBCE50]);
    }
    v26 = v25;
    CVPixelBufferUnlockBaseAddress(v22, 1uLL);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v26, CFSTR("semantic_confidence_buffer"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", Width);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v27, CFSTR("semantic_confidence_width"));

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", Height);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v28, CFSTR("semantic_confidence_height"));

    CVPixelBufferRelease(v6);
    CVPixelBufferRelease(pixelBuffer);
  }

  return v6 != 0;
}

void sub_2294CC6D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t LoadDepthToDictionary(NSString *a1, NSMutableDictionary *a2)
{
  NSString *v3;
  NSMutableDictionary *v4;
  __CVBuffer *ImageToCVPixelBuffer;
  size_t Width;
  size_t Height;
  NSObject *v8;
  const __CFDictionary *v9;
  float *BaseAddress;
  unsigned __int16 *v11;
  uint64_t i;
  size_t v13;
  float *v14;
  unsigned __int16 *j;
  unsigned int v16;
  __CVBuffer *v17;
  void *v18;
  size_t DataSize;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  CVPixelBufferRef pixelBuffer;
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  ImageToCVPixelBuffer = LoadImageToCVPixelBuffer(v3, 0x4C303136u);
  Width = CVPixelBufferGetWidth(ImageToCVPixelBuffer);
  Height = CVPixelBufferGetHeight(ImageToCVPixelBuffer);
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    LoadDepthToDictionary(Width, Height, v8);

  pixelBuffer = 0;
  v26 = *MEMORY[0x24BDC5668];
  v27[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
  v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], Width, Height, 0x66646570u, v9, &pixelBuffer);
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  CVPixelBufferLockBaseAddress(ImageToCVPixelBuffer, 1uLL);
  BaseAddress = (float *)CVPixelBufferGetBaseAddress(pixelBuffer);
  v11 = (unsigned __int16 *)CVPixelBufferGetBaseAddress(ImageToCVPixelBuffer);
  if (Height)
  {
    for (i = 0; i != Height; ++i)
    {
      v13 = Width;
      v14 = BaseAddress;
      for (j = v11; v13; --v13)
      {
        v16 = *j++;
        *v14++ = (float)v16 / 1000.0;
      }
      v11 += Width;
      BaseAddress += Width;
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferUnlockBaseAddress(ImageToCVPixelBuffer, 1uLL);
  CVPixelBufferRelease(ImageToCVPixelBuffer);

  v17 = pixelBuffer;
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  v18 = CVPixelBufferGetBaseAddress(v17);
  DataSize = CVPixelBufferGetDataSize(v17);
  if (v18 && DataSize)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v18);
    v20 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v20 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v21 = v20;
  CVPixelBufferUnlockBaseAddress(v17, 1uLL);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v21, CFSTR("scene_depth_buffer"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", Width);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v22, CFSTR("scene_depth_width"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", Height);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v23, CFSTR("scene_depth_height"));

  CVPixelBufferRelease(pixelBuffer);
  return 1;
}

void sub_2294CCA00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void FindImageFilePath(NSString *a1@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, _BYTE *a4@<X8>)
{
  NSString *v6;
  NSString *v7;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v16;
  const std::__fs::filesystem::directory_entry *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  int64_t size;
  std::string *v24;
  int v25;
  void *v26;
  std::string *v27;
  int64_t v28;
  char *v29;
  int v30;
  std::string *v31;
  int64_t v32;
  char *v33;
  char *v34;
  NSObject *v35;
  void *v36;
  int v37;
  std::string::size_type v38;
  uint64_t v39;
  std::string *p_p;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *cntrl;
  uint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v59;
  id v61;
  NSString *v62;
  NSString *v63;
  NSString *v64;
  std::string v65;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v66;
  std::__shared_weak_count *v67;
  std::__fs::filesystem::directory_iterator v68;
  std::__fs::filesystem::directory_entry::_Path __p;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v70;
  std::__shared_weak_count *v71;

  v6 = a1;
  v7 = a2;
  v63 = v6;
  v64 = a3;
  v62 = v7;
  -[NSString stringByAppendingPathComponent:](v6, "stringByAppendingPathComponent:", v7);
  v61 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v65.__r_.__value_.__r.__words[0] = objc_msgSend(v61, "UTF8String");
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p.__pn_, &v65.__r_.__value_.__l.__data_);
  MEMORY[0x22E2CAA10](&v70, &__p, 0, 0);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  v8 = v70;
  v9 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = v71;
    v68.__imp_.__ptr_ = v8;
    v68.__imp_.__cntrl_ = v9;
    if (v71)
    {
      v13 = (unint64_t *)&v71->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v66 = 0;
      v67 = 0;
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_15;
    }
  }
  else
  {
    v68.__imp_.__ptr_ = v70;
    v68.__imp_.__cntrl_ = 0;
  }
  v66 = 0;
  v67 = 0;
LABEL_15:
  v16 = v66;
  v59 = v66;
LABEL_16:
  if (v68.__imp_.__ptr_ == v16)
  {
    v50 = v67;
    if (v67)
    {
      v51 = (unint64_t *)&v67->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    cntrl = v68.__imp_.__cntrl_;
    if (v68.__imp_.__cntrl_)
    {
      v54 = &v68.__imp_.__cntrl_->__shared_owners_;
      do
        v55 = __ldaxr((unint64_t *)v54);
      while (__stlxr(v55 - 1, (unint64_t *)v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
        std::__shared_weak_count::__release_weak(cntrl);
      }
    }
    v56 = v71;
    if (v71)
    {
      v57 = (unint64_t *)&v71->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    *a4 = 0;
    a4[8] = 0;
  }
  else
  {
    v17 = std::__fs::filesystem::directory_iterator::__dereference(&v68);
    if (SHIBYTE(v17->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p.__pn_, v17->__p_.__pn_.__r_.__value_.__l.__data_, v17->__p_.__pn_.__r_.__value_.__l.__size_);
    else
      __p.__pn_ = (std::__fs::filesystem::path::string_type)v17->__p_;
    v18 = 0;
    while (1)
    {
      v19 = off_24F242D90[v18];
      std::string::basic_string[abi:ne180100]<0>(&v65, "_");
      v20 = -[NSString UTF8String](objc_retainAutorelease(v64), "UTF8String");
      v21 = strlen(v20);
      std::string::append(&v65, v20, v21);
      v22 = strlen(v19);
      std::string::append(&v65, v19, v22);
      size = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
      v24 = (__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (std::string *)&__p
          : (std::string *)__p.__pn_.__r_.__value_.__r.__words[0];
      v25 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
      v26 = (void *)v65.__r_.__value_.__r.__words[0];
      v27 = (v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v65
          : (std::string *)v65.__r_.__value_.__r.__words[0];
      v28 = (v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v65.__r_.__value_.__r.__words[2])
          : v65.__r_.__value_.__l.__size_;
      if (!v28)
        break;
      if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__pn_.__r_.__value_.__l.__size_;
      if (size >= v28)
      {
        v29 = (char *)v24 + size;
        v30 = v27->__r_.__value_.__s.__data_[0];
        v31 = v24;
        do
        {
          v32 = size - v28;
          if (v32 == -1)
            break;
          v33 = (char *)memchr(v31, v30, v32 + 1);
          if (!v33)
            break;
          v34 = v33;
          if (!memcmp(v33, v27, v28))
          {
            if (v34 == v29 || v34 - (char *)v24 == -1)
              break;
            goto LABEL_50;
          }
          v31 = (std::string *)(v34 + 1);
          size = v29 - (v34 + 1);
        }
        while (size >= v28);
      }
      if (v25 < 0)
        operator delete(v26);
      if (++v18 == 2)
      {
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        std::__fs::filesystem::directory_iterator::__increment(&v68, 0);
        v16 = v59;
        goto LABEL_16;
      }
    }
LABEL_50:
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      FindImageFilePath((uint64_t)v24, v35);

    v36 = (void *)MEMORY[0x24BDD17C8];
    v37 = SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
    v38 = __p.__pn_.__r_.__value_.__r.__words[0];
    v39 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
    if (v37 >= 0)
      p_p = (std::string *)&__p;
    else
      p_p = (std::string *)v38;
    objc_msgSend(v36, "stringWithCString:encoding:", p_p, v39);
    *(_QWORD *)a4 = objc_claimAutoreleasedReturnValue();
    a4[8] = 1;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    v41 = v67;
    if (v67)
    {
      v42 = (unint64_t *)&v67->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = v68.__imp_.__cntrl_;
    if (v68.__imp_.__cntrl_)
    {
      v45 = &v68.__imp_.__cntrl_->__shared_owners_;
      do
        v46 = __ldaxr((unint64_t *)v45);
      while (__stlxr(v46 - 1, (unint64_t *)v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = v71;
    if (v71)
    {
      v48 = (unint64_t *)&v71->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }

}

void sub_2294CCF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<std::__fs::filesystem::__dir_stream>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::~shared_ptr[abi:ne180100](v31 - 104);

  _Unwind_Resume(a1);
}

id GenerateOUFramesFromCvplayer(void *a1)
{
  void *v1;
  id v2;
  simd_float4x4 *v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int64_t v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  void *v28;
  _BOOL4 v29;
  id v30;
  id v31;
  uint64_t v32;
  int32x4_t v33;
  float v34;
  float v35;
  const float *v36;
  float32x4_t v37;
  uint64_t v38;
  double v44;
  double v45;
  uint64_t v46;
  NSString *v47;
  int v48;
  NSArray *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t DeviceOrientation;
  NSMutableDictionary *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  double v69;
  void *v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  id v75;
  double v76;
  double v77;
  double v78;
  id v79;
  void *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  _OUCamera *v85;
  simd_float4 v86;
  simd_float4 v87;
  __n128 v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *obj;
  id obja;
  NSString *v94;
  int v95;
  int32x4_t v96;
  int v97;
  int32x4_t v98;
  int v99;
  simd_float4x4 v100;
  simd_float4x4 v101;
  NSString *v102;
  unsigned __int8 v103;
  NSString *v104;
  unsigned __int8 v105;
  NSString *v106;
  unsigned __int8 v107;
  NSString *v108;
  unsigned __int8 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  void *__p;
  char *v119;
  char *v120;
  simd_float4x4 v121;
  _BYTE v122[5];
  uint8_t v123[128];
  uint8_t buf[16];
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  uint64_t v128;
  _QWORD v129[21];
  simd_float4x4 v130;

  v129[19] = *MEMORY[0x24BDAC8D0];
  v119 = 0;
  __p = 0;
  v120 = 0;
  v94 = a1;
  -[NSString stringByAppendingPathComponent:](v94, "stringByAppendingPathComponent:", CFSTR("camera.txt"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v1)
    goto LABEL_78;
  v2 = objc_retainAutorelease(v1);
  std::string::basic_string[abi:ne180100]<0>(&v121, (char *)objc_msgSend(v2, "UTF8String"));
  if (v121.columns[1].i8[7] >= 0)
    v3 = &v121;
  else
    v3 = (simd_float4x4 *)v121.columns[0].i64[0];
  std::string::basic_string[abi:ne180100]<0>(&v101, (char *)v3);
  std::ifstream::basic_ifstream(buf);
  if (v128)
  {
    v100.columns[0].i32[0] = 0;
    while (1)
    {
      v4 = (_QWORD *)MEMORY[0x22E2CA974](buf, &v100);
      if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) != 0)
        break;
      v5 = v119;
      if (v119 >= v120)
      {
        v7 = (char *)__p;
        v8 = (v119 - (_BYTE *)__p) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v10 = v120 - (_BYTE *)__p;
        if ((v120 - (_BYTE *)__p) >> 1 > v9)
          v9 = v10 >> 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v120, v11);
          v5 = v119;
          v7 = (char *)__p;
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[4 * v8];
        *(_DWORD *)v13 = v100.columns[0].i32[0];
        v6 = v13 + 4;
        while (v5 != v7)
        {
          v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        __p = v13;
        v119 = v6;
        v120 = &v12[4 * v11];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_DWORD *)v119 = v100.columns[0].i32[0];
        v6 = v5 + 4;
      }
      v119 = v6;
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)], *(__int32 *)((char *)v126.i32 + *(_QWORD *)(*(_QWORD *)buf - 24)) | 4);
  }
  *(_QWORD *)buf = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x22E2CA944](&v125);
  std::istream::~istream();
  MEMORY[0x22E2CAA7C](v129);
  if (v101.columns[1].i8[7] < 0)
    operator delete((void *)v101.columns[0].i64[0]);
  v15 = v119 - (_BYTE *)__p;
  if (v121.columns[1].i8[7] < 0)
    operator delete((void *)v121.columns[0].i64[0]);

  if (v15 == 24)
  {
    v16 = objc_alloc_init(MEMORY[0x24BDBCED8]);
    -[NSString stringByAppendingPathComponent:](v94, "stringByAppendingPathComponent:", CFSTR("image_meta.json"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
    {
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v18, 0, 0);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v80 = (void *)objc_msgSend(v19, "mutableCopy");

      v75 = objc_alloc_init(MEMORY[0x24BDBCED8]);
      -[NSString stringByAppendingPathComponent:](v94, "stringByAppendingPathComponent:", CFSTR("pose.json"));
      v20 = objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        obj = v20;
        objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v21, 0, 0);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        v115 = 0u;
        v23 = v22;
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v114, v123, 16);
        if (v24)
        {
          v25 = *(_QWORD *)v115;
          while (2)
          {
            for (i = 0; i != v24; ++i)
            {
              if (*(_QWORD *)v115 != v25)
                objc_enumerationMutation(v23);
              v27 = *(_QWORD *)(*((_QWORD *)&v114 + 1) + 8 * i);
              objc_msgSend(v80, "objectForKey:", v27);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              v29 = v28 == 0;

              if (v29)
              {
                _OULoggingGetOSLogForCategoryObjectUnderstanding();
                v73 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                  GenerateOUFramesFromCvplayer_cold_2();

LABEL_84:
                goto LABEL_85;
              }
              objc_msgSend(v23, "objectForKeyedSubscript:", v27);
              v30 = (id)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v31 = v30;
              else
                v31 = 0;

              if (!v31)
                goto LABEL_84;
              objc_msgSend(v75, "setObject:forKeyedSubscript:", v31, v27);

            }
            v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v114, v123, 16);
            if (v24)
              continue;
            break;
          }
        }

        v32 = objc_msgSend(v80, "count");
        if (v32 == objc_msgSend(v75, "count"))
        {
          v34 = *(float *)__p;
          v35 = *((float *)__p + 1);
          v36 = (const float *)((char *)__p + 16);
          v33.i32[0] = *((_DWORD *)__p + 5);
          v98 = v33;
          v37 = vld1q_dup_f32(v36);
          v96 = (int32x4_t)v37;
          v37.i32[0] = *((_DWORD *)__p + 2);
          v78 = *(double *)v37.i64;
          v37.i32[0] = 0;
          v37.i32[1] = *((_DWORD *)__p + 3);
          v77 = *(double *)v37.i64;
          v79 = objc_alloc_init(MEMORY[0x24BDBCED8]);
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          obja = v75;
          v38 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v110, v122, 16);
          if (v38)
          {
            __asm { FMOV            V0.4S, #1.0 }
            *(_QWORD *)&v76 = vzip1q_s32(vzip2q_s32(v96, _Q0), v98).u64[0];
            v90 = *(_QWORD *)v111;
            v44 = v34;
            v45 = v35;
            do
            {
              v46 = 0;
              v91 = v38;
              do
              {
                if (*(_QWORD *)v111 != v90)
                  objc_enumerationMutation(obja);
                v47 = *(NSString **)(*((_QWORD *)&v110 + 1) + 8 * v46);
                FindImageFilePath(v94, CFSTR("/color/"), v47, &v108);
                FindImageFilePath(v94, CFSTR("/depth/"), v47, &v106);
                FindImageFilePath(v94, CFSTR("/label/"), v47, &v104);
                FindImageFilePath(v94, CFSTR("/vote/"), v47, &v102);
                v48 = v107;
                v99 = v105;
                v97 = v103;
                v95 = v109;
                if (v109)
                {
                  if (v107)
                  {
                    if (v105)
                    {
                      if (v103)
                      {
                        objc_msgSend(obja, "objectForKeyedSubscript:", v47);
                        v49 = (NSArray *)objc_claimAutoreleasedReturnValue();
                        v50 = float4x4FromNSArray(v49, &v101);

                        if (v50)
                        {
                          v100.columns[0] = (simd_float4)xmmword_2295604A0;
                          v100.columns[1] = (simd_float4)xmmword_2295604B0;
                          v100.columns[2] = (simd_float4)xmmword_2295604C0;
                          v100.columns[3] = (simd_float4)xmmword_229560490;
                          v88 = (__n128)v101.columns[1];
                          v89 = (__n128)v101.columns[0];
                          v86 = v101.columns[3];
                          v87 = v101.columns[2];
                          v130 = __invert_f4(*(simd_float4x4 *)ARKit_VW_RW);
                          v51 = 0;
                          v121 = v130;
                          do
                          {
                            *(float32x4_t *)&buf[v51 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2295604A0, COERCE_FLOAT(*(_OWORD *)&v121.columns[v51])), (float32x4_t)xmmword_2295604B0, *(float32x2_t *)v121.columns[v51].f32, 1), (float32x4_t)xmmword_2295604C0, (float32x4_t)v121.columns[v51], 2), (float32x4_t)xmmword_229560490, (float32x4_t)v121.columns[v51], 3);
                            ++v51;
                          }
                          while (v51 != 4);
                          v52 = 0;
                          v53 = *(float32x4_t *)buf;
                          v54 = v125;
                          v55 = v126;
                          v56 = v127;
                          v121.columns[0] = (simd_float4)v89;
                          v121.columns[1] = (simd_float4)v88;
                          v121.columns[2] = v87;
                          v121.columns[3] = v86;
                          do
                          {
                            *(float32x4_t *)&buf[v52 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(*(_OWORD *)&v121.columns[v52])), v54, *(float32x2_t *)v121.columns[v52].f32, 1), v55, (float32x4_t)v121.columns[v52], 2), v56, (float32x4_t)v121.columns[v52], 3);
                            ++v52;
                          }
                          while (v52 != 4);
                          v57 = 0;
                          v58 = *(float32x4_t *)buf;
                          v59 = v125;
                          v60 = v126;
                          v61 = v127;
                          v121 = *(simd_float4x4 *)VC_RC;
                          do
                          {
                            *(float32x4_t *)&buf[v57 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58, COERCE_FLOAT(*(_OWORD *)&v121.columns[v57])), v59, *(float32x2_t *)v121.columns[v57].f32, 1), v60, (float32x4_t)v121.columns[v57], 2), v61, (float32x4_t)v121.columns[v57], 3);
                            ++v57;
                          }
                          while (v57 != 4);
                          v83 = *(double *)v125.i64;
                          v84 = *(double *)buf;
                          v81 = *(double *)v127.i64;
                          v82 = *(double *)v126.i64;
                          DeviceOrientation = GetDeviceOrientation(v89, v88);
                          v85 = objc_alloc_init(_OUCamera);
                          -[_OUCamera setImageResolution:](v85, "setImageResolution:", v44, v45);
                          -[_OUCamera setIntrinsics:](v85, "setIntrinsics:", v78, v77, v76);
                          -[_OUCamera setPose:](v85, "setPose:", v89.n128_f64[0], v88.n128_f64[0], *(double *)v87.i64, *(double *)v86.i64);
                          -[_OUCamera setTransform:](v85, "setTransform:", v84, v83, v82, v81);
                          v63 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x24BDBCED8]);
                          objc_msgSend(v80, "objectForKeyedSubscript:", v47);
                          v64 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v64, "objectForKeyedSubscript:", CFSTR("timestamp"));
                          v65 = (void *)objc_claimAutoreleasedReturnValue();
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v63, "setObject:forKeyedSubscript:", v65, CFSTR("timestamp"));

                          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", DeviceOrientation);
                          v66 = (void *)objc_claimAutoreleasedReturnValue();
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v63, "setObject:forKeyedSubscript:", v66, CFSTR("device_orientation"));

                          OUCameraToDictionary(v85);
                          v67 = (void *)objc_claimAutoreleasedReturnValue();
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v63, "setObject:forKeyedSubscript:", v67, CFSTR("camera"));

                          OUCameraToDictionary(v85);
                          v68 = (void *)objc_claimAutoreleasedReturnValue();
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v63, "setObject:forKeyedSubscript:", v68, CFSTR("scene_camera"));

                          float4x4ToNSArray(&v100, v69);
                          v70 = (void *)objc_claimAutoreleasedReturnValue();
                          -[NSMutableDictionary setObject:forKeyedSubscript:](v63, "setObject:forKeyedSubscript:", v70, CFSTR("reference_origin_transform"));

                          LODWORD(v70) = LoadRGBToDictionary(v108, v63);
                          LoadDepthToDictionary(v106, v63);
                          LODWORD(v64) = LoadSemanticToDictionary(v104, v63);
                          if ((v70 & v64 & LoadSemanticConfToDictionary(v102, v63) & 1) != 0)
                          {
                            OUFrameFromDictionary(v63);
                            v71 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v79, "setObject:forKey:", v71, v47);

                          }
                        }
                      }
                    }
                  }
                }
                if (v97)

                if (v99)
                if (v48)

                if (v95)
                ++v46;
              }
              while (v46 != v91);
              v38 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v110, v122, 16);
            }
            while (v38);
          }

          _OULoggingGetOSLogForCategoryObjectUnderstanding();
          obj = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(obj, OS_LOG_TYPE_INFO))
          {
            v72 = objc_msgSend(v79, "count");
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v72;
            _os_log_impl(&dword_2294C8000, obj, OS_LOG_TYPE_INFO, "Load cvplayer dumped data to ouframes: %zu", buf, 0xCu);
          }
        }
        else
        {
          _OULoggingGetOSLogForCategoryObjectUnderstanding();
          obj = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(obj, OS_LOG_TYPE_ERROR))
            GenerateOUFramesFromCvplayer_cold_1(buf, objc_msgSend(v80, "count"), objc_msgSend(v75, "count"), obj);
LABEL_85:
          v79 = 0;
        }

      }
      else
      {
        v79 = 0;
      }

      v16 = v80;
    }
    else
    {
      v79 = 0;
    }

  }
  else
  {
LABEL_78:
    v79 = 0;
  }
  if (__p)
  {
    v119 = (char *)__p;
    operator delete(__p);
  }

  return v79;
}

void sub_2294CDAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,void *a49)
{
  void *v50;

  v50 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v50;
    operator delete(v50);
  }

  _Unwind_Resume(a1);
}

void sub_2294CDDD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294CDE34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2294CDE9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2294CDF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2294CDF6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<std::__fs::filesystem::__dir_stream>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F242630, MEMORY[0x24BEDAAF0]);
}

void sub_2294CE0C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_2294CE218(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_2294CE38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x22E2CA938](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x22E2CA938](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_2294CE52C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x22E2CAA7C](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x22E2CA944](a1 + 2);
  std::istream::~istream();
  MEMORY[0x22E2CAA7C](a1 + 53);
  return a1;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0xEu);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void _GLOBAL__sub_I_OUFrame_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x22E2CB070]();
  RW_VW = xmmword_2295604A0;
  unk_2540C9E00 = xmmword_2295604D0;
  xmmword_2540C9E10 = xmmword_2295604B0;
  unk_2540C9E20 = xmmword_229560490;
  *(simd_float4x4 *)VW_RW = __invert_f4(*(simd_float4x4 *)_PromotedConst);
  *(_OWORD *)RC_VC = xmmword_2295604A0;
  *(_OWORD *)&RC_VC[16] = xmmword_2295604E0;
  *(_OWORD *)&RC_VC[32] = xmmword_2295604D0;
  *(_OWORD *)&RC_VC[48] = xmmword_229560490;
  *(simd_float4x4 *)VC_RC = __invert_f4(*(simd_float4x4 *)_PromotedConst_200);
  *(_OWORD *)ARKit_VW_RW = xmmword_2295604E0;
  *(_OWORD *)&ARKit_VW_RW[16] = xmmword_2295604C0;
  *(_OWORD *)&ARKit_VW_RW[32] = xmmword_2295604F0;
  *(_OWORD *)&ARKit_VW_RW[48] = xmmword_229560490;
  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.ObjectUnderstandingTests"));
  ObjectUnderstandingTest::Bundle = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

void **std::vector<NSString * {__strong}>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void OU3DKitchenObjectMerger::Reset(OU3DKitchenObjectMerger *this)
{
  OU3DKitchenObject *i;
  OU3DKitchenObject *begin;
  OU3DKitchenObject *j;
  OU3DKitchenObject *v5;
  OU3DKitchenObject *k;
  OU3DKitchenObject *v7;
  OU3DKitchenObject *m;
  OU3DKitchenObject *v9;

  begin = this->old_cabinets_.__begin_;
  for (i = this->old_cabinets_.__end_; i != begin; std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>((uint64_t)i))
    i = (OU3DKitchenObject *)((char *)i - 272);
  this->old_cabinets_.__end_ = begin;
  v5 = this->new_cabinets_.__begin_;
  for (j = this->new_cabinets_.__end_; j != v5; std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>((uint64_t)j))
    j = (OU3DKitchenObject *)((char *)j - 272);
  this->new_cabinets_.__end_ = v5;
  v7 = this->other_objects_.__begin_;
  for (k = this->other_objects_.__end_; k != v7; std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>((uint64_t)k))
    k = (OU3DKitchenObject *)((char *)k - 272);
  this->other_objects_.__end_ = v7;
  v9 = this->fused_cabinets_.__begin_;
  for (m = this->fused_cabinets_.__end_; m != v9; std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>((uint64_t)m))
    m = (OU3DKitchenObject *)((char *)m - 272);
  this->fused_cabinets_.__end_ = v9;
}

float OU3DKitchenObjectMerger::ComputePlaneHeight(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int *v6;
  int v7;
  float v8;
  float v9;
  void *__p[3];

  v3 = a2[1] - *a2;
  std::vector<float>::vector(__p, (int)(v3 >> 4));
  if ((int)((unint64_t)v3 >> 4) >= 1)
  {
    v4 = __p[0];
    v5 = ((unint64_t)v3 >> 4);
    v6 = (int *)(*a2 + 8);
    do
    {
      v7 = *v6;
      v6 += 4;
      *v4++ = v7;
      --v5;
    }
    while (v5);
  }
  percentile((uint64_t *)__p);
  v9 = v8;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_2294CE8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void percentile(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1 || (v2 = *a1, v3 = a1[1], v2 == v3))
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      percentile(v5, v6, v7);

  }
  else
  {
    v4 = v3 - v2;
    if (v4 != 4)
      std::__sort<std::__less<float,float> &,float *>();
  }
}

BOOL OU3DKitchenObjectMerger::IsGroundSupportedObject(OU3DKitchenObjectMerger *this, const OUBox3d *a2)
{
  return vabds_f32(a2->var2, this->ground_plane_height_) < 0.3;
}

BOOL OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(OU3DKitchenObjectMerger *this, float a2, float32x4_t *a3, float32x4_t *a4)
{
  _BOOL8 result;
  float **v8;
  float HeadingAngle;
  float v10;
  OU *v11;
  float v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  std::logic_error *exception;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  void *v27[3];

  if (!a3 || !a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Invalid input in kitchen objects merger.");
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  box3dIou(a3, a4, 0, (uint64_t)&v19);
  result = 0;
  if (v20.f32[0] >= 0.05)
  {
    {
LABEL_7:
      HeadingAngle = GetHeadingAngle(a3);
      v10 = GetHeadingAngle(a4);
      v12 = fabsf(OU::AngleDifference(v11, HeadingAngle, v10));
      if (fabs(v12 + -3.14159265) >= a2)
      {
        return v12 <= a2;
      }
      else
      {
        box3dToCentroidSizeAngle(a3, (uint64_t *)v27);
        v13 = *((float *)v27[0] + 6) + 3.14159265;
        *((float *)v27[0] + 6) = v13;
        centroidSizeAngleToBox3d((uint64_t *)v27, 1, &v19);
        v14 = v24;
        a3[4] = v23;
        a3[5] = v14;
        v15 = v26;
        a3[6] = v25;
        a3[7] = v15;
        v16 = v20;
        *a3 = v19;
        a3[1] = v16;
        v17 = v22;
        a3[2] = v21;
        a3[3] = v17;
        if (v27[0])
        {
          v27[1] = v27[0];
          operator delete(v27[0]);
        }
        return 1;
      }
    }
    else
    {
      while ((float *)a3[8].i64[0] != *v8)
      {
        if (++v8 == (float **)qword_2540CA0F8)
          goto LABEL_7;
      }
      return 0;
    }
  }
  return result;
}

void sub_2294CEBB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(_QWORD *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

BOOL OU3DKitchenObjectMerger::IsSimilarDepth(OU3DKitchenObjectMerger *this, const OUBox3d *a2, const OUBox3d *a3, float a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;

  v4 = vsubq_f32(*(float32x4_t *)&a2->var1, *(float32x4_t *)&a2->var3);
  v5 = vmulq_f32(v4, v4);
  v6 = vsubq_f32(*(float32x4_t *)&a3->var1, *(float32x4_t *)&a3->var3);
  v7 = vmulq_f32(v6, v6);
  return (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0])- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0])) < a4;
}

BOOL OU3DKitchenObjectMerger::IsSimilarHeight(OU3DKitchenObjectMerger *this, const OU3DKitchenObject *a2, const OU3DKitchenObject *a3, float a4)
{
  float v4;
  float v5;
  float v6;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *((float *)a3 + 18);
  v5 = *((float *)a3 + 2);
  v6 = v4 - v5;
  if ((float)(v4 - v5) <= 0.0)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      OU3DKitchenObjectMerger::IsSimilarHeight(v8, v9, v10);

    return 0;
  }
  else
  {
    if (v4 >= *((float *)a2 + 18))
      v4 = *((float *)a2 + 18);
    if (*((float *)a2 + 2) >= v5)
      v5 = *((float *)a2 + 2);
    return (float)(fmaxf(v4 - v5, 0.0) / v6) > a4;
  }
}

void OU3DKitchenObjectMerger::AlignInsideObject(OU3DKitchenObjectMerger *this, float32x4_t *a2, OUBox3d *a3)
{
  __int128 v5;
  __int128 v6;
  float32x4_t v7;
  __int128 v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  float32x4_t v13;
  float32x4_t v14;
  unint64_t v15;
  float32x2_t v16;
  void *v17;
  float32x4_t v18;
  unint64_t v19;
  float32x2_t v20;
  void *__p[3];
  void *v22[3];
  float32x4_t v23;
  float32x4_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int8x16_t v31;
  char v32;
  int8x16_t v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v5 = *(_OWORD *)&a3->var7;
  v27 = *(_OWORD *)&a3->var6.var1;
  v28 = v5;
  v6 = *(_OWORD *)&a3[1].var3;
  v29 = *(_OWORD *)&a3[1].var1;
  v30 = v6;
  v7 = *(float32x4_t *)&a3->var3;
  v23 = *(float32x4_t *)&a3->var1;
  v24 = v7;
  v8 = *(_OWORD *)&a3->var5.var2.var0;
  v25 = *(_OWORD *)&a3->var5.var0;
  v26 = v8;
  box3dToCentroidSizeAngle(a2, (uint64_t *)v22);
  box3dToCentroidSizeAngle(&v23, (uint64_t *)__p);
  if (vabds_f32(*((float *)v22[0] + 6), *((float *)__p[0] + 6)) <= 0.0001)
  {
    FindSegmentInteractWithLine(&v33, v23, v24, *a2, (int32x4_t)a2[3]);
    if (v34)
    {
      v12 = (void *)v33.i64[0];
      a3->var6.var1 = v33.i64[0];
      a3->var1 = v12;
      v13 = *(float32x4_t *)&a3->var5.var0;
      v14 = *(float32x4_t *)&a3->var5.var2.var0;
      v15 = vsubq_f32(v13, *(float32x4_t *)&a3->var1).u64[0];
      v16 = (float32x2_t)vsubq_f32(v14, v13).u64[0];
      *(float *)&v15 = (float)-(float)(vmuls_lane_f32(*((float *)&v15 + 1), v16, 1)
                                     + (float)(*(float *)&v15 * v16.f32[0]))
                     / (v16.f32[0] * v16.f32[0] + v16.f32[1] * v16.f32[1]);
      LODWORD(a3->var6.var0) = v14.i32[2];
      a3->var5.var2.var0 = (float *)vmla_n_f32(*(float32x2_t *)v13.f32, v16, *(float *)&v15);
    }
    FindSegmentInteractWithLine(&v31, v23, v24, a2[1], (int32x4_t)a2[2]);
    if (v32)
    {
      v17 = (void *)v31.i64[0];
      a3->var7 = (id)v31.i64[0];
      a3->var3 = v17;
      v18 = *(float32x4_t *)&a3->var5.var0;
      v19 = vsubq_f32(v18, *(float32x4_t *)&a3->var3).u64[0];
      v20 = (float32x2_t)vsubq_f32(*(float32x4_t *)&a3->var5.var2.var0, v18).u64[0];
      *(float *)&v19 = (float)-(float)(vmuls_lane_f32(*((float *)&v19 + 1), v20, 1)
                                     + (float)(*(float *)&v19 * v20.f32[0]))
                     / (v20.f32[0] * v20.f32[0] + v20.f32[1] * v20.f32[1]);
      LODWORD(a3->var5.var1) = v18.i32[2];
      a3->var5.var0 = (float *)vmla_n_f32(*(float32x2_t *)v18.f32, v20, *(float *)&v19);
    }
  }
  else
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      OU3DKitchenObjectMerger::AlignInsideObject(v9, v10, v11);

  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_2294CEED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void OU3DKitchenObjectMerger::AlignObjectDepth(OU3DKitchenObjectMerger *this@<X0>, const OUBox3d *a2@<X1>, const OUBox3d *a3@<X2>, OUBox3d *a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  unint64_t *p_var1;
  uint64_t i;
  __int128 v19;
  __int128 v20;
  void *__p[3];

  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(__p, 4uLL);
  v7 = *(_OWORD *)&a2->var1;
  *((_QWORD *)&v7 + 1) = a2->var3;
  v20 = v7;
  v8 = *(_OWORD *)&a3->var1;
  *((_QWORD *)&v8 + 1) = a3->var5.var2.var0;
  v19 = v8;
  OU::intersect((int32x2_t *)&v20, (int32x2_t *)&v19, (float32x2_t *)__p[0]);
  v9 = *(_OWORD *)&a2->var1;
  *((_QWORD *)&v9 + 1) = a2->var3;
  v20 = v9;
  v10 = *(_OWORD *)&a3->var3;
  *((_QWORD *)&v10 + 1) = a3->var5.var0;
  v19 = v10;
  OU::intersect((int32x2_t *)&v20, (int32x2_t *)&v19, (float32x2_t *)__p[0] + 1);
  v11 = *(_OWORD *)&a2->var5.var0;
  *((_QWORD *)&v11 + 1) = a2->var5.var2.var0;
  v20 = v11;
  v12 = *(_OWORD *)&a3->var3;
  *((_QWORD *)&v12 + 1) = a3->var5.var0;
  v19 = v12;
  OU::intersect((int32x2_t *)&v20, (int32x2_t *)&v19, (float32x2_t *)__p[0] + 2);
  v13 = *(_OWORD *)&a2->var5.var0;
  *((_QWORD *)&v13 + 1) = a2->var5.var2.var0;
  v20 = v13;
  v14 = *(_OWORD *)&a3->var1;
  *((_QWORD *)&v14 + 1) = a3->var5.var2.var0;
  v19 = v14;
  OU::intersect((int32x2_t *)&v20, (int32x2_t *)&v19, (float32x2_t *)__p[0] + 3);
  OUBox3d::OUBox3d(a4, a2);
  v15 = 0;
  v16 = (char *)__p[0];
  p_var1 = &a4->var6.var1;
  do
  {
    *(p_var1 - 8) = *(_QWORD *)&v16[v15];
    *p_var1 = *(_QWORD *)&v16[v15];
    p_var1 += 2;
    v15 += 8;
  }
  while (v15 != 32);
  for (i = 0; i != 128; i += 16)
    *(float *)((char *)&a4->var2 + i) = *(float *)((char *)&a2->var2 + i);
  if (v16)
  {
    __p[1] = v16;
    operator delete(v16);
  }
}

void sub_2294CF068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OUBox3d::~OUBox3d(OUBox3d *this)
{
  void *v2;
  void *var1;

  v2 = *(void **)&this[1].var8;
  if (v2)
    operator delete(v2);
  var1 = (void *)this[1].var6.var1;
  if (var1)
  {
    this[1].var6.var2.var0 = (unint64_t)var1;
    operator delete(var1);
  }

}

void OU3DKitchenObjectMerger::AlignHeadingAngle(OU3DKitchenObjectMerger *this, float a2, float32x4_t *a3)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  _OWORD v9[8];
  void *v10[3];

  box3dToCentroidSizeAngle(a3, (uint64_t *)v10);
  *((float *)v10[0] + 6) = a2;
  centroidSizeAngleToBox3d((uint64_t *)v10, 1, v9);
  v5 = (float32x4_t)v9[5];
  a3[4] = (float32x4_t)v9[4];
  a3[5] = v5;
  v6 = (float32x4_t)v9[7];
  a3[6] = (float32x4_t)v9[6];
  a3[7] = v6;
  v7 = (float32x4_t)v9[1];
  *a3 = (float32x4_t)v9[0];
  a3[1] = v7;
  v8 = (float32x4_t)v9[3];
  a3[2] = (float32x4_t)v9[2];
  a3[3] = v8;
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
}

void sub_2294CF174(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(_QWORD *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float OU3DKitchenObjectMerger::AlignObjectTopSurface(OU3DKitchenObjectMerger *this, const OUBox3d *a2, OUBox3d *a3)
{
  uint64_t i;
  float result;

  if (a3)
  {
    for (i = 0; i != 64; i += 16)
    {
      result = *(float *)((char *)&a2->var6.var2.var0 + i);
      *(float *)((char *)&a3->var6.var2.var0 + i) = result;
    }
  }
  return result;
}

void OU3DKitchenObjectMerger::AlignApplianceWithNewCabinets(OU3DKitchenObjectMerger *this)
{
  OU3DKitchenObject *begin;
  OU3DKitchenObjectMerger *v2;
  float HeadingAngle;
  OU3DKitchenObject *v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t j;
  OU3DKitchenObjectMerger *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  __CFString *v39;
  char *v40;
  __CFString *v41;
  char *v42;
  OU3DKitchenObjectMerger *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _BOOL4 v50;
  BOOL v51;
  uint64_t k;
  uint64_t m;
  OU3DKitchenObject *i;
  OU3DKitchenObject *end;
  OUBox3d v57;
  __int128 v58;
  __int128 v59;
  id v60;
  int v61;
  id v62;
  id v63;
  void *__p[2];
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  __int16 v70;
  OUBox3d *v71;
  char v72;
  _QWORD v73[4];
  _QWORD v74[6];

  v74[4] = *MEMORY[0x24BDAC8D0];
  begin = this->new_cabinets_.__begin_;
  for (i = this->new_cabinets_.__end_; begin != i; begin = (OU3DKitchenObject *)((char *)begin + 272))
  {
    if (*((_BYTE *)begin + 224))
    {
      HeadingAngle = GetHeadingAngle((float32x4_t *)begin);
      v4 = this->other_objects_.__begin_;
      end = this->other_objects_.__end_;
      if (v4 != end)
      {
        v5 = HeadingAngle;
        do
        {
          LODWORD(v2) = OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(v2, 0.34907, (float32x4_t *)v4, (float32x4_t *)begin);
          if ((_DWORD)v2)
          {
            v2 = (OU3DKitchenObjectMerger *)objc_msgSend(*((id *)v4 + 16), "isEqualToString:", CFSTR("Sink"));
            if ((v2 & 1) != 0
              || (v6 = vsubq_f32(*(float32x4_t *)v4, *((float32x4_t *)v4 + 1)),
                  v7 = vmulq_f32(v6, v6),
                  v8 = vsubq_f32(*(float32x4_t *)begin, *((float32x4_t *)begin + 1)),
                  v9 = vmulq_f32(v8, v8),
                  (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0])- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0])) < 0.3))
            {
              OU3DKitchenObjectMerger::AlignHeadingAngle(v2, v5, (float32x4_t *)v4);
              v74[0] = CFSTR("Oven");
              v10 = CFSTR("Stove");
              v74[1] = v10;
              v11 = CFSTR("Dishwasher");
              v74[2] = v11;
              v12 = CFSTR("Washer");
              v74[3] = v12;
              memset(&v57, 0, 24);
              v71 = &v57;
              v72 = 0;
              v13 = (char *)operator new(0x20uLL);
              v14 = 0;
              v57.var1 = v13;
              *(_QWORD *)&v57.var2 = v13;
              v57.var3 = v13 + 32;
              do
              {
                *(_QWORD *)&v13[v14 * 8] = (id)v74[v14];
                ++v14;
              }
              while (v14 != 4);
              v15 = v13 + 32;
              *(_QWORD *)&v57.var2 = v13 + 32;
              if (v57.var1 == v13 + 32)
              {
                v19 = 0;
              }
              else
              {
                v16 = *((_QWORD *)v4 + 16);
                v17 = (char *)v57.var1 + 8;
                do
                {
                  v18 = *((_QWORD *)v17 - 1);
                  v19 = v16 == v18;
                  v20 = v16 == v18 || v17 == v15;
                  v17 += 8;
                }
                while (!v20);
              }
              v71 = &v57;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
              for (j = 3; j != -1; --j)

              if (v19)
              {
                OU3DKitchenObjectMerger::AlignObjectDepth(v22, (const OUBox3d *)v4, (const OUBox3d *)begin, &v57);
                v23 = *(_OWORD *)&v57.var1;
                v24 = *(_OWORD *)&v57.var3;
                v25 = *(_OWORD *)&v57.var5.var2.var0;
                *((_OWORD *)v4 + 2) = *(_OWORD *)&v57.var5.var0;
                *((_OWORD *)v4 + 3) = v25;
                *(_OWORD *)v4 = v23;
                *((_OWORD *)v4 + 1) = v24;
                v26 = *(_OWORD *)&v57.var6.var1;
                v27 = *(_OWORD *)&v57.var7;
                v28 = v59;
                *((_OWORD *)v4 + 6) = v58;
                *((_OWORD *)v4 + 7) = v28;
                *((_OWORD *)v4 + 4) = v26;
                *((_OWORD *)v4 + 5) = v27;
                v29 = v60;
                v60 = 0;
                v30 = (void *)*((_QWORD *)v4 + 16);
                *((_QWORD *)v4 + 16) = v29;

                *((_DWORD *)v4 + 34) = v61;
                v31 = v62;
                v62 = 0;
                v32 = (void *)*((_QWORD *)v4 + 18);
                *((_QWORD *)v4 + 18) = v31;

                v33 = v63;
                v63 = 0;
                v34 = (void *)*((_QWORD *)v4 + 19);
                *((_QWORD *)v4 + 19) = v33;

                v35 = (void *)*((_QWORD *)v4 + 20);
                if (v35)
                {
                  *((_QWORD *)v4 + 21) = v35;
                  operator delete(v35);
                  *((_QWORD *)v4 + 20) = 0;
                  *((_QWORD *)v4 + 21) = 0;
                  *((_QWORD *)v4 + 22) = 0;
                }
                v36 = (void *)*((_QWORD *)v4 + 23);
                *((_OWORD *)v4 + 10) = *(_OWORD *)__p;
                *((_QWORD *)v4 + 22) = v65;
                __p[0] = 0;
                __p[1] = 0;
                v65 = 0;
                if (v36)
                {
                  operator delete(v36);
                  *((_QWORD *)v4 + 23) = 0;
                  *((_QWORD *)v4 + 24) = 0;
                  *((_QWORD *)v4 + 25) = 0;
                }
                *((_QWORD *)v4 + 23) = v66;
                *((_QWORD *)v4 + 24) = v67;
                *((_QWORD *)v4 + 25) = v68;
                v66 = 0;
                v67 = 0;
                v68 = 0;
                v37 = v69;
                v69 = 0;
                v38 = (void *)*((_QWORD *)v4 + 26);
                *((_QWORD *)v4 + 26) = v37;

                *((_WORD *)v4 + 108) = v70;
                if (v66)
                  operator delete(v66);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }

              }
              v39 = CFSTR("Sink");
              memset(&v57, 0, 24);
              v71 = &v57;
              v72 = 0;
              v40 = (char *)operator new(8uLL);
              v57.var1 = v40;
              *(_QWORD *)&v57.var2 = v40;
              v57.var3 = v40 + 8;
              v41 = v39;
              *(_QWORD *)v40 = v41;
              *(_QWORD *)&v57.var2 = v40 + 8;
              if (v57.var1 == v40 + 8)
              {
LABEL_35:
                v71 = &v57;
                std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);

              }
              else
              {
                v42 = (char *)v57.var1 - 8;
                while (*((_QWORD *)v4 + 16) != *((_QWORD *)v42 + 1))
                {
                  v42 += 8;
                  if (v42 == v40)
                    goto LABEL_35;
                }
                v71 = &v57;
                std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);

                OU3DKitchenObjectMerger::AlignInsideObject(v43, (float32x4_t *)begin, (OUBox3d *)v4);
              }
              v73[0] = v41;
              v73[1] = v10;
              v73[2] = v11;
              v73[3] = v12;
              memset(&v57, 0, 24);
              v71 = &v57;
              v72 = 0;
              v44 = (char *)operator new(0x20uLL);
              v45 = 0;
              v57.var1 = v44;
              *(_QWORD *)&v57.var2 = v44;
              v57.var3 = v44 + 32;
              do
              {
                *(_QWORD *)&v44[v45 * 8] = (id)v73[v45];
                ++v45;
              }
              while (v45 != 4);
              v46 = v44 + 32;
              *(_QWORD *)&v57.var2 = v44 + 32;
              if (v57.var1 == v44 + 32)
              {
                v50 = 0;
              }
              else
              {
                v47 = *((_QWORD *)v4 + 16);
                v48 = (char *)v57.var1 + 8;
                do
                {
                  v49 = *((_QWORD *)v48 - 1);
                  v50 = v47 == v49;
                  v51 = v47 == v49 || v48 == v46;
                  v48 += 8;
                }
                while (!v51);
              }
              v71 = &v57;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
              for (k = 3; k != -1; --k)

              if (v50)
              {
                for (m = 64; m != 128; m += 16)
                  *(_DWORD *)((char *)v4 + m + 8) = *(_DWORD *)((char *)begin + m + 8);
              }
            }
          }
          v4 = (OU3DKitchenObject *)((char *)v4 + 272);
        }
        while (v4 != end);
      }
    }
  }
}

void sub_2294CF780(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 208));
  for (i = 24; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::AlignStoveWithOven(OU3DKitchenObjectMerger *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OU3DKitchenObject *begin;
  __CFString *v6;
  _QWORD *v7;
  __CFString *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  OU3DKitchenObject *v12;
  __CFString *v13;
  _QWORD *v14;
  __CFString *v15;
  _QWORD *v16;
  OU3DKitchenObject *v17;
  float32x4_t *v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  float v25;
  void **v26;
  char v27;

  if ((int)(-252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4)) >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = -252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
    do
    {
      begin = this->other_objects_.__begin_;
      v6 = CFSTR("Stove");
      v23 = 0;
      v24 = 0;
      v22 = 0;
      v26 = (void **)&v22;
      v27 = 0;
      v7 = operator new(8uLL);
      v22 = v7;
      v23 = v7;
      v24 = v7 + 1;
      v8 = v6;
      *v7 = v8;
      v23 = v7 + 1;
      if (v22 == v7 + 1)
      {
LABEL_7:
        v26 = (void **)&v22;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v26);

      }
      else
      {
        v9 = v22 - 1;
        while (*((_QWORD *)begin + 34 * v3 + 16) != v9[1])
        {
          if (++v9 == v7)
            goto LABEL_7;
        }
        v26 = (void **)&v22;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v26);

        v10 = 0;
        v11 = 0;
        do
        {
          if (v3 != v11)
          {
            v12 = this->other_objects_.__begin_;
            v13 = CFSTR("Oven");
            v23 = 0;
            v24 = 0;
            v22 = 0;
            v26 = (void **)&v22;
            v27 = 0;
            v14 = operator new(8uLL);
            v22 = v14;
            v23 = v14;
            v24 = v14 + 1;
            v15 = v13;
            *v14 = v15;
            v23 = v14 + 1;
            if (v22 == v14 + 1)
            {
LABEL_16:
              v26 = (void **)&v22;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v26);

            }
            else
            {
              v16 = v22 - 1;
              while (*((_QWORD *)v12 + 34 * v11 + 16) != v16[1])
              {
                if (++v16 == v14)
                  goto LABEL_16;
              }
              v26 = (void **)&v22;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v26);

              v17 = this->other_objects_.__begin_;
              v18 = (float32x4_t *)((char *)v17 + 272 * v3);
              box3dIou(v18, (float32x4_t *)v17 + 17 * v11, 0, (uint64_t)&v22);
              if (v25 > 0.35 && vabds_f32(v18->f32[2], *((float *)v17 + 68 * v11 + 18)) < 0.4)
              {
                v19 = 0;
                v20 = (_QWORD *)((char *)v17 + v2);
                v21 = (char *)v17 + v10;
                do
                {
                  *v20 = *(_QWORD *)v21;
                  if (v19 >= 4)
                    *((_DWORD *)v21 + 2) = v18[(v19 - 4)].i32[2];
                  ++v19;
                  v20 += 2;
                  v21 += 16;
                }
                while (v19 != 8);
              }
            }
          }
          ++v11;
          v10 += 272;
        }
        while (v11 != v4);
      }
      ++v3;
      v2 += 272;
    }
    while (v3 != v4);
  }
}

void sub_2294CFAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::AlignSinkWithDishwasher(OU3DKitchenObjectMerger *this)
{
  uint64_t v2;
  uint64_t v3;
  OU3DKitchenObject *begin;
  __CFString *v5;
  _QWORD *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  OU3DKitchenObject *v10;
  __CFString *v11;
  _QWORD *v12;
  __CFString *v13;
  uint64_t v14;
  OU3DKitchenObject *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  NSObject *v18;
  int v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  unint64_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  unint64_t v28;
  float32x2_t v29;
  uint8_t v30;
  _BYTE v31[15];
  void *__p[3];
  void *v33;
  void *v34;
  int8x16_t v35;
  _QWORD *v36;
  float v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if ((int)(-252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4)) >= 1)
  {
    v2 = 0;
    v3 = -252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
    while (1)
    {
      begin = this->other_objects_.__begin_;
      v5 = CFSTR("Sink");
      v36 = 0;
      v35 = 0uLL;
      v33 = &v35;
      LOBYTE(v34) = 0;
      v6 = operator new(8uLL);
      v35.i64[0] = (uint64_t)v6;
      v35.i64[1] = (uint64_t)v6;
      v36 = v6 + 1;
      v7 = v5;
      *v6 = v7;
      v35.i64[1] = (uint64_t)(v6 + 1);
      if ((_QWORD *)v35.i64[0] != v6 + 1)
        break;
LABEL_7:
      v33 = &v35;
      std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);

LABEL_8:
      if (++v2 == v3)
        return;
    }
    v8 = v35.i64[0] - 8;
    while (*((_QWORD *)begin + 34 * v2 + 16) != *(_QWORD *)(v8 + 8))
    {
      v8 += 8;
      if ((_QWORD *)v8 == v6)
        goto LABEL_7;
    }
    v33 = &v35;
    std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);

    v9 = 0;
    while (1)
    {
      if (v2 == v9)
        goto LABEL_17;
      v10 = this->other_objects_.__begin_;
      v11 = CFSTR("Dishwasher");
      v36 = 0;
      v35 = 0uLL;
      v33 = &v35;
      LOBYTE(v34) = 0;
      v12 = operator new(8uLL);
      v35.i64[0] = (uint64_t)v12;
      v35.i64[1] = (uint64_t)v12;
      v36 = v12 + 1;
      v13 = v11;
      *v12 = v13;
      v35.i64[1] = (uint64_t)(v12 + 1);
      if ((_QWORD *)v35.i64[0] == v12 + 1)
      {
LABEL_16:
        v33 = &v35;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);

        goto LABEL_17;
      }
      v14 = v35.i64[0] - 8;
      while (*((_QWORD *)v10 + 34 * v9 + 16) != *(_QWORD *)(v14 + 8))
      {
        v14 += 8;
        if ((_QWORD *)v14 == v12)
          goto LABEL_16;
      }
      v33 = &v35;
      std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);

      v15 = this->other_objects_.__begin_;
      v16 = (float32x4_t *)((char *)v15 + 272 * v2);
      v17 = (float32x4_t *)((char *)v15 + 272 * v9);
      box3dIou(v16, v17, 0, (uint64_t)&v35);
      if (v37 <= 0.0)
        goto LABEL_17;
      box3dToCentroidSizeAngle(v16, (uint64_t *)&v33);
      box3dToCentroidSizeAngle(v17, (uint64_t *)__p);
      if (vabds_f32(*((float *)v33 + 6), *((float *)__p[0] + 6)) <= 0.0001)
      {
        v20 = vsubq_f32(*v16, v17[3]);
        v21 = vsubq_f32(v16[3], *v17);
        if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v20, v20))) >= sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v21, v21))))
        {
          FindLinesIntersect(1, &v35, *v17, v17[1], v16[1], v16[2]);
          if ((_BYTE)v36)
          {
            v19 = 0;
            v16[2].i64[0] = v35.i64[0];
            v26 = v16[2];
            v27 = v16[3];
            v16[3].i32[2] = v27.i32[2];
            v28 = vsubq_f32(*v16, v26).u64[0];
            v27.i64[0] = vsubq_f32(v27, *v16).u64[0];
            *(float *)&v28 = (float)-(float)(vmuls_lane_f32(*((float *)&v28 + 1), *(float32x2_t *)v27.f32, 1)
                                           + (float)(*(float *)&v28 * v27.f32[0]))
                           / (v27.f32[0] * v27.f32[0] + v27.f32[1] * v27.f32[1]);
            v29 = vmla_n_f32(*(float32x2_t *)v16->f32, *(float32x2_t *)v27.f32, *(float *)&v28);
            *(float32x2_t *)v16[3].f32 = v29;
            v16[6].i64[0] = v26.i64[0];
            *(float32x2_t *)v16[7].f32 = v29;
            goto LABEL_30;
          }
        }
        else
        {
          FindLinesIntersect(1, &v35, v17[3], v17[2], *v16, v16[3]);
          if ((_BYTE)v36)
          {
            v19 = 0;
            v16->i64[0] = v35.i64[0];
            v22 = *v16;
            v23 = v16[1];
            v16[1].i32[2] = v23.i32[2];
            v24 = vsubq_f32(v23, v22).u64[0];
            v25 = (float32x2_t)vsubq_f32(v16[2], v23).u64[0];
            *(float *)&v24 = (float)-(float)(vmuls_lane_f32(*((float *)&v24 + 1), v25, 1)
                                           + (float)(*(float *)&v24 * v25.f32[0]))
                           / (v25.f32[0] * v25.f32[0] + v25.f32[1] * v25.f32[1]);
            *(float32x2_t *)v23.f32 = vmla_n_f32(*(float32x2_t *)v23.f32, v25, *(float *)&v24);
            v16[1].i64[0] = v23.i64[0];
            v16[4].i64[0] = v22.i64[0];
            v16[5].i64[0] = v23.i64[0];
            goto LABEL_30;
          }
        }
        v19 = 7;
      }
      else
      {
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          OU3DKitchenObjectMerger::AlignSinkWithDishwasher(&v30, v31, v18);

        v19 = 1;
      }
LABEL_30:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v19 && v19 != 7)
        return;
LABEL_17:
      if (++v9 == v3)
        goto LABEL_8;
    }
  }
}

void sub_2294CFF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

unint64_t OU3DKitchenObjectMerger::UpdateZ(float a1, float a2, uint64_t a3, uint64_t a4, _QWORD *a5, char a6)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __CFString *v18;
  _QWORD *v19;
  __CFString *v20;
  _QWORD *v21;
  uint64_t v22;
  __CFString *v23;
  _QWORD *v24;
  __CFString *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __CFString *v30;
  _QWORD *v31;
  __CFString *v32;
  _QWORD *v33;
  uint64_t v34;
  BOOL v35;
  __CFString *v36;
  _QWORD *v37;
  __CFString *v38;
  _QWORD *v39;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  void **v48;
  char v49;

  v9 = a5[5];
  if ((int)v9 < 1)
  {
    v14 = *(float *)(a4 + 72);
    v13 = *(float *)(a4 + 8);
    if ((a6 & 1) != 0)
      return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
    goto LABEL_56;
  }
  v10 = a5[4];
  v11 = v9 + v10 - 1;
  v12 = a5[1];
  v41 = *(_QWORD *)(v12 + ((v11 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (v11 & 0xF);
  v42 = v11 & 0xF;
  v43 = *(_QWORD *)(v12 + ((v11 >> 1) & 0x7FFFFFFFFFFFFFF8));
  if (!*(_BYTE *)(a4 + 224))
  {
    v13 = *(float *)(*(_QWORD *)(v12 + ((v11 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (v11 & 0xF) + 8);
    if (a5[2] != v12)
    {
      v27 = (_QWORD *)(v12 + 8 * (v10 >> 4));
      v28 = *v27 + 272 * (a5[4] & 0xFLL);
      v29 = *(_QWORD *)(v12 + (((v10 + v9) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (((_DWORD)v10 + (_DWORD)v9) & 0xF);
      while (v28 != v29)
      {
        v30 = CFSTR("Cabinet");
        v46 = 0;
        v47 = 0;
        v45 = 0;
        v48 = (void **)&v45;
        v49 = 0;
        v31 = operator new(8uLL);
        v45 = v31;
        v46 = v31;
        v47 = v31 + 1;
        v32 = v30;
        *v31 = v32;
        v46 = v31 + 1;
        if (v45 == v31 + 1)
        {
LABEL_33:
          v48 = (void **)&v45;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

          if (v13 < *(float *)(v28 + 72))
            v13 = *(float *)(v28 + 72);
        }
        else
        {
          v33 = v45 - 1;
          while (*(_QWORD *)(v28 + 128) != v33[1])
          {
            if (++v33 == v31)
              goto LABEL_33;
          }
          v48 = (void **)&v45;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

        }
        v28 += 272;
        if (v28 - *v27 == 4352)
        {
          v34 = v27[1];
          ++v27;
          v28 = v34;
        }
      }
    }
    if (objc_msgSend(*(id *)(v41 + 152), "isEqualToString:", CFSTR("online")))
      v35 = *(_BYTE *)(v43 + 272 * v42 + 224) == 0;
    else
      v35 = 1;
    if (!v35)
    {
      v36 = CFSTR("Cabinet");
      v46 = 0;
      v47 = 0;
      v45 = 0;
      v48 = (void **)&v45;
      v49 = 0;
      v37 = operator new(8uLL);
      v45 = v37;
      v46 = v37;
      v47 = v37 + 1;
      v38 = v36;
      *v37 = v38;
      v46 = v37 + 1;
      if (v45 != v37 + 1)
      {
        v39 = v45 - 1;
        while (*(_QWORD *)(v41 + 128) != v39[1])
        {
          if (++v39 == v37)
            goto LABEL_48;
        }
        v48 = (void **)&v45;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

        v14 = *(float *)(v41 + 72);
        if ((a6 & 1) == 0)
          goto LABEL_56;
        return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
      }
LABEL_48:
      v48 = (void **)&v45;
      std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

    }
    v14 = *(float *)(a4 + 72);
    if ((a6 & 1) != 0)
      return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
    goto LABEL_56;
  }
  v13 = *(float *)(a4 + 8);
  v14 = *(float *)(a4 + 72);
  if (a5[2] != v12)
  {
    v15 = (_QWORD *)(v12 + 8 * (v10 >> 4));
    v16 = *v15 + 272 * (a5[4] & 0xFLL);
    v17 = *(_QWORD *)(v12 + (((v10 + v9) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (((_DWORD)v10 + (_DWORD)v9) & 0xF);
    while (v16 != v17)
    {
      v18 = CFSTR("Cabinet");
      v46 = 0;
      v47 = 0;
      v45 = 0;
      v48 = (void **)&v45;
      v49 = 0;
      v19 = operator new(8uLL);
      v45 = v19;
      v46 = v19;
      v47 = v19 + 1;
      v20 = v18;
      *v19 = v20;
      v46 = v19 + 1;
      if (v45 == v19 + 1)
      {
LABEL_9:
        v48 = (void **)&v45;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

        if (v13 < *(float *)(v16 + 72))
          v13 = *(float *)(v16 + 72);
        if (*(float *)(v16 + 8) < v14)
          v14 = *(float *)(v16 + 8);
      }
      else
      {
        v21 = v45 - 1;
        while (*(_QWORD *)(v16 + 128) != v21[1])
        {
          if (++v21 == v19)
            goto LABEL_9;
        }
        v48 = (void **)&v45;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

      }
      v16 += 272;
      if (v16 - *v15 == 4352)
      {
        v22 = v15[1];
        ++v15;
        v16 = v22;
      }
    }
  }
  if (!*(_BYTE *)(v43 + 272 * v42 + 224))
  {
    v13 = *(float *)(a4 + 8);
    if ((a6 & 1) != 0)
      return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
    goto LABEL_56;
  }
  v14 = *(float *)(a4 + 72);
  v23 = CFSTR("Cabinet");
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v48 = (void **)&v45;
  v49 = 0;
  v24 = operator new(8uLL);
  v45 = v24;
  v46 = v24;
  v47 = v24 + 1;
  v25 = v23;
  *v24 = v25;
  v46 = v24 + 1;
  if (v45 == v24 + 1)
  {
LABEL_23:
    v48 = (void **)&v45;
    std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

    if ((a6 & 1) != 0)
      return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
    goto LABEL_56;
  }
  v26 = v45 - 1;
  while (*(_QWORD *)(v41 + 128) != v26[1])
  {
    if (++v26 == v24)
      goto LABEL_23;
  }
  v48 = (void **)&v45;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v48);

  if ((float)(*(float *)(v41 + 72) - *(float *)(a4 + 72)) > 0.5)
    v14 = *(float *)(v41 + 72);
  if ((a6 & 1) == 0)
  {
LABEL_56:
    if (vabds_f32(v13, a2) <= 0.1)
      v13 = a2;
    if (vabds_f32(v14, a1) <= 0.1)
      v14 = a1;
  }
  return LODWORD(v14) | ((unint64_t)LODWORD(v13) << 32);
}

void sub_2294D049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::FuseAndCarve(OU3DKitchenObjectMerger *this)
{
  OU3DKitchenObjectMerger *v1;
  uint64_t v2;
  uint64_t v3;
  float32x2_t v4;
  float32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUBox3d *v9;
  OUBox3d *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  float32x4_t v21;
  float v22;
  float v23;
  float *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  float *v32;
  int v33;
  OUBox3d *v34;
  OU3DKitchenObjectMerger *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  float ceil_plane_height;
  float32x4_t v44;
  float v45;
  float v46;
  OU3DKitchenObjectMerger *v47;
  float *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  float *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  OU3DKitchenObject *v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  _QWORD *v64;
  OUBox3d *v65;
  OUBox3d *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  int v76;
  float32x4_t v77;
  float v78;
  float v79;
  float *v80;
  float *v81;
  float *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  float *v88;
  int v89;
  OUBox3d *v90;
  OU3DKitchenObjectMerger *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  float *v98;
  float v99;
  float32x4_t v100;
  float v101;
  float v102;
  OU3DKitchenObjectMerger *v103;
  float *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  float *v110;
  float v111;
  uint64_t v112;
  _DWORD *var4;
  unint64_t v114;
  float32x2_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  _BOOL4 v119;
  uint64_t *v120;
  uint64_t IsSimilarHeight;
  float32x2_t v122;
  uint64_t *v123;
  float32x2_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  OUBox3d *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  BOOL v141;
  char v142;
  int v143;
  float32x2_t v144;
  float32x2_t v145;
  uint64_t v146;
  uint64_t *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  OU3DKitchenObjectMerger *v157;
  char v158;
  char v159;
  OU3DKitchenObject *v160;
  uint64_t v161;
  float v162;
  char v163;
  float32x2_t v164;
  OU3DKitchenObject *v165;
  float32x2_t v166;
  OU3DKitchenObject *end;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  OU3DKitchenObject *v175;
  int v176;
  int v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  OU3DKitchenObject *v183;
  uint64_t v184;
  uint64_t *p_fused_cabinets;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  OU3DKitchenObject *begin;
  uint64_t v192;
  __int128 v193;
  float32x4_t v194;
  float32x4_t v195;
  float v196;
  float32x4_t v197;
  float32x4_t v198;
  float v199;
  float32x4_t v200;
  float32x2_t v201;
  int32x2_t v202[2];
  int32x2_t v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  float32x2_t v208;
  __int128 v209;
  id var3;
  void *v211;
  float *v212;
  char *v213;
  void *__p;
  char *v215;
  char *v216;
  OUBox3d *v217;
  OUBox3d *v218;
  unint64_t v219;
  OUBox3d v220;
  __int128 v221;
  __int128 v222;
  id v223;
  id v224;
  id v225;
  void *v226;
  void *v227;
  void *v228;
  id v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;

  v234 = *MEMORY[0x24BDAC8D0];
  if ((int)(-252645135 * ((this->new_cabinets_.__end_ - this->new_cabinets_.__begin_) >> 4)) >= 1)
  {
    v1 = this;
    v2 = 0;
    p_fused_cabinets = (uint64_t *)&this->fused_cabinets_;
    v186 = -252645135 * ((this->new_cabinets_.__end_ - this->new_cabinets_.__begin_) >> 4);
    do
    {
      v192 = v2;
      begin = v1->new_cabinets_.__begin_;
      v3 = (uint64_t)begin + 272 * v2;
      v217 = 0;
      v218 = 0;
      v219 = 0;
      __p = 0;
      v215 = 0;
      v216 = 0;
      v211 = 0;
      v212 = 0;
      v213 = 0;
      v4 = *(float32x2_t *)(v3 + 48);
      v193 = *(_OWORD *)(v3 + 16);
      v200 = *(float32x4_t *)(v3 + 32);
      v5 = vsub_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)&v193);
      if ((int)(-252645135 * ((v1->old_cabinets_.__end_ - v1->old_cabinets_.__begin_) >> 4)) >= 1)
      {
        v6 = 0;
        v7 = -252645135 * ((v1->old_cabinets_.__end_ - v1->old_cabinets_.__begin_) >> 4);
        do
        {
          v8 = (uint64_t)v1->old_cabinets_.__begin_ + 272 * v6;
          this = (OU3DKitchenObjectMerger *)OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(this, 0.34907, (float32x4_t *)v8, (float32x4_t *)v3);
          if ((this & 1) != 0)
          {
            v194 = *(float32x4_t *)(v8 + 16);
            v197 = *(float32x4_t *)(v8 + 32);
            v9 = v218;
            if ((unint64_t)v218 >= v219)
            {
              v10 = (OUBox3d *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v217, v8);
            }
            else
            {
              std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v218, v8);
              v10 = (OUBox3d *)((char *)v9 + 272);
            }
            v218 = v10;
            v11 = v215;
            if (v215 >= v216)
            {
              v13 = (char *)__p;
              v14 = (v215 - (_BYTE *)__p) >> 2;
              v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v16 = v216 - (_BYTE *)__p;
              if ((v216 - (_BYTE *)__p) >> 1 > v15)
                v15 = v16 >> 1;
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
                v17 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v17 = v15;
              if (v17)
              {
                v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v216, v17);
                v13 = (char *)__p;
                v11 = v215;
              }
              else
              {
                v18 = 0;
              }
              v19 = &v18[4 * v14];
              *(_DWORD *)v19 = 2;
              v12 = v19 + 4;
              while (v11 != v13)
              {
                v20 = *((_DWORD *)v11 - 1);
                v11 -= 4;
                *((_DWORD *)v19 - 1) = v20;
                v19 -= 4;
              }
              __p = v19;
              v215 = v12;
              v216 = &v18[4 * v17];
              if (v13)
                operator delete(v13);
            }
            else
            {
              *(_DWORD *)v215 = 2;
              v12 = v11 + 4;
            }
            v215 = v12;
            v21 = vsubq_f32(v200, v197);
            v22 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v21, v21)));
            if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v21.f32)) >= 0.0)
              v23 = v22;
            else
              v23 = -v22;
            v24 = v212;
            if (v212 >= (float *)v213)
            {
              v26 = (float *)v211;
              v27 = ((char *)v212 - (_BYTE *)v211) >> 2;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v29 = v213 - (_BYTE *)v211;
              if ((v213 - (_BYTE *)v211) >> 1 > v28)
                v28 = v29 >> 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                v30 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v213, v30);
                v26 = (float *)v211;
                v24 = v212;
              }
              else
              {
                v31 = 0;
              }
              v32 = (float *)&v31[4 * v27];
              *v32 = v23;
              v25 = v32 + 1;
              while (v24 != v26)
              {
                v33 = *((_DWORD *)v24-- - 1);
                *((_DWORD *)v32-- - 1) = v33;
              }
              v211 = v32;
              v212 = v25;
              v213 = &v31[4 * v30];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *v212 = v23;
              v25 = v24 + 1;
            }
            v212 = v25;
            v34 = v218;
            if ((unint64_t)v218 >= v219)
            {
              this = (OU3DKitchenObjectMerger *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v217, v8);
            }
            else
            {
              std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v218, v8);
              this = (OU3DKitchenObjectMerger *)&v34[2].var7;
            }
            v218 = (OUBox3d *)this;
            v35 = (OU3DKitchenObjectMerger *)v215;
            if (v215 >= v216)
            {
              this = (OU3DKitchenObjectMerger *)__p;
              v37 = (v215 - (_BYTE *)__p) >> 2;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v39 = v216 - (_BYTE *)__p;
              if ((v216 - (_BYTE *)__p) >> 1 > v38)
                v38 = v39 >> 1;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                v40 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v40 = v38;
              if (v40)
              {
                v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v216, v40);
                this = (OU3DKitchenObjectMerger *)__p;
                v35 = (OU3DKitchenObjectMerger *)v215;
              }
              else
              {
                v41 = 0;
              }
              v42 = (float *)&v41[4 * v37];
              *(_DWORD *)v42 = 1;
              v36 = (char *)(v42 + 1);
              while (v35 != this)
              {
                ceil_plane_height = v35[-1].ceil_plane_height_;
                v35 = (OU3DKitchenObjectMerger *)((char *)v35 - 4);
                *--v42 = ceil_plane_height;
              }
              __p = v42;
              v215 = v36;
              v216 = &v41[4 * v40];
              if (this)
                operator delete(this);
            }
            else
            {
              *(_DWORD *)v215 = 1;
              v36 = (char *)&v35->old_cabinets_.__begin_ + 4;
            }
            v215 = v36;
            v44 = vsubq_f32(v200, v194);
            v45 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v44, v44)));
            if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v44.f32)) >= 0.0)
              v46 = v45;
            else
              v46 = -v45;
            v47 = (OU3DKitchenObjectMerger *)v212;
            if (v212 >= (float *)v213)
            {
              this = (OU3DKitchenObjectMerger *)v211;
              v49 = ((char *)v212 - (_BYTE *)v211) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v51 = v213 - (_BYTE *)v211;
              if ((v213 - (_BYTE *)v211) >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v213, v52);
                this = (OU3DKitchenObjectMerger *)v211;
                v47 = (OU3DKitchenObjectMerger *)v212;
              }
              else
              {
                v53 = 0;
              }
              v54 = (float *)&v53[4 * v49];
              *v54 = v46;
              v48 = v54 + 1;
              while (v47 != this)
              {
                v55 = v47[-1].ceil_plane_height_;
                v47 = (OU3DKitchenObjectMerger *)((char *)v47 - 4);
                *--v54 = v55;
              }
              v211 = v54;
              v212 = v48;
              v213 = &v53[4 * v52];
              if (this)
                operator delete(this);
            }
            else
            {
              *v212 = v46;
              v48 = (float *)&v47->old_cabinets_.__begin_ + 1;
            }
            v212 = v48;
          }
          ++v6;
        }
        while (v6 != v7);
      }
      if ((int)(-252645135 * ((v1->other_objects_.__end_ - v1->other_objects_.__begin_) >> 4)) >= 1)
      {
        v56 = 0;
        v57 = -252645135 * ((v1->other_objects_.__end_ - v1->other_objects_.__begin_) >> 4);
        do
        {
          v58 = v1->other_objects_.__begin_;
          v59 = (uint64_t)v58 + 272 * v56;
          LOBYTE(this) = OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(this, 0.34907, (float32x4_t *)v59, (float32x4_t *)v3);
          if ((this & 1) != 0)
          {
            v60 = vsubq_f32(*(float32x4_t *)v59, *(float32x4_t *)(v59 + 16));
            v61 = vmulq_f32(v60, v60);
            v62 = vsubq_f32(*(float32x4_t *)v3, *(float32x4_t *)(v3 + 16));
            v63 = vmulq_f32(v62, v62);
            if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0])- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0])) < 0.3)
            {
              this = (OU3DKitchenObjectMerger *)std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)v58 + 34 * v56 + 30, (int *)begin + 68 * v192 + 58, (_DWORD *)begin + 68 * v192 + 58);
              {
LABEL_91:
                v195 = *(float32x4_t *)(v59 + 16);
                v198 = *(float32x4_t *)(v59 + 32);
                v65 = v218;
                if ((unint64_t)v218 >= v219)
                {
                  v66 = (OUBox3d *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v217, v59);
                }
                else
                {
                  std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v218, v59);
                  v66 = (OUBox3d *)((char *)v65 + 272);
                }
                v218 = v66;
                v67 = v215;
                if (v215 >= v216)
                {
                  v69 = (char *)__p;
                  v70 = (v215 - (_BYTE *)__p) >> 2;
                  v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v72 = v216 - (_BYTE *)__p;
                  if ((v216 - (_BYTE *)__p) >> 1 > v71)
                    v71 = v72 >> 1;
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                    v73 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v73 = v71;
                  if (v73)
                  {
                    v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v216, v73);
                    v69 = (char *)__p;
                    v67 = v215;
                  }
                  else
                  {
                    v74 = 0;
                  }
                  v75 = &v74[4 * v70];
                  *(_DWORD *)v75 = 2;
                  v68 = v75 + 4;
                  while (v67 != v69)
                  {
                    v76 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v75 - 1) = v76;
                    v75 -= 4;
                  }
                  __p = v75;
                  v215 = v68;
                  v216 = &v74[4 * v73];
                  if (v69)
                    operator delete(v69);
                }
                else
                {
                  *(_DWORD *)v215 = 2;
                  v68 = v67 + 4;
                }
                v215 = v68;
                v77 = vsubq_f32(v200, v198);
                v78 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v77, v77)));
                if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v77.f32)) >= 0.0)
                  v79 = v78;
                else
                  v79 = -v78;
                v80 = v212;
                if (v212 >= (float *)v213)
                {
                  v82 = (float *)v211;
                  v83 = ((char *)v212 - (_BYTE *)v211) >> 2;
                  v84 = v83 + 1;
                  if ((unint64_t)(v83 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v85 = v213 - (_BYTE *)v211;
                  if ((v213 - (_BYTE *)v211) >> 1 > v84)
                    v84 = v85 >> 1;
                  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
                    v86 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v86 = v84;
                  if (v86)
                  {
                    v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v213, v86);
                    v82 = (float *)v211;
                    v80 = v212;
                  }
                  else
                  {
                    v87 = 0;
                  }
                  v88 = (float *)&v87[4 * v83];
                  *v88 = v79;
                  v81 = v88 + 1;
                  while (v80 != v82)
                  {
                    v89 = *((_DWORD *)v80-- - 1);
                    *((_DWORD *)v88-- - 1) = v89;
                  }
                  v211 = v88;
                  v212 = v81;
                  v213 = &v87[4 * v86];
                  if (v82)
                    operator delete(v82);
                }
                else
                {
                  *v212 = v79;
                  v81 = v80 + 1;
                }
                v212 = v81;
                v90 = v218;
                if ((unint64_t)v218 >= v219)
                {
                  this = (OU3DKitchenObjectMerger *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v217, v59);
                }
                else
                {
                  std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v218, v59);
                  this = (OU3DKitchenObjectMerger *)&v90[2].var7;
                }
                v218 = (OUBox3d *)this;
                v91 = (OU3DKitchenObjectMerger *)v215;
                if (v215 >= v216)
                {
                  this = (OU3DKitchenObjectMerger *)__p;
                  v93 = (v215 - (_BYTE *)__p) >> 2;
                  v94 = v93 + 1;
                  if ((unint64_t)(v93 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v95 = v216 - (_BYTE *)__p;
                  if ((v216 - (_BYTE *)__p) >> 1 > v94)
                    v94 = v95 >> 1;
                  if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
                    v96 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v96 = v94;
                  if (v96)
                  {
                    v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v216, v96);
                    this = (OU3DKitchenObjectMerger *)__p;
                    v91 = (OU3DKitchenObjectMerger *)v215;
                  }
                  else
                  {
                    v97 = 0;
                  }
                  v98 = (float *)&v97[4 * v93];
                  *(_DWORD *)v98 = 1;
                  v92 = (char *)(v98 + 1);
                  while (v91 != this)
                  {
                    v99 = v91[-1].ceil_plane_height_;
                    v91 = (OU3DKitchenObjectMerger *)((char *)v91 - 4);
                    *--v98 = v99;
                  }
                  __p = v98;
                  v215 = v92;
                  v216 = &v97[4 * v96];
                  if (this)
                    operator delete(this);
                }
                else
                {
                  *(_DWORD *)v215 = 1;
                  v92 = (char *)&v91->old_cabinets_.__begin_ + 4;
                }
                v215 = v92;
                v100 = vsubq_f32(v200, v195);
                v101 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v100, v100)));
                if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v100.f32)) >= 0.0)
                  v102 = v101;
                else
                  v102 = -v101;
                v103 = (OU3DKitchenObjectMerger *)v212;
                if (v212 >= (float *)v213)
                {
                  this = (OU3DKitchenObjectMerger *)v211;
                  v105 = ((char *)v212 - (_BYTE *)v211) >> 2;
                  v106 = v105 + 1;
                  if ((unint64_t)(v105 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v107 = v213 - (_BYTE *)v211;
                  if ((v213 - (_BYTE *)v211) >> 1 > v106)
                    v106 = v107 >> 1;
                  if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                    v108 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v108 = v106;
                  if (v108)
                  {
                    v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v213, v108);
                    this = (OU3DKitchenObjectMerger *)v211;
                    v103 = (OU3DKitchenObjectMerger *)v212;
                  }
                  else
                  {
                    v109 = 0;
                  }
                  v110 = (float *)&v109[4 * v105];
                  *v110 = v102;
                  v104 = v110 + 1;
                  while (v103 != this)
                  {
                    v111 = v103[-1].ceil_plane_height_;
                    v103 = (OU3DKitchenObjectMerger *)((char *)v103 - 4);
                    *--v110 = v111;
                  }
                  v211 = v110;
                  v212 = v104;
                  v213 = &v109[4 * v108];
                  if (this)
                    operator delete(this);
                }
                else
                {
                  *v212 = v102;
                  v104 = (float *)&v103->old_cabinets_.__begin_ + 1;
                }
                v212 = v104;
              }
              else
              {
                while (*(_QWORD *)(v59 + 128) != *v64)
                {
                  if (++v64 == (_QWORD *)qword_2540CA140)
                    goto LABEL_91;
                }
              }
            }
          }
          ++v56;
        }
        while (v56 != v57);
      }
      if (v217 == v218)
      {
        end = v1->fused_cabinets_.__end_;
        v112 = v192;
        if (end >= v1->fused_cabinets_.__end_cap_.__value_)
        {
          v168 = std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>(p_fused_cabinets, v3);
        }
        else
        {
          std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>((OUBox3d *)v1->fused_cabinets_.__end_, v3);
          v168 = (uint64_t)end + 272;
          v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)((char *)end + 272);
        }
        v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)v168;
      }
      else
      {
        v209 = 0uLL;
        var3 = 0;
        OU3DKitchenObjectMerger::SortBasedOnDistance(&v211, (uint64_t *)&v217, &__p, (uint64_t)&v220);
        v112 = v192;
        std::vector<OU3DKitchenObject>::__vdeallocate((void **)&v209);
        v209 = *(_OWORD *)&v220.var1;
        var4 = v220.var4;
        var3 = v220.var3;
        memset(&v220, 0, 48);
        *(_QWORD *)&v205 = &v220;
        std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v205);
        v208 = *(float32x2_t *)v200.f32;
        v199 = *(float *)(v3 + 72);
        v196 = *(float *)(v3 + 8);
        v206 = 0u;
        v207 = 0u;
        v205 = 0u;
        v114 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v209 + 1) - v209) >> 4);
        v115 = vsub_f32(v4, *(float32x2_t *)v200.f32);
        if ((int)v114 >= 1)
        {
          v116 = 0;
          v190 = (v114 - 1);
          v117 = (char *)begin + 272 * v192;
          v188 = (uint64_t)(v117 + 240);
          v189 = v117 + 224;
          v118 = -252645135 * ((uint64_t)(*((_QWORD *)&v209 + 1) - v209) >> 4);
          v119 = 1;
          while (1)
          {
            v120 = (uint64_t *)(v209 + 272 * v116);
            if (var4[v116] == 2)
            {
              IsSimilarHeight = (uint64_t)std::deque<OU3DKitchenObject>::push_back(&v205, v209 + 272 * v116);
              v122 = (float32x2_t)v120[4];
              v123 = v120 + 6;
            }
            else
            {
              if ((_QWORD)v206 == *((_QWORD *)&v205 + 1))
                goto LABEL_237;
              v125 = (_QWORD *)(*((_QWORD *)&v205 + 1) + 8 * ((unint64_t)v207 >> 4));
              v126 = *v125 + 272 * (v207 & 0xF);
              v127 = *(_QWORD *)(*((_QWORD *)&v205 + 1)
                               + (((*((_QWORD *)&v207 + 1) + (_QWORD)v207) >> 1) & 0x7FFFFFFFFFFFFFF8))
                   + 272 * ((DWORD2(v207) + (_DWORD)v207) & 0xF);
              if (v126 == v127)
                goto LABEL_237;
              v128 = (OUBox3d *)*(unsigned int *)(v209 + 272 * v116 + 232);
              while ((_DWORD)v128 != *(_DWORD *)(v126 + 232))
              {
                v126 += 272;
                if (v126 - *v125 == 4352)
                {
                  v129 = v125[1];
                  ++v125;
                  v126 = v129;
                }
                if (v126 == v127)
                  goto LABEL_237;
              }
              if ((_DWORD)v128 != *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v205 + 1)
                                                         + (((unint64_t)(v207 + *((_QWORD *)&v207 + 1) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                                             + 272 * (((_DWORD)v207 + DWORD2(v207) - 1) & 0xF)
                                             + 232))
              {
                {
LABEL_194:
                  std::deque<OU3DKitchenObject>::__move_assign(&v205, (uint64_t)&v220);
                  std::deque<OU3DKitchenObject>::~deque[abi:ne180100](&v220);
                  goto LABEL_237;
                }
                while (v120[16] != *v132)
                {
                  if (++v132 == (_QWORD *)qword_2540CA110)
                    goto LABEL_194;
                }
              }
              std::deque<OU3DKitchenObject>::__move_assign(&v205, (uint64_t)&v220);
              IsSimilarHeight = std::deque<OU3DKitchenObject>::~deque[abi:ne180100](&v220);
              v122 = (float32x2_t)v120[2];
              v123 = v120;
            }
            v124 = vsub_f32(v208, v122);
            if (vaddv_f32(vmul_f32(vsub_f32(v208, *(float32x2_t *)&v193), v124)) >= 0.000001)
            {
              v130 = *v123;
              if (sqrtf(vaddv_f32(vmul_f32(v124, v124))) >= 0.1)
                goto LABEL_281;
              {
                while (v120[16] != *v131)
                {
                  if (++v131 == (_QWORD *)qword_2540CA110)
                    goto LABEL_202;
                }
                if (var4[v116] == 1)
                {
LABEL_281:
                  if (v116)
                  {
                    {
                      v134 = (v116 - 1);
                      v135 = v209 + 272 * v134;
                      while (*(_QWORD *)(v135 + 128) != *v133)
                      {
                        if (++v133 == (_QWORD *)qword_2540CA110)
                          goto LABEL_206;
                      }
                      if (var4[v134] == 1)
                      {
                        IsSimilarHeight = OU3DKitchenObjectMerger::IsSimilarHeight((OU3DKitchenObjectMerger *)IsSimilarHeight, (const OU3DKitchenObject *)(v209 + 272 * v134), (const OU3DKitchenObject *)v3, 0.8);
                        if ((IsSimilarHeight & v119) == 1)
                        {
                          v220.var1 = 0;
                          *(_QWORD *)&v220.var2 = 0;
                          v220.var1 = *(id *)(v135 + 16);
                          *(_QWORD *)&v220.var2 = *(_QWORD *)v135;
                          v203 = *(int32x2_t *)v200.f32;
                          v204 = v193;
                          IsSimilarHeight = OU::intersect((int32x2_t *)&v220, &v203, &v208);
                        }
                      }
                    }
                  }
LABEL_206:
                  {
                    v140 = 0;
                  }
                  else
                  {
                    v137 = v120[16];
                    do
                    {
                      v139 = *(_QWORD *)(v138 - 8);
                      v140 = v137 == v139;
                      v141 = v137 == v139 || v138 == qword_2540CA110;
                      v138 += 8;
                    }
                    while (!v141);
                  }
                  OU3DKitchenObjectMerger::UpdateZ(v199, v196, IsSimilarHeight, v3, &v205, v140);
                  if ((v142 & 1) == 0 && v116 != v190)
                  {
                    v143 = 0;
LABEL_236:
                    v119 = v143 != 0;
                    goto LABEL_237;
                  }
                  v203 = (int32x2_t)v122;
                  v204 = v130;
                  v202[0] = *(int32x2_t *)v200.f32;
                  v202[1] = (int32x2_t)v193;
                  v201 = 0;
                  OU::intersect(&v203, v202, &v201);
                  v144 = v208;
                  v145 = v201;
                  OUBox3d::OUBox3d(&v220, (const OUBox3d *)v3);
                  v146 = *(_QWORD *)v189;
                  v231 = *((_DWORD *)v189 + 2);
                  v230 = v146;
                  v147 = std::set<int>::set[abi:ne180100](&v232, v188);
                  *(float32x2_t *)&v148 = vadd_f32(v115, v145);
                  *(float32x2_t *)&v149 = vadd_f32(v115, v144);
                  v150 = v148;
                  *((float *)&v150 + 2) = v196;
                  *(float32x2_t *)&v151 = v201;
                  v152 = v151;
                  *((float *)&v152 + 2) = v196;
                  *(_OWORD *)&v220.var1 = v150;
                  *(_OWORD *)&v220.var3 = v152;
                  *(float32x2_t *)&v153 = v208;
                  v154 = v153;
                  *((float *)&v154 + 2) = v196;
                  v155 = v149;
                  *((float *)&v155 + 2) = v196;
                  *(_OWORD *)&v220.var5.var0 = v154;
                  *(_OWORD *)&v220.var5.var2.var0 = v155;
                  v187 = v148;
                  v156 = v148;
                  *((float *)&v156 + 2) = v199;
                  *((float *)&v151 + 2) = v199;
                  *(_OWORD *)&v220.var6.var1 = v156;
                  *(_OWORD *)&v220.var7 = v151;
                  *((float *)&v153 + 2) = v199;
                  *((float *)&v149 + 2) = v199;
                  v221 = v153;
                  v222 = v149;
                  v157 = (OU3DKitchenObjectMerger *)OU3DKitchenObjectMerger::UpdateZ(v199, v196, (uint64_t)v147, v3, &v205, v140);
                  v159 = v158;
                  if (OU3DKitchenObjectMerger::IsValidCabinet(v157, (float32x4_t *)&v220, 0.15))
                  {
                    v160 = v1->fused_cabinets_.__end_;
                    if (v160 >= v1->fused_cabinets_.__end_cap_.__value_)
                    {
                      v161 = std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>(p_fused_cabinets, (uint64_t)&v220);
                    }
                    else
                    {
                      std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>((OUBox3d *)v1->fused_cabinets_.__end_, (uint64_t)&v220);
                      v161 = (uint64_t)v160 + 272;
                      v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)((char *)v160 + 272);
                    }
                    v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)v161;
                    goto LABEL_230;
                  }
                  if (!*((_QWORD *)&v207 + 1))
                    goto LABEL_230;
                  if (boxVolume((const box3d *)&v220) > 0.1
                    && vabds_f32(*(float *)&v157, *((float *)&v157 + 1)) >= vabds_f32(v199, v196))
                  {
                    v164 = v201;
                    v208 = v201;
                    v165 = v1->fused_cabinets_.__end_;
                    if (v1->fused_cabinets_.__begin_ != v165 && *((_DWORD *)v165 - 10) == v231)
                    {
                      *((_QWORD *)v165 - 34) = v187;
                      *((float32x2_t *)v165 - 32) = v164;
                      *((_QWORD *)v165 - 26) = v187;
                      *((float32x2_t *)v165 - 24) = v164;
                    }
                  }
                  else
                  {
                    v162 = boxVolume((const box3d *)&v220);
                    v163 = v140 ^ 1;
                    if (v162 >= 0.05)
                      v163 = 1;
                    if ((v163 & 1) == 0)
LABEL_230:
                      v208 = v201;
                  }
                  std::__tree<int>::destroy((uint64_t)&v232, v233);

                  if (v228)
                    operator delete(v228);
                  if (v226)
                  {
                    v227 = v226;
                    operator delete(v226);
                  }

                  v143 = v159 & 1;
                  v196 = *((float *)&v157 + 1);
                  v199 = *(float *)&v157;
                  goto LABEL_236;
                }
              }
            }
LABEL_202:
            v136 = OU3DKitchenObjectMerger::UpdateZ(v199, v196, IsSimilarHeight, v3, &v205, 0);
            v196 = *((float *)&v136 + 1);
            v199 = *(float *)&v136;
LABEL_237:
            if (++v116 == v118)
            {
              v166 = v208;
              v112 = v192;
              goto LABEL_245;
            }
          }
        }
        LOBYTE(v119) = 1;
        v166 = *(float32x2_t *)v200.f32;
LABEL_245:
        if (vaddv_f32(vmul_f32(v5, vsub_f32(v166, *(float32x2_t *)&v193))) >= 0.000001)
        {
          OUBox3d::OUBox3d(&v220, (const OUBox3d *)v3);
          v169 = (char *)begin + 272 * v112;
          v170 = *((_QWORD *)v169 + 28);
          v231 = *((_DWORD *)v169 + 58);
          v230 = v170;
          v171 = std::set<int>::set[abi:ne180100](&v232, (uint64_t)(v169 + 240));
          *(float32x2_t *)&v173 = v208;
          *((_QWORD *)&v174 + 1) = *((_QWORD *)&v193 + 1);
          *(float32x2_t *)&v174 = vadd_f32(*(float32x2_t *)&v193, v115);
          if (v119
            || (v175 = v1->fused_cabinets_.__end_, v175 == v1->fused_cabinets_.__begin_)
            || *((_DWORD *)v175 - 10) != v231)
          {
            *(float32x2_t *)&v172 = vadd_f32(v115, v208);
            v176 = *(_DWORD *)(v3 + 72);
            v177 = *(_DWORD *)(v3 + 8);
            v178 = v174;
            DWORD2(v178) = v177;
            v179 = v193;
            v180 = v193;
            DWORD2(v180) = v177;
            v181 = v173;
            DWORD2(v181) = v177;
            *(_OWORD *)&v220.var1 = v178;
            *(_OWORD *)&v220.var3 = v180;
            v182 = v172;
            DWORD2(v182) = v177;
            *(_OWORD *)&v220.var5.var0 = v181;
            *(_OWORD *)&v220.var5.var2.var0 = v182;
            DWORD2(v174) = v176;
            DWORD2(v179) = v176;
            *(_OWORD *)&v220.var6.var1 = v174;
            *(_OWORD *)&v220.var7 = v179;
            DWORD2(v173) = v176;
            DWORD2(v172) = v176;
            v221 = v173;
            v222 = v172;
            if (OU3DKitchenObjectMerger::IsValidCabinet((OU3DKitchenObjectMerger *)v171, (float32x4_t *)&v220, 0.25))
            {
              v183 = v1->fused_cabinets_.__end_;
              if (v183 >= v1->fused_cabinets_.__end_cap_.__value_)
              {
                v184 = std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>(p_fused_cabinets, (uint64_t)&v220);
              }
              else
              {
                std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>((OUBox3d *)v1->fused_cabinets_.__end_, (uint64_t)&v220);
                v184 = (uint64_t)v183 + 272;
                v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)((char *)v183 + 272);
              }
              v1->fused_cabinets_.__end_ = (OU3DKitchenObject *)v184;
            }
          }
          else
          {
            *((_QWORD *)v175 - 34) = v174;
            *((_QWORD *)v175 - 32) = v193;
            *((_QWORD *)v175 - 26) = v174;
            *((_QWORD *)v175 - 24) = v193;
          }
          std::__tree<int>::destroy((uint64_t)&v232, v233);

          if (v228)
            operator delete(v228);
          if (v226)
          {
            v227 = v226;
            operator delete(v226);
          }

          v112 = v192;
        }
        std::deque<OU3DKitchenObject>::~deque[abi:ne180100](&v205);
        if (var4)
          operator delete(var4);
        v220.var1 = &v209;
        std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
      }
      if (v211)
      {
        v212 = (float *)v211;
        operator delete(v211);
      }
      if (__p)
      {
        v215 = (char *)__p;
        operator delete(__p);
      }
      v220.var1 = &v217;
      std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v220);
      v2 = v112 + 1;
    }
    while (v2 != v186);
  }
}

void sub_2294D16CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  uint64_t v60;
  void *v61;

  *(_QWORD *)(v59 + 80) = v60;
  OU3DKitchenObject::~OU3DKitchenObject((OU3DKitchenObject *)&a59);
  std::deque<OU3DKitchenObject>::~deque[abi:ne180100](&a39);
  if (v61)
    operator delete(v61);
  a59 = (uint64_t)&a47;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  a59 = (uint64_t)&a56;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);
  _Unwind_Resume(a1);
}

void **OU3DKitchenObjectMerger::SortBasedOnDistance@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  int *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  std::vector<int>::pointer v30;
  int *end;
  std::vector<int>::pointer begin;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  int *v38;
  int v39;
  id var1;
  std::vector<int>::pointer v41;
  int *value;
  std::logic_error *exception;
  uint64_t v45;
  unint64_t v46;
  std::vector<int> v50;
  __int128 *v51;
  int *v52;
  unint64_t v53;
  __int128 v54;
  OUBox3d v55;
  id v56;
  id v57;
  id v58;
  void *v59;
  void *v60;
  void *__p;
  id v62;
  uint64_t v63;
  int v64;
  uint64_t v65[4];
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1] - *a1;
  if (v4 >> 2 != 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4) || (v5 = a3, v4 >> 2 != (uint64_t)(a3[1] - *a3) >> 2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input data size doesn't match.");
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v6 = (unint64_t)v4 >> 2;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v7 = ((unint64_t)v4 >> 2);
  if ((int)((unint64_t)v4 >> 2) >= 1)
  {
    v8 = a1;
    v45 = v4;
    v46 = (unint64_t)v4 >> 2;
    v9 = 0;
    while (1)
    {
      LODWORD(v54) = *(_DWORD *)(*v8 + 4 * v9);
      v10 = *a2;
      OUBox3d::OUBox3d(&v55, (const OUBox3d *)(*a2 + 272 * v9));
      v11 = v10 + 272 * v9;
      v12 = *(_QWORD *)(v11 + 224);
      v64 = *(_DWORD *)(v11 + 232);
      v63 = v12;
      std::set<int>::set[abi:ne180100](v65, v11 + 240);
      v66 = *(_DWORD *)(*v5 + 4 * v9);
      if ((unint64_t)v52 >= v53)
        break;
      std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::construct[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>((uint64_t)v52, (uint64_t)&v54);
      v13 = v52 + 76;
LABEL_29:
      v52 = v13;
      std::__tree<int>::destroy((uint64_t)v65, (_QWORD *)v65[1]);

      if (__p)
        operator delete(__p);
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }

      if (++v9 == v7)
      {
        v23 = v51;
        v24 = v52;
        v4 = v45;
        LODWORD(v6) = v46;
        goto LABEL_36;
      }
    }
    v14 = 0x86BCA1AF286BCA1BLL * (((char *)v52 - (char *)v51) >> 4) + 1;
    if (v14 > 0xD79435E50D7943)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0xD79435E50D79436 * ((uint64_t)(v53 - (_QWORD)v51) >> 4) > v14)
      v14 = 0xD79435E50D79436 * ((uint64_t)(v53 - (_QWORD)v51) >> 4);
    if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v53 - (_QWORD)v51) >> 4) >= 0x6BCA1AF286BCA1)
      v15 = 0xD79435E50D7943;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 > 0xD79435E50D7943)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = (char *)operator new(304 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (uint64_t)&v16[16 * (((char *)v52 - (char *)v51) >> 4)];
    std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::construct[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>(v17, (uint64_t)&v54);
    v18 = (__int128 *)v52;
    if (v52 == (int *)v51)
    {
      v13 = (int *)(v17 + 304);
      v51 = (__int128 *)&v16[16 * (((char *)v52 - (char *)v51) >> 4)];
      v52 = (int *)(v17 + 304);
      v53 = (unint64_t)&v16[304 * v15];
    }
    else
    {
      v19 = v5;
      v20 = v7;
      v21 = (__int128 *)&v16[16 * (((char *)v52 - (char *)v51) >> 4)];
      do
      {
        v21 -= 19;
        v18 -= 19;
        std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::construct[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>((uint64_t)v21, (uint64_t)v18);
      }
      while (v18 != v51);
      v18 = v51;
      v22 = (__int128 *)v52;
      v13 = (int *)(v17 + 304);
      v51 = v21;
      v52 = (int *)(v17 + 304);
      v53 = (unint64_t)&v16[304 * v15];
      v7 = v20;
      if (v22 != v18)
      {
        do
        {
          v22 -= 19;
          std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::destroy[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>((uint64_t)v22);
        }
        while (v22 != v18);
        v5 = v19;
        if (!v18)
          goto LABEL_28;
        goto LABEL_27;
      }
      v5 = v19;
    }
    if (!v18)
    {
LABEL_28:
      v8 = a1;
      goto LABEL_29;
    }
LABEL_27:
    operator delete(v18);
    goto LABEL_28;
  }
  v24 = 0;
  v23 = 0;
LABEL_36:
  v25 = 126 - 2 * __clz(0x86BCA1AF286BCA1BLL * (((char *)v24 - (char *)v23) >> 4));
  if (v24 == (int *)v23)
    v26 = 0;
  else
    v26 = v25;
  std::__introsort<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,false>((unint64_t)v23, v24, v26, 1);
  v54 = 0uLL;
  v27 = (int)(v4 >> 2);
  v55.var1 = 0;
  std::vector<OU3DKitchenObject>::reserve((uint64_t *)&v54, v27);
  memset(&v50, 0, sizeof(v50));
  std::vector<int>::reserve(&v50, v27);
  if ((int)v6 <= 0)
  {
    end = v50.__end_;
  }
  else
  {
    v28 = 0;
    do
    {
      std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)&v54, &v51[19 * v28 + 1]);
      v29 = (int *)&v51[19 * v28 + 18];
      v30 = v50.__end_;
      if (v50.__end_ >= v50.__end_cap_.__value_)
      {
        begin = v50.__begin_;
        v33 = v50.__end_ - v50.__begin_;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v35 = (char *)v50.__end_cap_.__value_ - (char *)v50.__begin_;
        if (((char *)v50.__end_cap_.__value_ - (char *)v50.__begin_) >> 1 > v34)
          v34 = v35 >> 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
          v36 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v50.__end_cap_, v36);
          begin = v50.__begin_;
          v30 = v50.__end_;
        }
        else
        {
          v37 = 0;
        }
        v38 = (int *)&v37[4 * v33];
        *v38 = *v29;
        end = v38 + 1;
        while (v30 != begin)
        {
          v39 = *--v30;
          *--v38 = v39;
        }
        v50.__begin_ = v38;
        v50.__end_ = end;
        v50.__end_cap_.__value_ = (int *)&v37[4 * v36];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *v50.__end_ = *v29;
        end = v30 + 1;
      }
      v50.__end_ = end;
      ++v28;
    }
    while (v28 != v7);
  }
  *(_OWORD *)a4 = v54;
  var1 = v55.var1;
  v55.var1 = 0;
  v54 = 0uLL;
  v41 = v50.__begin_;
  value = v50.__end_cap_.__value_;
  *(_QWORD *)(a4 + 16) = var1;
  *(_QWORD *)(a4 + 24) = v41;
  *(_QWORD *)(a4 + 32) = end;
  *(_QWORD *)(a4 + 40) = value;
  v50.__begin_ = (std::vector<int>::pointer)&v54;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  return std::vector<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::~vector[abi:ne180100]((void **)&v51);
}

void sub_2294D1DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, char *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (__p)
  {
    a18 = __p;
    operator delete(__p);
  }
  __p = &a23;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::~vector[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

OUBox3d *std::deque<OU3DKitchenObject>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  OUBox3d *v8;
  OUBox3d *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 2 * (v5 - v4) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<OU3DKitchenObject>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (OUBox3d *)(*(_QWORD *)(v4 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 272 * (v7 & 0xF));
  }
  result = std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v8, a2);
  ++a1[5];
  return result;
}

OUBox3d *`anonymous namespace'::DequeEraseTarget@<X0>(OUBox3d *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v4 = a2[1];
  if (a2[2] != v4)
  {
    v5 = a2[4];
    v6 = (_QWORD *)(v4 + 8 * (v5 >> 4));
    v7 = *v6 + 272 * (v5 & 0xF);
    v8 = *(_QWORD *)(v4 + (((a2[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 272 * ((*((_DWORD *)a2 + 10) + (_DWORD)v5) & 0xF);
    if (v7 != v8)
    {
      v9 = (int)result;
      do
      {
        if (*(_DWORD *)(v7 + 232) != v9)
          result = std::deque<OU3DKitchenObject>::push_back((_QWORD *)a3, v7);
        v7 += 272;
        if (v7 - *v6 == 4352)
        {
          v10 = v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_2294D1FE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::deque<OU3DKitchenObject>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL OU3DKitchenObjectMerger::IsValidCabinet(OU3DKitchenObjectMerger *this, float32x4_t *a2, float a3)
{
  float32x4_t v4;
  float32x4_t v5;
  _BOOL8 v6;
  float v7;
  void *__p[3];

  if (a2[4].f32[2] < a2->f32[2])
    return 0;
  v4 = vsubq_f32(*a2, a2[3]);
  v5 = vmulq_f32(v4, v4);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]) < a3)return 0;
  box3dToCentroidSizeAngle(a2, (uint64_t *)__p);
  v7 = *((float *)__p[0] + 5);
  if (v7 >= *((float *)__p[0] + 4))
    v7 = *((float *)__p[0] + 4);
  if (v7 >= *((float *)__p[0] + 3))
    v7 = *((float *)__p[0] + 3);
  v6 = v7 >= a3;
  __p[1] = __p[0];
  operator delete(__p[0]);
  return v6;
}

void OU3DKitchenObject::~OU3DKitchenObject(OU3DKitchenObject *this)
{
  void *v2;
  void *v3;

  std::__tree<int>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));

  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }

}

uint64_t OU3DKitchenObjectMerger::AddNonIntersectingOldDetections(OU3DKitchenObjectMerger *this)
{
  OU3DKitchenObjectMerger *v1;
  int v2;
  OU3DKitchenObject *begin;
  uint64_t *p_new_cabinets;
  OU3DKitchenObject *end;
  int v6;
  int v7;
  uint64_t v8;
  OU3DKitchenObject *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v18[2];
  int v19;
  OUBox3d *v20;
  OUBox3d v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  void *__p;
  id v28;
  uint64_t v29;
  int v30;
  uint64_t v31[6];

  v1 = this;
  v31[4] = *MEMORY[0x24BDAC8D0];
  v2 = -252645135 * ((unint64_t)(this->old_cabinets_.__end_ - this->old_cabinets_.__begin_) >> 4);
  p_new_cabinets = (uint64_t *)&this->new_cabinets_;
  begin = this->new_cabinets_.__begin_;
  end = this->new_cabinets_.__end_;
  memset(v18, 0, sizeof(v18));
  v19 = 1065353216;
  LODWORD(v20) = 0;
  if (v2 <= 0)
  {
    memset(&v21, 0, 24);
  }
  else
  {
    v6 = 0;
    v7 = -252645135 * ((end - begin) >> 4);
    do
    {
      if (v7 < 1)
      {
LABEL_8:
        v9 = v1->old_cabinets_.__begin_;
        OUBox3d::OUBox3d(&v21, (const OUBox3d *)((char *)v1->old_cabinets_.__begin_ + 272 * v6));
        v10 = (char *)v9 + 272 * v6;
        v11 = *((_QWORD *)v10 + 28);
        v30 = *((_DWORD *)v10 + 58);
        v29 = v11;
        std::set<int>::set[abi:ne180100](v31, (uint64_t)(v10 + 240));
        v12 = (void *)objc_msgSend(CFSTR("offline"), "copy");
        v13 = v24;
        v24 = v12;

        std::vector<OU3DKitchenObject>::push_back[abi:ne180100](p_new_cabinets, (__int128 *)&v21);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v18, (int *)&v20, &v20);
        std::__tree<int>::destroy((uint64_t)v31, (_QWORD *)v31[1]);

        if (__p)
          operator delete(__p);
        if (v25)
        {
          v26 = v25;
          operator delete(v25);
        }

      }
      else
      {
        v8 = 0;
        while (1)
        {
          LOBYTE(this) = OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(this, 0.34907, (float32x4_t *)v1->old_cabinets_.__begin_ + 17 * (int)v20, (float32x4_t *)((char *)v1->new_cabinets_.__begin_ + v8));
          if ((this & 1) != 0)
            break;
          v8 += 272;
          if (272 * v7 == v8)
          {
            v6 = (int)v20;
            goto LABEL_8;
          }
        }
      }
      v6 = (_DWORD)v20 + 1;
      LODWORD(v20) = v6;
    }
    while (v6 < v2);
    memset(&v21, 0, 24);
    LODWORD(v20) = 0;
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v18, (int *)&v20))
      {
        v14 = (uint64_t)v1->old_cabinets_.__begin_ + 272 * (int)v20;
        v15 = *(_QWORD *)&v21.var2;
        if ((id)*(_QWORD *)&v21.var2 >= v21.var3)
        {
          v16 = std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v21, v14);
        }
        else
        {
          std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(*(OUBox3d **)&v21.var2, v14);
          v16 = v15 + 272;
        }
        *(_QWORD *)&v21.var2 = v16;
      }
      LODWORD(v20) = (_DWORD)v20 + 1;
    }
    while ((int)v20 < v2);
  }
  std::vector<OU3DKitchenObject>::__vdeallocate((void **)&v1->old_cabinets_.__begin_);
  *(_OWORD *)&v1->old_cabinets_.__begin_ = *(_OWORD *)&v21.var1;
  v1->old_cabinets_.__end_cap_.__value_ = (OU3DKitchenObject *)v21.var3;
  v20 = &v21;
  memset(&v21, 0, 24);
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v18);
}

void sub_2294D23B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43)
{
  a16 = &a17;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OU3DKitchenObject>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v7 - *a1) >> 4);
    if (v10 + 1 > 0xF0F0F0F0F0F0F0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - *a1) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x78787878787878)
      v13 = 0xF0F0F0F0F0F0F0;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OU3DKitchenObject>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[272 * v10];
    v18 = &v14[272 * v13];
    std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject,OU3DKitchenObject*>((uint64_t)v16, a2);
    v17 = v16 + 272;
    std::vector<OU3DKitchenObject>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject,OU3DKitchenObject*>(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 272;
    a1[1] = v7 + 272;
  }
  a1[1] = v9;
  return result;
}

void sub_2294D2558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OU3DKitchenObjectMerger::RemoveDuplicateFusedCabinets(OU3DKitchenObjectMerger *this)
{
  vector<OU3DKitchenObject, std::allocator<OU3DKitchenObject>> *p_fused_cabinets;
  int v3;
  int v4;
  uint64_t v5;
  __int128 v7;
  OU3DKitchenObject *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  void **v13;

  v10 = 0u;
  v11 = 0u;
  v12 = 1065353216;
  p_fused_cabinets = &this->fused_cabinets_;
  v3 = -252645135 * ((this->fused_cabinets_.__end_ - this->fused_cabinets_.__begin_) >> 4);
  LODWORD(v13) = 0;
  if (v3 < 1)
  {
    v5 = 0;
  }
  else
  {
    do
    {
      v4 = 0;
      v9 = 0;
      do
      {
        if ((_DWORD)v13 != v4
          && !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v10, &v9))
        {
          box3dIou((float32x4_t *)p_fused_cabinets->__begin_ + 17 * (int)v13, (float32x4_t *)p_fused_cabinets->__begin_ + 17 * v9, 0, (uint64_t)&v7);
          if (*(float *)&v8 > 0.5)
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v10, (int *)&v13, &v13);
        }
        v4 = v9 + 1;
        v9 = v4;
      }
      while (v4 < v3);
      LODWORD(v13) = (_DWORD)v13 + 1;
    }
    while ((int)v13 < v3);
    v5 = *((_QWORD *)&v11 + 1);
  }
  v7 = 0uLL;
  v8 = 0;
  std::vector<OU3DKitchenObject>::reserve((uint64_t *)&v7, v3 - v5);
  LODWORD(v13) = 0;
  if (v3 >= 1)
  {
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v10, (int *)&v13))
        std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)&v7, (__int128 *)p_fused_cabinets->__begin_ + 17 * (int)v13);
      LODWORD(v13) = (_DWORD)v13 + 1;
    }
    while ((int)v13 < v3);
  }
  std::vector<OU3DKitchenObject>::__vdeallocate((void **)&p_fused_cabinets->__begin_);
  *(_OWORD *)&this->fused_cabinets_.__begin_ = v7;
  this->fused_cabinets_.__end_cap_.__value_ = v8;
  v8 = 0;
  v7 = 0uLL;
  v13 = (void **)&v7;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&v13);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v10);
}

void sub_2294D270C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  *(_QWORD *)(v17 - 56) = &a9;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OU3DKitchenObject>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0xF0F0F0F0F0F0F1)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<OU3DKitchenObject>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 272 * v6;
    std::vector<OU3DKitchenObject>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_2294D27DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t OU3DKitchenObjectMerger::RemoveDuplicateTableCabinet(OU3DKitchenObjectMerger *this)
{
  vector<OU3DKitchenObject, std::allocator<OU3DKitchenObject>> *p_other_objects;
  int v3;
  OU3DKitchenObject *end;
  OU3DKitchenObject *begin;
  int v6;
  unint64_t v7;
  float32x4_t *v8;
  __CFString *v9;
  _QWORD *v10;
  __CFString *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v15;
  __int128 v16;
  OU3DKitchenObject *v17;
  int v18;
  _OWORD v19[2];
  int v20;
  void **v21;
  char v22;

  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  p_other_objects = &this->other_objects_;
  v3 = -252645135 * ((unint64_t)(this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
  begin = this->fused_cabinets_.__begin_;
  end = this->fused_cabinets_.__end_;
  v18 = 0;
  if (v3 <= 0)
  {
    v16 = 0uLL;
    v17 = 0;
  }
  else
  {
    v6 = 0;
    v15 = 0xF0F0F0F0F0F0F0F1 * ((end - begin) >> 4);
    v7 = 0xFFFFFFF000000010 * ((end - begin) >> 4);
    do
    {
      v8 = (float32x4_t *)p_other_objects->__begin_;
      v9 = CFSTR("Table");
      v17 = 0;
      v16 = 0uLL;
      v21 = (void **)&v16;
      v22 = 0;
      v10 = operator new(8uLL);
      *(_QWORD *)&v16 = v10;
      *((_QWORD *)&v16 + 1) = v10;
      v17 = (OU3DKitchenObject *)(v10 + 1);
      v11 = v9;
      *v10 = v11;
      *((_QWORD *)&v16 + 1) = v10 + 1;
      if ((_QWORD *)v16 == v10 + 1)
      {
LABEL_7:
        v21 = (void **)&v16;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v21);

      }
      else
      {
        v12 = (_QWORD *)(v16 - 8);
        while (v8[17 * v6 + 8].i64[0] != v12[1])
        {
          if (++v12 == v10)
            goto LABEL_7;
        }
        v21 = (void **)&v16;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v21);

        if ((int)v15 >= 1)
        {
          v13 = 0;
          do
          {
            box3dIou((float32x4_t *)((char *)this->fused_cabinets_.__begin_ + v13), &v8[17 * v6], 0, (uint64_t)&v16);
            if (*((float *)&v16 + 3) > 0.5)
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v19, &v18, &v18);
            v13 += 272;
          }
          while (v7 != v13);
        }
      }
      v6 = v18 + 1;
      v18 = v6;
    }
    while (v6 < v3);
    v16 = 0uLL;
    v17 = 0;
    LODWORD(v21) = 0;
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v19, (int *)&v21))
        std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)&v16, (__int128 *)p_other_objects->__begin_ + 17 * (int)v21);
      LODWORD(v21) = (_DWORD)v21 + 1;
    }
    while ((int)v21 < v3);
  }
  std::vector<OU3DKitchenObject>::__vdeallocate((void **)&p_other_objects->__begin_);
  *(_OWORD *)&this->other_objects_.__begin_ = v16;
  this->other_objects_.__end_cap_.__value_ = v17;
  v17 = 0;
  v16 = 0uLL;
  v21 = (void **)&v16;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&v21);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v19);
}

void sub_2294D2A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a11;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&a24);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t OU3DKitchenObjectMerger::RemoveDuplicateWasherCabinet(OU3DKitchenObjectMerger *this)
{
  vector<OU3DKitchenObject, std::allocator<OU3DKitchenObject>> *p_fused_cabinets;
  int v2;
  uint64_t v3;
  OU3DKitchenObject *begin;
  __CFString *v5;
  _QWORD *v6;
  __CFString *v7;
  _QWORD *v8;
  int i;
  uint64_t v11;
  __int128 v13;
  OU3DKitchenObject *v14;
  _OWORD v15[2];
  int v16;
  void **v17;
  char v18;

  memset(v15, 0, sizeof(v15));
  v16 = 1065353216;
  p_fused_cabinets = &this->fused_cabinets_;
  v2 = -252645135 * ((unint64_t)(this->fused_cabinets_.__end_ - this->fused_cabinets_.__begin_) >> 4);
  if ((int)(-252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4)) >= 1)
  {
    v3 = 0;
    v11 = -252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
    do
    {
      begin = this->other_objects_.__begin_;
      v5 = CFSTR("Washer");
      v14 = 0;
      v13 = 0uLL;
      v17 = (void **)&v13;
      v18 = 0;
      v6 = operator new(8uLL);
      *(_QWORD *)&v13 = v6;
      *((_QWORD *)&v13 + 1) = v6;
      v14 = (OU3DKitchenObject *)(v6 + 1);
      v7 = v5;
      *v6 = v7;
      *((_QWORD *)&v13 + 1) = v6 + 1;
      if ((_QWORD *)v13 == v6 + 1)
      {
LABEL_7:
        v17 = (void **)&v13;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v17);

      }
      else
      {
        v8 = (_QWORD *)(v13 - 8);
        while (*((_QWORD *)begin + 34 * v3 + 16) != v8[1])
        {
          if (++v8 == v6)
            goto LABEL_7;
        }
        v17 = (void **)&v13;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v17);

        LODWORD(v17) = 0;
        if (v2 >= 1)
        {
          for (i = 0; i < v2; LODWORD(v17) = i)
          {
            box3dIou((float32x4_t *)begin + 17 * v3, (float32x4_t *)p_fused_cabinets->__begin_ + 17 * i, 0, (uint64_t)&v13);
            if (*(float *)&v14 > 0.5)
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v15, (int *)&v17, &v17);
            i = (_DWORD)v17 + 1;
          }
        }
      }
      ++v3;
    }
    while (v3 != v11);
  }
  v13 = 0uLL;
  v14 = 0;
  LODWORD(v17) = 0;
  if (v2 >= 1)
  {
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v15, (int *)&v17))
        std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)&v13, (__int128 *)p_fused_cabinets->__begin_ + 17 * (int)v17);
      LODWORD(v17) = (_DWORD)v17 + 1;
    }
    while ((int)v17 < v2);
  }
  std::vector<OU3DKitchenObject>::__vdeallocate((void **)&p_fused_cabinets->__begin_);
  *(_OWORD *)&this->fused_cabinets_.__begin_ = v13;
  this->fused_cabinets_.__end_cap_.__value_ = v14;
  v14 = 0;
  v13 = 0uLL;
  v17 = (void **)&v13;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&v17);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v15);
}

void sub_2294D2CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a13;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&a24);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::RemoveLargePotentialFPNewCabinets(OU3DKitchenObjectMerger *this)
{
  vector<OU3DKitchenObject, std::allocator<OU3DKitchenObject>> *i;
  OU3DKitchenObject *begin;
  OU3DKitchenObject *end;
  OU3DKitchenObject *v5;
  OU3DKitchenObject *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  void **v10[6];
  __int128 v11;
  OU3DKitchenObject *v12;

  v11 = 0uLL;
  v12 = 0;
  begin = this->new_cabinets_.__begin_;
  end = this->new_cabinets_.__end_;
  for (i = &this->new_cabinets_; begin != end; begin = (OU3DKitchenObject *)((char *)begin + 272))
  {
    if ((float)(*((float *)begin + 18) - *((float *)begin + 2)) <= 1.2)
    {
      v8 = *((_QWORD *)&v11 + 1);
      if (*((_QWORD *)&v11 + 1) >= (unint64_t)v12)
        goto LABEL_11;
    }
    else
    {
      v5 = this->old_cabinets_.__begin_;
      v6 = this->old_cabinets_.__end_;
      v7 = 0.0;
      while (v5 != v6)
      {
        box3dIou((float32x4_t *)v5, (float32x4_t *)begin, 0, (uint64_t)v10);
        v7 = v7 + *((float *)v10 + 1);
        v5 = (OU3DKitchenObject *)((char *)v5 + 272);
      }
      if ((float)(v7 / boxVolume((const box3d *)begin)) < 0.6)
        continue;
      v8 = *((_QWORD *)&v11 + 1);
      if (*((_QWORD *)&v11 + 1) >= (unint64_t)v12)
      {
LABEL_11:
        v9 = std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v11, (uint64_t)begin);
        goto LABEL_12;
      }
    }
    std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(*((OUBox3d **)&v11 + 1), (uint64_t)begin);
    v9 = v8 + 272;
LABEL_12:
    *((_QWORD *)&v11 + 1) = v9;
  }
  std::vector<OU3DKitchenObject>::__vdeallocate((void **)&i->__begin_);
  *(_OWORD *)&this->new_cabinets_.__begin_ = v11;
  this->new_cabinets_.__end_cap_.__value_ = v12;
  v12 = 0;
  v11 = 0uLL;
  v10[0] = (void **)&v11;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](v10);
}

void sub_2294D2E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a9 = (void **)&a15;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::Merge(OU3DKitchenObjectMerger *this)
{
  OU3DKitchenObjectMerger::RemoveLargePotentialFPNewCabinets(this);
  OU3DKitchenObjectMerger::AlignNewCabinetsExtentsWithOldDetections(this);
  OU3DKitchenObjectMerger::AlignApplianceWithNewCabinets(this);
  OU3DKitchenObjectMerger::AlignStoveWithOven(this);
  OU3DKitchenObjectMerger::AlignSinkWithDishwasher(this);
  OU3DKitchenObjectMerger::AddNonIntersectingOldDetections(this);
  OU3DKitchenObjectMerger::FuseAndCarve(this);
  OU3DKitchenObjectMerger::RemoveDuplicateFusedCabinets(this);
  OU3DKitchenObjectMerger::RemoveDuplicateTableCabinet(this);
  OU3DKitchenObjectMerger::RemoveDuplicateWasherCabinet(this);
  OU3DKitchenObjectMerger::UnifyHeightsAlignObjects(this);
  OU3DKitchenObjectMerger::ComputeGroupIds(this);
  OU3DKitchenObjectMerger::AssignUUIDForFusedObjects(this);
}

void OU3DKitchenObjectMerger::AlignNewCabinetsExtentsWithOldDetections(OU3DKitchenObjectMerger *this)
{
  OU3DKitchenObjectMerger *v1;
  uint64_t v2;
  OU3DKitchenObject *begin;
  char *v4;
  float32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUBox3d *v9;
  OUBox3d *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  float32x4_t v21;
  float v22;
  float v23;
  float *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  float *v32;
  int v33;
  OUBox3d *v34;
  OU3DKitchenObjectMerger *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  float ceil_plane_height;
  float32x4_t v44;
  float v45;
  float v46;
  OU3DKitchenObjectMerger *v47;
  float *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  float *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  OUBox3d *v63;
  OUBox3d *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  int v74;
  float32x4_t v75;
  float v76;
  float v77;
  float *v78;
  float *v79;
  float *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  float *v86;
  int v87;
  OUBox3d *v88;
  OU3DKitchenObjectMerger *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  float *v96;
  float v97;
  float32x4_t v98;
  float v99;
  float v100;
  OU3DKitchenObjectMerger *v101;
  float *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  float *v108;
  float v109;
  _DWORD *var4;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  __CFString *v118;
  _QWORD *v119;
  uint64_t v120;
  __CFString *v121;
  _QWORD *v122;
  BOOL v123;
  __CFString *v124;
  _QWORD *v125;
  __CFString *v126;
  _QWORD *v127;
  float32x4_t v128;
  BOOL v129;
  float32x4_t v130;
  uint64_t v131;
  __CFString *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  __CFString *v136;
  _QWORD *v137;
  BOOL v138;
  __CFString *v139;
  _QWORD *v140;
  __CFString *v141;
  _QWORD *v142;
  float32x4_t v143;
  BOOL v144;
  float32x4_t v145;
  __int128 v147;
  float32x2_t v148;
  __int128 v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  OU3DKitchenObjectMerger *v159;
  uint64_t v160;
  id var1;
  id v162;
  __int128 v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  void *v167[2];
  void *v168[2];
  _DWORD *v169;
  float32x4_t v170;
  float32x2_t v171;
  float32x2_t v172;
  __int128 v173;
  _QWORD *v174;
  __int128 v175;
  id var3;
  void *v177;
  float *v178;
  char *v179;
  void *__p;
  char *v181;
  char *v182;
  OUBox3d *v183;
  OUBox3d *v184;
  unint64_t v185;
  __int128 *v186;
  uint64_t v187;
  OUBox3d v188;
  id v189;
  id v190;
  id v191;
  void *v192;
  void *v193;
  void *v194;
  id v195;
  uint64_t v196;
  int v197;
  uint64_t *v198[4];
  OUBox3d v199;
  id v200;
  id v201;
  id v202;
  void *v203;
  void *v204;
  void *v205;
  id v206;
  uint64_t v207;
  int v208;
  uint64_t *v209[8];

  v209[5] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  if ((int)(-252645135 * ((this->new_cabinets_.__end_ - this->new_cabinets_.__begin_) >> 4)) < 1)
    return;
  v1 = this;
  v2 = 0;
  v160 = -252645135 * ((this->new_cabinets_.__end_ - this->new_cabinets_.__begin_) >> 4);
  v159 = this;
  do
  {
    begin = v1->new_cabinets_.__begin_;
    v4 = (char *)begin + 272 * v2;
    v183 = 0;
    v184 = 0;
    v185 = 0;
    __p = 0;
    v181 = 0;
    v182 = 0;
    v177 = 0;
    v178 = 0;
    v179 = 0;
    v163 = *((_OWORD *)v4 + 3);
    v164 = *((float32x4_t *)v4 + 1);
    v170 = *((float32x4_t *)v4 + 2);
    v5 = vsub_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v164.f32);
    if ((int)(-252645135 * ((v1->old_cabinets_.__end_ - v1->old_cabinets_.__begin_) >> 4)) >= 1)
    {
      v6 = 0;
      v7 = -252645135 * ((v1->old_cabinets_.__end_ - v1->old_cabinets_.__begin_) >> 4);
      do
      {
        v8 = (uint64_t)v1->old_cabinets_.__begin_ + 272 * v6;
        this = (OU3DKitchenObjectMerger *)OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(this, 0.34907, (float32x4_t *)v8, (float32x4_t *)begin + 17 * v2);
        if ((_DWORD)this)
        {
          v165 = *(float32x4_t *)(v8 + 16);
          *(_OWORD *)v167 = *(_OWORD *)(v8 + 32);
          v9 = v184;
          if ((unint64_t)v184 >= v185)
          {
            v10 = (OUBox3d *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v183, v8);
          }
          else
          {
            std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v184, v8);
            v10 = (OUBox3d *)((char *)v9 + 272);
          }
          v184 = v10;
          v11 = v181;
          if (v181 >= v182)
          {
            v13 = (char *)__p;
            v14 = (v181 - (_BYTE *)__p) >> 2;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v16 = v182 - (_BYTE *)__p;
            if ((v182 - (_BYTE *)__p) >> 1 > v15)
              v15 = v16 >> 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v182, v17);
              v13 = (char *)__p;
              v11 = v181;
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[4 * v14];
            *(_DWORD *)v19 = 2;
            v12 = v19 + 4;
            while (v11 != v13)
            {
              v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            __p = v19;
            v181 = v12;
            v182 = &v18[4 * v17];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)v181 = 2;
            v12 = v11 + 4;
          }
          v181 = v12;
          v21 = vsubq_f32(v170, *(float32x4_t *)v167);
          v22 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v21, v21)));
          if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v21.f32)) >= 0.0)
            v23 = v22;
          else
            v23 = -v22;
          v24 = v178;
          if (v178 >= (float *)v179)
          {
            v26 = (float *)v177;
            v27 = ((char *)v178 - (_BYTE *)v177) >> 2;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v29 = v179 - (_BYTE *)v177;
            if ((v179 - (_BYTE *)v177) >> 1 > v28)
              v28 = v29 >> 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
              v30 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v179, v30);
              v26 = (float *)v177;
              v24 = v178;
            }
            else
            {
              v31 = 0;
            }
            v32 = (float *)&v31[4 * v27];
            *v32 = v23;
            v25 = v32 + 1;
            while (v24 != v26)
            {
              v33 = *((_DWORD *)v24-- - 1);
              *((_DWORD *)v32-- - 1) = v33;
            }
            v177 = v32;
            v178 = v25;
            v179 = &v31[4 * v30];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v178 = v23;
            v25 = v24 + 1;
          }
          v178 = v25;
          v34 = v184;
          if ((unint64_t)v184 >= v185)
          {
            this = (OU3DKitchenObjectMerger *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v183, v8);
          }
          else
          {
            std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v184, v8);
            this = (OU3DKitchenObjectMerger *)&v34[2].var7;
          }
          v184 = (OUBox3d *)this;
          v35 = (OU3DKitchenObjectMerger *)v181;
          if (v181 >= v182)
          {
            this = (OU3DKitchenObjectMerger *)__p;
            v37 = (v181 - (_BYTE *)__p) >> 2;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v39 = v182 - (_BYTE *)__p;
            if ((v182 - (_BYTE *)__p) >> 1 > v38)
              v38 = v39 >> 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
              v40 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v182, v40);
              this = (OU3DKitchenObjectMerger *)__p;
              v35 = (OU3DKitchenObjectMerger *)v181;
            }
            else
            {
              v41 = 0;
            }
            v42 = (float *)&v41[4 * v37];
            *(_DWORD *)v42 = 1;
            v36 = (char *)(v42 + 1);
            while (v35 != this)
            {
              ceil_plane_height = v35[-1].ceil_plane_height_;
              v35 = (OU3DKitchenObjectMerger *)((char *)v35 - 4);
              *--v42 = ceil_plane_height;
            }
            __p = v42;
            v181 = v36;
            v182 = &v41[4 * v40];
            if (this)
              operator delete(this);
          }
          else
          {
            *(_DWORD *)v181 = 1;
            v36 = (char *)&v35->old_cabinets_.__begin_ + 4;
          }
          v181 = v36;
          v44 = vsubq_f32(v170, v165);
          v45 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v44, v44)));
          if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v44.f32)) >= 0.0)
            v46 = v45;
          else
            v46 = -v45;
          v47 = (OU3DKitchenObjectMerger *)v178;
          if (v178 >= (float *)v179)
          {
            this = (OU3DKitchenObjectMerger *)v177;
            v49 = ((char *)v178 - (_BYTE *)v177) >> 2;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v51 = v179 - (_BYTE *)v177;
            if ((v179 - (_BYTE *)v177) >> 1 > v50)
              v50 = v51 >> 1;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
              v52 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52)
            {
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v179, v52);
              this = (OU3DKitchenObjectMerger *)v177;
              v47 = (OU3DKitchenObjectMerger *)v178;
            }
            else
            {
              v53 = 0;
            }
            v54 = (float *)&v53[4 * v49];
            *v54 = v46;
            v48 = v54 + 1;
            while (v47 != this)
            {
              v55 = v47[-1].ceil_plane_height_;
              v47 = (OU3DKitchenObjectMerger *)((char *)v47 - 4);
              *--v54 = v55;
            }
            v177 = v54;
            v178 = v48;
            v179 = &v53[4 * v52];
            if (this)
              operator delete(this);
          }
          else
          {
            *v178 = v46;
            v48 = (float *)&v47->old_cabinets_.__begin_ + 1;
          }
          v178 = v48;
        }
        ++v6;
      }
      while (v6 != v7);
    }
    if ((int)(-252645135 * ((v1->other_objects_.__end_ - v1->other_objects_.__begin_) >> 4)) >= 1)
    {
      v56 = 0;
      v57 = -252645135 * ((v1->other_objects_.__end_ - v1->other_objects_.__begin_) >> 4);
      do
      {
        v58 = (uint64_t)v1->other_objects_.__begin_ + 272 * v56;
        LODWORD(this) = OU3DKitchenObjectMerger::IsObjectIntersectionReasonable(this, 0.34907, (float32x4_t *)v58, (float32x4_t *)begin + 17 * v2);
        if ((_DWORD)this)
        {
          *(_OWORD *)v168 = *(_OWORD *)(v58 + 16);
          v59 = vsubq_f32(*(float32x4_t *)v58, *(float32x4_t *)v168);
          v60 = vmulq_f32(v59, v59);
          v61 = vsubq_f32(*(float32x4_t *)v4, *((float32x4_t *)v4 + 1));
          v62 = vmulq_f32(v61, v61);
          if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).f32[0])- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0])) < 0.3)
          {
            v166 = *(float32x4_t *)(v58 + 32);
            v63 = v184;
            if ((unint64_t)v184 >= v185)
            {
              v64 = (OUBox3d *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v183, v58);
            }
            else
            {
              std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v184, v58);
              v64 = (OUBox3d *)((char *)v63 + 272);
            }
            v184 = v64;
            v65 = v181;
            if (v181 >= v182)
            {
              v67 = (char *)__p;
              v68 = (v181 - (_BYTE *)__p) >> 2;
              v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v70 = v182 - (_BYTE *)__p;
              if ((v182 - (_BYTE *)__p) >> 1 > v69)
                v69 = v70 >> 1;
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
                v71 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v71 = v69;
              if (v71)
              {
                v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v182, v71);
                v67 = (char *)__p;
                v65 = v181;
              }
              else
              {
                v72 = 0;
              }
              v73 = &v72[4 * v68];
              *(_DWORD *)v73 = 2;
              v66 = v73 + 4;
              while (v65 != v67)
              {
                v74 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v73 - 1) = v74;
                v73 -= 4;
              }
              __p = v73;
              v181 = v66;
              v182 = &v72[4 * v71];
              if (v67)
                operator delete(v67);
            }
            else
            {
              *(_DWORD *)v181 = 2;
              v66 = v65 + 4;
            }
            v181 = v66;
            v75 = vsubq_f32(v170, v166);
            v76 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v75, v75)));
            if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v75.f32)) >= 0.0)
              v77 = v76;
            else
              v77 = -v76;
            v78 = v178;
            if (v178 >= (float *)v179)
            {
              v80 = (float *)v177;
              v81 = ((char *)v178 - (_BYTE *)v177) >> 2;
              v82 = v81 + 1;
              if ((unint64_t)(v81 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v83 = v179 - (_BYTE *)v177;
              if ((v179 - (_BYTE *)v177) >> 1 > v82)
                v82 = v83 >> 1;
              if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
                v84 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v84 = v82;
              if (v84)
              {
                v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v179, v84);
                v80 = (float *)v177;
                v78 = v178;
              }
              else
              {
                v85 = 0;
              }
              v86 = (float *)&v85[4 * v81];
              *v86 = v77;
              v79 = v86 + 1;
              while (v78 != v80)
              {
                v87 = *((_DWORD *)v78-- - 1);
                *((_DWORD *)v86-- - 1) = v87;
              }
              v177 = v86;
              v178 = v79;
              v179 = &v85[4 * v84];
              if (v80)
                operator delete(v80);
            }
            else
            {
              *v178 = v77;
              v79 = v78 + 1;
            }
            v178 = v79;
            v88 = v184;
            if ((unint64_t)v184 >= v185)
            {
              this = (OU3DKitchenObjectMerger *)std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>((uint64_t *)&v183, v58);
            }
            else
            {
              std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v184, v58);
              this = (OU3DKitchenObjectMerger *)&v88[2].var7;
            }
            v184 = (OUBox3d *)this;
            v89 = (OU3DKitchenObjectMerger *)v181;
            if (v181 >= v182)
            {
              this = (OU3DKitchenObjectMerger *)__p;
              v91 = (v181 - (_BYTE *)__p) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v93 = v182 - (_BYTE *)__p;
              if ((v182 - (_BYTE *)__p) >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v182, v94);
                this = (OU3DKitchenObjectMerger *)__p;
                v89 = (OU3DKitchenObjectMerger *)v181;
              }
              else
              {
                v95 = 0;
              }
              v96 = (float *)&v95[4 * v91];
              *(_DWORD *)v96 = 1;
              v90 = (char *)(v96 + 1);
              while (v89 != this)
              {
                v97 = v89[-1].ceil_plane_height_;
                v89 = (OU3DKitchenObjectMerger *)((char *)v89 - 4);
                *--v96 = v97;
              }
              __p = v96;
              v181 = v90;
              v182 = &v95[4 * v94];
              if (this)
                operator delete(this);
            }
            else
            {
              *(_DWORD *)v181 = 1;
              v90 = (char *)&v89->old_cabinets_.__begin_ + 4;
            }
            v181 = v90;
            v98 = vsubq_f32(v170, *(float32x4_t *)v168);
            v99 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v98, v98)));
            if (vaddv_f32(vmul_f32(v5, *(float32x2_t *)v98.f32)) >= 0.0)
              v100 = v99;
            else
              v100 = -v99;
            v101 = (OU3DKitchenObjectMerger *)v178;
            if (v178 >= (float *)v179)
            {
              this = (OU3DKitchenObjectMerger *)v177;
              v103 = ((char *)v178 - (_BYTE *)v177) >> 2;
              v104 = v103 + 1;
              if ((unint64_t)(v103 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v105 = v179 - (_BYTE *)v177;
              if ((v179 - (_BYTE *)v177) >> 1 > v104)
                v104 = v105 >> 1;
              if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
                v106 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v106 = v104;
              if (v106)
              {
                v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v179, v106);
                this = (OU3DKitchenObjectMerger *)v177;
                v101 = (OU3DKitchenObjectMerger *)v178;
              }
              else
              {
                v107 = 0;
              }
              v108 = (float *)&v107[4 * v103];
              *v108 = v100;
              v102 = v108 + 1;
              while (v101 != this)
              {
                v109 = v101[-1].ceil_plane_height_;
                v101 = (OU3DKitchenObjectMerger *)((char *)v101 - 4);
                *--v108 = v109;
              }
              v177 = v108;
              v178 = v102;
              v179 = &v107[4 * v106];
              if (this)
                operator delete(this);
            }
            else
            {
              *v178 = v100;
              v102 = (float *)&v101->old_cabinets_.__begin_ + 1;
            }
            v178 = v102;
          }
        }
        ++v56;
      }
      while (v56 != v57);
    }
    if (v183 == v184)
      goto LABEL_221;
    v175 = 0uLL;
    var3 = 0;
    OU3DKitchenObjectMerger::SortBasedOnDistance(&v177, (uint64_t *)&v183, &__p, (uint64_t)&v199);
    std::vector<OU3DKitchenObject>::__vdeallocate((void **)&v175);
    v175 = *(_OWORD *)&v199.var1;
    var4 = v199.var4;
    var3 = v199.var3;
    memset(&v199, 0, 48);
    v188.var1 = &v199;
    std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v188);
    std::__sort<std::__less<float,float> &,float *>();
    OUBox3d::OUBox3d(&v199, (const OUBox3d *)((char *)begin + 272 * v2));
    v111 = (char *)begin + 272 * v2;
    v112 = *((_QWORD *)v111 + 28);
    v111 += 224;
    v208 = *((_DWORD *)v111 + 2);
    v207 = v112;
    std::set<int>::set[abi:ne180100]((uint64_t *)v209, (uint64_t)(v111 + 16));
    v169 = var4;
    OUBox3d::OUBox3d(&v188, (const OUBox3d *)((char *)begin + 272 * v2));
    v113 = *(_QWORD *)v111;
    v197 = *((_DWORD *)v111 + 2);
    v196 = v113;
    std::set<int>::set[abi:ne180100]((uint64_t *)v198, (uint64_t)(v111 + 16));
    if ((int)(-252645135 * ((uint64_t)(*((_QWORD *)&v175 + 1) - v175) >> 4)) < 1)
      goto LABEL_210;
    v114 = 0;
    v115 = -252645135 * ((uint64_t)(*((_QWORD *)&v175 + 1) - v175) >> 4);
    v116 = sqrtf(vaddv_f32(vmul_f32(v5, v5)));
    do
    {
      v117 = v175;
      v118 = CFSTR("Cabinet");
      v174 = 0;
      v173 = 0uLL;
      v186 = &v173;
      LOBYTE(v187) = 0;
      v119 = operator new(8uLL);
      v120 = v117 + 272 * v114;
      *(_QWORD *)&v173 = v119;
      *((_QWORD *)&v173 + 1) = v119;
      v174 = v119 + 1;
      v121 = v118;
      *v119 = v121;
      *((_QWORD *)&v173 + 1) = v119 + 1;
      if ((_QWORD *)v173 == v119 + 1)
        goto LABEL_177;
      v122 = (_QWORD *)(v173 - 8);
      while (*(_QWORD *)(v120 + 128) != v122[1])
      {
        if (++v122 == v119)
          goto LABEL_177;
      }
      if (v169[v114] != 2)
      {
LABEL_177:
        v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

      }
      else
      {
        v123 = *((float *)v177 + v114) < 0.0;
        v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

        if (v123)
          goto LABEL_189;
      }
      if (*((float *)v177 + v114) > 0.0 && v169[v114] == 2)
      {
        v124 = v121;
        v174 = 0;
        v173 = 0uLL;
        v186 = &v173;
        LOBYTE(v187) = 0;
        v125 = operator new(8uLL);
        *(_QWORD *)&v173 = v125;
        *((_QWORD *)&v173 + 1) = v125;
        v174 = v125 + 1;
        v126 = v124;
        *v125 = v126;
        *((_QWORD *)&v173 + 1) = v125 + 1;
        if ((_QWORD *)v173 == v125 + 1)
        {
LABEL_184:
          v128 = vsubq_f32(*(float32x4_t *)(v120 + 16), v170);
          v129 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v128, v128))) < v116;
          v186 = &v173;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

          if (!v129)
            goto LABEL_188;
        }
        else
        {
          v127 = (_QWORD *)(v173 - 8);
          while (*(_QWORD *)(v120 + 128) != v127[1])
          {
            if (++v127 == v125)
              goto LABEL_184;
          }
          v186 = &v173;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

        }
        v130 = vsubq_f32(*(float32x4_t *)(v120 + 32), v170);
        if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v130, v130))) < 1.0)
        {
          OUBox3d::operator=((uint64_t)&v199, (__int128 *)(v117 + 272 * v114));
          v155 = v117 + 272 * v114;
          v156 = *(_QWORD *)(v155 + 224);
          v208 = *(_DWORD *)(v155 + 232);
          v207 = v156;
          if (&v199 != (OUBox3d *)v120)
            std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v209, *(int **)(v117 + 272 * v114 + 240), (int *)(v117 + 272 * v114 + 248));
          goto LABEL_189;
        }
      }
LABEL_188:
      ++v114;
    }
    while (v114 != v115);
    while (1)
    {
LABEL_189:
      v131 = v175;
      v132 = v121;
      v174 = 0;
      v173 = 0uLL;
      v186 = &v173;
      LOBYTE(v187) = 0;
      v133 = operator new(8uLL);
      v134 = (v115 - 1);
      v135 = v131 + 272 * v134;
      *(_QWORD *)&v173 = v133;
      *((_QWORD *)&v173 + 1) = v133;
      v174 = v133 + 1;
      v136 = v132;
      *v133 = v136;
      *((_QWORD *)&v173 + 1) = v133 + 1;
      if ((_QWORD *)v173 == v133 + 1)
        goto LABEL_197;
      v137 = (_QWORD *)(v173 - 8);
      while (*(_QWORD *)(v135 + 128) != v137[1])
      {
        if (++v137 == v133)
          goto LABEL_197;
      }
      if (v169[v134] != 1)
      {
LABEL_197:
        v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

      }
      else
      {
        v138 = *((float *)v177 + v134) > v116;
        v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

        if (v138)
          goto LABEL_210;
      }
      if (*((float *)v177 + v134) >= v116 || v169[v134] != 1)
        goto LABEL_208;
      v139 = v136;
      v174 = 0;
      v173 = 0uLL;
      v186 = &v173;
      LOBYTE(v187) = 0;
      v140 = operator new(8uLL);
      *(_QWORD *)&v173 = v140;
      *((_QWORD *)&v173 + 1) = v140;
      v174 = v140 + 1;
      v141 = v139;
      *v140 = v141;
      *((_QWORD *)&v173 + 1) = v140 + 1;
      if ((_QWORD *)v173 == v140 + 1)
      {
LABEL_204:
        v143 = vsubq_f32(*(float32x4_t *)(v135 + 32), v164);
        v144 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v143, v143))) < v116;
        v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

        if (!v144)
          goto LABEL_208;
      }
      else
      {
        v142 = (_QWORD *)(v173 - 8);
        while (*(_QWORD *)(v135 + 128) != v142[1])
        {
          if (++v142 == v140)
            goto LABEL_204;
        }
        v186 = &v173;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);

      }
      v145 = vsubq_f32(*(float32x4_t *)(v135 + 16), v164);
      if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v145, v145))) < 1.0)
        break;
LABEL_208:
      if (v115-- <= 1)
        goto LABEL_210;
    }
    OUBox3d::operator=((uint64_t)&v188, (__int128 *)(v131 + 272 * v134));
    v157 = v131 + 272 * v134;
    v158 = *(_QWORD *)(v157 + 224);
    v197 = *(_DWORD *)(v157 + 232);
    v196 = v158;
    if (&v188 != (OUBox3d *)v135)
      std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v198, *(int **)(v131 + 272 * v134 + 240), (int *)(v131 + 272 * v134 + 248));
LABEL_210:
    *(_QWORD *)&v147 = v199.var5.var0;
    var1 = v188.var1;
    v162 = v188.var3;
    v172 = 0;
    *((_QWORD *)&v147 + 1) = v199.var5.var2.var0;
    v173 = v147;
    v186 = (__int128 *)v170.i64[0];
    v187 = v164.i64[0];
    OU::intersect((int32x2_t *)&v173, (int32x2_t *)&v186, &v172);
    v148 = v172;
    v171 = 0;
    *(_QWORD *)&v149 = v162;
    *((_QWORD *)&v149 + 1) = var1;
    v173 = v149;
    v186 = (__int128 *)v170.i64[0];
    v187 = v164.i64[0];
    OU::intersect((int32x2_t *)&v173, (int32x2_t *)&v186, &v171);
    v150 = vsub_f32(*(float32x2_t *)&v163, *(float32x2_t *)v170.f32);
    v151 = vadd_f32(v150, v148);
    v152 = v171;
    v153 = v172;
    v154 = vadd_f32(v150, v171);
    *((float32x2_t *)v4 + 4) = v172;
    *((float32x2_t *)v4 + 6) = v151;
    *((float32x2_t *)v4 + 2) = v152;
    *(float32x2_t *)v4 = v154;
    *((float32x2_t *)v4 + 12) = v153;
    *((float32x2_t *)v4 + 14) = v151;
    *((float32x2_t *)v4 + 10) = v152;
    *((float32x2_t *)v4 + 8) = v154;
    std::__tree<int>::destroy((uint64_t)v198, v198[1]);

    if (v194)
      operator delete(v194);
    if (v192)
    {
      v193 = v192;
      operator delete(v192);
    }

    std::__tree<int>::destroy((uint64_t)v209, v209[1]);
    if (v205)
      operator delete(v205);
    if (v203)
    {
      v204 = v203;
      operator delete(v203);
    }

    if (v169)
      operator delete(v169);
    v199.var1 = &v175;
    std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
    v1 = v159;
LABEL_221:
    if (v177)
    {
      v178 = (float *)v177;
      operator delete(v177);
    }
    if (__p)
    {
      v181 = (char *)__p;
      operator delete(__p);
    }
    v199.var1 = &v183;
    std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&v199);
    ++v2;
  }
  while (v2 != v160);
}

void sub_2294D3F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  OU3DKitchenObject::~OU3DKitchenObject((OU3DKitchenObject *)&a55);
  OU3DKitchenObject::~OU3DKitchenObject((OU3DKitchenObject *)&STACK[0x280]);
  if (__p)
    operator delete(__p);
  STACK[0x280] = (unint64_t)&a41;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  STACK[0x280] = (unint64_t)&a50;
  std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::UnifyHeightsAlignObjects(OU3DKitchenObjectMerger *this)
{
  OU3DKitchenObject *begin;
  OU3DKitchenObject *i;
  uint64_t j;
  uint64_t k;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float v13;
  float v14;
  OU3DKitchenObject *v15;
  OU3DKitchenObject *end;
  int v17;
  uint64_t v18;
  float32x4_t *v19;
  uint64_t m;
  uint64_t n;
  uint64_t v22;
  OU3DKitchenObject *v23;
  _BYTE v24[24];
  float v25;

  begin = this->fused_cabinets_.__begin_;
  for (i = this->fused_cabinets_.__end_; begin != i; begin = (OU3DKitchenObject *)((char *)begin + 272))
  {
    if (vabds_f32(*((float *)begin + 2), this->ground_plane_height_) < 0.3)
    {
      for (j = 8; j != 72; j += 16)
        *(float *)((char *)begin + j) = this->ground_plane_height_;
    }
    if (*((float *)begin + 18) > this->ceil_plane_height_)
    {
      for (k = 72; k != 136; k += 16)
        *(float *)((char *)begin + k) = this->ceil_plane_height_;
    }
  }
  v6 = 0xF0F0F0F0F0F0F0F1 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = 0;
    v22 = -252645135 * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4);
    v9 = 272 * v6;
    v10 = 8;
    v11 = 72;
    do
    {
      v23 = this->other_objects_.__begin_;
      v12 = (float32x4_t *)((char *)v23 + 272 * v8);
      v13 = v12->f32[2];
      v14 = v12[4].f32[2];
      v15 = this->fused_cabinets_.__begin_;
      end = this->fused_cabinets_.__end_;
      while (1)
      {
        if (v15 == end)
        {
          v17 = 1;
          goto LABEL_18;
        }
        box3dIou(v12, (float32x4_t *)v15, 0, (uint64_t)v24);
        if (v25 > 0.1 && *((float *)v15 + 18) <= v13)
          break;
        v15 = (OU3DKitchenObject *)((char *)v15 + 272);
      }
      v17 = 0;
LABEL_18:
      v18 = 0;
      while (1)
      {
        if (v7 != v18)
        {
          v19 = (float32x4_t *)((char *)this->other_objects_.__begin_ + v18);
          box3dIou(v12, v19, 0, (uint64_t)v24);
          if (v25 > 0.1 && v19[4].f32[2] <= v13)
            break;
        }
        v18 += 272;
        if (v9 == v18)
        {
          if (v17 && vabds_f32(v13, this->ground_plane_height_) < 0.3)
          {
            for (m = 0; m != 64; m += 16)
              *(float *)((char *)v23 + v10 + m) = this->ground_plane_height_;
          }
          break;
        }
      }
      if (v14 > this->ceil_plane_height_)
      {
        for (n = 0; n != 64; n += 16)
          *(float *)((char *)v23 + v11 + n) = this->ceil_plane_height_;
      }
      ++v8;
      v7 += 272;
      v10 += 272;
      v11 += 272;
    }
    while (v8 != v22);
  }
}

void OU3DKitchenObjectMerger::ComputeGroupIds(OU3DKitchenObjectMerger *this)
{
  OU3DKitchenObject *begin;
  OU3DKitchenObject *end;
  int **v4;
  int *v5;
  uint64_t **v6;
  OU3DKitchenObject *v7;
  OU3DKitchenObject *v8;
  OU3DKitchenObject *i;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  OU3DKitchenObject *v28;
  OU3DKitchenObject *v29;
  _QWORD *v30;
  int v31;
  _QWORD **v32;
  _QWORD *v33;
  _QWORD **v34;
  int v35;
  _QWORD *v36;
  OU3DKitchenObject *v37;
  OU3DKitchenObject *v38;
  _QWORD *v39;
  int v40;
  _QWORD **v41;
  _QWORD *v42;
  _QWORD **v43;
  int v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49[2];
  _OWORD v50[2];
  int v51;
  uint64_t *v52;
  _QWORD *v53[2];
  uint64_t *v54;
  _QWORD *v55[2];

  v55[0] = 0;
  v55[1] = 0;
  v53[1] = 0;
  v54 = (uint64_t *)v55;
  v52 = (uint64_t *)v53;
  v53[0] = 0;
  begin = this->other_objects_.__begin_;
  end = this->other_objects_.__end_;
  if (begin != end)
  {
    v4 = (int **)((char *)begin + 240);
    v5 = (int *)((char *)begin + 248);
    do
    {
      *(_QWORD *)&v50[0] = v4 - 1;
      v6 = std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v54, (int *)v4 - 2, (uint64_t)&std::piecewise_construct, (_DWORD **)v50)+ 5;
      if (v4 != (int **)v6)
        std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v6, *v4, v5);
      v7 = (OU3DKitchenObject *)(v4 + 4);
      v4 += 34;
      v5 += 68;
    }
    while (v7 != end);
  }
  v8 = this->fused_cabinets_.__begin_;
  for (i = this->fused_cabinets_.__end_; v8 != i; v8 = (OU3DKitchenObject *)((char *)v8 + 272))
  {
    *(_QWORD *)&v50[0] = (char *)v8 + 232;
    v10 = std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v54, (int *)v8 + 58, (uint64_t)&std::piecewise_construct, (_DWORD **)v50);
    std::__tree<int>::__assign_unique<int const*>(v10 + 5, 0, 0);
  }
  v11 = v54;
  if (v54 != (uint64_t *)v55)
  {
    do
    {
      v12 = (uint64_t *)v11[5];
      if (v12 != v11 + 6)
      {
        do
        {
          *(_QWORD *)&v50[0] = (char *)v12 + 28;
          v13 = std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v52, (int *)v12 + 7, (uint64_t)&std::piecewise_construct, (_DWORD **)v50);
          std::__tree<int>::__emplace_unique_key_args<int,int const&>(v13 + 5, (int *)v11 + 8, (_DWORD *)v11 + 8);
          v14 = (uint64_t *)v12[1];
          if (v14)
          {
            do
            {
              v15 = v14;
              v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = (uint64_t *)v12[2];
              v16 = *v15 == (_QWORD)v12;
              v12 = v15;
            }
            while (!v16);
          }
          v12 = v15;
        }
        while (v15 != v11 + 6);
      }
      v17 = (uint64_t *)v11[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v11[2];
          v16 = *v18 == (_QWORD)v11;
          v11 = v18;
        }
        while (!v16);
      }
      v11 = v18;
    }
    while (v18 != (uint64_t *)v55);
  }
  v19 = v52;
  if (v52 != (uint64_t *)v53)
  {
    do
    {
      *(_QWORD *)&v50[0] = v19 + 4;
      v20 = std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v54, (int *)v19 + 8, (uint64_t)&std::piecewise_construct, (_DWORD **)v50);
      if (v19 != (uint64_t *)v20)
        std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(v20 + 5, (int *)v19[5], (int *)v19 + 12);
      v21 = (uint64_t *)v19[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v19[2];
          v16 = *v22 == (_QWORD)v19;
          v19 = v22;
        }
        while (!v16);
      }
      v19 = v22;
    }
    while (v22 != (uint64_t *)v53);
  }
  memset(v50, 0, sizeof(v50));
  v51 = 1065353216;
  v23 = v54;
  if (v54 != (uint64_t *)v55)
  {
    v24 = 0;
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v50, (int *)v23 + 8))
      {
        v49[0] = 0;
        v49[1] = 0;
        v48 = (uint64_t *)v49;
        v25 = v48;
        if (v48 != (uint64_t *)v49)
        {
          do
          {
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v50, (int *)v25 + 7, (_DWORD *)v25 + 7);
            v26 = (uint64_t *)v25[1];
            if (v26)
            {
              do
              {
                v27 = v26;
                v26 = (uint64_t *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                v27 = (uint64_t *)v25[2];
                v16 = *v27 == (_QWORD)v25;
                v25 = v27;
              }
              while (!v16);
            }
            v25 = v27;
          }
          while (v27 != (uint64_t *)v49);
        }
        v28 = this->fused_cabinets_.__begin_;
        v29 = this->fused_cabinets_.__end_;
        while (v28 != v29)
        {
          v30 = v49[0];
          if (v49[0])
          {
            v31 = *((_DWORD *)v28 + 58);
            v32 = v49;
            do
            {
              v33 = v30;
              v34 = v32;
              v35 = *((_DWORD *)v30 + 7);
              v36 = v30 + 1;
              if (v35 >= v31)
              {
                v36 = v33;
                v32 = (_QWORD **)v33;
              }
              v30 = (_QWORD *)*v36;
            }
            while (v30);
            if (v32 != v49)
            {
              if (v35 < v31)
                v33 = v34;
              if (v31 >= *((_DWORD *)v33 + 7))
              {
                *((_DWORD *)v28 + 57) = v24;
                if ((uint64_t **)((char *)v28 + 240) != &v48)
                  std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)v28 + 30, (int *)v48, (int *)v49);
                std::__tree<int>::__erase_unique<int>((uint64_t)v28 + 240, (int *)v28 + 58);
              }
            }
          }
          v28 = (OU3DKitchenObject *)((char *)v28 + 272);
        }
        v37 = this->other_objects_.__begin_;
        v38 = this->other_objects_.__end_;
        while (v37 != v38)
        {
          v39 = v49[0];
          if (v49[0])
          {
            v40 = *((_DWORD *)v37 + 58);
            v41 = v49;
            do
            {
              v42 = v39;
              v43 = v41;
              v44 = *((_DWORD *)v39 + 7);
              v45 = v39 + 1;
              if (v44 >= v40)
              {
                v45 = v42;
                v41 = (_QWORD **)v42;
              }
              v39 = (_QWORD *)*v45;
            }
            while (v39);
            if (v41 != v49)
            {
              if (v44 < v40)
                v42 = v43;
              if (v40 >= *((_DWORD *)v42 + 7))
              {
                *((_DWORD *)v37 + 57) = v24;
                if ((uint64_t **)((char *)v37 + 240) != &v48)
                  std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)v37 + 30, (int *)v48, (int *)v49);
                std::__tree<int>::__erase_unique<int>((uint64_t)v37 + 240, (int *)v37 + 58);
              }
            }
          }
          v37 = (OU3DKitchenObject *)((char *)v37 + 272);
        }
        ++v24;
        std::__tree<int>::destroy((uint64_t)&v48, v49[0]);
      }
      v46 = (uint64_t *)v23[1];
      if (v46)
      {
        do
        {
          v47 = v46;
          v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          v47 = (uint64_t *)v23[2];
          v16 = *v47 == (_QWORD)v23;
          v23 = v47;
        }
        while (!v16);
      }
      v23 = v47;
    }
    while (v47 != (uint64_t *)v55);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v50);
  std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy((uint64_t)&v52, v53[0]);
  std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy((uint64_t)&v54, v55[0]);
}

void sub_2294D4840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23)
{
  std::__tree<int>::destroy((uint64_t)&a10, a11);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a13);
  std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void OU3DKitchenObjectMerger::AssignUUIDForFusedObjects(OU3DKitchenObjectMerger *this)
{
  OU3DKitchenObject *begin;
  OU3DKitchenObject *i;
  uint64_t v3;
  void *v4;

  begin = this->fused_cabinets_.__begin_;
  for (i = this->fused_cabinets_.__end_; begin != i; begin = (OU3DKitchenObject *)((char *)begin + 272))
  {
    objc_msgSend(MEMORY[0x24BDD1880], "UUID");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)*((_QWORD *)begin + 18);
    *((_QWORD *)begin + 18) = v3;

  }
}

void OU3DKitchenObjectMerger::SetDetectionAndPointCloud(uint64_t a1, const OUBox3d **a2, const OUBox3d **a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  const OUBox3d *v9;
  const OUBox3d *v10;
  int v11;
  char v12;
  __CFString *v13;
  _QWORD *v14;
  __CFString *v15;
  _QWORD *v16;
  const OUBox3d *v17;
  const OUBox3d *v18;
  char v19;
  __CFString *v20;
  _QWORD *v21;
  __CFString *v22;
  _QWORD *v23;
  uint64_t *v24;
  const OUBox3d **v25;
  uint64_t *v26;
  _QWORD **v27;
  _QWORD *v28[2];
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD **v32;
  _QWORD *v33[2];
  void **v34;
  char v35;
  __int128 v36[8];
  id v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  void *__p;
  id v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  v25 = a3;
  v46 = *MEMORY[0x24BDAC8D0];
  OU3DKitchenObjectMerger::Reset((OU3DKitchenObjectMerger *)a1);
  *(float *)(a1 + 96) = OU3DKitchenObjectMerger::ComputePlaneHeight(v7, a4);
  *(float *)(a1 + 100) = OU3DKitchenObjectMerger::ComputePlaneHeight(v8, a4);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      if (objc_msgSend(v9[1].var6.var0, "isEqualToString:", CFSTR("online"), v25))
      {
        v12 = vabds_f32(v9->var2, *(float *)(a1 + 96)) < 0.3;
        v33[0] = 0;
        v33[1] = 0;
        v32 = v33;
        OU3DKitchenObject::OU3DKitchenObject((uint64_t)v36, v9, v12, -1, v11, (uint64_t)&v32);
        std::__tree<int>::destroy((uint64_t)&v32, v33[0]);
        v13 = CFSTR("Cabinet");
        v30 = 0;
        v31 = 0;
        v29 = 0;
        v34 = (void **)&v29;
        v35 = 0;
        v14 = operator new(8uLL);
        v29 = v14;
        v30 = v14;
        v31 = v14 + 1;
        v15 = v13;
        *v14 = v15;
        v30 = v14 + 1;
        if (v29 == v14 + 1)
        {
LABEL_8:
          v34 = (void **)&v29;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v34);

          std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)(a1 + 48), v36);
        }
        else
        {
          v16 = v29 - 1;
          while (v9[1].var5.var0 != (float *)v16[1])
          {
            if (++v16 == v14)
              goto LABEL_8;
          }
          v34 = (void **)&v29;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v34);

          std::vector<OU3DKitchenObject>::push_back[abi:ne180100]((uint64_t *)a1, v36);
        }
        std::__tree<int>::destroy((uint64_t)&v44, v45);

        if (__p)
          operator delete(__p);
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }

        ++v11;
      }
      v9 = (const OUBox3d *)((char *)v9 + 224);
    }
    while (v9 != v10);
  }
  v17 = *v25;
  v18 = v25[1];
  if (*v25 != v18)
  {
    v26 = (uint64_t *)(a1 + 24);
    do
    {
      if (objc_msgSend(v17[1].var6.var0, "isEqualToString:", CFSTR("offline"), v26))
      {
        v19 = vabds_f32(v17->var2, *(float *)(a1 + 96)) < 0.3;
        v28[0] = 0;
        v28[1] = 0;
        v27 = v28;
        OU3DKitchenObject::OU3DKitchenObject((uint64_t)v36, v17, v19, -1, v11, (uint64_t)&v27);
        std::__tree<int>::destroy((uint64_t)&v27, v28[0]);
        v20 = CFSTR("Cabinet");
        v30 = 0;
        v31 = 0;
        v29 = 0;
        v34 = (void **)&v29;
        v35 = 0;
        v21 = operator new(8uLL);
        v29 = v21;
        v30 = v21;
        v31 = v21 + 1;
        v22 = v20;
        *v21 = v22;
        v30 = v21 + 1;
        if (v29 == v21 + 1)
        {
LABEL_25:
          v34 = (void **)&v29;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v34);

          v24 = (uint64_t *)(a1 + 48);
        }
        else
        {
          v23 = v29 - 1;
          while (v17[1].var5.var0 != (float *)v23[1])
          {
            if (++v23 == v21)
              goto LABEL_25;
          }
          v34 = (void **)&v29;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v34);

          v24 = v26;
        }
        std::vector<OU3DKitchenObject>::push_back[abi:ne180100](v24, v36);
        std::__tree<int>::destroy((uint64_t)&v44, v45);

        if (__p)
          operator delete(__p);
        if (v40)
        {
          v41 = v40;
          operator delete(v40);
        }

        ++v11;
      }
      v17 = (const OUBox3d *)((char *)v17 + 224);
    }
    while (v17 != v18);
  }
}

void sub_2294D4CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  OU3DKitchenObject::~OU3DKitchenObject((OU3DKitchenObject *)va);
  _Unwind_Resume(a1);
}

uint64_t OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo::~SortInfo(uint64_t a1)
{
  void *v2;
  void *v3;

  std::__tree<int>::destroy(a1 + 256, *(_QWORD **)(a1 + 264));

  v2 = *(void **)(a1 + 200);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(_QWORD *)(a1 + 184) = v3;
    operator delete(v3);
  }

  return a1;
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

void **std::vector<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::~vector[abi:ne180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 304;
        std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::destroy[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void OU3DKitchenObjectMerger::GetOutput(OU3DKitchenObjectMerger *this@<X0>, uint64_t *a2@<X8>)
{
  OU3DKitchenObject *begin;
  OU3DKitchenObject *end;
  OUBox3d *v6;
  OU3DKitchenObject *v7;
  OU3DKitchenObject *v8;
  OUBox3d *v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<OUBox3d>::reserve(a2, 0xF0F0F0F0F0F0F0F1 * ((this->fused_cabinets_.__end_ - this->fused_cabinets_.__begin_) >> 4)- 0xF0F0F0F0F0F0F0FLL * ((this->other_objects_.__end_ - this->other_objects_.__begin_) >> 4));
  begin = this->other_objects_.__begin_;
  end = this->other_objects_.__end_;
  if (begin != end)
  {
    v6 = (OUBox3d *)a2[1];
    do
    {
      if ((unint64_t)v6 >= a2[2])
      {
        v6 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(a2, (const OUBox3d *)begin);
      }
      else
      {
        OUBox3d::OUBox3d(v6, (const OUBox3d *)begin);
        v6 = (OUBox3d *)((char *)v6 + 224);
        a2[1] = (uint64_t)v6;
      }
      a2[1] = (uint64_t)v6;
      begin = (OU3DKitchenObject *)((char *)begin + 272);
    }
    while (begin != end);
  }
  v7 = this->fused_cabinets_.__begin_;
  v8 = this->fused_cabinets_.__end_;
  if (v7 != v8)
  {
    v9 = (OUBox3d *)a2[1];
    do
    {
      if ((unint64_t)v9 >= a2[2])
      {
        v9 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(a2, (const OUBox3d *)v7);
      }
      else
      {
        OUBox3d::OUBox3d(v9, (const OUBox3d *)v7);
        v9 = (OUBox3d *)((char *)v9 + 224);
        a2[1] = (uint64_t)v9;
      }
      a2[1] = (uint64_t)v9;
      v7 = (OU3DKitchenObject *)((char *)v7 + 272);
    }
    while (v7 != v8);
  }
}

void sub_2294D4FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OUBox3d>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5) < a2)
  {
    if (a2 >= 0x124924924924925)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 224 * v6;
    std::vector<OUBox3d>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_2294D50B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *`anonymous namespace'::Dfs(uint64_t *result, int a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t **v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  int v17;

  v17 = a2;
  if (a3)
  {
    v4 = (uint64_t)result;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>(a3, &v17, &v17);
    result = std::map<int,std::set<int>>::at(v4, &v17);
    v5 = result + 1;
    v6 = (_QWORD *)*result;
    if ((uint64_t *)*result != result + 1)
    {
      v7 = a3 + 1;
      do
      {
        v8 = *v7;
        v9 = *((unsigned int *)v6 + 7);
        if (!*v7)
          goto LABEL_14;
        v10 = a3 + 1;
        do
        {
          v11 = *((_DWORD *)v8 + 7);
          v12 = v11 < (int)v9;
          if (v11 >= (int)v9)
            v13 = v8;
          else
            v13 = v8 + 1;
          if (!v12)
            v10 = (uint64_t **)v8;
          v8 = (uint64_t *)*v13;
        }
        while (*v13);
        if (v10 == v7 || (int)v9 < *((_DWORD *)v10 + 7))
LABEL_14:
        v14 = (uint64_t *)v6[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v6[2];
            v16 = *v15 == (_QWORD)v6;
            v6 = v15;
          }
          while (!v16);
        }
        v6 = v15;
      }
      while (v15 != v5);
    }
  }
  return result;
}

void std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  std::__tree<int>::destroy(a1 + 240, *(_QWORD **)(a1 + 248));

  v2 = *(void **)(a1 + 184);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }

}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2294D52DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

_QWORD *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2294D5390(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void OUBox3d::OUBox3d(OUBox3d *this, const OUBox3d *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t *v10;

  v4 = *(_OWORD *)&a2->var1;
  v5 = *(_OWORD *)&a2->var3;
  v6 = *(_OWORD *)&a2->var5.var2.var0;
  *(_OWORD *)&this->var5.var0 = *(_OWORD *)&a2->var5.var0;
  *(_OWORD *)&this->var5.var2.var0 = v6;
  *(_OWORD *)&this->var1 = v4;
  *(_OWORD *)&this->var3 = v5;
  v7 = *(_OWORD *)&a2->var6.var1;
  v8 = *(_OWORD *)&a2->var7;
  v9 = *(_OWORD *)&a2[1].var3;
  *(_OWORD *)&this[1].var1 = *(_OWORD *)&a2[1].var1;
  *(_OWORD *)&this[1].var3 = v9;
  *(_OWORD *)&this->var6.var1 = v7;
  *(_OWORD *)&this->var7 = v8;
  this[1].var5.var0 = a2[1].var5.var0;
  LODWORD(this[1].var5.var1) = a2[1].var5.var1;
  this[1].var5.var2.var0 = a2[1].var5.var2.var0;
  v10 = a2[1].var6.var0;
  this[1].var6.var1 = 0;
  this[1].var6.var0 = v10;
  this[1].var6.var2.var0 = 0;
  this[1].var7 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[1].var6.var1, (const void *)a2[1].var6.var1, a2[1].var6.var2.var0, (uint64_t)(a2[1].var6.var2.var0 - a2[1].var6.var1) >> 2);
  std::vector<BOOL>::vector(&this[1].var8, (uint64_t)&a2[1].var8);
  this[2].var3 = a2[2].var3;
  LOWORD(this[2].var4) = a2[2].var4;
}

void sub_2294D54D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 168) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2294D5570(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = _ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void std::vector<BOOL>::__move_assign(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  if (v4)
  {
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t std::vector<OU3DKitchenObject>::__push_back_slow_path<OU3DKitchenObject const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  OUBox3d *v14;
  id *p_var7;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x78787878787878)
    v9 = 0xF0F0F0F0F0F0F0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OU3DKitchenObject>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (OUBox3d *)&v10[272 * v4];
  v16 = &v10[272 * v9];
  std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v14, a2);
  p_var7 = &v14[2].var7;
  std::vector<OU3DKitchenObject>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2294D58D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OU3DKitchenObject>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

OUBox3d *std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(OUBox3d *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  OUBox3d::OUBox3d(a1, (const OUBox3d *)a2);
  v4 = *(_QWORD *)(a2 + 224);
  *(_DWORD *)(v5 + 232) = *(_DWORD *)(a2 + 232);
  *(_QWORD *)(v5 + 224) = v4;
  std::set<int>::set[abi:ne180100]((uint64_t *)(v5 + 240), a2 + 240);
  return a1;
}

void sub_2294D5930(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 184);
  if (v3)
    operator delete(v3);
  std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject const&,OU3DKitchenObject*>(v1);

  _Unwind_Resume(a1);
}

uint64_t *std::vector<OU3DKitchenObject>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v5 = (__int128 *)*result;
  v4 = (__int128 *)result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 272;
    v4 -= 17;
    result = (uint64_t *)std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject,OU3DKitchenObject*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OU3DKitchenObject>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(272 * a2);
}

uint64_t std::construct_at[abi:ne180100]<OU3DKitchenObject,OU3DKitchenObject,OU3DKitchenObject*>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(result + 32) = a2[2];
  *(_OWORD *)(result + 48) = v4;
  *(_OWORD *)result = v2;
  *(_OWORD *)(result + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(result + 96) = a2[6];
  *(_OWORD *)(result + 112) = v7;
  *(_OWORD *)(result + 64) = v5;
  *(_OWORD *)(result + 80) = v6;
  v8 = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = 0;
  *(_QWORD *)(result + 128) = v8;
  *(_DWORD *)(result + 136) = *((_DWORD *)a2 + 34);
  v9 = a2[9];
  a2[9] = 0u;
  *(_OWORD *)(result + 144) = v9;
  *(_QWORD *)(result + 160) = 0;
  *(_OWORD *)(result + 168) = 0u;
  *(_OWORD *)(result + 160) = a2[10];
  *(_QWORD *)(result + 176) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = 0;
  a2[10] = 0u;
  v10 = *((_QWORD *)a2 + 24);
  *(_QWORD *)(result + 184) = *((_QWORD *)a2 + 23);
  *(_QWORD *)(result + 192) = v10;
  *(_QWORD *)(result + 200) = *((_QWORD *)a2 + 25);
  *(__int128 *)((char *)a2 + 184) = 0u;
  v11 = *((_QWORD *)a2 + 26);
  *(__int128 *)((char *)a2 + 200) = 0u;
  *(_QWORD *)(result + 208) = v11;
  *(_WORD *)(result + 216) = *((_WORD *)a2 + 108);
  v12 = *((_QWORD *)a2 + 28);
  *(_DWORD *)(result + 232) = *((_DWORD *)a2 + 58);
  *(_QWORD *)(result + 224) = v12;
  *(_QWORD *)(result + 240) = *((_QWORD *)a2 + 30);
  v13 = (_QWORD *)a2 + 31;
  v14 = *((_QWORD *)a2 + 31);
  *(_QWORD *)(result + 248) = v14;
  v15 = result + 248;
  v16 = *((_QWORD *)a2 + 32);
  *(_QWORD *)(result + 256) = v16;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    *((_QWORD *)a2 + 30) = v13;
    *v13 = 0;
    *((_QWORD *)a2 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(result + 240) = v15;
  }
  return result;
}

uint64_t std::__split_buffer<OU3DKitchenObject>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 272;
    std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(i - 272);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::set<int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_2294D5BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(v5, v6, v4 + 7, v4 + 7);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<int>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<int>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<int>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<int>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<int>::destroy(a1, *a2);
    std::__tree<int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::vector<OU3DKitchenObject>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 272;
        std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<OU3DKitchenObject>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 272;
        std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t OU3DKitchenObject::OU3DKitchenObject(uint64_t a1, const OUBox3d *a2, char a3, int a4, int a5, uint64_t a6)
{
  uint64_t v11;

  OUBox3d::OUBox3d((OUBox3d *)a1, a2);
  *(_BYTE *)(v11 + 224) = a3;
  *(_DWORD *)(a1 + 228) = a4;
  *(_DWORD *)(a1 + 232) = a5;
  std::set<int>::set[abi:ne180100]((uint64_t *)(v11 + 240), a6);
  return a1;
}

void sub_2294D61C4(_Unwind_Exception *a1)
{
  OUBox3d *v1;

  OUBox3d::~OUBox3d(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::construct[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)result = *(_DWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(result + 64) = v4;
  *(_OWORD *)(result + 16) = v2;
  *(_OWORD *)(result + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(result + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(result + 128) = v7;
  *(_OWORD *)(result + 80) = v5;
  *(_OWORD *)(result + 96) = v6;
  v8 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(result + 144) = v8;
  *(_DWORD *)(result + 152) = *(_DWORD *)(a2 + 152);
  v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(result + 160) = v9;
  *(_QWORD *)(result + 176) = 0;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  v10 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(result + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(result + 208) = v10;
  *(_QWORD *)(result + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)(a2 + 200) = 0u;
  v11 = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a2 + 216) = 0u;
  *(_QWORD *)(result + 224) = v11;
  *(_WORD *)(result + 232) = *(_WORD *)(a2 + 232);
  v12 = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(result + 248) = *(_DWORD *)(a2 + 248);
  *(_QWORD *)(result + 240) = v12;
  *(_QWORD *)(result + 256) = *(_QWORD *)(a2 + 256);
  v13 = result + 264;
  v14 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(result + 264) = v14;
  v15 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(result + 272) = v15;
  if (v15)
  {
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(a2 + 256) = a2 + 264;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 272) = 0;
  }
  else
  {
    *(_QWORD *)(result + 256) = v13;
  }
  *(_DWORD *)(result + 288) = *(_DWORD *)(a2 + 288);
  return result;
}

void std::allocator_traits<std::allocator<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo>>::destroy[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo,void,void>(uint64_t a1)
{
  void *v2;
  void *v3;

  std::__tree<int>::destroy(a1 + 256, *(_QWORD **)(a1 + 264));

  v2 = *(void **)(a1 + 200);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(_QWORD *)(a1 + 184) = v3;
    operator delete(v3);
  }

}

void std::__introsort<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,false>(unint64_t a1, int *a2, uint64_t a3, char a4)
{
  float *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  float v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  int *v30;
  float v31;
  _DWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  id v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  BOOL v70;
  BOOL v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  void *v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  float v86;
  unint64_t v87;
  int *v88;
  float v89;
  _DWORD *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  id v112;
  void *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  void *v117;
  void *v118;
  void *v119;
  id v120;
  void *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  int *v128;
  int *v129;
  float *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  void *v139;
  __int128 v140;
  void *v141;
  void *v142;
  uint64_t v143;
  _QWORD *v144;
  float v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  void *v156;
  __n128 *v157;
  unint64_t v158;
  void *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  unint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  id v170;
  void *v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  void *v177;
  _QWORD *v178;
  void *v179;
  void **v180;
  void *v181;
  id v182;
  void *v183;
  _QWORD *v184;
  unint64_t *v185;
  uint64_t v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  int64_t v191;
  int64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  void *v203;
  __int128 v204;
  void *v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  float v210;
  unint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  float v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  id v236;
  void *v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  void *v241;
  void *v242;
  void *v243;
  id v244;
  void *v245;
  uint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  __int128 v252;
  __int128 v253;
  void *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  void *v270;
  uint64_t v271;
  void *v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  void *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  _OWORD *v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  int *v287;
  uint64_t v288;
  void *v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  _QWORD *v303;
  int *v304;
  _QWORD *v305;
  uint64_t v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  void *v325;
  __int128 v326;
  void *v327;
  uint64_t v328;
  _QWORD *v329;
  float v330;
  uint64_t v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  uint64_t v338;
  void *v339;
  uint64_t v340;
  void *v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  void *v345;
  uint64_t v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  id v353;
  void *v354;
  uint64_t v355;
  void *v356;
  uint64_t v357;
  void *v358;
  void *v359;
  void *v360;
  id v361;
  void *v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  void *v375;
  __int128 v376;
  void *v377;
  void *v378;
  uint64_t v379;
  _QWORD *v380;
  float v381;
  unint64_t v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  void *v388;
  uint64_t v389;
  void *v390;
  uint64_t v391;
  void *v392;
  uint64_t v393;
  void *v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  id v401;
  void *v402;
  uint64_t v403;
  void *v404;
  uint64_t v405;
  void *v406;
  void *v407;
  void *v408;
  id v409;
  void *v410;
  uint64_t v411;
  unint64_t v412;
  _QWORD *v413;
  uint64_t v414;
  _QWORD *v415;
  unint64_t v416;
  _QWORD *v417;
  uint64_t *v418;
  unint64_t v419;
  unint64_t v420;
  __int128 *v421;
  int *v422;
  int *v424;
  int64_t v425;
  uint64_t v426;
  int64_t v428;
  int64_t v429;
  int v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  uint64_t v439;
  int v440;
  __int128 v441;
  void *v442[2];
  uint64_t v443;
  void *v444;
  __int128 v445;
  uint64_t v446;
  __int16 v447;
  uint64_t v448;
  int v449;
  _QWORD **v450;
  _QWORD *v451;
  uint64_t v452;
  int v453;
  float v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  id v463;
  int v464;
  __int128 v465;
  void *v466[2];
  uint64_t v467;
  void *__p;
  __int128 v469;
  id v470;
  __int16 v471;
  uint64_t v472;
  int v473;
  _QWORD *v474;
  _QWORD *v475;
  uint64_t v476;
  int v477;
  uint64_t v478;

  v478 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v6 = (float *)a2;
  v424 = a2 - 76;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)v6 - v7;
    v9 = 0x86BCA1AF286BCA1BLL * ((uint64_t)((uint64_t)v6 - v7) >> 4);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(float *)v424 < *(float *)a1)
        {
          v128 = (int *)a1;
          v129 = a2 - 76;
          goto LABEL_82;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, (int *)(a1 + 304), v424);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, (int *)(a1 + 304), (int *)(a1 + 608), v424);
        return;
      case 5:
        v130 = (float *)(a1 + 608);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, (int *)(a1 + 304), (int *)(a1 + 608), (int *)(a1 + 912));
        if (*(float *)v424 < *(float *)(a1 + 912))
        {
          std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 912), v424);
          if (*(float *)(a1 + 912) < *v130)
          {
            std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 608), (int *)(a1 + 912));
            if (*v130 < *(float *)(a1 + 304))
            {
              std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 304), (int *)(a1 + 608));
              if (*(float *)(a1 + 304) < *(float *)a1)
              {
                v128 = (int *)a1;
                v129 = (int *)(a1 + 304);
LABEL_82:
                std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(v128, v129);
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 7295)
        {
          if ((a4 & 1) != 0)
          {
            if ((float *)a1 != v6)
            {
              v131 = a1 + 304;
              if ((int *)(a1 + 304) != a2)
              {
                v132 = 0;
                v133 = a1;
                do
                {
                  v134 = v131;
                  if (*(float *)(v133 + 304) < *(float *)v133)
                  {
                    v454 = *(float *)(v133 + 304);
                    v135 = *(_OWORD *)(v133 + 400);
                    v459 = *(_OWORD *)(v133 + 384);
                    v460 = v135;
                    v136 = *(_OWORD *)(v133 + 432);
                    v461 = *(_OWORD *)(v133 + 416);
                    v462 = v136;
                    v137 = *(_OWORD *)(v133 + 336);
                    v455 = *(_OWORD *)(v133 + 320);
                    v456 = v137;
                    v138 = *(_OWORD *)(v133 + 368);
                    v457 = *(_OWORD *)(v133 + 352);
                    v458 = v138;
                    v139 = *(void **)(v133 + 448);
                    *(_QWORD *)(v133 + 448) = 0;
                    v463 = v139;
                    v464 = *(_DWORD *)(v133 + 456);
                    v140 = *(_OWORD *)(v133 + 480);
                    v465 = *(_OWORD *)(v133 + 464);
                    *(_OWORD *)v466 = v140;
                    *(_OWORD *)(v133 + 464) = 0u;
                    *(_OWORD *)(v133 + 480) = 0u;
                    v141 = *(void **)(v133 + 504);
                    v467 = *(_QWORD *)(v133 + 496);
                    __p = v141;
                    v469 = *(_OWORD *)(v133 + 512);
                    *(_OWORD *)(v133 + 496) = 0u;
                    *(_OWORD *)(v133 + 512) = 0u;
                    v142 = *(void **)(v133 + 528);
                    *(_QWORD *)(v133 + 528) = 0;
                    v470 = v142;
                    v471 = *(_WORD *)(v133 + 536);
                    v143 = *(_QWORD *)(v133 + 544);
                    v473 = *(_DWORD *)(v133 + 552);
                    v472 = v143;
                    v144 = *(_QWORD **)(v133 + 568);
                    v474 = *(_QWORD **)(v133 + 560);
                    v475 = v144;
                    v476 = *(_QWORD *)(v133 + 576);
                    if (v476)
                    {
                      v144[2] = &v475;
                      *(_QWORD *)(v133 + 560) = v133 + 568;
                      *(_QWORD *)(v133 + 568) = 0;
                      *(_QWORD *)(v133 + 576) = 0;
                    }
                    else
                    {
                      v474 = &v475;
                    }
                    v477 = *(_DWORD *)(v133 + 592);
                    v145 = *(float *)v133;
                    v146 = v132;
                    while (1)
                    {
                      v147 = v146;
                      v148 = a1 + v146;
                      *(float *)(v148 + 304) = v145;
                      v149 = *(_OWORD *)(a1 + v146 + 96);
                      *(_OWORD *)(v148 + 384) = *(_OWORD *)(a1 + v146 + 80);
                      *(_OWORD *)(v148 + 400) = v149;
                      v150 = *(_OWORD *)(a1 + v146 + 128);
                      *(_OWORD *)(v148 + 416) = *(_OWORD *)(a1 + v146 + 112);
                      *(_OWORD *)(v148 + 432) = v150;
                      v151 = *(_OWORD *)(a1 + v146 + 32);
                      *(_OWORD *)(v148 + 320) = *(_OWORD *)(a1 + v146 + 16);
                      *(_OWORD *)(v148 + 336) = v151;
                      v152 = *(_OWORD *)(a1 + v146 + 64);
                      *(_OWORD *)(v148 + 352) = *(_OWORD *)(a1 + v146 + 48);
                      *(_OWORD *)(v148 + 368) = v152;
                      v153 = *(_QWORD *)(a1 + v146 + 144);
                      *(_QWORD *)(v148 + 144) = 0;
                      v154 = *(void **)(v148 + 448);
                      *(_QWORD *)(v148 + 448) = v153;

                      *(_DWORD *)(v148 + 456) = *(_DWORD *)(v148 + 152);
                      v155 = *(_QWORD *)(v148 + 160);
                      *(_QWORD *)(v148 + 160) = 0;
                      v156 = *(void **)(v148 + 464);
                      *(_QWORD *)(v148 + 464) = v155;

                      v157 = (__n128 *)(a1 + v147);
                      v158 = *(_QWORD *)(a1 + v147 + 168);
                      v157[10].n128_u64[1] = 0;
                      v159 = *(void **)(a1 + v147 + 472);
                      v157[29].n128_u64[1] = v158;

                      std::vector<float>::__move_assign((uint64_t)&v157[30], v157 + 11);
                      std::vector<BOOL>::__move_assign((uint64_t)&v157[31].n128_i64[1], &v157[12].n128_u64[1]);
                      v160 = *(_QWORD *)(a1 + v147 + 224);
                      v157[14].n128_u64[0] = 0;
                      v161 = *(void **)(a1 + v147 + 528);
                      v157[33].n128_u64[0] = v160;

                      v162 = a1 + v147;
                      *(_WORD *)(v162 + 536) = *(_WORD *)(a1 + v147 + 232);
                      *(_QWORD *)(v162 + 544) = *(_QWORD *)(a1 + v147 + 240);
                      *(_DWORD *)(v162 + 552) = *(_DWORD *)(a1 + v147 + 248);
                      std::__tree<int>::__move_assign(a1 + v147 + 560, (_QWORD *)(a1 + v147 + 256));
                      *(_DWORD *)(v162 + 592) = *(_DWORD *)(v162 + 288);
                      if (!v147)
                        break;
                      v146 = v147 - 304;
                      v145 = *(float *)(v147 - 304 + a1);
                      if (v454 >= v145)
                      {
                        v163 = a1 + v147;
                        goto LABEL_103;
                      }
                    }
                    v163 = a1;
LABEL_103:
                    *(float *)v163 = v454;
                    v164 = v455;
                    v165 = v456;
                    v166 = v458;
                    *(_OWORD *)(v162 + 48) = v457;
                    *(_OWORD *)(v162 + 64) = v166;
                    *(_OWORD *)(v162 + 16) = v164;
                    *(_OWORD *)(v162 + 32) = v165;
                    v167 = v459;
                    v168 = v460;
                    v169 = v462;
                    *(_OWORD *)(v162 + 112) = v461;
                    *(_OWORD *)(v162 + 128) = v169;
                    *(_OWORD *)(v162 + 80) = v167;
                    *(_OWORD *)(v162 + 96) = v168;
                    v170 = v463;
                    v463 = 0;
                    v171 = *(void **)(v163 + 144);
                    *(_QWORD *)(v163 + 144) = v170;

                    *(_DWORD *)(v163 + 152) = v464;
                    v172 = v465;
                    *(_QWORD *)&v465 = 0;
                    v173 = *(void **)(v163 + 160);
                    *(_QWORD *)(v163 + 160) = v172;

                    v174 = *((_QWORD *)&v465 + 1);
                    *((_QWORD *)&v465 + 1) = 0;
                    v175 = *(void **)(v163 + 168);
                    *(_QWORD *)(v163 + 168) = v174;

                    v176 = a1 + v147;
                    v179 = *(void **)(v176 + 176);
                    v178 = (_QWORD *)(v176 + 176);
                    v177 = v179;
                    if (v179)
                    {
                      *(_QWORD *)(v163 + 184) = v177;
                      operator delete(v177);
                      *v178 = 0;
                      v178[1] = 0;
                      v178[2] = 0;
                    }
                    v180 = (void **)(v178 + 3);
                    *v178 = v466[0];
                    *(void **)(v163 + 184) = v466[1];
                    *(_QWORD *)(v163 + 192) = v467;
                    v466[0] = 0;
                    v466[1] = 0;
                    v467 = 0;
                    v181 = (void *)v178[3];
                    if (v181)
                    {
                      operator delete(v181);
                      *v180 = 0;
                      v178[4] = 0;
                      v178[5] = 0;
                    }
                    *v180 = __p;
                    *(_OWORD *)(v163 + 208) = v469;
                    __p = 0;
                    v469 = 0uLL;
                    v182 = v470;
                    v470 = 0;
                    v183 = *(void **)(v163 + 224);
                    *(_QWORD *)(v163 + 224) = v182;

                    v184 = v178 + 8;
                    v185 = v178 + 10;
                    *(_WORD *)(v163 + 232) = v471;
                    v186 = v472;
                    *((_DWORD *)v184 + 2) = v473;
                    *v184 = v186;
                    v187 = v163 + 264;
                    std::__tree<int>::destroy((uint64_t)v185, *(_QWORD **)(v163 + 264));
                    *v185 = (unint64_t)v474;
                    v188 = v475;
                    *(_QWORD *)(v163 + 264) = v475;
                    v189 = v476;
                    *(_QWORD *)(v163 + 272) = v476;
                    if (v189)
                    {
                      v190 = 0;
                      v188[2] = v187;
                      v474 = &v475;
                      v475 = 0;
                      v476 = 0;
                    }
                    else
                    {
                      *v185 = v187;
                      v190 = v475;
                    }
                    *(_DWORD *)(v163 + 288) = v477;
                    std::__tree<int>::destroy((uint64_t)&v474, v190);

                    if (__p)
                      operator delete(__p);
                    if (v466[0])
                    {
                      v466[1] = v466[0];
                      operator delete(v466[0]);
                    }

                  }
                  v131 = v134 + 304;
                  v132 += 304;
                  v133 = v134;
                }
                while ((int *)(v134 + 304) != a2);
              }
            }
          }
          else if ((float *)a1 != v6)
          {
            v368 = a1 + 304;
            if ((int *)(a1 + 304) != a2)
            {
              v369 = a1 - 304;
              do
              {
                v370 = v368;
                if (*(float *)(a1 + 304) < *(float *)a1)
                {
                  v454 = *(float *)(a1 + 304);
                  v371 = *(_OWORD *)(a1 + 400);
                  v459 = *(_OWORD *)(a1 + 384);
                  v460 = v371;
                  v372 = *(_OWORD *)(a1 + 432);
                  v461 = *(_OWORD *)(a1 + 416);
                  v462 = v372;
                  v373 = *(_OWORD *)(a1 + 336);
                  v455 = *(_OWORD *)(a1 + 320);
                  v456 = v373;
                  v374 = *(_OWORD *)(a1 + 368);
                  v457 = *(_OWORD *)(a1 + 352);
                  v458 = v374;
                  v375 = *(void **)(a1 + 448);
                  *(_QWORD *)(a1 + 448) = 0;
                  v463 = v375;
                  v464 = *(_DWORD *)(a1 + 456);
                  v376 = *(_OWORD *)(a1 + 480);
                  v465 = *(_OWORD *)(a1 + 464);
                  *(_OWORD *)v466 = v376;
                  *(_OWORD *)(a1 + 464) = 0u;
                  *(_OWORD *)(a1 + 480) = 0u;
                  v377 = *(void **)(a1 + 504);
                  v467 = *(_QWORD *)(a1 + 496);
                  __p = v377;
                  v469 = *(_OWORD *)(a1 + 512);
                  *(_OWORD *)(a1 + 496) = 0u;
                  *(_OWORD *)(a1 + 512) = 0u;
                  v378 = *(void **)(a1 + 528);
                  *(_QWORD *)(a1 + 528) = 0;
                  v470 = v378;
                  v471 = *(_WORD *)(a1 + 536);
                  v379 = *(_QWORD *)(a1 + 544);
                  v473 = *(_DWORD *)(a1 + 552);
                  v472 = v379;
                  v380 = *(_QWORD **)(a1 + 568);
                  v474 = *(_QWORD **)(a1 + 560);
                  v475 = v380;
                  v476 = *(_QWORD *)(a1 + 576);
                  if (v476)
                  {
                    v380[2] = &v475;
                    *(_QWORD *)(a1 + 560) = a1 + 568;
                    *(_QWORD *)(a1 + 568) = 0;
                    *(_QWORD *)(a1 + 576) = 0;
                  }
                  else
                  {
                    v474 = &v475;
                  }
                  v477 = *(_DWORD *)(a1 + 592);
                  v381 = *(float *)a1;
                  v382 = v369;
                  do
                  {
                    *(float *)(v382 + 608) = v381;
                    v383 = *(_OWORD *)(v382 + 400);
                    *(_OWORD *)(v382 + 688) = *(_OWORD *)(v382 + 384);
                    *(_OWORD *)(v382 + 704) = v383;
                    v384 = *(_OWORD *)(v382 + 432);
                    *(_OWORD *)(v382 + 720) = *(_OWORD *)(v382 + 416);
                    *(_OWORD *)(v382 + 736) = v384;
                    v385 = *(_OWORD *)(v382 + 336);
                    *(_OWORD *)(v382 + 624) = *(_OWORD *)(v382 + 320);
                    *(_OWORD *)(v382 + 640) = v385;
                    v386 = *(_OWORD *)(v382 + 368);
                    *(_OWORD *)(v382 + 656) = *(_OWORD *)(v382 + 352);
                    *(_OWORD *)(v382 + 672) = v386;
                    v387 = *(_QWORD *)(v382 + 448);
                    *(_QWORD *)(v382 + 448) = 0;
                    v388 = *(void **)(v382 + 752);
                    *(_QWORD *)(v382 + 752) = v387;

                    *(_DWORD *)(v382 + 760) = *(_DWORD *)(v382 + 456);
                    v389 = *(_QWORD *)(v382 + 464);
                    *(_QWORD *)(v382 + 464) = 0;
                    v390 = *(void **)(v382 + 768);
                    *(_QWORD *)(v382 + 768) = v389;

                    v391 = *(_QWORD *)(v382 + 472);
                    *(_QWORD *)(v382 + 472) = 0;
                    v392 = *(void **)(v382 + 776);
                    *(_QWORD *)(v382 + 776) = v391;

                    std::vector<float>::__move_assign(v382 + 784, (__n128 *)(v382 + 480));
                    std::vector<BOOL>::__move_assign(v382 + 808, (_QWORD *)(v382 + 504));
                    v393 = *(_QWORD *)(v382 + 528);
                    *(_QWORD *)(v382 + 528) = 0;
                    v394 = *(void **)(v382 + 832);
                    *(_QWORD *)(v382 + 832) = v393;

                    *(_WORD *)(v382 + 840) = *(_WORD *)(v382 + 536);
                    *(_QWORD *)(v382 + 848) = *(_QWORD *)(v382 + 544);
                    *(_DWORD *)(v382 + 856) = *(_DWORD *)(v382 + 552);
                    std::__tree<int>::__move_assign(v382 + 864, (_QWORD *)(v382 + 560));
                    *(_DWORD *)(v382 + 896) = *(_DWORD *)(v382 + 592);
                    v381 = *(float *)v382;
                    v382 -= 304;
                  }
                  while (v454 < v381);
                  *(float *)(v382 + 608) = v454;
                  v395 = v455;
                  v396 = v456;
                  v397 = v458;
                  *(_OWORD *)(v382 + 656) = v457;
                  *(_OWORD *)(v382 + 672) = v397;
                  *(_OWORD *)(v382 + 624) = v395;
                  *(_OWORD *)(v382 + 640) = v396;
                  v398 = v459;
                  v399 = v460;
                  v400 = v462;
                  *(_OWORD *)(v382 + 720) = v461;
                  *(_OWORD *)(v382 + 736) = v400;
                  *(_OWORD *)(v382 + 688) = v398;
                  *(_OWORD *)(v382 + 704) = v399;
                  v401 = v463;
                  v463 = 0;
                  v402 = *(void **)(v382 + 752);
                  *(_QWORD *)(v382 + 752) = v401;

                  *(_DWORD *)(v382 + 760) = v464;
                  v403 = v465;
                  *(_QWORD *)&v465 = 0;
                  v404 = *(void **)(v382 + 768);
                  *(_QWORD *)(v382 + 768) = v403;

                  v405 = *((_QWORD *)&v465 + 1);
                  *((_QWORD *)&v465 + 1) = 0;
                  v406 = *(void **)(v382 + 776);
                  *(_QWORD *)(v382 + 776) = v405;

                  v407 = *(void **)(v382 + 784);
                  if (v407)
                  {
                    *(_QWORD *)(v382 + 792) = v407;
                    operator delete(v407);
                    *(_QWORD *)(v382 + 784) = 0;
                    *(_QWORD *)(v382 + 792) = 0;
                    *(_QWORD *)(v382 + 800) = 0;
                  }
                  *(_OWORD *)(v382 + 784) = *(_OWORD *)v466;
                  *(_QWORD *)(v382 + 800) = v467;
                  v466[0] = 0;
                  v466[1] = 0;
                  v467 = 0;
                  v408 = *(void **)(v382 + 808);
                  if (v408)
                  {
                    operator delete(v408);
                    *(_QWORD *)(v382 + 808) = 0;
                    *(_QWORD *)(v382 + 816) = 0;
                    *(_QWORD *)(v382 + 824) = 0;
                  }
                  *(_QWORD *)(v382 + 808) = __p;
                  *(_OWORD *)(v382 + 816) = v469;
                  __p = 0;
                  v469 = 0uLL;
                  v409 = v470;
                  v470 = 0;
                  v410 = *(void **)(v382 + 832);
                  *(_QWORD *)(v382 + 832) = v409;

                  *(_WORD *)(v382 + 840) = v471;
                  v411 = v472;
                  *(_DWORD *)(v382 + 856) = v473;
                  *(_QWORD *)(v382 + 848) = v411;
                  v412 = v382 + 872;
                  std::__tree<int>::destroy(v382 + 864, *(_QWORD **)(v382 + 872));
                  *(_QWORD *)(v382 + 864) = v474;
                  v413 = v475;
                  *(_QWORD *)(v382 + 872) = v475;
                  v414 = v476;
                  *(_QWORD *)(v382 + 880) = v476;
                  if (v414)
                  {
                    v415 = 0;
                    v413[2] = v412;
                    v474 = &v475;
                    v475 = 0;
                    v476 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v382 + 864) = v412;
                    v415 = v475;
                  }
                  *(_DWORD *)(v382 + 896) = v477;
                  std::__tree<int>::destroy((uint64_t)&v474, v415);

                  if (__p)
                    operator delete(__p);
                  if (v466[0])
                  {
                    v466[1] = v466[0];
                    operator delete(v466[0]);
                  }

                }
                v368 = v370 + 304;
                v369 += 304;
                a1 = v370;
              }
              while ((int *)(v370 + 304) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((float *)a1 != v6)
          {
            v428 = (unint64_t)(v9 - 2) >> 1;
            v191 = v428;
            do
            {
              v192 = v191;
              if (v428 >= v191)
              {
                v193 = (2 * v191) | 1;
                v194 = a1 + 304 * v193;
                if (2 * v192 + 2 < v9 && *(float *)v194 < *(float *)(v194 + 304))
                {
                  v194 += 304;
                  v193 = 2 * v192 + 2;
                }
                v195 = a1 + 304 * v192;
                if (*(float *)v194 >= *(float *)v195)
                {
                  v454 = *(float *)v195;
                  v196 = a1 + 304 * v192;
                  v197 = *(_OWORD *)(v196 + 16);
                  v198 = *(_OWORD *)(v196 + 32);
                  v199 = *(_OWORD *)(v196 + 64);
                  v457 = *(_OWORD *)(v196 + 48);
                  v458 = v199;
                  v455 = v197;
                  v456 = v198;
                  v200 = *(_OWORD *)(v196 + 80);
                  v201 = *(_OWORD *)(v196 + 96);
                  v202 = *(_OWORD *)(v196 + 128);
                  v461 = *(_OWORD *)(v196 + 112);
                  v462 = v202;
                  v459 = v200;
                  v460 = v201;
                  v203 = *(void **)(v196 + 144);
                  *(_QWORD *)(v196 + 144) = 0;
                  v463 = v203;
                  v464 = *(_DWORD *)(v196 + 152);
                  v204 = *(_OWORD *)(v196 + 160);
                  *(_OWORD *)(v196 + 160) = 0u;
                  v465 = v204;
                  *(_OWORD *)v466 = *(_OWORD *)(v196 + 176);
                  v467 = *(_QWORD *)(v196 + 192);
                  *(_QWORD *)(v196 + 192) = 0;
                  *(_OWORD *)(v196 + 176) = 0u;
                  __p = *(void **)(v196 + 200);
                  v469 = *(_OWORD *)(v196 + 208);
                  *(_OWORD *)(v196 + 200) = 0u;
                  v205 = *(void **)(v196 + 224);
                  *(_OWORD *)(v196 + 216) = 0u;
                  v470 = v205;
                  v471 = *(_WORD *)(v196 + 232);
                  v206 = *(_QWORD *)(v196 + 240);
                  v473 = *(_DWORD *)(v196 + 248);
                  v472 = v206;
                  v474 = *(_QWORD **)(v196 + 256);
                  v207 = *(_QWORD **)(v196 + 264);
                  v475 = v207;
                  v476 = *(_QWORD *)(v196 + 272);
                  if (v476)
                  {
                    v208 = (_QWORD *)(v196 + 256);
                    v207[2] = &v475;
                    v209 = (_QWORD *)(v196 + 264);
                    *v208 = v209;
                    *v209 = 0;
                    v209[1] = 0;
                  }
                  else
                  {
                    v474 = &v475;
                  }
                  v425 = v192;
                  v477 = *(_DWORD *)(a1 + 304 * v192 + 288);
                  v210 = *(float *)v194;
                  while (1)
                  {
                    v211 = v194;
                    *(float *)v195 = v210;
                    v212 = *(_OWORD *)(v194 + 16);
                    v213 = *(_OWORD *)(v194 + 32);
                    v214 = *(_OWORD *)(v194 + 64);
                    *(_OWORD *)(v195 + 48) = *(_OWORD *)(v194 + 48);
                    *(_OWORD *)(v195 + 64) = v214;
                    *(_OWORD *)(v195 + 16) = v212;
                    *(_OWORD *)(v195 + 32) = v213;
                    v215 = *(_OWORD *)(v194 + 80);
                    v216 = *(_OWORD *)(v194 + 96);
                    v217 = *(_OWORD *)(v194 + 128);
                    *(_OWORD *)(v195 + 112) = *(_OWORD *)(v194 + 112);
                    *(_OWORD *)(v195 + 128) = v217;
                    *(_OWORD *)(v195 + 80) = v215;
                    *(_OWORD *)(v195 + 96) = v216;
                    v218 = *(_QWORD *)(v194 + 144);
                    *(_QWORD *)(v211 + 144) = 0;
                    v219 = *(void **)(v195 + 144);
                    *(_QWORD *)(v195 + 144) = v218;

                    *(_DWORD *)(v195 + 152) = *(_DWORD *)(v211 + 152);
                    v220 = *(_QWORD *)(v211 + 160);
                    *(_QWORD *)(v211 + 160) = 0;
                    v221 = *(void **)(v195 + 160);
                    *(_QWORD *)(v195 + 160) = v220;

                    v222 = *(_QWORD *)(v211 + 168);
                    *(_QWORD *)(v211 + 168) = 0;
                    v223 = *(void **)(v195 + 168);
                    *(_QWORD *)(v195 + 168) = v222;

                    std::vector<float>::__move_assign(v195 + 176, (__n128 *)(v211 + 176));
                    std::vector<BOOL>::__move_assign(v195 + 200, (_QWORD *)(v211 + 200));
                    v224 = *(_QWORD *)(v211 + 224);
                    *(_QWORD *)(v211 + 224) = 0;
                    v225 = *(void **)(v195 + 224);
                    *(_QWORD *)(v195 + 224) = v224;

                    *(_WORD *)(v195 + 232) = *(_WORD *)(v211 + 232);
                    v226 = *(_QWORD *)(v211 + 240);
                    *(_DWORD *)(v195 + 248) = *(_DWORD *)(v211 + 248);
                    *(_QWORD *)(v195 + 240) = v226;
                    std::__tree<int>::__move_assign(v195 + 256, (_QWORD *)(v211 + 256));
                    *(_DWORD *)(v195 + 288) = *(_DWORD *)(v211 + 288);
                    if (v428 < v193)
                      break;
                    v227 = 2 * v193;
                    v193 = (2 * v193) | 1;
                    v194 = a1 + 304 * v193;
                    v228 = v227 + 2;
                    if (v228 < v9 && *(float *)v194 < *(float *)(v194 + 304))
                    {
                      v194 += 304;
                      v193 = v228;
                    }
                    v210 = *(float *)v194;
                    v229 = v454;
                    v195 = v211;
                    if (*(float *)v194 < v454)
                      goto LABEL_135;
                  }
                  v229 = v454;
LABEL_135:
                  *(float *)v211 = v229;
                  v230 = v455;
                  v231 = v456;
                  v232 = v458;
                  *(_OWORD *)(v211 + 48) = v457;
                  *(_OWORD *)(v211 + 64) = v232;
                  *(_OWORD *)(v211 + 16) = v230;
                  *(_OWORD *)(v211 + 32) = v231;
                  v233 = v459;
                  v234 = v460;
                  v235 = v462;
                  *(_OWORD *)(v211 + 112) = v461;
                  *(_OWORD *)(v211 + 128) = v235;
                  *(_OWORD *)(v211 + 80) = v233;
                  *(_OWORD *)(v211 + 96) = v234;
                  v236 = v463;
                  v463 = 0;
                  v237 = *(void **)(v211 + 144);
                  *(_QWORD *)(v211 + 144) = v236;

                  *(_DWORD *)(v211 + 152) = v464;
                  v238 = v465;
                  *(_QWORD *)&v465 = 0;
                  v239 = *(void **)(v211 + 160);
                  *(_QWORD *)(v211 + 160) = v238;

                  v240 = *((_QWORD *)&v465 + 1);
                  *((_QWORD *)&v465 + 1) = 0;
                  v241 = *(void **)(v211 + 168);
                  *(_QWORD *)(v211 + 168) = v240;

                  v242 = *(void **)(v211 + 176);
                  if (v242)
                  {
                    *(_QWORD *)(v211 + 184) = v242;
                    operator delete(v242);
                    *(_QWORD *)(v211 + 176) = 0;
                    *(_QWORD *)(v211 + 184) = 0;
                    *(_QWORD *)(v211 + 192) = 0;
                  }
                  *(_OWORD *)(v211 + 176) = *(_OWORD *)v466;
                  *(_QWORD *)(v211 + 192) = v467;
                  v466[0] = 0;
                  v466[1] = 0;
                  v467 = 0;
                  v243 = *(void **)(v211 + 200);
                  if (v243)
                  {
                    operator delete(v243);
                    *(_QWORD *)(v211 + 200) = 0;
                    *(_QWORD *)(v211 + 208) = 0;
                    *(_QWORD *)(v211 + 216) = 0;
                  }
                  *(_QWORD *)(v211 + 200) = __p;
                  *(_OWORD *)(v211 + 208) = v469;
                  __p = 0;
                  v469 = 0uLL;
                  v244 = v470;
                  v470 = 0;
                  v245 = *(void **)(v211 + 224);
                  *(_QWORD *)(v211 + 224) = v244;

                  *(_WORD *)(v211 + 232) = v471;
                  v246 = v472;
                  *(_DWORD *)(v211 + 248) = v473;
                  *(_QWORD *)(v211 + 240) = v246;
                  v247 = v211 + 264;
                  std::__tree<int>::destroy(v211 + 256, *(_QWORD **)(v211 + 264));
                  *(_QWORD *)(v211 + 256) = v474;
                  v248 = v475;
                  *(_QWORD *)(v211 + 264) = v475;
                  v249 = v476;
                  *(_QWORD *)(v211 + 272) = v476;
                  if (v249)
                  {
                    v250 = 0;
                    v248[2] = v247;
                    v474 = &v475;
                    v475 = 0;
                    v476 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(v211 + 256) = v247;
                    v250 = v475;
                  }
                  *(_DWORD *)(v211 + 288) = v477;
                  std::__tree<int>::destroy((uint64_t)&v474, v250);

                  if (__p)
                    operator delete(__p);
                  if (v466[0])
                  {
                    v466[1] = v466[0];
                    operator delete(v466[0]);
                  }

                  v192 = v425;
                }
              }
              v191 = v192 - 1;
            }
            while (v192);
            v429 = v8 / 0x130uLL;
            v420 = a1 + 176;
            v421 = (__int128 *)(a1 + 16);
            v419 = a1 + 200;
            v418 = (uint64_t *)(a1 + 240);
            v416 = a1;
            v417 = (_QWORD *)(a1 + 264);
            do
            {
              v430 = *(_DWORD *)a1;
              v433 = v421[2];
              v434 = v421[3];
              v431 = *v421;
              v432 = v421[1];
              v437 = v421[6];
              v438 = v421[7];
              v435 = v421[4];
              v436 = v421[5];
              v251 = *(_QWORD *)(a1 + 144);
              *(_QWORD *)(a1 + 144) = 0;
              v439 = v251;
              v440 = *(_DWORD *)(a1 + 152);
              v252 = *(_OWORD *)(a1 + 160);
              v253 = *(_OWORD *)(a1 + 176);
              *(_OWORD *)(a1 + 160) = 0u;
              v441 = v252;
              *(_OWORD *)v442 = v253;
              v254 = *(void **)(a1 + 200);
              v443 = *(_QWORD *)(a1 + 192);
              *(_QWORD *)(v420 + 16) = 0;
              *(_OWORD *)v420 = 0u;
              v444 = v254;
              v445 = *(_OWORD *)(a1 + 208);
              *(_QWORD *)(v419 + 16) = 0;
              *(_OWORD *)v419 = 0u;
              v255 = *(_QWORD *)(a1 + 224);
              *(_QWORD *)(a1 + 224) = 0;
              v446 = v255;
              v447 = *(_WORD *)(a1 + 232);
              v449 = *((_DWORD *)v418 + 2);
              v448 = *v418;
              v256 = *(_QWORD **)(a1 + 264);
              v450 = *(_QWORD ***)(a1 + 256);
              v451 = v256;
              v452 = *(_QWORD *)(a1 + 272);
              if (v452)
              {
                v256[2] = &v451;
                *(_QWORD *)(a1 + 256) = v417;
                *v417 = 0;
                v417[1] = 0;
              }
              else
              {
                v450 = &v451;
              }
              v257 = 0;
              v453 = *(_DWORD *)(a1 + 288);
              v258 = a1;
              do
              {
                v259 = v258 + 304 * v257 + 304;
                v260 = 2 * v257;
                v257 = (2 * v257) | 1;
                if (v260 + 2 < v429 && *(float *)v259 < *(float *)(v259 + 304))
                {
                  v259 += 304;
                  v257 = v260 + 2;
                }
                *(_DWORD *)v258 = *(_DWORD *)v259;
                v261 = *(_OWORD *)(v259 + 16);
                v262 = *(_OWORD *)(v259 + 32);
                v263 = *(_OWORD *)(v259 + 64);
                *(_OWORD *)(v258 + 48) = *(_OWORD *)(v259 + 48);
                *(_OWORD *)(v258 + 64) = v263;
                *(_OWORD *)(v258 + 16) = v261;
                *(_OWORD *)(v258 + 32) = v262;
                v264 = *(_OWORD *)(v259 + 80);
                v265 = *(_OWORD *)(v259 + 96);
                v266 = *(_OWORD *)(v259 + 128);
                *(_OWORD *)(v258 + 112) = *(_OWORD *)(v259 + 112);
                *(_OWORD *)(v258 + 128) = v266;
                *(_OWORD *)(v258 + 80) = v264;
                *(_OWORD *)(v258 + 96) = v265;
                v267 = *(_QWORD *)(v259 + 144);
                *(_QWORD *)(v259 + 144) = 0;
                v268 = *(void **)(v258 + 144);
                *(_QWORD *)(v258 + 144) = v267;

                *(_DWORD *)(v258 + 152) = *(_DWORD *)(v259 + 152);
                v269 = *(_QWORD *)(v259 + 160);
                *(_QWORD *)(v259 + 160) = 0;
                v270 = *(void **)(v258 + 160);
                *(_QWORD *)(v258 + 160) = v269;

                v271 = *(_QWORD *)(v259 + 168);
                *(_QWORD *)(v259 + 168) = 0;
                v272 = *(void **)(v258 + 168);
                *(_QWORD *)(v258 + 168) = v271;

                v273 = (_QWORD *)(v259 + 176);
                std::vector<float>::__move_assign(v258 + 176, (__n128 *)(v259 + 176));
                v274 = (_QWORD *)(v259 + 200);
                std::vector<BOOL>::__move_assign(v258 + 200, (_QWORD *)(v259 + 200));
                v275 = *(_QWORD *)(v259 + 224);
                *(_QWORD *)(v259 + 224) = 0;
                v276 = *(void **)(v258 + 224);
                *(_QWORD *)(v258 + 224) = v275;

                *(_WORD *)(v258 + 232) = *(_WORD *)(v259 + 232);
                v278 = (uint64_t *)(v259 + 240);
                v277 = *(_QWORD *)(v259 + 240);
                *(_DWORD *)(v258 + 248) = *(_DWORD *)(v259 + 248);
                *(_QWORD *)(v258 + 240) = v277;
                v279 = (uint64_t *)(v259 + 256);
                std::__tree<int>::__move_assign(v258 + 256, (_QWORD *)(v259 + 256));
                *(_DWORD *)(v258 + 288) = *(_DWORD *)(v259 + 288);
                v258 = v259;
              }
              while (v257 <= (uint64_t)((unint64_t)(v429 - 2) >> 1));
              v280 = (_OWORD *)(v259 + 16);
              if ((int *)v259 == a2 - 76)
              {
                *(_DWORD *)v259 = v430;
                *(_OWORD *)(v259 + 48) = v433;
                *(_OWORD *)(v259 + 64) = v434;
                *v280 = v431;
                *(_OWORD *)(v259 + 32) = v432;
                *(_OWORD *)(v259 + 112) = v437;
                *(_OWORD *)(v259 + 128) = v438;
                *(_OWORD *)(v259 + 80) = v435;
                *(_OWORD *)(v259 + 96) = v436;
                v307 = *(void **)(v259 + 144);
                *(_QWORD *)(v259 + 144) = v439;

                *(_DWORD *)(v259 + 152) = v440;
                v308 = *(void **)(v259 + 160);
                *(_QWORD *)(v259 + 160) = v441;

                v309 = *(void **)(v259 + 168);
                *(_QWORD *)(v259 + 168) = *((_QWORD *)&v441 + 1);

                v310 = *(void **)(v259 + 176);
                if (v310)
                {
                  *(_QWORD *)(v259 + 184) = v310;
                  operator delete(v310);
                  *v273 = 0;
                  *(_QWORD *)(v259 + 184) = 0;
                  *(_QWORD *)(v259 + 192) = 0;
                }
                *(_OWORD *)(v259 + 176) = *(_OWORD *)v442;
                *(_QWORD *)(v259 + 192) = v443;
                v311 = *(void **)(v259 + 200);
                if (v311)
                {
                  operator delete(v311);
                  *v274 = 0;
                  *(_QWORD *)(v259 + 208) = 0;
                  *(_QWORD *)(v259 + 216) = 0;
                }
                *(_QWORD *)(v259 + 200) = v444;
                *(_OWORD *)(v259 + 208) = v445;
                v312 = *(void **)(v259 + 224);
                *(_QWORD *)(v259 + 224) = v446;

                *(_WORD *)(v259 + 232) = v447;
                *(_DWORD *)(v259 + 248) = v449;
                *v278 = v448;
                v313 = v259 + 264;
                std::__tree<int>::destroy(v259 + 256, *(_QWORD **)(v259 + 264));
                *(_QWORD *)(v259 + 256) = v450;
                v314 = v451;
                *(_QWORD *)(v259 + 264) = v451;
                v315 = v452;
                *(_QWORD *)(v259 + 272) = v452;
                if (v315)
                {
                  v314[2] = v313;
                  v450 = &v451;
                  v451 = 0;
                  v452 = 0;
                }
                else
                {
                  *v279 = v313;
                }
                *(_DWORD *)(v259 + 288) = v453;
              }
              else
              {
                *(_DWORD *)v259 = *(a2 - 76);
                v281 = *((_OWORD *)a2 - 18);
                v282 = *((_OWORD *)a2 - 17);
                v283 = *((_OWORD *)a2 - 15);
                *(_OWORD *)(v259 + 48) = *((_OWORD *)a2 - 16);
                *(_OWORD *)(v259 + 64) = v283;
                *v280 = v281;
                *(_OWORD *)(v259 + 32) = v282;
                v284 = *((_OWORD *)a2 - 14);
                v285 = *((_OWORD *)a2 - 13);
                v286 = *((_OWORD *)a2 - 11);
                *(_OWORD *)(v259 + 112) = *((_OWORD *)a2 - 12);
                *(_OWORD *)(v259 + 128) = v286;
                *(_OWORD *)(v259 + 80) = v284;
                *(_OWORD *)(v259 + 96) = v285;
                v288 = *((_QWORD *)a2 - 20);
                v287 = a2 - 40;
                *(_QWORD *)v287 = 0;
                v289 = *(void **)(v259 + 144);
                *(_QWORD *)(v259 + 144) = v288;

                v290 = *((_QWORD *)a2 - 18);
                *(_DWORD *)(v259 + 152) = *(a2 - 38);
                *((_QWORD *)a2 - 18) = 0;
                v291 = *(void **)(v259 + 160);
                *(_QWORD *)(v259 + 160) = v290;

                v292 = *((_QWORD *)a2 - 17);
                *((_QWORD *)a2 - 17) = 0;
                v293 = *(void **)(v259 + 168);
                *(_QWORD *)(v259 + 168) = v292;

                std::vector<float>::__move_assign(v259 + 176, (__n128 *)a2 - 8);
                std::vector<BOOL>::__move_assign(v259 + 200, (_QWORD *)a2 - 13);
                v294 = *((_QWORD *)a2 - 10);
                *((_QWORD *)a2 - 10) = 0;
                v295 = *(void **)(v259 + 224);
                *(_QWORD *)(v259 + 224) = v294;

                *(_WORD *)(v259 + 232) = *((_WORD *)a2 - 36);
                v296 = *((_QWORD *)a2 - 8);
                *(_DWORD *)(v259 + 248) = *(a2 - 14);
                *v278 = v296;
                v422 = a2 - 12;
                std::__tree<int>::__move_assign(v259 + 256, (_QWORD *)a2 - 6);
                *(_DWORD *)(v259 + 288) = *(a2 - 4);
                *(a2 - 76) = v430;
                *((_OWORD *)a2 - 16) = v433;
                *((_OWORD *)a2 - 15) = v434;
                *((_OWORD *)a2 - 18) = v431;
                *((_OWORD *)a2 - 17) = v432;
                *((_OWORD *)a2 - 12) = v437;
                *((_OWORD *)a2 - 11) = v438;
                *((_OWORD *)a2 - 14) = v435;
                *((_OWORD *)a2 - 13) = v436;
                a1 = v416;
                v297 = (void *)*((_QWORD *)a2 - 20);
                *(_QWORD *)v287 = v439;

                *(a2 - 38) = v440;
                v298 = (void *)*((_QWORD *)a2 - 18);
                *((_QWORD *)a2 - 18) = v441;

                v299 = (void *)*((_QWORD *)a2 - 17);
                *((_QWORD *)a2 - 17) = *((_QWORD *)&v441 + 1);

                v300 = (void *)*((_QWORD *)a2 - 16);
                if (v300)
                {
                  *((_QWORD *)a2 - 15) = v300;
                  operator delete(v300);
                }
                *((_OWORD *)a2 - 8) = *(_OWORD *)v442;
                *((_QWORD *)a2 - 14) = v443;
                v301 = (void *)*((_QWORD *)a2 - 13);
                if (v301)
                  operator delete(v301);
                *((_QWORD *)a2 - 13) = v444;
                *((_OWORD *)a2 - 6) = v445;
                v302 = (void *)*((_QWORD *)a2 - 10);
                *((_QWORD *)a2 - 10) = v446;

                v304 = a2 - 10;
                v303 = (_QWORD *)*((_QWORD *)a2 - 5);
                *((_WORD *)a2 - 36) = v447;
                *(a2 - 14) = v449;
                *((_QWORD *)a2 - 8) = v448;
                std::__tree<int>::destroy((uint64_t)v422, v303);
                *((_QWORD *)a2 - 6) = v450;
                v305 = v451;
                *(_QWORD *)v304 = v451;
                v306 = v452;
                *((_QWORD *)v304 + 1) = v452;
                if (v306)
                {
                  v305[2] = v304;
                  v450 = &v451;
                  v451 = 0;
                  v452 = 0;
                }
                else
                {
                  *(_QWORD *)v422 = v304;
                }
                *(a2 - 4) = v453;
                v316 = v259 + 304 - v416;
                if (v316 >= 305)
                {
                  v317 = (v316 / 0x130uLL - 2) >> 1;
                  v318 = v416 + 304 * v317;
                  if (*(float *)v318 < *(float *)v259)
                  {
                    v454 = *(float *)v259;
                    v319 = *(_OWORD *)(v259 + 16);
                    v320 = *(_OWORD *)(v259 + 32);
                    v321 = *(_OWORD *)(v259 + 64);
                    v457 = *(_OWORD *)(v259 + 48);
                    v458 = v321;
                    v455 = v319;
                    v456 = v320;
                    v322 = *(_OWORD *)(v259 + 80);
                    v323 = *(_OWORD *)(v259 + 96);
                    v324 = *(_OWORD *)(v259 + 128);
                    v461 = *(_OWORD *)(v259 + 112);
                    v462 = v324;
                    v459 = v322;
                    v460 = v323;
                    v325 = *(void **)(v259 + 144);
                    *(_QWORD *)(v259 + 144) = 0;
                    v463 = v325;
                    v464 = *(_DWORD *)(v259 + 152);
                    v326 = *(_OWORD *)(v259 + 160);
                    *(_OWORD *)(v259 + 160) = 0u;
                    v465 = v326;
                    *(_OWORD *)v466 = *(_OWORD *)(v259 + 176);
                    v467 = *(_QWORD *)(v259 + 192);
                    *(_QWORD *)(v259 + 192) = 0;
                    *(_OWORD *)v273 = 0u;
                    __p = *(void **)(v259 + 200);
                    v469 = *(_OWORD *)(v259 + 208);
                    *(_QWORD *)(v259 + 216) = 0;
                    *(_OWORD *)v274 = 0u;
                    v327 = *(void **)(v259 + 224);
                    *(_QWORD *)(v259 + 224) = 0;
                    v470 = v327;
                    v471 = *(_WORD *)(v259 + 232);
                    v328 = *v278;
                    v473 = *(_DWORD *)(v259 + 248);
                    v472 = v328;
                    v474 = *(_QWORD **)(v259 + 256);
                    v329 = *(_QWORD **)(v259 + 264);
                    v475 = v329;
                    v476 = *(_QWORD *)(v259 + 272);
                    if (v476)
                    {
                      v329[2] = &v475;
                      *v279 = v259 + 264;
                      *(_QWORD *)(v259 + 264) = 0;
                      *(_QWORD *)(v259 + 272) = 0;
                    }
                    else
                    {
                      v474 = &v475;
                    }
                    v477 = *(_DWORD *)(v259 + 288);
                    v330 = *(float *)v318;
                    do
                    {
                      v331 = v318;
                      *(float *)v259 = v330;
                      v332 = *(_OWORD *)(v318 + 16);
                      v333 = *(_OWORD *)(v318 + 32);
                      v334 = *(_OWORD *)(v318 + 64);
                      *(_OWORD *)(v259 + 48) = *(_OWORD *)(v318 + 48);
                      *(_OWORD *)(v259 + 64) = v334;
                      *(_OWORD *)(v259 + 16) = v332;
                      *(_OWORD *)(v259 + 32) = v333;
                      v335 = *(_OWORD *)(v318 + 80);
                      v336 = *(_OWORD *)(v318 + 96);
                      v337 = *(_OWORD *)(v318 + 128);
                      *(_OWORD *)(v259 + 112) = *(_OWORD *)(v318 + 112);
                      *(_OWORD *)(v259 + 128) = v337;
                      *(_OWORD *)(v259 + 80) = v335;
                      *(_OWORD *)(v259 + 96) = v336;
                      v338 = *(_QWORD *)(v318 + 144);
                      *(_QWORD *)(v331 + 144) = 0;
                      v339 = *(void **)(v259 + 144);
                      *(_QWORD *)(v259 + 144) = v338;

                      *(_DWORD *)(v259 + 152) = *(_DWORD *)(v331 + 152);
                      v340 = *(_QWORD *)(v331 + 160);
                      *(_QWORD *)(v331 + 160) = 0;
                      v341 = *(void **)(v259 + 160);
                      *(_QWORD *)(v259 + 160) = v340;

                      v342 = *(_QWORD *)(v331 + 168);
                      *(_QWORD *)(v331 + 168) = 0;
                      v343 = *(void **)(v259 + 168);
                      *(_QWORD *)(v259 + 168) = v342;

                      std::vector<float>::__move_assign(v259 + 176, (__n128 *)(v331 + 176));
                      std::vector<BOOL>::__move_assign(v259 + 200, (_QWORD *)(v331 + 200));
                      v344 = *(_QWORD *)(v331 + 224);
                      *(_QWORD *)(v331 + 224) = 0;
                      v345 = *(void **)(v259 + 224);
                      *(_QWORD *)(v259 + 224) = v344;

                      *(_WORD *)(v259 + 232) = *(_WORD *)(v331 + 232);
                      v346 = *(_QWORD *)(v331 + 240);
                      *(_DWORD *)(v259 + 248) = *(_DWORD *)(v331 + 248);
                      *(_QWORD *)(v259 + 240) = v346;
                      std::__tree<int>::__move_assign(v259 + 256, (_QWORD *)(v331 + 256));
                      *(_DWORD *)(v259 + 288) = *(_DWORD *)(v331 + 288);
                      if (!v317)
                        break;
                      v317 = (v317 - 1) >> 1;
                      v318 = v416 + 304 * v317;
                      v330 = *(float *)v318;
                      v259 = v331;
                    }
                    while (*(float *)v318 < v454);
                    *(float *)v331 = v454;
                    v347 = v455;
                    v348 = v456;
                    v349 = v458;
                    *(_OWORD *)(v331 + 48) = v457;
                    *(_OWORD *)(v331 + 64) = v349;
                    *(_OWORD *)(v331 + 16) = v347;
                    *(_OWORD *)(v331 + 32) = v348;
                    v350 = v459;
                    v351 = v460;
                    v352 = v462;
                    *(_OWORD *)(v331 + 112) = v461;
                    *(_OWORD *)(v331 + 128) = v352;
                    *(_OWORD *)(v331 + 80) = v350;
                    *(_OWORD *)(v331 + 96) = v351;
                    v353 = v463;
                    v463 = 0;
                    v354 = *(void **)(v331 + 144);
                    *(_QWORD *)(v331 + 144) = v353;

                    *(_DWORD *)(v331 + 152) = v464;
                    v355 = v465;
                    *(_QWORD *)&v465 = 0;
                    v356 = *(void **)(v331 + 160);
                    *(_QWORD *)(v331 + 160) = v355;

                    v357 = *((_QWORD *)&v465 + 1);
                    *((_QWORD *)&v465 + 1) = 0;
                    v358 = *(void **)(v331 + 168);
                    *(_QWORD *)(v331 + 168) = v357;

                    v359 = *(void **)(v331 + 176);
                    if (v359)
                    {
                      *(_QWORD *)(v331 + 184) = v359;
                      operator delete(v359);
                    }
                    *(_OWORD *)(v331 + 176) = *(_OWORD *)v466;
                    *(_QWORD *)(v331 + 192) = v467;
                    v466[0] = 0;
                    v466[1] = 0;
                    v467 = 0;
                    v360 = *(void **)(v331 + 200);
                    if (v360)
                      operator delete(v360);
                    *(_QWORD *)(v331 + 200) = __p;
                    *(_OWORD *)(v331 + 208) = v469;
                    __p = 0;
                    v469 = 0uLL;
                    v361 = v470;
                    v470 = 0;
                    v362 = *(void **)(v331 + 224);
                    *(_QWORD *)(v331 + 224) = v361;

                    *(_WORD *)(v331 + 232) = v471;
                    v363 = v472;
                    *(_DWORD *)(v331 + 248) = v473;
                    *(_QWORD *)(v331 + 240) = v363;
                    v364 = v331 + 264;
                    std::__tree<int>::destroy(v331 + 256, *(_QWORD **)(v331 + 264));
                    *(_QWORD *)(v331 + 256) = v474;
                    v365 = v475;
                    *(_QWORD *)(v331 + 264) = v475;
                    v366 = v476;
                    *(_QWORD *)(v331 + 272) = v476;
                    if (v366)
                    {
                      v365[2] = v364;
                      v365 = 0;
                      v474 = &v475;
                      v475 = 0;
                      v476 = 0;
                    }
                    else
                    {
                      *(_QWORD *)(v331 + 256) = v364;
                    }
                    *(_DWORD *)(v331 + 288) = v477;
                    std::__tree<int>::destroy((uint64_t)&v474, v365);

                    if (__p)
                      operator delete(__p);
                    if (v466[0])
                    {
                      v466[1] = v466[0];
                      operator delete(v466[0]);
                    }

                  }
                }
              }
              std::__tree<int>::destroy((uint64_t)&v450, v451);

              v367 = v429;
              a2 -= 76;
              --v429;
            }
            while (v367 > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (int *)(a1 + 304 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x9801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 304 * v10), (int *)a1, v424);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, (int *)(a1 + 304 * v10), v424);
          v12 = 304 * v10;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 304), (int *)(v12 + a1 - 304), a2 - 152);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(a1 + 608), (int *)(a1 + 304 + v12), a2 - 228);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)(v12 + a1 - 304), v11, (int *)(a1 + 304 + v12));
          std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, v11);
        }
        v13 = *(float *)a1;
        v426 = a3 - 1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 304) >= v13)
        {
          v454 = *(float *)a1;
          v72 = *(_OWORD *)(a1 + 64);
          v74 = *(_OWORD *)(a1 + 16);
          v73 = *(_OWORD *)(a1 + 32);
          v457 = *(_OWORD *)(a1 + 48);
          v458 = v72;
          v455 = v74;
          v456 = v73;
          v75 = *(_OWORD *)(a1 + 128);
          v77 = *(_OWORD *)(a1 + 80);
          v76 = *(_OWORD *)(a1 + 96);
          v461 = *(_OWORD *)(a1 + 112);
          v462 = v75;
          v459 = v77;
          v460 = v76;
          v78 = *(void **)(a1 + 144);
          *(_QWORD *)(a1 + 144) = 0;
          v463 = v78;
          v464 = *(_DWORD *)(a1 + 152);
          v79 = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(a1 + 160) = 0u;
          v80 = *(_OWORD *)(a1 + 176);
          v465 = v79;
          *(_OWORD *)v466 = v80;
          v467 = *(_QWORD *)(a1 + 192);
          *(_QWORD *)(a1 + 192) = 0;
          v81 = *(void **)(a1 + 200);
          *(_OWORD *)(a1 + 176) = 0u;
          __p = v81;
          v469 = *(_OWORD *)(a1 + 208);
          *(_OWORD *)(a1 + 200) = 0u;
          v82 = *(void **)(a1 + 224);
          *(_QWORD *)(a1 + 216) = 0;
          *(_QWORD *)(a1 + 224) = 0;
          v470 = v82;
          v471 = *(_WORD *)(a1 + 232);
          v83 = *(_QWORD *)(a1 + 240);
          v473 = *(_DWORD *)(a1 + 248);
          v472 = v83;
          v84 = *(_QWORD **)(a1 + 264);
          v474 = *(_QWORD **)(a1 + 256);
          v475 = v84;
          v476 = *(_QWORD *)(a1 + 272);
          if (v476)
          {
            v84[2] = &v475;
            *(_QWORD *)(a1 + 256) = a1 + 264;
            *(_QWORD *)(a1 + 264) = 0;
            *(_QWORD *)(a1 + 272) = 0;
          }
          else
          {
            v474 = &v475;
          }
          v477 = *(_DWORD *)(a1 + 288);
          if (v13 >= *(float *)v424)
          {
            v87 = a1 + 304;
            do
            {
              v7 = v87;
              if (v87 >= (unint64_t)v6)
                break;
              v87 += 304;
            }
            while (v13 >= *(float *)v7);
          }
          else
          {
            v85 = a1;
            do
            {
              v7 = v85 + 304;
              v86 = *(float *)(v85 + 304);
              v85 += 304;
            }
            while (v13 >= v86);
          }
          v88 = (int *)v6;
          if (v7 < (unint64_t)v6)
          {
            v88 = (int *)v6;
            do
              v88 -= 76;
            while (v13 < *(float *)v88);
          }
          while (v7 < (unint64_t)v88)
          {
            std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)v7, v88);
            v13 = v454;
            do
            {
              v89 = *(float *)(v7 + 304);
              v7 += 304;
            }
            while (v454 >= v89);
            do
              v88 -= 76;
            while (v454 < *(float *)v88);
          }
          v90 = (_DWORD *)(v7 - 304);
          if (v7 - 304 != a1)
          {
            *(_DWORD *)a1 = *v90;
            v91 = *(_OWORD *)(v7 - 288);
            v92 = *(_OWORD *)(v7 - 272);
            v93 = *(_OWORD *)(v7 - 240);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 - 256);
            *(_OWORD *)(a1 + 64) = v93;
            *(_OWORD *)(a1 + 16) = v91;
            *(_OWORD *)(a1 + 32) = v92;
            v94 = *(_OWORD *)(v7 - 224);
            v95 = *(_OWORD *)(v7 - 208);
            v96 = *(_OWORD *)(v7 - 176);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v7 - 192);
            *(_OWORD *)(a1 + 128) = v96;
            *(_OWORD *)(a1 + 80) = v94;
            *(_OWORD *)(a1 + 96) = v95;
            v97 = *(_QWORD *)(v7 - 160);
            *(_QWORD *)(v7 - 160) = 0;
            v98 = *(void **)(a1 + 144);
            *(_QWORD *)(a1 + 144) = v97;

            *(_DWORD *)(a1 + 152) = *(_DWORD *)(v7 - 152);
            v99 = *(_QWORD *)(v7 - 144);
            *(_QWORD *)(v7 - 144) = 0;
            v100 = *(void **)(a1 + 160);
            *(_QWORD *)(a1 + 160) = v99;

            v101 = *(_QWORD *)(v7 - 136);
            *(_QWORD *)(v7 - 136) = 0;
            v102 = *(void **)(a1 + 168);
            *(_QWORD *)(a1 + 168) = v101;

            std::vector<float>::__move_assign(a1 + 176, (__n128 *)(v7 - 128));
            std::vector<BOOL>::__move_assign(a1 + 200, (_QWORD *)(v7 - 104));
            v103 = *(_QWORD *)(v7 - 80);
            *(_QWORD *)(v7 - 80) = 0;
            v104 = *(void **)(a1 + 224);
            *(_QWORD *)(a1 + 224) = v103;

            *(_WORD *)(a1 + 232) = *(_WORD *)(v7 - 72);
            v105 = *(_QWORD *)(v7 - 64);
            *(_DWORD *)(a1 + 248) = *(_DWORD *)(v7 - 56);
            *(_QWORD *)(a1 + 240) = v105;
            std::__tree<int>::__move_assign(a1 + 256, (_QWORD *)(v7 - 48));
            *(_DWORD *)(a1 + 288) = *(_DWORD *)(v7 - 16);
            v13 = v454;
          }
          *(float *)v90 = v13;
          v106 = v455;
          v107 = v456;
          v108 = v458;
          *(_OWORD *)(v7 - 256) = v457;
          *(_OWORD *)(v7 - 240) = v108;
          *(_OWORD *)(v7 - 288) = v106;
          *(_OWORD *)(v7 - 272) = v107;
          v109 = v459;
          v110 = v460;
          v111 = v462;
          *(_OWORD *)(v7 - 192) = v461;
          *(_OWORD *)(v7 - 176) = v111;
          *(_OWORD *)(v7 - 224) = v109;
          *(_OWORD *)(v7 - 208) = v110;
          v112 = v463;
          v463 = 0;
          v113 = *(void **)(v7 - 160);
          *(_QWORD *)(v7 - 160) = v112;

          *(_DWORD *)(v7 - 152) = v464;
          v114 = v465;
          *(_QWORD *)&v465 = 0;
          v115 = *(void **)(v7 - 144);
          *(_QWORD *)(v7 - 144) = v114;

          v116 = *((_QWORD *)&v465 + 1);
          *((_QWORD *)&v465 + 1) = 0;
          v117 = *(void **)(v7 - 136);
          *(_QWORD *)(v7 - 136) = v116;

          v118 = *(void **)(v7 - 128);
          if (v118)
          {
            *(_QWORD *)(v7 - 120) = v118;
            operator delete(v118);
            *(_QWORD *)(v7 - 128) = 0;
            *(_QWORD *)(v7 - 120) = 0;
            *(_QWORD *)(v7 - 112) = 0;
          }
          *(_OWORD *)(v7 - 128) = *(_OWORD *)v466;
          *(_QWORD *)(v7 - 112) = v467;
          v466[0] = 0;
          v466[1] = 0;
          v467 = 0;
          v119 = *(void **)(v7 - 104);
          if (v119)
          {
            operator delete(v119);
            *(_QWORD *)(v7 - 104) = 0;
            *(_QWORD *)(v7 - 96) = 0;
            *(_QWORD *)(v7 - 88) = 0;
          }
          *(_QWORD *)(v7 - 104) = __p;
          *(_OWORD *)(v7 - 96) = v469;
          __p = 0;
          v469 = 0uLL;
          v120 = v470;
          v470 = 0;
          v121 = *(void **)(v7 - 80);
          *(_QWORD *)(v7 - 80) = v120;

          v123 = v7 - 40;
          v122 = *(_QWORD **)(v7 - 40);
          *(_WORD *)(v7 - 72) = v471;
          v124 = v472;
          *(_DWORD *)(v7 - 56) = v473;
          *(_QWORD *)(v7 - 64) = v124;
          std::__tree<int>::destroy(v7 - 48, v122);
          *(_QWORD *)(v7 - 48) = v474;
          v125 = v475;
          *(_QWORD *)(v7 - 40) = v475;
          v126 = v476;
          *(_QWORD *)(v7 - 32) = v476;
          if (v126)
          {
            v127 = 0;
            v125[2] = v123;
            v474 = &v475;
            v475 = 0;
            v476 = 0;
          }
          else
          {
            *(_QWORD *)(v7 - 48) = v123;
            v127 = v475;
          }
          *(_DWORD *)(v7 - 16) = v477;
          std::__tree<int>::destroy((uint64_t)&v474, v127);

          if (__p)
            operator delete(__p);
          if (v466[0])
          {
            v466[1] = v466[0];
            operator delete(v466[0]);
          }

          a4 = 0;
          a3 = v426;
          v6 = (float *)a2;
          continue;
        }
        v454 = *(float *)a1;
        v14 = *(_OWORD *)(a1 + 64);
        v16 = *(_OWORD *)(a1 + 16);
        v15 = *(_OWORD *)(a1 + 32);
        v457 = *(_OWORD *)(a1 + 48);
        v458 = v14;
        v455 = v16;
        v456 = v15;
        v17 = *(_OWORD *)(a1 + 128);
        v19 = *(_OWORD *)(a1 + 80);
        v18 = *(_OWORD *)(a1 + 96);
        v461 = *(_OWORD *)(a1 + 112);
        v462 = v17;
        v459 = v19;
        v460 = v18;
        v20 = *(void **)(a1 + 144);
        *(_QWORD *)(a1 + 144) = 0;
        v463 = v20;
        v464 = *(_DWORD *)(a1 + 152);
        v21 = *(_OWORD *)(a1 + 160);
        *(_OWORD *)(a1 + 160) = 0u;
        v22 = *(_OWORD *)(a1 + 176);
        v465 = v21;
        *(_OWORD *)v466 = v22;
        v467 = *(_QWORD *)(a1 + 192);
        *(_QWORD *)(a1 + 192) = 0;
        v23 = *(void **)(a1 + 200);
        *(_OWORD *)(a1 + 176) = 0u;
        __p = v23;
        v469 = *(_OWORD *)(a1 + 208);
        *(_OWORD *)(a1 + 200) = 0u;
        v24 = *(void **)(a1 + 224);
        *(_QWORD *)(a1 + 216) = 0;
        *(_QWORD *)(a1 + 224) = 0;
        v470 = v24;
        v471 = *(_WORD *)(a1 + 232);
        v25 = *(_QWORD *)(a1 + 240);
        v473 = *(_DWORD *)(a1 + 248);
        v472 = v25;
        v26 = *(_QWORD **)(a1 + 264);
        v474 = *(_QWORD **)(a1 + 256);
        v475 = v26;
        v476 = *(_QWORD *)(a1 + 272);
        if (v476)
        {
          v26[2] = &v475;
          *(_QWORD *)(a1 + 256) = a1 + 264;
          *(_QWORD *)(a1 + 264) = 0;
          *(_QWORD *)(a1 + 272) = 0;
        }
        else
        {
          v474 = &v475;
        }
        v27 = 0;
        v477 = *(_DWORD *)(a1 + 288);
        do
        {
          v28 = *(float *)(a1 + v27 + 304);
          v27 += 304;
        }
        while (v28 < v13);
        v29 = a1 + v27;
        if (v27 == 304)
        {
          v6 = (float *)a2;
          do
          {
            if (v29 >= (unint64_t)v6)
              break;
            v6 -= 76;
          }
          while (*v6 >= v13);
        }
        else
        {
          do
            v6 -= 76;
          while (*v6 >= v13);
        }
        v7 = a1 + v27;
        if (v29 < (unint64_t)v6)
        {
          v30 = (int *)v6;
          do
          {
            std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)v7, v30);
            v13 = v454;
            do
            {
              v31 = *(float *)(v7 + 304);
              v7 += 304;
            }
            while (v31 < v454);
            do
              v30 -= 76;
            while (*(float *)v30 >= v454);
          }
          while (v7 < (unint64_t)v30);
        }
        v32 = (_DWORD *)(v7 - 304);
        if (v7 - 304 != a1)
        {
          *(_DWORD *)a1 = *v32;
          v33 = *(_OWORD *)(v7 - 288);
          v34 = *(_OWORD *)(v7 - 272);
          v35 = *(_OWORD *)(v7 - 240);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(v7 - 256);
          *(_OWORD *)(a1 + 64) = v35;
          *(_OWORD *)(a1 + 16) = v33;
          *(_OWORD *)(a1 + 32) = v34;
          v36 = *(_OWORD *)(v7 - 224);
          v37 = *(_OWORD *)(v7 - 208);
          v38 = *(_OWORD *)(v7 - 176);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(v7 - 192);
          *(_OWORD *)(a1 + 128) = v38;
          *(_OWORD *)(a1 + 80) = v36;
          *(_OWORD *)(a1 + 96) = v37;
          v39 = *(_QWORD *)(v7 - 160);
          *(_QWORD *)(v7 - 160) = 0;
          v40 = *(void **)(a1 + 144);
          *(_QWORD *)(a1 + 144) = v39;

          *(_DWORD *)(a1 + 152) = *(_DWORD *)(v7 - 152);
          v41 = *(_QWORD *)(v7 - 144);
          *(_QWORD *)(v7 - 144) = 0;
          v42 = *(void **)(a1 + 160);
          *(_QWORD *)(a1 + 160) = v41;

          v43 = *(_QWORD *)(v7 - 136);
          *(_QWORD *)(v7 - 136) = 0;
          v44 = *(void **)(a1 + 168);
          *(_QWORD *)(a1 + 168) = v43;

          std::vector<float>::__move_assign(a1 + 176, (__n128 *)(v7 - 128));
          std::vector<BOOL>::__move_assign(a1 + 200, (_QWORD *)(v7 - 104));
          v45 = *(_QWORD *)(v7 - 80);
          *(_QWORD *)(v7 - 80) = 0;
          v46 = *(void **)(a1 + 224);
          *(_QWORD *)(a1 + 224) = v45;

          *(_WORD *)(a1 + 232) = *(_WORD *)(v7 - 72);
          v47 = *(_QWORD *)(v7 - 64);
          *(_DWORD *)(a1 + 248) = *(_DWORD *)(v7 - 56);
          *(_QWORD *)(a1 + 240) = v47;
          std::__tree<int>::__move_assign(a1 + 256, (_QWORD *)(v7 - 48));
          *(_DWORD *)(a1 + 288) = *(_DWORD *)(v7 - 16);
          v13 = v454;
        }
        *(float *)v32 = v13;
        v48 = v455;
        v49 = v456;
        v50 = v458;
        *(_OWORD *)(v7 - 256) = v457;
        *(_OWORD *)(v7 - 240) = v50;
        *(_OWORD *)(v7 - 288) = v48;
        *(_OWORD *)(v7 - 272) = v49;
        v51 = v459;
        v52 = v460;
        v53 = v462;
        *(_OWORD *)(v7 - 192) = v461;
        *(_OWORD *)(v7 - 176) = v53;
        *(_OWORD *)(v7 - 224) = v51;
        *(_OWORD *)(v7 - 208) = v52;
        v54 = v463;
        v463 = 0;
        v55 = *(void **)(v7 - 160);
        *(_QWORD *)(v7 - 160) = v54;

        *(_DWORD *)(v7 - 152) = v464;
        v56 = v465;
        *(_QWORD *)&v465 = 0;
        v57 = *(void **)(v7 - 144);
        *(_QWORD *)(v7 - 144) = v56;

        v58 = *((_QWORD *)&v465 + 1);
        *((_QWORD *)&v465 + 1) = 0;
        v59 = *(void **)(v7 - 136);
        *(_QWORD *)(v7 - 136) = v58;

        v60 = *(void **)(v7 - 128);
        if (v60)
        {
          *(_QWORD *)(v7 - 120) = v60;
          operator delete(v60);
          *(_QWORD *)(v7 - 128) = 0;
          *(_QWORD *)(v7 - 120) = 0;
          *(_QWORD *)(v7 - 112) = 0;
        }
        *(_OWORD *)(v7 - 128) = *(_OWORD *)v466;
        *(_QWORD *)(v7 - 112) = v467;
        v466[0] = 0;
        v466[1] = 0;
        v467 = 0;
        v61 = *(void **)(v7 - 104);
        if (v61)
        {
          operator delete(v61);
          *(_QWORD *)(v7 - 104) = 0;
          *(_QWORD *)(v7 - 96) = 0;
          *(_QWORD *)(v7 - 88) = 0;
        }
        *(_QWORD *)(v7 - 104) = __p;
        *(_OWORD *)(v7 - 96) = v469;
        __p = 0;
        v469 = 0uLL;
        v62 = v470;
        v470 = 0;
        v63 = *(void **)(v7 - 80);
        *(_QWORD *)(v7 - 80) = v62;

        v65 = v7 - 40;
        v64 = *(_QWORD **)(v7 - 40);
        *(_WORD *)(v7 - 72) = v471;
        v66 = v472;
        *(_DWORD *)(v7 - 56) = v473;
        *(_QWORD *)(v7 - 64) = v66;
        std::__tree<int>::destroy(v7 - 48, v64);
        *(_QWORD *)(v7 - 48) = v474;
        v67 = v475;
        *(_QWORD *)(v7 - 40) = v475;
        v68 = v476;
        *(_QWORD *)(v7 - 32) = v476;
        if (v68)
        {
          v69 = 0;
          v67[2] = v65;
          v474 = &v475;
          v475 = 0;
          v476 = 0;
        }
        else
        {
          *(_QWORD *)(v7 - 48) = v65;
          v69 = v475;
        }
        *(_DWORD *)(v7 - 16) = v477;
        std::__tree<int>::destroy((uint64_t)&v474, v69);

        if (__p)
          operator delete(__p);
        if (v466[0])
        {
          v466[1] = v466[0];
          operator delete(v466[0]);
        }
        v70 = v29 < (unint64_t)v6;

        a3 = v426;
        v6 = (float *)a2;
        if (v70)
        {
LABEL_44:
          std::__introsort<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,false>(a1, v7 - 304, v426, a4 & 1);
          a4 = 0;
          continue;
        }
        v71 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)a1, (int *)(v7 - 304));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>((int *)v7, a2))
        {
          if (v71)
            continue;
          goto LABEL_44;
        }
        a2 = (int *)(v7 - 304);
        if (!v71)
          goto LABEL_2;
        return;
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(int *a1, int *a2, int *a3)
{
  float *v5;
  float v6;
  float v7;
  int *v8;

  v5 = (float *)a1;
  v6 = *(float *)a2;
  v7 = *(float *)a3;
  if (*(float *)a2 < *(float *)a1)
  {
    if (v7 >= v6)
    {
      std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a2);
      if (*(float *)a3 >= *(float *)a2)
        return;
      a1 = a2;
    }
    v8 = a3;
    goto LABEL_9;
  }
  if (v7 < v6)
  {
    std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a2, a3);
    if (*(float *)a2 < *v5)
    {
      a1 = (int *)v5;
      v8 = a2;
LABEL_9:
      std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, v8);
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(int *a1, int *a2)
{
  unint64_t v4;
  _BOOL8 result;
  int *v6;
  int *v7;
  float *v8;
  int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  __n128 *v28;
  void *v29;
  unint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  char *v37;
  void **v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  float *v47;
  int *v48;
  float v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  void *v61[2];
  uint64_t v62;
  void *__p;
  __int128 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  int v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v4 = 0x86BCA1AF286BCA1BLL * (((char *)a2 - (char *)a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 76;
      if (*((float *)a2 - 76) < *(float *)a1)
      {
        v7 = a1;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a1 + 76, a2 - 76);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a1 + 76, a1 + 152, a2 - 76);
      return 1;
    case 5uLL:
      v47 = (float *)(a1 + 152);
      v48 = a2 - 76;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a1 + 76, a1 + 152, a1 + 228);
      if (*(float *)v48 < *((float *)a1 + 228))
      {
        std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1 + 228, v48);
        if (*((float *)a1 + 228) < *v47)
        {
          std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1 + 152, a1 + 228);
          if (*v47 < *((float *)a1 + 76))
          {
            std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1 + 76, a1 + 152);
            if (*((float *)a1 + 76) < *(float *)a1)
            {
              v7 = a1;
              v6 = a1 + 76;
LABEL_4:
              std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      v8 = (float *)(a1 + 152);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a1 + 76, a1 + 152);
      v9 = a1 + 228;
      if (a1 + 228 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (*(float *)v9 < *v8)
    {
      v49 = *(float *)v9;
      v54 = *((_OWORD *)v9 + 5);
      v55 = *((_OWORD *)v9 + 6);
      v56 = *((_OWORD *)v9 + 7);
      v57 = *((_OWORD *)v9 + 8);
      v50 = *((_OWORD *)v9 + 1);
      v51 = *((_OWORD *)v9 + 2);
      v52 = *((_OWORD *)v9 + 3);
      v53 = *((_OWORD *)v9 + 4);
      v12 = *((_QWORD *)v9 + 18);
      *((_QWORD *)v9 + 18) = 0;
      v58 = v12;
      v59 = v9[38];
      v60 = *((_OWORD *)v9 + 10);
      *(_OWORD *)v61 = *((_OWORD *)v9 + 11);
      *((_OWORD *)v9 + 10) = 0u;
      *((_OWORD *)v9 + 11) = 0u;
      v62 = *((_QWORD *)v9 + 24);
      __p = (void *)*((_QWORD *)v9 + 25);
      v64 = *((_OWORD *)v9 + 13);
      *((_OWORD *)v9 + 12) = 0u;
      *((_OWORD *)v9 + 13) = 0u;
      v13 = *((_QWORD *)v9 + 28);
      *((_QWORD *)v9 + 28) = 0;
      v65 = v13;
      v66 = *((_WORD *)v9 + 116);
      v68 = v9[62];
      v67 = *((_QWORD *)v9 + 30);
      v14 = (_QWORD *)*((_QWORD *)v9 + 33);
      v69 = (_QWORD *)*((_QWORD *)v9 + 32);
      v70 = v14;
      v71 = *((_QWORD *)v9 + 34);
      if (v71)
      {
        v14[2] = &v70;
        *((_QWORD *)v9 + 32) = v9 + 66;
        *((_QWORD *)v9 + 33) = 0;
        *((_QWORD *)v9 + 34) = 0;
      }
      else
      {
        v69 = &v70;
      }
      v72 = v9[72];
      v15 = *v8;
      v16 = v10;
      while (1)
      {
        v17 = v16;
        v18 = (float *)((char *)a1 + v16);
        v18[228] = v15;
        v19 = *(_OWORD *)((char *)a1 + v16 + 704);
        *((_OWORD *)v18 + 62) = *(_OWORD *)((char *)a1 + v16 + 688);
        *((_OWORD *)v18 + 63) = v19;
        v20 = *(_OWORD *)((char *)a1 + v16 + 736);
        *((_OWORD *)v18 + 64) = *(_OWORD *)((char *)a1 + v16 + 720);
        *((_OWORD *)v18 + 65) = v20;
        v21 = *(_OWORD *)((char *)a1 + v16 + 640);
        *((_OWORD *)v18 + 58) = *(_OWORD *)((char *)a1 + v16 + 624);
        *((_OWORD *)v18 + 59) = v21;
        v22 = *(_OWORD *)((char *)a1 + v16 + 672);
        *((_OWORD *)v18 + 60) = *(_OWORD *)((char *)a1 + v16 + 656);
        *((_OWORD *)v18 + 61) = v22;
        v23 = *(_QWORD *)((char *)a1 + v16 + 752);
        *((_QWORD *)v18 + 94) = 0;
        v24 = (void *)*((_QWORD *)v18 + 132);
        *((_QWORD *)v18 + 132) = v23;

        v18[266] = v18[190];
        v25 = *((_QWORD *)v18 + 96);
        *((_QWORD *)v18 + 96) = 0;
        v26 = (void *)*((_QWORD *)v18 + 134);
        *((_QWORD *)v18 + 134) = v25;

        v27 = *((_QWORD *)v18 + 97);
        *((_QWORD *)v18 + 97) = 0;
        v28 = (__n128 *)((char *)a1 + v17);
        v29 = *(void **)((char *)a1 + v17 + 1080);
        *(_QWORD *)((char *)a1 + v17 + 1080) = v27;

        std::vector<float>::__move_assign((uint64_t)&v28[68], v28 + 49);
        std::vector<BOOL>::__move_assign((uint64_t)&v28[69].n128_i64[1], &v28[50].n128_u64[1]);
        v30 = *(_QWORD *)((char *)a1 + v17 + 832);
        v28[52].n128_u64[0] = 0;
        v31 = *(void **)((char *)a1 + v17 + 1136);
        v28[71].n128_u64[0] = v30;

        v32 = (char *)a1 + v17;
        *((_WORD *)v32 + 572) = *(_WORD *)((char *)a1 + v17 + 840);
        *((_QWORD *)v32 + 144) = *(_QWORD *)((char *)a1 + v17 + 848);
        *((_DWORD *)v32 + 290) = *(int *)((char *)a1 + v17 + 856);
        std::__tree<int>::__move_assign((uint64_t)a1 + v17 + 1168, (int *)((char *)a1 + v17 + 864));
        *((_DWORD *)v32 + 300) = *((_DWORD *)v32 + 224);
        if (v17 == -608)
          break;
        v15 = *((float *)v32 + 76);
        v16 = v17 - 304;
        if (v49 >= v15)
        {
          v33 = (uint64_t)a1 + v16 + 912;
          goto LABEL_16;
        }
      }
      v33 = (uint64_t)a1;
LABEL_16:
      *(float *)v33 = v49;
      *((_OWORD *)v32 + 45) = v56;
      *((_OWORD *)v32 + 46) = v57;
      *((_OWORD *)v32 + 43) = v54;
      *((_OWORD *)v32 + 44) = v55;
      *((_OWORD *)v32 + 39) = v50;
      *((_OWORD *)v32 + 40) = v51;
      *((_OWORD *)v32 + 41) = v52;
      *((_OWORD *)v32 + 42) = v53;
      v34 = *(void **)(v33 + 144);
      *(_QWORD *)(v33 + 144) = v58;

      *(_DWORD *)(v33 + 152) = v59;
      v35 = *(void **)(v33 + 160);
      *(_QWORD *)(v33 + 160) = v60;

      v36 = *(void **)(v33 + 168);
      *(_QWORD *)(v33 + 168) = *((_QWORD *)&v60 + 1);

      v37 = (char *)a1 + v17;
      v38 = (void **)((char *)a1 + v17 + 784);
      v39 = *v38;
      if (*v38)
      {
        *(_QWORD *)(v33 + 184) = v39;
        operator delete(v39);
        *v38 = 0;
        *(_QWORD *)((char *)a1 + v17 + 792) = 0;
        *(_QWORD *)((char *)a1 + v17 + 800) = 0;
      }
      v40 = v37 + 808;
      *v38 = v61[0];
      *(void **)(v33 + 184) = v61[1];
      *(_QWORD *)(v33 + 192) = v62;
      v41 = (void *)*((_QWORD *)v37 + 101);
      if (v41)
      {
        operator delete(v41);
        *v40 = 0;
        *((_QWORD *)v37 + 102) = 0;
        *((_QWORD *)v37 + 103) = 0;
      }
      *v40 = __p;
      *(_OWORD *)(v33 + 208) = v64;
      v42 = *(void **)(v33 + 224);
      *(_QWORD *)(v33 + 224) = v65;

      *(_WORD *)(v33 + 232) = v66;
      *((_DWORD *)v37 + 214) = v68;
      *((_QWORD *)v37 + 106) = v67;
      v43 = v33 + 264;
      std::__tree<int>::destroy((uint64_t)(v37 + 864), *(_QWORD **)(v33 + 264));
      v44 = v70;
      *((_QWORD *)v37 + 108) = v69;
      v45 = v71;
      *(_QWORD *)(v33 + 264) = v44;
      *(_QWORD *)(v33 + 272) = v45;
      if (v45)
      {
        v46 = 0;
        v44[2] = v43;
        v69 = &v70;
        v70 = 0;
        v71 = 0;
      }
      else
      {
        *((_QWORD *)v37 + 108) = v43;
        v46 = v70;
      }
      *(_DWORD *)(v33 + 288) = v72;
      std::__tree<int>::destroy((uint64_t)&v69, v46);

      ++v11;
      if (v11 == 8)
        return v9 + 76 == a2;
    }
    v8 = (float *)v9;
    v10 += 304;
    v9 += 76;
    if (v9 == a2)
      return 1;
  }
}

void std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(int *a1, int *a2)
{
  void *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  int *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  int v48;
  __int128 v49;
  void *v50[2];
  uint64_t v51;
  void *__p;
  __int128 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v38 = *a1;
  v43 = *((_OWORD *)a1 + 5);
  v44 = *((_OWORD *)a1 + 6);
  v45 = *((_OWORD *)a1 + 7);
  v46 = *((_OWORD *)a1 + 8);
  v39 = *((_OWORD *)a1 + 1);
  v40 = *((_OWORD *)a1 + 2);
  v41 = *((_OWORD *)a1 + 3);
  v42 = *((_OWORD *)a1 + 4);
  v4 = (void *)*((_QWORD *)a1 + 18);
  *((_QWORD *)a1 + 18) = 0;
  v47 = v4;
  v48 = a1[38];
  v5 = *((_OWORD *)a1 + 10);
  *((_OWORD *)a1 + 10) = 0u;
  v6 = (uint64_t)(a1 + 44);
  v49 = v5;
  *(_OWORD *)v50 = *((_OWORD *)a1 + 11);
  v7 = *((_QWORD *)a1 + 24);
  *((_OWORD *)a1 + 11) = 0u;
  v8 = (uint64_t)(a1 + 50);
  v51 = v7;
  __p = (void *)*((_QWORD *)a1 + 25);
  v53 = *((_OWORD *)a1 + 13);
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  v9 = *((_QWORD *)a1 + 28);
  *((_QWORD *)a1 + 28) = 0;
  v54 = v9;
  v10 = a1 + 60;
  v55 = *((_WORD *)a1 + 116);
  v57 = a1[62];
  v56 = *((_QWORD *)a1 + 30);
  v11 = (_QWORD *)*((_QWORD *)a1 + 33);
  v58 = (_QWORD *)*((_QWORD *)a1 + 32);
  v59 = v11;
  v60 = *((_QWORD *)a1 + 34);
  v37 = (uint64_t)(a1 + 64);
  if (v60)
  {
    v11[2] = &v59;
    *((_QWORD *)a1 + 32) = a1 + 66;
    *((_QWORD *)a1 + 33) = 0;
    *((_QWORD *)a1 + 34) = 0;
  }
  else
  {
    v58 = &v59;
  }
  v61 = a1[72];
  *a1 = *a2;
  v12 = *((_OWORD *)a2 + 5);
  v13 = *((_OWORD *)a2 + 6);
  v14 = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 8) = v14;
  *((_OWORD *)a1 + 5) = v12;
  *((_OWORD *)a1 + 6) = v13;
  v15 = *((_OWORD *)a2 + 1);
  v16 = *((_OWORD *)a2 + 2);
  v17 = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 4) = v17;
  *((_OWORD *)a1 + 1) = v15;
  *((_OWORD *)a1 + 2) = v16;
  v19 = (void **)(a2 + 36);
  v18 = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = 0;
  v20 = (void *)*((_QWORD *)a1 + 18);
  *((_QWORD *)a1 + 18) = v18;

  v21 = *((_QWORD *)a2 + 20);
  a1[38] = a2[38];
  *((_QWORD *)a2 + 20) = 0;
  v22 = (void *)*((_QWORD *)a1 + 20);
  *((_QWORD *)a1 + 20) = v21;

  v23 = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = 0;
  v24 = (void *)*((_QWORD *)a1 + 21);
  *((_QWORD *)a1 + 21) = v23;

  std::vector<float>::__move_assign(v6, (__n128 *)a2 + 11);
  std::vector<BOOL>::__move_assign(v8, (_QWORD *)a2 + 25);
  v25 = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = 0;
  v26 = (void *)*((_QWORD *)a1 + 28);
  *((_QWORD *)a1 + 28) = v25;

  *((_WORD *)a1 + 116) = *((_WORD *)a2 + 116);
  v27 = *((_QWORD *)a2 + 30);
  v10[2] = a2[62];
  *(_QWORD *)v10 = v27;
  std::__tree<int>::__move_assign(v37, (_QWORD *)a2 + 32);
  a1[72] = a2[72];
  *a2 = v38;
  *((_OWORD *)a2 + 5) = v43;
  *((_OWORD *)a2 + 6) = v44;
  *((_OWORD *)a2 + 7) = v45;
  *((_OWORD *)a2 + 8) = v46;
  *((_OWORD *)a2 + 1) = v39;
  *((_OWORD *)a2 + 2) = v40;
  *((_OWORD *)a2 + 3) = v41;
  *((_OWORD *)a2 + 4) = v42;
  v28 = *v19;
  *v19 = v47;

  a2[38] = v48;
  v29 = (void *)*((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v49;

  v30 = (void *)*((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = *((_QWORD *)&v49 + 1);

  v31 = (void *)*((_QWORD *)a2 + 22);
  if (v31)
  {
    *((_QWORD *)a2 + 23) = v31;
    operator delete(v31);
  }
  *((_OWORD *)a2 + 11) = *(_OWORD *)v50;
  *((_QWORD *)a2 + 24) = v51;
  v32 = (void *)*((_QWORD *)a2 + 25);
  if (v32)
    operator delete(v32);
  *((_QWORD *)a2 + 25) = __p;
  *((_OWORD *)a2 + 13) = v53;
  v33 = (void *)*((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v54;

  *((_WORD *)a2 + 116) = v55;
  *((_QWORD *)a2 + 30) = v56;
  a2[62] = v57;
  v34 = a2 + 66;
  std::__tree<int>::destroy((uint64_t)(a2 + 64), *((_QWORD **)a2 + 33));
  v35 = v59;
  *((_QWORD *)a2 + 32) = v58;
  *((_QWORD *)a2 + 33) = v35;
  v36 = v60;
  *((_QWORD *)a2 + 34) = v60;
  if (v36)
  {
    v35[2] = v34;
    v35 = 0;
    v58 = &v59;
    v59 = 0;
    v60 = 0;
  }
  else
  {
    *((_QWORD *)a2 + 32) = v34;
  }
  a2[72] = v61;
  std::__tree<int>::destroy((uint64_t)&v58, v35);

}

void std::__tree<int>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<int>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(int *a1, int *a2, int *a3, int *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::$_0 &,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a2, a3);
  if (*(float *)a4 < *(float *)a3)
  {
    std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a3, a4);
    if (*(float *)a3 < *(float *)a2)
    {
      std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a2, a3);
      if (*(float *)a2 < *(float *)a1)
        std::iter_swap[abi:ne180100]<OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *,OU3DKitchenObjectMerger::SortBasedOnDistance(std::vector<float> const&,std::vector<OU3DKitchenObject> const&,std::vector<int> const&)::SortInfo *>(a1, a2);
    }
  }
}

uint64_t OUBox3d::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  objc_storeStrong((id *)(a1 + 128), *((id *)a2 + 16));
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  objc_storeStrong((id *)(a1 + 144), *((id *)a2 + 18));
  objc_storeStrong((id *)(a1 + 152), *((id *)a2 + 19));
  if ((__int128 *)a1 != a2)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 160), *((char **)a2 + 20), *((_QWORD *)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 2);
  std::vector<BOOL>::operator=((void **)(a1 + 184), (uint64_t)a2 + 184);
  objc_storeStrong((id *)(a1 + 208), *((id *)a2 + 26));
  *(_WORD *)(a1 + 216) = *((_WORD *)a2 + 108);
  return a1;
}

void **std::vector<BOOL>::operator=(void **a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  void *v6;

  if (a1 != (void **)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      if (v4 > (_QWORD)a1[2] << 6)
      {
        v5 = *a1;
        if (*a1)
        {
          operator delete(v5);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
          v4 = *(_QWORD *)(a2 + 8);
        }
        std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
        v4 = *(_QWORD *)(a2 + 8);
      }
      memmove(*a1, *(const void **)a2, (((v4 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v6 = *(void **)(a2 + 8);
    }
    else
    {
      v6 = 0;
    }
    a1[1] = v6;
  }
  return a1;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<OUBox3d>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 224;
    v4 -= 14;
    std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(224 * a2);
}

__n128 std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  v9 = a2[9];
  a2[9] = 0u;
  *(_OWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  result = (__n128)a2[10];
  *(__n128 *)(a1 + 160) = result;
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = 0;
  a2[10] = 0u;
  v11 = *((_QWORD *)a2 + 24);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *(_QWORD *)(a1 + 192) = v11;
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *(__int128 *)((char *)a2 + 184) = 0u;
  v12 = *((_QWORD *)a2 + 26);
  *(__int128 *)((char *)a2 + 200) = 0u;
  *(_QWORD *)(a1 + 208) = v12;
  *(_WORD *)(a1 + 216) = *((_WORD *)a2 + 108);
  return result;
}

void std::__destroy_at[abi:ne180100]<OUBox3d,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 184);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }

}

uint64_t std::__split_buffer<OUBox3d>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 224;
    std::__destroy_at[abi:ne180100]<OUBox3d,0>(i - 224);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(uint64_t *a1, const OUBox3d *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  OUBox3d *v14;
  vector<float, std::allocator<float>> *p_var5;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x92492492492492)
    v9 = 0x124924924924924;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (OUBox3d *)&v10[224 * v4];
  v16 = &v10[224 * v9];
  OUBox3d::OUBox3d(v14, a2);
  p_var5 = &v14[2].var5;
  std::vector<OUBox3d>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_2294D95C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 224;
        std::__destroy_at[abi:ne180100]<OUBox3d,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::map<int,std::set<int>>::at(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F242638, MEMORY[0x24BEDAB00]);
}

void sub_2294D96D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t std::deque<OU3DKitchenObject>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 4];
    v7 = (uint64_t)*v6 + 272 * (v5 & 0xF);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 272 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(v7);
        v7 += 272;
        if (v7 - (_QWORD)*v6 == 4352)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 8;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 16;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<OU3DKitchenObject *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<OU3DKitchenObject *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void std::deque<OU3DKitchenObject>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1100uLL);
      std::__split_buffer<OU3DKitchenObject *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1100uLL);
    std::__split_buffer<OU3DKitchenObject *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = _ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1100uLL);
  std::__split_buffer<OU3DKitchenObject *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<OU3DKitchenObject *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_2294D9B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<OU3DKitchenObject *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<OU3DKitchenObject *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t std::deque<OU3DKitchenObject>::__move_assign(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = (void **)a1[2];
  if (v5 == v4)
  {
    v6 = a1 + 5;
    v5 = (void **)a1[1];
  }
  else
  {
    v6 = a1 + 5;
    v7 = a1[4];
    v8 = &v4[v7 >> 4];
    v9 = (uint64_t)*v8 + 272 * (v7 & 0xF);
    v10 = *(uint64_t *)((char *)v4 + (((a1[5] + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 272 * ((*((_DWORD *)a1 + 10) + (int)v7) & 0xF);
    if (v9 != v10)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<OU3DKitchenObject,0>(v9);
        v9 += 272;
        if (v9 - (_QWORD)*v8 == 4352)
        {
          v11 = (uint64_t)v8[1];
          ++v8;
          v9 = v11;
        }
      }
      while (v9 != v10);
      v4 = (void **)a1[1];
      v5 = (void **)a1[2];
    }
  }
  *v6 = 0;
  v12 = (char *)v5 - (char *)v4;
  if (v12 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v13 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v12 = v13 - (_QWORD)v4;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    v14 = 8;
    goto LABEL_14;
  }
  if (v12 >> 3 == 2)
  {
    v14 = 16;
LABEL_14:
    a1[4] = v14;
  }
  std::deque<OU3DKitchenObject>::shrink_to_fit(a1);
  result = std::__split_buffer<OU3DKitchenObject *>::operator=((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void std::deque<OU3DKitchenObject>::shrink_to_fit(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    std::deque<OU3DKitchenObject>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<OU3DKitchenObject>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  std::__split_buffer<OU3DKitchenObject *>::shrink_to_fit((uint64_t)a1);
}

uint64_t std::deque<OU3DKitchenObject>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x10)
    a2 = 1;
  if (v2 < 0x20)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 16;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<OU3DKitchenObject>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 2 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x10)
    a2 = 1;
  if (v5 < 0x20)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__split_buffer<OU3DKitchenObject *>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t std::__split_buffer<OU3DKitchenObject *>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<OU3DKitchenObject *>::shrink_to_fit(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_2294DA69C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t **std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(uint64_t **result, int *a2, int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  int *v10;
  BOOL v11;
  int *v12;
  int *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<int>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          std::__tree<int>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<int>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (int *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (int *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<int>::__emplace_multi<int const&>(v5, a2 + 7);
      v12 = (int *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (int *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_2294DAAE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<int>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<int>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_QWORD *std::__tree<int>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<int>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<int>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<int>::__emplace_multi<int const&>(uint64_t **a1, int *a2)
{
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<int>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::destroy(a1, a2[1]);
    std::__tree<int>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 12;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<int>::__assign_unique<int const*>(uint64_t **result, int *a2, int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t i;
  char v11;
  _QWORD v12[3];

  v5 = result;
  if (result[2])
  {
    v12[0] = result;
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = v6[1];
    else
      v8 = (uint64_t)v6;
    if (!v8)
    {
      v9 = 0;
      goto LABEL_16;
    }
    v9 = std::__tree<int>::_DetachedTreeCache::__detach_next(v8);
    for (i = (uint64_t)v9; a2 != a3; ++a2)
    {
      std::__tree<int>::__node_assign_unique(v5, a2, v8);
      if ((v11 & 1) != 0)
      {
        if (!i)
        {
          v9 = 0;
          v8 = 0;
          ++a2;
          break;
        }
        v9 = std::__tree<int>::_DetachedTreeCache::__detach_next(i);
        v8 = i;
        i = (uint64_t)v9;
      }
      else
      {
        v9 = (_QWORD *)i;
      }
    }
LABEL_16:
    v12[1] = v9;
    v12[2] = v8;
    result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)v12);
  }
  while (a2 != a3)
  {
    result = std::__tree<int>::__emplace_unique_key_args<int,int const&>(v5, a2, a2);
    ++a2;
  }
  return result;
}

uint64_t **std::__tree<int>::__node_assign_unique(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  int v6;
  uint64_t **v7;
  int v8;

  v4 = a1 + 1;
  v5 = a1[1];
  v6 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v6 >= v8)
          break;
        v5 = *v7;
        v4 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= v6)
        return v7;
      v5 = v7[1];
      if (!v5)
      {
        v4 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    *(_DWORD *)(a3 + 28) = v6;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v7, v4, (uint64_t *)a3);
  }
  return (uint64_t **)a3;
}

uint64_t std::__tree<int>::__erase_unique<int>(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  std::__tree<int>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *std::__tree<int>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void _GLOBAL__sub_I_OU3DKitchenObjectMerger_mm()
{
  void *v0;
  char *v1;
  uint64_t v2;
  uint64_t i;
  char *v4;
  uint64_t v5;
  uint64_t j;
  __CFString *v7;
  _QWORD *v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x22E2CB070]();
  v9 = CFSTR("Refrigerator");
  v10 = CFSTR("Oven");
  v11 = CFSTR("Dishwasher");
  v12 = CFSTR("Stove");
  qword_2540CA110 = 0;
  qword_2540CA118 = 0;
  v1 = (char *)operator new(0x20uLL);
  v2 = 0;
  qword_2540CA110 = (uint64_t)v1;
  qword_2540CA118 = (uint64_t)(v1 + 32);
  do
  {
    *(_QWORD *)&v1[v2] = *(__CFString **)((char *)&v9 + v2);
    v2 += 8;
  }
  while (v2 != 32);
  qword_2540CA110 = (uint64_t)(v1 + 32);
  for (i = 24; i != -8; i -= 8)

  v9 = CFSTR("Stool");
  v10 = CFSTR("Chair");
  v11 = CFSTR("Bed");
  v12 = CFSTR("Washer");
  v13 = CFSTR("Toilet");
  v14 = CFSTR("Bathtub");
  v15 = CFSTR("Fireplace");
  v16 = CFSTR("Table");
  v17 = CFSTR("Screen");
  v18 = CFSTR("Sofa");
  v19 = CFSTR("Stairs");
  v20 = CFSTR("Window");
  v21 = CFSTR("Door");
  qword_2540CA0F8 = 0;
  qword_2540CA100 = 0;
  v4 = (char *)operator new(0x68uLL);
  v5 = 0;
  qword_2540CA0F8 = (uint64_t)v4;
  qword_2540CA100 = (uint64_t)(v4 + 104);
  do
  {
    *(_QWORD *)&v4[v5] = *(__CFString **)((char *)&v9 + v5);
    v5 += 8;
  }
  while (v5 != 104);
  qword_2540CA0F8 = (uint64_t)(v4 + 104);
  for (j = 96; j != -8; j -= 8)

  v7 = CFSTR("Sink");
  qword_2540CA140 = 0;
  unk_2540CA148 = 0;
  LOBYTE(v10) = 0;
  v8 = operator new(8uLL);
  *v8 = v7;
  qword_2540CA140 = (uint64_t)(v8 + 1);
  unk_2540CA148 = v8 + 1;
  objc_autoreleasePoolPop(v0);
}

void sub_2294DB6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

uint64_t ou3dor::OU3DLShapeSofaOfflineMerger::GetLShapeMergeInfo(ou3dor::OU3DLShapeSofaOfflineMerger *this)
{
  return (uint64_t)ou3dod::HistoryMergeInfo::Get(this) + 40;
}

__int128 *ou3dod::HistoryMergeInfo::Get(ou3dod::HistoryMergeInfo *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    ou3dod::HistoryMergeInfo::Get(void)::history_merge_info = 0u;
    *(_OWORD *)algn_255A52D30 = 0u;
    dword_255A52D40 = 1065353216;
    unk_255A52D48 = 0u;
    unk_255A52D58 = 0u;
    dword_255A52D68 = 1065353216;
    __cxa_atexit((void (*)(void *))ou3dod::HistoryMergeInfo::~HistoryMergeInfo, &ou3dod::HistoryMergeInfo::Get(void)::history_merge_info, &dword_2294C8000);
  }
  return &ou3dod::HistoryMergeInfo::Get(void)::history_merge_info;
}

void ou3dor::OU3DLShapeSofaOfflineMerger::MergeLShape(ou3dod::HistoryMergeInfo *a1@<X0>, const OUBox3d **a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  __int128 *v7;
  ou3dod::HistoryMergeInfo *v8;
  __int128 *v9;
  uint64_t *v10;
  const OUBox3d *v11;
  const OUBox3d *v12;
  OUBox3d *v13;
  OUBox3d *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  OUBox3d *v18;
  OUBox3d *v19;
  int v20;
  unint64_t v21;
  OUBox3d *v22;
  OUBox3d *v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t *v26;
  float32x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  float32x2_t *v31;
  char *v32;
  char *v33;
  float32x2_t v34;
  OUBox3d *v35;
  float32x4_t *v36;
  OUBox3d *v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  id v46;
  unsigned __int8 *v47;
  const box3d *v48;
  float32x2_t v49;
  const box3d *v50;
  float32x2_t v51;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float v65;
  float v66;
  float v67;
  const box3d *v68;
  _BOOL4 IsBoxSurfaceAttached;
  double v70;
  _BOOL4 v71;
  float v72;
  float v73;
  uint64_t v74;
  NSObject *v75;
  _QWORD *j;
  unint64_t v77;
  unint64_t v78;
  uint64_t k;
  unint64_t m;
  const OUBox3d *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  int v86;
  __int128 v87;
  __int128 v88;
  int v89;
  void *v90;
  float32x2_t *v91;
  float32x2_t *v92;
  OUBox3d *v93;
  OUBox3d *v94;
  unint64_t v95;
  __int128 v96;
  _OWORD v97[3];
  float32x4_t v98[8];
  float32x4_t v99[8];
  float32x4_t v100[8];
  void *__p[2];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _QWORD v109[2];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v7 = ou3dod::HistoryMergeInfo::Get(a1);
  std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::clear((uint64_t)v7 + 40);
  v9 = ou3dod::HistoryMergeInfo::Get(v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)v9);
  v93 = 0;
  v94 = 0;
  v95 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v10 = a4;
  v12 = *a2;
  v11 = a2[1];
  if (*a2 == v11)
  {
    v19 = 0;
    v18 = 0;
  }
  else
  {
    do
    {
      if (objc_msgSend(v12[1].var5.var0, "isEqualToString:", CFSTR("Sofa")))
      {
        v13 = v94;
        if ((unint64_t)v94 >= v95)
        {
          v14 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>((uint64_t *)&v93, v12);
        }
        else
        {
          OUBox3d::OUBox3d(v94, v12);
          v14 = (OUBox3d *)((char *)v13 + 224);
        }
        v94 = v14;
      }
      else
      {
        v15 = v10[1];
        if (v15 >= v10[2])
        {
          v16 = std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(v10, v12);
          v17 = v10;
        }
        else
        {
          OUBox3d::OUBox3d((OUBox3d *)v10[1], v12);
          v16 = v15 + 224;
          v17 = v10;
          v10[1] = v15 + 224;
        }
        v17[1] = v16;
      }
      v12 = (const OUBox3d *)((char *)v12 + 224);
    }
    while (v12 != v11);
    v19 = v93;
    v18 = v94;
  }
  v20 = -1227133513 * (((char *)v18 - (char *)v19) >> 5);
  std::vector<OUBox3d>::reserve(v10, v20);
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v23 = v93;
  v22 = v94;
  v85 = v20;
  v86 = v20;
  if (v93 == v94)
    goto LABEL_39;
  do
  {
    v24 = ou3dod::ComputeHeadingDirection((float32x4_t *)v23, (const box3d *)v21);
    v25 = v24;
    v26 = v91;
    if (v91 >= v92)
    {
      v28 = ((char *)v91 - (_BYTE *)v90) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v29 = ((char *)v92 - (_BYTE *)v90) >> 2;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      if ((unint64_t)((char *)v92 - (_BYTE *)v90) >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v29;
      if (v21)
        v30 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v92, v21);
      else
        v30 = 0;
      v31 = (float32x2_t *)&v30[8 * v28];
      *v31 = v25;
      v27 = v31 + 1;
      v33 = (char *)v90;
      v32 = (char *)v91;
      if (v91 != v90)
      {
        do
        {
          v34 = *(float32x2_t *)(v32 - 8);
          v32 -= 8;
          v31[-1] = v34;
          --v31;
        }
        while (v32 != v33);
        v32 = (char *)v90;
      }
      v90 = v31;
      v91 = v27;
      v92 = (float32x2_t *)&v30[8 * v21];
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v91 = v24;
      v27 = v26 + 1;
    }
    v91 = v27;
    v23 = (OUBox3d *)((char *)v23 + 224);
  }
  while (v23 != v22);
  v35 = v93;
  v23 = v94;
  if (v93 == v94)
  {
LABEL_39:
    v110 = 0;
    v111 = 0;
    v37 = v23;
    v112 = 0;
  }
  else
  {
    do
    {
      ou3dod::MaybeReorderObjectCorner(&v35->var1, (OUBox3d *)v21);
      v35 = (OUBox3d *)((char *)v35 + 224);
    }
    while (v35 != v23);
    v36 = (float32x4_t *)v93;
    v23 = v94;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    if (v93 == v94)
    {
      v37 = v94;
    }
    else
    {
      do
      {
        box3dToCentroidSizeAngle(v36, (uint64_t *)__p);
        std::vector<std::vector<float>>::push_back[abi:ne180100](&v110, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v36 += 14;
      }
      while (v36 != (float32x4_t *)v23);
      v23 = v93;
      v37 = v94;
    }
  }
  v87 = 0u;
  v88 = 0u;
  v89 = 1065353216;
  v38 = (unint64_t)(-1227133513 * ((unint64_t)((char *)v37 - (char *)v23) >> 5)) << 32;
  v39 = v10;
  if (v38)
  {
    v40 = 0;
    v41 = v38 >> 32;
    if (v41 <= 1)
      v42 = 1;
    else
      v42 = v41;
    do
    {
      v43 = 0;
      v44 = 0;
      for (i = 0; i != v42; ++i)
      {
        objc_msgSend(*(id *)((char *)&v93[1].var5.var2.var0 + v44), "UUIDString", v85);
        v46 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v46, "UTF8String"));
        v47 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, (unsigned __int8 *)__p);
        if (SBYTE7(v102) < 0)
          operator delete(__p[0]);

        v39 = v10;
        if (v40 != i)
        {
          if (v47)
          {
            v109[0] = i;
            v109[1] = v40;
            if (!std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::find<std::pair<unsigned long,unsigned long>>(&v87, v109))
            {
              v49 = ou3dod::ComputeHeadingDirection((float32x4_t *)v93 + 14 * v40, v48);
              v51 = ou3dod::ComputeHeadingDirection((float32x4_t *)((char *)v93 + v44), v50);
              v52 = (__int128 *)((char *)v93 + 224 * v40);
              v53 = v52[3];
              v55 = *v52;
              v54 = v52[1];
              v103 = v52[2];
              v104 = v53;
              *(_OWORD *)__p = v55;
              v102 = v54;
              v56 = v52[7];
              v58 = v52[4];
              v57 = v52[5];
              v107 = v52[6];
              v108 = v56;
              v105 = v58;
              v106 = v57;
              v59 = *(float32x4_t *)((char *)&v93->var1 + v44);
              v60 = *(float32x4_t *)((char *)&v93->var3 + v44);
              v61 = *(float32x4_t *)((char *)&v93->var5.var2.var0 + v44);
              v100[2] = *(float32x4_t *)((char *)&v93->var5.var0 + v44);
              v100[3] = v61;
              v100[0] = v59;
              v100[1] = v60;
              v62 = *(float32x4_t *)((char *)&v93->var6.var1 + v44);
              v63 = *(float32x4_t *)((char *)&v93->var7 + v44);
              v64 = *(float32x4_t *)((char *)&v93[1].var3 + v44);
              v100[6] = *(float32x4_t *)((char *)&v93[1].var1 + v44);
              v100[7] = v64;
              v100[4] = v62;
              v100[5] = v63;
              memset(v99, 0, sizeof(v99));
              box3dEnlarge((float32x4_t *)__p, 0.3, 0.1, 0.0, v99);
              memset(v98, 0, sizeof(v98));
              box3dEnlarge(v100, 0.3, 0.1, 0.0, v98);
              memset(v97, 0, sizeof(v97));
              box3dIou(v99, v98, 0, (uint64_t)v97);
              v65 = *(float *)(*(_QWORD *)(v110 + 24 * v40) + 8);
              v66 = *(float *)(*(_QWORD *)(v110 + v43) + 8);
              v67 = *(float *)v97;
              IsBoxSurfaceAttached = ou3dod::IsBoxSurfaceAttached((float32x4_t *)v93 + 14 * v40, (const box3d *)((char *)v93 + v44), v68);
              v70 = fabsf(vaddv_f32(vmul_f32(v49, v51)));
              v71 = v70 >= 0.173;
              v72 = vabds_f32(v65, v66);
              if (v70 > 0.9848)
                v71 = 0;
              if (v72 >= 0.7)
                v71 = 1;
              if (v67 <= 0.0)
                v71 = 1;
              if (!v71 && !IsBoxSurfaceAttached)
              {
                if (v70 > 0.9848)
                {
                  v73 = boxVolume((const box3d *)((char *)v93 + 224 * v40));
                  if (v73 >= boxVolume((const box3d *)((char *)v93 + v44)))
                    v74 = i;
                  else
                    v74 = v40;
                  ou3dod::ShiftBoxCorner((uint64_t)v93 + 224 * v74, (box3d *)1);
                }
                *(_QWORD *)&v96 = v40;
                *((_QWORD *)&v96 + 1) = i;
                std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v87, &v96, &v96);
              }
            }
          }
        }
        v44 += 224;
        v43 += 24;
      }
      ++v40;
    }
    while (v40 != v42);
  }
  __p[0] = &v110;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v75 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
    ou3dor::OU3DLShapeSofaOfflineMerger::MergeLShape((uint64_t)&v87, v75);

  v100[0].i8[0] = 0;
  std::vector<BOOL>::vector(__p, v85, (unsigned __int8 *)v100);
  for (j = (_QWORD *)v88; j; j = (_QWORD *)*j)
  {
    v77 = j[2];
    if (((*(_QWORD *)((char *)__p[0] + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v77) & 1) == 0)
    {
      v78 = j[3];
      if (((*(_QWORD *)((char *)__p[0] + ((v78 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v78) & 1) == 0
        && ou3dod::MaybeClipExtendLShapeObjects(v39, j[2], j[3], 0, 1, (uint64_t *)&v93, __p, 1) == 6)
      {
        ou3dod::MaybeClipExtendLShapeObjects(v39, v78, v77, 0, 1, (uint64_t *)&v93, __p, 1);
      }
    }
  }
  if (v86 >= 1)
  {
    for (k = 0; k != v86; ++k)
      ou3dod::MaybeReorderBackObjectCorner((float32x4_t *)v93 + 14 * k, *(float32x2_t *)((char *)v90 + 8 * k));
    for (m = 0; m != v86; ++m)
    {
      if (((*(_QWORD *)((char *)__p[0] + ((m >> 3) & 0x1FFFFFFFFFFFFFF8)) >> m) & 1) == 0)
      {
        v81 = (OUBox3d *)((char *)v93 + 224 * m);
        v82 = v10[1];
        if (v82 >= v10[2])
        {
          v83 = std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(v10, v81);
          v84 = v10;
        }
        else
        {
          OUBox3d::OUBox3d((OUBox3d *)v10[1], v81);
          v83 = v82 + 224;
          v84 = v10;
          v10[1] = v82 + 224;
        }
        v84[1] = v83;
      }
    }
  }
  if (__p[0])
    operator delete(__p[0]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v87);
  if (v90)
  {
    v91 = (float32x2_t *)v90;
    operator delete(v90);
  }
  __p[0] = &v93;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_2294DBF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  unint64_t v22;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a13);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  STACK[0x240] = v22;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  STACK[0x240] = (unint64_t)&a22;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void ou3dod::HistoryMergeInfo::~HistoryMergeInfo(ou3dod::HistoryMergeInfo *this)
{
  std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,BOOL>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,BOOL>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2294DC324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

_QWORD *std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::find<std::pair<unsigned long,unsigned long>>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1];
  v4 = v3 ^ *a2;
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = v3 ^ *a2;
    if (v4 >= *(_QWORD *)&v2)
      v6 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v6 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  result = (_QWORD *)*v7;
  if (*v7)
  {
    do
    {
      v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a2 && result[3] == v3)
          return result;
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v2)
            v9 %= *(_QWORD *)&v2;
        }
        else
        {
          v9 &= *(_QWORD *)&v2 - 1;
        }
        if (v9 != v6)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = a2[1];
  v7 = v6 ^ *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v6 ^ *a2;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == v6)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_42:
    *v21 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2294DCEA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t std::unordered_map<int,NSString * {__strong}>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::__emplace_unique_key_args<int,std::pair<int const,NSString * {__strong}> const&>(a1, a2, (uint64_t)a2);
      a2 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_2294DD1DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::__emplace_unique_key_args<int,std::pair<int const,NSString * {__strong}> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  v10[3] = *(id *)(a3 + 8);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_2294DD424(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,NSString * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,NSString * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<int,SemanticLabelv5>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<int,SemanticLabelv5>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SemanticLabelv5>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SemanticLabelv5>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SemanticLabelv5>>>::__emplace_unique_key_args<int,std::pair<int const,SemanticLabelv5> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_2294DD558(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,SemanticLabelv5>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SemanticLabelv5>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SemanticLabelv5>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SemanticLabelv5>>>::__emplace_unique_key_args<int,std::pair<int const,SemanticLabelv5> const&>(uint64_t a1, int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_2294DD770(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void _GLOBAL__sub_I_OU3DLShapeSofaOfflineMerger_mm()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t i;
  uint64_t j;
  void *context;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __CFString *v36;
  int v37;
  __CFString *v38;
  int v39;
  __CFString *v40;
  int v41;
  __CFString *v42;
  int v43;
  __CFString *v44;
  int v45;
  __CFString *v46;
  int v47;
  __CFString *v48;
  int v49;
  __CFString *v50;
  int v51;
  __CFString *v52;
  int v53;
  id v54;
  int v55;
  __CFString *v56;
  int v57;
  __CFString *v58;
  int v59;
  __CFString *v60;
  int v61;
  __CFString *v62;
  int v63;
  __CFString *v64;
  int v65;
  id v66;
  int v67;
  __CFString *v68;
  int v69;
  id v70;
  int v71;
  __CFString *v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x22E2CB070]();
  LODWORD(v21) = 0;
  *((_QWORD *)&v21 + 1) = CFSTR("Unknown");
  LODWORD(v22) = 1;
  *((_QWORD *)&v22 + 1) = *((id *)&v21 + 1);
  LODWORD(v23) = 2;
  *((_QWORD *)&v23 + 1) = *((id *)&v22 + 1);
  LODWORD(v24) = 3;
  *((_QWORD *)&v24 + 1) = *((id *)&v23 + 1);
  LODWORD(v25) = 4;
  *((_QWORD *)&v25 + 1) = *((id *)&v24 + 1);
  LODWORD(v26) = 5;
  *((_QWORD *)&v26 + 1) = *((id *)&v25 + 1);
  LODWORD(v27) = 6;
  v20 = CFSTR("Door");
  *((_QWORD *)&v27 + 1) = v20;
  LODWORD(v28) = 7;
  v19 = CFSTR("Window");
  *((_QWORD *)&v28 + 1) = v19;
  LODWORD(v29) = 8;
  *((_QWORD *)&v29 + 1) = *((id *)&v26 + 1);
  LODWORD(v30) = 9;
  v17 = CFSTR("Fireplace");
  *((_QWORD *)&v30 + 1) = v17;
  LODWORD(v31) = 10;
  *((_QWORD *)&v31 + 1) = *((id *)&v29 + 1);
  LODWORD(v32) = 11;
  *((_QWORD *)&v32 + 1) = *((id *)&v31 + 1);
  LODWORD(v33) = 12;
  v18 = CFSTR("Stairs");
  *((_QWORD *)&v33 + 1) = v18;
  LODWORD(v34) = 13;
  v13 = CFSTR("Bed");
  *((_QWORD *)&v34 + 1) = v13;
  LODWORD(v35) = 14;
  v36 = CFSTR("Cabinet");
  v37 = 15;
  v16 = CFSTR("Chair");
  v38 = v16;
  v39 = 16;
  v40 = v36;
  v41 = 17;
  v42 = v40;
  v43 = 18;
  v15 = CFSTR("Sofa");
  v44 = v15;
  v45 = 19;
  v14 = CFSTR("Table");
  v46 = v14;
  v47 = 20;
  v12 = CFSTR("Toilet");
  v48 = v12;
  v49 = 21;
  v0 = CFSTR("Sink");
  v50 = v0;
  v51 = 22;
  v11 = CFSTR("Bathtub");
  v52 = v11;
  v53 = 23;
  v54 = *((id *)&v32 + 1);
  v55 = 24;
  v1 = CFSTR("Refrigerator");
  v56 = v1;
  v57 = 25;
  v2 = CFSTR("Stove");
  v58 = v2;
  v59 = 26;
  v3 = CFSTR("Washer");
  v60 = v3;
  v61 = 27;
  v4 = CFSTR("Oven");
  v62 = v4;
  v63 = 28;
  v5 = CFSTR("Dishwasher");
  v64 = v5;
  v65 = 29;
  v66 = v54;
  v67 = 30;
  v6 = v42;
  v68 = v6;
  v69 = 31;
  v70 = v66;
  v71 = 32;
  v7 = CFSTR("Screen");
  v72 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v21, 33);
  for (i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_2294C8000);
  v31 = xmmword_2295606B8;
  v32 = unk_2295606C8;
  v33 = xmmword_2295606D8;
  v34 = unk_2295606E8;
  v27 = xmmword_229560678;
  v28 = unk_229560688;
  v29 = xmmword_229560698;
  v30 = unk_2295606A8;
  v23 = xmmword_229560638;
  v24 = unk_229560648;
  v25 = xmmword_229560658;
  v26 = unk_229560668;
  v21 = xmmword_229560618;
  v22 = unk_229560628;
  v35 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v21, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_2294C8000);
  LODWORD(v21) = 0;
  *((_QWORD *)&v21 + 1) = v6;
  LODWORD(v22) = 1;
  *((_QWORD *)&v22 + 1) = v1;
  LODWORD(v23) = 2;
  *((_QWORD *)&v23 + 1) = CFSTR("Shelf");
  LODWORD(v24) = 3;
  *((_QWORD *)&v24 + 1) = v2;
  LODWORD(v25) = 4;
  *((_QWORD *)&v25 + 1) = v13;
  LODWORD(v26) = 5;
  *((_QWORD *)&v26 + 1) = v0;
  LODWORD(v27) = 6;
  *((_QWORD *)&v27 + 1) = v3;
  LODWORD(v28) = 7;
  *((_QWORD *)&v28 + 1) = v12;
  LODWORD(v29) = 8;
  *((_QWORD *)&v29 + 1) = v11;
  LODWORD(v30) = 9;
  *((_QWORD *)&v30 + 1) = v4;
  LODWORD(v31) = 10;
  *((_QWORD *)&v31 + 1) = v5;
  LODWORD(v32) = 11;
  *((_QWORD *)&v32 + 1) = v17;
  LODWORD(v33) = 12;
  *((_QWORD *)&v33 + 1) = CFSTR("Stool");
  LODWORD(v34) = 13;
  *((_QWORD *)&v34 + 1) = v16;
  LODWORD(v35) = 14;
  v36 = v14;
  v37 = 15;
  v38 = v7;
  v39 = 16;
  v40 = v15;
  v41 = 17;
  v42 = v18;
  v43 = 18;
  v44 = v19;
  v45 = 19;
  v46 = v20;
  v47 = 20;
  v48 = CFSTR("BuildInCabinet");
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v21, 21);
  for (j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_2294C8000);
  objc_autoreleasePoolPop(context);
}

void sub_2294DDEA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 328; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

void sub_2294DE0C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294DE2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)OUCVPixelBufferRotate;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

uint64_t _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void ou3dod::PreprocessDense<half,true>(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, char *a7, unint64_t a8, uint64_t a9, uint64_t *a10, float *a11, int8x16_t *a12, char a13, char a14)
{
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  float v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  float32x4_t v46;
  int32x2_t v47;
  __int128 v48;
  __int32 v49;
  unsigned __int32 v50;
  __int32 v51;
  float v53;
  unsigned int v54;
  int32x2_t v55;
  signed int v56;
  int16x4_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  char *v74;
  int v75;
  unsigned __int8 *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v88;
  int v89;
  int v93;
  int v94;
  float v96;
  uint64_t v99;
  _DWORD *v100;
  __int16 *v101;
  int v102;
  float v103;
  int v104;
  __int16 *v105;
  uint64_t v109;
  int v110;
  char *v111;
  uint64_t *v112;
  unsigned int v114;
  void *__p;
  void *v116;
  uint64_t v117;
  uint64_t *v118[3];
  void *v119;
  uint64_t *v120;

  utils::Resample((utils *)((a4[1] - *a4) >> 4), a2, &v119);
  if ((a14 & 1) == 0)
    std::vector<float>::resize((uint64_t)a10, ((char *)v120 - (_BYTE *)v119) >> 3);
  v20 = (uint64_t *)v119;
  v21 = (char *)v120 - (_BYTE *)v119;
  if (v120 != v119)
  {
    v22 = v21 >> 3;
    v23 = (_DWORD *)*a10;
    if ((unint64_t)(v21 >> 3) <= 1)
      v22 = 1;
    v24 = *a4 + 8;
    do
    {
      v25 = *v20++;
      *v23++ = *(_DWORD *)(v24 + 16 * v25);
      --v22;
    }
    while (v22);
  }
  percentile(a10);
  *a11 = *(float *)&v26;
  if ((a14 & 1) == 0)
  {
    a12->i64[0] = v32;
  }
  v112 = a5;
  v33 = *(_DWORD *)a1;
  if (a13)
    v34 = (*(_DWORD *)(a1 + 24) + 31) & 0xFFFFFFE0;
  else
    v34 = *(_DWORD *)(a1 + 24);
  v114 = v34;
  bzero(a7, 2 * a8);
  bzero(*(void **)a9, *(_QWORD *)(a9 + 8) - *(_QWORD *)a9);
  v35 = (uint64_t *)v119;
  v36 = v120;
  if (v119 != v120)
  {
    v37 = *a4;
    v38 = *a11;
    v39 = *(_DWORD **)a9;
    v40 = 2 * a3;
    v41 = *a6;
    v42 = (uint64_t *)v119;
    v43 = *v112;
    do
    {
      v44 = *v42;
      if (a14)
        v45 = -1;
      else
        v45 = 0;
      v46 = vsubq_f32(*(float32x4_t *)(v37 + 16 * *v42), (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v45), (int8x16_t)0, *a12));
      v47 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)(a1 + 48)), *(float32x2_t *)(a1 + 32))));
      v48 = *(_OWORD *)(a1 + 16);
      v49 = v47.i32[0];
      v50 = HIDWORD(*(_QWORD *)(a1 + 16));
      v51 = v47.i32[1];
      if (v48 > v47.i32[0] && v50 > v47.i32[1])
      {
        v53 = v46.f32[2] - v38;
        v54 = vcvtms_s32_f32((float)((float)(v46.f32[2] - v38) - *(float *)(a1 + 56)) / *(float *)(a1 + 40));
        if (DWORD2(v48) > v54)
        {
          v55 = vcltz_s32(v47);
          if ((v55.i8[0] & 1) == 0 && (v55.i8[4] & 1) == 0 && (v54 & 0x80000000) == 0)
          {
            v56 = v54 + (v51 + v50 * v49) * v114;
            ++v39[v56];
            _H6 = *(_WORD *)&a7[2 * v56];
            __asm { FCVT            S6, H6 }
            _S6 = v46.f32[0] + _S6;
            __asm { FCVT            H6, S6 }
            *(_WORD *)&a7[2 * v56] = LOWORD(_S6);
            LOWORD(_S6) = *(_WORD *)&a7[2 * v56 + 2 * a3];
            __asm { FCVT            S6, H6 }
            _S4 = v46.f32[1] + _S6;
            __asm { FCVT            H4, S4 }
            *(_WORD *)&a7[2 * v56 + 2 * a3] = LOWORD(_S4);
            LOWORD(_S4) = *(_WORD *)&a7[2 * v56 + 2 * v40];
            __asm { FCVT            S4, H4 }
            _S4 = v53 + _S4;
            __asm { FCVT            H4, S4 }
            *(_WORD *)&a7[2 * v56 + 2 * v40] = LOWORD(_S4);
            v68 = *(int16x4_t *)(v41 + 8 * v44);
            LOWORD(v53) = vaddv_s16(v68);
            if (v53 != 0.0)
            {
              v69 = (float)LOWORD(v53);
              v70 = (float)v68.u16[0] / v69;
              v71 = (float)v68.u16[1] / v69;
              v72 = (float)v68.u16[2] / v69;
              v73 = (float)(1.0 - (float)(v72 + (float)(v70 + v71))) / (float)(v33 - 3);
              if (v33 >= 1)
              {
                v74 = &a7[6 * a3 + 2 * v56];
                v75 = v33;
                do
                {
                  _H16 = *(_WORD *)v74;
                  __asm { FCVT            S16, H16 }
                  _S16 = v73 + _S16;
                  __asm { FCVT            H16, S16 }
                  *(_WORD *)v74 = LOWORD(_S16);
                  v74 += 2 * a3;
                  --v75;
                }
                while (v75);
              }
              v79 = (unsigned __int8 *)(v43 + 4 * v44);
              v80 = *v79;
              v81 = v79[1];
              v82 = v79[2];
              if (v33 <= v80)
                v83 = 3;
              else
                v83 = v80 + 3;
              v84 = v56 + v83 * a3;
              _H16 = *(_WORD *)&a7[2 * v84];
              __asm { FCVT            S16, H16 }
              _S7 = (float)(v70 - v73) + _S16;
              __asm { FCVT            H7, S7 }
              *(_WORD *)&a7[2 * v84] = LOWORD(_S7);
              v88 = v81 + 3;
              if (v33 <= v81)
                v88 = 3;
              v89 = v56 + v88 * a3;
              _H7 = *(_WORD *)&a7[2 * v89];
              __asm { FCVT            S7, H7 }
              _S6 = (float)(v71 - v73) + _S7;
              __asm { FCVT            H6, S6 }
              *(_WORD *)&a7[2 * v89] = LOWORD(_S6);
              if (v33 <= v82)
                v93 = 3;
              else
                v93 = v82 + 3;
              v94 = v56 + v93 * a3;
              _H6 = *(_WORD *)&a7[2 * v94];
              v96 = v72 - v73;
              __asm { FCVT            S5, H6 }
              _S4 = v96 + _S5;
              __asm { FCVT            H4, S4 }
              *(_WORD *)&a7[2 * v94] = LOWORD(_S4);
            }
          }
        }
      }
      ++v42;
    }
    while (v42 != v36);
  }
  if (a3 >= 1)
  {
    v99 = 0;
    v100 = *(_DWORD **)a9;
    v101 = (__int16 *)a7;
    do
    {
      v102 = v100[v99];
      if (v102 >= 2)
      {
        v103 = (float)v102;
        v104 = 36;
        v105 = v101;
        do
        {
          _H1 = *v105;
          __asm { FCVT            S1, H1 }
          _S1 = _S1 / v103;
          __asm { FCVT            H1, S1 }
          *v105 = LOWORD(_S1);
          v105 += a3;
          --v104;
        }
        while (v104);
      }
      ++v99;
      ++v101;
    }
    while (v99 != a3);
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v109 = *(_QWORD *)(a1 + 16);
    v110 = *(_DWORD *)(a1 + 24);
    v111 = (char *)operator new(0xCuLL);
    v118[1] = (uint64_t *)(v111 + 12);
    v118[2] = (uint64_t *)(v111 + 12);
    *(_QWORD *)v111 = v109;
    *((_DWORD *)v111 + 2) = v110;
    v117 = 0;
    v118[0] = (uint64_t *)v111;
    __p = 0;
    v116 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v111, (uint64_t)(v111 + 12), 3uLL);
    *(_DWORD *)__p = 64;
    ou3dod::J4InputSpecialHandling(36, v118, (int **)&__p, a7, a8);
    if (__p)
    {
      v116 = __p;
      operator delete(__p);
    }
    operator delete(v111);
    v35 = (uint64_t *)v119;
  }
  if (v35)
  {
    v120 = v35;
    operator delete(v35);
  }
}

{
  __ZN6ou3dod15PreprocessDenseIDhLb1EEEvRK13OU3DSSDConfigiiRKNSt3__16vectorIDv3_fNS4_9allocatorIS6_EEEERKNS5_IDv4_hNS7_ISC_EEEERKNS5_IDv4_tNS7_ISH_EEEENS4_4spanIT_Lm18446744073709551615EEERNS5_IiNS7_IiEEEERNS5_IfNS7_IfEEEERfRS6_bb(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void sub_2294DE7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  if (__p)
    operator delete(__p);
  operator delete(v19);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void ou3dod::`anonymous namespace'::ComputeMeanXYExcludeOutlier(uint64_t *a1, char **a2, double a3, double a4, double a5, double a6, __n128 a7, __n128 a8)
{
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  __int128 v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float *v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  unint64_t v30;
  float *v31;
  float v32;
  float *v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float *v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  unint64_t v44;
  float *v45;
  float v46;
  float *v47;
  float *v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float *v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  uint64_t v57;
  unint64_t v58;
  float *v59;
  float v60;
  float *v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float *v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  uint64_t v71;
  unint64_t v72;
  float *v73;
  float v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  float *v80;
  float *v81;
  uint64_t v82;
  uint64_t v83;
  float *v84;
  uint64_t v85;
  unint64_t v86;
  float *v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  float *v95;
  float *v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  uint64_t v100;
  unint64_t v101;
  float *v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  float *v110;
  float *v111;
  uint64_t v112;
  uint64_t v113;
  float *v114;
  uint64_t v115;
  unint64_t v116;
  float *v117;
  float v118;
  float v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  float *v125;
  float *v126;
  uint64_t v127;
  uint64_t v128;
  float *v129;
  uint64_t v130;
  unint64_t v131;
  float *v132;
  float v133;
  float v134;
  __n128 v135;
  __n128 v136;
  int v137;
  float *v138;
  float *v139;
  uint64_t v140;
  void *__p;
  float *v142;
  uint64_t v143;
  void *v144;
  float *v145;
  uint64_t v146;
  float *v147;
  float *v148;
  uint64_t v149;

  v8 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
    return;
  v10 = (unint64_t)(v9 - v8) >> 3;
  if (!(_DWORD)v10)
    return;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  __p = 0;
  v142 = 0;
  v143 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v12 = (int)vcvtps_s32_f32((float)((int)v10 - 1) * 0.05);
  v13 = (int)vcvtpd_s64_f64((double)((int)v10 - 1) * 0.0500000119);
  a8.n128_u32[0] = 0;
  a7.n128_u32[0] = 0;
  do
  {
    v135 = a8;
    v136 = a7;
    v14 = *(_QWORD *)v8;
    v15 = *a1;
    v16 = (int *)(*a1 + 16 * *(_QWORD *)v8);
    v137 = *v16;
    std::priority_queue<float,std::vector<float>,std::greater<float>>::push((uint64_t)&v147, &v137);
    v137 = *v16;
    std::priority_queue<float>::push((uint64_t)&v144, &v137);
    v17 = v15 + 16 * v14;
    v137 = *(_DWORD *)(v17 + 4);
    std::priority_queue<float,std::vector<float>,std::greater<float>>::push((uint64_t)&__p, &v137);
    v137 = *(_DWORD *)(v17 + 4);
    std::priority_queue<float>::push((uint64_t)&v138, &v137);
    v18 = *(_OWORD *)v16;
    v20 = v147;
    v19 = v148;
    v21 = v148 - v147;
    a8 = v135;
    a7 = v136;
    if (v21 <= v12)
      goto LABEL_18;
    if ((char *)v148 - (char *)v147 >= 5)
    {
      v22 = 0;
      v23 = *v147;
      v24 = v147;
      do
      {
        v25 = v24;
        v24 += v22 + 1;
        v26 = 2 * v22;
        v22 = (2 * v22) | 1;
        v27 = v26 + 2;
        if (v27 < v21 && *v24 > v24[1])
        {
          ++v24;
          v22 = v27;
        }
        *v25 = *v24;
      }
      while (v22 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
      v28 = v19 - 1;
      if (v24 != v19 - 1)
      {
        *v24 = *v28;
        *v28 = v23;
        v29 = (char *)v24 - (char *)v20 + 4;
        if (v29 < 5)
          goto LABEL_17;
        v30 = (((unint64_t)v29 >> 2) - 2) >> 1;
        v31 = &v20[v30];
        v32 = *v31;
        v23 = *v24;
        if (*v31 <= *v24)
          goto LABEL_17;
        do
        {
          *v24 = v32;
          v24 = v31;
          if (!v30)
            break;
          v30 = (v30 - 1) >> 1;
          v31 = &v20[v30];
          v32 = *v31;
        }
        while (*v31 > v23);
      }
      *v24 = v23;
    }
LABEL_17:
    v148 = --v19;
LABEL_18:
    v34 = (float *)v144;
    v33 = v145;
    v35 = ((char *)v145 - (_BYTE *)v144) >> 2;
    if (v35 <= v13)
      goto LABEL_32;
    if ((char *)v145 - (_BYTE *)v144 >= 5)
    {
      v36 = 0;
      v37 = *(float *)v144;
      v38 = (float *)v144;
      do
      {
        v39 = v38;
        v38 += v36 + 1;
        v40 = 2 * v36;
        v36 = (2 * v36) | 1;
        v41 = v40 + 2;
        if (v41 < v35 && *v38 < v38[1])
        {
          ++v38;
          v36 = v41;
        }
        *v39 = *v38;
      }
      while (v36 <= (uint64_t)((unint64_t)(v35 - 2) >> 1));
      v42 = v33 - 1;
      if (v38 != v33 - 1)
      {
        *v38 = *v42;
        *v42 = v37;
        v43 = (char *)v38 - (char *)v34 + 4;
        if (v43 < 5)
          goto LABEL_31;
        v44 = (((unint64_t)v43 >> 2) - 2) >> 1;
        v45 = &v34[v44];
        v46 = *v45;
        v37 = *v38;
        if (*v45 >= *v38)
          goto LABEL_31;
        do
        {
          *v38 = v46;
          v38 = v45;
          if (!v44)
            break;
          v44 = (v44 - 1) >> 1;
          v45 = &v34[v44];
          v46 = *v45;
        }
        while (*v45 < v37);
      }
      *v38 = v37;
    }
LABEL_31:
    v145 = --v33;
LABEL_32:
    v47 = (float *)__p;
    v48 = v142;
    v49 = ((char *)v142 - (_BYTE *)__p) >> 2;
    if (v49 <= v12)
      goto LABEL_46;
    if ((char *)v142 - (_BYTE *)__p >= 5)
    {
      v50 = 0;
      v51 = *(float *)__p;
      v52 = (float *)__p;
      do
      {
        v53 = v52;
        v52 += v50 + 1;
        v54 = 2 * v50;
        v50 = (2 * v50) | 1;
        v55 = v54 + 2;
        if (v55 < v49 && *v52 > v52[1])
        {
          ++v52;
          v50 = v55;
        }
        *v53 = *v52;
      }
      while (v50 <= (uint64_t)((unint64_t)(v49 - 2) >> 1));
      v56 = v48 - 1;
      if (v52 != v48 - 1)
      {
        *v52 = *v56;
        *v56 = v51;
        v57 = (char *)v52 - (char *)v47 + 4;
        if (v57 < 5)
          goto LABEL_45;
        v58 = (((unint64_t)v57 >> 2) - 2) >> 1;
        v59 = &v47[v58];
        v60 = *v59;
        v51 = *v52;
        if (*v59 <= *v52)
          goto LABEL_45;
        do
        {
          *v52 = v60;
          v52 = v59;
          if (!v58)
            break;
          v58 = (v58 - 1) >> 1;
          v59 = &v47[v58];
          v60 = *v59;
        }
        while (*v59 > v51);
      }
      *v52 = v51;
    }
LABEL_45:
    v142 = --v48;
LABEL_46:
    v61 = v138;
    v62 = v139;
    v63 = v139 - v138;
    if (v63 <= v13)
      goto LABEL_60;
    if ((char *)v139 - (char *)v138 >= 5)
    {
      v64 = 0;
      v65 = *v138;
      v66 = v138;
      do
      {
        v67 = v66;
        v66 += v64 + 1;
        v68 = 2 * v64;
        v64 = (2 * v64) | 1;
        v69 = v68 + 2;
        if (v69 < v63 && *v66 < v66[1])
        {
          ++v66;
          v64 = v69;
        }
        *v67 = *v66;
      }
      while (v64 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
      v70 = v62 - 1;
      if (v66 != v62 - 1)
      {
        *v66 = *v70;
        *v70 = v65;
        v71 = (char *)v66 - (char *)v61 + 4;
        if (v71 < 5)
          goto LABEL_59;
        v72 = (((unint64_t)v71 >> 2) - 2) >> 1;
        v73 = &v61[v72];
        v74 = *v73;
        v65 = *v66;
        if (*v73 >= *v66)
          goto LABEL_59;
        do
        {
          *v66 = v74;
          v66 = v73;
          if (!v72)
            break;
          v72 = (v72 - 1) >> 1;
          v73 = &v61[v72];
          v74 = *v73;
        }
        while (*v73 < v65);
      }
      *v66 = v65;
    }
LABEL_59:
    v139 = --v62;
LABEL_60:
    a7.n128_f32[0] = v136.n128_f32[0] + *(float *)&v18;
    a8.n128_f32[0] = v135.n128_f32[0] + *((float *)&v18 + 1);
    v8 += 8;
  }
  while (v8 != v9);
  if (v20 != v19)
  {
    do
    {
      v75 = *v20;
      v76 = (char *)v19 - (char *)v20;
      if ((char *)v19 - (char *)v20 >= 5)
      {
        v77 = 0;
        v78 = v76 >> 2;
        v79 = (unint64_t)((v76 >> 2) - 2) >> 1;
        v80 = v20;
        do
        {
          v81 = v80;
          v80 += v77 + 1;
          v82 = 2 * v77;
          v77 = (2 * v77) | 1;
          v83 = v82 + 2;
          if (v83 < v78 && *v80 > v80[1])
          {
            ++v80;
            v77 = v83;
          }
          *v81 = *v80;
        }
        while (v77 <= v79);
        v84 = v19 - 1;
        if (v80 == v19 - 1)
        {
          *v80 = v75;
        }
        else
        {
          *v80 = *v84;
          *v84 = v75;
          v85 = (char *)v80 - (char *)v20 + 4;
          if (v85 >= 5)
          {
            v86 = (((unint64_t)v85 >> 2) - 2) >> 1;
            v87 = &v20[v86];
            v88 = *v87;
            v89 = *v80;
            if (*v87 > *v80)
            {
              do
              {
                *v80 = v88;
                v80 = v87;
                if (!v86)
                  break;
                v86 = (v86 - 1) >> 1;
                v87 = &v20[v86];
                v88 = *v87;
              }
              while (*v87 > v89);
              *v80 = v89;
            }
          }
        }
      }
      a7.n128_f32[0] = a7.n128_f32[0] - v75;
      --v19;
    }
    while (v20 != v19);
    v148 = v20;
  }
  if (v34 != v33)
  {
    do
    {
      v90 = *v34;
      v91 = (char *)v33 - (char *)v34;
      if ((char *)v33 - (char *)v34 >= 5)
      {
        v92 = 0;
        v93 = v91 >> 2;
        v94 = (unint64_t)((v91 >> 2) - 2) >> 1;
        v95 = v34;
        do
        {
          v96 = v95;
          v95 += v92 + 1;
          v97 = 2 * v92;
          v92 = (2 * v92) | 1;
          v98 = v97 + 2;
          if (v98 < v93 && *v95 < v95[1])
          {
            ++v95;
            v92 = v98;
          }
          *v96 = *v95;
        }
        while (v92 <= v94);
        v99 = v33 - 1;
        if (v95 == v33 - 1)
        {
          *v95 = v90;
        }
        else
        {
          *v95 = *v99;
          *v99 = v90;
          v100 = (char *)v95 - (char *)v34 + 4;
          if (v100 >= 5)
          {
            v101 = (((unint64_t)v100 >> 2) - 2) >> 1;
            v102 = &v34[v101];
            v103 = *v102;
            v104 = *v95;
            if (*v102 < *v95)
            {
              do
              {
                *v95 = v103;
                v95 = v102;
                if (!v101)
                  break;
                v101 = (v101 - 1) >> 1;
                v102 = &v34[v101];
                v103 = *v102;
              }
              while (*v102 < v104);
              *v95 = v104;
            }
          }
        }
      }
      a7.n128_f32[0] = a7.n128_f32[0] - v90;
      --v33;
    }
    while (v34 != v33);
    v145 = v34;
  }
  if (v47 != v48)
  {
    do
    {
      v105 = *v47;
      v106 = (char *)v48 - (char *)v47;
      if ((char *)v48 - (char *)v47 >= 5)
      {
        v107 = 0;
        v108 = v106 >> 2;
        v109 = (unint64_t)((v106 >> 2) - 2) >> 1;
        v110 = v47;
        do
        {
          v111 = v110;
          v110 += v107 + 1;
          v112 = 2 * v107;
          v107 = (2 * v107) | 1;
          v113 = v112 + 2;
          if (v113 < v108 && *v110 > v110[1])
          {
            ++v110;
            v107 = v113;
          }
          *v111 = *v110;
        }
        while (v107 <= v109);
        v114 = v48 - 1;
        if (v110 == v48 - 1)
        {
          *v110 = v105;
        }
        else
        {
          *v110 = *v114;
          *v114 = v105;
          v115 = (char *)v110 - (char *)v47 + 4;
          if (v115 >= 5)
          {
            v116 = (((unint64_t)v115 >> 2) - 2) >> 1;
            v117 = &v47[v116];
            v118 = *v117;
            v119 = *v110;
            if (*v117 > *v110)
            {
              do
              {
                *v110 = v118;
                v110 = v117;
                if (!v116)
                  break;
                v116 = (v116 - 1) >> 1;
                v117 = &v47[v116];
                v118 = *v117;
              }
              while (*v117 > v119);
              *v110 = v119;
            }
          }
        }
      }
      a8.n128_f32[0] = a8.n128_f32[0] - v105;
      --v48;
    }
    while (v47 != v48);
    v142 = v47;
  }
  for (; v61 != v62; --v62)
  {
    v120 = *v61;
    v121 = (char *)v62 - (char *)v61;
    if ((char *)v62 - (char *)v61 >= 5)
    {
      v122 = 0;
      v123 = v121 >> 2;
      v124 = (unint64_t)((v121 >> 2) - 2) >> 1;
      v125 = v61;
      do
      {
        v126 = v125;
        v125 += v122 + 1;
        v127 = 2 * v122;
        v122 = (2 * v122) | 1;
        v128 = v127 + 2;
        if (v128 < v123 && *v125 < v125[1])
        {
          ++v125;
          v122 = v128;
        }
        *v126 = *v125;
      }
      while (v122 <= v124);
      v129 = v62 - 1;
      if (v125 == v62 - 1)
      {
        *v125 = v120;
      }
      else
      {
        *v125 = *v129;
        *v129 = v120;
        v130 = (char *)v125 - (char *)v61 + 4;
        if (v130 >= 5)
        {
          v131 = (((unint64_t)v130 >> 2) - 2) >> 1;
          v132 = &v61[v131];
          v133 = *v132;
          v134 = *v125;
          if (*v132 < *v125)
          {
            do
            {
              *v125 = v133;
              v125 = v132;
              if (!v131)
                break;
              v131 = (v131 - 1) >> 1;
              v132 = &v61[v131];
              v133 = *v132;
            }
            while (*v132 < v134);
            *v125 = v134;
          }
        }
      }
    }
    a8.n128_f32[0] = a8.n128_f32[0] - v120;
  }
  if (v61)
  {
    v139 = v61;
    operator delete(v61);
    v47 = (float *)__p;
  }
  if (v47)
  {
    v142 = v47;
    operator delete(v47);
  }
  if (v144)
  {
    v145 = (float *)v144;
    operator delete(v144);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
}

void sub_2294DF22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a25)
    operator delete(a25);
  v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(_QWORD *)(v26 - 120) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ou3dod::GetPaddedSize(ou3dod *this, unint64_t a2)
{
  return (((unint64_t)this + a2 - 1) / a2) * a2;
}

void ou3dod::J4InputSpecialHandling(int a1, uint64_t **a2, int **a3, _WORD *a4, unint64_t a5)
{
  int v5;
  int *v9;
  int *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  char *v25;
  size_t v26;
  char *v27;
  int v28;
  int i;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  int v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::logic_error *exception;
  std::logic_error *v47;
  int *v48[3];
  char *v49;
  char *v50;
  char *v51;

  v5 = a5;
  v10 = *a3;
  v9 = a3[1];
  v11 = 1;
  if (*a3 != v9)
  {
    v12 = *a3;
    do
    {
      v13 = *v12++;
      v11 = (v13 * v11);
    }
    while (v12 != v9);
  }
  if (a5 < (int)v11)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      ou3dod::J4InputSpecialHandling(v11, v39, v40, v41, v42, v43, v44, v45);

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)&unk_22956FEC2);
LABEL_31:
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v14 = *((_DWORD *)*a2 + 2);
  v15 = **a2;
  v16 = (char *)operator new(0x10uLL);
  v50 = v16 + 16;
  v51 = v16 + 16;
  *(_DWORD *)v16 = a1;
  *(_QWORD *)(v16 + 4) = v15;
  *((_DWORD *)v16 + 3) = v14;
  v49 = v16;
  v17 = *(_QWORD *)v10;
  v18 = v10[2];
  v19 = (char *)operator new(0x10uLL);
  v48[1] = (int *)(v19 + 16);
  v48[2] = (int *)(v19 + 16);
  *(_DWORD *)v19 = a1;
  *(_QWORD *)(v19 + 4) = v17;
  *((_DWORD *)v19 + 3) = v18;
  v48[0] = (int *)v19;
  ou3dod::PaddingOrTrimming((const void **)&v49, v48, a4);
  operator delete(v19);
  operator delete(v16);
  if ((char *)a3[1] - (char *)*a3 != 12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input vector dimension should be 3.");
    goto LABEL_31;
  }
  if (**a3 * a1 * (*a3)[1] * (*a3)[2] != v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input size doesn't match with config size.");
    goto LABEL_31;
  }
  std::vector<half>::vector(&v49, v5);
  v20 = (unsigned int *)*a3;
  if ((char *)a3[1] - (char *)*a3 != 12)
  {
    v47 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v47, "[3DOD] Input vector dimension should be 3.");
    goto LABEL_35;
  }
  v21 = *v20;
  v22 = v20[1];
  v23 = v21 * a1 * v22;
  v24 = v20[2];
  if (v23 * v24 != v5)
  {
    v47 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v47, "[3DOD] Input size doesn't match with config size.");
    goto LABEL_35;
  }
  v25 = v49;
  v26 = v50 - v49;
  if ((v50 - v49) >> 1 != v5)
  {
    v47 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v47, "[3DOD] mismatching input and output sizes.");
LABEL_35:
    v47->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v47, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v27 = v49;
  if (v24 >= 1)
  {
    v28 = 0;
    for (i = 0; i != v24; ++i)
    {
      if (a1 >= 1)
      {
        v30 = 0;
        v31 = v28;
        v32 = i;
        do
        {
          if ((int)v22 >= 1)
          {
            v33 = 0;
            v34 = v31;
            v35 = v32;
            do
            {
              if ((int)v21 >= 1)
              {
                v36 = &v25[2 * v34];
                v37 = v35;
                v38 = v21;
                do
                {
                  *(_WORD *)v36 = a4[v37];
                  v36 += 2;
                  v37 += v22 * v24;
                  --v38;
                }
                while (v38);
              }
              ++v33;
              v35 += v24;
              v34 += v21;
            }
            while (v33 != v22);
          }
          ++v30;
          v32 += v22 * v24 * v21;
          v31 += v22 * v21;
        }
        while (v30 != a1);
      }
      v28 += v23;
    }
    v27 = v49;
  }
  memcpy(a4, v25, v26);
  if (v27)
  {
    v50 = v27;
    operator delete(v27);
  }
}

void sub_2294DF5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ou3dod::PreprocessDense<half,false>(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, char *a7, uint64_t a8, uint64_t a9, uint64_t *a10, float *a11, int8x16_t *a12, char a13, char a14)
{
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  float v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v49;
  __int32 v50;
  BOOL v51;
  __int32 v52;
  int32x2_t v54;
  signed __int32 v55;
  int16x4_t v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  char *v67;
  int v68;
  unsigned __int8 *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  signed __int32 v77;
  int v81;
  signed __int32 v82;
  int v86;
  signed __int32 v87;
  float v89;
  uint64_t v92;
  _DWORD *v93;
  int v94;
  float v95;
  int v96;
  __int16 *v97;
  uint64_t *v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t *v104;

  utils::Resample((utils *)((a4[1] - *a4) >> 4), a2, (void **)&v103);
  if ((a14 & 1) == 0)
    std::vector<float>::resize((uint64_t)a10, v104 - v103);
  v21 = v103;
  v22 = (char *)v104 - (char *)v103;
  if (v104 != v103)
  {
    v23 = v22 >> 3;
    v24 = (_DWORD *)*a10;
    if ((unint64_t)(v22 >> 3) <= 1)
      v23 = 1;
    v25 = *a4 + 8;
    do
    {
      v26 = *v21++;
      *v24++ = *(_DWORD *)(v25 + 16 * v26);
      --v23;
    }
    while (v23);
  }
  percentile(a10);
  *a11 = *(float *)&v27;
  if ((a14 & 1) == 0)
  {
    a12->i64[0] = v33;
  }
  v101 = a5;
  v34 = *(_DWORD *)a1;
  if (a13)
    v35 = (*(_DWORD *)(a1 + 24) + 31) & 0xFFFFFFE0;
  else
    v35 = *(_DWORD *)(a1 + 24);
  v102 = v35;
  bzero(a7, 2 * a8);
  bzero(*(void **)a9, *(_QWORD *)(a9 + 8) - *(_QWORD *)a9);
  v36 = v103;
  v37 = v104;
  if (v103 != v104)
  {
    v38 = *a4;
    v39 = *a11;
    v40 = *(_DWORD **)a9;
    v41 = a3 + a3 * v34;
    v42 = *a6;
    v43 = v103;
    v44 = *v101;
    do
    {
      v45 = *v43;
      if (a14)
        v46 = -1;
      else
        v46 = 0;
      _Q5 = vsubq_f32(*(float32x4_t *)(v38 + 16 * *v43), (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v46), (int8x16_t)0, *a12));
      v47 = vcvtms_s32_f32((float)(_Q5.f32[0] - *(float *)(a1 + 48)) / *(float *)(a1 + 32));
      _Q5.i32[0] = vdup_lane_s32(*(int32x2_t *)_Q5.f32, 1).u32[0];
      _Q5.f32[1] = _Q5.f32[2] - v39;
      *(int32x2_t *)_Q5.f32 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)(a1 + 52)), *(float32x2_t *)(a1 + 36))));
      v49 = HIDWORD(*(_QWORD *)(a1 + 16));
      v50 = _Q5.i32[0];
      v51 = *(_OWORD *)(a1 + 16) > v47 && v49 > _Q5.i32[0];
      v52 = _Q5.i32[1];
      if (v51 && *(_QWORD *)(a1 + 24) > _Q5.i32[1] && (v47 & 0x80000000) == 0)
      {
        v54 = vcltz_s32(*(int32x2_t *)_Q5.f32);
        if ((v54.i8[0] & 1) == 0 && (v54.i8[4] & 1) == 0)
        {
          v55 = v52 + (v50 + v49 * v47) * v102;
          ++v40[v55];
          _Q5.i16[0] = *(_WORD *)&a7[2 * v55];
          __asm { FCVT            S5, H5 }
          _Q5.f32[0] = _Q5.f32[0] + 1.0;
          __asm { FCVT            H5, S5 }
          *(_WORD *)&a7[2 * v55] = _Q5.i16[0];
          _Q5.i16[0] = *(_WORD *)&a7[2 * v55 + 2 * v41];
          __asm { FCVT            S5, H5 }
          _S4 = (float)(_Q5.f32[2] - v39) + _Q5.f32[0];
          __asm { FCVT            H4, S4 }
          *(_WORD *)&a7[2 * v55 + 2 * v41] = LOWORD(_S4);
          v61 = *(int16x4_t *)(v42 + 8 * v45);
          _Q5.i16[0] = vaddv_s16(v61);
          if (_Q5.i32[0])
          {
            v62 = (float)_Q5.u16[0];
            v63 = (float)v61.u16[0] / v62;
            v64 = (float)v61.u16[1] / v62;
            v65 = (float)v61.u16[2] / v62;
            v66 = (float)(1.0 - (float)(v65 + (float)(v63 + v64))) / (float)(v34 - 3);
            if (v34 >= 1)
            {
              v67 = &a7[2 * a3 + 2 * (uint64_t)v55];
              v68 = v34;
              do
              {
                _H16 = *(_WORD *)v67;
                __asm { FCVT            S16, H16 }
                _S16 = v66 + _S16;
                __asm { FCVT            H16, S16 }
                *(_WORD *)v67 = LOWORD(_S16);
                v67 += 2 * a3;
                --v68;
              }
              while (v68);
            }
            v72 = (unsigned __int8 *)(v44 + 4 * v45);
            v73 = *v72;
            v74 = v72[1];
            v75 = v72[2];
            if (v34 > v73)
              v76 = v73 + 1;
            else
              v76 = 1;
            v77 = v55 + v76 * a3;
            _H16 = *(_WORD *)&a7[2 * v77];
            __asm { FCVT            S16, H16 }
            _S7 = (float)(v63 - v66) + _S16;
            __asm { FCVT            H7, S7 }
            *(_WORD *)&a7[2 * v77] = LOWORD(_S7);
            if (v34 > v74)
              v81 = v74 + 1;
            else
              v81 = 1;
            v82 = v55 + v81 * a3;
            _H7 = *(_WORD *)&a7[2 * v82];
            __asm { FCVT            S7, H7 }
            _S6 = (float)(v64 - v66) + _S7;
            __asm { FCVT            H6, S6 }
            *(_WORD *)&a7[2 * v82] = LOWORD(_S6);
            if (v34 > v75)
              v86 = v75 + 1;
            else
              v86 = 1;
            v87 = v55 + v86 * a3;
            _H6 = *(_WORD *)&a7[2 * v87];
            v89 = v65 - v66;
            __asm { FCVT            S5, H6 }
            _S4 = v89 + _S5;
            __asm { FCVT            H4, S4 }
            *(_WORD *)&a7[2 * v87] = LOWORD(_S4);
          }
        }
      }
      ++v43;
    }
    while (v43 != v37);
  }
  if (a3 >= 1)
  {
    v92 = 0;
    v93 = *(_DWORD **)a9;
    do
    {
      v94 = v93[v92];
      if (v94 >= 2)
      {
        v95 = (float)v94;
        v96 = 35;
        v97 = (__int16 *)a7;
        do
        {
          _H1 = *v97;
          __asm { FCVT            S1, H1 }
          _S1 = _S1 / v95;
          __asm { FCVT            H1, S1 }
          *v97 = LOWORD(_S1);
          v97 += a3;
          --v96;
        }
        while (v96);
      }
      ++v92;
      a7 += 2;
    }
    while (v92 != a3);
  }
  if (v36)
  {
    v104 = v36;
    operator delete(v36);
  }
}

void sub_2294DFA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ou3dod::PreprocessDense<float,false>(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, char *a7, uint64_t a8, uint64_t a9, uint64_t *a10, float *a11, int8x16_t *a12, char a13, char a14)
{
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  float32x4_t v48;
  float v49;
  unsigned int v50;
  int32x2_t v51;
  unsigned int v52;
  __int32 v53;
  BOOL v54;
  __int32 v55;
  int32x2_t v57;
  signed __int32 v58;
  int16x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float *v66;
  int v67;
  unsigned __int8 *v68;
  int v69;
  int v70;
  int v71;
  float v72;
  int v73;
  float v74;
  int v75;
  float v76;
  int v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  float v81;
  int v82;
  float *v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t *v86;

  utils::Resample((utils *)((a4[1] - *a4) >> 4), a2, (void **)&v85);
  if ((a14 & 1) == 0)
    std::vector<float>::resize((uint64_t)a10, v86 - v85);
  v21 = v85;
  v22 = (char *)v86 - (char *)v85;
  if (v86 != v85)
  {
    v23 = v22 >> 3;
    v24 = (_DWORD *)*a10;
    if ((unint64_t)(v22 >> 3) <= 1)
      v23 = 1;
    v25 = *a4 + 8;
    do
    {
      v26 = *v21++;
      *v24++ = *(_DWORD *)(v25 + 16 * v26);
      --v23;
    }
    while (v23);
  }
  percentile(a10);
  *a11 = *(float *)&v27;
  if ((a14 & 1) == 0)
  {
    a12->i64[0] = v33;
  }
  v34 = a8;
  v35 = a6;
  v36 = *(_DWORD *)a1;
  if (a13)
    v37 = (*(_DWORD *)(a1 + 24) + 31) & 0xFFFFFFE0;
  else
    v37 = *(_DWORD *)(a1 + 24);
  v84 = v37;
  bzero(a7, 4 * v34);
  bzero(*(void **)a9, *(_QWORD *)(a9 + 8) - *(_QWORD *)a9);
  v38 = v85;
  v39 = v86;
  if (v85 != v86)
  {
    v40 = *a4;
    v41 = *(_DWORD **)a9;
    v42 = a3 + a3 * v36;
    v43 = *v35;
    v44 = v85;
    v45 = *a5;
    do
    {
      v46 = *v44;
      if (a14)
        v47 = -1;
      else
        v47 = 0;
      v48 = vsubq_f32(*(float32x4_t *)(v40 + 16 * *v44), (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v47), (int8x16_t)0, *a12));
      v49 = v48.f32[2] - *a11;
      v50 = vcvtms_s32_f32((float)(v48.f32[0] - *(float *)(a1 + 48)) / *(float *)(a1 + 32));
      v48.i32[0] = vdup_lane_s32(*(int32x2_t *)v48.f32, 1).u32[0];
      v48.f32[1] = v49;
      v51 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)(a1 + 52)), *(float32x2_t *)(a1 + 36))));
      v52 = HIDWORD(*(_QWORD *)(a1 + 16));
      v53 = v51.i32[0];
      v54 = *(_OWORD *)(a1 + 16) > v50 && v52 > v51.i32[0];
      v55 = v51.i32[1];
      if (v54 && *(_QWORD *)(a1 + 24) > v51.i32[1] && (v50 & 0x80000000) == 0)
      {
        v57 = vcltz_s32(v51);
        if ((v57.i8[0] & 1) == 0 && (v57.i8[4] & 1) == 0)
        {
          v58 = v55 + (v53 + v52 * v50) * v84;
          ++v41[v58];
          *(float *)&a7[4 * v58] = *(float *)&a7[4 * v58] + 1.0;
          v60 = *(float *)&a7[4 * v58 + 4 * v42];
          *(float *)&a7[4 * v58 + 4 * v42] = v49 + v60;
          v59 = *(int16x4_t *)(v43 + 8 * v46);
          LOWORD(v60) = vaddv_s16(v59);
          if (v60 != 0.0)
          {
            v61 = (float)LOWORD(v60);
            v62 = (float)v59.u16[0] / v61;
            v63 = (float)v59.u16[1] / v61;
            v64 = (float)v59.u16[2] / v61;
            v65 = (float)(1.0 - (float)(v64 + (float)(v62 + v63))) / (float)(v36 - 3);
            if (v36 >= 1)
            {
              v66 = (float *)&a7[4 * a3 + 4 * (uint64_t)v58];
              v67 = v36;
              do
              {
                *v66 = v65 + *v66;
                v66 += a3;
                --v67;
              }
              while (v67);
            }
            v68 = (unsigned __int8 *)(v45 + 4 * v46);
            v69 = *v68;
            v70 = v68[1];
            v71 = v68[2];
            v72 = v62 - v65;
            if (v36 > v69)
              v73 = v69 + 1;
            else
              v73 = 1;
            *(float *)&a7[4 * v58 + 4 * v73 * a3] = v72 + *(float *)&a7[4 * v58 + 4 * v73 * a3];
            v74 = v63 - v65;
            if (v36 > v70)
              v75 = v70 + 1;
            else
              v75 = 1;
            *(float *)&a7[4 * v58 + 4 * v75 * a3] = v74 + *(float *)&a7[4 * v58 + 4 * v75 * a3];
            v76 = v64 - v65;
            if (v36 > v71)
              v77 = v71 + 1;
            else
              v77 = 1;
            *(float *)&a7[4 * v58 + 4 * v77 * a3] = v76 + *(float *)&a7[4 * v58 + 4 * v77 * a3];
          }
        }
      }
      ++v44;
    }
    while (v44 != v39);
  }
  if (a3 >= 1)
  {
    v78 = 0;
    v79 = *(_DWORD **)a9;
    do
    {
      v80 = v79[v78];
      if (v80 >= 2)
      {
        v81 = (float)v80;
        v82 = 35;
        v83 = (float *)a7;
        do
        {
          *v83 = *v83 / v81;
          v83 += a3;
          --v82;
        }
        while (v82);
      }
      ++v78;
      a7 += 4;
    }
    while (v78 != a3);
  }
  if (v38)
  {
    v86 = v38;
    operator delete(v38);
  }
}

void sub_2294DFE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ou3dod::PaddingOrTrimming(const void **a1, int **a2, _WORD *a3)
{
  int *v4;
  int *v5;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  int v15;
  int v16;
  std::vector<int>::pointer begin;
  char *v18;
  std::vector<int>::pointer v19;
  uint64_t v20;
  int *v21;
  unsigned int *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  std::vector<int>::pointer v30;
  std::vector<int>::pointer v31;
  _WORD *v32;
  int v33;
  int v34;
  uint64_t v35;
  std::logic_error *exception;
  std::vector<int>::value_type v37;
  std::vector<int> __x;
  std::vector<int> v39;
  void *__p;
  void *v41;
  uint64_t v42;
  void *v43[3];

  if ((_BYTE *)a1[1] - (_BYTE *)*a1 != 16 || (v5 = *a2, v4 = a2[1], (char *)v4 - (char *)*a2 != 16))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input vector dimension should be 4.");
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v8 = 1;
  while (v5 != v4)
  {
    v9 = *v5++;
    v8 *= v9;
  }
  v10 = v8;
  LOWORD(__p) = 0;
  std::vector<half>::vector(v43, v8, &__p);
  __p = 0;
  v41 = 0;
  v42 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *a1, (uint64_t)a1[1], ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 2);
  v11 = (_BYTE *)a1[1] - (_BYTE *)*a1;
  if (v11)
  {
    v12 = v11 >> 2;
    v13 = (int *)__p;
    v14 = *a2;
    if (v12 <= 1)
      v12 = 1;
    do
    {
      v16 = *v14++;
      v15 = v16;
      if (v16 >= *v13)
        v15 = *v13;
      *v13++ = v15;
      --v12;
    }
    while (v12);
  }
  LODWORD(__x.__begin_) = 1;
  std::vector<int>::vector(&v39, 4uLL, (const std::vector<int>::value_type *)&__x);
  v37 = 1;
  std::vector<int>::vector(&__x, 4uLL, &v37);
  begin = v39.__begin_;
  v18 = (char *)*a1;
  v19 = __x.__begin_;
  v20 = 3;
  v21 = *a2;
  do
  {
    begin[v20 - 1] = *(_DWORD *)&v18[v20 * 4] * begin[v20];
    v19[v20 - 1] = v21[v20] * v19[v20];
    --v20;
  }
  while (v20 * 4);
  v22 = (unsigned int *)__p;
  v23 = *(_DWORD *)__p;
  if (*(int *)__p >= 1)
  {
    v24 = 0;
    v25 = *((_DWORD *)__p + 1);
    do
    {
      if (v25 >= 1)
      {
        v26 = 0;
        v27 = v22[2];
        do
        {
          if (v27 >= 1)
          {
            v28 = 0;
            v29 = v22[3];
            v30 = v39.__begin_;
            v31 = __x.__begin_;
            v32 = v43[0];
            do
            {
              if ((int)v29 >= 1)
              {
                v33 = v26 * v31[1] + v24 * *v31 + v31[2] * v28;
                v34 = v26 * v30[1] + v24 * *v30 + v30[2] * v28;
                v35 = v29;
                do
                {
                  v32[v33++] = a3[v34++];
                  --v35;
                }
                while (v35);
              }
              ++v28;
            }
            while (v28 != v27);
          }
          ++v26;
        }
        while (v26 != v25);
      }
      ++v24;
    }
    while (v24 != v23);
  }
  memcpy(a3, v43[0], 2 * v10);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v39.__begin_)
  {
    v39.__end_ = v39.__begin_;
    operator delete(v39.__begin_);
  }
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
}

void sub_2294E00D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void ou3dod::J4OutputSpecialHandling(int a1, char **a2, uint64_t **a3, char *a4, unint64_t a5)
{
  char *v9;
  char *v10;
  int v11;
  char *v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int i;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  int v27;
  int v28;
  char *v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  int v37;
  char *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::logic_error *exception;
  int *v47[3];
  const void *v48[3];
  void *__p;
  _BYTE *v50;

  v9 = *a2;
  v10 = a2[1];
  v11 = 1;
  if (*a2 != v10)
  {
    v12 = *a2;
    do
    {
      v13 = *(_DWORD *)v12;
      v12 += 4;
      v11 *= v13;
    }
    while (v12 != v10);
  }
  v14 = (v11 * a1);
  if (a5 < (int)v14)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      ou3dod::J4OutputSpecialHandling(v14, v39, v40, v41, v42, v43, v44, v45);

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)&unk_22956FEC2);
LABEL_27:
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (v10 - v9 != 12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input vector dimension should be 3.");
    goto LABEL_27;
  }
  if (*(_DWORD *)v9 * a1 * *((_DWORD *)v9 + 1) * *((_DWORD *)v9 + 2) != (_DWORD)a5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Input size doesn't match with config size.");
    goto LABEL_27;
  }
  std::vector<half>::vector(&__p, (int)a5);
  v15 = *a2;
  v16 = *((_DWORD *)*a2 + 2);
  if (v16 >= 1)
  {
    v17 = 0;
    for (i = 0; i != v16; ++i)
    {
      if (a1 >= 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = *((unsigned int *)v15 + 1);
        v22 = v16 * v21;
        v23 = v21 * v17;
        do
        {
          if ((int)v21 >= 1)
          {
            v24 = 0;
            v25 = *(unsigned int *)v15;
            v26 = __p;
            v27 = i + v25 * v19;
            v28 = v25 * v23;
            do
            {
              if ((int)v25 >= 1)
              {
                v29 = &a4[2 * v28];
                v30 = v27;
                v31 = v25;
                do
                {
                  v32 = *(_WORD *)v29;
                  v29 += 2;
                  v26[v30] = v32;
                  v30 += v22;
                  --v31;
                }
                while (v31);
              }
              ++v24;
              v27 += v16;
              v28 += v25;
            }
            while (v24 != v21);
          }
          ++v20;
          v19 += v22;
          v23 += v21;
        }
        while (v20 != a1);
      }
      v17 += a1;
    }
  }
  memcpy(a4, __p, v50 - (_BYTE *)__p);
  v33 = *(_QWORD *)*a2;
  v34 = *((_DWORD *)*a2 + 2);
  v35 = (char *)operator new(0x10uLL);
  v48[1] = v35 + 16;
  v48[2] = v35 + 16;
  *(_DWORD *)v35 = a1;
  *(_QWORD *)(v35 + 4) = v33;
  *((_DWORD *)v35 + 3) = v34;
  v48[0] = v35;
  v36 = **a3;
  v37 = *((_DWORD *)*a3 + 2);
  v38 = (char *)operator new(0x10uLL);
  v47[1] = (int *)(v38 + 16);
  v47[2] = (int *)(v38 + 16);
  *(_DWORD *)v38 = a1;
  *(_QWORD *)(v38 + 4) = v36;
  *((_DWORD *)v38 + 3) = v37;
  v47[0] = (int *)v38;
  ou3dod::PaddingOrTrimming(v48, v47, a4);
  operator delete(v38);
  operator delete(v35);
  if (__p)
  {
    v50 = __p;
    operator delete(__p);
  }
}

void sub_2294E03C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void ou3dod::ParseNetOutputAF(float32x4_t *a1, int a2, int a3, void *a4, uint64_t *a5, char *a6, unint64_t a7, uint64_t a8, char *a9, unint64_t a10, char *a11, unint64_t a12, uint64_t *a13)
{
  uint64_t v17;
  __int32 v18;
  _DWORD *v19;
  unint64_t v20;
  float *v21;
  float *v22;
  uint64_t v23;
  char *v24;
  float v31;
  uint64_t v34;
  char *v35;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  std::vector<int>::pointer end;
  float *v59;
  int *v60;
  std::vector<int>::pointer begin;
  int64_t v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  int *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  std::vector<int>::pointer v77;
  std::vector<int>::pointer v78;
  int v79;
  uint64_t v80;
  uint64_t i;
  double v82;
  float v83;
  float v84;
  std::vector<int>::pointer v85;
  uint64_t v86;
  float v89;
  float v92;
  float16x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  uint64_t v96;
  float v97;
  float v99;
  char *v100;
  char *v101;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  int v112;
  __int32 v113;
  unsigned __int32 v114;
  float32x4_t v115;
  float32x4_t v116;
  char *v117;
  __int32 v119;
  float32x4_t v132;
  int8x16_t v140;
  int v143;
  unsigned int v144;
  float32x4_t v145;
  float32x4_t v146;
  char *v149;
  char *v151;
  uint64_t v152;
  float v155;
  int8x16_t v158;
  int8x16_t v169;
  int8x16_t v174;
  uint64_t v181;
  void *v182;
  id *v183;
  unint64_t v184;
  uint64_t v185;
  float v188;
  float v189;
  uint64_t v190;
  void *v191;
  id *v192;
  unint64_t v193;
  uint64_t v194;
  float *__p;
  uint64_t *v196;
  float32x4_t *v197;
  int v198;
  float32x4_t v199;
  __int16 v200;
  __int16 v201;
  int v202;
  float v203;
  std::vector<int>::pointer j;
  uint64_t v206;
  float32x4_t v207;
  __n128 v208;
  float32x4_t v210;
  float32x4_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  void *v215;
  void *v216;
  void *v217[17];
  void *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  std::vector<int> v227;
  id v228;
  void **v229[2];

  v228 = a4;
  v197 = a1;
  if (a1[4].i8[0])
  {
    v17 = a1[1].i64[0];
    v18 = a1[1].i32[2];
    v19 = operator new(0xCuLL);
    v217[1] = v19 + 3;
    v217[2] = v19 + 3;
    *(_QWORD *)v19 = v17;
    v19[2] = v18;
    v217[0] = v19;
    memset(&v227, 0, sizeof(v227));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v227, v19, (uint64_t)(v19 + 3), 3uLL);
    *v227.__begin_ = 64;
    ou3dod::J4OutputSpecialHandling(1, (char **)&v227, (uint64_t **)v217, a6, a7);
    ou3dod::J4OutputSpecialHandling(a3, (char **)&v227, (uint64_t **)v217, a9, a10);
    ou3dod::J4OutputSpecialHandling(30, (char **)&v227, (uint64_t **)v217, a11, a12);
    if (v227.__begin_)
    {
      v227.__end_ = v227.__begin_;
      operator delete(v227.__begin_);
    }
    operator delete(v19);
  }
  v196 = a5;
  v20 = a3;
  v198 = a2;
  if (a2 < 1)
  {
    v41 = 0;
    __p = 0;
  }
  else
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = &a9[2 * a2];
    do
    {
      _H0 = *(_WORD *)&a6[2 * v23];
      __asm { FCVT            S0, H0 }
      v31 = expf(-_S0);
      _H1 = *(_WORD *)&a9[2 * v23];
      __asm { FCVT            S1, H1 }
      v34 = a3 - 1;
      v35 = v24;
      if (a3 >= 2)
      {
        do
        {
          _H2 = *(_WORD *)v35;
          __asm { FCVT            S2, H2 }
          if (_S1 < _S2)
            _S1 = _S2;
          v35 += 2 * a2;
          --v34;
        }
        while (v34);
      }
      v38 = 1.0 / (v31 + 1.0);
      v39 = 1.0 / (expf(-_S1) + 1.0);
      v40 = v38 * v39;
      if (v22 >= v21)
      {
        v42 = ((char *)v22 - (char *)__p) >> 3;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (v21 - __p > v43)
          v43 = v21 - __p;
        if ((unint64_t)((char *)v21 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          if (v44 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v45 = (char *)operator new(8 * v44);
        }
        else
        {
          v45 = 0;
        }
        v46 = &v45[8 * v42];
        *(float *)v46 = v40;
        *((_DWORD *)v46 + 1) = v23;
        if (v22 == __p)
        {
          __p = (float *)&v45[8 * v42];
        }
        else
        {
          v47 = &v45[8 * v42];
          do
          {
            v48 = *((_QWORD *)v22 - 1);
            v22 -= 2;
            *((_QWORD *)v47 - 1) = v48;
            v47 -= 8;
          }
          while (v22 != __p);
          v22 = __p;
          __p = (float *)v47;
        }
        v21 = (float *)&v45[8 * v44];
        v41 = (uint64_t)(v46 + 8);
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v22 = v40;
        *((_DWORD *)v22 + 1) = v23;
        v41 = (uint64_t)(v22 + 2);
      }
      v49 = (v41 - (uint64_t)__p) >> 3;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::$_0 &,std::__wrap_iter<ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::ScoreInfo *>>((uint64_t)__p, v41, v49);
      if ((unint64_t)(v41 - (_QWORD)__p) >= 0x1F41)
      {
        if (v41 - (uint64_t)__p >= 9)
        {
          v50 = 0;
          v51 = __p;
          v52 = *(_QWORD *)__p;
          do
          {
            v53 = v51;
            v51 += 2 * v50 + 2;
            v54 = 2 * v50;
            v50 = (2 * v50) | 1;
            v55 = v54 + 2;
            if (v55 < v49 && *v51 > v51[2])
            {
              v51 += 2;
              v50 = v55;
            }
            *(_QWORD *)v53 = *(_QWORD *)v51;
          }
          while (v50 <= (uint64_t)((unint64_t)(v49 - 2) >> 1));
          v56 = (_QWORD *)(v41 - 8);
          if (v51 == (float *)(v41 - 8))
          {
            *(_QWORD *)v51 = v52;
          }
          else
          {
            *(_QWORD *)v51 = *v56;
            *v56 = v52;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::$_0 &,std::__wrap_iter<ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::ScoreInfo *>>((uint64_t)__p, (uint64_t)(v51 + 2), ((char *)(v51 + 2) - (char *)__p) >> 3);
          }
        }
        v41 -= 8;
      }
      ++v23;
      v24 += 2;
      v22 = (float *)v41;
    }
    while (v23 != a2);
  }
  memset(&v227, 0, sizeof(v227));
  std::vector<int>::reserve(&v227, 0x3E8uLL);
  v57 = a9;
  if (__p != (float *)v41)
  {
    do
    {
      end = v227.__end_;
      if (v227.__end_ >= v227.__end_cap_.__value_)
      {
        begin = v227.__begin_;
        v62 = v227.__end_ - v227.__begin_;
        v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v64 = (char *)v227.__end_cap_.__value_ - (char *)v227.__begin_;
        if (((char *)v227.__end_cap_.__value_ - (char *)v227.__begin_) >> 1 > v63)
          v63 = v64 >> 1;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
          v65 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        if (v65)
        {
          v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v227.__end_cap_, v65);
          begin = v227.__begin_;
          end = v227.__end_;
        }
        else
        {
          v66 = 0;
        }
        v67 = (int *)&v66[4 * v62];
        *v67 = *((_DWORD *)__p + 1);
        v60 = v67 + 1;
        while (end != begin)
        {
          v68 = *--end;
          *--v67 = v68;
        }
        v227.__begin_ = v67;
        v227.__end_ = v60;
        v227.__end_cap_.__value_ = (int *)&v66[4 * v65];
        if (begin)
          operator delete(begin);
        v59 = __p;
      }
      else
      {
        v59 = __p;
        *v227.__end_ = *((_DWORD *)__p + 1);
        v60 = end + 1;
      }
      v227.__end_ = v60;
      if (v41 - (uint64_t)v59 >= 9)
      {
        v69 = 0;
        v70 = (v41 - (uint64_t)v59) >> 3;
        v71 = *(_QWORD *)v59;
        v72 = v59;
        do
        {
          v73 = v72;
          v72 += 2 * v69 + 2;
          v74 = 2 * v69;
          v69 = (2 * v69) | 1;
          v75 = v74 + 2;
          if (v75 < v70 && *v72 > v72[2])
          {
            v72 += 2;
            v69 = v75;
          }
          *(_QWORD *)v73 = *(_QWORD *)v72;
        }
        while (v69 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
        v76 = (_QWORD *)(v41 - 8);
        if (v72 == (float *)(v41 - 8))
        {
          *(_QWORD *)v72 = v71;
          v59 = __p;
        }
        else
        {
          *(_QWORD *)v72 = *v76;
          *v76 = v71;
          v59 = __p;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::$_0 &,std::__wrap_iter<ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::ScoreInfo *>>((uint64_t)__p, (uint64_t)(v72 + 2), ((char *)(v72 + 2) - (char *)__p) >> 3);
        }
      }
      v41 -= 8;
    }
    while (v59 != (float *)v41);
  }
  if (v227.__begin_ != v227.__end_)
  {
    v77 = v227.__end_ - 1;
    if (v227.__end_ - 1 > v227.__begin_)
    {
      v78 = v227.__begin_ + 1;
      do
      {
        v79 = *(v78 - 1);
        *(v78 - 1) = *v77;
        *v77-- = v79;
        _CF = v78++ >= v77;
      }
      while (!_CF);
    }
  }
  v80 = *a13;
  for (i = a13[1]; i != v80; std::__destroy_at[abi:ne180100]<OUBox3d,0>(i))
    i -= 224;
  a13[1] = v80;
  if (a3 >= 1)
  {
    v206 = 0;
    v82 = 1.0;
    v83 = 0.1;
    v84 = 0.5;
    do
    {
      v224 = 0;
      v225 = 0;
      v226 = 0;
      v221 = 0;
      v222 = 0;
      v223 = 0;
      v85 = v227.__begin_;
      for (j = v227.__end_; v85 != j; v57 = a9)
      {
        v86 = *v85;
        _H0 = *(_WORD *)&a6[2 * v86];
        __asm { FCVT            S0, H0 }
        v89 = expf(-_S0);
        _H0 = *(_WORD *)&v57[2 * (int)v86 + 2 * (int)v206 * v198];
        __asm { FCVT            S0, H0 }
        v92 = expf(-_S0);
        v218 = 0;
        v219 = 0;
        v220 = 0;
        std::vector<float>::reserve(&v218, v20);
        v96 = 0;
        v97 = v82 / (v89 + v82);
        *(double *)_Q0.i64 = v82 / (v92 + v82);
        v99 = *(double *)_Q0.i64;
        v100 = &v57[2 * v86];
        v101 = v219;
        do
        {
          _H0 = *(_WORD *)&v100[2 * v96 * v198];
          __asm { FCVT            S10, H0 }
          if (v101 >= v220)
          {
            v105 = (char *)v218;
            v106 = (v101 - (_BYTE *)v218) >> 2;
            v107 = v106 + 1;
            if ((unint64_t)(v106 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v108 = v220 - (_BYTE *)v218;
            if ((v220 - (_BYTE *)v218) >> 1 > v107)
              v107 = v108 >> 1;
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
              v109 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v109 = v107;
            if (v109)
            {
              v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v220, v109);
              v105 = (char *)v218;
              v101 = v219;
            }
            else
            {
              v110 = 0;
            }
            v111 = &v110[4 * v106];
            *(_DWORD *)v111 = _S10;
            v104 = v111 + 4;
            while (v101 != v105)
            {
              v112 = *((_DWORD *)v101 - 1);
              v101 -= 4;
              *((_DWORD *)v111 - 1) = v112;
              v111 -= 4;
            }
            v218 = v111;
            v219 = v104;
            v220 = &v110[4 * v109];
            if (v105)
              operator delete(v105);
          }
          else
          {
            *(_DWORD *)v101 = _S10;
            v104 = v101 + 4;
          }
          v219 = v104;
          ++v96;
          v101 = v104;
        }
        while (v96 != v20);
        *(float *)v229 = v97 * v99;
        if ((float)(v97 * v99) >= v83)
        {
          v113 = v197[1].i32[1];
          v114 = v197[1].u32[2];
          v116 = v197[2];
          v115 = v197[3];
          v117 = &a11[2 * v86];
          _H0 = *(_WORD *)&v117[2 * v198];
          __asm { FCVT            S0, H0; float }
          v202 = v197[4].u8[0];
          v203 = *(float *)_Q0.i32;
          if (v197[4].i8[0])
          {
            v207 = v197[2];
            v199 = v197[3];
            v119 = v197[1].i32[1];
            _S0 = expf(*(float *)_Q0.i32);
            __asm
            {
              FCVT            H0, S0
              FCVT            S8, H0
            }
            v201 = *(_WORD *)v117;
            __asm { FCVT            S0, H0; float }
            _S0 = expf(_S0);
            __asm
            {
              FCVT            H0, S0
              FCVT            S0, H0
            }
            _Q0.f32[0] = (float)(_S8 - _S0) * v84;
            v210 = _Q0;
            _H9 = *(_WORD *)&v117[6 * v198];
            __asm { FCVT            S0, H9; float }
            _S0 = expf(_Q0.f32[0]);
            __asm
            {
              FCVT            H0, S0
              FCVT            S8, H0
            }
            v200 = *(_WORD *)&v117[4 * v198];
            __asm { FCVT            S0, H0; float }
            _S0 = expf(_S0);
            __asm
            {
              FCVT            H0, S0
              FCVT            S0, H0
            }
            v132 = v210;
            v132.f32[1] = (float)(_S8 - _S0) * v84;
            v211 = v132;
            _H14 = *(_WORD *)&v117[10 * v198];
            __asm { FCVT            S0, H14; float }
            _S0 = expf(_S0);
            __asm { FCVT            H8, S0 }
            _H15 = *(_WORD *)&v117[8 * v198];
            __asm { FCVT            S0, H15; float }
            _S0 = expf(_S0);
            v116 = v207;
            v95 = v211;
            v113 = v119;
            v115 = v199;
            __asm { FCVT            H0, S0 }
          }
          else
          {
            v93.i16[0] = *(_WORD *)v117;
            _H9 = *(_WORD *)&v117[6 * v198];
            __asm { FCVT            S3, H9 }
            v200 = *(_WORD *)&v117[4 * v198];
            v201 = *(_WORD *)v117;
            v93.i16[1] = v200;
            v140 = _Q0;
            v140.i32[1] = _S3;
            *(float32x2_t *)v95.f32 = vmul_f32(vsub_f32(*(float32x2_t *)v140.i8, (float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v93)), (float32x2_t)0x3F0000003F000000);
            _H8 = *(_WORD *)&v117[10 * v198];
            _H0 = *(_WORD *)&v117[8 * v198];
            _H14 = _H8;
            _H15 = _H0;
          }
          v143 = 0;
          v144 = v86 % (v114 * v113);
          v145.i64[0] = 0x3F0000003F000000;
          v145.i64[1] = 0x3F0000003F000000;
          *(float *)v140.i32 = (float)(int)(v86 / (v114 * v113)) * v116.f32[0];
          v94.i32[0] = v144 / v114;
          v94.i32[1] = v144 % v114;
          *(float32x2_t *)v94.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v116.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL), 4uLL), vcvt_f32_s32(*(int32x2_t *)v94.i8));
          v146 = vaddq_f32(vaddq_f32(v115, vmulq_f32(v116, v145)), (float32x4_t)vextq_s8(vextq_s8(v140, v140, 4uLL), v94, 0xCuLL));
          __asm
          {
            FCVT            S2, H8
            FCVT            S0, H0
          }
          v95.f32[2] = (float)(_S2 - _S0) * v84;
          v208 = (__n128)vaddq_f32(v146, v95);
          v149 = &v117[12 * v198];
          LOWORD(_S0) = *(_WORD *)v149;
          __asm { FCVT            S0, H0 }
          v151 = &a11[14 * v198 + 2 * v86];
          v152 = -11;
          do
          {
            _H1 = *(_WORD *)v151;
            __asm { FCVT            S1, H1 }
            if (_S0 < _S1)
            {
              v143 = v152 + 12;
              _S0 = _S1;
            }
            v151 += 2 * v198;
            _CF = __CFADD__(v152++, 1);
          }
          while (!_CF);
          v155 = v83;
          _H0 = *(_WORD *)&v149[2 * (v143 + 12) * v198];
          __asm { FCVT            S0, H0; float }
          _S8 = expf(_S0);
          _H0 = v201;
          __asm { FCVT            S11, H0 }
          _H0 = v200;
          __asm
          {
            FCVT            S10, H0
            FCVT            S9, H9
          }
          if (v202)
          {
            _S0 = expf(v203);
            __asm
            {
              FCVT            H0, S0
              FCVT            S13, H0
            }
            _S0 = expf(_S11);
            __asm
            {
              FCVT            H0, S0
              FCVT            S0, H0
            }
            *(float *)v169.i32 = _S13 + _S0;
            v212 = v169;
            _S0 = expf(_S10);
            __asm
            {
              FCVT            H0, S0
              FCVT            S10, H0
            }
            _S0 = expf(_S9);
            __asm
            {
              FCVT            H0, S0
              FCVT            S0, H0
            }
            v174 = v212;
            *(float *)&v174.i32[1] = _S10 + _S0;
            v213 = v174;
            __asm { FCVT            S0, H15; float }
            _S0 = expf(_S0);
            __asm
            {
              FCVT            H15, S0
              FCVT            S0, H14; float
            }
            _S0 = expf(_S0);
            v158 = v213;
            __asm { FCVT            H14, S0 }
          }
          else
          {
            *(float *)v158.i32 = v203 + _S11;
            *(float *)&v158.i32[1] = _S10 + _S9;
          }
          __asm
          {
            FCVT            S0, H15
            FCVT            S2, H14
          }
          *(float *)&v158.i32[2] = _S0 + _S2;
          v214 = v158;
          centroidSizeAngleToBox3d(v217, v208, v158, 0.0);
          v181 = *v196;
          objc_msgSend(MEMORY[0x24BDD1880], "UUID");
          v182 = (void *)objc_claimAutoreleasedReturnValue();
          v183 = (id *)(v181 + 8 * v206);
          v216 = v182;
          v184 = v225;
          if (v225 >= v226)
          {
            v185 = std::vector<OUBox3d>::__emplace_back_slow_path<box3d,NSString * const {__strong}&,float const&,NSUUID * {__strong},std::vector<float> const&,NSString * {__strong}&>(&v224, (__int128 *)v217, v183, (float *)v229, &v216, (uint64_t)&v218, &v228);
            v83 = v155;
            v82 = 1.0;
            v84 = 0.5;
          }
          else
          {
            OUBox3d::OUBox3d(v225, (__int128 *)v217, v183, v182, (uint64_t)&v218, v228, *(float *)v229);
            v83 = v155;
            v82 = 1.0;
            v84 = 0.5;
            v185 = v184 + 224;
          }
          __asm
          {
            FCVT            H1, S8
            FCVT            D1, H1
          }
          v188 = (double)(2 * v143) * 3.14159265 / 12.0 + _D1;
          v189 = v188 + floor(v188 / 6.28318531) * -6.28318531;
          v225 = v185;

          centroidSizeAngleToBox3d(v217, v208, v214, -v189);
          v190 = *v196;
          objc_msgSend(MEMORY[0x24BDD1880], "UUID");
          v191 = (void *)objc_claimAutoreleasedReturnValue();
          v192 = (id *)(v190 + 8 * v206);
          v215 = v191;
          v193 = v222;
          if (v222 >= v223)
          {
            v194 = std::vector<OUBox3d>::__emplace_back_slow_path<box3d,NSString * const {__strong}&,float const&,NSUUID * {__strong},std::vector<float> const&,NSString * {__strong}&>(&v221, (__int128 *)v217, v192, (float *)v229, &v215, (uint64_t)&v218, &v228);
          }
          else
          {
            OUBox3d::OUBox3d(v222, (__int128 *)v217, v192, v191, (uint64_t)&v218, v228, *(float *)v229);
            v194 = v193 + 224;
          }
          v222 = v194;

        }
        if (v218)
        {
          v219 = (char *)v218;
          operator delete(v218);
        }
        ++v85;
      }
      nmsSameCls(&v224, (uint64_t)box3dIouLoose, (char **)v217, 0.25);
      select<OUBox3d>(&v221, v217, (uint64_t *)&v218);
      std::vector<OUBox3d>::__insert_with_size[abi:ne180100]<std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>>(a13, (__int128 *)a13[1], (__int128 *)v218, (uint64_t)v219, 0x6DB6DB6DB6DB6DB7 * ((v219 - (_BYTE *)v218) >> 5));
      v229[0] = &v218;
      std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](v229);
      if (v217[0])
      {
        v217[1] = v217[0];
        operator delete(v217[0]);
      }
      v217[0] = &v221;
      std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
      v217[0] = &v224;
      std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
      ++v206;
    }
    while (v206 != v20);
  }
  if (v227.__begin_)
  {
    v227.__end_ = v227.__begin_;
    operator delete(v227.__begin_);
  }
  if (__p)
    operator delete(__p);

}

void sub_2294E1104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  uint64_t v64;

  operator delete(v63);

  _Unwind_Resume(a1);
}

float box3dIouLoose(const box3d *a1, const box3d *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int32 v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  float32x4_t v20;
  float v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  float *v25;
  float v26;
  float32x4_t v27;
  int v28;
  __int128 v29;
  float *v30;
  float v31;
  float v32;
  float result;
  float32x2_t v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;

  v2 = *(float32x4_t *)a1;
  v3 = *(float32x4_t *)a2;
  v4 = 1;
  v5 = *(float32x4_t *)a1;
  v6 = *(float32x4_t *)a2;
  do
  {
    v7 = 0;
    v8 = *((_OWORD *)a1 + v4);
    v9 = *((_OWORD *)a2 + v4);
    do
    {
      v10 = v6;
      v11 = v3;
      v12 = v5;
      v13 = v2.i32[3];
      v14 = (float *)((unint64_t)&v47 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      v15 = (float *)((unint64_t)&v43 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      v16 = (float *)((unint64_t)&v46 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      v17 = (float *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      v48 = v2;
      v18 = *v17;
      v44 = v8;
      v19 = *(float *)((unint64_t)&v44 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      if (v19 < v18)
        v18 = *(float *)((unint64_t)&v44 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      *v17 = v18;
      v20 = v48;
      v2 = v48;
      v2.i32[3] = v13;
      v46 = v11;
      v21 = *v16;
      v43 = v9;
      v22 = *v15;
      if (*v15 < v21)
        v21 = *v15;
      *v16 = v21;
      v23 = v46;
      v3 = v46;
      v3.i32[3] = v11.i32[3];
      v47 = v12;
      if (*v14 >= v19)
        v19 = *v14;
      *v14 = v19;
      v24 = v47;
      v5 = v47;
      v5.i32[3] = v12.i32[3];
      v25 = (float *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      v45 = v10;
      v26 = *v25;
      if (*v25 < v22)
        v26 = v22;
      *v25 = v26;
      v27 = v45;
      v6 = v45;
      v6.i32[3] = v10.i32[3];
      ++v7;
    }
    while (v7 != 3);
    ++v4;
  }
  while (v4 != 5);
  v28 = 0;
  v29 = 0uLL;
  do
  {
    v41 = v24;
    v30 = (float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3)));
    v31 = *(float *)((unint64_t)&v41 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3)));
    v40 = v27;
    if (*(float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3))) < v31)
      v31 = *(float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3)));
    v39 = v20;
    v32 = *(float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3)));
    v38 = v23;
    if (v32 < *v30)
      v32 = *v30;
    v42 = v29;
    *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFF3 | (4 * (v28 & 3))) = v31 - v32;
    v29 = v42;
    ++v28;
  }
  while (v28 != 3);
  result = 0.0;
  v34 = vmaxnm_f32(*(float32x2_t *)&v42, 0);
  v35 = fmaxf(*((float *)&v42 + 2), 0.0) * vmul_lane_f32(v34, v34, 1).f32[0];
  if (v35 >= 0.00000001)
  {
    v36 = vsubq_f32(v6, v3);
    v37 = vsubq_f32(v5, v2);
    return v35
         / (float)(vaddq_f32(vmulq_laneq_f32(vmulq_lane_f32(v36, *(float32x2_t *)v36.f32, 1), v36, 2), vmulq_laneq_f32(vmulq_lane_f32(v37, *(float32x2_t *)v37.f32, 1), v37, 2)).f32[0]- v35);
  }
  return result;
}

void select<OUBox3d>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[3];
  OUBox3d v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *__p;
  id v16;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<OUBox3d>::reserve(a3, (uint64_t)(a2[1] - *a2) >> 3);
  v7 = (_QWORD *)*a2;
  v6 = (_QWORD *)a2[1];
  memset(v8, 0, sizeof(v8));
  std::vector<OUBox3d>::__init_with_size[abi:ne180100]<OUBox3d*,OUBox3d*>(v8, *a1, a1[1], 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
  for (; v7 != v6; ++v7)
  {
    OUBox3d::OUBox3d(&v9, (const OUBox3d *)(v8[0] + 224 * *v7));
    std::vector<OUBox3d>::push_back[abi:ne180100](a3, (__int128 *)&v9);

    if (__p)
      operator delete(__p);
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }

  }
  v9.var1 = v8;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

void sub_2294E1514(_Unwind_Exception *a1, char a2, uint64_t a3, uint64_t a4, OUBox3d *a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 56) = v5;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 56));
  _Unwind_Resume(a1);
}

uint64_t ou3dod::ParseNetOutputSSD(float a1, uint64_t a2, unsigned int a3, _QWORD *a4, float32x4_t *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  id *v9;
  uint64_t i;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  int v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float *v28;
  uint64_t v29;
  float *v30;
  float *v31;
  double v32;
  uint64_t v33;
  float v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  float v39;
  float32x4_t v40;
  float *v41;
  float *v42;
  float *v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  float v47;
  float *v48;
  float v49;
  int v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  int v54;
  float v55;
  float *v56;
  uint64_t v57;
  int v58;
  double v59;
  float v60;
  float v61;
  float *v62;
  float32x4_t v63;
  float v64;
  float *k;
  uint64_t v66;
  uint64_t v67;
  float v68;
  void *v69;
  double v71;
  float32x4_t v72;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v79;
  float *v80;
  __int128 v83[8];
  id v84;
  id v85;
  id v86;
  void *v87;
  void *v88;
  void *__p;
  id v90;
  __int128 v91[8];
  float *v92;
  float *v93;
  float *v94;
  float *v95;
  float *v96;
  __int128 v97;
  __int128 v98;
  int v99;

  v97 = 0u;
  v98 = 0u;
  v99 = 1065353216;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v9 = (id *)ou3dod::kOfflineSsdTypesLUT;
  for (i = qword_2540CA218; v9 != (id *)i; ++v9)
  {
    *(_QWORD *)&v83[0] = *v9;
    v11 = (float *)std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::at((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)v83);
    v12 = v11;
    v13 = v95;
    if (v95 >= v96)
    {
      v15 = v94;
      v16 = v95 - v94;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v18 = (char *)v96 - (char *)v94;
      if (((char *)v96 - (char *)v94) >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v96, v19);
        v15 = v94;
        v13 = v95;
      }
      else
      {
        v20 = 0;
      }
      v21 = (float *)&v20[4 * v16];
      *v21 = *v12;
      v14 = v21 + 1;
      while (v13 != v15)
      {
        v22 = *((_DWORD *)v13-- - 1);
        *((_DWORD *)v21-- - 1) = v22;
      }
      v94 = v21;
      v95 = v14;
      v96 = (float *)&v20[4 * v19];
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v95 = *v11;
      v14 = v13 + 1;
    }
    v95 = v14;

  }
  v23 = *a8;
  for (j = a8[1]; j != v23; std::__destroy_at[abi:ne180100]<OUBox3d,0>(j))
    j -= 224;
  a8[1] = v23;
  v25 = a6;
  if ((int)a3 >= 1)
  {
    v26 = 0;
    v27.i64[0] = 0;
    v27.i64[1] = LODWORD(a1);
    v72 = v27;
    v28 = (float *)(a6 + 196 * a3);
    v29 = 4 * a3;
    v30 = (float *)(a6 + 20 * a3);
    v31 = (float *)(a6 + 116 * a3);
    v32 = 12.0;
    v71 = 0.100000001;
    v33 = a3;
    do
    {
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(&v97);
      v34 = *(float *)(v25 + 4 * (v26 + v33));
      if (v34 >= -2.1972)
      {
        v35 = expf(-v34);
        v36.i32[0] = *(_DWORD *)(v25 + 4 * (v26 + 2 * a3));
        v36.i32[1] = *(_DWORD *)(v25 + 4 * (v26 + (int)(3 * a3)));
        v36.i32[2] = *(_DWORD *)(v25 + 4 * (v26 + (int)(4 * a3)));
        v79 = v36;
        v75 = *a5;
        v76 = *(float32x4_t *)(*a4 + 16 * v26);
        std::vector<float>::vector(&v92, 5uLL);
        v38 = 0;
        v39 = 1.0 / (v35 + 1.0);
        v40 = vaddq_f32(vaddq_f32(v79, v76), v75);
        v41 = v92;
        v80 = v28;
        v42 = v28;
        do
        {
          v41[v38] = *v42;
          v42 = (float *)((char *)v42 + v29);
          ++v38;
        }
        while (v38 != 5);
        v43 = v93;
        if (v41 != v93)
        {
          v77 = v40;
          v44 = 0;
          v45 = v93 - v41;
          v46 = *v41;
          if (v45 <= 1)
            v45 = 1;
          do
          {
            if (v41[v44] > v46)
              v46 = v41[v44];
            ++v44;
          }
          while (v45 != v44);
          v47 = 0.0;
          v48 = v41;
          do
          {
            v49 = *v48++;
            v47 = v47 + expf(v49 - v46);
          }
          while (v48 != v43);
          v40 = v77;
          if (v39 / v47 >= v71)
          {
            v50 = 0;
            v51 = 0;
            LODWORD(v91[0]) = 0;
            do
            {
              v52 = (float)(expf(v41[v51] - v46) * v39) / v47;
              if (v52 > v94[v51])
              {
                *(_QWORD *)&v83[0] = v91;
                *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v97, (int *)v91, (uint64_t)&std::piecewise_construct, (_DWORD **)v83)+ 5) = v52;
                v50 = v91[0];
                v41 = v92;
                v43 = v93;
              }
              LODWORD(v91[0]) = ++v50;
              v51 = v50;
            }
            while (v50 < (unint64_t)(v43 - v41));
            v32 = 12.0;
            v40 = v77;
          }
        }
        v53 = 0;
        v54 = 0;
        v55 = *(float *)(a6 + 4 * (v26 + (int)(5 * a3)));
        v56 = v30;
        do
        {
          if (*v56 > v55)
          {
            v55 = *v56;
            v54 = v53;
          }
          ++v53;
          v56 = (float *)((char *)v56 + v29);
        }
        while (v53 != 12);
        v57 = 0;
        v58 = 0;
        v59 = *(float *)(a6 + 4 * (v26 + (int)((v54 + 17) * a3))) * 3.14159265 / v32;
        v60 = (float)v54;
        v61 = *(float *)(a6 + 4 * (v26 + (int)(29 * a3)));
        v62 = v31;
        do
        {
          if (*v62 > v61)
          {
            v61 = *v62;
            v58 = v57;
          }
          ++v57;
          v62 = (float *)((char *)v62 + v29);
        }
        while (v57 != 5);
        v63 = *(float32x4_t *)(ou3dod::kOfflineSSDAnchorSizeList + 16 * v58);
        v37.i32[0] = *(_DWORD *)(a6 + 4 * (v26 + (int)((3 * v58 + 34) * a3)));
        v37.i32[1] = *(_DWORD *)(a6 + 4 * (v26 + (int)((3 * v58 + 35) * a3)));
        *(float32x2_t *)v37.f32 = vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v63.f32);
        v37.i32[2] = vmuls_lane_f32(*(float *)(a6 + 4 * (v26 + (int)((3 * v58 + 36) * a3))), v63, 2);
        v64 = v59;
        memset(v91, 0, sizeof(v91));
        centroidSizeAngleToBox3d(v91, (__n128)vaddq_f32(v72, v40), (int8x16_t)vaddq_f32(v63, v37), v64 + (float)(v60 * 0.5236));
        for (k = (float *)v98; k; k = *(float **)k)
        {
          v66 = *((int *)k + 4);
          v67 = ou3dod::kOfflineSsdTypesLUT;
          v68 = k[5];
          objc_msgSend(MEMORY[0x24BDD1880], "UUID", *(_QWORD *)&v71);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          OUBox3d::OUBox3d((uint64_t)v83, v91, (id *)(v67 + 8 * v66), v69, (uint64_t)&v92, CFSTR("offline"), v68);
          std::vector<OUBox3d>::emplace_back<OUBox3d>(a8, v83);

          if (__p)
            operator delete(__p);
          if (v87)
          {
            v88 = v87;
            operator delete(v87);
          }

        }
        if (v92)
        {
          v93 = v92;
          operator delete(v92);
        }
        v25 = a6;
        v28 = v80;
        v33 = a3;
      }
      ++v26;
      ++v28;
      ++v30;
      ++v31;
    }
    while (v26 != v33);
  }
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v97);
}

void sub_2294E1B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,OUBox3d *a21)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)(v21 - 232);
  if (v23)
  {
    *(_QWORD *)(v21 - 224) = v23;
    operator delete(v23);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v21 - 208);
  _Unwind_Resume(a1);
}

uint64_t std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::at(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 40;
}

uint64_t std::vector<OUBox3d>::emplace_back<OUBox3d>(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 5);
    if ((unint64_t)(v9 + 1) > 0x124924924924924)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x92492492492492)
      v12 = 0x124924924924924;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[224 * v9];
    v18 = &v13[224 * v12];
    std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>((uint64_t)v16, a2);
    v17 = v16 + 224;
    std::vector<OUBox3d>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 224;
    a1[1] = v7 + 224;
  }
  a1[1] = v8;
  return v8 - 224;
}

void sub_2294E1D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void ou3dod::PostprocessAF(float32x4_t *a1, uint64_t a2, __CFString *a3, float32_t a4)
{
  int v7;
  uint64_t i;
  uint64_t v9;
  float v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  box3d *isa;
  char *info;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  float32x4_t v34;
  uint64_t j;
  _OWORD v37[8];
  char *v38;
  char *v39;
  char *v40;

  v7 = -1227133513 * ((uint64_t)(a3->info - (unint64_t)a3->isa) >> 5);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  std::vector<unsigned long>::reserve((void **)&v38, v7);
  if (v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = (uint64_t)a3->isa + 224 * i;
      v10 = *(float *)(v9 + 136);
      if (v10 >= *(float *)std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::at(a2, (void **)(v9 + 128)))
      {
        v11 = v39;
        if (v39 >= v40)
        {
          v13 = v38;
          v14 = (v39 - v38) >> 3;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v16 = v40 - v38;
          if ((v40 - v38) >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v40, v17);
            v13 = v38;
            v11 = v39;
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[8 * v14];
          *(_QWORD *)v19 = i;
          v12 = v19 + 8;
          while (v11 != v13)
          {
            v20 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *((_QWORD *)v19 - 1) = v20;
            v19 -= 8;
          }
          v38 = v19;
          v39 = v12;
          v40 = &v18[8 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_QWORD *)v39 = i;
          v12 = v11 + 8;
        }
        v39 = v12;
      }
    }
  }
  v21 = v39 - v38;
  if ((int)((unint64_t)(v39 - v38) >> 3) >= 1)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      OUBox3d::operator=((uint64_t)a3->isa + v22, (__int128 *)a3->isa + 14 * *(_QWORD *)&v38[v23]);
      v23 += 8;
      v22 += 224;
    }
    while ((v21 & 0x7FFFFFFF8) != v23);
  }
  std::vector<OUBox3d>::resize(a3, (int)(v21 >> 3));
  isa = (box3d *)a3->isa;
  info = (char *)a3->info;
  if (a3->isa != info)
  {
    do
    {
      swapCornerGT2QA(isa, (uint64_t)v37);
      v26 = v37[0];
      v27 = v37[1];
      v28 = v37[3];
      *((_OWORD *)isa + 2) = v37[2];
      *((_OWORD *)isa + 3) = v28;
      *(_OWORD *)isa = v26;
      *((_OWORD *)isa + 1) = v27;
      v29 = v37[4];
      v30 = v37[5];
      v31 = v37[7];
      *((_OWORD *)isa + 6) = v37[6];
      *((_OWORD *)isa + 7) = v31;
      *((_OWORD *)isa + 4) = v29;
      *((_OWORD *)isa + 5) = v30;
      isa = (box3d *)((char *)isa + 224);
    }
    while (isa != (box3d *)info);
    v32 = (char *)a3->isa;
    v33 = (char *)a3->info;
    if (a3->isa != v33)
    {
      v34 = *a1;
      v34.f32[2] = a4;
      do
      {
        for (j = 0; j != 128; j += 16)
          *(float32x4_t *)&v32[j] = vaddq_f32(v34, *(float32x4_t *)&v32[j]);
        v32 += 224;
      }
      while (v32 != v33);
    }
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
}

void sub_2294E1FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(_QWORD *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void ou3dod::PostprocessSSD(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18[3];
  void **v19;

  nmsSameCls(a1, (uint64_t)box3dIouLoose, v18, 0.25);
  select<OUBox3d>(a1, v18, (uint64_t *)&v10);
  std::vector<OUBox3d>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = v10;
  a1[2] = v11;
  *(_QWORD *)&v11 = 0;
  v10 = 0uLL;
  v19 = (void **)&v10;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&v19);
  v2 = *a1;
  v3 = a1[1];
  while (v2 != v3)
  {
    swapCornerGT2QA((const box3d *)v2, (uint64_t)&v10);
    v4 = v10;
    v5 = v11;
    v6 = v13;
    *(_OWORD *)(v2 + 32) = v12;
    *(_OWORD *)(v2 + 48) = v6;
    *(_OWORD *)v2 = v4;
    *(_OWORD *)(v2 + 16) = v5;
    v7 = v14;
    v8 = v15;
    v9 = v17;
    *(_OWORD *)(v2 + 96) = v16;
    *(_OWORD *)(v2 + 112) = v9;
    *(_OWORD *)(v2 + 64) = v7;
    *(_OWORD *)(v2 + 80) = v8;
    v2 += 224;
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
}

void sub_2294E216C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(_QWORD *)(v1 - 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2294E22F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::priority_queue<float,std::vector<float>,std::greater<float>>::push(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  float *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = (float *)(v14 + 4);
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = (float *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 8) = v7;
  v17 = *(_DWORD **)a1;
  v18 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v18 >= 5)
  {
    v19 = (((unint64_t)v18 >> 2) - 2) >> 1;
    v20 = (float *)&v17[v19];
    v22 = *(v7 - 1);
    v21 = v7 - 1;
    v23 = v22;
    v24 = *v20;
    if (*v20 > v22)
    {
      do
      {
        *v21 = v24;
        v21 = v20;
        if (!v19)
          break;
        v19 = (v19 - 1) >> 1;
        v20 = (float *)&v17[v19];
        v24 = *v20;
      }
      while (*v20 > v23);
      *v21 = v23;
    }
  }
}

void std::priority_queue<float>::push(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  float *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = (float *)(v14 + 4);
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = (float *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 8) = v7;
  v17 = *(_DWORD **)a1;
  v18 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v18 >= 5)
  {
    v19 = (((unint64_t)v18 >> 2) - 2) >> 1;
    v20 = (float *)&v17[v19];
    v22 = *(v7 - 1);
    v21 = v7 - 1;
    v23 = v22;
    v24 = *v20;
    if (*v20 < v22)
    {
      do
      {
        *v21 = v24;
        v21 = v20;
        if (!v19)
          break;
        v19 = (v19 - 1) >> 1;
        v20 = (float *)&v17[v19];
        v24 = *v20;
      }
      while (*v20 < v23);
      *v21 = v23;
    }
  }
}

_QWORD *std::vector<half>::vector(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<half>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2294E25E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<half>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_2294E26D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<OUBox3d>::__emplace_back_slow_path<box3d,NSString * const {__strong}&,float const&,NSUUID * {__strong},std::vector<float> const&,NSString * {__strong}&>(uint64_t *a1, __int128 *a2, id *a3, float *a4, void **a5, uint64_t a6, void **a7)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;

  v8 = *a1;
  v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x124924924924924)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v17 = (uint64_t)(a1 + 2);
  v18 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v8) >> 5);
  if (2 * v18 > v10)
    v10 = 2 * v18;
  if (v18 >= 0x92492492492492)
    v19 = 0x124924924924924;
  else
    v19 = v10;
  v27 = a1 + 2;
  if (v19)
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v17, v19);
  else
    v20 = 0;
  v23 = v20;
  v24 = &v20[224 * v9];
  v25 = (uint64_t)v24;
  v26 = &v20[224 * v19];
  OUBox3d::OUBox3d((uint64_t)v24, a2, a3, *a5, a6, *a7, *a4);
  v25 = (uint64_t)(v24 + 224);
  std::vector<OUBox3d>::__swap_out_circular_buffer(a1, &v23);
  v21 = a1[1];
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)&v23);
  return v21;
}

void sub_2294E2830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *std::vector<OUBox3d>::__insert_with_size[abi:ne180100]<std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>>(uint64_t *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 *v5;
  __int128 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  OUBox3d *v22;
  uint64_t v23;
  OUBox3d *v24;
  _QWORD v26[2];
  OUBox3d *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 5) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)a2) >> 5) >= a5)
      {
        v21 = &a3[14 * a5];
      }
      else
      {
        v21 = &a3[2 * ((uint64_t)(v12 - (_QWORD)a2) >> 5)];
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d const*,OUBox3d const*,OUBox3d*>(v9, (uint64_t)v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<OUBox3d>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[14 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>,OUBox3d*,0>(v7, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x124924924924924)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 5);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 5);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x92492492492492)
        v18 = 0x124924924924924;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v9, v18);
      else
        v19 = 0;
      v22 = (OUBox3d *)&v19[224 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[224 * v18];
      v23 = 224 * a5;
      v24 = (OUBox3d *)((char *)v22 + 224 * a5);
      do
      {
        OUBox3d::OUBox3d(v22, (const OUBox3d *)v7);
        v22 = (OUBox3d *)((char *)v22 + 224);
        v7 += 14;
        v23 -= 224;
      }
      while (v23);
      v27 = v24;
      v5 = (__int128 *)std::vector<OUBox3d>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_2294E2A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<OUBox3d>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = (__int128 *)(a2 + v6 - a4);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(v8, v10);
      v10 += 14;
      v8 += 224;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<OUBox3d *,OUBox3d *,OUBox3d *>((uint64_t)&v12, a2, v7, v6);
}

uint64_t std::vector<OUBox3d>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  __int128 *v3;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a3;
  v6 = a2[1];
  v7 = (__int128 *)*a1;
  v8 = v6;
  if ((__int128 *)*a1 != a3)
  {
    v9 = a3;
    v8 = a2[1];
    do
    {
      v8 -= 224;
      v9 -= 14;
      std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(v8, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  v10 = (__int128 *)a1[1];
  v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(v11, v3);
      v3 += 14;
      v11 += 224;
    }
    while (v3 != v10);
    v8 = a2[1];
  }
  a2[2] = v11;
  v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d const*,OUBox3d const*,OUBox3d*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      OUBox3d::OUBox3d((OUBox3d *)(a4 + v7), (const OUBox3d *)(a2 + v7));
      v7 += 224;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2294E2C24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 224;
    do
    {
      std::__destroy_at[abi:ne180100]<OUBox3d,0>(v4 + v2);
      v2 -= 224;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<OUBox3d *,OUBox3d *,OUBox3d *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 224);
      v11 = *(_OWORD *)(a3 + v7 - 208);
      v12 = *(_OWORD *)(a3 + v7 - 176);
      *(_OWORD *)(v9 - 192) = *(_OWORD *)(a3 + v7 - 192);
      *(_OWORD *)(v9 - 176) = v12;
      *(_OWORD *)(v9 - 224) = v10;
      *(_OWORD *)(v9 - 208) = v11;
      v13 = *(_OWORD *)(a3 + v7 - 160);
      v14 = *(_OWORD *)(a3 + v7 - 144);
      v15 = *(_OWORD *)(a3 + v7 - 112);
      *(_OWORD *)(v9 - 128) = *(_OWORD *)(a3 + v7 - 128);
      *(_OWORD *)(v9 - 112) = v15;
      *(_OWORD *)(v9 - 160) = v13;
      *(_OWORD *)(v9 - 144) = v14;
      v16 = *(_QWORD *)(a3 + v7 - 96);
      *(_QWORD *)(a3 + v7 - 96) = 0;
      v17 = *(void **)(a4 + v7 - 96);
      *(_QWORD *)(v9 - 96) = v16;

      *(_DWORD *)(v9 - 88) = *(_DWORD *)(a3 + v7 - 88);
      v18 = *(_QWORD *)(a3 + v7 - 80);
      *(_QWORD *)(v8 - 80) = 0;
      v19 = *(void **)(a4 + v7 - 80);
      *(_QWORD *)(v9 - 80) = v18;

      v20 = *(_QWORD *)(a3 + v7 - 72);
      *(_QWORD *)(v8 - 72) = 0;
      v21 = *(void **)(a4 + v7 - 72);
      *(_QWORD *)(v9 - 72) = v20;

      std::vector<float>::__move_assign(a4 + v7 - 64, (__n128 *)(a3 + v7 - 64));
      std::vector<BOOL>::__move_assign(a4 + v7 - 40, (_QWORD *)(a3 + v7 - 40));
      v22 = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v8 - 16) = 0;
      v23 = *(void **)(a4 + v7 - 16);
      *(_QWORD *)(v9 - 16) = v22;

      *(_WORD *)(v9 - 8) = *(_WORD *)(a3 + v7 - 8);
      v7 -= 224;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>,OUBox3d*,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      OUBox3d::operator=(a3, v4);
      v4 += 14;
      a3 += 224;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

_QWORD *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2294E2FA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t OUBox3d::OUBox3d(uint64_t a1, __int128 *a2, id *a3, void *a4, uint64_t a5, void *a6, float a7)
{
  id v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;

  v13 = a4;
  v14 = a6;
  v15 = a2[3];
  v17 = *a2;
  v16 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v15;
  *(_OWORD *)a1 = v17;
  *(_OWORD *)(a1 + 16) = v16;
  v18 = a2[7];
  v20 = a2[4];
  v19 = a2[5];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v18;
  *(_OWORD *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 128) = *a3;
  *(float *)(a1 + 136) = a7;
  *(_QWORD *)(a1 + 144) = objc_msgSend(v13, "copy");
  v21 = v14;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 160), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_WORD *)(a1 + 216) = -1;

  return a1;
}

void sub_2294E3098(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::vector<OUBox3d>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 224;
        std::__destroy_at[abi:ne180100]<OUBox3d,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100](uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__emplace_hint_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},float> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_2294E3194(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__emplace_hint_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},float> const&>(uint64_t **a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(a1, a2, &v11, &v10, a3);
  v7 = (_QWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v7[4] = *(id *)a4;
    *((_DWORD *)v7 + 10) = *(_DWORD *)(a4 + 8);
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, void **a5)
{
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || CompareNSString::operator()((uint64_t)(a1 + 2), *a5, (void *)a2[4]))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (uint64_t *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (CompareNSString::operator()((uint64_t)(a1 + 2), (void *)v12[4], *a5))
      goto LABEL_16;
    return std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>((uint64_t)a1, a3, a5);
  }
  if (CompareNSString::operator()((uint64_t)(a1 + 2), (void *)a2[4], *a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (uint64_t *)a2[1];
      do
      {
        v15 = v14;
        v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (uint64_t *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!CompareNSString::operator()((uint64_t)(a1 + 2), *a5, (void *)v15[4]))
        return std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(uint64_t a1, _QWORD *a2, void **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        if (!CompareNSString::operator()(v7, *a3, (void *)v4[4]))
          break;
        v4 = (uint64_t *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!CompareNSString::operator()(v7, (void *)v8[4], *a3))
        break;
      v5 = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL CompareNSString::operator()(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  _BOOL8 v6;

  v4 = a2;
  v5 = a3;
  if (v5)
  {
    if (v4)
      v6 = objc_msgSend(v4, "compare:", v5) == -1;
    else
      v6 = 1;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_2294E34D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

_QWORD *std::vector<half>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<half>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_2294E3588(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::$_0 &,std::__wrap_iter<ou3dod::ParseNetOutputAF(OU3DSSDConfig const&,int,int,NSString *,std::vector<NSString * {__strong}> const&,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::span<half,18446744073709551615ul>,std::vector<OUBox3d> &)::ScoreInfo *>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  float v7;
  int v8;
  _QWORD *v9;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = (_QWORD *)(result + 8 * (v3 >> 1));
    v6 = (_QWORD *)(a2 - 8);
    v7 = *(float *)(a2 - 8);
    if (*(float *)v5 > v7)
    {
      v8 = *(_DWORD *)(a2 - 4);
      do
      {
        v9 = v6;
        v6 = v5;
        *v9 = *v5;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
      }
      while (*(float *)v5 > v7);
      *(float *)v6 = v7;
      *((_DWORD *)v6 + 1) = v8;
    }
  }
  return result;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<OUBox3d>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 5);
    if ((unint64_t)(v9 + 1) > 0x124924924924924)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x92492492492492)
      v12 = 0x124924924924924;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[224 * v9];
    v17 = &v13[224 * v12];
    std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>((uint64_t)v15, a2);
    v16 = v15 + 224;
    std::vector<OUBox3d>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    std::construct_at[abi:ne180100]<OUBox3d,OUBox3d,OUBox3d*>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 224;
    a1[1] = v7 + 224;
  }
  a1[1] = v8;
}

void sub_2294E37BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<OUBox3d>::__init_with_size[abi:ne180100]<OUBox3d*,OUBox3d*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<OUBox3d>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d*,OUBox3d*,OUBox3d*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2294E3834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<OUBox3d>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x124924924924925)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d*,OUBox3d*,OUBox3d*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      OUBox3d::OUBox3d((OUBox3d *)(a4 + v7), (const OUBox3d *)(a2 + v7));
      v7 += 224;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2294E3904(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 224;
    do
    {
      std::__destroy_at[abi:ne180100]<OUBox3d,0>(v4 + v2);
      v2 -= 224;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void std::vector<OUBox3d>::resize(__CFString *a1, unint64_t a2)
{
  uint64_t info;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  info = a1->info;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((int64_t)(info - (unint64_t)a1->isa) >> 5);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<OUBox3d>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = (uint64_t)a1->isa + 224 * a2;
    while (info != v7)
    {
      info -= 224;
      std::__destroy_at[abi:ne180100]<OUBox3d,0>(info);
    }
    a1->info = v7;
  }
}

__CFString *std::vector<OUBox3d>::__append(__CFString *a1, unint64_t a2)
{
  uint64_t p_data;
  char *v5;
  char *data;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v14;
  char *v15;
  _QWORD v16[5];

  data = a1->data;
  p_data = (uint64_t)&a1->data;
  v5 = data;
  v7 = *(_QWORD *)(p_data - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&data[-v7] >> 5) >= a2)
    return std::vector<OUBox3d>::__construct_at_end(a1, a2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((int64_t)(v7 - (unint64_t)a1->isa) >> 5);
  v9 = v8 + a2;
  if (v8 + a2 > 0x124924924924924)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (char *)a1->isa) >> 5);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x92492492492492)
    v11 = 0x124924924924924;
  else
    v11 = v9;
  v16[4] = p_data;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(p_data, v11);
  else
    v12 = 0;
  v14 = &v12[224 * v8];
  v16[0] = v12;
  v16[1] = v14;
  v16[3] = &v12[224 * v11];
  v15 = &v14[224 * a2];
  do
  {
    *((_OWORD *)v14 + 12) = 0u;
    *((_OWORD *)v14 + 13) = 0u;
    *((_OWORD *)v14 + 10) = 0u;
    *((_OWORD *)v14 + 11) = 0u;
    *((_OWORD *)v14 + 8) = 0u;
    *((_OWORD *)v14 + 9) = 0u;
    *((_OWORD *)v14 + 6) = 0u;
    *((_OWORD *)v14 + 7) = 0u;
    *((_OWORD *)v14 + 4) = 0u;
    *((_OWORD *)v14 + 5) = 0u;
    *((_OWORD *)v14 + 2) = 0u;
    *((_OWORD *)v14 + 3) = 0u;
    *(_OWORD *)v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    *((_QWORD *)v14 + 19) = CFSTR("unknown");
    *((_OWORD *)v14 + 10) = 0u;
    *((_OWORD *)v14 + 11) = 0u;
    *((_OWORD *)v14 + 12) = 0u;
    *((_QWORD *)v14 + 26) = 0;
    *((_WORD *)v14 + 108) = -1;
    v14 += 224;
  }
  while (v14 != v15);
  v16[2] = v15;
  std::vector<OUBox3d>::__swap_out_circular_buffer((uint64_t *)a1, v16);
  return (__CFString *)std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)v16);
}

void sub_2294E3B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFString *std::vector<OUBox3d>::__construct_at_end(__CFString *result, uint64_t a2)
{
  __CFString *v2;
  uint64_t info;
  uint64_t v4;

  v2 = result;
  info = result->info;
  if (a2)
  {
    v4 = info + 224 * a2;
    do
    {
      *(_OWORD *)(info + 192) = 0u;
      *(_OWORD *)(info + 208) = 0u;
      *(_OWORD *)(info + 160) = 0u;
      *(_OWORD *)(info + 176) = 0u;
      *(_OWORD *)(info + 128) = 0u;
      *(_OWORD *)(info + 144) = 0u;
      *(_OWORD *)(info + 96) = 0u;
      *(_OWORD *)(info + 112) = 0u;
      *(_OWORD *)(info + 64) = 0u;
      *(_OWORD *)(info + 80) = 0u;
      *(_OWORD *)(info + 32) = 0u;
      *(_OWORD *)(info + 48) = 0u;
      *(_OWORD *)info = 0u;
      *(_OWORD *)(info + 16) = 0u;
      result = CFSTR("unknown");
      *(_QWORD *)(info + 152) = result;
      *(_OWORD *)(info + 160) = 0u;
      *(_OWORD *)(info + 176) = 0u;
      *(_OWORD *)(info + 192) = 0u;
      *(_QWORD *)(info + 208) = 0;
      *(_WORD *)(info + 216) = -1;
      info += 224;
    }
    while (info != v4);
    info = v4;
  }
  v2->info = info;
  return result;
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void _GLOBAL__sub_I_OU3DODProcessUtils_mm()
{
  void *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  __CFString *v9;
  _QWORD *v10;
  uint64_t *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  char *v16;
  uint64_t v17;
  uint64_t j;
  _OWORD *v19;
  uint64_t k;
  uint64_t *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  __CFString *v32;
  __CFString *v33;
  __CFString *v34;
  __CFString *v35;
  __CFString *v36;
  __CFString *v37;
  __CFString *v38;
  __CFString *v39;
  __CFString *v40;
  __CFString *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x22E2CB070]();
  v1 = CFSTR("Cabinet");
  v21 = (uint64_t *)v1;
  v22 = CFSTR("Refrigerator");
  v23 = CFSTR("Shelf");
  v24 = CFSTR("Stove");
  v2 = CFSTR("Bed");
  v25 = v2;
  v26 = CFSTR("Sink");
  v27 = CFSTR("Washer");
  v28 = CFSTR("Toilet");
  v3 = CFSTR("Bathtub");
  v29 = v3;
  v30 = CFSTR("Oven");
  v31 = CFSTR("Dishwasher");
  v32 = CFSTR("Fireplace");
  v33 = CFSTR("Stool");
  v34 = CFSTR("Chair");
  v4 = CFSTR("Table");
  v35 = v4;
  v36 = CFSTR("Screen");
  v5 = CFSTR("Sofa");
  v37 = v5;
  v38 = CFSTR("Stairs");
  v39 = CFSTR("Window");
  v40 = CFSTR("Door");
  v41 = CFSTR("BuildInCabinet");
  qword_2540CA188 = 0;
  qword_2540CA190 = 0;
  ou3dod::kObjectTypesLUT = 0;
  v6 = (char *)operator new(0xA8uLL);
  v7 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v6;
  qword_2540CA188 = (uint64_t)v6;
  qword_2540CA190 = (uint64_t)(v6 + 168);
  do
  {
    *(_QWORD *)&v6[v7 * 8] = (&v21)[v7];
    ++v7;
  }
  while (v7 != 21);
  qword_2540CA188 = (uint64_t)(v6 + 168);
  for (i = 20; i != -1; --i)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_2294C8000);
  v9 = v1;
  qword_2540CA340 = 0;
  unk_2540CA348 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  v21 = &ou3dod::kAFClassIdToObjectTypeOffline;
  LOBYTE(v22) = 0;
  v10 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v10;
  *v10 = v9;
  qword_2540CA340 = (uint64_t)(v10 + 1);
  unk_2540CA348 = v10 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_2294C8000);
  v11 = v9;
  v21 = v11;
  v12 = v2;
  v22 = v12;
  v13 = v3;
  v23 = v13;
  v14 = v4;
  v24 = v14;
  v15 = v5;
  v25 = v15;
  qword_2540CA218 = 0;
  qword_2540CA220 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  v16 = (char *)operator new(0x28uLL);
  v17 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v16;
  qword_2540CA218 = (uint64_t)v16;
  qword_2540CA220 = (uint64_t)(v16 + 40);
  do
  {
    *(_QWORD *)&v16[v17 * 8] = (&v21)[v17];
    ++v17;
  }
  while (v17 != 5);
  qword_2540CA218 = (uint64_t)(v16 + 40);
  for (j = 4; j != -1; --j)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_2294C8000);
  qword_2540CA2A8 = 0;
  unk_2540CA2B0 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  v19 = operator new(0x50uLL);
  qword_2540CA2A8 = (uint64_t)(v19 + 5);
  unk_2540CA2B0 = v19 + 5;
  v19[2] = xmmword_229560760;
  v19[3] = unk_229560770;
  v19[4] = xmmword_229560780;
  *v19 = xmmword_229560740;
  v19[1] = unk_229560750;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v19;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_2294C8000);
  v21 = v11;
  LODWORD(v22) = 1055286886;
  v23 = v12;
  LODWORD(v24) = 1039516303;
  v25 = v13;
  LODWORD(v26) = 1045220557;
  v27 = v14;
  LODWORD(v28) = 1050253722;
  v29 = v15;
  LODWORD(v30) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v21, 5);
  for (k = 8; k != -2; k -= 2)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_2294C8000);
  objc_autoreleasePoolPop(v0);
}

void sub_2294E4150(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 64; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

double ComputePointCloudOrigin(float32x4_t **a1)
{
  float32x4_t *v1;
  unint64_t v2;
  float32x4_t v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;

  v1 = *a1;
  v2 = (char *)a1[1] - (char *)*a1;
  if ((v2 >> 4))
  {
    v3 = *v1;
    if ((int)(v2 >> 4) >= 1)
    {
      v4 = (v2 >> 4);
      do
      {
        v5 = *v1++;
        v6 = v5;
        v3.i32[3] = 0;
        v6.i32[3] = 0;
        v3 = vminnmq_f32(v3, v6);
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    v3.i64[0] = 0;
  }
  return *(double *)v3.i64;
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::GetOutputInternal<float>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __CVBuffer *v3;
  size_t Width;
  unint64_t v5;
  NSObject *v6;
  int *BaseAddress;
  _DWORD *v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 232) && *(_BYTE *)(result + 235))
  {
    v3 = *(__CVBuffer **)(*(_QWORD *)(result + 160) + 40);
    Width = CVPixelBufferGetWidth(v3);
    v5 = CVPixelBufferGetHeight(v3) * Width;
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(v10) = 134217984;
      *(_QWORD *)((char *)&v10 + 4) = v5;
      _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOR] output image number of elements %lu", (uint8_t *)&v10, 0xCu);
    }

    CVPixelBufferLockBaseAddress(v3, 1uLL);
    BaseAddress = (int *)CVPixelBufferGetBaseAddress(v3);
    std::vector<float>::vector(&v10, v5);
    if (v5)
    {
      v8 = (_DWORD *)v10;
      do
      {
        v9 = *BaseAddress++;
        *v8++ = v9;
        --v5;
      }
      while (v5);
    }
    result = CVPixelBufferUnlockBaseAddress(v3, 1uLL);
    *(_OWORD *)a2 = v10;
    *(_QWORD *)(a2 + 16) = v11;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

{
  return __ZNK6ou3dor23OU3DOROfflineEspressoV217GetOutputInternalIfEENSt3__18optionalINS2_6vectorIfNS2_9allocatorIfEEEEEEv(result, a2);
}

void sub_2294E4370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::GetOutputInternal<half>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __CVBuffer *v3;
  size_t Width;
  unint64_t v5;
  NSObject *v6;
  __int16 *BaseAddress;
  _DWORD *v8;
  __int16 v9;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 232) && *(_BYTE *)(result + 235))
  {
    v3 = *(__CVBuffer **)(*(_QWORD *)(result + 160) + 40);
    Width = CVPixelBufferGetWidth(v3);
    v5 = CVPixelBufferGetHeight(v3) * Width;
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(v16) = 134217984;
      *(_QWORD *)((char *)&v16 + 4) = v5;
      _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOR] output image number of elements %lu", (uint8_t *)&v16, 0xCu);
    }

    CVPixelBufferLockBaseAddress(v3, 1uLL);
    BaseAddress = (__int16 *)CVPixelBufferGetBaseAddress(v3);
    std::vector<float>::vector(&v16, v5);
    if (v5)
    {
      v8 = (_DWORD *)v16;
      do
      {
        v9 = *BaseAddress++;
        _H0 = v9;
        __asm { FCVT            S0, H0 }
        *v8++ = _S0;
        --v5;
      }
      while (v5);
    }
    result = CVPixelBufferUnlockBaseAddress(v3, 1uLL);
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v17;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

{
  return __ZNK6ou3dor23OU3DOROfflineEspressoV217GetOutputInternalIDhEENSt3__18optionalINS2_6vectorIfNS2_9allocatorIfEEEEEEv(result, a2);
}

void sub_2294E44DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>(uint64_t a1, int **a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  __CVBuffer *v6;
  _DWORD *BaseAddress;
  uint64_t v8;
  size_t Width;
  int *v10;
  uint64_t v11;
  int v12;
  NSObject *v14;
  void *__p[2];
  char v16;
  void **v17;

  v16 = 8;
  v3 = a1 + 104;
  strcpy((char *)__p, "rgb_feat");
  v4 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((_QWORD *)(a1 + 104), (unsigned __int8 *)__p);
  v5 = v4;
  if ((v16 & 0x80000000) == 0)
  {
    if (v4)
      goto LABEL_3;
LABEL_11:
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (!v5)
    goto LABEL_11;
LABEL_3:
  v16 = 8;
  strcpy((char *)__p, "rgb_feat");
  v17 = __p;
  v6 = (__CVBuffer *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v17)+ 5);
  if (v16 < 0)
    operator delete(__p[0]);
  CVPixelBufferLockBaseAddress(v6, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(v6);
  v8 = (char *)a2[1] - (char *)*a2;
  Width = CVPixelBufferGetWidth(v6);
  if (CVPixelBufferGetHeight(v6) * Width != v8 >> 2)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
LABEL_15:

    return 0;
  }
  if ((int)((unint64_t)v8 >> 2) >= 1)
  {
    v10 = *a2;
    v11 = ((unint64_t)v8 >> 2);
    do
    {
      v12 = *v10++;
      *BaseAddress++ = v12;
      --v11;
    }
    while (v11);
  }
  CVPixelBufferUnlockBaseAddress(v6, 0);
  return 1;
}

{
  return __ZN6ou3dor23OU3DOROfflineEspressoV212SetEmbeddingIfEEbRKNSt3__16vectorIfNS2_9allocatorIfEEEE(a1, a2);
}

void sub_2294E4690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<half>(uint64_t a1, int **a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  __CVBuffer *v6;
  _WORD *BaseAddress;
  uint64_t v8;
  size_t Width;
  int *v10;
  uint64_t v11;
  int v12;
  NSObject *v19;
  void *__p[2];
  char v21;
  void **v22;

  v21 = 8;
  v3 = a1 + 104;
  strcpy((char *)__p, "rgb_feat");
  v4 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((_QWORD *)(a1 + 104), (unsigned __int8 *)__p);
  v5 = v4;
  if ((v21 & 0x80000000) == 0)
  {
    if (v4)
      goto LABEL_3;
LABEL_11:
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (!v5)
    goto LABEL_11;
LABEL_3:
  v21 = 8;
  strcpy((char *)__p, "rgb_feat");
  v22 = __p;
  v6 = (__CVBuffer *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v3, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v22)+ 5);
  if (v21 < 0)
    operator delete(__p[0]);
  CVPixelBufferLockBaseAddress(v6, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(v6);
  v8 = (char *)a2[1] - (char *)*a2;
  Width = CVPixelBufferGetWidth(v6);
  if (CVPixelBufferGetHeight(v6) * Width != v8 >> 2)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();
LABEL_15:

    return 0;
  }
  if ((int)((unint64_t)v8 >> 2) >= 1)
  {
    v10 = *a2;
    v11 = ((unint64_t)v8 >> 2);
    do
    {
      v12 = *v10++;
      _S0 = v12;
      __asm { FCVT            H0, S0 }
      *BaseAddress++ = _S0;
      --v11;
    }
    while (v11);
  }
  CVPixelBufferUnlockBaseAddress(v6, 0);
  return 1;
}

{
  return __ZN6ou3dor23OU3DOROfflineEspressoV212SetEmbeddingIDhEEbRKNSt3__16vectorIfNS2_9allocatorIfEEEE(a1, a2);
}

void sub_2294E4844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t ou3dor::OU3DOROfflineEspressoV2::SetVoxelFeatures<float>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int8x16_t v11;
  __CVBuffer *v12;
  size_t result;
  char *BaseAddress;
  uint64_t *v15;
  uint64_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float v24;
  int v25;
  int32x2_t v26;
  int v27;
  BOOL v28;
  int v29;
  int32x2_t v31;
  int v32;
  int16x4_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t i;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t j;
  NSObject *v50;
  int8x16_t v51;
  void *__p[2];
  char v53;
  void **v54;

  v8 = a1 + 104;
  v53 = 8;
  strcpy((char *)__p, "rgb_feat");
  v9 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((_QWORD *)(a1 + 104), (unsigned __int8 *)__p);
  v10 = v9;
  if (v53 < 0)
  {
    operator delete(__p[0]);
    if (v10)
      goto LABEL_3;
  }
  else if (v9)
  {
LABEL_3:
    *(double *)v11.i64 = ComputePointCloudOrigin((float32x4_t **)a2);
    v51 = v11;
    v53 = 6;
    strcpy((char *)__p, "points");
    v54 = __p;
    v12 = (__CVBuffer *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v54)+ 5);
    if (v53 < 0)
      operator delete(__p[0]);
    result = CVPixelBufferGetBytesPerRow(v12);
    if (result)
    {
      utils::Resample((utils *)((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4), 0xDBBA0uLL, __p);
      CVPixelBufferLockBaseAddress(v12, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v12);
      bzero(BaseAddress, 0x440000uLL);
      bzero(*(void **)(a1 + 240), *(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240));
      v15 = (uint64_t *)__p[0];
      v16 = (uint64_t *)__p[1];
      if (__p[0] != __p[1])
      {
        v17 = *(float32x4_t **)a2;
        v18 = *a4;
        v19 = *a3;
        v20 = (float32x2_t)vextq_s8(v51, v51, 4uLL).u64[0];
        v21 = (float32x2_t)vdup_n_s32(0x3D4CCCCDu);
        do
        {
          v22 = *v15;
          v23 = &v17[*v15];
          v24 = (float)(v23->f32[0] - *(float *)v51.i32) / 0.05;
          v25 = vcvtms_s32_f32(v24);
          v26 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)&v23->i32[1], v20), v21)));
          v27 = v26.i32[0];
          v28 = v25 <= 31 && v26.i32[0] <= 31;
          v29 = v26.i32[1];
          if (v28 && v26.i32[1] <= 31 && (v25 & 0x80000000) == 0)
          {
            v31 = vcltz_s32(v26);
            if ((v31.i8[0] & 1) == 0 && (v31.i8[4] & 1) == 0)
            {
              v34 = (float)v29 + (float)((float)v27 * 32.0);
              v32 = (int)(float)(v34 + (float)((float)((float)(int)floorf(v24) * 32.0) * 32.0));
              ++*(_DWORD *)(*(_QWORD *)(a1 + 240) + 4 * v32);
              *(float *)&BaseAddress[4 * v32] = *(float *)&BaseAddress[4 * v32] + 1.0;
              v33 = *(int16x4_t *)(v18 + 8 * v22);
              LOWORD(v34) = vaddv_s16(v33);
              if (v34 != 0.0)
              {
                v35 = (float)LOWORD(v34);
                v36 = (float)v33.u16[0] / v35;
                v37 = (float)v33.u16[1] / v35;
                v38 = (float)v33.u16[2] / v35;
                v39 = (float)(1.0 - (float)(v38 + (float)(v36 + v37))) / 30.0;
                for (i = 0x20000; i != 4456448; i += 0x20000)
                  *(float *)&BaseAddress[4 * v32 + i] = v39 + *(float *)&BaseAddress[4 * v32 + i];
                v41 = (unsigned __int8 *)(v19 + 4 * v22);
                v42 = *v41;
                if (v42 > 0x20)
                  v42 = 0;
                v43 = v41[1];
                if (v43 > 0x20)
                  v43 = 0;
                v44 = v41[2];
                if (v44 > 0x20)
                  v44 = 0;
                v45 = v32 + 0x8000;
                *(float *)&BaseAddress[4 * (v45 + (v42 << 15))] = (float)(v36 - v39)
                                                                + *(float *)&BaseAddress[4 * (v45 + (v42 << 15))];
                *(float *)&BaseAddress[4 * (v45 + (v43 << 15))] = (float)(v37 - v39)
                                                                + *(float *)&BaseAddress[4 * (v45 + (v43 << 15))];
                *(float *)&BaseAddress[4 * (v45 + (v44 << 15))] = (float)(v38 - v39)
                                                                + *(float *)&BaseAddress[4 * (v45 + (v44 << 15))];
              }
            }
          }
          ++v15;
        }
        while (v15 != v16);
      }
      v46 = 0;
      v47 = *(_QWORD *)(a1 + 240);
      do
      {
        v48 = *(_DWORD *)(v47 + 4 * v46);
        if (v48 >= 2)
        {
          for (j = 0; j != 4456448; j += 0x20000)
            *(float *)&BaseAddress[j] = *(float *)&BaseAddress[j] / (float)v48;
        }
        ++v46;
        BaseAddress += 4;
      }
      while (v46 != 0x8000);
      CVPixelBufferUnlockBaseAddress(v12, 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return 1;
    }
    return result;
  }
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v50 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();

  return 0;
}

{
  return __ZN6ou3dor23OU3DOROfflineEspressoV216SetVoxelFeaturesIfEEbRKNSt3__16vectorIDv3_fNS2_9allocatorIS4_EEEERKNS3_IDv4_hNS5_ISA_EEEERKNS3_IDv4_tNS5_ISF_EEEE(a1, a2, a3, a4);
}

void sub_2294E4C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t ou3dor::OU3DOROfflineEspressoV2::SetVoxelFeatures<half>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int8x16_t v11;
  __CVBuffer *v12;
  size_t result;
  char *BaseAddress;
  uint64_t *v15;
  uint64_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float v24;
  int v25;
  int32x2_t v26;
  int v27;
  BOOL v28;
  int v29;
  int32x2_t v31;
  int v32;
  int16x4_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  char *v47;
  uint64_t i;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v61;
  unsigned int v64;
  float v65;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t j;
  NSObject *v75;
  int8x16_t v76;
  void *__p[2];
  char v78;
  void **v79;

  v8 = a1 + 104;
  v78 = 8;
  strcpy((char *)__p, "rgb_feat");
  v9 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((_QWORD *)(a1 + 104), (unsigned __int8 *)__p);
  v10 = v9;
  if (v78 < 0)
  {
    operator delete(__p[0]);
    if (v10)
      goto LABEL_3;
  }
  else if (v9)
  {
LABEL_3:
    *(double *)v11.i64 = ComputePointCloudOrigin((float32x4_t **)a2);
    v76 = v11;
    v78 = 6;
    strcpy((char *)__p, "points");
    v79 = __p;
    v12 = (__CVBuffer *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v79)+ 5);
    if (v78 < 0)
      operator delete(__p[0]);
    result = CVPixelBufferGetBytesPerRow(v12);
    if (result)
    {
      utils::Resample((utils *)((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4), 0xDBBA0uLL, __p);
      CVPixelBufferLockBaseAddress(v12, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v12);
      bzero(BaseAddress, 0x220000uLL);
      bzero(*(void **)(a1 + 240), *(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240));
      v15 = (uint64_t *)__p[0];
      v16 = (uint64_t *)__p[1];
      if (__p[0] != __p[1])
      {
        v17 = *(float32x4_t **)a2;
        v18 = *a4;
        v19 = *a3;
        v20 = (float32x2_t)vextq_s8(v76, v76, 4uLL).u64[0];
        v21 = (float32x2_t)vdup_n_s32(0x3D4CCCCDu);
        do
        {
          v22 = *v15;
          v23 = &v17[*v15];
          v24 = (float)(v23->f32[0] - *(float *)v76.i32) / 0.05;
          v25 = vcvtms_s32_f32(v24);
          v26 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)&v23->i32[1], v20), v21)));
          v27 = v26.i32[0];
          v28 = v25 <= 31 && v26.i32[0] <= 31;
          v29 = v26.i32[1];
          if (v28 && v26.i32[1] <= 31 && (v25 & 0x80000000) == 0)
          {
            v31 = vcltz_s32(v26);
            if ((v31.i8[0] & 1) == 0 && (v31.i8[4] & 1) == 0)
            {
              v41 = (float)v29 + (float)((float)v27 * 32.0);
              v32 = (int)(float)(v41 + (float)((float)((float)(int)floorf(v24) * 32.0) * 32.0));
              ++*(_DWORD *)(*(_QWORD *)(a1 + 240) + 4 * v32);
              _H6 = *(_WORD *)&BaseAddress[2 * v32];
              __asm { FCVT            S6, H6 }
              _S6 = _S6 + 1.0;
              __asm { FCVT            H6, S6 }
              *(_WORD *)&BaseAddress[2 * v32] = LOWORD(_S6);
              v40 = *(int16x4_t *)(v18 + 8 * v22);
              LOWORD(v41) = vaddv_s16(v40);
              if (v41 != 0.0)
              {
                v42 = (float)LOWORD(v41);
                v43 = (float)v40.u16[0] / v42;
                v44 = (float)v40.u16[1] / v42;
                v45 = (float)v40.u16[2] / v42;
                v46 = (float)(1.0 - (float)(v45 + (float)(v43 + v44))) / 30.0;
                v47 = &BaseAddress[2 * v32];
                for (i = 0x10000; i != 2228224; i += 0x10000)
                {
                  _H18 = *(_WORD *)&v47[i];
                  __asm { FCVT            S18, H18 }
                  _S18 = v46 + _S18;
                  __asm { FCVT            H18, S18 }
                  *(_WORD *)&v47[i] = LOWORD(_S18);
                }
                v52 = (unsigned __int8 *)(v19 + 4 * v22);
                v53 = *v52;
                if (v53 > 0x20)
                  v53 = 0;
                v54 = v52[1];
                if (v54 > 0x20)
                  v54 = 0;
                v55 = v52[2];
                if (v55 > 0x20)
                  v55 = 0;
                v56 = v32 + 0x8000;
                v57 = v56 + (v53 << 15);
                _H18 = *(_WORD *)&BaseAddress[2 * v57];
                __asm { FCVT            S18, H18 }
                _S17 = (float)(v43 - v46) + _S18;
                __asm { FCVT            H17, S17 }
                *(_WORD *)&BaseAddress[2 * v57] = LOWORD(_S17);
                v61 = v56 + (v54 << 15);
                LOWORD(_S17) = *(_WORD *)&BaseAddress[2 * v61];
                __asm { FCVT            S17, H17 }
                _S16 = (float)(v44 - v46) + _S17;
                __asm { FCVT            H16, S16 }
                *(_WORD *)&BaseAddress[2 * v61] = LOWORD(_S16);
                v64 = v56 + (v55 << 15);
                LOWORD(_S16) = *(_WORD *)&BaseAddress[2 * v64];
                v65 = v45 - v46;
                __asm { FCVT            S7, H16 }
                _S6 = v65 + _S7;
                __asm { FCVT            H6, S6 }
                *(_WORD *)&BaseAddress[2 * v64] = LOWORD(_S6);
              }
            }
          }
          ++v15;
        }
        while (v15 != v16);
      }
      v68 = 0;
      v69 = *(_QWORD *)(a1 + 240);
      do
      {
        v70 = *(_DWORD *)(v69 + 4 * v68);
        if (v70 >= 2)
        {
          for (j = 0; j != 2228224; j += 0x10000)
          {
            _H1 = *(_WORD *)&BaseAddress[j];
            __asm { FCVT            S1, H1 }
            _S1 = _S1 / (float)v70;
            __asm { FCVT            H1, S1 }
            *(_WORD *)&BaseAddress[j] = LOWORD(_S1);
          }
        }
        ++v68;
        BaseAddress += 2;
      }
      while (v68 != 0x8000);
      CVPixelBufferUnlockBaseAddress(v12, 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return 1;
    }
    return result;
  }
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v75 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>();

  return 0;
}

{
  return __ZN6ou3dor23OU3DOROfflineEspressoV216SetVoxelFeaturesIDhEEbRKNSt3__16vectorIDv3_fNS2_9allocatorIS4_EEEERKNS3_IDv4_hNS5_ISA_EEEERKNS3_IDv4_tNS5_ISF_EEEE(a1, a2, a3, a4);
}

void sub_2294E5014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float *v20;
  float *v21;
  float *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float *v28;
  float *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __CVBuffer *v34;
  _OWORD *BaseAddress;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __CVBuffer *v49;
  int8x16_t *v50;
  int64x2_t v51;
  int8x16_t v52;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61[2];
  char v62;
  void *__p;
  float *v64;
  unint64_t v65;
  uint64_t v66[3];
  __int128 *v67[2];

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v54 = *a3;
    v8 = -1227133513 * ((v4 - v3) >> 5);
    memset(v66, 0, sizeof(v66));
    std::vector<std::vector<float>>::reserve(v66, v8);
    v55 = a1;
    v9 = (float32x4_t *)(*a3 + 224 * a2);
    v57 = v9[6];
    v59 = *v9;
    __p = 0;
    v64 = 0;
    v65 = 0;
    std::vector<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo,std::allocator<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo>>::reserve(&__p, v8);
    if (v8 >= 1)
    {
      v10 = 0;
      v11.i64[0] = 0x3F0000003F000000;
      v11.i64[1] = 0x3F0000003F000000;
      v12 = vmulq_f32(vaddq_f32(v59, v57), v11);
      v13 = v12.f32[2];
      v60 = v12;
      do
      {
        v14 = *a3 + 224 * v10;
        v56 = *(float32x4_t *)(v14 + 96);
        v58 = *(float32x4_t *)v14;
        box3dToCentroidSizeAngle((float32x4_t *)v14, v61);
        v15 = v61[0];
        *(float32x2_t *)v61[0] = vsub_f32(*(float32x2_t *)v61[0], *(float32x2_t *)v60.f32);
        *(float *)(v15 + 8) = *(float *)(v15 + 8) - v13;
        std::vector<std::vector<float>>::push_back[abi:ne180100](v66, (uint64_t)v61);
        v16.i64[0] = 0xBF000000BF000000;
        v16.i64[1] = 0xBF000000BF000000;
        v17 = vaddq_f32(v60, vmulq_f32(vaddq_f32(v58, v56), v16));
        v18 = vmulq_f32(v17, v17);
        v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        v20 = v64;
        if ((unint64_t)v64 >= v65)
        {
          v22 = (float *)__p;
          v23 = ((char *)v64 - (_BYTE *)__p) >> 3;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v25 = v65 - (_QWORD)__p;
          if ((uint64_t)(v65 - (_QWORD)__p) >> 2 > v24)
            v24 = v25 >> 2;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v65, v26);
            v22 = (float *)__p;
            v20 = v64;
          }
          else
          {
            v27 = 0;
          }
          v28 = (float *)&v27[8 * v23];
          *v28 = v19;
          *((_DWORD *)v28 + 1) = v10;
          v29 = v28;
          if (v20 != v22)
          {
            do
            {
              v30 = *((_QWORD *)v20 - 1);
              v20 -= 2;
              *((_QWORD *)v29 - 1) = v30;
              v29 -= 2;
            }
            while (v20 != v22);
            v22 = (float *)__p;
          }
          v21 = v28 + 2;
          __p = v29;
          v64 = v28 + 2;
          v65 = (unint64_t)&v27[8 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v64 = v19;
          *((_DWORD *)v20 + 1) = v10;
          v21 = v20 + 2;
        }
        v64 = v21;
        if (v61[0])
        {
          v61[1] = v61[0];
          operator delete((void *)v61[0]);
        }
        ++v10;
      }
      while (v10 != v8);
    }
    v31 = 126 - 2 * __clz(((char *)v64 - (_BYTE *)__p) >> 3);
    if (v64 == __p)
      v32 = 0;
    else
      v32 = v31;
    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb((uint64_t)__p, v64, (uint64_t)v61, v32, 1);
    v62 = 7;
    v33 = a1 + 104;
    strcpy((char *)v61, "context");
    v67[0] = (__int128 *)v61;
    v34 = (__CVBuffer *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v55 + 104, (unsigned __int8 *)v61, (uint64_t)&std::piecewise_construct, v67)+ 5);
    if (v62 < 0)
      operator delete((void *)v61[0]);
    CVPixelBufferLockBaseAddress(v34, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(v34);
    BaseAddress[27] = 0u;
    BaseAddress[28] = 0u;
    BaseAddress[25] = 0u;
    BaseAddress[26] = 0u;
    BaseAddress[23] = 0u;
    BaseAddress[24] = 0u;
    BaseAddress[21] = 0u;
    BaseAddress[22] = 0u;
    BaseAddress[19] = 0u;
    BaseAddress[20] = 0u;
    BaseAddress[17] = 0u;
    BaseAddress[18] = 0u;
    BaseAddress[15] = 0u;
    BaseAddress[16] = 0u;
    BaseAddress[13] = 0u;
    BaseAddress[14] = 0u;
    BaseAddress[11] = 0u;
    BaseAddress[12] = 0u;
    BaseAddress[9] = 0u;
    BaseAddress[10] = 0u;
    BaseAddress[7] = 0u;
    BaseAddress[8] = 0u;
    BaseAddress[5] = 0u;
    BaseAddress[6] = 0u;
    BaseAddress[3] = 0u;
    BaseAddress[4] = 0u;
    BaseAddress[1] = 0u;
    BaseAddress[2] = 0u;
    if (v8 >= 4)
      v36 = 4;
    else
      v36 = v8;
    *BaseAddress = 0uLL;
    if (v8 >= 1)
    {
      v37 = 0;
      v38 = (char *)__p;
      v39 = v66[0];
      v40 = ou3dod::kObjectTypesLUT;
      v41 = (unint64_t)(qword_2540CA1A0 - ou3dod::kObjectTypesLUT) >> 3;
      if (v36 <= 1)
        v42 = 1;
      else
        v42 = v36;
      v43 = *a3;
      do
      {
        v44 = &v38[8 * v37];
        v45 = *((_DWORD *)v44 + 1);
        v46 = *(_DWORD **)(v39 + 24 * v45);
        *(_DWORD *)BaseAddress = *v46;
        *((_DWORD *)BaseAddress + 1) = v46[1];
        *((_DWORD *)BaseAddress + 2) = v46[2];
        *((_DWORD *)BaseAddress + 3) = *(_DWORD *)v44;
        *((_DWORD *)BaseAddress + 4) = v46[3];
        *((_DWORD *)BaseAddress + 5) = v46[4];
        *((_DWORD *)BaseAddress + 6) = v46[5];
        *((_DWORD *)BaseAddress + 7) = v46[6];
        if ((int)v41 < 1)
        {
LABEL_40:
          v47 = -1;
        }
        else
        {
          v47 = 0;
          v48 = *(_QWORD *)(v43 + 224 * v45 + 128);
          while (*(_QWORD *)(v40 + 8 * v47) != v48)
          {
            if (v41 == ++v47)
              goto LABEL_40;
          }
        }
        *(_DWORD *)((char *)BaseAddress + (((v47 << 32) + 0x800000000) >> 30)) = 1065353216;
        ++v37;
        BaseAddress = (_OWORD *)((char *)BaseAddress + 116);
      }
      while (v37 != v42);
    }
    CVPixelBufferUnlockBaseAddress(v34, 0);
    v62 = 12;
    strcpy((char *)v61, "context_mask");
    v67[0] = (__int128 *)v61;
    v49 = (__CVBuffer *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33, (unsigned __int8 *)v61, (uint64_t)&std::piecewise_construct, v67)+ 5);
    if (v62 < 0)
      operator delete((void *)v61[0]);
    CVPixelBufferLockBaseAddress(v49, 0);
    v50 = (int8x16_t *)CVPixelBufferGetBaseAddress(v49);
    v51 = vdupq_n_s64(v36);
    v52.i64[0] = 0x7F0000007FLL;
    v52.i64[1] = 0x7F0000007FLL;
    *v50 = vbicq_s8(v52, (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v51, (int64x2_t)xmmword_2295607B0), (int32x4_t)vcgtq_s64(v51, (int64x2_t)xmmword_2295607A0)));
    CVPixelBufferUnlockBaseAddress(v49, 0);
    if (__p)
    {
      v64 = (float *)__p;
      operator delete(__p);
    }
    __p = v66;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v3 = v54;
  }
  return v3 != v4;
}

{
  return __ZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNSt3__16vectorI7OUBox3dNS2_9allocatorIS4_EEEE(a1, a2, a3);
}

void sub_2294E555C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *__p,char *a24,uint64_t a25,char a26)
{
  if (__p)
  {
    a24 = __p;
    operator delete(__p);
  }
  __p = &a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_2294E5680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo,std::allocator<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::ComputeObjectIdx(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if ((int)((unint64_t)(qword_2540CA1A0 - ou3dod::kObjectTypesLUT) >> 3) < 1)
    return 0xFFFFFFFFLL;
  result = 0;
  while (*(_QWORD *)(ou3dod::kObjectTypesLUT + 8 * result) != *a2)
  {
    if (((unint64_t)(qword_2540CA1A0 - ou3dod::kObjectTypesLUT) >> 3) == ++result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<half>(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float *v20;
  float *v21;
  float *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float *v28;
  float *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __CVBuffer *v34;
  _QWORD *BaseAddress;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int32 *v44;
  __int32 v45;
  float32x4_t *v46;
  float32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  __CVBuffer *v50;
  int8x8_t *v51;
  int64x2_t v52;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61[2];
  char v62;
  void *__p;
  float *v64;
  unint64_t v65;
  uint64_t v66[3];
  __int128 *v67[2];

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v54 = *a3;
    v8 = -1227133513 * ((v4 - v3) >> 5);
    memset(v66, 0, sizeof(v66));
    std::vector<std::vector<float>>::reserve(v66, v8);
    v55 = a1;
    v9 = (float32x4_t *)(*a3 + 224 * a2);
    v57 = v9[6];
    v59 = *v9;
    __p = 0;
    v64 = 0;
    v65 = 0;
    std::vector<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo,std::allocator<BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo>>::reserve(&__p, v8);
    if (v8 >= 1)
    {
      v10 = 0;
      v11.i64[0] = 0x3F0000003F000000;
      v11.i64[1] = 0x3F0000003F000000;
      v12 = vmulq_f32(vaddq_f32(v59, v57), v11);
      v13 = v12.f32[2];
      v60 = v12;
      do
      {
        v14 = *a3 + 224 * v10;
        v56 = *(float32x4_t *)(v14 + 96);
        v58 = *(float32x4_t *)v14;
        box3dToCentroidSizeAngle((float32x4_t *)v14, v61);
        v15 = v61[0];
        *(float32x2_t *)v61[0] = vsub_f32(*(float32x2_t *)v61[0], *(float32x2_t *)v60.f32);
        *(float *)(v15 + 8) = *(float *)(v15 + 8) - v13;
        std::vector<std::vector<float>>::push_back[abi:ne180100](v66, (uint64_t)v61);
        v16.i64[0] = 0xBF000000BF000000;
        v16.i64[1] = 0xBF000000BF000000;
        v17 = vaddq_f32(v60, vmulq_f32(vaddq_f32(v58, v56), v16));
        v18 = vmulq_f32(v17, v17);
        v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        v20 = v64;
        if ((unint64_t)v64 >= v65)
        {
          v22 = (float *)__p;
          v23 = ((char *)v64 - (_BYTE *)__p) >> 3;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v25 = v65 - (_QWORD)__p;
          if ((uint64_t)(v65 - (_QWORD)__p) >> 2 > v24)
            v24 = v25 >> 2;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v65, v26);
            v22 = (float *)__p;
            v20 = v64;
          }
          else
          {
            v27 = 0;
          }
          v28 = (float *)&v27[8 * v23];
          *v28 = v19;
          *((_DWORD *)v28 + 1) = v10;
          v29 = v28;
          if (v20 != v22)
          {
            do
            {
              v30 = *((_QWORD *)v20 - 1);
              v20 -= 2;
              *((_QWORD *)v29 - 1) = v30;
              v29 -= 2;
            }
            while (v20 != v22);
            v22 = (float *)__p;
          }
          v21 = v28 + 2;
          __p = v29;
          v64 = v28 + 2;
          v65 = (unint64_t)&v27[8 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v64 = v19;
          *((_DWORD *)v20 + 1) = v10;
          v21 = v20 + 2;
        }
        v64 = v21;
        if (v61[0])
        {
          v61[1] = v61[0];
          operator delete((void *)v61[0]);
        }
        ++v10;
      }
      while (v10 != v8);
    }
    v31 = 126 - 2 * __clz(((char *)v64 - (_BYTE *)__p) >> 3);
    if (v64 == __p)
      v32 = 0;
    else
      v32 = v31;
    _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb((uint64_t)__p, v64, (uint64_t)v61, v32, 1);
    v62 = 7;
    v33 = a1 + 104;
    strcpy((char *)v61, "context");
    v67[0] = (__int128 *)v61;
    v34 = (__CVBuffer *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v55 + 104, (unsigned __int8 *)v61, (uint64_t)&std::piecewise_construct, v67)+ 5);
    if (v62 < 0)
      operator delete((void *)v61[0]);
    CVPixelBufferLockBaseAddress(v34, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(v34);
    BaseAddress[28] = 0;
    *((_OWORD *)BaseAddress + 12) = 0u;
    *((_OWORD *)BaseAddress + 13) = 0u;
    *((_OWORD *)BaseAddress + 10) = 0u;
    *((_OWORD *)BaseAddress + 11) = 0u;
    *((_OWORD *)BaseAddress + 8) = 0u;
    *((_OWORD *)BaseAddress + 9) = 0u;
    *((_OWORD *)BaseAddress + 6) = 0u;
    *((_OWORD *)BaseAddress + 7) = 0u;
    *((_OWORD *)BaseAddress + 4) = 0u;
    *((_OWORD *)BaseAddress + 5) = 0u;
    *((_OWORD *)BaseAddress + 2) = 0u;
    *((_OWORD *)BaseAddress + 3) = 0u;
    if (v8 >= 4)
      v36 = 4;
    else
      v36 = v8;
    *(_OWORD *)BaseAddress = 0uLL;
    *((_OWORD *)BaseAddress + 1) = 0uLL;
    if (v8 >= 1)
    {
      v37 = 0;
      v38 = (char *)__p;
      v39 = v66[0];
      v40 = ou3dod::kObjectTypesLUT;
      v41 = (unint64_t)(qword_2540CA1A0 - ou3dod::kObjectTypesLUT) >> 3;
      v42 = *a3;
      if (v36 <= 1)
        v43 = 1;
      else
        v43 = v36;
      do
      {
        v44 = (__int32 *)&v38[8 * v37];
        v45 = v44[1];
        v46 = *(float32x4_t **)(v39 + 24 * v45);
        v47.i64[0] = v46[1].i64[0];
        v47.i32[2] = v46[1].i32[2];
        v47.i32[3] = *v44;
        *(int8x16_t *)BaseAddress = vqtbl1q_s8((int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(*v46), v47), (int8x16_t)xmmword_2295607C0);
        if ((int)v41 < 1)
        {
LABEL_39:
          v48 = -1;
        }
        else
        {
          v48 = 0;
          v49 = *(_QWORD *)(v42 + 224 * v45 + 128);
          while (*(_QWORD *)(v40 + 8 * v48) != v49)
          {
            if (v41 == ++v48)
              goto LABEL_39;
          }
        }
        *(_WORD *)((char *)BaseAddress + (((v48 << 32) + 0x800000000) >> 31)) = 15360;
        ++v37;
        BaseAddress = (_QWORD *)((char *)BaseAddress + 58);
      }
      while (v37 != v43);
    }
    CVPixelBufferUnlockBaseAddress(v34, 0);
    v62 = 12;
    strcpy((char *)v61, "context_mask");
    v67[0] = (__int128 *)v61;
    v50 = (__CVBuffer *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33, (unsigned __int8 *)v61, (uint64_t)&std::piecewise_construct, v67)+ 5);
    if (v62 < 0)
      operator delete((void *)v61[0]);
    CVPixelBufferLockBaseAddress(v50, 0);
    v51 = (int8x8_t *)CVPixelBufferGetBaseAddress(v50);
    v52 = vdupq_n_s64(v36);
    *v51 = vbic_s8((int8x8_t)0xFC00FC00FC00FC00, (int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_s64(v52, (int64x2_t)xmmword_2295607B0), (int32x4_t)vcgtq_s64(v52, (int64x2_t)xmmword_2295607A0))));
    CVPixelBufferUnlockBaseAddress(v50, 0);
    if (__p)
    {
      v64 = (float *)__p;
      operator delete(__p);
    }
    __p = v66;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v3 = v54;
  }
  return v3 != v4;
}

{
  return __ZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNSt3__16vectorI7OUBox3dNS2_9allocatorIS4_EEEE(a1, a2, a3);
}

void sub_2294E5C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *__p,char *a24,uint64_t a25,char a26)
{
  if (__p)
  {
    a24 = __p;
    operator delete(__p);
  }
  __p = &a26;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void ou3dor::OU3DOROfflineEspressoV2::~OU3DOROfflineEspressoV2(ou3dor::OU3DOROfflineEspressoV2 *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F242DB0;
  v2 = (void *)*((_QWORD *)this + 30);
  if (v2)
  {
    *((_QWORD *)this + 31) = v2;
    operator delete(v2);
  }
  ou3dor::OU3DOREspressoV2Interface::~OU3DOREspressoV2Interface(this);
}

{
  ou3dor::OU3DOROfflineEspressoV2::~OU3DOROfflineEspressoV2(this);
  JUMPOUT(0x22E2CAAE8);
}

ou3dor::OU3DOROfflineEspressoV2 *ou3dor::OU3DOROfflineEspressoV2::OU3DOROfflineEspressoV2(ou3dor::OU3DOROfflineEspressoV2 *this)
{
  std::vector<int> *v2;
  __int128 v4[3];

  v2 = (std::vector<int> *)ou3dor::OU3DOREspressoV2Interface::OU3DOREspressoV2Interface((uint64_t)this, v4);
  v2->__begin_ = (std::vector<int>::pointer)&off_24F242DB0;
  LODWORD(v4[0]) = 0;
  std::vector<int>::vector(v2 + 10, 0x8000uLL, (const std::vector<int>::value_type *)v4);
  return this;
}

void sub_2294E5DBC(_Unwind_Exception *a1)
{
  ou3dor::OU3DOREspressoV2Interface *v1;

  ou3dor::OU3DOREspressoV2Interface::~OU3DOREspressoV2Interface(v1);
  _Unwind_Resume(a1);
}

uint64_t ou3dor::OU3DOROfflineEspressoV2::GetOutput@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;

  if (*(_BYTE *)(this + 232) && (v3 = this, *(_BYTE *)(this + 235)))
  {
    if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(*(_QWORD *)(this + 160) + 40)) == 1278226534)
      return ou3dor::OU3DOROfflineEspressoV2::GetOutputInternal<float>(v3, (uint64_t)a2);
    else
      return ou3dor::OU3DOROfflineEspressoV2::GetOutputInternal<half>(v3, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return this;
}

size_t ou3dor::OU3DOROfflineEspressoV2::SetInputs(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int a6, uint64_t *a7)
{
  size_t result;
  NSObject *v15;

  if (!*(_BYTE *)(a1 + 233))
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROfflineEspressoV2::SetInputs();

    return 0;
  }
  if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(*(_QWORD *)(a1 + 120) + 40)) == 1278226534)
  {
    result = ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<float>(a1, a2);
    if ((_DWORD)result)
    {
      result = ou3dor::OU3DOROfflineEspressoV2::SetVoxelFeatures<float>(a1, a3, a4, a5);
      if ((_DWORD)result)
      {
        if (ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(a1, a6, a7))
        {
LABEL_14:
          result = 1;
          *(_BYTE *)(a1 + 232) = 1;
          return result;
        }
        return 0;
      }
    }
  }
  else
  {
    result = ou3dor::OU3DOROfflineEspressoV2::SetEmbedding<half>(a1, a2);
    if ((_DWORD)result)
    {
      result = ou3dor::OU3DOROfflineEspressoV2::SetVoxelFeatures<half>(a1, a3, a4, a5);
      if ((_DWORD)result)
      {
        result = ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<half>(a1, a6, a7);
        if ((_DWORD)result)
          goto LABEL_14;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float v23;
  int v24;
  float *v25;
  float *v26;
  uint64_t v27;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 2) < *(float *)v9)
        {
          v20 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)v9, (float *)(v9 + 8), a2 - 2);
      case 4uLL:
        return _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (_QWORD *)a2 - 1);
      case 5uLL:
        return _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SM_SF_((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (uint64_t *)(v9 + 24), (uint64_t *)a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if ((float *)v9 != a2)
              return (uint64_t)_ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoSL_EET1_SM_SM_T2_OSF_((float *)v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = (float *)(v9 + 8 * (v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v9 + 8 * (v13 >> 1)), (float *)v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)v9, (float *)(v9 + 8 * (v13 >> 1)), a2 - 2);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v9 + 8), v15 - 2, a2 - 4);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v9 + 16), (float *)(v9 + 8 + 8 * v14), a2 - 6);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_(v15 - 2, v15, (float *)(v9 + 8 + 8 * v14));
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(v9 - 8) >= *(float *)v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>((float *)v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>((float *)v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEbT1_SM_SF_(v9, (uint64_t)v17);
          v9 = (uint64_t)(v17 + 2);
          result = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEbT1_SM_SF_((uint64_t)(v17 + 2), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb(v8, v17, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v17 + 2);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return _ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SF_(v9, (uint64_t)a2);
        if ((float *)v9 != a2)
        {
          v21 = (float *)(v9 + 8);
          while (v21 != a2)
          {
            v22 = v21;
            v23 = *(float *)(v8 + 8);
            if (v23 < *(float *)v8)
            {
              v24 = *(_DWORD *)(v8 + 12);
              v25 = v22;
              do
              {
                v26 = v25;
                v27 = *((_QWORD *)v25 - 1);
                v25 -= 2;
                *(_QWORD *)v26 = v27;
              }
              while (*(v26 - 4) > v23);
              *v25 = v23;
              *((_DWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 2;
            v8 = (uint64_t)v22;
          }
        }
        return result;
    }
  }
}

uint64_t _ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SF_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;

  if (result != a2)
  {
    v2 = result + 8;
    if (result + 8 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(float *)(v4 + 8);
        if (v6 < *(float *)v4)
        {
          v7 = *(_DWORD *)(v4 + 12);
          v8 = v3;
          while (1)
          {
            *(_QWORD *)(result + v8 + 8) = *(_QWORD *)(result + v8);
            if (!v8)
              break;
            v9 = *(float *)(result + v8 - 8);
            v8 -= 8;
            if (v9 <= v6)
            {
              v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(float *)v10 = v6;
          *(_DWORD *)(v10 + 4) = v7;
        }
        v2 = v5 + 8;
        v3 += 8;
        v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *a1)
  {
    v5 = *(_QWORD *)a1;
    if (v4 < v3)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v5;
      return 1;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v5;
    if (*a3 >= *(float *)&v5)
      return 1;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v6;
    if (*a2 >= *a1)
      return 1;
    v7 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>(float *a1, float *a2)
{
  uint64_t v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)a1;
  if (*(a2 - 2) <= COERCE_FLOAT(*(_QWORD *)a1))
  {
    v5 = a1 + 2;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      v5 += 2;
    }
    while (*v3 <= *(float *)&v2);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[2];
      v3 += 2;
    }
    while (v4 <= *(float *)&v2);
  }
  if (v3 < a2)
  {
    do
    {
      v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v6 > *(float *)&v2);
  }
  while (v3 < a2)
  {
    v7 = *(_QWORD *)v3;
    *(_QWORD *)v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    do
    {
      v8 = v3[2];
      v3 += 2;
    }
    while (v8 <= *(float *)&v2);
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 > *(float *)&v2);
  }
  if (v3 - 2 != a1)
    *(_QWORD *)a1 = *((_QWORD *)v3 - 1);
  *((_QWORD *)v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>(float *a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t v11;
  float v12;
  float v13;

  v2 = 0;
  v3 = *(_QWORD *)a1;
  do
  {
    v4 = a1[v2 + 2];
    v2 += 2;
  }
  while (v4 < *(float *)&v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= *(float *)&v3);
  }
  else
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= *(float *)&v3);
  }
  if (v5 < a2)
  {
    v9 = &a1[v2];
    v10 = a2;
    do
    {
      v11 = *(_QWORD *)v9;
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_QWORD *)v10 = v11;
      do
      {
        v12 = v9[2];
        v9 += 2;
      }
      while (v12 < *(float *)&v3);
      do
      {
        v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= *(float *)&v3);
    }
    while (v9 < v10);
    v6 = v9 - 2;
  }
  if (v6 != a1)
    *(_QWORD *)a1 = *(_QWORD *)v6;
  *(_QWORD *)v6 = v3;
  return v6;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEbT1_SM_SF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a2 - 8));
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      v7 = (float *)(a1 + 16);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      v12 = *(_DWORD *)(v8 + 4);
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(float *)v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

uint64_t _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_(float *a1, float *a2, float *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (*a2 < *a1)
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SM_SF_(float *a1, float *a2, float *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_(a1, a2, a3, a4);
  if (*(float *)a5 < *(float *)a4)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(float *)a4 < *a3)
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (*a2 < *a1)
        {
          v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

float *_ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoSL_EET1_SM_SM_T2_OSF_(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_OSF_NS_15iterator_traitsISM_E15difference_typeESM_((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_OSF_NS_15iterator_traitsISM_E15difference_typeESM_((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 2 * v17 + 2;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            v17 = v22;
          }
          *(_QWORD *)v20 = *(_QWORD *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v18;
          _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_OSF_NS_15iterator_traitsISM_E15difference_typeE((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_OSF_NS_15iterator_traitsISM_E15difference_typeESM_(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  int v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (float *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[2])
      {
        v8 += 2;
        v7 = v9;
      }
      v10 = *a4;
      if (*v8 >= *a4)
      {
        v11 = *((_DWORD *)a4 + 1);
        do
        {
          v12 = a4;
          a4 = v8;
          *(_QWORD *)v12 = *(_QWORD *)v8;
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 8 * v7);
          v14 = v13 + 2;
          if (v14 < a3 && *v8 < v8[2])
          {
            v8 += 2;
            v7 = v14;
          }
        }
        while (*v8 >= v10);
        *a4 = v10;
        *((_DWORD *)a4 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_OSF_NS_15iterator_traitsISM_E15difference_typeE(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  float v8;
  int v9;
  _QWORD *v10;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(result + 8 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 8);
    v8 = *(float *)(a2 - 8);
    if (*(float *)v6 < v8)
    {
      v9 = *(_DWORD *)(a2 - 4);
      do
      {
        v10 = v7;
        v7 = v6;
        *v10 = *v6;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_QWORD *)(result + 8 * v5);
      }
      while (*(float *)v6 < v8);
      *(float *)v7 = v8;
      *((_DWORD *)v7 + 1) = v9;
    }
  }
  return result;
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float v23;
  int v24;
  float *v25;
  float *v26;
  uint64_t v27;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = ((uint64_t)a2 - v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 2) < *(float *)v9)
        {
          v20 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)v9, (float *)(v9 + 8), a2 - 2);
      case 4uLL:
        return _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (_QWORD *)a2 - 1);
      case 5uLL:
        return _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SM_SF_((float *)v9, (float *)(v9 + 8), (float *)(v9 + 16), (uint64_t *)(v9 + 24), (uint64_t *)a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if ((float *)v9 != a2)
              return (uint64_t)_ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoSL_EET1_SM_SM_T2_OSF_((float *)v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = (float *)(v9 + 8 * (v13 >> 1));
          if ((unint64_t)v12 < 0x401)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v9 + 8 * (v13 >> 1)), (float *)v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)v9, (float *)(v9 + 8 * (v13 >> 1)), a2 - 2);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v9 + 8), v15 - 2, a2 - 4);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)(v9 + 16), (float *)(v9 + 8 + 8 * v14), a2 - 6);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_(v15 - 2, v15, (float *)(v9 + 8 + 8 * v14));
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(v9 - 8) >= *(float *)v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>((float *)v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo *,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::{lambda(std::_ClassicAlgPolicy const&,BOOL ou3dor::OU3DOROfflineEspressoV2::SetContextFeaturesAndPadding<float>(int,std::vector<OUBox3d> const&)::DistanceInfo * const&)#1} &>((float *)v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoEEbT1_SM_SF_(v9, (uint64_t)v17);
          v9 = (uint64_t)(v17 + 2);
          result = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoEEbT1_SM_SF_((uint64_t)(v17 + 2), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoLb0EEEvT1_SM_SF_NS_15iterator_traitsISM_E15difference_typeEb(v8, v17, a3, -v11, a5 & 1);
            v9 = (uint64_t)(v17 + 2);
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return _ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SF_(v9, (uint64_t)a2);
        if ((float *)v9 != a2)
        {
          v21 = (float *)(v9 + 8);
          while (v21 != a2)
          {
            v22 = v21;
            v23 = *(float *)(v8 + 8);
            if (v23 < *(float *)v8)
            {
              v24 = *(_DWORD *)(v8 + 12);
              v25 = v22;
              do
              {
                v26 = v25;
                v27 = *((_QWORD *)v25 - 1);
                v25 -= 2;
                *(_QWORD *)v26 = v27;
              }
              while (*(v26 - 4) > v23);
              *v25 = v23;
              *((_DWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 2;
            v8 = (uint64_t)v22;
          }
        }
        return result;
    }
  }
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIDhEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IDhEEbiSB_E12DistanceInfoEEbT1_SM_SF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (_QWORD *)(a2 - 8));
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEvT1_SM_SM_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      v7 = (float *)(a1 + 16);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN6ou3dor23OU3DOROfflineEspressoV228SetContextFeaturesAndPaddingIfEEbiRKNS_6vectorI7OUBox3dNS_9allocatorIS6_EEEEEUlRKT_RKT0_E_PZNS4_IfEEbiSB_E12DistanceInfoEEjT1_SM_SM_SF_((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      v12 = *(_DWORD *)(v8 + 4);
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(float *)v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)i + 5) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_2294E7394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void _GLOBAL__sub_I_OU3DOROfflineEspressoV2_mm()
{
  void *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  __CFString *v9;
  _QWORD *v10;
  uint64_t *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  char *v16;
  uint64_t v17;
  uint64_t j;
  _OWORD *v19;
  uint64_t k;
  uint64_t *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  __CFString *v32;
  __CFString *v33;
  __CFString *v34;
  __CFString *v35;
  __CFString *v36;
  __CFString *v37;
  __CFString *v38;
  __CFString *v39;
  __CFString *v40;
  __CFString *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x22E2CB070]();
  v1 = CFSTR("Cabinet");
  v21 = (uint64_t *)v1;
  v22 = CFSTR("Refrigerator");
  v23 = CFSTR("Shelf");
  v24 = CFSTR("Stove");
  v2 = CFSTR("Bed");
  v25 = v2;
  v26 = CFSTR("Sink");
  v27 = CFSTR("Washer");
  v28 = CFSTR("Toilet");
  v3 = CFSTR("Bathtub");
  v29 = v3;
  v30 = CFSTR("Oven");
  v31 = CFSTR("Dishwasher");
  v32 = CFSTR("Fireplace");
  v33 = CFSTR("Stool");
  v34 = CFSTR("Chair");
  v4 = CFSTR("Table");
  v35 = v4;
  v36 = CFSTR("Screen");
  v5 = CFSTR("Sofa");
  v37 = v5;
  v38 = CFSTR("Stairs");
  v39 = CFSTR("Window");
  v40 = CFSTR("Door");
  v41 = CFSTR("BuildInCabinet");
  qword_2540CA1A0 = 0;
  qword_2540CA1A8 = 0;
  ou3dod::kObjectTypesLUT = 0;
  v6 = (char *)operator new(0xA8uLL);
  v7 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v6;
  qword_2540CA1A0 = (uint64_t)v6;
  qword_2540CA1A8 = (uint64_t)(v6 + 168);
  do
  {
    *(_QWORD *)&v6[v7 * 8] = (&v21)[v7];
    ++v7;
  }
  while (v7 != 21);
  qword_2540CA1A0 = (uint64_t)(v6 + 168);
  for (i = 20; i != -1; --i)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_2294C8000);
  v9 = v1;
  qword_2540CA358 = 0;
  unk_2540CA360 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  v21 = &ou3dod::kAFClassIdToObjectTypeOffline;
  LOBYTE(v22) = 0;
  v10 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v10;
  *v10 = v9;
  qword_2540CA358 = (uint64_t)(v10 + 1);
  unk_2540CA360 = v10 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_2294C8000);
  v11 = v9;
  v21 = v11;
  v12 = v2;
  v22 = v12;
  v13 = v3;
  v23 = v13;
  v14 = v4;
  v24 = v14;
  v15 = v5;
  v25 = v15;
  qword_2540CA230 = 0;
  qword_2540CA238 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  v16 = (char *)operator new(0x28uLL);
  v17 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v16;
  qword_2540CA230 = (uint64_t)v16;
  qword_2540CA238 = (uint64_t)(v16 + 40);
  do
  {
    *(_QWORD *)&v16[v17 * 8] = (&v21)[v17];
    ++v17;
  }
  while (v17 != 5);
  qword_2540CA230 = (uint64_t)(v16 + 40);
  for (j = 4; j != -1; --j)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_2294C8000);
  qword_2540CA2C0 = 0;
  unk_2540CA2C8 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  v19 = operator new(0x50uLL);
  qword_2540CA2C0 = (uint64_t)(v19 + 5);
  unk_2540CA2C8 = v19 + 5;
  v19[2] = xmmword_229560810;
  v19[3] = unk_229560820;
  v19[4] = xmmword_229560830;
  *v19 = xmmword_2295607F0;
  v19[1] = unk_229560800;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v19;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_2294C8000);
  v21 = v11;
  LODWORD(v22) = 1055286886;
  v23 = v12;
  LODWORD(v24) = 1039516303;
  v25 = v13;
  LODWORD(v26) = 1045220557;
  v27 = v14;
  LODWORD(v28) = 1050253722;
  v29 = v15;
  LODWORD(v30) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v21, 5);
  for (k = 8; k != -2; k -= 2)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_2294C8000);
  objc_autoreleasePoolPop(v0);
}

void sub_2294E78F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 64; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

void sub_2294E7B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294E841C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_2294E85EC()
{
  void *v0;

  JUMPOUT(0x2294E85C0);
}

void sub_2294E85FC()
{
  void *v0;

  JUMPOUT(0x2294E8604);
}

void sub_2294E860C()
{
  void *v0;

  JUMPOUT(0x2294E85C8);
}

void sub_2294E8628()
{
  void *v0;

  JUMPOUT(0x2294E85D4);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void sub_2294E8D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a23)
    operator delete(a23);
  if (a27)
    operator delete(a27);
  v30 = *(void **)(v28 - 128);
  if (v30)
  {
    *(_QWORD *)(v28 - 120) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_2294E9040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2294E9668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v22;
  void *v23;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id OUKeyframeToDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  id v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  void *v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  void *__p;
  _BYTE *v60;
  void *v61;
  _BYTE *v62;
  uint64_t v63;
  void *v64;
  _BYTE *v65;
  void *v66;
  _BYTE *v67;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  void *v71;
  _BYTE *v72;
  uint64_t v73;
  _OWORD v74[4];

  v1 = a1;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v1, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("count"));

  objc_msgSend(v1, "cameraPose");
  v74[0] = v4;
  v74[1] = v5;
  v74[2] = v6;
  v74[3] = v7;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v74, 64);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("cameraPose"));

  v9 = (const void *)objc_msgSend(v1, "points");
  v10 = objc_msgSend(v1, "points");
  v11 = objc_msgSend(v1, "count");
  v71 = 0;
  v72 = 0;
  v73 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPKS1_S7_EEvT_T0_m(&v71, v9, v10 + 16 * v11, (v10 + 16 * v11 - (uint64_t)v9) >> 4);
  std::vector<float>::vector(&v69, ((v72 - (_BYTE *)v71) >> 3) + ((v72 - (_BYTE *)v71) >> 4));
  v12 = (char *)v71;
  if (v72 != v71)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (char *)v69 + v13;
      v17 = &v12[v14];
      v18 = *(_QWORD *)v17;
      *((_DWORD *)v16 + 2) = *((_DWORD *)v17 + 2);
      *(_QWORD *)v16 = v18;
      ++v15;
      v12 = (char *)v71;
      v14 += 16;
      v13 += 12;
    }
    while (v15 < (v72 - (_BYTE *)v71) >> 4);
  }
  if (v70 == v69)
  {
    v19 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v69, v70 - (_BYTE *)v69);
    v19 = (id)objc_claimAutoreleasedReturnValue();
  }
  v20 = v19;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v19, CFSTR("points"));

  v21 = (const void *)objc_msgSend(v1, "pointsToWorld");
  v22 = objc_msgSend(v1, "pointsToWorld");
  v23 = objc_msgSend(v1, "count");
  v66 = 0;
  v67 = 0;
  v68 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v66, v21, v22 + 16 * v23, (v22 + 16 * v23 - (uint64_t)v21) >> 4);
  std::vector<float>::vector(&v64, ((v67 - (_BYTE *)v66) >> 3) + ((v67 - (_BYTE *)v66) >> 4));
  v24 = (char *)v66;
  if (v67 != v66)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    do
    {
      v28 = (char *)v64 + v25;
      v29 = &v24[v26];
      v30 = *(_QWORD *)v29;
      *((_DWORD *)v28 + 2) = *((_DWORD *)v29 + 2);
      *(_QWORD *)v28 = v30;
      ++v27;
      v24 = (char *)v66;
      v26 += 16;
      v25 += 12;
    }
    while (v27 < (v67 - (_BYTE *)v66) >> 4);
  }
  if (v65 == v64)
  {
    v31 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v64, v65 - (_BYTE *)v64);
    v31 = (id)objc_claimAutoreleasedReturnValue();
  }
  v32 = v31;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v31, CFSTR("pointsToWorld"));

  v33 = objc_msgSend(v1, "semanticLabels");
  v34 = objc_msgSend(v1, "count");
  if (v33 && v34)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v33, 4 * v34);
    v35 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v35 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v36 = v35;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v35, CFSTR("semanticLabels"));

  v37 = objc_msgSend(v1, "semanticVotes");
  v38 = objc_msgSend(v1, "count");
  if (v37 && v38)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v37, 8 * v38);
    v39 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v39 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v40 = v39;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v39, CFSTR("semanticVotes"));

  objc_msgSend(v1, "identifier");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "UUIDString");
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "setObject:forKeyedSubscript:", v42, CFSTR("identifier"));
  v43 = (const void *)objc_msgSend(v1, "colors");
  v44 = objc_msgSend(v1, "colors");
  v45 = objc_msgSend(v1, "count");
  v61 = 0;
  v62 = 0;
  v63 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v61, v43, v44 + 16 * v45, (v44 + 16 * v45 - (uint64_t)v43) >> 4);
  std::vector<float>::vector(&__p, ((v62 - (_BYTE *)v61) >> 3) + ((v62 - (_BYTE *)v61) >> 4));
  v46 = (char *)v61;
  if (v62 != v61)
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    do
    {
      v50 = (char *)__p + v47;
      v51 = &v46[v48];
      v52 = *(_QWORD *)v51;
      *((_DWORD *)v50 + 2) = *((_DWORD *)v51 + 2);
      *(_QWORD *)v50 = v52;
      ++v49;
      v46 = (char *)v61;
      v48 += 16;
      v47 += 12;
    }
    while (v49 < (v62 - (_BYTE *)v61) >> 4);
  }
  if (v60 == __p)
  {
    v53 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", __p, v60 - (_BYTE *)__p);
    v53 = (id)objc_claimAutoreleasedReturnValue();
  }
  v54 = v53;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v53, CFSTR("colors"));

  v55 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v1, "timestamp");
  objc_msgSend(v55, "numberWithDouble:");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v56, CFSTR("timestamp"));

  v57 = v2;
  if (__p)
  {
    v60 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }

  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }

  return v57;
}

void sub_2294E9D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v29 = v28;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);

  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);

  _Unwind_Resume(a1);
}

OUKeyframeExtended *OUKeyframeFromDictionary(void *a1)
{
  id v1;
  OUKeyframeExtended *v2;

  v1 = a1;
  v2 = -[OUKeyframeExtended initWithDictionary:]([OUKeyframeExtended alloc], "initWithDictionary:", v1);

  return v2;
}

void sub_2294E9E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id OUKeyframeSequenceToDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v1, "count"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  objc_msgSend(v1, "allKeys", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v1, "objectForKeyedSubscript:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        OUKeyframeToDictionary(v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "UUIDString");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, v10);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }

  return v2;
}

void sub_2294E9FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id OUKeyframeSequenceFromDictionary(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  OUKeyframeExtended *v7;
  void *v8;
  OUKeyframeExtended *v9;
  BOOL v10;
  void *v11;
  void *v13;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v1, "count"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  objc_msgSend(v1, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v16;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v16 != v3)
          objc_enumerationMutation(obj);
        v5 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v4);
        v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v5);
        v7 = [OUKeyframeExtended alloc];
        objc_msgSend(v1, "objectForKeyedSubscript:", v5);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = -[OUKeyframeExtended initWithDictionary:](v7, "initWithDictionary:", v8);

        if (v6)
          v10 = v9 == 0;
        else
          v10 = 1;
        if (!v10)
          objc_msgSend(v13, "setObject:forKeyedSubscript:", v9, v6);

        ++v4;
      }
      while (v2 != v4);
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v2);
  }

  v11 = (void *)objc_msgSend(v13, "copy");
  return v11;
}

void sub_2294EA1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

id OUKeyframeSequenceFromDictionaryWithId(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  OUKeyframeExtended *v8;
  void *v9;
  OUKeyframeExtended *v10;
  BOOL v11;
  void *v12;
  void *v14;
  id obj;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v16 = a1;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v16, "count"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend(v16, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v18;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v18 != v4)
          objc_enumerationMutation(obj);
        v6 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v5);
        v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v6);
        v8 = [OUKeyframeExtended alloc];
        objc_msgSend(v16, "objectForKeyedSubscript:", v6);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = -[OUKeyframeExtended initWithDictionary:withGroupId:](v8, "initWithDictionary:withGroupId:", v9, a2);

        if (v7)
          v11 = v10 == 0;
        else
          v11 = 1;
        if (!v11)
          objc_msgSend(v14, "setObject:forKeyedSubscript:", v10, v7);

        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v3);
  }

  v12 = (void *)objc_msgSend(v14, "copy");
  return v12;
}

void sub_2294EA41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

char *_ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2294EA868(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2294EAB3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPKS1_S7_EEvT_T0_m(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2294EABAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2294EAC24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2294EAC98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *_ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2294EAE58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(_QWORD *)result) >> 1)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (v8 <= a4)
      v10 = a4;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<half>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_17:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 1;
  if (v15 >= a4)
    goto LABEL_17;
  v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_19:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *v12 = &v9[v17];
  return result;
}

_QWORD *_ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2294EAFCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v7, v14);
    else
      v15 = 0;
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_OWORD *)v16 = *a2;
    v10 = v16 + 16;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv4_hNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(void ***a1, _DWORD *a2)
{
  void **v4;
  _DWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 2;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 1;
    if (v12 >> 1 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v7, v14);
    else
      v15 = 0;
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = *a2;
    v10 = v16 + 4;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v16 - 1) = v20;
        v16 -= 4;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv4_tNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(void ***a1, _QWORD *a2)
{
  void **v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v7, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *a2;
    v10 = v16 + 8;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void OU3DORIDTree::OU3DORIDTree(OU3DORIDTree *this)
{
  std::string *v2;
  std::string *v3;

  std::string::basic_string[abi:ne180100]<0>(this, "root")[3] = 0;
  v2 = (std::string *)operator new();
  v3 = v2;
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    v2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
  v3[2].__r_.__value_.__s.__data_[4] = 0;
  v3[1].__r_.__value_.__l.__size_ = 0;
  v3[1].__r_.__value_.__r.__words[2] = 0;
  v3[1].__r_.__value_.__r.__words[0] = 0;
  v3[2].__r_.__value_.__s.__data_[0] = 0;
  *((_QWORD *)this + 3) = v3;
}

void sub_2294EB4E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x22E2CAAE8](v2, 0x1092C4055567BECLL);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void OU3DORIDTree::PrintDebugTree(OU3DORIDTree::Node **this)
{
  OU3DORIDTree::Node::Print(this[3]);
}

void OU3DORIDTree::Node::Print(OU3DORIDTree::Node *this)
{
  std::string *v2;
  void *v3;
  OU3DORIDTree::Node *v4;
  void *v5;
  OU3DORIDTree::Node **v6;
  OU3DORIDTree::Node **v7;
  std::string v8;

  if (*((_BYTE *)this + 52))
    std::to_string(&v8, *((_DWORD *)this + 12));
  else
    std::string::basic_string[abi:ne180100]<0>(&v8, "unknown");
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v8;
  else
    v2 = (std::string *)v8.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = this;
  if (*((char *)this + 23) < 0)
    v4 = *(OU3DORIDTree::Node **)this;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  NSLog(CFSTR("Node name: %@, id of the node: %@"), v5, v3);
  v7 = (OU3DORIDTree::Node **)*((_QWORD *)this + 3);
  v6 = (OU3DORIDTree::Node **)*((_QWORD *)this + 4);
  while (v7 != v6)
    OU3DORIDTree::Node::Print(*v7++);

  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_2294EB610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t OU3DORIDTree::FindNodeInternal(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v4;
  uint64_t v6;
  size_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t NodeInternal;

  v4 = a2;
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = *(_QWORD *)(a2 + 8);
  if ((v6 & 0x80u) == 0)
    v8 = (unsigned __int8 *)*(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(unsigned __int8 **)(a2 + 8);
  v9 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = a3[1];
  if (v8 == v9)
  {
    if (v10 >= 0)
      v11 = (unsigned __int8 *)a3;
    else
      v11 = *a3;
    if ((v6 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v4, v11, v7))
        return v4;
    }
    else
    {
      if (!(_DWORD)v6)
        return v4;
      v12 = 0;
      while (*(unsigned __int8 *)(v4 + v12) == v11[v12])
      {
        if (v6 == ++v12)
          return v4;
      }
    }
  }
  v13 = *(_QWORD **)(v4 + 24);
  v14 = *(_QWORD **)(v4 + 32);
  while (1)
  {
    if (v13 == v14)
      return 0;
    NodeInternal = OU3DORIDTree::FindNodeInternal(a1, *v13, a3);
    if (NodeInternal)
      break;
    ++v13;
  }
  return NodeInternal;
}

void OU3DORIDTree::AddNode(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t NodeInternal;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  NodeInternal = OU3DORIDTree::FindNodeInternal(a1, *(_QWORD *)(a1 + 24), a3);
  if (NodeInternal)
  {
    v5 = (_QWORD *)NodeInternal;
    v8 = *(_QWORD *)(NodeInternal + 40);
    v6 = NodeInternal + 40;
    v7 = v8;
    v9 = *(_QWORD **)(v6 - 8);
    if ((unint64_t)v9 >= v8)
    {
      v11 = (void **)(v6 - 16);
      v12 = *(_QWORD *)(v6 - 16);
      v13 = ((uint64_t)v9 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v14 = v7 - v12;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v6, v16);
      else
        v17 = 0;
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *(_QWORD *)v18 = a2;
      v10 = v18 + 8;
      v21 = (char *)v5[3];
      v20 = (char *)v5[4];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v18 - 1) = v22;
          v18 -= 8;
        }
        while (v20 != v21);
        v20 = (char *)*v11;
      }
      v5[3] = v18;
      v5[4] = v10;
      v5[5] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v9 = a2;
      v10 = v9 + 1;
    }
    v5[4] = v10;
  }
}

unint64_t OU3DORIDTree::FindRange(uint64_t a1, unsigned __int8 **a2)
{
  OU3DORIDTree::Node *NodeInternal;

  NodeInternal = (OU3DORIDTree::Node *)OU3DORIDTree::FindNodeInternal(a1, *(_QWORD *)(a1 + 24), a2);
  return OU3DORIDTree::Node::IDRange(NodeInternal);
}

unint64_t OU3DORIDTree::Node::IDRange(OU3DORIDTree::Node *this)
{
  unsigned int v2;
  unint64_t v3;
  OU3DORIDTree::Node **v5;
  unint64_t v6;
  OU3DORIDTree::Node **v7;
  OU3DORIDTree::Node **v8;
  OU3DORIDTree::Node *v9;
  uint64_t v10;

  if (*((_BYTE *)this + 52)
    || (v5 = (OU3DORIDTree::Node **)*((_QWORD *)this + 3), *((OU3DORIDTree::Node ***)this + 4) == v5))
  {
    v2 = *((_DWORD *)this + 12);
    v3 = v2;
  }
  else
  {
    v6 = OU3DORIDTree::Node::IDRange(*v5);
    v2 = v6;
    v3 = HIDWORD(v6);
    v8 = (OU3DORIDTree::Node **)*((_QWORD *)this + 3);
    v7 = (OU3DORIDTree::Node **)*((_QWORD *)this + 4);
    while (v8 != v7)
    {
      v9 = *v8++;
      v10 = OU3DORIDTree::Node::IDRange(v9);
      if ((int)v2 >= (int)v10)
        v2 = v10;
      if ((int)v3 <= SHIDWORD(v10))
        v3 = HIDWORD(v10);
      else
        v3 = v3;
    }
  }
  return v2 | (v3 << 32);
}

OU3DORIDTree::Node *OU3DORIDTree::FindNodeBasedOnID(OU3DORIDTree::Node **this, int a2)
{
  return OU3DORIDTree::FindNodeBasedOnIDInternal((uint64_t)this, this[3], a2, 0);
}

OU3DORIDTree::Node *OU3DORIDTree::FindNodeBasedOnIDInternal(uint64_t a1, OU3DORIDTree::Node *a2, int a3, uint64_t *a4)
{
  OU3DORIDTree::Node *v6;
  OU3DORIDTree::Node **v7;
  OU3DORIDTree::Node **v8;
  OU3DORIDTree::Node *v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;

  if (!a2)
  {
LABEL_19:
    if (a4)
      std::vector<std::string>::__clear[abi:ne180100](a4);
    return 0;
  }
  v6 = a2;
LABEL_3:
  if (!*((_BYTE *)v6 + 52) || *((_DWORD *)v6 + 12) != a3)
  {
    v7 = (OU3DORIDTree::Node **)*((_QWORD *)v6 + 3);
    v8 = (OU3DORIDTree::Node **)*((_QWORD *)v6 + 4);
    while (v7 != v8)
    {
      v9 = *v7;
      v10 = OU3DORIDTree::Node::IDRange(*v7);
      if ((int)v10 <= a3 && SHIDWORD(v10) >= a3)
      {
        if (a4)
        {
          v12 = a4[1];
          if (v12 >= a4[2])
          {
            v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (__int128 *)v6);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, (__int128 *)v6);
            v13 = v12 + 24;
          }
          a4[1] = v13;
        }
        v6 = v9;
        if (v9)
          goto LABEL_3;
        goto LABEL_19;
      }
      ++v7;
    }
    goto LABEL_19;
  }
  if (a4)
  {
    v15 = a4[1];
    if (v15 >= a4[2])
    {
      v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (__int128 *)v6);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, (__int128 *)v6);
      v16 = v15 + 24;
    }
    a4[1] = v16;
  }
  return v6;
}

uint64_t OU3DORIDTree::FindNode(uint64_t a1, unsigned __int8 **a2)
{
  return OU3DORIDTree::FindNodeInternal(a1, *(_QWORD *)(a1 + 24), a2);
}

void OU3DORIDTree::GetRootToNodePath(OU3DORIDTree::Node **this@<X0>, int a2@<W1>, std::string::value_type a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const std::string::value_type *v11;
  const std::string::value_type *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  OU3DORIDTree::FindNodeBasedOnIDInternal((uint64_t)this, this[3], a2, &v17);
  v6 = v17;
  if (0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3) >= 2)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      v9 = v6 + v7;
      v12 = *(const std::string::value_type **)(v9 + 24);
      v10 = v9 + 24;
      v11 = v12;
      v13 = *(char *)(v10 + 23);
      if (v13 >= 0)
        v14 = (const std::string::value_type *)v10;
      else
        v14 = v11;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(v10 + 23);
      else
        v15 = *(_QWORD *)(v10 + 8);
      std::string::append(a4, v14, v15);
      v6 = v17;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3);
      if (v16 - 1 > v8)
      {
        std::string::push_back(a4, a3);
        v6 = v17;
        v16 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3);
      }
      ++v8;
      v7 += 24;
    }
    while (v16 > v8);
  }
  v20 = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_2294EBABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_2294EBB8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_2294EBCA0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_2294EC234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id objc_cast<NSArray>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_2294EC34C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294EC4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id OUCameraToDictionary(void *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  double v4;
  void *v5;
  double v6;
  void *v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  void *v20;
  void *v21;
  simd_float4 v22;
  simd_float4 v23;
  simd_float4 v24;
  simd_float4 v25;
  void *v26;
  simd_float4 v27;
  simd_float4 v28;
  simd_float4 v29;
  simd_float4 v30;
  void *v31;
  void *v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  id v41;
  void *v42;
  simd_float4x4 v43;
  _QWORD v44[2];
  _QWORD v45[3];
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v41 = a1;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "intrinsics");
  v38 = v2;
  v39 = v1;
  v40 = v3;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", *(double *)&v3);
  v47 = objc_claimAutoreleasedReturnValue();
  v37 = (void *)v47;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", *(double *)&v39);
  v48 = objc_claimAutoreleasedReturnValue();
  v36 = (void *)v48;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", *(double *)&v38);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = v35;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v47, 3);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v43.columns[0].i64[0] = (uint64_t)v34;
  HIDWORD(v4) = DWORD1(v40);
  LODWORD(v4) = DWORD1(v40);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v46[0] = v5;
  HIDWORD(v6) = DWORD1(v39);
  LODWORD(v6) = DWORD1(v39);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v46[1] = v7;
  HIDWORD(v8) = DWORD1(v38);
  LODWORD(v8) = DWORD1(v38);
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v46[2] = v9;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v46, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v43.columns[0].i64[1] = (uint64_t)v10;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v40), DWORD2(v40))));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v45[0] = v11;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v39), DWORD2(v39))));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v45[1] = v12;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(DWORD1(v38), DWORD2(v38))));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v45[2] = v13;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v45, 3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v43.columns[1].i64[0] = (uint64_t)v14;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v43, 3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v42, "setObject:forKeyedSubscript:", v15, CFSTR("intrinsic"));
  v16 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v41, "imageResolution");
  objc_msgSend(v16, "numberWithDouble:");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v44[0] = v17;
  v18 = (void *)MEMORY[0x24BDD16E0];
  objc_msgSend(v41, "imageResolution");
  objc_msgSend(v18, "numberWithDouble:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v44[1] = v20;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v44, 2);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "setObject:forKeyedSubscript:", v21, CFSTR("image_resolution"));

  objc_msgSend(v41, "pose");
  v43.columns[0] = v22;
  v43.columns[1] = v23;
  v43.columns[2] = v24;
  v43.columns[3] = v25;
  float4x4ToNSArray(&v43, *(double *)v22.i64);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "setObject:forKeyedSubscript:", v26, CFSTR("pose"));

  objc_msgSend(v41, "transform");
  v43.columns[0] = v27;
  v43.columns[1] = v28;
  v43.columns[2] = v29;
  v43.columns[3] = v30;
  float4x4ToNSArray(&v43, *(double *)v27.i64);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "setObject:forKeyedSubscript:", v31, CFSTR("transform"));

  v32 = (void *)objc_msgSend(v42, "copy");
  return v32;
}

void sub_2294EC990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_2294ECDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

_OUCamera *OUCameraFromDictionary(void *a1)
{
  id v1;
  _OUCamera *v2;

  v1 = a1;
  v2 = -[_OUCamera initWithDictionary:]([_OUCamera alloc], "initWithDictionary:", v1);

  return v2;
}

void sub_2294ECF28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t VECV::ConnectedComponent::bitmapVal(VECV::ConnectedComponent *this, int a2, int a3)
{
  return *(_QWORD *)this + *((_QWORD *)this + 3) * a3 + a2;
}

uint64_t VECV::ConnectedComponent::labelVal(VECV::ConnectedComponent *this, int a2, int a3)
{
  return *((_QWORD *)this + 4) + 2 * (*((_QWORD *)this + 5) * (a3 + 1) + a2 + 1);
}

_QWORD *VECV::ConnectedComponent::ConnectedComponent(_QWORD *a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t a5, int a6)
{
  uint64_t **v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  uint64_t **v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int16 v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int16 v39;
  unsigned __int16 v40;
  uint64_t **v41;
  uint64_t *v42;
  char *v43;
  uint64_t *v44;
  uint64_t *v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  BOOL v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t *v66;
  _QWORD *v69;
  uint64_t **v70;
  uint64_t **v71;
  uint64_t *v72;
  _QWORD *v73[2];
  unsigned __int16 v74;
  unsigned __int16 *v75;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[8] = 0;
  a1[7] = a1 + 8;
  v70 = (uint64_t **)(a1 + 7);
  a1[9] = 0;
  a1[11] = 0;
  v69 = a1 + 11;
  a1[10] = a1 + 11;
  v71 = (uint64_t **)(a1 + 10);
  a1[12] = 0;
  a1[5] = (char *)a3 + 2;
  a1[6] = a4 + 2;
  a1[4] = malloc_type_calloc((_QWORD)(a4 + 2) * ((_QWORD)a3 + 2), 2uLL, 0x1000040BDFB0063uLL);
  v73[0] = 0;
  v73[1] = 0;
  v72 = (uint64_t *)v73;
  v74 = 0;
  v75 = &v74;
  v9 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v72, &v74, (uint64_t)&std::piecewise_construct, &v75);
  *((_WORD *)v9 + 20) = 0;
  v9[6] = 0;
  if (a6 == 1)
  {
    if (!a4)
      goto LABEL_88;
    v10 = 0;
    v11 = 0;
    v12 = 1;
    do
    {
      if (a3)
      {
        v13 = 0;
        do
        {
          if (*((_BYTE *)v13 + *a1 + (_QWORD)v10 * a1[3]))
          {
            v14 = a1[4];
            v15 = a1[5];
            v16 = (unsigned __int16 *)(v14 + 2 * ((_QWORD)v13 + (_QWORD)v10 * v15));
            v17 = v16[1];
            if (v16[1])
              v18 = v16[1];
            else
              v18 = -1;
            v19 = (uint64_t)v13 + v12 * v15;
            v20 = *(unsigned __int16 *)(v14 + 2 * v19);
            v21 = v18;
            if (v20 < v18)
              v21 = *(_WORD *)(v14 + 2 * v19);
            if (*(_WORD *)(v14 + 2 * v19))
              v18 = v21;
            v22 = v18;
            v23 = *v16;
            if (v23 < v18)
              v22 = *v16;
            if (*v16)
              v18 = v22;
            v24 = v16[2];
            if (v24 >= v18)
              v25 = v18;
            else
              v25 = v16[2];
            if (v24)
              v26 = v25;
            else
              v26 = v18;
            if (v26 == 0xFFFF)
            {
              *(_WORD *)(v14 + 2 * v19 + 2) = ++v11;
              v74 = v11;
              v75 = &v74;
              v27 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v72, &v74, (uint64_t)&std::piecewise_construct, &v75);
              *((_WORD *)v27 + 20) = v11;
              v27[6] = 0;
            }
            else
            {
              *(_WORD *)(v14 + 2 * v19 + 2) = v26;
              if (v17 > v26)
                UnionFind<unsigned short>::Union(&v72, v17, v26);
              if (v20 > v26)
                UnionFind<unsigned short>::Union(&v72, v20, v26);
              if (v23 > v26)
                UnionFind<unsigned short>::Union(&v72, v23, v26);
              if (v24 > v26)
                UnionFind<unsigned short>::Union(&v72, v24, v26);
            }
          }
          v13 = (uint64_t *)((char *)v13 + 1);
        }
        while (a3 != v13);
      }
      ++v10;
      ++v12;
    }
    while (v10 != a4);
  }
  else
  {
    if (!a4)
      goto LABEL_88;
    v28 = 0;
    v29 = 0;
    v30 = 1;
    do
    {
      if (a3)
      {
        v31 = 0;
        do
        {
          if (*((_BYTE *)v31 + *a1 + (_QWORD)v28 * a1[3]))
          {
            v32 = a1[4];
            v33 = a1[5];
            v34 = v32 + 2 * ((_QWORD)v31 + (_QWORD)v28 * v33);
            v35 = *(unsigned __int16 *)(v34 + 2);
            if (*(_WORD *)(v34 + 2))
              v36 = *(_WORD *)(v34 + 2);
            else
              v36 = -1;
            v37 = (uint64_t)v31 + v30 * v33;
            v38 = *(unsigned __int16 *)(v32 + 2 * v37);
            v39 = v36;
            if (v38 < v36)
              v39 = *(_WORD *)(v32 + 2 * v37);
            if (*(_WORD *)(v32 + 2 * v37))
              v40 = v39;
            else
              v40 = v36;
            if (v40 == 0xFFFF)
            {
              *(_WORD *)(v32 + 2 * v37 + 2) = ++v29;
              v74 = v29;
              v75 = &v74;
              v41 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(&v72, &v74, (uint64_t)&std::piecewise_construct, &v75);
              *((_WORD *)v41 + 20) = v29;
              v41[6] = 0;
            }
            else
            {
              *(_WORD *)(v32 + 2 * v37 + 2) = v40;
              if (v35 > v40)
                UnionFind<unsigned short>::Union(&v72, v35, v40);
              if (v38 > v40)
                UnionFind<unsigned short>::Union(&v72, v38, v40);
            }
          }
          v31 = (uint64_t *)((char *)v31 + 1);
        }
        while (a3 != v31);
      }
      ++v28;
      ++v30;
    }
    while (v28 != a4);
  }
  v42 = 0;
  do
  {
    v43 = (char *)v42 + 1;
    if (a3)
    {
      v44 = 0;
      do
      {
        v45 = (uint64_t *)((char *)v44 + 1);
        v46 = UnionFind<unsigned short>::Find(&v72, *(_WORD *)(a1[4] + 2 * ((_QWORD)v44 + a1[5] * (_QWORD)v43 + 1)));
        v47 = a1[4];
        v48 = (uint64_t)v44 + a1[5] * (_QWORD)v43 + 1;
        *(_WORD *)(v47 + 2 * v48) = v46;
        v74 = 0;
        v74 = *(_WORD *)(v47 + 2 * v48);
        v75 = &v74;
        v49 = std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v70, &v74, (uint64_t)&std::piecewise_construct, &v75);
        v49[5] = (uint64_t *)((char *)v49[5] + 1);
        v50 = *v69;
        if (!*v69)
          goto LABEL_72;
        v51 = v69;
        do
        {
          v52 = *(unsigned __int16 *)(v50 + 32);
          v53 = v52 >= v74;
          if (v52 >= v74)
            v54 = (uint64_t *)v50;
          else
            v54 = (uint64_t *)(v50 + 8);
          if (v53)
            v51 = (_QWORD *)v50;
          v50 = *v54;
        }
        while (*v54);
        if (v51 != v69 && v74 >= *((unsigned __int16 *)v51 + 16))
        {
          v75 = &v74;
          v57 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75)[5];
          v75 = &v74;
          v58 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75);
          if (v57 >= v44)
            v59 = v44;
          else
            v59 = v57;
          v58[5] = v59;
          v75 = &v74;
          v60 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75)[6];
          v75 = &v74;
          v61 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75);
          if (v60 <= v44)
            v62 = v44;
          else
            v62 = v60;
          v61[6] = v62;
          v75 = &v74;
          v63 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75)[7];
          v75 = &v74;
          v64 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75);
          if (v63 >= v42)
            v65 = v42;
          else
            v65 = v63;
          v64[7] = v65;
          v75 = &v74;
          v66 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75)[8];
          v75 = &v74;
          v55 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75);
          if (v66 <= v42)
            v56 = v42;
          else
            v56 = v66;
        }
        else
        {
LABEL_72:
          v75 = &v74;
          v55 = std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v71, &v74, (uint64_t)&std::piecewise_construct, &v75);
          v55[5] = v44;
          v55[6] = v44;
          v56 = v42;
          v55[7] = v42;
        }
        v55[8] = v56;
        v44 = v45;
      }
      while (v45 != a3);
    }
    v42 = (uint64_t *)((char *)v42 + 1);
  }
  while (v43 != a4);
LABEL_88:
  std::__tree<int>::destroy((uint64_t)&v72, v73[0]);
  return a1;
}

void sub_2294ED524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD **a9, uint64_t a10, _QWORD **a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<int>::destroy((uint64_t)&a14, a15);
  std::__tree<int>::destroy(a13, *a11);
  std::__tree<int>::destroy(a12, *a9);
  _Unwind_Resume(a1);
}

uint64_t **UnionFind<unsigned short>::Union(uint64_t **a1, unsigned int a2, unsigned int a3)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  uint64_t **result;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  uint64_t **v20;

  v19 = a2;
  v18 = a3;
  if (a2 >= a3)
    v4 = (uint64_t **)&v19;
  else
    v4 = (uint64_t **)&v18;
  v20 = v4;
  v5 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, (unsigned __int16 *)v4, (uint64_t)&std::piecewise_construct, (_WORD **)&v20)+ 5;
  do
  {
    v6 = v5;
    v5 = (uint64_t **)v5[1];
  }
  while (v5);
  v7 = *(unsigned __int16 *)v6;
  if (v18 >= v19)
    v8 = (uint64_t **)&v19;
  else
    v8 = (uint64_t **)&v18;
  v20 = v8;
  result = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, (unsigned __int16 *)v8, (uint64_t)&std::piecewise_construct, (_WORD **)&v20);
  v10 = result + 5;
  do
  {
    v11 = v10;
    v10 = (uint64_t **)v10[1];
  }
  while (v10);
  if (v7 != *(unsigned __int16 *)v11)
  {
    if (v18 >= v19)
      v12 = (uint64_t **)&v19;
    else
      v12 = (uint64_t **)&v18;
    v20 = v12;
    v13 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, (unsigned __int16 *)v12, (uint64_t)&std::piecewise_construct, (_WORD **)&v20)+ 5;
    do
    {
      v14 = (uint64_t *)v13;
      v13 = (uint64_t **)v13[1];
    }
    while (v13);
    if (v19 >= v18)
      v15 = (uint64_t **)&v19;
    else
      v15 = (uint64_t **)&v18;
    v20 = v15;
    v16 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, (unsigned __int16 *)v15, (uint64_t)&std::piecewise_construct, (_WORD **)&v20)+ 5;
    do
    {
      v17 = v16;
      v16 = (uint64_t **)v16[1];
    }
    while (v16);
    v20 = v17;
    result = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, (unsigned __int16 *)v17, (uint64_t)&std::piecewise_construct, (_WORD **)&v20);
    result[6] = v14;
  }
  return result;
}

uint64_t UnionFind<unsigned short>::Find(uint64_t **a1, unsigned __int16 a2)
{
  uint64_t **v2;
  uint64_t **v3;
  unsigned __int16 v5;
  unsigned __int16 *v6;

  v5 = a2;
  v6 = &v5;
  v2 = std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(a1, &v5, (uint64_t)&std::piecewise_construct, &v6)+ 5;
  do
  {
    v3 = v2;
    v2 = (uint64_t **)v2[1];
  }
  while (v2);
  return *(unsigned __int16 *)v3;
}

void VECV::ConnectedComponent::~ConnectedComponent(void **this)
{
  free(this[4]);
  std::__tree<int>::destroy((uint64_t)(this + 10), this[11]);
  std::__tree<int>::destroy((uint64_t)(this + 7), this[8]);
}

uint64_t **std::__tree<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,UnionFind<unsigned short>::UFNode>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[16] = **a4;
    v11[20] = 0;
    *((_QWORD *)v11 + 6) = 0;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,unsigned long>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,unsigned long>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,unsigned long>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,VECV::CCStat>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,VECV::CCStat>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,VECV::CCStat>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x48uLL);
    *((_WORD *)v11 + 16) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void ou3dod::OU3DAnchorFreeDetector::createForOnline(ou3dod::OU3DAnchorFreeDetector *this@<X0>, uint64_t *a2@<X8>)
{
  int v5;
  void *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *__p[2];
  char v12;

  v5 = *((unsigned __int8 *)this + 64);
  objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)operator new();
  if (v5)
    v8 = "PrecompiledModels/od_af_online_j4.bundle";
  else
    v8 = "PrecompiledModels/od_af_online.bundle";
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  OUEspressoV2Inference::OUEspressoV2Inference(v7, v6, __p, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  v9 = operator new();
  __p[0] = v7;
  ou3dod::OU3DAnchorFreeDetector::OU3DAnchorFreeDetector(v9, (uint64_t *)__p, (__int128 *)this, 21, 10000, 1);
  *a2 = v9;
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);

}

void sub_2294EDAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  uint64_t v16;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  MEMORY[0x22E2CAAE8](v16, 0x10B1C4009F42ACALL);

  _Unwind_Resume(a1);
}

void ou3dod::OU3DAnchorFreeDetector::createForOffline(ou3dod::OU3DAnchorFreeDetector *this@<X0>, uint64_t *a2@<X8>)
{
  int v5;
  void *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *__p[2];
  char v12;

  v5 = *((unsigned __int8 *)this + 64);
  objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)operator new();
  if (v5)
    v8 = "PrecompiledModels/od_af_offline_j4.bundle";
  else
    v8 = "PrecompiledModels/od_af_offline.bundle";
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  OUEspressoV2Inference::OUEspressoV2Inference(v7, v6, __p, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  v9 = operator new();
  __p[0] = v7;
  ou3dod::OU3DAnchorFreeDetector::OU3DAnchorFreeDetector(v9, (uint64_t *)__p, (__int128 *)this, 1, 900000, 0);
  *a2 = v9;
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);

}

void sub_2294EDC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  uint64_t v16;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  MEMORY[0x22E2CAAE8](v16, 0x10B1C4009F42ACALL);

  _Unwind_Resume(a1);
}

uint64_t ou3dod::OU3DAnchorFreeDetector::OU3DAnchorFreeDetector(uint64_t a1, uint64_t *a2, __int128 *a3, int a4, int a5, char a6)
{
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void **v17;
  uint64_t v18;
  int v19;
  void *v20;
  NSObject *v21;
  int v22;
  std::vector<int>::value_type __x;
  std::vector<int> v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v11 = ou3dod::OU3DODInterface::OU3DODInterface((_QWORD *)a1, a2);
  *v11 = &off_24F242E18;
  v12 = a3[2];
  v13 = a3[3];
  v14 = a3[4];
  v16 = *a3;
  v15 = a3[1];
  *(_OWORD *)(v11 + 21) = 0u;
  v17 = (void **)(v11 + 21);
  *((_OWORD *)v11 + 3) = v16;
  *((_OWORD *)v11 + 7) = v14;
  *((_OWORD *)v11 + 6) = v13;
  *((_OWORD *)v11 + 5) = v12;
  *((_OWORD *)v11 + 4) = v15;
  *((_BYTE *)v11 + 128) = a6;
  *((_DWORD *)v11 + 33) = a4;
  *((_DWORD *)v11 + 34) = a5;
  v18 = (uint64_t)(v11 + 24);
  v11[18] = 0;
  v11[19] = 0;
  *((_DWORD *)v11 + 40) = 0;
  *(_OWORD *)(v11 + 23) = 0u;
  *(_OWORD *)(v11 + 25) = 0u;
  v19 = *((_DWORD *)v11 + 16) * *((_DWORD *)v11 + 17) * *((_DWORD *)v11 + 18);
  *((_DWORD *)v11 + 35) = v19;
  __x = 0;
  std::vector<int>::vector(&v25, v19, &__x);
  v20 = *v17;
  if (*v17)
  {
    *(_QWORD *)(a1 + 176) = v20;
    operator delete(v20);
    *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
  }
  *(std::vector<int> *)(a1 + 168) = v25;
  if (*(_BYTE *)(a1 + 128))
    std::vector<float>::resize(v18, *(int *)(a1 + 136));
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    v22 = *(_DWORD *)(a1 + 140);
    LODWORD(v25.__begin_) = 136315394;
    *(std::vector<int>::pointer *)((char *)&v25.__begin_ + 4) = (std::vector<int>::pointer)"OU3DAnchorFreeDetector";
    WORD2(v25.__end_) = 1024;
    *(_DWORD *)((char *)&v25.__end_ + 6) = v22;
    _os_log_impl(&dword_2294C8000, v21, OS_LOG_TYPE_INFO, "[3DOD][%s] Loading AF Espresso V2 version succeeded, with %d voxels.", (uint8_t *)&v25, 0x12u);
  }

  return a1;
}

void sub_2294EDEC0(_Unwind_Exception *a1)
{
  ou3dod::OU3DODInterface *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 25) = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 22) = v6;
    operator delete(v6);
  }
  ou3dod::OU3DODInterface::~OU3DODInterface(v1);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DODInterface::~OU3DODInterface(ou3dod::OU3DODInterface *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &unk_24F242E70;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 8);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void ou3dod::OU3DAnchorFreeDetector::Preprocess(ou3dod::OU3DAnchorFreeDetector *this, OUPointCloudCpp *a2)
{
  uint64_t v4;
  char *Input;
  unint64_t v6;
  unint64_t v7;
  NSObject *v8;
  std::logic_error *exception;
  void *__p[2];
  char v11;

  if (!OUPointCloudCpp::IsValid(a2))
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      ou3dod::OU3DAnchorFreeDetector::Preprocess(v8);

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)&unk_22956FEC2);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v4 = *((_QWORD *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Input = (char *)OUDnnInferenceInterface::GetInputSpan<half,void>(v4, (unsigned __int8 *)__p);
  v7 = v6;
  if (v11 < 0)
    operator delete(__p[0]);
  ou3dod::PreprocessDense<half,true>((uint64_t)this + 48, *((_DWORD *)this + 34), *((_DWORD *)this + 35), (uint64_t *)a2 + 3, (uint64_t *)a2 + 6, (uint64_t *)a2 + 9, Input, v7, (uint64_t)this + 168, (uint64_t *)this + 24, (float *)this + 40, (int8x16_t *)this + 9, 0, *((_BYTE *)this + 128));
}

void sub_2294EE06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

BOOL OUPointCloudCpp::IsValid(OUPointCloudCpp *this)
{
  uint64_t v1;

  v1 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4;
  return v1 == (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4
      && v1 == (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2
      && v1 == (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3;
}

void ou3dod::OU3DAnchorFreeDetector::ParseNetOutput(float32x4_t *this)
{
  uint64_t *v2;
  int v3;
  int v4;
  __CFString **v5;
  uint64_t v6;
  char *Output;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;

  if (this[8].i8[0])
    v2 = &ou3dod::kObjectTypesLUT;
  else
    v2 = &ou3dod::kAFClassIdToObjectTypeOffline;
  v3 = this[8].i32[3];
  v4 = this[8].i32[1];
  if (this[8].i8[0])
    v5 = OU3DObjectODSourceOnline;
  else
    v5 = &OU3DObjectODSourceOffline;
  v6 = this[2].i64[0];
  std::string::basic_string[abi:ne180100]<0>(v22, "centerness");
  Output = (char *)OUDnnInferenceInterface::GetOutputSpan<half,void>(v6, (unsigned __int8 *)v22);
  v9 = v8;
  v10 = this[2].i64[0];
  std::string::basic_string[abi:ne180100]<0>(v20, "cls");
  v11 = (char *)OUDnnInferenceInterface::GetOutputSpan<half,void>(v10, (unsigned __int8 *)v20);
  v13 = v12;
  v14 = this[2].i64[0];
  std::string::basic_string[abi:ne180100]<0>(__p, "bbox_reg");
  v15 = (char *)OUDnnInferenceInterface::GetOutputSpan<half,void>(v14, (unsigned __int8 *)__p);
  ou3dod::ParseNetOutputAF(this + 3, v3, v4, *v5, v2, Output, v9, v17, v11, v13, v15, v16, &this->i64[1]);
  if (v19 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v23 < 0)
    operator delete(v22[0]);
}

void sub_2294EE230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void ou3dod::OU3DAnchorFreeDetector::Postprocess(ou3dod::OU3DAnchorFreeDetector *this)
{
  void *v2;

  ou3dod::OU3DAnchorFreeDetector::ParseNetOutput((float32x4_t *)this);
  if (*((_BYTE *)this + 128))
  else
  ou3dod::PostprocessAF((float32x4_t *)this + 9, (uint64_t)v2, (__CFString *)((char *)this + 8), *((float32_t *)this + 40));
}

void ou3dod::OU3DAnchorFreeDetector::~OU3DAnchorFreeDetector(ou3dod::OU3DAnchorFreeDetector *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F242E18;
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  ou3dod::OU3DODInterface::~OU3DODInterface(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F242E18;
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  ou3dod::OU3DODInterface::~OU3DODInterface(this);
  JUMPOUT(0x22E2CAAE8);
}

void _GLOBAL__sub_I_OU3DAnchorFreeDetector_mm()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  __CFString *v10;
  _QWORD *v11;
  uint64_t *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  char *v17;
  uint64_t v18;
  uint64_t j;
  _OWORD *v20;
  uint64_t *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  uint64_t k;
  uint64_t *v27;
  uint64_t m;
  void *context;
  __CFString *v30;
  __CFString *v31;
  __CFString *v32;
  __CFString *v33;
  __CFString *v34;
  __CFString *v35;
  __CFString *v36;
  __CFString *v37;
  __CFString *v38;
  __CFString *v39;
  __CFString *v40;
  __CFString *v41;
  __CFString *v42;
  __CFString *v43;
  uint64_t *v44;
  __CFString *v45;
  __CFString *v46;
  __CFString *v47;
  __CFString *v48;
  __CFString *v49;
  __CFString *v50;
  __CFString *v51;
  __CFString *v52;
  __CFString *v53;
  __CFString *v54;
  __CFString *v55;
  __CFString *v56;
  __CFString *v57;
  __CFString *v58;
  __CFString *v59;
  __CFString *v60;
  __CFString *v61;
  __CFString *v62;
  __CFString *v63;
  __CFString *v64;
  int v65;
  __CFString *v66;
  int v67;
  __CFString *v68;
  int v69;
  __CFString *v70;
  int v71;
  __CFString *v72;
  int v73;
  __CFString *v74;
  int v75;
  __CFString *v76;
  int v77;
  __CFString *v78;
  int v79;
  __CFString *v80;
  int v81;
  __CFString *v82;
  int v83;
  __CFString *v84;
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x22E2CB070]();
  v0 = CFSTR("Cabinet");
  v44 = (uint64_t *)v0;
  v43 = CFSTR("Refrigerator");
  v45 = v43;
  v42 = CFSTR("Shelf");
  v46 = v42;
  v41 = CFSTR("Stove");
  v47 = v41;
  v1 = CFSTR("Bed");
  v48 = v1;
  v40 = CFSTR("Sink");
  v49 = v40;
  v39 = CFSTR("Washer");
  v50 = v39;
  v38 = CFSTR("Toilet");
  v51 = v38;
  v2 = CFSTR("Bathtub");
  v52 = v2;
  v37 = CFSTR("Oven");
  v53 = v37;
  v36 = CFSTR("Dishwasher");
  v54 = v36;
  v35 = CFSTR("Fireplace");
  v55 = v35;
  v34 = CFSTR("Stool");
  v56 = v34;
  v33 = CFSTR("Chair");
  v57 = v33;
  v3 = CFSTR("Table");
  v58 = v3;
  v32 = CFSTR("Screen");
  v59 = v32;
  v4 = CFSTR("Sofa");
  v60 = v4;
  v31 = CFSTR("Stairs");
  v61 = v31;
  v30 = CFSTR("Window");
  v62 = v30;
  v5 = CFSTR("Door");
  v63 = v5;
  v6 = CFSTR("BuildInCabinet");
  v64 = v6;
  qword_2540CA1B8 = 0;
  qword_2540CA1C0 = 0;
  ou3dod::kObjectTypesLUT = 0;
  v7 = (char *)operator new(0xA8uLL);
  v8 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v7;
  qword_2540CA1B8 = (uint64_t)v7;
  qword_2540CA1C0 = (uint64_t)(v7 + 168);
  do
  {
    *(_QWORD *)&v7[v8 * 8] = (&v44)[v8];
    ++v8;
  }
  while (v8 != 21);
  qword_2540CA1B8 = (uint64_t)(v7 + 168);
  for (i = 20; i != -1; --i)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_2294C8000);
  v10 = v0;
  qword_2540CA370 = 0;
  unk_2540CA378 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  v44 = &ou3dod::kAFClassIdToObjectTypeOffline;
  LOBYTE(v45) = 0;
  v11 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v11;
  *v11 = v10;
  qword_2540CA370 = (uint64_t)(v11 + 1);
  unk_2540CA378 = v11 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_2294C8000);
  v12 = v10;
  v44 = v12;
  v13 = v1;
  v45 = v13;
  v14 = v2;
  v46 = v14;
  v15 = v3;
  v47 = v15;
  v16 = v4;
  v48 = v16;
  qword_2540CA248 = 0;
  qword_2540CA250 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  v17 = (char *)operator new(0x28uLL);
  v18 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v17;
  qword_2540CA248 = (uint64_t)v17;
  qword_2540CA250 = (uint64_t)(v17 + 40);
  do
  {
    *(_QWORD *)&v17[v18 * 8] = (&v44)[v18];
    ++v18;
  }
  while (v18 != 5);
  qword_2540CA248 = (uint64_t)(v17 + 40);
  for (j = 4; j != -1; --j)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_2294C8000);
  qword_2540CA2D8 = 0;
  unk_2540CA2E0 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  v20 = operator new(0x50uLL);
  qword_2540CA2D8 = (uint64_t)(v20 + 5);
  unk_2540CA2E0 = v20 + 5;
  v20[2] = xmmword_229560890;
  v20[3] = unk_2295608A0;
  v20[4] = xmmword_2295608B0;
  *v20 = xmmword_229560870;
  v20[1] = unk_229560880;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v20;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_2294C8000);
  v21 = v12;
  v44 = v21;
  LODWORD(v45) = 1055286886;
  v22 = v13;
  v46 = v22;
  LODWORD(v47) = 1039516303;
  v23 = v14;
  v48 = v23;
  LODWORD(v49) = 1045220557;
  v24 = v15;
  v50 = v24;
  LODWORD(v51) = 1050253722;
  v25 = v16;
  v52 = v25;
  LODWORD(v53) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v44, 5);
  for (k = 8; k != -2; k -= 2)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_2294C8000);
  v27 = v21;
  v44 = v27;
  LODWORD(v45) = 1050253722;
  v46 = v43;
  LODWORD(v47) = 1052602532;
  v48 = v42;
  LODWORD(v49) = 1051260355;
  v50 = v41;
  LODWORD(v51) = 1043878380;
  v52 = v22;
  LODWORD(v53) = 1053273620;
  v54 = v40;
  LODWORD(v55) = 1046562734;
  v56 = v39;
  LODWORD(v57) = 1051260355;
  v58 = v38;
  LODWORD(v59) = 1052266988;
  v60 = v23;
  LODWORD(v61) = 1053609165;
  v62 = v37;
  LODWORD(v63) = 1050924810;
  v64 = v36;
  v65 = 1052266988;
  v66 = v35;
  v67 = 1050253722;
  v68 = v34;
  v69 = 1092616192;
  v70 = v33;
  v71 = 1049582633;
  v72 = v24;
  v73 = 1050253722;
  v74 = v32;
  v75 = 1054951342;
  v76 = v25;
  v77 = 1052602532;
  v78 = v31;
  v79 = 1049582633;
  v80 = v30;
  v81 = 1092616192;
  v82 = v5;
  v83 = 1092616192;
  v84 = v6;
  v85 = 1092616192;
  for (m = 40; m != -2; m -= 2)

  v44 = v27;
  LODWORD(v45) = 1048576000;

  objc_autoreleasePoolPop(context);
}

void sub_2294EEAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{

  _Unwind_Resume(a1);
}

void sub_2294EEC50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294EEE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL float3FromNSArray(void *a1, _OWORD *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  __int128 v10;
  int v11;
  int v13;
  __int128 v14;

  v3 = a1;
  v4 = objc_msgSend(v3, "count");
  if (v4 == 3)
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "floatValue");
    *(_QWORD *)&v14 = v6;
    objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "floatValue");
    v13 = v8;
    objc_msgSend(v3, "objectAtIndexedSubscript:", 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "floatValue");
    v10 = v14;
    DWORD1(v10) = v13;
    DWORD2(v10) = v11;
    *a2 = v10;

  }
  return v4 == 3;
}

void sub_2294EEF78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2294EF0E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_2294EF248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294EF3A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t box3dFromNSArray(NSArray *a1, box3d *a2)
{
  NSArray *v3;
  uint64_t v4;
  void *v5;
  char isKindOfClass;
  void *v7;
  BOOL v8;
  uint64_t v9;

  v3 = a1;
  if (-[NSArray count](v3, "count") == 8)
  {
    v4 = 0;
    while (1)
    {
      -[NSArray objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) == 0)
        break;
      -[NSArray objectAtIndexedSubscript:](v3, "objectAtIndexedSubscript:", v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = float3FromNSArray(v7, a2);

      if (!v8)
        break;
      ++v4;
      a2 = (box3d *)((char *)a2 + 16);
      if (v4 == 8)
      {
        v9 = 1;
        goto LABEL_8;
      }
    }
  }
  v9 = 0;
LABEL_8:

  return v9;
}

void sub_2294EF47C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294EF66C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294EF798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294EFC24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t isValidType(NSString *a1)
{
  NSString *v1;
  unsigned __int8 v2;
  uint64_t v3;

  v1 = a1;
  {
    objc_msgSend(MEMORY[0x24BDBCF20], "setWithObjects:", CFSTR("Cabinet"), CFSTR("Refrigerator"), CFSTR("Shelf"), CFSTR("Stove"), CFSTR("Bed"), CFSTR("Sink"), CFSTR("Washer"), CFSTR("Toilet"), CFSTR("Bathtub"), CFSTR("Oven"), CFSTR("Dishwasher"), CFSTR("Table"), CFSTR("Sofa"), CFSTR("Chair"), CFSTR("Fireplace"), CFSTR("Stool"), CFSTR("Screen"),
      CFSTR("Door"),
      CFSTR("Window"),
      CFSTR("Cuboid"),
      CFSTR("Stairs"),
      CFSTR("BuildInCabinet"),
      CFSTR("Storage"),
      0);
    isValidType(NSString *)::validTypes = objc_claimAutoreleasedReturnValue();
  }
  v3 = objc_msgSend((id)isValidType(NSString *)::validTypes, "containsObject:", v1);

  return v3;
}

void sub_2294EFE30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t isValidODSourceType(NSString *a1)
{
  NSString *v1;
  unsigned __int8 v2;
  uint64_t v3;

  v1 = a1;
  {
    objc_msgSend(MEMORY[0x24BDBCF20], "setWithObjects:", CFSTR("unknown"), CFSTR("online"), CFSTR("offline"), 0);
    isValidODSourceType(NSString *)::validTypes = objc_claimAutoreleasedReturnValue();
  }
  v3 = objc_msgSend((id)isValidODSourceType(NSString *)::validTypes, "containsObject:", v1);

  return v3;
}

void sub_2294EFEFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294F00AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2294F0130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2294F0240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2294F044C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2294F0754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2294F08D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_2294F0E90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id objc_cast<NSString>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_2294F0F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id objc_cast<NSNumber>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_2294F0FE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id objc_cast<NSArray<NSNumber *>>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_2294F1048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id objc_cast<NSArray<NSArray*<NSNumber *>>>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_2294F10AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void float4FromNSArray(void *a1, _OWORD *a2)
{
  void *v3;
  unsigned int v4;
  void *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  void *v9;
  __int128 v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  id v15;

  v15 = a1;
  if (objc_msgSend(v15, "count") == 4)
  {
    objc_msgSend(v15, "objectAtIndexedSubscript:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "floatValue");
    v14 = v4;
    objc_msgSend(v15, "objectAtIndexedSubscript:", 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "floatValue");
    v13 = v6;
    objc_msgSend(v15, "objectAtIndexedSubscript:", 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "floatValue");
    v12 = v8;
    objc_msgSend(v15, "objectAtIndexedSubscript:", 3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "floatValue");
    *(_QWORD *)&v10 = __PAIR64__(v13, v14);
    *((_QWORD *)&v10 + 1) = __PAIR64__(v11, v12);
    *a2 = v10;

  }
}

void sub_2294F119C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

id objc_cast<NSMutableDictionary>(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = v1;
  else
    v2 = 0;

  return v2;
}

void sub_2294F1234(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294F1398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294F1410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t isValidGroupType(NSString *a1)
{
  NSString *v1;
  unsigned __int8 v2;
  uint64_t v3;

  v1 = a1;
  {
    objc_msgSend(MEMORY[0x24BDBCF20], "setWithObjects:", CFSTR("ChairGroup"), CFSTR("LShapeGroup"), CFSTR("UShapeGroup"), CFSTR("FloorPlan"), 0);
    isValidGroupType(NSString *)::validTypes = objc_claimAutoreleasedReturnValue();
  }
  v3 = objc_msgSend((id)isValidGroupType(NSString *)::validTypes, "containsObject:", v1);

  return v3;
}

void sub_2294F14E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294F1678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_2294F1754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2294F194C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2294F1A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294F1BC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294F1C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2294F1CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id float3ToNSArray(__n128 a1)
{
  void *v1;
  double v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v1;
  HIDWORD(v2) = a1.n128_u32[1];
  LODWORD(v2) = a1.n128_u32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v3;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2] = v4;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v8, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

{
  void *v1;
  double v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v1;
  HIDWORD(v2) = a1.n128_u32[1];
  LODWORD(v2) = a1.n128_u32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v3;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2] = v4;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v8, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

{
  void *v1;
  double v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v1;
  HIDWORD(v2) = a1.n128_u32[1];
  LODWORD(v2) = a1.n128_u32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v3;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2] = v4;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v8, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

{
  void *v1;
  double v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v1;
  HIDWORD(v2) = a1.n128_u32[1];
  LODWORD(v2) = a1.n128_u32[1];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8[1] = v3;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8[2] = v4;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v8, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_2294F1FD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void SampleSemantics(uint64_t *a1@<X0>, void *a2@<X1>, __CVBuffer *a3@<X2>, __CVBuffer *a4@<X3>, _QWORD *a5@<X8>, simd_float4 a6@<Q0>, simd_float4 a7@<Q1>, simd_float4 a8@<Q2>, simd_float4 a9@<Q3>)
{
  id v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int64_t Width;
  int64_t Height;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float32x4_t v38;
  float32x2_t v39;
  unsigned int v40;
  float v41;
  char v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  simd_float4x4 v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  void *__p[3];
  void *v52[3];
  simd_float4x4 pixelBuffer;
  simd_float4x4 v54;
  simd_float4x4 v55;

  v46.columns[2] = a8;
  v46.columns[3] = a9;
  v46.columns[0] = a6;
  v46.columns[1] = a7;
  v13 = a2;
  objc_msgSend(v13, "intrinsics");
  v44 = v15;
  v45 = v14;
  v43 = v16;
  v55 = __invert_f4(v46);
  v17 = 0;
  pixelBuffer = v46;
  do
  {
    v54.columns[v17] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v55.columns[0], COERCE_FLOAT(*(_OWORD *)&pixelBuffer.columns[v17])), (float32x4_t)v55.columns[1], *(float32x2_t *)pixelBuffer.columns[v17].f32, 1), (float32x4_t)v55.columns[2], (float32x4_t)pixelBuffer.columns[v17], 2), (float32x4_t)v55.columns[3], (float32x4_t)pixelBuffer.columns[v17], 3);
    ++v17;
  }
  while (v17 != 4);
  v18 = 0;
  v20 = v44;
  v19 = v45;
  v19.i32[3] = 0;
  v20.i32[3] = 0;
  v21 = v43;
  v21.i32[3] = 0;
  pixelBuffer = v54;
  do
  {
    v54.columns[v18] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(_OWORD *)&pixelBuffer.columns[v18])), v20, *(float32x2_t *)pixelBuffer.columns[v18].f32, 1), v21, (float32x4_t)pixelBuffer.columns[v18], 2), (float32x4_t)xmmword_229560490, (float32x4_t)pixelBuffer.columns[v18], 3);
    ++v18;
  }
  while (v18 != 4);
  v49 = (float32x4_t)v54.columns[1];
  v50 = (float32x4_t)v54.columns[0];
  v47 = (float32x4_t)v54.columns[3];
  v48 = (float32x4_t)v54.columns[2];
  Width = CVPixelBufferGetWidth(a3);
  Height = CVPixelBufferGetHeight(a3);
  objc_msgSend(v13, "imageResolution");
  v25 = v24;
  objc_msgSend(v13, "imageResolution");
  v27 = v26;
  PixelBufferSampler<unsigned char>::PixelBufferSampler((uint64_t)&v54, a3);
  PixelBufferSampler<unsigned char>::PixelBufferSampler((uint64_t)&pixelBuffer, a4);
  v29 = *a1;
  v28 = a1[1];
  v30 = (v28 - *a1) >> 4;
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEEC2Em(v52, v30);
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEEC2Em(__p, v30);
  if (v28 != v29)
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    if (v30 <= 1)
      v37 = 1;
    else
      v37 = v30;
    do
    {
      v38 = vaddq_f32(v47, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, COERCE_FLOAT(*(_OWORD *)(*a1 + v33))), v49, *(float32x2_t *)(*a1 + v33), 1), v48, *(float32x4_t *)(*a1 + v33), 2));
      v39 = (float32x2_t)vdivq_f32(v38, (float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2)).u64[0];
      v35 = (double)Width / v25;
      v40 = vcvtms_s32_f32(v35 * v39.f32[0]);
      v41 = 0.0;
      v42 = 0;
      if ((v40 & 0x80000000) == 0)
      {
        v36 = (double)Height / v27;
        LODWORD(v31) = vcvtms_s32_f32(vmuls_lane_f32(v36, v39, 1));
        if (v54.columns[0].i32[2] > (int)v40 && (v31 & 0x80000000) == 0 && v54.columns[0].i32[3] > (int)v31)
          v42 = *(_BYTE *)(v54.columns[1].i64[1] + v54.columns[1].i64[0] * v31 + v40);
        if (pixelBuffer.columns[0].i32[2] > (int)v40
          && (v31 & 0x80000000) == 0
          && pixelBuffer.columns[0].i32[3] > (int)v31)
        {
          v31 = pixelBuffer.columns[1].i64[1] + pixelBuffer.columns[1].i64[0] * v31;
          v41 = *(float *)(v31 + 4 * v40);
        }
      }
      *((_BYTE *)v52[0] + v32) = v42;
      v39.i32[0] = *(_DWORD *)((char *)v52[0] + v32);
      *(_DWORD *)((char *)v52[0] + v32) = vmovn_s16((int16x8_t)vmovl_u8((uint8x8_t)v39).u16[0]).u32[0];
      *((_WORD *)__p[0] + v32) = (int)(float)(v41 * 100.0);
      *((int8x8_t *)__p[0] + v34) = vand_s8(*(int8x8_t *)((char *)__p[0] + 8 * v34), (int8x8_t)0xFFFF00000000FFFFLL);
      *((_WORD *)__p[0] + v32 + 3) = (int)(float)((float)(1.0 - v41) * 100.0);
      ++v34;
      v33 += 16;
      v32 += 4;
      --v37;
    }
    while (v37);
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIDv4_hNS_9allocatorIS4_EEEENS3_IDv4_tNS5_IS8_EEEEEEC2B8ne180100IJLm0ELm1EEJS7_SA_EJEJEJRS7_RSA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(a5, (uint64_t)v52, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)pixelBuffer.columns[0].i64[0], 1uLL);
  CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v54.columns[0].i64[0], 1uLL);

}

void sub_2294F2348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,CVPixelBufferRef a29)
{
  void *v29;
  uint64_t v30;

  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  PixelBufferSampler<float>::~PixelBufferSampler(&a29);
  PixelBufferSampler<unsigned char>::~PixelBufferSampler((CVPixelBufferRef *)(v30 - 160));

  _Unwind_Resume(a1);
}

void WorldPCFromARFrameSceneCamera(_OUFrame *a1@<X0>, float a2@<S0>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x2_t *v11;
  float32x2_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  _OUFrame *v17;

  v17 = a1;
  -[_OUFrame GetSceneCameraPoseInVisionWorld](v17, "GetSceneCameraPoseInVisionWorld");
  v15 = v8;
  v16 = v7;
  v13 = v10;
  v14 = v9;
  CameraPCFromARFrameSceneCamera(v17, a3, (void **)a4, a2);
  v11 = *(float32x2_t **)a4;
  v12 = *(float32x2_t **)(a4 + 8);
  if (*(float32x2_t **)a4 != v12)
  {
    do
    {
      *(float32x4_t *)v11->f32 = vaddq_f32(v13, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)v11->f32)), v15, *v11, 1), v14, *(float32x4_t *)v11->f32, 2));
      v11 += 2;
    }
    while (v11 != v12);
  }

}

void sub_2294F2450(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void CameraPCFromARFrameSceneCamera(void *a1@<X0>, unsigned int a2@<W1>, void **a3@<X8>, float a4@<S0>)
{
  id v7;
  __CVBuffer *v8;
  __CVBuffer *v9;
  void *v10;
  int64_t Width;
  size_t v12;
  size_t v13;
  uint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  float v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float32x4_t v29;
  unint64_t v30;
  float32x4_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  float32x4_t *v38;
  char *v39;
  char *v40;
  float32x4_t v41;
  CVPixelBufferRef *v42;
  NSObject *v43;
  id v44;
  int64_t Height;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  CVPixelBufferRef pixelBuffer;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  simd_float4x4 v56;
  simd_float4x4 v57;

  v7 = a1;
  v8 = (__CVBuffer *)objc_msgSend(v7, "sceneDepthBuffer");
  v9 = (__CVBuffer *)objc_msgSend(v7, "sceneDepthConfidenceBuffer");
  objc_msgSend(v7, "sceneCamera");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  Width = CVPixelBufferGetWidth(v8);
  Height = CVPixelBufferGetHeight(v8);
  if (Width && Height && (!v9 || (v12 = CVPixelBufferGetWidth(v9), v13 = CVPixelBufferGetHeight(v9), v12) && v13))
  {
    objc_msgSend(v10, "intrinsics");
    v56.columns[0].i32[3] = 0;
    v56.columns[1].i32[3] = 0;
    v56.columns[2].i32[3] = 0;
    v56.columns[3] = (simd_float4)xmmword_229560490;
    v57 = __invert_f4(v56);
    v49 = (float32x4_t)v57.columns[1];
    v50 = (float32x4_t)v57.columns[0];
    v47 = (float32x4_t)v57.columns[3];
    v48 = (float32x4_t)v57.columns[2];
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(a3, Height / a2 * (Width / a2));
    PixelBufferSampler<unsigned char>::PixelBufferSampler((uint64_t)&pixelBuffer, v8);
    if (v9)
    {
      v14 = operator new();
      PixelBufferSampler<unsigned char>::PixelBufferSampler(v14, v9);
    }
    else
    {
      v14 = 0;
    }
    objc_msgSend(v10, "imageResolution");
    v16 = v15;
    v44 = v7;
    objc_msgSend(v10, "imageResolution");
    v17 = 0;
    v18 = v16 / (double)Width;
    *(float *)&v19 = v19 / (double)Height;
    v20 = *(float *)&v19;
    v21 = v18;
    do
    {
      v22 = 0;
      v23 = (int)(float)v17;
      do
      {
        v25 = (int)(float)v22;
        if (!v14)
          goto LABEL_19;
        v26 = 0.0;
        if ((v25 & 0x80000000) == 0
          && *(_DWORD *)(v14 + 8) > v25
          && (v23 & 0x80000000) == 0
          && *(_DWORD *)(v14 + 12) > (int)v23)
        {
          v26 = *(float *)(*(_QWORD *)(v14 + 24) + *(_QWORD *)(v14 + 16) * v23 + 4 * v25);
        }
        if (v26 >= a4)
        {
LABEL_19:
          v27 = 0.0;
          if ((v25 & 0x80000000) == 0 && v52 > v25 && (v23 & 0x80000000) == 0 && v53 > (int)v23)
            v27 = *(float *)(v55 + v54 * v23 + 4 * v25);
          v28 = ((double)v22 + 0.5) * v21;
          v24 = ((double)v17 + 0.5) * v20;
          v29 = vaddq_f32(v47, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v50, v27 * v28), v49, v27 * v24), v48, v27));
          v31 = (float32x4_t *)a3[1];
          v30 = (unint64_t)a3[2];
          if ((unint64_t)v31 >= v30)
          {
            v46 = v29;
            v33 = ((char *)v31 - (_BYTE *)*a3) >> 4;
            if ((unint64_t)(v33 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v34 = v30 - (_QWORD)*a3;
            v35 = v34 >> 3;
            if (v34 >> 3 <= (unint64_t)(v33 + 1))
              v35 = v33 + 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
              v36 = 0xFFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
              v37 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v36);
            else
              v37 = 0;
            v38 = (float32x4_t *)&v37[16 * v33];
            *v38 = v46;
            v32 = (char *)&v38[1];
            v40 = (char *)*a3;
            v39 = (char *)a3[1];
            if (v39 != *a3)
            {
              do
              {
                v41 = *((float32x4_t *)v39 - 1);
                v39 -= 16;
                v38[-1] = v41;
                --v38;
              }
              while (v39 != v40);
              v39 = (char *)*a3;
            }
            *a3 = v38;
            a3[1] = v32;
            a3[2] = &v37[16 * v36];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *v31 = v29;
            v32 = (char *)&v31[1];
          }
          a3[1] = v32;
        }
        v22 += a2;
      }
      while (v22 < Width);
      v17 += a2;
    }
    while (v17 < Height);
    if (v14)
    {
      v42 = PixelBufferSampler<float>::~PixelBufferSampler((CVPixelBufferRef *)v14);
      MEMORY[0x22E2CAAE8](v42, 0x1070C4075EB0837);
    }
    v7 = v44;
    if (a3[1] == *a3)
    {
      _OULoggingGetOSLogForCategoryObjectUnderstanding();
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        CameraPCFromARFrameSceneCamera(v43);

    }
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }

}

void sub_2294F2828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  va_list va;

  va_start(va, a16);
  MEMORY[0x22E2CAAE8](v19, 0x1070C4075EB0837);
  PixelBufferSampler<float>::~PixelBufferSampler((CVPixelBufferRef *)va);
  v21 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v18 + 8) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorIDv4_hNS_9allocatorIS4_EEEENS3_IDv4_tNS5_IS8_EEEEEEC2B8ne180100IJLm0ELm1EEJS7_SA_EJEJEJRS7_RSA_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  return a1;
}

void sub_2294F2920(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2294F2998(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2294F2A10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PixelBufferSampler<unsigned char>::PixelBufferSampler(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  *(_QWORD *)a1 = pixelBuffer;
  *(_DWORD *)(a1 + 8) = CVPixelBufferGetWidth(pixelBuffer);
  *(_DWORD *)(a1 + 12) = CVPixelBufferGetHeight(*(CVPixelBufferRef *)a1);
  *(_QWORD *)(a1 + 16) = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)a1);
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, 1uLL);
  *(_QWORD *)(a1 + 24) = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)a1);
  return a1;
}

CVPixelBufferRef *PixelBufferSampler<unsigned char>::~PixelBufferSampler(CVPixelBufferRef *a1)
{
  CVPixelBufferUnlockBaseAddress(*a1, 1uLL);
  return a1;
}

CVPixelBufferRef *PixelBufferSampler<float>::~PixelBufferSampler(CVPixelBufferRef *a1)
{
  CVPixelBufferUnlockBaseAddress(*a1, 1uLL);
  return a1;
}

void sub_2294F2B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294F2CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2294F2E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2294F2FF8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  if (v2)

  _Unwind_Resume(a1);
}

void sub_2294F311C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2294F3334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void float3FromNSArray(void *a1, _OWORD *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  int v6;
  void *v7;
  __int128 v8;
  int v9;
  int v10;
  __int128 v11;
  id v12;

  v12 = a1;
  if (objc_msgSend(v12, "count") == 3)
  {
    objc_msgSend(v12, "objectAtIndexedSubscript:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "floatValue");
    *(_QWORD *)&v11 = v4;
    objc_msgSend(v12, "objectAtIndexedSubscript:", 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "floatValue");
    v10 = v6;
    objc_msgSend(v12, "objectAtIndexedSubscript:", 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "floatValue");
    v8 = v11;
    DWORD1(v8) = v10;
    DWORD2(v8) = v9;
    *a2 = v8;

  }
}

void sub_2294F3458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

_DWORD *utils::RotateInPlace<int,void>(_DWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t i;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t m;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t j;
  int v28;
  uint64_t k;
  unint64_t v30;
  unint64_t v31;
  int v32;
  std::logic_error *exception;

  if (a2 != a3 * a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unexpected input size.");
    goto LABEL_40;
  }
  if (!a3)
    return result;
  if (a4 <= 179)
  {
    if (!a4)
      return result;
    if (a4 == 90)
    {
      v4 = 0;
      v5 = 4 * a3;
      v6 = result;
      do
      {
        v7 = 0;
        v8 = v6;
        do
        {
          v9 = v6[v7];
          v6[v7] = *v8;
          *v8 = v9;
          ++v7;
          v8 = (_DWORD *)((char *)v8 + v5);
        }
        while (v4 + v7 < a3);
        ++v4;
        v6 += a3 + 1;
      }
      while (v4 != a3);
      for (i = 0; i != a3; ++i)
      {
        if (a3 != 1)
        {
          v11 = 0;
          v12 = a3 - 1;
          do
          {
            v13 = result[v11];
            result[v11] = result[v12];
            result[v12] = v13;
            ++v11;
            --v12;
          }
          while (v11 < v12);
        }
        result = (_DWORD *)((char *)result + v5);
      }
      return result;
    }
    goto LABEL_41;
  }
  if (a4 == 180)
  {
    v24 = (a3 - 1) * a3;
    if (v24 >= 1)
    {
      v25 = &result[v24];
      v26 = result;
      do
      {
        for (j = 0; j != a3; ++j)
        {
          v28 = v26[j];
          v26[j] = v25[j];
          v25[j] = v28;
        }
        v26 += a3;
        v25 -= a3;
      }
      while (v26 < v25);
    }
    for (k = 0; k != a3; ++k)
    {
      if (a3 != 1)
      {
        v30 = 0;
        v31 = a3 - 1;
        do
        {
          v32 = result[v30];
          result[v30] = result[v31];
          result[v31] = v32;
          ++v30;
          --v31;
        }
        while (v30 < v31);
      }
      result += a3;
    }
  }
  else
  {
    if (a4 != 270)
    {
LABEL_41:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "In-place rotation only support rotation angle 0, 90, 180, or 270 degrees.");
LABEL_40:
      __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v14 = 0;
    v15 = 4 * a3;
    v16 = result;
    do
    {
      if (a3 != 1)
      {
        v17 = 0;
        v18 = a3 - 1;
        do
        {
          v19 = v16[v17];
          v16[v17] = v16[v18];
          v16[v18] = v19;
          ++v17;
          --v18;
        }
        while (v17 < v18);
      }
      ++v14;
      v16 = (_DWORD *)((char *)v16 + v15);
    }
    while (v14 != a3);
    for (m = 0; m != a3; ++m)
    {
      v21 = 0;
      v22 = result;
      do
      {
        v23 = result[v21];
        result[v21] = *v22;
        *v22 = v23;
        ++v21;
        v22 = (_DWORD *)((char *)v22 + v15);
      }
      while (m + v21 < a3);
      result = (_DWORD *)((char *)result + v15 + 4);
    }
  }
  return result;
}

void sub_2294F3880(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *utils::RotateInPlace<float,void>(_DWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t i;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t m;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t j;
  int v28;
  uint64_t k;
  unint64_t v30;
  unint64_t v31;
  int v32;
  std::logic_error *exception;

  if (a2 != a3 * a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unexpected input size.");
    goto LABEL_40;
  }
  if (!a3)
    return result;
  if (a4 <= 179)
  {
    if (!a4)
      return result;
    if (a4 == 90)
    {
      v4 = 0;
      v5 = 4 * a3;
      v6 = result;
      do
      {
        v7 = 0;
        v8 = v6;
        do
        {
          v9 = v6[v7];
          v6[v7] = *v8;
          *v8 = v9;
          ++v7;
          v8 = (_DWORD *)((char *)v8 + v5);
        }
        while (v4 + v7 < a3);
        ++v4;
        v6 += a3 + 1;
      }
      while (v4 != a3);
      for (i = 0; i != a3; ++i)
      {
        if (a3 != 1)
        {
          v11 = 0;
          v12 = a3 - 1;
          do
          {
            v13 = result[v11];
            result[v11] = result[v12];
            result[v12] = v13;
            ++v11;
            --v12;
          }
          while (v11 < v12);
        }
        result = (_DWORD *)((char *)result + v5);
      }
      return result;
    }
    goto LABEL_41;
  }
  if (a4 == 180)
  {
    v24 = (a3 - 1) * a3;
    if (v24 >= 1)
    {
      v25 = &result[v24];
      v26 = result;
      do
      {
        for (j = 0; j != a3; ++j)
        {
          v28 = v26[j];
          v26[j] = v25[j];
          v25[j] = v28;
        }
        v26 += a3;
        v25 -= a3;
      }
      while (v26 < v25);
    }
    for (k = 0; k != a3; ++k)
    {
      if (a3 != 1)
      {
        v30 = 0;
        v31 = a3 - 1;
        do
        {
          v32 = result[v30];
          result[v30] = result[v31];
          result[v31] = v32;
          ++v30;
          --v31;
        }
        while (v30 < v31);
      }
      result += a3;
    }
  }
  else
  {
    if (a4 != 270)
    {
LABEL_41:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "In-place rotation only support rotation angle 0, 90, 180, or 270 degrees.");
LABEL_40:
      __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v14 = 0;
    v15 = 4 * a3;
    v16 = result;
    do
    {
      if (a3 != 1)
      {
        v17 = 0;
        v18 = a3 - 1;
        do
        {
          v19 = v16[v17];
          v16[v17] = v16[v18];
          v16[v18] = v19;
          ++v17;
          --v18;
        }
        while (v17 < v18);
      }
      ++v14;
      v16 = (_DWORD *)((char *)v16 + v15);
    }
    while (v14 != a3);
    for (m = 0; m != a3; ++m)
    {
      v21 = 0;
      v22 = result;
      do
      {
        v23 = result[v21];
        result[v21] = *v22;
        *v22 = v23;
        ++v21;
        v22 = (_DWORD *)((char *)v22 + v15);
      }
      while (m + v21 < a3);
      result = (_DWORD *)((char *)result + v15 + 4);
    }
  }
  return result;
}

void sub_2294F3AEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *utils::RotateInPlace<half,void>(_WORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  _WORD *v8;
  __int16 v9;
  uint64_t i;
  unint64_t v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;
  uint64_t m;
  uint64_t v21;
  _WORD *v22;
  __int16 v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t j;
  __int16 v28;
  uint64_t k;
  unint64_t v30;
  unint64_t v31;
  __int16 v32;
  std::logic_error *exception;

  if (a2 != a3 * a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unexpected input size.");
    goto LABEL_40;
  }
  if (!a3)
    return result;
  if (a4 <= 179)
  {
    if (!a4)
      return result;
    if (a4 == 90)
    {
      v4 = 0;
      v5 = 2 * a3;
      v6 = result;
      do
      {
        v7 = 0;
        v8 = v6;
        do
        {
          v9 = v6[v7];
          v6[v7] = *v8;
          *v8 = v9;
          ++v7;
          v8 = (_WORD *)((char *)v8 + v5);
        }
        while (v4 + v7 < a3);
        ++v4;
        v6 += a3 + 1;
      }
      while (v4 != a3);
      for (i = 0; i != a3; ++i)
      {
        if (a3 != 1)
        {
          v11 = 0;
          v12 = a3 - 1;
          do
          {
            v13 = result[v11];
            result[v11] = result[v12];
            result[v12] = v13;
            ++v11;
            --v12;
          }
          while (v11 < v12);
        }
        result = (_WORD *)((char *)result + v5);
      }
      return result;
    }
    goto LABEL_41;
  }
  if (a4 == 180)
  {
    v24 = (a3 - 1) * a3;
    if (v24 >= 1)
    {
      v25 = &result[v24];
      v26 = result;
      do
      {
        for (j = 0; j != a3; ++j)
        {
          v28 = v26[j];
          v26[j] = v25[j];
          v25[j] = v28;
        }
        v26 += a3;
        v25 -= a3;
      }
      while (v26 < v25);
    }
    for (k = 0; k != a3; ++k)
    {
      if (a3 != 1)
      {
        v30 = 0;
        v31 = a3 - 1;
        do
        {
          v32 = result[v30];
          result[v30] = result[v31];
          result[v31] = v32;
          ++v30;
          --v31;
        }
        while (v30 < v31);
      }
      result += a3;
    }
  }
  else
  {
    if (a4 != 270)
    {
LABEL_41:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "In-place rotation only support rotation angle 0, 90, 180, or 270 degrees.");
LABEL_40:
      __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v14 = 0;
    v15 = 2 * a3;
    v16 = result;
    do
    {
      if (a3 != 1)
      {
        v17 = 0;
        v18 = a3 - 1;
        do
        {
          v19 = v16[v17];
          v16[v17] = v16[v18];
          v16[v18] = v19;
          ++v17;
          --v18;
        }
        while (v17 < v18);
      }
      ++v14;
      v16 = (_WORD *)((char *)v16 + v15);
    }
    while (v14 != a3);
    for (m = 0; m != a3; ++m)
    {
      v21 = 0;
      v22 = result;
      do
      {
        v23 = result[v21];
        result[v21] = *v22;
        *v22 = v23;
        ++v21;
        v22 = (_WORD *)((char *)v22 + v15);
      }
      while (m + v21 < a3);
      result = (_WORD *)((char *)result + v15 + 2);
    }
  }
  return result;
}

{
  return __ZN5utils13RotateInPlaceIDhvEEvNSt3__14spanIT_Lm18446744073709551615EEEmm(result, a2, a3, a4);
}

void sub_2294F3D58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void utils::Resample(utils *this@<X0>, unint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  if ((unint64_t)this <= a2)
  {
    std::vector<unsigned long>::vector(a3, (unint64_t)this);
    v20 = *a3;
    v21 = a3[1];
    if (*a3 != v21)
    {
      v22 = 0;
      do
        *v20++ = v22++;
      while (v20 != v21);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    std::vector<unsigned long>::reserve(a3, a2);
    if ((int)this >= 1)
    {
      v6 = 0;
      v7 = -1;
      do
      {
        v8 = (int)(float)((float)((float)a2 / (float)(unint64_t)this) * (float)(int)v6);
        if (v7 < v8)
        {
          v10 = a3[1];
          v9 = (unint64_t)a3[2];
          if ((unint64_t)v10 >= v9)
          {
            v12 = *a3;
            v13 = ((char *)v10 - (_BYTE *)*a3) >> 3;
            v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v15 = v9 - (_QWORD)v12;
            if (v15 >> 2 > v14)
              v14 = v15 >> 2;
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v14;
            if (v16)
            {
              v17 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v16);
              v12 = *a3;
              v10 = a3[1];
            }
            else
            {
              v17 = 0;
            }
            v18 = &v17[8 * v13];
            *(_QWORD *)v18 = v6;
            v11 = v18 + 8;
            while (v10 != v12)
            {
              v19 = *--v10;
              *((_QWORD *)v18 - 1) = v19;
              v18 -= 8;
            }
            *a3 = v18;
            a3[1] = v11;
            a3[2] = &v17[8 * v16];
            if (v12)
              operator delete(v12);
          }
          else
          {
            *v10 = v6;
            v11 = v10 + 1;
          }
          a3[1] = v11;
        }
        ++v6;
        v7 = v8;
      }
      while (v6 != this);
    }
  }
}

void sub_2294F3EF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::vector<int>>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void sub_2294F40BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2294F464C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_2294F4CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_2294F5454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{

  _Unwind_Resume(a1);
}

void sub_2294F5814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v18;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void CountPointsNearPlane(void *a1@<X0>, float32x4_t **a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  id v9;
  id v10;
  void *v11;
  float32x4_t *v12;
  __int32 *v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  unint64_t v42;
  float v43;
  BOOL v44;
  int32x2_t v46;
  unsigned __int32 v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  id v51;
  uint8x8_t v52;
  int v53;
  _DWORD *v54;
  int v55;
  uint64_t v56;
  double v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x8_t v62;
  int v63[3];

  v9 = a1;
  v10 = a3;
  v11 = v10;
  if ((char *)a2[1] - (char *)*a2 == 64)
  {
    v12 = (float32x4_t *)objc_msgSend(v10, "points");
    v13 = (__int32 *)objc_msgSend(v11, "semanticLabels");
    v54 = (_DWORD *)a4;
    v14 = objc_msgSend(v11, "semanticVotes");
    v55 = 0;
    v56 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = **a2;
    v19 = (*a2)[1];
    v20 = vsubq_f32(v19, v18);
    v21 = (int32x4_t)vmulq_f32(v20, v20);
    v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
    v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
    v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
    v24 = vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
    v25 = (*a2)[3];
    v26 = vsubq_f32(v25, v18);
    v27 = (int32x4_t)vmulq_f32(v26, v26);
    v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
    v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
    v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
    v60 = vmulq_n_f32(v26, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]);
    v61 = v24;
    v30 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), (int8x16_t)v60, 0xCuLL), vnegq_f32(v24)), v60, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL));
    v59 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
    v31 = vsubq_f32(v18, v19);
    v32 = vmulq_f32(v31, v31);
    v33 = (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0])* 0.5)+ a5;
    v34 = vsubq_f32(v18, v25);
    v35 = vmulq_f32(v34, v34);
    v36 = (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0])* 0.5)+ a5;
    v35.i64[0] = 0x3F0000003F000000;
    v35.i64[1] = 0x3F0000003F000000;
    v58 = vmulq_f32(vaddq_f32(v18, (*a2)[2]), v35);
    while (1)
    {
      if (v17 >= objc_msgSend(v11, "count"))
      {
        *v54 = v55;
        v54[1] = v56;
        v54[2] = v15;
        v54[3] = v16;
        v54[4] = HIDWORD(v56);
        goto LABEL_38;
      }
      v37 = vsubq_f32(*v12, v58);
      v38 = vmulq_f32(v61, v37);
      v39 = vmulq_f32(v60, v37);
      v40 = vmulq_f32(v59, v37);
      v41 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]);
      v42 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).u64[0];
      v43 = fabsf(*(float *)&v42);
      v44 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]) > v33|| v41 > v36;
      if (!v44 && v43 <= a5)
        break;
LABEL_34:
      ++v17;
      ++v12;
      ++v13;
    }
    v46 = *(int32x2_t *)(v14 + 8 * v17);
    v47 = vmax_u16((uint16x4_t)v46.u32[0], (uint16x4_t)vzip2_s32(v46, 0)).u32[0];
    if (HIWORD(v47) > (unsigned __int16)v47)
      LOWORD(v47) = HIWORD(v47);
    v57 = *(double *)&v42;
    if (v46.u16[0] == (unsigned __int16)v47)
    {
      v48 = 0;
    }
    else if (v46.u16[1] == (unsigned __int16)v47)
    {
      v48 = 1;
    }
    else if (v46.u16[2] == (unsigned __int16)v47)
    {
      v48 = 2;
    }
    else
    {
      if (v46.u16[3] != (unsigned __int16)v47)
      {
        v49 = *v13;
        goto LABEL_22;
      }
      v48 = 3;
    }
    v46.i32[0] = *v13;
    v62 = vzip1_s8((int8x8_t)v46, (int8x8_t)v46);
    v49 = *(unsigned __int8 *)((unint64_t)&v62 | (2 * v48));
LABEL_22:
    v63[0] = v49;
    v50 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(kSemanticsODLabelMap, v63);
    if (!v50)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v51 = (id)v50[3];
    if (*(float *)&v57 >= 0.0)
    {
      if (objc_msgSend(v9, "isEqualToString:", v51, v57))
      {
        ++v55;
        *(_OWORD *)(objc_msgSend(v11, "colors") + 16 * v17) = xmmword_229560920;
      }
      ++v15;
    }
    else
    {
      if (objc_msgSend(v9, "isEqualToString:", v51, v57))
      {
        LODWORD(v56) = v56 + 1;
        *(_OWORD *)(objc_msgSend(v11, "colors") + 16 * v17) = xmmword_2295604A0;
      }
      else
      {
        v52.i32[0] = *v13;
        v53 = HIDWORD(v56);
        if ((vmovl_u8(v52).u8[0] - 1) < 3u)
          v53 = HIDWORD(v56) + 1;
        HIDWORD(v56) = v53;
      }
      ++v16;
    }

    goto LABEL_34;
  }
  *(_QWORD *)a4 = -1;
  *(_QWORD *)(a4 + 8) = -1;
  *(_DWORD *)(a4 + 16) = -1;
LABEL_38:

}

void sub_2294F5C6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2294F5D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void OUTLINED_FUNCTION_0_3(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void _GLOBAL__sub_I_OUObjectCompleteness_mm()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t i;
  uint64_t j;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  void *v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  void *context;
  __CFString *v41;
  __CFString *v42;
  __CFString *v43;
  __CFString *v44;
  __CFString *v45;
  __CFString *v46;
  __CFString *v47;
  __CFString *v48;
  __CFString *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t *v52;
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __CFString *v69;
  _QWORD *v70;
  __CFString *v71;
  _QWORD *v72;
  __CFString *v73;
  _QWORD *v74;
  __CFString *v75;
  int v76;
  __CFString *v77;
  int v78;
  __CFString *v79;
  int v80;
  __CFString *v81;
  int v82;
  __CFString *v83;
  int v84;
  __CFString *v85;
  int v86;
  id v87;
  int v88;
  __CFString *v89;
  int v90;
  __CFString *v91;
  int v92;
  __CFString *v93;
  int v94;
  __CFString *v95;
  int v96;
  __CFString *v97;
  int v98;
  id v99;
  int v100;
  __CFString *v101;
  int v102;
  id v103;
  int v104;
  __CFString *v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x22E2CB070]();
  v50 = 3212836864;
  RW_VW = xmmword_2295604A0;
  unk_2540C9E40 = xmmword_2295604D0;
  *((_QWORD *)&v51 + 1) = 0x3F80000000000000;
  xmmword_2540C9E50 = xmmword_2295604B0;
  unk_2540C9E60 = xmmword_229560490;
  *(simd_float4x4 *)VW_RW = __invert_f4(*(simd_float4x4 *)_PromotedConst_0);
  RC_VC = xmmword_2295604A0;
  unk_2540C9D40 = xmmword_2295604E0;
  xmmword_2540C9D50 = xmmword_2295604D0;
  unk_2540C9D60 = xmmword_229560490;
  *(simd_float4x4 *)VC_RC = __invert_f4(*(simd_float4x4 *)_PromotedConst_22);
  ARKit_VW_RW = xmmword_2295604E0;
  *(_OWORD *)algn_2540C95D0 = xmmword_2295604C0;
  xmmword_2540C95E0 = xmmword_2295604F0;
  unk_2540C95F0 = xmmword_229560490;
  LODWORD(v54) = 0;
  *((_QWORD *)&v54 + 1) = CFSTR("Unknown");
  LODWORD(v55) = 1;
  *((_QWORD *)&v55 + 1) = *((id *)&v54 + 1);
  LODWORD(v56) = 2;
  *((_QWORD *)&v56 + 1) = *((id *)&v55 + 1);
  LODWORD(v57) = 3;
  *((_QWORD *)&v57 + 1) = *((id *)&v56 + 1);
  LODWORD(v58) = 4;
  *((_QWORD *)&v58 + 1) = *((id *)&v57 + 1);
  LODWORD(v59) = 5;
  *((_QWORD *)&v59 + 1) = *((id *)&v58 + 1);
  LODWORD(v60) = 6;
  *(_QWORD *)&v51 = CFSTR("Door");
  *((_QWORD *)&v60 + 1) = v51;
  LODWORD(v61) = 7;
  v49 = CFSTR("Window");
  *((_QWORD *)&v61 + 1) = v49;
  LODWORD(v62) = 8;
  *((_QWORD *)&v62 + 1) = *((id *)&v59 + 1);
  LODWORD(v63) = 9;
  v47 = CFSTR("Fireplace");
  *((_QWORD *)&v63 + 1) = v47;
  LODWORD(v64) = 10;
  *((_QWORD *)&v64 + 1) = *((id *)&v62 + 1);
  LODWORD(v65) = 11;
  *((_QWORD *)&v65 + 1) = *((id *)&v64 + 1);
  LODWORD(v66) = 12;
  v48 = CFSTR("Stairs");
  *((_QWORD *)&v66 + 1) = v48;
  LODWORD(v67) = 13;
  v43 = CFSTR("Bed");
  *((_QWORD *)&v67 + 1) = v43;
  LODWORD(v68) = 14;
  v69 = CFSTR("Cabinet");
  LODWORD(v70) = 15;
  v46 = CFSTR("Chair");
  v71 = v46;
  LODWORD(v72) = 16;
  v73 = v69;
  LODWORD(v74) = 17;
  v75 = v73;
  v76 = 18;
  v45 = CFSTR("Sofa");
  v77 = v45;
  v78 = 19;
  v44 = CFSTR("Table");
  v79 = v44;
  v80 = 20;
  v42 = CFSTR("Toilet");
  v81 = v42;
  v82 = 21;
  v0 = CFSTR("Sink");
  v83 = v0;
  v84 = 22;
  v41 = CFSTR("Bathtub");
  v85 = v41;
  v86 = 23;
  v87 = *((id *)&v65 + 1);
  v88 = 24;
  v1 = CFSTR("Refrigerator");
  v89 = v1;
  v90 = 25;
  v2 = CFSTR("Stove");
  v91 = v2;
  v92 = 26;
  v3 = CFSTR("Washer");
  v93 = v3;
  v94 = 27;
  v4 = CFSTR("Oven");
  v95 = v4;
  v96 = 28;
  v5 = CFSTR("Dishwasher");
  v97 = v5;
  v98 = 29;
  v99 = v87;
  v100 = 30;
  v6 = v75;
  v101 = v6;
  v102 = 31;
  v103 = v99;
  v104 = 32;
  v7 = CFSTR("Screen");
  v105 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)kSemanticsODLabelMap, (int *)&v54, 33);
  for (i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], kSemanticsODLabelMap, &dword_2294C8000);
  v64 = xmmword_229560A80;
  v65 = unk_229560A90;
  v66 = xmmword_229560AA0;
  v67 = unk_229560AB0;
  v60 = xmmword_229560A40;
  v61 = unk_229560A50;
  v62 = xmmword_229560A60;
  v63 = unk_229560A70;
  v56 = xmmword_229560A00;
  v57 = unk_229560A10;
  v58 = xmmword_229560A20;
  v59 = unk_229560A30;
  v54 = xmmword_2295609E0;
  v55 = unk_2295609F0;
  v68 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v54, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_2294C8000);
  LODWORD(v54) = 0;
  *((_QWORD *)&v54 + 1) = v6;
  LODWORD(v55) = 1;
  *((_QWORD *)&v55 + 1) = v1;
  LODWORD(v56) = 2;
  *((_QWORD *)&v56 + 1) = CFSTR("Shelf");
  LODWORD(v57) = 3;
  *((_QWORD *)&v57 + 1) = v2;
  LODWORD(v58) = 4;
  *((_QWORD *)&v58 + 1) = v43;
  LODWORD(v59) = 5;
  *((_QWORD *)&v59 + 1) = v0;
  LODWORD(v60) = 6;
  *((_QWORD *)&v60 + 1) = v3;
  LODWORD(v61) = 7;
  *((_QWORD *)&v61 + 1) = v42;
  LODWORD(v62) = 8;
  *((_QWORD *)&v62 + 1) = v41;
  LODWORD(v63) = 9;
  *((_QWORD *)&v63 + 1) = v4;
  LODWORD(v64) = 10;
  *((_QWORD *)&v64 + 1) = v5;
  LODWORD(v65) = 11;
  *((_QWORD *)&v65 + 1) = v47;
  LODWORD(v66) = 12;
  *((_QWORD *)&v66 + 1) = CFSTR("Stool");
  LODWORD(v67) = 13;
  *((_QWORD *)&v67 + 1) = v46;
  LODWORD(v68) = 14;
  v69 = v44;
  LODWORD(v70) = 15;
  v71 = v7;
  LODWORD(v72) = 16;
  v73 = v45;
  LODWORD(v74) = 17;
  v75 = v48;
  v76 = 18;
  v77 = v49;
  v78 = 19;
  v79 = (__CFString *)(id)v51;
  v80 = 20;
  v81 = CFSTR("BuildInCabinet");
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v54, 21);
  for (j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_2294C8000);
  v10 = operator new(0x10uLL);
  *(_QWORD *)&v54 = v10;
  v51 = xmmword_229560930;
  *v10 = xmmword_229560930;
  *((_QWORD *)&v54 + 1) = v10 + 1;
  v55 = (unint64_t)(v10 + 1);
  v56 = 0uLL;
  v11 = operator new(0x10uLL);
  *((_QWORD *)&v55 + 1) = v11;
  *v11 = xmmword_229560940;
  *(_QWORD *)&v56 = v11 + 1;
  *((_QWORD *)&v56 + 1) = v11 + 1;
  v57 = 0uLL;
  *(_QWORD *)&v58 = 0;
  v12 = operator new(0x10uLL);
  *(_QWORD *)&v57 = v12;
  *v12 = xmmword_229560950;
  *((_QWORD *)&v57 + 1) = v12 + 1;
  v58 = (unint64_t)(v12 + 1);
  v59 = 0uLL;
  v13 = operator new(0x10uLL);
  *((_QWORD *)&v58 + 1) = v13;
  *v13 = xmmword_229560960;
  *(_QWORD *)&v59 = v13 + 1;
  *((_QWORD *)&v59 + 1) = v13 + 1;
  v60 = 0uLL;
  *(_QWORD *)&v61 = 0;
  v14 = operator new(0x10uLL);
  *(_QWORD *)&v60 = v14;
  *v14 = xmmword_229560970;
  *((_QWORD *)&v60 + 1) = v14 + 1;
  v61 = (unint64_t)(v14 + 1);
  v62 = 0uLL;
  v15 = operator new(0x10uLL);
  *((_QWORD *)&v61 + 1) = v15;
  *v15 = xmmword_229560980;
  *(_QWORD *)&v62 = v15 + 1;
  *((_QWORD *)&v62 + 1) = v15 + 1;
  qword_2540C9860 = 0;
  qword_2540C9868 = 0;
  kFaceCornerIndicesMap = 0;
  v52 = &kFaceCornerIndicesMap;
  v53 = 0;
  kFaceCornerIndicesMap = (uint64_t)operator new(0x90uLL);
  qword_2540C9860 = kFaceCornerIndicesMap;
  qword_2540C9868 = kFaceCornerIndicesMap + 144;
  v16 = 0;
  qword_2540C9860 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&qword_2540C9868, (uint64_t)&v54, (uint64_t)&v63, (_QWORD *)kFaceCornerIndicesMap);
  do
  {
    v17 = *(void **)((char *)&v61 + v16 + 8);
    if (v17)
    {
      *(_QWORD *)((char *)&v62 + v16) = v17;
      operator delete(v17);
    }
    v16 -= 24;
  }
  while (v16 != -144);
  __cxa_atexit((void (*)(void *))std::vector<std::vector<int>>::~vector[abi:ne180100], &kFaceCornerIndicesMap, &dword_2294C8000);
  v18 = operator new(0x10uLL);
  *(_QWORD *)&v54 = v18;
  *v18 = v51;
  *((_QWORD *)&v54 + 1) = v18 + 1;
  v55 = (unint64_t)(v18 + 1);
  v56 = 0uLL;
  v19 = operator new(0x10uLL);
  *((_QWORD *)&v55 + 1) = v19;
  *v19 = xmmword_229560990;
  *(_QWORD *)&v56 = v19 + 1;
  *((_QWORD *)&v56 + 1) = v19 + 1;
  v57 = 0uLL;
  *(_QWORD *)&v58 = 0;
  v20 = operator new(0x10uLL);
  *(_QWORD *)&v57 = v20;
  *v20 = xmmword_2295609A0;
  *((_QWORD *)&v57 + 1) = v20 + 1;
  v58 = (unint64_t)(v20 + 1);
  v59 = 0uLL;
  v21 = operator new(0x10uLL);
  *((_QWORD *)&v58 + 1) = v21;
  *v21 = xmmword_2295609B0;
  *(_QWORD *)&v59 = v21 + 1;
  *((_QWORD *)&v59 + 1) = v21 + 1;
  v60 = 0uLL;
  *(_QWORD *)&v61 = 0;
  v22 = operator new(0x10uLL);
  *(_QWORD *)&v60 = v22;
  *v22 = xmmword_2295609C0;
  *((_QWORD *)&v60 + 1) = v22 + 1;
  v61 = (unint64_t)(v22 + 1);
  v62 = 0uLL;
  v23 = operator new(0x10uLL);
  *((_QWORD *)&v61 + 1) = v23;
  *v23 = xmmword_2295609D0;
  *(_QWORD *)&v62 = v23 + 1;
  *((_QWORD *)&v62 + 1) = v23 + 1;
  qword_2540C96A8 = 0;
  qword_2540C96B0 = 0;
  kFaceEdgeIndicesMap = 0;
  v52 = &kFaceEdgeIndicesMap;
  v53 = 0;
  kFaceEdgeIndicesMap = (uint64_t)operator new(0x90uLL);
  qword_2540C96A8 = kFaceEdgeIndicesMap;
  qword_2540C96B0 = kFaceEdgeIndicesMap + 144;
  v24 = 0;
  qword_2540C96A8 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&qword_2540C96B0, (uint64_t)&v54, (uint64_t)&v63, (_QWORD *)kFaceEdgeIndicesMap);
  do
  {
    v25 = *(void **)((char *)&v61 + v24 + 8);
    if (v25)
    {
      *(_QWORD *)((char *)&v62 + v24) = v25;
      operator delete(v25);
    }
    v24 -= 24;
  }
  while (v24 != -144);
  __cxa_atexit((void (*)(void *))std::vector<std::vector<int>>::~vector[abi:ne180100], &kFaceEdgeIndicesMap, &dword_2294C8000);
  v26 = operator new(8uLL);
  *(_QWORD *)&v54 = v26;
  *v26 = 0x100000000;
  *((_QWORD *)&v54 + 1) = v26 + 1;
  v55 = (unint64_t)(v26 + 1);
  v56 = 0uLL;
  v27 = operator new(8uLL);
  *((_QWORD *)&v55 + 1) = v27;
  *v27 = 0x200000000;
  *(_QWORD *)&v56 = v27 + 1;
  *((_QWORD *)&v56 + 1) = v27 + 1;
  v57 = 0uLL;
  *(_QWORD *)&v58 = 0;
  v28 = operator new(8uLL);
  *(_QWORD *)&v57 = v28;
  *v28 = 0x300000000;
  *((_QWORD *)&v57 + 1) = v28 + 1;
  v58 = (unint64_t)(v28 + 1);
  v59 = 0uLL;
  v29 = operator new(8uLL);
  *((_QWORD *)&v58 + 1) = v29;
  *v29 = 0x400000000;
  *(_QWORD *)&v59 = v29 + 1;
  *((_QWORD *)&v59 + 1) = v29 + 1;
  v60 = 0uLL;
  *(_QWORD *)&v61 = 0;
  v30 = operator new(8uLL);
  *(_QWORD *)&v60 = v30;
  *v30 = 0x100000004;
  *((_QWORD *)&v60 + 1) = v30 + 1;
  v61 = (unint64_t)(v30 + 1);
  v62 = 0uLL;
  v31 = operator new(8uLL);
  *((_QWORD *)&v61 + 1) = v31;
  *v31 = 0x200000001;
  *(_QWORD *)&v62 = v31 + 1;
  *((_QWORD *)&v62 + 1) = v31 + 1;
  v63 = 0uLL;
  *(_QWORD *)&v64 = 0;
  v32 = operator new(8uLL);
  *(_QWORD *)&v63 = v32;
  *v32 = 0x300000002;
  *((_QWORD *)&v63 + 1) = v32 + 1;
  v64 = (unint64_t)(v32 + 1);
  v65 = 0uLL;
  v33 = operator new(8uLL);
  *((_QWORD *)&v64 + 1) = v33;
  *v33 = 0x400000003;
  *(_QWORD *)&v65 = v33 + 1;
  *((_QWORD *)&v65 + 1) = v33 + 1;
  v66 = 0uLL;
  *(_QWORD *)&v67 = 0;
  v34 = operator new(8uLL);
  *(_QWORD *)&v66 = v34;
  *v34 = 0x500000001;
  *((_QWORD *)&v66 + 1) = v34 + 1;
  v67 = (unint64_t)(v34 + 1);
  v68 = 0;
  v69 = 0;
  v35 = operator new(8uLL);
  *((_QWORD *)&v67 + 1) = v35;
  *v35 = 0x500000002;
  v68 = (uint64_t)(v35 + 1);
  v69 = (__CFString *)(v35 + 1);
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v36 = operator new(8uLL);
  v70 = v36;
  *v36 = 0x500000003;
  v71 = (__CFString *)(v36 + 1);
  v72 = v36 + 1;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v37 = operator new(8uLL);
  v73 = (__CFString *)v37;
  *v37 = 0x500000004;
  v74 = v37 + 1;
  v75 = (__CFString *)(v37 + 1);
  qword_2540C9690 = 0;
  qword_2540C9698 = 0;
  kEdgeFaceIndicesMap = 0;
  v52 = &kEdgeFaceIndicesMap;
  v53 = 0;
  kEdgeFaceIndicesMap = (uint64_t)operator new(0x120uLL);
  qword_2540C9690 = kEdgeFaceIndicesMap;
  qword_2540C9698 = kEdgeFaceIndicesMap + 288;
  qword_2540C9690 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&qword_2540C9698, (uint64_t)&v54, (uint64_t)&v76, (_QWORD *)kEdgeFaceIndicesMap);
  v38 = 36;
  do
  {
    v39 = *(uint64_t **)((char *)&v51 + v38 * 8 + 8);
    if (v39)
    {
      (&v52)[v38] = v39;
      operator delete(v39);
    }
    v38 -= 3;
  }
  while (v38 * 8);
  __cxa_atexit((void (*)(void *))std::vector<std::vector<int>>::~vector[abi:ne180100], &kEdgeFaceIndicesMap, &dword_2294C8000);
  objc_autoreleasePoolPop(context);
}

void sub_2294F6A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v29;
  void **v30;

  qword_2540C9690 = v27;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a25);
  v29 = 36;
  while (1)
  {
    v30 = *(void ***)(&a27 + v29 * 8 - 24);
    if (v30)
    {
      (&a25)[v29] = v30;
      operator delete(v30);
    }
    v29 -= 3;
    if (!(v29 * 8))
      _Unwind_Resume(a1);
  }
}

uint64_t OUEspressoInference::OUEspressoInference(uint64_t a1, void *a2, __int128 *a3, int a4, int a5)
{
  id v9;
  id v10;
  __int128 v11;
  std::logic_error *exception;
  std::string v14;

  v9 = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_QWORD *)a1 = &off_24F242FF0;
  v10 = v9;
  *(_QWORD *)(a1 + 88) = v10;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 96) = v11;
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__init_with_size[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*>((_QWORD *)(a1 + 120), *((_QWORD *)a3 + 3), *((_QWORD *)a3 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3)) >> 4));
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__init_with_size[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*>((_QWORD *)(a1 + 144), *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6)) >> 4));
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_BYTE *)(a1 + 288) = 0;
  if (!*(_QWORD *)(a1 + 88))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": invalid bundle.", (const void **)"OUEspressoInference", (void **)&v14.__r_.__value_.__l.__data_);
    std::logic_error::logic_error(exception, &v14);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  OUEspressoInference::LoadModel((OUEspressoInference *)a1);
  OUEspressoInference::TryBuildEspressoPlan((OUEspressoInference *)a1);

  return a1;
}

void sub_2294F6E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  id *v15;
  void *v16;

  OUDnnInferenceInterface::~OUDnnInferenceInterface((OUDnnInferenceInterface *)v15);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, v6);
  }
  v10 = (char *)a3 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

void OUEspressoInference::LoadModel(OUEspressoInference *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  int v7;
  std::logic_error *v8;
  id v9;
  std::logic_error *exception;
  void *v11;
  std::string v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)((char *)this + 96);
  if (*((char *)this + 119) < 0)
    v2 = (_QWORD *)*v2;
  v3 = (void *)*((_QWORD *)this + 11);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pathForResource:ofType:", v4, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LODWORD(v12.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOD] Loading network path: %@", (uint8_t *)&v12, 0xCu);
  }

  if (!v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": unable to locate the network files.", (const void **)"OUEspressoInference", (void **)&v12.__r_.__value_.__l.__data_);
    std::logic_error::logic_error(exception, &v12);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  *((_QWORD *)this + 21) = espresso_create_context();
  v7 = *((_DWORD *)this + 50);
  if (v7 && v7 != 10007)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(v12.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OUEspressoInference";
      WORD2(v12.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v7;
      _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[%s] Untested engine type: %d.", (uint8_t *)&v12, 0x12u);
    }

    v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v8, (const char *)&unk_22956FEC2);
    v8->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v8, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  *((_QWORD *)this + 22) = espresso_create_plan();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LODWORD(v12.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OUEspressoInference";
    _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[%s] Adding network to plan. If the program crashes at this line, it is likely b/c the network requires too much memory.", (uint8_t *)&v12, 0xCu);
  }

  v9 = objc_retainAutorelease(v5);
  objc_msgSend(v9, "UTF8String");
  if (espresso_plan_add_network())
  {
    v11 = __cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": failed to add network.", (const void **)"OUEspressoInference", (void **)&v12.__r_.__value_.__l.__data_);
    MEMORY[0x22E2CA89C](v11, &v12);
    __cxa_throw(v11, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  OUEspressoInference::InitializeIOBuffers((uint64_t)this, (std::string::size_type *)this + 15, 1);
  OUEspressoInference::InitializeIOBuffers((uint64_t)this, (std::string::size_type *)this + 18, 0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LOWORD(v12.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOD] Done loading model.", (uint8_t *)&v12, 2u);
  }

}

void sub_2294F72F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  __cxa_free_exception(v15);

  _Unwind_Resume(a1);
}

void OUEspressoInference::TryBuildEspressoPlan(OUEspressoInference *this)
{
  void *exception;
  OUEspressoInference *v3;

  if (espresso_plan_get_phase() != 1)
  {
    if (espresso_plan_build())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x22E2CA890](exception, "[3DOD] failed to build espresso plan.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    v3 = this;
    OUEspressoInference::TryBuildEspressoPlan(void)::$_0::operator()((uint64_t)&v3, (uint64_t)this + 208);
    OUEspressoInference::TryBuildEspressoPlan(void)::$_0::operator()((uint64_t)&v3, (uint64_t)this + 248);
  }
}

void sub_2294F73E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void OUEspressoInference::ModelInfo::~ModelInfo(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void OUEspressoInference::~OUEspressoInference(OUEspressoInference *this)
{
  void **v2;

  *(_QWORD *)this = &off_24F242FF0;
  if (*((_QWORD *)this + 22))
    espresso_plan_destroy();
  if (*((_QWORD *)this + 21))
    espresso_context_destroy();
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 248);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 208);
  v2 = (void **)((char *)this + 144);
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 120);
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));

  OUDnnInferenceInterface::~OUDnnInferenceInterface(this);
}

{
  OUEspressoInference::~OUEspressoInference(this);
  JUMPOUT(0x22E2CAAE8);
}

uint64_t OUEspressoInference::Infer(OUEspressoInference *this)
{
  _QWORD *v2;
  void *exception;
  __n128 v4;
  _QWORD *v5;
  void *v6;
  __n128 v7;
  uint64_t result;
  void *v9;
  __n128 v10;
  std::string v11;
  std::string v12;

  OUEspressoInference::TryReshapeNetwork(this);
  OUEspressoInference::TryBuildEspressoPlan(this);
  v2 = (_QWORD *)((char *)this + 224);
  while (1)
  {
    v2 = (_QWORD *)*v2;
    if (!v2)
      break;
    if (espresso_network_bind_buffer())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v4 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to bind input buffer.", &v11, &v12);
      MEMORY[0x22E2CA89C](exception, &v12, v4);
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
  }
  v5 = (_QWORD *)((char *)this + 264);
  while (1)
  {
    v5 = (_QWORD *)*v5;
    if (!v5)
      break;
    if (espresso_network_bind_buffer())
    {
      v6 = __cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v7 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to bind output buffer.", &v11, &v12);
      MEMORY[0x22E2CA89C](v6, &v12, v7);
      __cxa_throw(v6, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
  }
  result = espresso_plan_execute_sync();
  if ((_DWORD)result)
  {
    v9 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v10 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to run inference.", &v11, &v12);
    MEMORY[0x22E2CA89C](v9, &v12, v10);
    __cxa_throw(v9, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_2294F7704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

void OUEspressoInference::TryReshapeNetwork(OUEspressoInference *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t v12;
  void *exception;
  std::vector<int>::value_type __x;
  std::vector<int> v15;
  _QWORD v16[3];
  void *v17[3];

  if (!*((_BYTE *)this + 288))
    return;
  v2 = *((_QWORD *)this + 4);
  v16[0] = 0;
  std::vector<char const*>::vector(v17, (int)v2, v16);
  __x = -1;
  std::vector<int>::vector(&v15, (int)v2, &__x);
  std::vector<std::vector<int>>::vector(v16, 5uLL, (uint64_t)&v15);
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
  __x = -1;
  std::vector<int>::vector(&v15, (int)v2, &__x);
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  if (v3)
  {
    v4 = 0;
    do
    {
      v5 = v3 + 2;
      if (*((char *)v3 + 39) < 0)
        v5 = (_QWORD *)*v5;
      *((_QWORD *)v17[0] + v4) = v5;
      v7 = v3[12];
      v6 = v3[13];
      if (v6 == v7)
      {
        v8 = 0;
      }
      else
      {
        v8 = 0;
        v9 = (uint64_t *)v16[0];
        do
        {
          v11 = *(_DWORD *)(v6 - 4);
          v6 -= 4;
          v10 = v11;
          ++v8;
          v12 = *v9;
          v9 += 3;
          *(_DWORD *)(v12 + 4 * v4) = v10;
        }
        while (v6 != v7);
      }
      v15.__begin_[v4++] = v8;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  if (espresso_plan_get_phase() && espresso_plan_build_clean())
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E2CA890](exception, "[3DOD] failed to clean espresso plan.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (espresso_network_change_input_blob_shapes_seq_rank())
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E2CA890](exception, "[3DOD] failed to reshape network.");
    goto LABEL_24;
  }
  *((_BYTE *)this + 288) = 0;
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
  v15.__begin_ = (std::vector<int>::pointer)v16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
}

void sub_2294F7950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, char *a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;
  void *v18;

  __cxa_free_exception(v15);
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a15;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v18 = *(void **)(v16 - 56);
  if (v18)
  {
    *(_QWORD *)(v16 - 48) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void OUEspressoInference::InitializeIOBuffers(uint64_t a1, std::string::size_type *a2, int a3)
{
  unsigned int (*v3)(_QWORD, _QWORD, std::string::size_type);
  _QWORD *v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  std::vector<int>::size_type v13;
  std::vector<int>::size_type v14;
  _QWORD *v15;
  std::vector<int>::pointer begin;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  std::vector<int> *v21;
  char *v22;
  unsigned __int8 *v23;
  void *exception;
  std::logic_error *v25;
  std::vector<int> __p;
  void *v27;
  void *v28;
  uint64_t v29;
  std::vector<int>::size_type __n;
  void *v31;
  _BYTE *v32;
  std::vector<int>::value_type __x[2];

  if (a3)
    v3 = (unsigned int (*)(_QWORD, _QWORD, std::string::size_type))MEMORY[0x24BE2FC10];
  else
    v3 = (unsigned int (*)(_QWORD, _QWORD, std::string::size_type))MEMORY[0x24BE2FC18];
  if (a3)
    v4 = (_QWORD *)(a1 + 8);
  else
    v4 = (_QWORD *)(a1 + 48);
  if (a3)
    v5 = a1 + 208;
  else
    v5 = a1 + 248;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      v10 = v6;
      if (*(char *)(v6 + 23) < 0)
        v10 = *(_QWORD *)v6;
      if (v3(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), v10))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": fail to declare network IO.", (const void **)"OUEspressoInference", &v31);
        MEMORY[0x22E2CA89C](exception, &v31);
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      __n = 0;
      v27 = 0;
      std::vector<unsigned long>::vector(&v31, 0xAuLL, &v27);
      espresso_network_query_blob_shape();
      std::vector<unsigned long>::resize((uint64_t)&v31, __n);
      v27 = 0;
      v28 = 0;
      v29 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v27, v31, (uint64_t)v32, (v32 - (_BYTE *)v31) >> 3);
      __x[0] = -1;
      std::vector<int>::vector(&__p, __n, __x);
      v11 = *(_QWORD *)(v6 + 24);
      v12 = *(_QWORD *)(v6 + 32);
      v13 = (v12 - v11) >> 2;
      if (v13 == __n)
      {
        if (v12 != v11)
        {
          v14 = 0;
          v15 = v27;
          begin = __p.__begin_;
          do
          {
            v17 = *(unsigned int *)(v11 + 4 * v14);
            if ((int)v17 >= 1)
            {
              v15[v14] = v17;
              begin[v14] = v17;
              *(_BYTE *)(a1 + 288) = 1;
              v13 = __n;
            }
            ++v14;
          }
          while (v14 < v13);
        }
      }
      else if (v12 != v11)
      {
        v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v25, "[3DOD] capacity and shape must have the same size.");
        goto LABEL_47;
      }
      v18 = *(_DWORD *)(a1 + 204);
      if (v18 <= 131079)
      {
        if (v18 == 65552)
        {
          v19 = 1278226536;
        }
        else
        {
          if (v18 != 65568)
          {
LABEL_46:
            v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v25, "Invalid espresso storage types.");
LABEL_47:
            v25->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(v25, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
          }
          v19 = 1278226534;
        }
      }
      else
      {
        v19 = 1278226488;
        if (v18 != 131080)
        {
          if (v18 == 131104)
          {
            v19 = 1111970369;
          }
          else if (v18 != 262152)
          {
            goto LABEL_46;
          }
        }
      }
      OUDnnInferenceInterface::CreateIOBuffer(a1, v6, (char **)&v27, (_anonymous_namespace_ *)v19, a3);
      v20 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(v4, (unsigned __int8 *)v6);
      v21 = (std::vector<int> *)v20;
      if (!v20)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v22 = (char *)(v20 + 96);
      if (&v21[4] != &__p)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v22, (char *)__p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
      *(_QWORD *)__x = v6;
      v23 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)v6, (uint64_t)&std::piecewise_construct, (__int128 **)__x);
      *((_QWORD *)v23 + 5) = v21[2].__end_;
      *((_DWORD *)v23 + 50) = *(_DWORD *)(a1 + 204);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v6 += 48;
    }
    while (v6 != v7);
  }
}

void sub_2294F7DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  __cxa_free_exception(v21);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void OUEspressoInference::SetInputBufferShape(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  NSObject *v16;
  std::logic_error *exception;
  uint8_t v18[16];

  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_2294C8000, v16, OS_LOG_TYPE_INFO, "[3DOD] empty shape, skipping.", v18, 2u);
    }

  }
  else
  {
    v5 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((_QWORD *)(a1 + 8), a2);
    if (!v5)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v6 = *(char **)a3;
    v7 = *(_QWORD *)(a3 + 8);
    v8 = (v7 - *(_QWORD *)a3) >> 2;
    v9 = (int *)*((_QWORD *)v5 + 9);
    if (v8 != (uint64_t)(*((_QWORD *)v5 + 10) - (_QWORD)v9) >> 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] shape must has the same size as the blob shape's size.");
      goto LABEL_18;
    }
    if ((char *)v7 != v6)
    {
      if (v8 <= 1)
        v10 = 1;
      else
        v10 = (v7 - *(_QWORD *)a3) >> 2;
      v11 = *(char **)a3;
      while (1)
      {
        v13 = *(_DWORD *)v11;
        v11 += 4;
        v12 = v13;
        v14 = *v9;
        v9 += 2;
        if (v12 > v14)
          break;
        if (!--v10)
          goto LABEL_11;
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] shape exceeds capacity.");
LABEL_18:
      __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
LABEL_11:
    v15 = (char *)(v5 + 96);
    if (v15 != (char *)a3)
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v15, v6, v7, v8);
    *(_BYTE *)(a1 + 288) = 1;
  }
}

void sub_2294F7F9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void OUEspressoInference::TryBuildEspressoPlan(void)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  void *exception;
  uint64_t v4;
  void *__p[3];
  unint64_t v6;

  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    v6 = 0;
    v4 = 0;
    std::vector<unsigned long>::vector(__p, 0xAuLL, &v4);
    espresso_network_query_blob_shape();
    std::vector<unsigned long>::resize((uint64_t)__p, v6);
    if (espresso_buffer_pack_tensor_shape())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x22E2CA890](exception, "[3DOD] fail to pack buffer.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_2294F80C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__init_with_size[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>,OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2294F8154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>,OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*,OUEspressoInference::ModelInfo::BlobInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,OUEspressoInference::ModelInfo::BlobInfo&,OUEspressoInference::ModelInfo::BlobInfo*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2294F8264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,OUEspressoInference::ModelInfo::BlobInfo&,OUEspressoInference::ModelInfo::BlobInfo*>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this[1].__r_.__value_.__r.__words, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  return this;
}

void sub_2294F82F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2294F84A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2294F8628(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<char const*>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2294F86A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<int>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_2294F875C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_2294F8A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

double std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0xD0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_QWORD *)v8 + 25) = 0;
  result = 0.0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2294F8B18(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t OUEspressoV2Inference::OUEspressoV2Inference(uint64_t a1, void *a2, __int128 *a3, int a4)
{
  id v7;
  id v8;
  void *v9;
  __int128 v10;
  id v11;
  uint64_t last_error_message;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  std::logic_error *exception;
  std::string v18;
  std::string buf;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_QWORD *)a1 = &off_24F243040;
  v8 = v7;
  v9 = v8;
  *(_QWORD *)(a1 + 88) = v8;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    v11 = *(id *)(a1 + 88);
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 96) = v10;
    v11 = v8;
  }
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 136) = a4;
  *(_OWORD *)(a1 + 160) = 0u;
  if (!v11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] invalid bundle.", &v18, &buf);
    std::logic_error::logic_error(exception, &buf);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (a4)
  {
    if (e5rt_e5_compiler_create())
    {
      last_error_message = e5rt_get_last_error_message();
      _OULoggingGetOSLogForCategoryObjectUnderstanding();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = last_error_message;
        _os_log_impl(&dword_2294C8000, v13, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
      }

    }
    if (e5rt_e5_compiler_options_create())
    {
      v14 = e5rt_get_last_error_message();
      _OULoggingGetOSLogForCategoryObjectUnderstanding();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v14;
        _os_log_impl(&dword_2294C8000, v15, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
      }

    }
  }
  OUEspressoV2Inference::LoadModel((OUEspressoV2Inference *)a1);

  return a1;
}

void sub_2294F8D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  void **v23;
  void *v24;
  int v25;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v21 + 119) < 0)
        operator delete(*v23);

      OUDnnInferenceInterface::~OUDnnInferenceInterface((OUDnnInferenceInterface *)v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void OUEspressoV2Inference::LoadModel(OUEspressoV2Inference *this)
{
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t last_error_message;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  void *v13;
  std::string buf;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 96;
  if (*((char *)this + 119) < 0)
    v2 = (char *)*((_QWORD *)this + 12);
  v3 = (void *)*((_QWORD *)this + 11);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pathForResource:ofType:", v4, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OUEspressoV2Inference";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v5;
    _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[%s] Loading network path: %@", (uint8_t *)&buf, 0x16u);
  }

  if (!v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": unable to locate the network files.", (const void **)"OUEspressoV2Inference", (void **)&buf.__r_.__value_.__l.__data_);
    std::logic_error::logic_error(exception, &buf);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (*((_BYTE *)this + 136))
  {
    objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
    if (e5rt_e5_compiler_compile())
    {
      last_error_message = e5rt_get_last_error_message();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = last_error_message;
        _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
      }

    }
    if (e5rt_program_library_get_num_functions())
    {
      v8 = e5rt_get_last_error_message();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v8;
        _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
      }

    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      OUEspressoV2Inference::LoadModel(0, v6);

    v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E2CA890](v13, &unk_22956FEC2);
    __cxa_throw(v13, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
  if (e5rt_execution_stream_operation_create_precompiled_compute_operation())
  {
    v9 = e5rt_get_last_error_message();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
      _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
    }

  }
  OUEspressoV2Inference::InitializeIOBuffers(this, 1);
  OUEspressoV2Inference::InitializeIOBuffers(this, 0);
  if (e5rt_execution_stream_create())
  {
    v10 = e5rt_get_last_error_message();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
      _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
    }

  }
  if (e5rt_execution_stream_encode_operation())
  {
    v11 = e5rt_get_last_error_message();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
      _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
    }

  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"OUEspressoV2Inference";
    _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[%s] Done loading model.", (uint8_t *)&buf, 0xCu);
  }

}

void sub_2294F94A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  __cxa_free_exception(v19);

  _Unwind_Resume(a1);
}

void OUEspressoV2Inference::~OUEspressoV2Inference(OUEspressoV2Inference *this)
{
  uint64_t last_error_message;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24F243040;
  if (e5rt_execution_stream_operation_release())
  {
    last_error_message = e5rt_get_last_error_message();
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v6 = 136315138;
      v7 = last_error_message;
      _os_log_impl(&dword_2294C8000, v3, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&v6, 0xCu);
    }

  }
  if (e5rt_execution_stream_release())
  {
    v4 = e5rt_get_last_error_message();
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = 136315138;
      v7 = v4;
      _os_log_impl(&dword_2294C8000, v5, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&v6, 0xCu);
    }

  }
  if (*((_QWORD *)this + 21))
    e5rt_program_function_release();
  if (*((_QWORD *)this + 20))
    e5rt_program_library_release();
  if (*((_QWORD *)this + 19))
    e5rt_e5_compiler_options_release();
  if (*((_QWORD *)this + 18))
    e5rt_e5_compiler_release();
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));

  OUDnnInferenceInterface::~OUDnnInferenceInterface(this);
}

{
  OUEspressoV2Inference::~OUEspressoV2Inference(this);
  JUMPOUT(0x22E2CAAE8);
}

void sub_2294F96E8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void OUEspressoV2Inference::Infer(OUEspressoV2Inference *this)
{
  uint64_t last_error_message;
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (e5rt_execution_stream_execute_sync())
  {
    last_error_message = e5rt_get_last_error_message();
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = 136315138;
      v4 = last_error_message;
      _os_log_impl(&dword_2294C8000, v2, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&v3, 0xCu);
    }

  }
}

void OUEspressoV2Inference::InitializeIOBuffers(OUEspressoV2Inference *this, int a2)
{
  uint64_t (*v4)(void);
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v8)(void);
  uint64_t (*v9)(void);
  char **v10;
  char **v11;
  char *v12;
  uint64_t last_error_message;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  unsigned __int8 *v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  __n128 v41;
  std::logic_error *exception;
  uint64_t (*v43)(void);
  void *__p[2];
  char v45;
  int v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  std::vector<int>::size_type __n;
  uint64_t v55;
  uint64_t v56;
  char **v57;
  char **v58;
  unint64_t v59;
  std::string __x;
  std::string buf;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v4 = MEMORY[0x24BE2F850];
  v6 = (_QWORD *)((char *)this + 128);
  v5 = *((_QWORD *)this + 16);
  if (a2)
    v4 = MEMORY[0x24BE2F840];
  v43 = v4;
  if (a2)
    v7 = v6 - 15;
  else
    v7 = v6 - 10;
  v8 = MEMORY[0x24BE2F808];
  if (a2)
  {
    v8 = MEMORY[0x24BE2F800];
    v9 = MEMORY[0x24BE2F7F0];
  }
  else
  {
    v9 = MEMORY[0x24BE2F820];
  }
  v59 = 0;
  ((void (*)(uint64_t, unint64_t *))v8)(v5, &v59);
  std::vector<char const*>::vector(&v57, v59);
  ((void (*)(_QWORD, unint64_t, char **))v9)(*v6, v59, v57);
  v10 = v57;
  v11 = v58;
  if (v57 != v58)
  {
    do
    {
      v12 = *v10;
      v55 = 0;
      v56 = 0;
      if (((unsigned int (*)(_QWORD, char *, uint64_t *))v43)(*((_QWORD *)this + 16), v12, &v56))
      {
        last_error_message = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = last_error_message;
          _os_log_impl(&dword_2294C8000, v14, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      if (e5rt_io_port_retain_tensor_desc())
      {
        v15 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v15;
          _os_log_impl(&dword_2294C8000, v16, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      v53 = 0;
      __n = 0;
      if (e5rt_tensor_desc_get_shape())
      {
        v17 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v17;
          _os_log_impl(&dword_2294C8000, v18, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      v51 = 0;
      v52 = 0;
      if (e5rt_tensor_desc_get_strides())
      {
        v19 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v19;
          _os_log_impl(&dword_2294C8000, v20, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      v48 = 0;
      v49 = 0;
      v50 = 0;
      std::vector<unsigned long>::__insert_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((uint64_t)&v48, 0, v53, &v53[8 * __n], __n);
      *(v49 - 1) = *(_QWORD *)(v51 + 8 * v52 - 16) / *(uint64_t *)(v51 + 8 * v52 - 8);
      v47 = 0;
      v46 = 0;
      if (e5rt_tensor_desc_retain_dtype())
      {
        v21 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v21;
          _os_log_impl(&dword_2294C8000, v22, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      if (e5rt_tensor_desc_dtype_get_component_pack())
      {
        v23 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v23;
          _os_log_impl(&dword_2294C8000, v24, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      std::string::basic_string[abi:ne180100]<0>(__p, v12);
      v25 = 1278226488;
      if (v46)
      {
        if (v46 == 6)
        {
          v25 = 1278226534;
        }
        else
        {
          if (v46 != 3)
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] unsupported component types.", &__x, &buf);
            std::logic_error::logic_error(exception, &buf);
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
          }
          v25 = 1278226536;
        }
      }
      OUDnnInferenceInterface::CreateIOBuffer((uint64_t)this, (std::string::size_type)__p, (char **)&v48, (_anonymous_namespace_ *)v25, a2);
      if (v45 < 0)
        operator delete(__p[0]);
      if (e5rt_tensor_desc_dtype_release())
      {
        v26 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v26;
          _os_log_impl(&dword_2294C8000, v27, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      std::string::basic_string[abi:ne180100]<0>(&buf, v12);
      v28 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(v7, (unsigned __int8 *)&buf);
      if (!v28)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      LODWORD(__x.__r_.__value_.__l.__data_) = -1;
      std::vector<int>::vector((std::vector<int> *)&buf, __n, (const std::vector<int>::value_type *)&__x);
      v29 = (void *)*((_QWORD *)v28 + 12);
      if (v29)
      {
        *((_QWORD *)v28 + 13) = v29;
        operator delete(v29);
        *((_QWORD *)v28 + 12) = 0;
        *((_QWORD *)v28 + 13) = 0;
        *((_QWORD *)v28 + 14) = 0;
      }
      *((std::string *)v28 + 4) = buf;
      if (!CVPixelBufferGetIOSurface(*((CVPixelBufferRef *)v28 + 5)))
      {
        v40 = __cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v41 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to get io surface", &__x, &buf);
        MEMORY[0x22E2CA89C](v40, &buf, v41);
        __cxa_throw(v40, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      __x.__r_.__value_.__r.__words[0] = 0;
      if (e5rt_buffer_object_create_from_iosurface())
      {
        v30 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v30;
          _os_log_impl(&dword_2294C8000, v31, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      if (e5rt_io_port_bind_buffer_object())
      {
        v32 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v32;
          _os_log_impl(&dword_2294C8000, v33, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      if (e5rt_buffer_object_release())
      {
        v34 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v34;
          _os_log_impl(&dword_2294C8000, v35, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      if (e5rt_tensor_desc_release())
      {
        v36 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v36;
          _os_log_impl(&dword_2294C8000, v37, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      if (e5rt_io_port_release())
      {
        v38 = e5rt_get_last_error_message();
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v39 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v38;
          _os_log_impl(&dword_2294C8000, v39, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&buf, 0xCu);
        }

      }
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
      ++v10;
    }
    while (v10 != v11);
    v10 = v57;
  }
  if (v10)
  {
    v58 = v10;
    operator delete(v10);
  }
}

void sub_2294F9FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OUEspressoV2Inference::SetInputBufferShape()
{
  std::logic_error *exception;
  std::string *v1;
  __int128 v2;
  std::string v3;
  std::string v4;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  v1 = std::string::append(&v3, "] dynamic inference not implemented.", 0x24uLL);
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v4.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v4.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  std::logic_error::logic_error(exception, &v4);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
}

void sub_2294FA1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

_QWORD *std::vector<char const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2294FA294(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2294FA484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t ou3dod::IsObjectBelongToType(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v2 = a2[1];
  if (*a2 == v2)
    return 0;
  v4 = *a2 + 8;
  do
  {
    result = objc_msgSend(*(id *)(a1 + 128), "isEqualToString:", *(_QWORD *)(v4 - 8));
    if ((result & 1) != 0)
      break;
    v6 = v4 == v2;
    v4 += 8;
  }
  while (!v6);
  return result;
}

BOOL ou3dod::ShouldForceExtendCorner(id *this, const OUBox3d *a2, const OUBox3d *a3)
{
  id v4;
  id v5;
  ou3dod::HistoryMergeInfo *v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  __int128 v10;
  _BOOL8 v11;
  char *v13;
  char *v14;
  void *v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;

  objc_msgSend(this[18], "UUIDString", a3);
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = (char *)objc_msgSend(v4, "UTF8String");
  objc_msgSend(a2[1].var5.var2.var0, "UUIDString");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v13 = (char *)objc_msgSend(v5, "UTF8String");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v15, &v14, &v13);

  v7 = (_QWORD *)ou3dod::HistoryMergeInfo::Get(v6) + 5;
  v8 = std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(v7, (unsigned __int8 *)v15);
  v11 = (v8
      || (v9 = v16,
          v10 = *(_OWORD *)v15,
          *(_OWORD *)v15 = *(_OWORD *)__p,
          v16 = v18,
          *(_OWORD *)__p = v10,
          v18 = v9,
          (v8 = std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(v7, (unsigned __int8 *)v15)) != 0))&& v8[64] != 0;
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return v11;
}

void sub_2294FA6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void ou3dod::SetForceExtendCornerFlag(id *this, const OUBox3d *a2, const OUBox3d *a3)
{
  unsigned __int8 v3;
  __int128 *v6;
  id v7;
  id v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  void *v14[2];
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  __int128 *v18[7];

  v3 = a3;
  v6 = ou3dod::HistoryMergeInfo::Get((ou3dod::HistoryMergeInfo *)this);
  objc_msgSend(a2[1].var5.var2.var0, "UUIDString");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v18[0] = (__int128 *)objc_msgSend(v7, "UTF8String");
  objc_msgSend(this[18], "UUIDString");
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v13 = (char *)objc_msgSend(v8, "UTF8String");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v14, (char **)v18, &v13);
  v9 = (_QWORD *)v6 + 5;

  v10 = std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(v9, (unsigned __int8 *)v14);
  if (v10)
  {
    std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::remove(v9, v10, (uint64_t)v18);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v18, 0);
  }
  v11 = v15;
  v12 = *(_OWORD *)v14;
  *(_OWORD *)v14 = *(_OWORD *)__p;
  v15 = v17;
  *(_OWORD *)__p = v12;
  v17 = v11;
  v18[0] = (__int128 *)v14;
  std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>((uint64_t)v9, (unsigned __int8 *)v14, (uint64_t)&std::piecewise_construct, v18)[64] = v3;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_2294FA870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ou3dod::ShouldForceMerge(ou3dod *this, float32x4_t *a2, const OUBox3d *a3)
{
  __int128 *v5;
  id v6;
  id v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  __int128 v10;
  uint64_t v11;
  __CFString *v12;
  _QWORD *v13;
  __CFString *v14;
  float v15;
  uint64_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  _OWORD v27[3];
  float32x4_t v28[8];
  float32x4_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[24];

  v5 = ou3dod::HistoryMergeInfo::Get(this);
  objc_msgSend(*((id *)this + 18), "UUIDString");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v29.i64[0] = objc_msgSend(v6, "UTF8String");
  objc_msgSend((id)a2[9].i64[0], "UUIDString");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v28[0].i64[0] = objc_msgSend(v7, "UTF8String");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(&v37, (char **)&v29, (char **)v28);
  v8 = (_QWORD *)v5 + 5;

  v9 = std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(v8, (unsigned __int8 *)&v37);
  if (v9
    || (v10 = v37,
        v37 = v39,
        v11 = v38,
        v39 = v10,
        v38 = v40,
        v40 = v11,
        (v9 = std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(v8, (unsigned __int8 *)&v37)) != 0))
  {
    v12 = CFSTR("Table");
    *(_QWORD *)&v30 = 0;
    v29 = 0uLL;
    v28[0].i64[0] = (uint64_t)&v29;
    v28[0].i8[8] = 0;
    v13 = operator new(8uLL);
    v29.i64[0] = (uint64_t)v13;
    v29.i64[1] = (uint64_t)v13;
    *(_QWORD *)&v30 = v13 + 1;
    v14 = v12;
    *v13 = v14;
    v29.i64[1] = (uint64_t)(v13 + 1);
    v15 = 0.2;
    if ((_QWORD *)v29.i64[0] != v13 + 1)
    {
      v16 = v29.i64[0] - 8;
      while (!objc_msgSend(*((id *)this + 16), "isEqualToString:", *(_QWORD *)(v16 + 8)))
      {
        v16 += 8;
        if ((_QWORD *)v16 == v13)
          goto LABEL_9;
      }
      v15 = 0.4;
    }
LABEL_9:
    v28[0].i64[0] = (uint64_t)&v29;
    std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);

    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    box3dEnlarge((float32x4_t *)this, 0.4, v15, 0.0, &v29);
    memset(v28, 0, sizeof(v28));
    box3dEnlarge(a2, 0.4, v15, 0.0, v28);
    memset(v27, 0, sizeof(v27));
    box3dIou(&v29, v28, 0, (uint64_t)v27);
    if (*(float *)v27 >= 0.01)
    {
      v17 = vsubq_f32(*(float32x4_t *)this, *((float32x4_t *)this + 1));
      v18 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v17, v17)));
      v19 = vrsqrte_f32(v18);
      v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
      *(float32x2_t *)v17.f32 = vmul_n_f32(*(float32x2_t *)v17.f32, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
      v21 = vsubq_f32(*a2, a2[1]);
      v22 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v21, v21)));
      v23 = vrsqrte_f32(v22);
      v24 = vmul_f32(v23, vrsqrts_f32(v22, vmul_f32(v23, v23)));
      if (fabsf(vaddv_f32(vmul_f32(*(float32x2_t *)v17.f32, vmul_n_f32(*(float32x2_t *)v21.f32, vmul_f32(v24, vrsqrts_f32(v22, vmul_f32(v24, v24))).f32[0])))) < 0.173)
      {
        v25 = 1;
        goto LABEL_14;
      }
    }
    std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::remove(v8, v9, (uint64_t)v41);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v41, 0);
  }
  v25 = 0;
LABEL_14:
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  return v25;
}

void sub_2294FABB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<std::string,std::string>::~pair(v1 - 192);
  _Unwind_Resume(a1);
}

float32x2_t ou3dod::ComputeHeadingDirection(float32x4_t *this, const box3d *a2)
{
  float32x4_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;

  v2 = vsubq_f32(*this, this[1]);
  v3 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v2, v2)));
  v4 = vrsqrte_f32(v3);
  v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  return vmul_n_f32(*(float32x2_t *)v2.f32, vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).f32[0]);
}

float ou3dod::Compute2DOverlapRatio(ou3dod *this, const box3d *a2, const box3d *a3, const box3d *a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  const Polygon *v10;
  const Polygon *v11;
  float v12;
  const Polygon *v13;
  float v14;
  const Polygon *v15;
  float v16;
  const Polygon *v17;
  float v18;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  void *__p[2];
  uint64_t v24;
  __int128 v25;
  void *v26[5];
  void *v27[5];
  void *v28[5];
  void *v29[5];
  void *v30[5];
  _OWORD v31[2];
  _OWORD v32[2];
  _OWORD v33[2];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = *(_OWORD *)this;
  *((_QWORD *)&v4 + 1) = *((_QWORD *)this + 2);
  v5 = *((_OWORD *)this + 2);
  *((_QWORD *)&v5 + 1) = *((_QWORD *)this + 6);
  v33[0] = v4;
  v33[1] = v5;
  v6 = *(_OWORD *)a2;
  *((_QWORD *)&v6 + 1) = *((_QWORD *)a2 + 2);
  v7 = *((_OWORD *)a2 + 2);
  *((_QWORD *)&v7 + 1) = *((_QWORD *)a2 + 6);
  v32[0] = v6;
  v32[1] = v7;
  v8 = *(_OWORD *)a3;
  *((_QWORD *)&v8 + 1) = *((_QWORD *)a3 + 2);
  v9 = *((_OWORD *)a3 + 2);
  *((_QWORD *)&v9 + 1) = *((_QWORD *)a3 + 6);
  v31[0] = v8;
  v31[1] = v9;
  OU::Polygon::Polygon(v30, v33, 4);
  OU::Polygon::Polygon(v29, v32, 4);
  OU::Polygon::Polygon(v28, v31, 4);
  OU::clip((OU *)v30, (const Polygon *)v28, (char *)v27);
  OU::clip((OU *)v29, (const Polygon *)v28, (char *)v26);
  OU::clip((OU *)v30, (const Polygon *)v29, (char *)__p);
  if (OU::area((OU *)__p, v10) > 0.001)
  {
    OU::clip((OU *)v28, (const Polygon *)__p, (char *)&v20);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = v20;
    v24 = v21;
    v25 = v22;
  }
  v12 = OU::area((OU *)v27, v11);
  v14 = OU::area((OU *)v26, v13);
  v16 = OU::area((OU *)__p, v15);
  v18 = OU::area((OU *)v28, v17);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  return (float)((float)(v12 + v14) - v16) / v18;
}

void sub_2294FAE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  void *v39;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a26)
    operator delete(a26);
  if (a31)
    operator delete(a31);
  if (a36)
    operator delete(a36);
  v39 = *(void **)(v37 - 192);
  if (v39)
  {
    *(_QWORD *)(v37 - 184) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

void sub_2294FAED4()
{
  JUMPOUT(0x2294FAEACLL);
}

void sub_2294FAEDC()
{
  JUMPOUT(0x2294FAEBCLL);
}

void sub_2294FAEE4()
{
  JUMPOUT(0x2294FAECCLL);
}

void ou3dod::extractClassPoints(void *a1@<X0>, float32x4_t *a2@<X1>, void *a3@<X2>, void **a4@<X8>)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float v29;
  float v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  float v37;
  uint16x4_t v40;
  int8x16_t v41;
  uint32x4_t v42;
  void *v43;
  int v44;
  unint64_t v45;
  float32x4_t *v46;
  _OWORD *f32;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;
  float32x4_t v56;
  id v57;
  id obj;
  uint64_t v59;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v6 = a1;
  v7 = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v7)
  {
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v57 = v7;
    obj = v7;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v71, 16);
    if (v8)
    {
      v59 = *(_QWORD *)v68;
      do
      {
        v9 = 0;
        v61 = v8;
        do
        {
          if (*(_QWORD *)v68 != v59)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * v9);
          v11 = objc_msgSend(v10, "points", v57);
          v12 = objc_msgSend(v10, "semanticLabels");
          v13 = objc_msgSend(v10, "semanticVotes");
          v14 = 0;
          v15 = vsubq_f32(*a2, a2[3]);
          v16 = vmulq_f32(v15, v15);
          v16.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).u32[0];
          v17 = sqrtf(v16.f32[0]);
          v18 = vrsqrte_f32((float32x2_t)v16.u32[0]);
          v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18)));
          v65 = vmulq_n_f32(v15, vmul_f32(v19, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v19, v19))).f32[0]);
          v20 = vsubq_f32(*a2, a2[1]);
          v21 = vmulq_f32(v20, v20);
          v21.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u32[0];
          v16.f32[0] = sqrtf(v21.f32[0]);
          v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
          v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
          v64 = vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
          v24 = vsubq_f32(*a2, a2[4]);
          v25 = vmulq_f32(v24, v24);
          v25.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u32[0];
          v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
          v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
          v28 = vmulq_n_f32(v24, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
          v29 = v17 * 0.5;
          v30 = v16.f32[0] * 0.5;
          v31 = sqrtf(v25.f32[0]) * 0.5;
          v24.i64[0] = 0x3F0000003F000000;
          v24.i64[1] = 0x3F0000003F000000;
          v62 = vmulq_f32(vaddq_f32(*a2, a2[6]), v24);
          v63 = v28;
          while (v14 < objc_msgSend(v10, "count"))
          {
            v66 = *(float32x4_t *)(v11 + 16 * v14);
            v32 = vsubq_f32(v66, v62);
            v33 = vmulq_f32(v65, v32);
            v34 = vmulq_f32(v64, v32);
            v35 = vmulq_f32(v63, v32);
            v36 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]);
            v37 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0]);
            if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]) <= v29&& v36 <= v30&& v37 <= v31)
            {
              v40 = *(uint16x4_t *)(v13 + 8 * v14);
              v41 = (int8x16_t)vmovl_u16(v40);
              v42 = vaddw_u16((uint32x4_t)vextq_s8(v41, v41, 8uLL), v40);
              if (v42.i16[0] + v42.i16[2])
              {
                v42.i32[0] = *(_DWORD *)(v12 + 4 * v14);
                objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedChar:", vmovl_u8(*(uint8x8_t *)v42.i8).u8[0]);
                v43 = (void *)objc_claimAutoreleasedReturnValue();
                v44 = objc_msgSend(v6, "containsObject:", v43);

                if (v44)
                {
                  v46 = (float32x4_t *)a4[1];
                  v45 = (unint64_t)a4[2];
                  if ((unint64_t)v46 >= v45)
                  {
                    v48 = ((char *)v46 - (_BYTE *)*a4) >> 4;
                    if ((unint64_t)(v48 + 1) >> 60)
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    v49 = v45 - (_QWORD)*a4;
                    v50 = v49 >> 3;
                    if (v49 >> 3 <= (unint64_t)(v48 + 1))
                      v50 = v48 + 1;
                    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
                      v51 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v51 = v50;
                    if (v51)
                      v52 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v51);
                    else
                      v52 = 0;
                    v53 = (float32x4_t *)&v52[16 * v48];
                    *v53 = v66;
                    f32 = (_OWORD *)v53[1].f32;
                    v55 = (float32x4_t *)*a4;
                    v54 = (float32x4_t *)a4[1];
                    if (v54 != *a4)
                    {
                      do
                      {
                        v56 = v54[-1];
                        --v54;
                        v53[-1] = v56;
                        --v53;
                      }
                      while (v54 != v55);
                      v54 = (float32x4_t *)*a4;
                    }
                    *a4 = v53;
                    a4[1] = f32;
                    a4[2] = &v52[16 * v51];
                    if (v54)
                      operator delete(v54);
                  }
                  else
                  {
                    *v46 = v66;
                    f32 = (_OWORD *)v46[1].f32;
                  }
                  a4[1] = f32;
                }
              }
            }
            ++v14;
          }
          ++v9;
        }
        while (v9 != v61);
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v71, 16);
      }
      while (v8);
    }

    v7 = v57;
  }

}

void sub_2294FB310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }

  _Unwind_Resume(a1);
}

void ou3dod::PrintBoxCorner(ou3dod *this, const box3d *a2)
{
  NSObject *v3;

  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    ou3dod::PrintBoxCorner(this, v3);

}

double ou3dod::FindIntersect(float32x4_t a1, int32x4_t a2, float32x4_t a3, int32x4_t a4)
{
  int32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  double result;

  a1.i32[2] = 1.0;
  a2.i32[2] = 1.0;
  a3.i32[2] = 1.0;
  a4.i32[2] = 1.0;
  v4 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL), vnegq_f32(a1)), (float32x4_t)a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL);
  v6 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a4, a4), (int8x16_t)a4, 0xCuLL), vnegq_f32(a3)), (float32x4_t)a4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), (int8x16_t)a3, 0xCuLL));
  v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
  v8 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), vnegq_f32(v5)), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
  if (fabsf(*(float *)&v8.i32[1]) >= 0.000001)
    *(_QWORD *)&result = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1)).u64[0];
  else
    *(_QWORD *)&result = vdupq_n_s32(0x7F7FFFFFu).u64[0];
  return result;
}

float32x4_t *ou3dod::MaybeReorderBackObjectCorner(float32x4_t *result, float32x2_t a2)
{
  int i;
  float32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  uint64_t *v7;
  uint64_t j;
  uint64_t k;

  for (i = 0; i != 3; ++i)
  {
    v3 = vsubq_f32(*result, result[1]);
    v4 = (float32x2_t)COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v3, v3)));
    v5 = vrsqrte_f32(v4);
    v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
    *(float32x2_t *)v3.f32 = vsub_f32(a2, vmul_n_f32(*(float32x2_t *)v3.f32, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]));
    if (sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v3.f32))) < 0.01)
      break;
    v7 = (uint64_t *)result;
    for (j = 1; j != 5; ++j)
    {
      *v7 = result[(j & 3) + 4].i64[0];
      v7 += 2;
    }
    for (k = 0; k != 4; ++k)
      result[k + 4].i64[0] = result[k].i64[0];
  }
  return result;
}

uint64_t ou3dod::ShiftBoxCorner(uint64_t this, box3d *a2)
{
  uint64_t i;
  uint64_t j;

  for (i = 0; i != 64; i += 16)
  {
    *(_QWORD *)(this + i) = *(_QWORD *)(this + 16 * (a2 & 3 | 4u));
    LODWORD(a2) = (_DWORD)a2 + 1;
  }
  for (j = 0; j != 64; j += 16)
    *(_QWORD *)(this + j + 64) = *(_QWORD *)(this + j);
  return this;
}

BOOL ou3dod::IsBoxSurfaceAttached(float32x4_t *this, const box3d *a2, const box3d *a3)
{
  uint64_t v3;
  int v4;
  uint64_t i;
  float32x4_t v6;

  v3 = 0;
  v4 = 0;
  do
  {
    for (i = 0; i != 64; i += 16)
    {
      v6 = vsubq_f32(this[v3], *(float32x4_t *)((char *)a2 + i));
      if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v6, v6))) < 0.01)
        ++v4;
    }
    ++v3;
  }
  while (v3 != 4);
  return v4 > 1;
}

void ou3dod::MaybeReorderObjectCorner(id *this, OUBox3d *a2)
{
  int v3;
  void *v4;
  float v5;
  float v6;
  BOOL v7;
  uint64_t v8;
  id *v9;
  uint64_t i;
  float v11;
  float v12;
  uint64_t v13;
  id *v14;
  uint64_t j;
  void *__p[3];

  if (this)
  {
    v3 = objc_msgSend(this[16], "isEqualToString:", CFSTR("Cabinet"), box3dToCentroidSizeAngle((float32x4_t *)this, (uint64_t *)__p).n128_f64[0]);
    v4 = __p[0];
    if (v3)
    {
      v6 = *((float *)__p[0] + 3);
      v5 = *((float *)__p[0] + 4);
      v7 = v5 <= 1.0 || v5 <= v6;
      if (!v7 && (float)(v5 / v6) > 1.5)
      {
        v8 = 1;
        v9 = this;
        do
        {
          *v9 = this[2 * (v8 & 3) + 8];
          v9 += 2;
          ++v8;
        }
        while (v8 != 5);
        for (i = 0; i != 8; i += 2)
          this[i + 8] = this[i];
        goto LABEL_19;
      }
    }
    else
    {
      v11 = *((float *)__p[0] + 3);
      v12 = *((float *)__p[0] + 4);
      if (v11 <= v12 && (float)(v12 / v11) > 1.5)
      {
        v13 = 1;
        v14 = this;
        do
        {
          *v14 = this[2 * (v13 & 3) + 8];
          v14 += 2;
          ++v13;
        }
        while (v13 != 5);
        for (j = 0; j != 8; j += 2)
          this[j + 8] = this[j];
LABEL_19:
        if (!v4)
          return;
      }
    }
    __p[1] = v4;
    operator delete(v4);
  }
}

void sub_2294FB6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ou3dod::AdjustBoxCornerOrder(float32x4_t *this, float32x4_t *a2, box3d *a3)
{
  unsigned int v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  int v10;
  uint64_t i;
  float32x2_t v12;
  float v13;
  BOOL v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t j;
  int v18;
  int v19;
  float32x2_t v20;
  float v21;
  int v22;
  uint64_t k;
  float32x2_t v24;
  float v25;
  BOOL v26;
  uint64_t v27;
  float32x4_t *v28;
  uint64_t m;
  float32x2_t v30;
  float32x2_t v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  const box3d *v35;
  const box3d *v36;
  void *__p[3];
  void *v39[3];

  box3dToCentroidSizeAngle(this, (uint64_t *)v39);
  box3dToCentroidSizeAngle(a2, (uint64_t *)__p);
  v5 = 0;
  v6 = *(float32x2_t *)v39[0];
  v7 = *(float32x2_t *)__p[0];
  v8 = vsub_f32(*(float32x2_t *)this->f32, *(float32x2_t *)__p[0]);
  v9 = sqrtf(vaddv_f32(vmul_f32(v8, v8)));
  v10 = 1;
  for (i = 1; i != 4; ++i)
  {
    v12 = vsub_f32(*(float32x2_t *)this[i].f32, v7);
    v13 = sqrtf(vaddv_f32(vmul_f32(v12, v12)));
    if (v13 < v9)
    {
      v5 = v10;
      v9 = v13;
    }
    ++v10;
  }
  if (v5)
    v14 = v5 == 3;
  else
    v14 = 1;
  if (v14)
  {
    v15 = 2;
    v16 = this;
    do
    {
      v16->i64[0] = this[(v15 & 3) + 4].i64[0];
      ++v16;
      ++v15;
    }
    while (v15 != 6);
    for (j = 0; j != 4; ++j)
      this[j + 4].i64[0] = this[j].i64[0];
    if (v5 < 2)
      v18 = 2;
    else
      v18 = -2;
    v5 += v18;
  }
  v19 = 0;
  v20 = vsub_f32(*(float32x2_t *)a2->f32, v6);
  v21 = sqrtf(vaddv_f32(vmul_f32(v20, v20)));
  v22 = 1;
  for (k = 1; k != 4; ++k)
  {
    v24 = vsub_f32(*(float32x2_t *)a2[k].f32, v6);
    v25 = sqrtf(vaddv_f32(vmul_f32(v24, v24)));
    if (v25 < v21)
    {
      v21 = v25;
      v19 = v22;
    }
    ++v22;
  }
  if (v19)
    v26 = v19 == 3;
  else
    v26 = 1;
  if (v26)
  {
    v27 = 2;
    v28 = a2;
    do
    {
      v28->i64[0] = a2[(v27 & 3) + 4].i64[0];
      ++v28;
      ++v27;
    }
    while (v27 != 6);
    for (m = 0; m != 4; ++m)
      a2[m + 4].i64[0] = a2[m].i64[0];
    if (v19)
      v19 = 1;
    else
      v19 = 2;
  }
  if (v19 + v5 != 3)
    goto LABEL_40;
  v30 = *(float32x2_t *)this[v5].f32;
  v31 = *(float32x2_t *)a2[v19].f32;
  if (vaddv_f32(vmul_f32(vsub_f32(v30, v6), vsub_f32(v31, v6))) < 0.0
    && vaddv_f32(vmul_f32(vsub_f32(v30, v7), vsub_f32(v31, v7))) < 0.0)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      ou3dod::AdjustBoxCornerOrder();

LABEL_40:
    v33 = 0;
    goto LABEL_44;
  }
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    ou3dod::AdjustBoxCornerOrder(v5, v19, v34);

  ou3dod::PrintBoxCorner((ou3dod *)this, v35);
  ou3dod::PrintBoxCorner((ou3dod *)a2, v36);
  v33 = 1;
LABEL_44:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  return v33;
}

void sub_2294FB994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ou3dod::MaybeClipExtendLShapeObjects(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t *a6, _QWORD *a7, int a8)
{
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  box3d *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  unint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int32x4_t v67;
  __int32 v68;
  uint64_t v69;
  float32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  uint64_t v85;
  float32x4_t v86;
  unsigned __int32 v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  int64x2_t v94;
  __int128 v95;
  int32x4_t v96;
  __int32 v97;
  uint64_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  uint64_t v113;
  float32x4_t v114;
  unsigned __int32 v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  float32x4_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  int64x2_t v129;
  int64x2_t v130;
  __int128 v131;
  int8x16_t v132;
  int8x16_t v133;
  uint64_t v134;
  float32x4_t v135;
  __int32 v136;
  float v137;
  float v138;
  __int32 v139;
  float v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  int v144;
  char v145;
  int v146;
  uint64_t i;
  uint64_t v148;
  __int32 *v149;
  __int32 *v150;
  int8x16_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int8x16_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __CFString *v166;
  char *v167;
  char *v168;
  char *v169;
  int v170;
  int v171;
  int v172;
  uint64_t j;
  float v174;
  float v175;
  float v176;
  float v177;
  void *v178;
  void *v179;
  void *v180;
  uint64_t v181;
  const OUBox3d *v182;
  uint64_t v183;
  id *v184;
  unint64_t v185;
  void *v186;
  _BOOL4 ShouldForceExtendCorner;
  NSObject *v188;
  uint64_t v189;
  _QWORD *v190;
  void *v191;
  void *v192;
  int64_t v193;
  uint64_t v194;
  const box3d *v195;
  float v196;
  uint64_t v197;
  const box3d *v198;
  char v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  NSObject *v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  float v225;
  float v226;
  char *v227;
  char *v228;
  id *v229;
  char *v230;
  int v231;
  int v232;
  int v233;
  uint64_t k;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  float32x4_t v243;
  float32x4_t v244;
  uint64_t v245;
  float32x2_t v246;
  int32x2_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x2_t v250;
  int32x2_t v251;
  int32x2_t v252;
  float32x2_t v253;
  int32x2_t v254;
  float32x2_t v255;
  int32x2_t v256;
  float32x2_t v257;
  int32x2_t v258;
  float32x2_t v259;
  int32x2_t v260;
  float32x2_t v261;
  float32x2_t v262;
  int32x2_t v263;
  int32x2_t v264;
  unint64_t v265;
  uint64_t *v266;
  unint64_t v267;
  int v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  float32x4_t *v274;
  const box3d *v275;
  const box3d *v276;
  const OUBox3d *v277;
  OUBox3d *v278;
  OUBox3d *v279;
  float v280;
  int8x16_t v282;
  int8x16_t v283;
  __int32 v284;
  __int32 v285;
  void *v286;
  uint64_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  __CFString *v292;
  void *v293;
  float32x4_t v294;
  float32x4_t v296;
  _QWORD *v297;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  _OWORD v302[3];
  void *__p[2];
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  OUBox3d *v307;
  unint64_t v308;
  void *v309[3];
  void *v310[3];
  void *v311[2];
  __int128 v312;
  __int128 v313;
  void *v314[3];
  float32x4_t v315;
  float32x4_t v316;
  int8x16_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  int8x16_t v321;
  float32x4_t v322;
  float32x4_t v323;
  int64x2_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  float32x4_t v331;
  int64x2_t v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  float32x4_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  void *v347[3];
  void *v348[3];
  float32x4_t v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  float32x4_t v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  float32x4_t v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  uint8_t buf[4];
  double v374;
  __CFString *v375;
  __CFString *v376;
  char v377[16];
  _QWORD v378[3];
  _QWORD v379[3];
  __CFString *v380;
  __CFString *v381;
  __CFString *v382;
  __CFString *v383;
  uint64_t v384;

  v384 = *MEMORY[0x24BDAC8D0];
  v13 = a4;
  v15 = *a6;
  v14 = a6[1];
  v299 = a6;
  v300 = a3;
  v301 = a2;
  v16 = *a6 + 224 * a2;
  v17 = *(_OWORD *)(v16 + 80);
  v18 = *a6 + 224 * a3;
  v369 = *(_OWORD *)(v16 + 64);
  v370 = v17;
  v19 = *(_OWORD *)(v16 + 112);
  v371 = *(_OWORD *)(v16 + 96);
  v372 = v19;
  v20 = *(_OWORD *)(v16 + 16);
  v365 = *(float32x4_t *)v16;
  v366 = v20;
  v21 = *(_OWORD *)(v16 + 48);
  v367 = *(_OWORD *)(v16 + 32);
  v368 = v21;
  v22 = *(_OWORD *)(v18 + 80);
  v361 = *(_OWORD *)(v18 + 64);
  v362 = v22;
  v23 = *(_OWORD *)(v18 + 112);
  v363 = *(_OWORD *)(v18 + 96);
  v364 = v23;
  v24 = *(_OWORD *)(v18 + 16);
  v357 = *(float32x4_t *)v18;
  v358 = v24;
  v25 = *(_OWORD *)(v18 + 48);
  v359 = *(_OWORD *)(v18 + 32);
  v360 = v25;
  if ((ou3dod::AdjustBoxCornerOrder((float32x4_t *)v16, (float32x4_t *)v18, v26) & 1) == 0)
  {
    ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
    v62 = 1;
    goto LABEL_171;
  }
  v27 = *(float32x4_t *)(v16 + 16);
  v27.i32[2] = 1.0;
  v28 = *(float32x4_t *)(v16 + 32);
  v28.i32[2] = 1.0;
  v29 = *(float32x4_t *)(v18 + 16);
  v29.i32[2] = 1.0;
  v30 = *(float32x4_t *)(v18 + 32);
  v30.i32[2] = 1.0;
  v31 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), vnegq_f32(v27)), v28, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL));
  v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL);
  v33 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL), vnegq_f32(v29)), v30, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL));
  v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
  v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL);
  v36 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL);
  v37 = vnegq_f32(v32);
  v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), v37), v34, v35);
  v39 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v294 = v39;
  if (fabsf(*(float *)&v38.i32[1]) >= 0.000001)
    v39 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.i8, 1));
  v40 = *(float32x4_t *)v16;
  v289 = v39;
  v39.i32[2] = *(_QWORD *)(v16 + 8);
  v41 = (float32x4_t)vextq_s8(v36, (int8x16_t)v31, 8uLL);
  v42 = vsubq_f32(v39, *(float32x4_t *)(v16 + 16));
  v43 = vmulq_f32(v42, v42);
  v44 = vsubq_f32(v39, *(float32x4_t *)(v16 + 32));
  v45 = vmulq_f32(v44, v44);
  v46 = vsubq_f32(v39, *(float32x4_t *)(v18 + 16));
  v47 = vmulq_f32(v46, v46);
  v296 = v39;
  v48 = vsubq_f32(v39, *(float32x4_t *)(v18 + 32));
  v49 = vmulq_f32(v48, v48);
  if ((float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0])+ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0])) >= (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0]) + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0])))v50 = 1;
  else
    v50 = 0x100000000;
  v51 = *(float32x4_t *)(v16 + 48);
  v52 = *(float32x4_t *)v18;
  v40.i32[2] = 1.0;
  v51.i32[2] = 1.0;
  v53 = *(float32x4_t *)(v18 + 48);
  v52.i32[2] = 1.0;
  v53.i32[2] = 1.0;
  v54 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL), vnegq_f32(v40)), v51, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL));
  v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v54, v54), (int8x16_t)v54, 0xCuLL);
  v56 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL), vnegq_f32(v52)), v53, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), (int8x16_t)v52, 0xCuLL));
  v57 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v56, v56), (int8x16_t)v56, 0xCuLL);
  v58 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v56, (int8x16_t)v56, 0xCuLL), (int8x16_t)v56, 8uLL);
  v59 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL), vnegq_f32(v55)), v57, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL));
  if (fabsf(*(float *)&v59.i32[1]) >= 0.000001)
    v294 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v59, v59), (int8x16_t)v59, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.i8, 1));
  v60 = (int32x4_t)vmlaq_f32(vmulq_f32(v58, v37), v57, v41);
  if (fabsf(*(float *)&v60.i32[1]) >= 0.000001)
    v61 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v60, v60), (int8x16_t)v60, 0xCuLL), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.i8, 1));
  else
    v61 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v288 = v61;
  v63 = *(_OWORD *)(v16 + 80);
  v353 = *(_OWORD *)(v16 + 64);
  v354 = v63;
  v64 = *(_OWORD *)(v16 + 112);
  v355 = *(_OWORD *)(v16 + 96);
  v356 = v64;
  v65 = *(_OWORD *)(v16 + 16);
  v349 = *(float32x4_t *)v16;
  v350 = v65;
  v66 = *(_OWORD *)(v16 + 48);
  v351 = *(_OWORD *)(v16 + 32);
  v352 = v66;
  v293 = v13;
  box3dToCentroidSizeAngle((float32x4_t *)v16, (uint64_t *)v348);
  box3dToCentroidSizeAngle((float32x4_t *)v18, (uint64_t *)v347);
  *(double *)v67.i64 = rotationZMatrix(*((float *)v348[0] + 6));
  v69 = 0;
  v287 = 0x6DB6DB6DB6DB6DB7 * ((v14 - v15) >> 5);
  v70.i64[0] = *(_QWORD *)v348[0];
  v70.i32[2] = *((_DWORD *)v348[0] + 2);
  v72 = vzip1q_s32(v67, v71);
  v73 = vzip2q_s32(v67, v71);
  v75 = (float32x4_t)vdupq_laneq_s32(v74, 2);
  v76 = (float32x4_t)vzip1q_s32(v67, v74);
  v76.i32[2] = v71.i32[0];
  v77 = vzip1q_s32(v72, v74);
  v78 = (float32x4_t)vzip2q_s32(v72, vdupq_lane_s32(*(int32x2_t *)v74.i8, 1));
  v79 = (float32x4_t)vzip2q_s32(v67, v74);
  v79.i32[2] = v71.i32[2];
  v80 = vzip1q_s32(v73, (int32x4_t)v75);
  v81 = vdupq_lane_s32(*(int32x2_t *)v71.i8, 1);
  v82 = (float32x4_t)vtrn2q_s32(v77, (int32x4_t)v78);
  v82.i32[2] = v80.i32[1];
  do
  {
    v83 = v77;
    v83.i32[3] = v68;
    v84 = v80;
    v84.i32[3] = v75.i32[3];
    v75 = vsubq_f32(*(float32x4_t *)((char *)&v349 + v69), v70);
    *(float32x4_t *)((char *)&v349 + v69) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v83, v84), (int32x4_t)v78), v75.f32[0]), v82, *(float32x2_t *)v75.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(v83, v84), v81), v75, 2);
    v69 += 16;
    v75.i32[3] = v84.i32[3];
    v68 = v83.i32[3];
  }
  while (v69 != 128);
  v85 = 0;
  v86 = vsubq_f32(v296, v70);
  v87 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v77, v80), (int32x4_t)v78), v86.f32[0]), v82, *(float32x2_t *)v86.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(v77, v80), v81), v86, 2).u32[0];
  v88 = v50 & 1;
  do
  {
    v89 = (unint64_t)(&v349
                           + ou3dod::MaybeClipExtendLShapeObjects(std::vector<OUBox3d> const&,std::pair<unsigned long,unsigned long>,NSArray<OUPointCloud *> *,BOOL,std::vector<OUBox3d>*,std::vector<BOOL> *,BOOL)::indices[4 * (v50 & 1) + v85]);
    LODWORD(v90) = v87;
    HIDWORD(v90) = HIDWORD(*(_QWORD *)v89);
    *(_DWORD *)(v89 | 8) = *(_QWORD *)(v89 + 8);
    *(_QWORD *)v89 = v90;
    ++v85;
  }
  while (v85 != 4);
  v91 = 0;
  v343 = v353;
  v344 = v354;
  v345 = v355;
  v346 = v356;
  v339 = v349;
  v340 = v350;
  v341 = v351;
  v342 = v352;
  do
  {
    *(float32x4_t *)((char *)&v339 + v91 * 4) = vaddq_f32(v70, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, COERCE_FLOAT(*(_OWORD *)((char *)&v339 + v91 * 4))), v78, *(float32x2_t *)&v339.f32[v91], 1), v79, *(float32x4_t *)((char *)&v339 + v91 * 4), 2));
    v91 += 4;
  }
  while (v91 != 32);
  v79.i64[0] = *(_QWORD *)v347[0];
  v79.i32[2] = *((_DWORD *)v347[0] + 2);
  v290 = v79;
  v92 = *(_OWORD *)(v18 + 80);
  v335 = *(_OWORD *)(v18 + 64);
  v336 = v92;
  v93 = *(_OWORD *)(v18 + 112);
  v337 = *(_OWORD *)(v18 + 96);
  v338 = v93;
  v94 = *(int64x2_t *)(v18 + 16);
  v331 = *(float32x4_t *)v18;
  v332 = v94;
  v95 = *(_OWORD *)(v18 + 48);
  v333 = *(_OWORD *)(v18 + 32);
  v334 = v95;
  *(double *)v96.i64 = rotationZMatrix(*((float *)v347[0] + 6));
  v98 = 0;
  v100 = vzip1q_s32(v96, v99);
  v101 = vzip2q_s32(v96, v99);
  v103 = (float32x4_t)vdupq_laneq_s32(v102, 2);
  v104 = (float32x4_t)vzip1q_s32(v96, v102);
  v104.i32[2] = v99.i32[0];
  v105 = vzip1q_s32(v100, v102);
  v106 = (float32x4_t)vzip2q_s32(v100, vdupq_lane_s32(*(int32x2_t *)v102.i8, 1));
  v107 = (float32x4_t)vzip2q_s32(v96, v102);
  v107.i32[2] = v99.i32[2];
  v108 = vzip1q_s32(v101, (int32x4_t)v103);
  v109 = vdupq_lane_s32(*(int32x2_t *)v99.i8, 1);
  v110 = (float32x4_t)vtrn2q_s32(v105, (int32x4_t)v106);
  v110.i32[2] = v108.i32[1];
  do
  {
    v111 = v105;
    v111.i32[3] = v103.i32[3];
    v112 = v108;
    v112.i32[3] = v97;
    v103 = vsubq_f32(*(float32x4_t *)((char *)&v331 + v98), v290);
    *(float32x4_t *)((char *)&v331 + v98) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v111, v112), (int32x4_t)v106), v103.f32[0]), v110, *(float32x2_t *)v103.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(v111, v112), v109), v103, 2);
    v98 += 16;
    v103.i32[3] = v111.i32[3];
  }
  while (v98 != 128);
  v113 = 0;
  v114 = vsubq_f32(v296, v290);
  v115 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v105, v108), (int32x4_t)v106), v114.f32[0]), v110, *(float32x2_t *)v114.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(v105, v108), v109), v114, 2).u32[0];
  do
  {
    v116 = (unint64_t)(&v331
                            + *(int *)((char *)ou3dod::MaybeClipExtendLShapeObjects(std::vector<OUBox3d> const&,std::pair<unsigned long,unsigned long>,NSArray<OUPointCloud *> *,BOOL,std::vector<OUBox3d>*,std::vector<BOOL> *,BOOL)::indices
                                     + ((v50 >> 28) & 0x10)
                                     + v113));
    LODWORD(v117) = v115;
    HIDWORD(v117) = HIDWORD(*(_QWORD *)v116);
    *(_DWORD *)(v116 | 8) = *(_QWORD *)(v116 + 8);
    *(_QWORD *)v116 = v117;
    v113 += 4;
  }
  while (v113 != 16);
  v118 = 0;
  v327 = v335;
  v328 = v336;
  v329 = v337;
  v330 = v338;
  v323 = v331;
  v324 = v332;
  v325 = v333;
  v326 = v334;
  do
  {
    *(float32x4_t *)((char *)&v323 + v118 * 4) = vaddq_f32(v290, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v104, COERCE_FLOAT(*(_OWORD *)((char *)&v323 + v118 * 4))), v106, *(float32x2_t *)&v323.f32[v118], 1), v107, *(float32x4_t *)((char *)&v323 + v118 * 4), 2));
    v118 += 4;
  }
  while (v118 != 32);
  if ((a8 & 1) != 0 || (box3dIou(&v339, &v323, 0, (uint64_t)&v315), v315.f32[0] <= 0.02))
  {
    v297 = a7;
    v120 = v339;
    v121 = v340;
    v122 = v342;
    *(_OWORD *)(v16 + 32) = v341;
    *(_OWORD *)(v16 + 48) = v122;
    *(float32x4_t *)v16 = v120;
    *(_OWORD *)(v16 + 16) = v121;
    v123 = v343;
    v124 = v344;
    v125 = v346;
    *(_OWORD *)(v16 + 96) = v345;
    *(_OWORD *)(v16 + 112) = v125;
    *(_OWORD *)(v16 + 64) = v123;
    *(_OWORD *)(v16 + 80) = v124;
    v126 = v330;
    v128 = v327;
    v127 = v328;
    *(_OWORD *)(v18 + 96) = v329;
    *(_OWORD *)(v18 + 112) = v126;
    *(_OWORD *)(v18 + 64) = v128;
    *(_OWORD *)(v18 + 80) = v127;
    v129 = (int64x2_t)v323;
    v130 = v324;
    v131 = v326;
    *(_OWORD *)(v18 + 32) = v325;
    *(_OWORD *)(v18 + 48) = v131;
    *(int64x2_t *)v18 = v129;
    *(int64x2_t *)(v18 + 16) = v130;
    v132 = *(int8x16_t *)v16;
    v133 = *(int8x16_t *)v18;
    if ((v50 & 1) != 0)
      v134 = v16;
    else
      v134 = v18;
    v135 = *(float32x4_t *)(v134 + 48);
    if (*(float *)&v133.i32[2] >= *(float *)&v132.i32[2])
      v136 = *(_QWORD *)(v16 + 8);
    else
      v136 = *(_QWORD *)(v18 + 8);
    v137 = *(float *)(v16 + 72);
    v138 = *(float *)(v18 + 72);
    if (v137 >= v138)
      v139 = *(_DWORD *)(v16 + 72);
    else
      v139 = *(_DWORD *)(v18 + 72);
    v140 = vabds_f32(v137 - *(float *)&v132.i32[2], v138 - *(float *)&v133.i32[2]);
    if (v140 >= 0.15 && a5)
    {
      v282 = *(int8x16_t *)v18;
      v283 = *(int8x16_t *)v16;
      v284 = v136;
      v285 = v139;
      v291 = *(float32x4_t *)(v134 + 48);
      v382 = CFSTR("Sofa");
      v383 = CFSTR("Table");
      v316.i64[0] = 0;
      v315 = 0uLL;
      v311[0] = &v315;
      LOBYTE(v311[1]) = 0;
      v141 = operator new(0x10uLL);
      v315.i64[0] = (uint64_t)v141;
      v315.i64[1] = (uint64_t)v141;
      v142 = v141 + 2;
      v316.i64[0] = (uint64_t)(v141 + 2);
      *v141 = v382;
      v141[1] = v383;
      v315.i64[1] = (uint64_t)(v141 + 2);
      if ((_QWORD *)v315.i64[0] == v141 + 2)
      {
        v145 = 0;
      }
      else
      {
        v143 = v315.i64[0] + 8;
        do
        {
          v144 = objc_msgSend(*(id *)(v15 + 224 * v301 + 128), "isEqualToString:", *(_QWORD *)(v143 - 8), *(_OWORD *)&v282, *(_OWORD *)&v283);
          v145 = v144;
          if ((_QWORD *)v143 == v142)
            v146 = 1;
          else
            v146 = v144;
          v143 += 8;
        }
        while (v146 != 1);
      }
      v311[0] = &v315;
      std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v311);
      for (i = 8; i != -8; i -= 8)

      v135 = v291;
      v136 = v284;
      v139 = v285;
      v133 = v282;
      v132 = v283;
      if ((v145 & 1) == 0)
      {
LABEL_56:
        v129.i64[0] = 0;
        v130.i64[0] = v88;
        v151 = vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v130, v129).i64[0], 0), v132, v133);
        v152 = v135;
        v152.i32[2] = v136;
        v153 = v289;
        v153.i32[2] = v136;
        v315 = v152;
        v316 = v153;
        v154 = v151;
        v154.i32[2] = v136;
        v155 = v294;
        v155.i32[2] = v136;
        v317 = v154;
        v318 = v155;
        v135.i32[2] = v139;
        v156 = v289;
        v156.i32[2] = v139;
        v151.i32[2] = v139;
        v319 = v135;
        v320 = v156;
        v157 = v294;
        v157.i32[2] = v139;
        v321 = v151;
        v322 = v157;
        box3dToCentroidSizeAngle(&v315, (uint64_t *)v314);
        if ((a8 & 1) == 0 && (*((float *)v314[0] + 4) > 1.5 || *((float *)v314[0] + 3) > 1.5))
        {
          v158 = v370;
          *(_OWORD *)(v16 + 64) = v369;
          *(_OWORD *)(v16 + 80) = v158;
          v159 = v372;
          *(_OWORD *)(v16 + 96) = v371;
          *(_OWORD *)(v16 + 112) = v159;
          v160 = v366;
          *(float32x4_t *)v16 = v365;
          *(_OWORD *)(v16 + 16) = v160;
          v161 = v368;
          *(_OWORD *)(v16 + 32) = v367;
          *(_OWORD *)(v16 + 48) = v161;
          v162 = v362;
          *(_OWORD *)(v18 + 64) = v361;
          *(_OWORD *)(v18 + 80) = v162;
          v163 = v364;
          *(_OWORD *)(v18 + 96) = v363;
          *(_OWORD *)(v18 + 112) = v163;
          v164 = v358;
          *(float32x4_t *)v18 = v357;
          *(_OWORD *)(v18 + 16) = v164;
          v165 = v360;
          *(_OWORD *)(v18 + 32) = v359;
          *(_OWORD *)(v18 + 48) = v165;
          ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
          v62 = 3;
          goto LABEL_165;
        }
        v292 = CFSTR("Sofa");
        v380 = v292;
        v166 = CFSTR("Table");
        v381 = v166;
        v311[1] = 0;
        *(_QWORD *)&v312 = 0;
        v311[0] = 0;
        __p[0] = v311;
        LOBYTE(__p[1]) = 0;
        v167 = (char *)operator new(0x10uLL);
        v311[0] = v167;
        v311[1] = v167;
        v168 = v167 + 16;
        *(_QWORD *)&v312 = v167 + 16;
        *(_QWORD *)v167 = v380;
        *((_QWORD *)v167 + 1) = v381;
        v311[1] = v167 + 16;
        if (v311[0] == v167 + 16)
        {
          v171 = 0;
        }
        else
        {
          v169 = (char *)v311[0] + 8;
          do
          {
            v170 = objc_msgSend(*(id *)(v15 + 224 * v301 + 128), "isEqualToString:", *((_QWORD *)v169 - 1), *(_OWORD *)&v282, *(_OWORD *)&v283);
            v171 = v170;
            if (v169 == v168)
              v172 = 1;
            else
              v172 = v170;
            v169 += 8;
          }
          while (v172 != 1);
        }
        __p[0] = v311;
        std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        for (j = 8; j != -8; j -= 8)

        if (v171)
        {
          box3dToCentroidSizeAngle((float32x4_t *)v16, (uint64_t *)v311);
          v175 = *((float *)v311[0] + 3);
          v174 = *((float *)v311[0] + 4);
          box3dToCentroidSizeAngle((float32x4_t *)v18, (uint64_t *)__p);
          if (v174 >= v175)
            v176 = v175;
          else
            v176 = v174;
          if (v176 <= 0.2)
            goto LABEL_102;
          v177 = *((float *)__p[0] + 4);
          if (v177 >= *((float *)__p[0] + 3))
            v177 = *((float *)__p[0] + 3);
          if (v177 <= 0.2)
          {
LABEL_102:
            v208 = v370;
            *(_OWORD *)(v16 + 64) = v369;
            *(_OWORD *)(v16 + 80) = v208;
            v209 = v372;
            *(_OWORD *)(v16 + 96) = v371;
            *(_OWORD *)(v16 + 112) = v209;
            v210 = v366;
            *(float32x4_t *)v16 = v365;
            *(_OWORD *)(v16 + 16) = v210;
            v211 = v368;
            *(_OWORD *)(v16 + 32) = v367;
            *(_OWORD *)(v16 + 48) = v211;
            v212 = v362;
            *(_OWORD *)(v18 + 64) = v361;
            *(_OWORD *)(v18 + 80) = v212;
            v213 = v364;
            *(_OWORD *)(v18 + 96) = v363;
            *(_OWORD *)(v18 + 112) = v213;
            v214 = v358;
            *(float32x4_t *)v18 = v357;
            *(_OWORD *)(v18 + 16) = v214;
            v215 = v360;
            *(_OWORD *)(v18 + 32) = v359;
            *(_OWORD *)(v18 + 48) = v215;
            ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (v311[0])
            {
              v311[1] = v311[0];
              operator delete(v311[0]);
            }
            v62 = 7;
            goto LABEL_165;
          }
          __p[1] = __p[0];
          operator delete(__p[0]);
          if (v311[0])
          {
            v311[1] = v311[0];
            operator delete(v311[0]);
          }
        }
        v378[0] = v292;
        objc_msgSend(MEMORY[0x24BDBCF20], "setWithArray:", &unk_24F24ACF0, *(_OWORD *)&v282, *(_OWORD *)&v283);
        v178 = (void *)objc_claimAutoreleasedReturnValue();
        v379[0] = v178;
        v378[1] = v166;
        objc_msgSend(MEMORY[0x24BDBCF20], "setWithArray:", &unk_24F24AD08);
        v179 = (void *)objc_claimAutoreleasedReturnValue();
        v379[1] = v179;
        v378[2] = CFSTR("Cabinet");
        objc_msgSend(MEMORY[0x24BDBCF20], "setWithArray:", &unk_24F24AD20);
        v180 = (void *)objc_claimAutoreleasedReturnValue();
        v379[2] = v180;
        objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v379, v378, 3);
        v181 = objc_claimAutoreleasedReturnValue();

        v286 = (void *)v181;
        if ((int)(-1227133513 * ((uint64_t)(a1[1] - *a1) >> 5)) >= 1)
        {
          v183 = 0;
          v184 = (id *)(v15 + 224 * v301 + 128);
          v185 = 0xFFFFFFC000000020 * ((uint64_t)(a1[1] - *a1) >> 5);
          while (1)
          {
            v312 = 0u;
            v313 = 0u;
            *(_OWORD *)v311 = 0u;
            box3dIou((float32x4_t *)(*a1 + v183), &v315, 0, (uint64_t)v311);
            if ((!objc_msgSend(*v184, "isEqualToString:", CFSTR("Cabinet"))
               || (objc_msgSend(*(id *)(*a1 + v183 + 128), "isEqualToString:", CFSTR("Chair")) & 1) == 0)
              && (!objc_msgSend(*v184, "isEqualToString:", v166)
               || !objc_msgSend(*(id *)(*a1 + v183 + 128), "isEqualToString:", CFSTR("Cabinet"))
               || *(float *)(*a1 + v183 + 72) >= (float)(*(float *)(v16 + 72) + 0.1))
              && *((float *)&v311[1] + 1) > 0.6)
            {
              break;
            }
            v183 += 224;
            if (v185 == v183)
              goto LABEL_89;
          }
          ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
          _OULoggingGetOSLogForCategoryObjectUnderstanding();
          v216 = objc_claimAutoreleasedReturnValue();
          v186 = v286;
          if (os_log_type_enabled(v216, OS_LOG_TYPE_DEBUG))
            ou3dod::MaybeClipExtendLShapeObjects();

          v217 = v370;
          *(_OWORD *)(v16 + 64) = v369;
          *(_OWORD *)(v16 + 80) = v217;
          v218 = v372;
          *(_OWORD *)(v16 + 96) = v371;
          *(_OWORD *)(v16 + 112) = v218;
          v219 = v366;
          *(float32x4_t *)v16 = v365;
          *(_OWORD *)(v16 + 16) = v219;
          v220 = v368;
          *(_OWORD *)(v16 + 32) = v367;
          *(_OWORD *)(v16 + 48) = v220;
          v221 = v362;
          *(_OWORD *)(v18 + 64) = v361;
          *(_OWORD *)(v18 + 80) = v221;
          v222 = v364;
          *(_OWORD *)(v18 + 96) = v363;
          *(_OWORD *)(v18 + 112) = v222;
          v223 = v358;
          *(float32x4_t *)v18 = v357;
          *(_OWORD *)(v18 + 16) = v223;
          v224 = v360;
          v62 = 8;
          *(_OWORD *)(v18 + 32) = v359;
          *(_OWORD *)(v18 + 48) = v224;
          goto LABEL_164;
        }
LABEL_89:
        v186 = v286;
        ShouldForceExtendCorner = ou3dod::ShouldForceExtendCorner((id *)v16, (const OUBox3d *)v18, v182);
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v188 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
          ou3dod::MaybeClipExtendLShapeObjects();

        if (((a8 | ShouldForceExtendCorner) & 1) == 0)
        {
          v189 = v15 + 224 * v301;
          v191 = *(void **)(v189 + 128);
          v190 = (_QWORD *)(v189 + 128);
          if ((objc_msgSend(v191, "isEqualToString:", CFSTR("Cabinet")) & 1) == 0)
          {
            objc_msgSend(v286, "objectForKeyedSubscript:", *v190);
            v192 = (void *)objc_claimAutoreleasedReturnValue();
            ou3dod::extractClassPoints(v192, &v315, v293, v311);

            v193 = (char *)v311[1] - (char *)v311[0];
            if ((void *)((char *)v311[1] - (char *)v311[0]) > (void *)0x27F)
              goto LABEL_110;
            if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
              ou3dod::MaybeClipExtendLShapeObjects(v193 >> 4, v188, v194);

            if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
            {
              v196 = ou3dod::Compute2DOverlapRatio((ou3dod *)&v365, (const box3d *)&v357, (const box3d *)&v315, v195);
              ou3dod::MaybeClipExtendLShapeObjects((uint64_t)v377, v188, v197, v196);
            }

            if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
              ou3dod::MaybeClipExtendLShapeObjects();

            if (ou3dod::Compute2DOverlapRatio((ou3dod *)&v365, (const box3d *)&v357, (const box3d *)&v315, v198) >= 0.5)
            {
LABEL_110:
              v62 = 7;
              v199 = 1;
            }
            else
            {
              ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
              v199 = 0;
              v200 = v370;
              *(_OWORD *)(v16 + 64) = v369;
              *(_OWORD *)(v16 + 80) = v200;
              v201 = v372;
              *(_OWORD *)(v16 + 96) = v371;
              *(_OWORD *)(v16 + 112) = v201;
              v202 = v366;
              *(float32x4_t *)v16 = v365;
              *(_OWORD *)(v16 + 16) = v202;
              v203 = v368;
              *(_OWORD *)(v16 + 32) = v367;
              *(_OWORD *)(v16 + 48) = v203;
              v204 = v362;
              *(_OWORD *)(v18 + 64) = v361;
              *(_OWORD *)(v18 + 80) = v204;
              v205 = v364;
              *(_OWORD *)(v18 + 96) = v363;
              *(_OWORD *)(v18 + 112) = v205;
              v206 = v358;
              *(float32x4_t *)v18 = v357;
              *(_OWORD *)(v18 + 16) = v206;
              v207 = v360;
              v62 = 5;
              *(_OWORD *)(v18 + 32) = v359;
              *(_OWORD *)(v18 + 48) = v207;
            }
            if (v311[0])
            {
              v311[1] = v311[0];
              operator delete(v311[0]);
            }
            if ((v199 & 1) == 0)
            {
LABEL_164:

LABEL_165:
              if (v314[0])
              {
                v314[1] = v314[0];
                operator delete(v314[0]);
              }
              goto LABEL_167;
            }
          }
        }
        box3dToCentroidSizeAngle((float32x4_t *)v16, (uint64_t *)v310);
        if (*((float *)v310[0] + 3) >= *((float *)v310[0] + 4))
          v225 = *((float *)v310[0] + 3);
        else
          v225 = *((float *)v310[0] + 4);
        box3dToCentroidSizeAngle((float32x4_t *)v18, (uint64_t *)v309);
        if (*((float *)v309[0] + 3) >= *((float *)v309[0] + 4))
          v226 = *((float *)v309[0] + 3);
        else
          v226 = *((float *)v309[0] + 4);
        if (a5)
        {
          v375 = v292;
          v376 = v166;
          v311[1] = 0;
          *(_QWORD *)&v312 = 0;
          v311[0] = 0;
          __p[0] = v311;
          LOBYTE(__p[1]) = 0;
          v227 = (char *)operator new(0x10uLL);
          v311[0] = v227;
          v311[1] = v227;
          v228 = v227 + 16;
          *(_QWORD *)&v312 = v227 + 16;
          *(_QWORD *)v227 = v375;
          *((_QWORD *)v227 + 1) = v376;
          v311[1] = v227 + 16;
          if (v311[0] == v227 + 16)
          {
            v231 = 0;
          }
          else
          {
            v229 = (id *)(v15 + 224 * v301 + 128);
            v230 = (char *)v311[0] + 8;
            do
            {
              v231 = objc_msgSend(*v229, "isEqualToString:", *((_QWORD *)v230 - 1));
              if (v230 == v228)
                v232 = 1;
              else
                v232 = v231;
              v230 += 8;
            }
            while (v232 != 1);
          }
          v233 = v225 < v226 ? v231 : 0;
          __p[0] = v311;
          std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          for (k = 8; k != -8; k -= 8)

          if (v233)
          {
            v235 = v370;
            *(_OWORD *)(v16 + 64) = v369;
            *(_OWORD *)(v16 + 80) = v235;
            v236 = v372;
            *(_OWORD *)(v16 + 96) = v371;
            *(_OWORD *)(v16 + 112) = v236;
            v237 = v366;
            *(float32x4_t *)v16 = v365;
            *(_OWORD *)(v16 + 16) = v237;
            v238 = v368;
            *(_OWORD *)(v16 + 32) = v367;
            *(_OWORD *)(v16 + 48) = v238;
            v239 = v362;
            *(_OWORD *)(v18 + 64) = v361;
            *(_OWORD *)(v18 + 80) = v239;
            v240 = v364;
            *(_OWORD *)(v18 + 96) = v363;
            *(_OWORD *)(v18 + 112) = v240;
            v241 = v358;
            *(float32x4_t *)v18 = v357;
            *(_OWORD *)(v18 + 16) = v241;
            v242 = v360;
            v62 = 6;
            *(_OWORD *)(v18 + 32) = v359;
            *(_OWORD *)(v18 + 48) = v242;
LABEL_160:
            if (v309[0])
            {
              v309[1] = v309[0];
              operator delete(v309[0]);
            }
            if (v310[0])
            {
              v310[1] = v310[0];
              operator delete(v310[0]);
            }
            goto LABEL_164;
          }
        }
        v244 = *(float32x4_t *)v16;
        v243 = *(float32x4_t *)(v16 + 16);
        v245 = v288.i64[0];
        v246 = vsub_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v289.f32);
        v247 = (int32x2_t)vmul_f32(v246, v246);
        v248 = *(float32x4_t *)(v16 + 32);
        v249 = *(float32x4_t *)(v16 + 48);
        v250 = vsub_f32(*(float32x2_t *)v248.f32, *(float32x2_t *)v289.f32);
        v251 = (int32x2_t)vmul_f32(v250, v250);
        v252 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v247, v251), (float32x2_t)vzip2_s32(v247, v251)));
        v253 = vsub_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v288.f32);
        v254 = (int32x2_t)vmul_f32(v253, v253);
        v255 = vsub_f32(*(float32x2_t *)v248.f32, *(float32x2_t *)v288.f32);
        v256 = (int32x2_t)vmul_f32(v255, v255);
        v257 = vsub_f32(*(float32x2_t *)v16, *(float32x2_t *)v294.f32);
        v258 = (int32x2_t)vmul_f32(v257, v257);
        v259 = vsub_f32(*(float32x2_t *)v249.f32, *(float32x2_t *)v294.f32);
        v260 = (int32x2_t)vmul_f32(v259, v259);
        v261 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v254, v258), (float32x2_t)vzip2_s32(v254, v258)));
        v262 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v256, v260), (float32x2_t)vzip2_s32(v256, v260)));
        v263 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v261, v262), (int8x8_t)v262, (int8x8_t)v261);
        v264 = vcgt_f32((float32x2_t)vzip2_s32(v263, v252), (float32x2_t)vzip1_s32(v263, v252));
        if ((v264.i8[0] & 1) != 0)
        {
          if ((v264.i8[4] & 1) != 0)
          {
            *(_DWORD *)(v16 + 8) = v244.i32[2];
            v265 = vsubq_f32(vaddq_f32(v288, v244), v243).u64[0];
            *(_QWORD *)v16 = v265;
            *(_QWORD *)(v16 + 64) = v265;
            *(_DWORD *)(v16 + 24) = v243.i32[2];
            *(_QWORD *)(v16 + 16) = v288.i64[0];
            v266 = (uint64_t *)(v16 + 80);
          }
          else
          {
            *(_DWORD *)(v16 + 56) = v249.i32[2];
            v269 = vsubq_f32(vaddq_f32(v288, v249), v248).u64[0];
            *(_QWORD *)(v16 + 48) = v269;
            *(_QWORD *)(v16 + 112) = v269;
            *(_DWORD *)(v16 + 40) = v248.i32[2];
            *(_QWORD *)(v16 + 32) = v288.i64[0];
            v266 = (uint64_t *)(v16 + 96);
          }
        }
        else
        {
          if ((v264.i8[4] & 1) != 0)
          {
            *(_DWORD *)(v16 + 24) = v243.i32[2];
            v267 = vsubq_f32(vaddq_f32(v294, v243), v244).u64[0];
            *(_QWORD *)(v16 + 16) = v267;
            *(_DWORD *)(v16 + 8) = v244.i32[2];
            *(_QWORD *)v16 = v294.i64[0];
            *(_QWORD *)(v16 + 80) = v267;
            v245 = v294.i64[0];
            v268 = v287;
            v266 = (uint64_t *)(v16 + 64);
LABEL_144:
            *v266 = v245;
            v306 = 0;
            v307 = 0;
            v308 = 0;
            if (v268 >= 1)
            {
              v271 = 0;
              v272 = v268;
              do
              {
                if (v271 != v301 && v271 != v300)
                {
                  v273 = *v299;
                  v312 = 0u;
                  v313 = 0u;
                  v274 = (float32x4_t *)(v273 + 224 * v271);
                  *(_OWORD *)v311 = 0u;
                  box3dIou(v274, (float32x4_t *)v16, 0, (uint64_t)v311);
                  v304 = 0u;
                  v305 = 0u;
                  *(_OWORD *)__p = 0u;
                  box3dIou(v274, (float32x4_t *)v18, 0, (uint64_t)__p);
                  memset(v302, 0, sizeof(v302));
                  box3dIou(v274, &v315, 0, (uint64_t)v302);
                  if (*((float *)&v311[1] + 1) > 0.2 || *((float *)&__p[1] + 1) > 0.2 || *((float *)v302 + 3) > 0.2)
                  {
                    if (os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG))
                    {
                      v280 = ou3dod::Compute2DOverlapRatio((ou3dod *)v16, (const box3d *)v18, (const box3d *)v274, v275);
                      *(_DWORD *)buf = 134217984;
                      v374 = v280;
                      _os_log_debug_impl(&dword_2294C8000, v188, OS_LOG_TYPE_DEBUG, "[3DOD Lshape merge] 2D Overlap Ratio %f", buf, 0xCu);
                    }

                    if (ou3dod::Compute2DOverlapRatio((ou3dod *)v16, (const box3d *)v18, (const box3d *)v274, v276) > 0.6)
                    {
                      *(_QWORD *)(*v297 + ((v271 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v271;
                      v277 = (const OUBox3d *)(*v299 + 224 * v271);
                      v278 = v307;
                      if ((unint64_t)v307 >= v308)
                      {
                        v279 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v306, v277);
                      }
                      else
                      {
                        OUBox3d::OUBox3d(v307, v277);
                        v279 = (OUBox3d *)((char *)v278 + 224);
                      }
                      v307 = v279;
                    }
                  }
                }
                ++v271;
              }
              while (v271 != v272);
            }
            ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, (const OUBox3d *)1);
            v311[0] = &v306;
            std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)v311);
            v62 = 0;
            goto LABEL_160;
          }
          *(_DWORD *)(v16 + 40) = v248.i32[2];
          v270 = vsubq_f32(vaddq_f32(v294, v248), v249).u64[0];
          *(_QWORD *)(v16 + 32) = v270;
          *(_DWORD *)(v16 + 56) = v249.i32[2];
          *(_QWORD *)(v16 + 48) = v294.i64[0];
          *(_QWORD *)(v16 + 96) = v270;
          v266 = (uint64_t *)(v16 + 112);
          v245 = v294.i64[0];
        }
        v268 = v287;
        goto LABEL_144;
      }
    }
    else if (v140 >= 0.15)
    {
      goto LABEL_56;
    }
    v148 = -64;
    do
    {
      v149 = (__int32 *)(v15 + 224 * v301 + 72 + v148);
      v149[16] = v139;
      v150 = (__int32 *)(v15 + 224 * v300 + 72 + v148);
      v150[16] = v139;
      *v149 = v136;
      *v150 = v136;
      v148 += 16;
    }
    while (v148);
    goto LABEL_56;
  }
  ou3dod::SetForceExtendCornerFlag((id *)v16, (const OUBox3d *)v18, 0);
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v119 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
    ou3dod::MaybeClipExtendLShapeObjects();

  v62 = 2;
LABEL_167:
  if (v347[0])
  {
    v347[1] = v347[0];
    operator delete(v347[0]);
  }
  v13 = v293;
  if (v348[0])
  {
    v348[1] = v348[0];
    operator delete(v348[0]);
  }
LABEL_171:

  return v62;
}

void sub_2294FCF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  void *a68;
  void *v68;
  void *v70;
  void *v71;

  if (__p)
    operator delete(__p);

  if (a68)
    operator delete(a68);
  v70 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v70;
    operator delete(v70);
  }
  v71 = (void *)STACK[0x408];
  if (STACK[0x408])
  {
    STACK[0x410] = (unint64_t)v71;
    operator delete(v71);
  }

  _Unwind_Resume(a1);
}

void ou3dod::LShapeBeautification(_QWORD *a1, unint64_t a2, unint64_t a3, void *a4, int a5, uint64_t *a6, _QWORD *a7, _QWORD *a8)
{
  id v15;
  float v16;
  float v17;
  uint64_t v18;
  char *v19;
  __CFString *v20;
  char *v21;
  _BOOL4 v22;
  uint64_t v23;
  id v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  int v29;
  __CFString *v30;
  uint64_t v31;
  _QWORD *v32;
  void *__p;
  char *v34;
  _QWORD *v35;
  void **p_p;
  char v37;

  v15 = a4;
  if (((*(_QWORD *)(*a7 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0
    && ((*(_QWORD *)(*a7 + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
  {
    v32 = a1;
    v16 = boxVolume((const box3d *)(*a6 + 224 * a2));
    v17 = boxVolume((const box3d *)(*a6 + 224 * a3));
    if (v16 <= v17)
      v18 = a2;
    else
      v18 = a3;
    if (v16 > v17)
      a3 = a2;
    v31 = *a6;
    v34 = 0;
    v35 = 0;
    __p = 0;
    p_p = &__p;
    v37 = 0;
    v30 = CFSTR("Sofa");
    v19 = (char *)operator new(8uLL);
    __p = v19;
    v34 = v19;
    v35 = v19 + 8;
    v20 = v30;
    *(_QWORD *)v19 = v20;
    v34 = v19 + 8;
    if (__p == v19 + 8)
    {
      v22 = 0;
    }
    else
    {
      v21 = (char *)__p - 8;
      while (!objc_msgSend(*(id *)(v31 + 224 * v18 + 128), "isEqualToString:", *((_QWORD *)v21 + 1)))
      {
        v21 += 8;
        if (v21 == v19)
        {
          v22 = 0;
          goto LABEL_15;
        }
      }
      v22 = (float)(*(float *)(*a6 + 224 * a3 + 72) - *(float *)(*a6 + 224 * v18 + 72)) > 0.15;
    }
LABEL_15:
    p_p = &__p;
    std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);

    if (v22)
      v23 = a3;
    else
      v23 = v18;
    if (!v22)
      v18 = a3;
    objc_msgSend(*(id *)(*a6 + 224 * v18 + 144), "UUIDString");
    v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v24, "UTF8String"));
    v25 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(a8, (unsigned __int8 *)&__p);
    if (SHIBYTE(v35) < 0)
      operator delete(__p);

    if (v25)
      v26 = v18;
    else
      v26 = v23;
    if (v25)
      v27 = v23;
    else
      v27 = v18;
    objc_msgSend(*(id *)(*a6 + 224 * v26 + 144), "UUIDString");
    v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v28, "UTF8String"));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)a8, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if (SHIBYTE(v35) < 0)
      operator delete(__p);

    v29 = ou3dod::MaybeClipExtendLShapeObjects(v32, v26, v27, v15, a5, a6, a7, 0);
    if (a5 && v29 == 6)
      ou3dod::MaybeClipExtendLShapeObjects(v32, v27, v26, v15, 1, a6, a7, 0);
  }

}

void sub_2294FD464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  void *v20;
  void *v21;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(_QWORD *a1, char **a2, char **a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, *a3);
  return a1;
}

void sub_2294FD528(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::find<std::pair<std::string,std::string>>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  char v16;
  char v17;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v17, (uint64_t)a2);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v16, (uint64_t)(a2 + 24));
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = v5 ^ v4;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v5 ^ v4;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    v13 = (uint64_t)(a1 + 4);
    do
    {
      v14 = *((_QWORD *)v12 + 1);
      if (v7 == v14)
      {
        if ((std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](v13, v12 + 16, a2) & 1) != 0)
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v6)
            v14 %= *(_QWORD *)&v6;
        }
        else
        {
          v14 &= *(_QWORD *)&v6 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = *(unsigned __int8 **)v12;
    }
    while (v12);
  }
  return v12;
}

{
  unint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  char v16;
  char v17;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v17, (uint64_t)a2);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v16, (uint64_t)(a2 + 24));
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = v5 ^ v4;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v5 ^ v4;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    v13 = (uint64_t)(a1 + 4);
    do
    {
      v14 = *((_QWORD *)v12 + 1);
      if (v14 == v7)
      {
        if ((std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](v13, v12 + 16, a2) & 1) != 0)
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v6)
            v14 %= *(_QWORD *)&v6;
        }
        else
        {
          v14 &= *(_QWORD *)&v6 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = *(unsigned __int8 **)v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  uint64_t result;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v12 = a2[47];
  if ((v12 & 0x80u) == 0)
    v13 = a2[47];
  else
    v13 = *((_QWORD *)a2 + 4);
  v14 = a3[47];
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *((_QWORD *)a3 + 4);
  if (v13 != v14)
    return 0;
  v16 = (const void **)(a2 + 24);
  v19 = (unsigned __int8 *)*((_QWORD *)a3 + 3);
  v18 = a3 + 24;
  v17 = v19;
  if (v15 >= 0)
    v20 = v18;
  else
    v20 = v17;
  if ((v12 & 0x80) != 0)
    return memcmp(*v16, v20, *((_QWORD *)a2 + 4)) == 0;
  if (!a2[47])
    return 1;
  v21 = v12 - 1;
  do
  {
    v23 = *(unsigned __int8 *)v16;
    v16 = (const void **)((char *)v16 + 1);
    v22 = v23;
    v25 = *v20++;
    v24 = v25;
    v27 = v21-- != 0;
    result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::string> const,BOOL>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];
  char v26;

  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v25, (uint64_t)a2);
  v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v26, (uint64_t)(a2 + 24)) ^ v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_2294FDC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), *a3);
  v8[64] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2294FDD14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_2294FDDA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_2294FE024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void _GLOBAL__sub_I_OU3DLShapeObjectMergerUtils_mm()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t i;
  uint64_t j;
  void *context;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __CFString *v36;
  int v37;
  __CFString *v38;
  int v39;
  __CFString *v40;
  int v41;
  __CFString *v42;
  int v43;
  __CFString *v44;
  int v45;
  __CFString *v46;
  int v47;
  __CFString *v48;
  int v49;
  __CFString *v50;
  int v51;
  __CFString *v52;
  int v53;
  id v54;
  int v55;
  __CFString *v56;
  int v57;
  __CFString *v58;
  int v59;
  __CFString *v60;
  int v61;
  __CFString *v62;
  int v63;
  __CFString *v64;
  int v65;
  id v66;
  int v67;
  __CFString *v68;
  int v69;
  id v70;
  int v71;
  __CFString *v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x22E2CB070]();
  LODWORD(v21) = 0;
  *((_QWORD *)&v21 + 1) = CFSTR("Unknown");
  LODWORD(v22) = 1;
  *((_QWORD *)&v22 + 1) = *((id *)&v21 + 1);
  LODWORD(v23) = 2;
  *((_QWORD *)&v23 + 1) = *((id *)&v22 + 1);
  LODWORD(v24) = 3;
  *((_QWORD *)&v24 + 1) = *((id *)&v23 + 1);
  LODWORD(v25) = 4;
  *((_QWORD *)&v25 + 1) = *((id *)&v24 + 1);
  LODWORD(v26) = 5;
  *((_QWORD *)&v26 + 1) = *((id *)&v25 + 1);
  LODWORD(v27) = 6;
  v20 = CFSTR("Door");
  *((_QWORD *)&v27 + 1) = v20;
  LODWORD(v28) = 7;
  v19 = CFSTR("Window");
  *((_QWORD *)&v28 + 1) = v19;
  LODWORD(v29) = 8;
  *((_QWORD *)&v29 + 1) = *((id *)&v26 + 1);
  LODWORD(v30) = 9;
  v17 = CFSTR("Fireplace");
  *((_QWORD *)&v30 + 1) = v17;
  LODWORD(v31) = 10;
  *((_QWORD *)&v31 + 1) = *((id *)&v29 + 1);
  LODWORD(v32) = 11;
  *((_QWORD *)&v32 + 1) = *((id *)&v31 + 1);
  LODWORD(v33) = 12;
  v18 = CFSTR("Stairs");
  *((_QWORD *)&v33 + 1) = v18;
  LODWORD(v34) = 13;
  v13 = CFSTR("Bed");
  *((_QWORD *)&v34 + 1) = v13;
  LODWORD(v35) = 14;
  v36 = CFSTR("Cabinet");
  v37 = 15;
  v16 = CFSTR("Chair");
  v38 = v16;
  v39 = 16;
  v40 = v36;
  v41 = 17;
  v42 = v40;
  v43 = 18;
  v15 = CFSTR("Sofa");
  v44 = v15;
  v45 = 19;
  v14 = CFSTR("Table");
  v46 = v14;
  v47 = 20;
  v12 = CFSTR("Toilet");
  v48 = v12;
  v49 = 21;
  v0 = CFSTR("Sink");
  v50 = v0;
  v51 = 22;
  v11 = CFSTR("Bathtub");
  v52 = v11;
  v53 = 23;
  v54 = *((id *)&v32 + 1);
  v55 = 24;
  v1 = CFSTR("Refrigerator");
  v56 = v1;
  v57 = 25;
  v2 = CFSTR("Stove");
  v58 = v2;
  v59 = 26;
  v3 = CFSTR("Washer");
  v60 = v3;
  v61 = 27;
  v4 = CFSTR("Oven");
  v62 = v4;
  v63 = 28;
  v5 = CFSTR("Dishwasher");
  v64 = v5;
  v65 = 29;
  v66 = v54;
  v67 = 30;
  v6 = v42;
  v68 = v6;
  v69 = 31;
  v70 = v66;
  v71 = 32;
  v7 = CFSTR("Screen");
  v72 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v21, 33);
  for (i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_2294C8000);
  v31 = xmmword_229560C88;
  v32 = unk_229560C98;
  v33 = xmmword_229560CA8;
  v34 = unk_229560CB8;
  v27 = xmmword_229560C48;
  v28 = unk_229560C58;
  v29 = xmmword_229560C68;
  v30 = unk_229560C78;
  v23 = xmmword_229560C08;
  v24 = unk_229560C18;
  v25 = xmmword_229560C28;
  v26 = unk_229560C38;
  v21 = xmmword_229560BE8;
  v22 = unk_229560BF8;
  v35 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v21, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_2294C8000);
  LODWORD(v21) = 0;
  *((_QWORD *)&v21 + 1) = v6;
  LODWORD(v22) = 1;
  *((_QWORD *)&v22 + 1) = v1;
  LODWORD(v23) = 2;
  *((_QWORD *)&v23 + 1) = CFSTR("Shelf");
  LODWORD(v24) = 3;
  *((_QWORD *)&v24 + 1) = v2;
  LODWORD(v25) = 4;
  *((_QWORD *)&v25 + 1) = v13;
  LODWORD(v26) = 5;
  *((_QWORD *)&v26 + 1) = v0;
  LODWORD(v27) = 6;
  *((_QWORD *)&v27 + 1) = v3;
  LODWORD(v28) = 7;
  *((_QWORD *)&v28 + 1) = v12;
  LODWORD(v29) = 8;
  *((_QWORD *)&v29 + 1) = v11;
  LODWORD(v30) = 9;
  *((_QWORD *)&v30 + 1) = v4;
  LODWORD(v31) = 10;
  *((_QWORD *)&v31 + 1) = v5;
  LODWORD(v32) = 11;
  *((_QWORD *)&v32 + 1) = v17;
  LODWORD(v33) = 12;
  *((_QWORD *)&v33 + 1) = CFSTR("Stool");
  LODWORD(v34) = 13;
  *((_QWORD *)&v34 + 1) = v16;
  LODWORD(v35) = 14;
  v36 = v14;
  v37 = 15;
  v38 = v7;
  v39 = 16;
  v40 = v15;
  v41 = 17;
  v42 = v18;
  v43 = 18;
  v44 = v19;
  v45 = 19;
  v46 = v20;
  v47 = 20;
  v48 = CFSTR("BuildInCabinet");
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v21, 21);
  for (j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_2294C8000);
  objc_autoreleasePoolPop(context);
}

void sub_2294FE6C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 328; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t std::map<NSString * {__strong},std::set<unsigned char>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void OUCannyEdgeDetectorSemantic::OUCannyEdgeDetectorSemantic(OUCannyEdgeDetectorSemantic *this, id *a2)
{
  _QWORD *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  double v16;
  double v17;
  const __CFDictionary *v18;
  std::logic_error *exception;
  int v20;
  void *__p[3];
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)OUCannyEdgeDetectorInterface::OUCannyEdgeDetectorInterface((uint64_t)this, (uint64_t)a2);
  *v4 = &off_24F243090;
  v4[19] = 0;
  v4[20] = 0;
  *((_QWORD *)this + 21) = a2[7];
  v20 = 1038323257;
  std::vector<float>::vector(__p, 9uLL, &v20);
  v5 = objc_alloc(MEMORY[0x24BDDE3A8]);
  v6 = objc_msgSend(v5, "initWithDevice:kernelWidth:kernelHeight:weights:", *((_QWORD *)this + 1), 3, 3, __p[0]);
  v7 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v6;

  if (*((__CFString **)this + 21) == CFSTR("Unknown"))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] Object type shouldn't be unknown for edge detection.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture((uint64_t)this, (unsigned int *)this + 18, objc_msgSend(*((id *)this + 5), "pixelFormat"));
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v8;

  OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture((uint64_t)this, (unsigned int *)this + 16, 10);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v10;

  if (*((_DWORD *)this + 16) != *((_DWORD *)this + 18) || *((_DWORD *)this + 17) != *((_DWORD *)this + 19))
  {
    OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture((uint64_t)this, (unsigned int *)this + 18, 10);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v12;

  }
  v14 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE398]), "initWithDevice:", *((_QWORD *)this + 1));
  v15 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v14;

  LODWORD(v16) = *((_DWORD *)a2 + 1);
  objc_msgSend(*((id *)this + 7), "setHighThreshold:", v16);
  LODWORD(v17) = *(_DWORD *)a2;
  objc_msgSend(*((id *)this + 7), "setLowThreshold:", v17);
  objc_msgSend(*((id *)this + 7), "setUseFastMode:", *((unsigned __int8 *)a2 + 8));
  v22 = *MEMORY[0x24BDC5668];
  v23[0] = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1);
  v18 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], *((int *)this + 16), *((int *)this + 17), 0x4C303038u, v18, (CVPixelBufferRef *)this + 18);

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2294FE9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void **v12;
  void *v13;

  __cxa_free_exception(v13);
  if (__p)
    operator delete(__p);

  OUCannyEdgeDetectorInterface::~OUCannyEdgeDetectorInterface(v12);
  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorInterface::~OUCannyEdgeDetectorInterface(void **this)
{
  *this = off_24F243838;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);

}

void OUCannyEdgeDetectorSemantic::GenerateSourceTexture(uint64_t a1, void *a2)
{
  __CVBuffer *v3;
  __CVBuffer *v4;
  int Width;
  int Height;
  unsigned __int8 *BaseAddress;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  unsigned __int8 v25;
  __IOSurface *IOSurface;
  void *v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  std::logic_error *exception;
  id v33;

  v33 = a2;
  if (objc_msgSend(v33, "semanticLabelBufferOnWideCamera"))
    v3 = (__CVBuffer *)objc_msgSend(v33, "semanticLabelBufferOnWideCamera");
  else
    v3 = (__CVBuffer *)objc_msgSend(v33, "semanticLabelBuffer");
  v4 = v3;
  if (CVPixelBufferGetWidth(v3) != *(_DWORD *)(a1 + 64) || CVPixelBufferGetHeight(v4) != *(_DWORD *)(a1 + 68))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] Semantic edge detection image size doesn't match.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  OUCannyEdgeDetectorSemantic::CopyCVPixelBuffer((CVPixelBufferRef *)a1, v4);
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)(a1 + 144), 0);
  Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)(a1 + 144));
  Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 144));
  BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 144));
  v8 = qword_2540CA128;
  if (qword_2540CA128)
  {
    v9 = BaseAddress;
    v10 = *(_QWORD *)(a1 + 168);
    v11 = &qword_2540CA128;
    do
    {
      v12 = *(_QWORD *)(v8 + 32);
      v13 = v12 >= v10;
      if (v12 >= v10)
        v14 = (uint64_t *)v8;
      else
        v14 = (uint64_t *)(v8 + 8);
      if (v13)
        v11 = (uint64_t *)v8;
      v8 = *v14;
    }
    while (*v14);
    if (v11 != &qword_2540CA128 && v10 >= v11[4])
    {
      v16 = (Width * Height);
      if (v16 << 32)
      {
        v17 = &v9[(int)v16];
        v18 = v15 + 1;
        do
        {
          v19 = *v18;
          if (!*v18)
            goto LABEL_30;
          v20 = *v9;
          v21 = v15 + 1;
          do
          {
            v22 = *(unsigned __int8 *)(v19 + 25);
            v23 = v22 >= v20;
            if (v22 >= v20)
              v24 = (uint64_t *)v19;
            else
              v24 = (uint64_t *)(v19 + 8);
            if (v23)
              v21 = (uint64_t *)v19;
            v19 = *v24;
          }
          while (*v24);
          if (v21 != v18 && *((unsigned __int8 *)v21 + 25) <= v20)
            v25 = *(_BYTE *)(*v15 + 25);
          else
LABEL_30:
            v25 = 0;
          *v9++ = v25;
        }
        while (v9 != v17);
      }
      IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a1 + 144));
      v27 = (void *)MEMORY[0x24BDDD740];
      v28 = IOSurfaceGetWidth(IOSurface);
      objc_msgSend(v27, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 10, v28, IOSurfaceGetHeight(IOSurface), 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(*(id *)(a1 + 8), "newTextureWithDescriptor:iosurface:plane:", v29, IOSurface, 0);
      v31 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v30;

    }
  }

}

void sub_2294FECCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *OUCannyEdgeDetectorSemantic::CopyCVPixelBuffer(CVPixelBufferRef *this, CVPixelBufferRef pixelBuffer)
{
  int Height;
  size_t BytesPerRow;
  void *BaseAddress;
  void *v7;

  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  CVPixelBufferLockBaseAddress(this[18], 0);
  v7 = CVPixelBufferGetBaseAddress(this[18]);
  return memcpy(v7, BaseAddress, Height * BytesPerRow);
}

_QWORD *std::map<NSString * {__strong},std::set<unsigned char>>::at(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = v2[4];
      if (v3 >= v4)
        break;
      v2 = (_QWORD *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void OUCannyEdgeDetectorSemantic::PostProcess(id *this)
{
  id v2;
  id v3;

  objc_msgSend(this[2], "commandBuffer");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(this[19], "encodeToCommandBuffer:sourceTexture:destinationTexture:");
  objc_msgSend(v3, "commit");
  objc_msgSend(v3, "waitUntilCompleted");
  v2 = this[5];
  this[5] = this[20];
  this[20] = v2;

}

void sub_2294FEE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorSemantic::~OUCannyEdgeDetectorSemantic(OUCannyEdgeDetectorSemantic *this)
{
  __CVBuffer *v2;

  *(_QWORD *)this = &off_24F243090;
  v2 = (__CVBuffer *)*((_QWORD *)this + 18);
  if (v2)
    CVPixelBufferRelease(v2);

  OUCannyEdgeDetectorInterface::~OUCannyEdgeDetectorInterface((void **)this);
}

{
  OUCannyEdgeDetectorSemantic::~OUCannyEdgeDetectorSemantic(this);
  JUMPOUT(0x22E2CAAE8);
}

_QWORD *std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(_QWORD *a1, id *a2, uint64_t a3)
{
  *a1 = *a2;
  std::set<unsigned char>::set[abi:ne180100](a1 + 1, a3);
  return a1;
}

void sub_2294FEF20(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned char>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned char>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_2294FEF70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned char>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned char,std::__tree_node<unsigned char,void *> *,long>>(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>(v5, v6, v4 + 25, v4 + 25);
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, _BYTE *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<unsigned char>::__find_equal<unsigned char>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v7 + 25) = *a4;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned char>::__find_equal<unsigned char>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int8 *)a2 + 25), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int8 *)v10 + 25) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int8 *)(v16 + 25);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 25))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int8 *)(v20 + 25);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2294FF29C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<unsigned char>::set[abi:ne180100](uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v5 = a3;
    do
    {
      std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      --v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2294FF31C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<NSString * {__strong},std::set<unsigned char>>::map[abi:ne180100](uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__emplace_hint_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},std::set<unsigned char>> const&>((uint64_t **)a1, v4, a2, (id *)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2294FF398(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__emplace_hint_unique_key_args<NSString * {__strong},std::pair<NSString * const {__strong},std::set<unsigned char>> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, id *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__find_equal<NSString * {__strong}>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__construct_node<std::pair<NSString * const {__strong},std::set<unsigned char>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<int>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__find_equal<NSString * {__strong}>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::__construct_node<std::pair<NSString * const {__strong},std::set<unsigned char>> const&>@<X0>(uint64_t a1@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100](v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2294FF63C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},std::set<unsigned char>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100](_QWORD *a1, id *a2)
{
  uint64_t v3;

  v3 = (uint64_t)(a2 + 1);
  *a1 = *a2;
  std::set<unsigned char>::set[abi:ne180100](a1 + 1, v3);
  return a1;
}

void sub_2294FF698(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},std::set<unsigned char>>,void *>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<int>::destroy(a2 + 40, *(_QWORD **)(a2 + 48));

  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::set<unsigned char>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::set<unsigned char>>>>::destroy(a1, a2[1]);
    std::__tree<int>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);

    operator delete(a2);
  }
}

void _GLOBAL__sub_I_OUCannyEdgeDetectorSemantic_mm()
{
  void *v0;
  uint64_t i;
  unsigned __int8 v2;
  _BYTE v3[8];
  _QWORD *v4;
  unsigned __int8 v5;
  _BYTE v6[8];
  _QWORD *v7;
  unsigned __int8 v8;
  _BYTE v9[8];
  _QWORD *v10;
  __int16 v11;
  char v12;
  _BYTE v13[8];
  _QWORD *v14;
  __int16 v15;
  char v16;
  _BYTE v17[8];
  _QWORD *v18;
  unint64_t v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[5];

  v23[4] = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x22E2CB070]();
  v15 = 4366;
  v16 = 30;
  std::set<unsigned char>::set[abi:ne180100]((uint64_t)v17, (unsigned __int8 *)&v15, 3);
  std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(v19, (id *)OU3DObjectTypeCabinet, (uint64_t)v17);
  v11 = 4366;
  v12 = 30;
  std::set<unsigned char>::set[abi:ne180100]((uint64_t)v13, (unsigned __int8 *)&v11, 3);
  std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(v20, (id *)OU3DObjectTypeShelf, (uint64_t)v13);
  v8 = 19;
  std::set<unsigned char>::set[abi:ne180100]((uint64_t)v9, &v8, 1);
  std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(v21, (id *)OU3DObjectTypeTable, (uint64_t)v9);
  v5 = 18;
  std::set<unsigned char>::set[abi:ne180100]((uint64_t)v6, &v5, 1);
  std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(v22, (id *)OU3DObjectTypeSofa, (uint64_t)v6);
  v2 = 32;
  std::set<unsigned char>::set[abi:ne180100]((uint64_t)v3, &v2, 1);
  std::pair<NSString * const {__strong},std::set<unsigned char>>::pair[abi:ne180100]<true,0>(v23, (id *)OU3DObjectTypeScreen, (uint64_t)v3);
  for (i = 0; i != -20; i -= 4)
  {
    std::__tree<int>::destroy((uint64_t)&v23[i + 1], (_QWORD *)v23[i + 2]);

  }
  std::__tree<int>::destroy((uint64_t)v3, v4);
  std::__tree<int>::destroy((uint64_t)v6, v7);
  std::__tree<int>::destroy((uint64_t)v9, v10);
  std::__tree<int>::destroy((uint64_t)v13, v14);
  std::__tree<int>::destroy((uint64_t)v17, v18);
  objc_autoreleasePoolPop(v0);
}

void sub_2294FF97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  _GLOBAL__sub_I_OUCannyEdgeDetectorSemantic_mm_cold_1(v31 + 160, (uint64_t)&a30);
  std::__tree<int>::destroy((uint64_t)&a11, a12);
  std::__tree<int>::destroy((uint64_t)&a15, a16);
  std::__tree<int>::destroy((uint64_t)&a19, a20);
  std::__tree<int>::destroy((uint64_t)&a23, a24);
  std::__tree<int>::destroy((uint64_t)&a27, *(_QWORD **)(v30 + 8));
  _Unwind_Resume(a1);
}

void sub_2294FFDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_229500028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22950013C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22950065C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object)
{
  void *v15;

  _Unwind_Resume(a1);
}

void vectorFromNSArray(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  unint64_t i;
  void *v5;
  int v6;
  int v7;

  v3 = a1;
  v7 = 0;
  std::vector<float>::vector(a2, objc_msgSend(v3, "count"), &v7);
  for (i = 0; objc_msgSend(v3, "count") > i; ++i)
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", i);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "floatValue");
    *(_DWORD *)(*a2 + 4 * i) = v6;

  }
}

void sub_229500848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2295009F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_229500C58(_Unwind_Exception *a1, uint64_t a2, OUBox3d *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_229500D94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CollectPointCloudFromBox(uint64_t *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  unint64_t v28;
  float32x4_t *v29;
  _OWORD *f32;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  float32x4_t *v36;
  char *v37;
  char *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;

  v45 = a2[3];
  v47 = *a2;
  v40 = a2[4];
  v41 = a2[6];
  v43 = a2[1];
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)a3, (a1[1] - *a1) >> 4);
  v6 = *a1;
  v5 = a1[1];
  if (v5 != *a1)
  {
    v7 = 0;
    v8 = vsubq_f32(v47, v45);
    v9 = vmulq_f32(v8, v8);
    v9.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).u32[0];
    v10 = sqrtf(v9.f32[0]);
    v11 = vrsqrte_f32((float32x2_t)v9.u32[0]);
    v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11)));
    v13 = vmulq_n_f32(v8, vmul_f32(v12, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v12, v12))).f32[0]);
    v14 = vsubq_f32(v47, v43);
    v15 = vmulq_f32(v14, v14);
    v15.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).u32[0];
    v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
    v17 = vmul_f32(v16, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)));
    v44 = vmulq_n_f32(v14, vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17))).f32[0]);
    v46 = v13;
    v18 = v10 * 0.5;
    v19 = sqrtf(v15.f32[0]) * 0.5;
    v20 = vsubq_f32(v47, v40);
    v21 = vmulq_f32(v20, v20);
    v22 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0])* 0.5;
    v21.i64[0] = 0x3F0000003F000000;
    v21.i64[1] = 0x3F0000003F000000;
    v42 = vmulq_f32(vaddq_f32(v47, v41), v21);
    do
    {
      if (vabds_f32(COERCE_FLOAT(*(_QWORD *)(v6 + 16 * v7 + 8)), v42.f32[2]) <= v22)
      {
        v48 = *(float32x4_t *)(v6 + 16 * v7);
        v23 = vsubq_f32(v48, v42);
        v24 = vmulq_f32(v46, v23);
        v25 = vmulq_f32(v44, v23);
        v26 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
        if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]) <= v18&& v26 <= v19)
        {
          v29 = *(float32x4_t **)(a3 + 8);
          v28 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v29 >= v28)
          {
            v31 = ((uint64_t)v29 - *(_QWORD *)a3) >> 4;
            if ((unint64_t)(v31 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v32 = v28 - *(_QWORD *)a3;
            v33 = v32 >> 3;
            if (v32 >> 3 <= (unint64_t)(v31 + 1))
              v33 = v31 + 1;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
              v34 = 0xFFFFFFFFFFFFFFFLL;
            else
              v34 = v33;
            if (v34)
              v35 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v34);
            else
              v35 = 0;
            v36 = (float32x4_t *)&v35[16 * v31];
            *v36 = v48;
            f32 = (_OWORD *)v36[1].f32;
            v38 = *(char **)a3;
            v37 = *(char **)(a3 + 8);
            if (v37 != *(char **)a3)
            {
              do
              {
                v39 = *((float32x4_t *)v37 - 1);
                v37 -= 16;
                v36[-1] = v39;
                --v36;
              }
              while (v37 != v38);
              v37 = *(char **)a3;
            }
            *(_QWORD *)a3 = v36;
            *(_QWORD *)(a3 + 8) = f32;
            *(_QWORD *)(a3 + 16) = &v35[16 * v34];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *v29 = v48;
            f32 = (_OWORD *)v29[1].f32;
          }
          *(_QWORD *)(a3 + 8) = f32;
          v6 = *a1;
          v5 = a1[1];
        }
      }
      ++v7;
    }
    while (v7 < (v5 - v6) >> 4);
  }
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE13shrink_to_fitEv(a3);
}

void sub_229501070(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE13shrink_to_fitEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 4;
  if (v6 < (v3 - (uint64_t)v4) >> 4)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 16 * v6;
    }
    else
    {
      v7 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[16 * v6];
      v11 = &v7[16 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_OWORD *)v8 - 1);
          v8 -= 16;
          *(_OWORD *)(v12 - 16) = v13;
          v12 -= 16;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void CollectPointCloudFromBox(OUPointCloud *a1@<X0>, float32x4_t *a2@<X1>, _QWORD *a3@<X8>)
{
  OUPointCloud *v4;
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  float32x4_t v62;
  float32x4_t v63;
  __int128 v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  void *__p;
  char *v72;
  char *v73;
  void *v74;
  char *v75;
  char *v76;
  void *v77;
  char *v78;
  char *v79;

  v4 = a1;
  v65 = *a2;
  v67 = a2[1];
  v69 = a2[3];
  v62 = a2[4];
  v63 = a2[6];
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  __p = 0;
  v72 = 0;
  v73 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&v77, -[OUPointCloud count](v4, "count"));
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE7reserveEm(&v74, -[OUPointCloud count](v4, "count"));
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE7reserveEm(&__p, -[OUPointCloud count](v4, "count"));
  v5 = 0;
  v6 = vsubq_f32(v65, v69);
  v7 = vmulq_f32(v6, v6);
  v7.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
  v8 = sqrtf(v7.f32[0]);
  v9 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9)));
  v11 = vmulq_n_f32(v6, vmul_f32(v10, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v10, v10))).f32[0]);
  v12 = vsubq_f32(v65, v67);
  v13 = vmulq_f32(v12, v12);
  v13.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u32[0];
  v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
  v68 = vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
  v70 = v11;
  v16 = v8 * 0.5;
  v17 = sqrtf(v13.f32[0]) * 0.5;
  v18 = vsubq_f32(v65, v62);
  v19 = vmulq_f32(v18, v18);
  v20 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0])* 0.5;
  v19.i64[0] = 0x3F0000003F000000;
  v19.i64[1] = 0x3F0000003F000000;
  v66 = vmulq_f32(vaddq_f32(v65, v63), v19);
  while (-[OUPointCloud count](v4, "count") > v5)
  {
    v21 = -[OUPointCloud points](v4, "points");
    if (vabds_f32(COERCE_FLOAT(*(_QWORD *)(v21 + 16 * v5 + 8)), v66.f32[2]) <= v20)
    {
      v22 = vsubq_f32(*(float32x4_t *)(v21 + 16 * v5), v66);
      v23 = vmulq_f32(v70, v22);
      v24 = vmulq_f32(v68, v22);
      v25 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
      if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]) <= v16&& v25 <= v17)
      {
        v64 = *(_OWORD *)(v21 + 16 * v5);
        v27 = v78;
        if (v78 >= v79)
        {
          v29 = (v78 - (_BYTE *)v77) >> 4;
          if ((unint64_t)(v29 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v30 = (v79 - (_BYTE *)v77) >> 3;
          if (v30 <= v29 + 1)
            v30 = v29 + 1;
          if ((unint64_t)(v79 - (_BYTE *)v77) >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v30;
          if (v31)
            v32 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v79, v31);
          else
            v32 = 0;
          v33 = &v32[16 * v29];
          *(_OWORD *)v33 = v64;
          v28 = v33 + 16;
          v35 = (char *)v77;
          v34 = v78;
          if (v78 != v77)
          {
            do
            {
              v36 = *((_OWORD *)v34 - 1);
              v34 -= 16;
              *((_OWORD *)v33 - 1) = v36;
              v33 -= 16;
            }
            while (v34 != v35);
            v34 = (char *)v77;
          }
          v77 = v33;
          v78 = v28;
          v79 = &v32[16 * v31];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_OWORD *)v78 = v64;
          v28 = v27 + 16;
        }
        v78 = v28;
        v37 = -[OUPointCloud semanticLabels](v4, "semanticLabels");
        v38 = v37;
        v39 = v75;
        if (v75 >= v76)
        {
          v41 = (v75 - (_BYTE *)v74) >> 2;
          if ((unint64_t)(v41 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v42 = (v76 - (_BYTE *)v74) >> 1;
          if (v42 <= v41 + 1)
            v42 = v41 + 1;
          if ((unint64_t)(v76 - (_BYTE *)v74) >= 0x7FFFFFFFFFFFFFFCLL)
            v43 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v43 = v42;
          if (v43)
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v76, v43);
          else
            v44 = 0;
          v45 = &v44[4 * v41];
          *(_DWORD *)v45 = *(_DWORD *)(v38 + 4 * v5);
          v40 = v45 + 4;
          v47 = (char *)v74;
          v46 = v75;
          if (v75 != v74)
          {
            do
            {
              v48 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *((_DWORD *)v45 - 1) = v48;
              v45 -= 4;
            }
            while (v46 != v47);
            v46 = (char *)v74;
          }
          v74 = v45;
          v75 = v40;
          v76 = &v44[4 * v43];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_DWORD *)v75 = *(_DWORD *)(v37 + 4 * v5);
          v40 = v39 + 4;
        }
        v75 = v40;
        v49 = -[OUPointCloud semanticVotes](v4, "semanticVotes");
        v50 = v49;
        v51 = v72;
        if (v72 >= v73)
        {
          v53 = (v72 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v53 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v54 = (v73 - (_BYTE *)__p) >> 2;
          if (v54 <= v53 + 1)
            v54 = v53 + 1;
          if ((unint64_t)(v73 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v54;
          if (v55)
            v56 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v73, v55);
          else
            v56 = 0;
          v57 = &v56[8 * v53];
          *(_QWORD *)v57 = *(_QWORD *)(v50 + 8 * v5);
          v52 = v57 + 8;
          v59 = (char *)__p;
          v58 = v72;
          if (v72 != __p)
          {
            do
            {
              v60 = *((_QWORD *)v58 - 1);
              v58 -= 8;
              *((_QWORD *)v57 - 1) = v60;
              v57 -= 8;
            }
            while (v58 != v59);
            v58 = (char *)__p;
          }
          __p = v57;
          v72 = v52;
          v73 = &v56[8 * v55];
          if (v58)
            operator delete(v58);
        }
        else
        {
          *(_QWORD *)v72 = *(_QWORD *)(v49 + 8 * v5);
          v52 = v51 + 8;
        }
        v72 = v52;
      }
    }
    ++v5;
  }
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE13shrink_to_fitEv((uint64_t)&v77);
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE13shrink_to_fitEv((uint64_t)&v74);
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE13shrink_to_fitEv((uint64_t)&__p);
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv3_fNS_9allocatorIS4_EEEENS3_IDv4_hNS5_IS8_EEEENS3_IDv4_tNS5_ISB_EEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_SA_SD_EJEJEJRS7_RSA_RSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(a3, (uint64_t)&v77, (uint64_t)&v74, (uint64_t)&__p);
  if (__p)
  {
    v72 = (char *)__p;
    operator delete(__p);
  }
  if (v74)
  {
    v75 = (char *)v74;
    operator delete(v74);
  }
  if (v77)
  {
    v78 = (char *)v77;
    operator delete(v77);
  }

}

void sub_229501640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  void *v28;

  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  if (a27)
    operator delete(a27);

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE13shrink_to_fitEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 2;
  if (v6 < (v3 - (uint64_t)v4) >> 2)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 4 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[4 * v6];
      v11 = &v7[4 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *(_DWORD *)(v12 - 4) = v13;
          v12 -= 4;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE13shrink_to_fitEv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

_QWORD *NormalizePointCloud@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  const void *v3;
  uint64_t v4;
  _QWORD *v5;
  float32x4_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  unint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  unint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  unint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (const void *)*result;
  v4 = result[1];
  if (*result == v4)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    v5 = result;
    v6 = 0uLL;
    v7 = (float32x4_t *)*result;
    do
    {
      v8 = *v7++;
      v6 = vaddq_f32(v6, v8);
    }
    while (v7 != (float32x4_t *)v4);
    v19 = v6;
    v9 = (v4 - (uint64_t)v3) >> 4;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v20, v3, v4, v9);
    v11 = v20;
    if (v5[1] == *v5)
    {
      v10.i32[0] = -1.0;
    }
    else
    {
      v12 = 0;
      v10.f32[0] = (float)v9;
      v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
      v13 = vdivq_f32(v19, v10);
      v10.i32[0] = -1.0;
      do
      {
        *(float32x4_t *)(v11 + 16 * v12) = vsubq_f32(*(float32x4_t *)(v11 + 16 * v12), v13);
        v11 = v20;
        v14 = vmulq_f32(*(float32x4_t *)(v20 + 16 * v12), *(float32x4_t *)(v20 + 16 * v12));
        v15 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
        if (v10.f32[0] < v15)
          v10.f32[0] = v15;
        ++v12;
      }
      while (v12 < (uint64_t)(v5[1] - *v5) >> 4);
    }
    if (v21 == v11)
    {
      v18 = v11;
    }
    else
    {
      v16 = 0;
      v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
      do
      {
        *(float32x4_t *)(v11 + 16 * v16) = vdivq_f32(*(float32x4_t *)(v11 + 16 * v16), v17);
        ++v16;
        v11 = v20;
        v18 = v21;
      }
      while (v16 < (v21 - v20) >> 4);
    }
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 16) = v22;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

double FarthestPointSample@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double result@<D0>)
{
  unint64_t v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float *v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float *v22;
  BOOL v23;
  float *v24;
  float v25;
  float *v26;
  float v27;
  float v28;
  __int128 v29;
  __int128 v30;
  void *__p[3];
  void *v32[3];
  void *v33[3];
  void *v34;
  float *v35;
  _OWORD v36[3];
  __int128 v37;
  uint64_t v38;

  if (a4 > 0 && (v9 = (a1[1] - *a1) >> 4, v9 == (uint64_t)(a2[1] - *a2) >> 2) && v9 == (uint64_t)(a3[1] - *a3) >> 3)
  {
    if (v9 <= a4)
    {
      _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv3_fNS_9allocatorIS4_EEEENS3_IDv4_hNS5_IS8_EEEENS3_IDv4_tNS5_ISB_EEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_SA_SD_EJEJEJRKS7_RKSA_RKSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSN_IJDpT2_EEEDpOT3_(v36, (uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
      v29 = v36[1];
      *(_OWORD *)a5 = v36[0];
      *(_OWORD *)(a5 + 16) = v29;
      result = *(double *)&v36[2];
      v30 = v37;
      *(_OWORD *)(a5 + 32) = v36[2];
      *(_OWORD *)(a5 + 48) = v30;
      *(_QWORD *)(a5 + 64) = v38;
      *(_BYTE *)(a5 + 72) = 1;
    }
    else
    {
      v11 = a4;
      LODWORD(v36[0]) = 2139095039;
      std::vector<float>::vector(&v34, v9, v36);
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(v33, v11);
      _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEEC2Em(v32, v11);
      _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEEC2Em(__p, v11);
      v12 = rand();
      v13 = 0;
      v14 = v12 % v9;
      v15 = *a1;
      do
      {
        v16 = 0;
        *((_OWORD *)v33[0] + v13) = *(_OWORD *)(v15 + 16 * v14);
        *((_DWORD *)v32[0] + v13) = *(_DWORD *)(*a2 + 4 * v14);
        *((_QWORD *)__p[0] + v13) = *(_QWORD *)(*a3 + 8 * v14);
        v15 = *a1;
        v17 = *(float32x4_t *)(*a1 + 16 * v14);
        v18 = (float *)v34;
        do
        {
          v19 = vsubq_f32(*(float32x4_t *)(v15 + 16 * v16), v17);
          v20 = vmulq_f32(v19, v19);
          v21 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0];
          if (v21 < v18[v16])
            v18[v16] = v21;
          ++v16;
        }
        while (v9 != v16);
        v22 = v18 + 1;
        v23 = v18 == v35 || v22 == v35;
        v24 = v18;
        if (!v23)
        {
          v25 = *v18;
          v24 = v18;
          v26 = v18 + 1;
          do
          {
            v27 = *v26++;
            v28 = v27;
            if (v25 < v27)
            {
              v25 = v28;
              v24 = v22;
            }
            v22 = v26;
          }
          while (v26 != v35);
        }
        v14 = v24 - v18;
        ++v13;
      }
      while (v13 != v11);
      _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv3_fNS_9allocatorIS4_EEEENS3_IDv4_hNS5_IS8_EEEENS3_IDv4_tNS5_ISB_EEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_SA_SD_EJEJEJRS7_RSA_RSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(v36, (uint64_t)v33, (uint64_t)v32, (uint64_t)__p);
      *(_OWORD *)a5 = v36[0];
      *(_QWORD *)(a5 + 16) = *(_QWORD *)&v36[1];
      v36[0] = 0uLL;
      *(_OWORD *)(a5 + 24) = *(_OWORD *)((char *)&v36[1] + 8);
      *(_QWORD *)(a5 + 40) = *((_QWORD *)&v36[2] + 1);
      memset(&v36[1], 0, 32);
      result = *(double *)&v37;
      *(_OWORD *)(a5 + 48) = v37;
      *(_QWORD *)(a5 + 64) = v38;
      *(_BYTE *)(a5 + 72) = 1;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v32[0])
      {
        v32[1] = v32[0];
        operator delete(v32[0]);
      }
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      if (v34)
      {
        v35 = (float *)v34;
        operator delete(v34);
      }
    }
  }
  else
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 72) = 0;
  }
  return result;
}

void sub_229501BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv3_fNS_9allocatorIS4_EEEENS3_IDv4_hNS5_IS8_EEEENS3_IDv4_tNS5_ISB_EEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_SA_SD_EJEJEJRS7_RSA_RSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1 + 6, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  return a1;
}

void sub_229501CB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv3_fNS_9allocatorIS4_EEEENS3_IDv4_hNS5_IS8_EEEENS3_IDv4_tNS5_ISB_EEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_SA_SD_EJEJEJRKS7_RKSA_RKSD_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSN_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1 + 6, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  return a1;
}

void sub_229501D6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL OU3DSSDConfig::IsValidConfig(OU3DSSDConfig *this)
{
  BOOL v1;
  _BOOL4 v4;

  if (*(int *)this < 1)
    return 0;
  v1 = !*((_DWORD *)this + 4) || *((_DWORD *)this + 5) == 0;
  if (v1 || *((_DWORD *)this + 6) == 0)
    return 0;
  v4 = *((float *)this + 8) > 0.0;
  if (*((float *)this + 9) <= 0.0)
    v4 = 0;
  return *((float *)this + 10) > 0.0 && v4;
}

__n128 *OU3DSSDConfig::OU3DSSDConfig(__n128 *a1, unsigned __int32 a2, __n128 a3, __n128 a4, __n128 a5)
{
  std::logic_error *exception;

  a1->n128_u32[0] = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4].n128_u8[0] = 0;
  if ((unint64_t)(MGGetSInt64Answer() - 32800) <= 0xE0)
    a1[4].n128_u8[0] = 1;
  if (!OU3DSSDConfig::IsValidConfig((OU3DSSDConfig *)a1))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] The voxelSSD config is not valid.");
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return a1;
}

void sub_229501E84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_229501F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229502068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_229502200(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2CAAE8](v1, 0x10B0C40E05788A7);
  _Unwind_Resume(a1);
}

void sub_229502398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_229502644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  _ZNSt3__15tupleIJNS_6vectorIDv4_hNS_9allocatorIS2_EEEENS1_IDv4_tNS3_IS6_EEEEEED1Ev((uint64_t)&a20);
  v24 = *(void **)(v22 - 120);
  if (v24)
  {
    *(_QWORD *)(v22 - 112) = v24;
    operator delete(v24);
  }

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__15tupleIJNS_6vectorIDv4_hNS_9allocatorIS2_EEEENS1_IDv4_tNS3_IS6_EEEEEED1Ev(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_229502948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_229502A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_229502AC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229502D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x22E2CAAE8](v21, 0x10B2C40427CE99DLL);

  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::__emplace_unique_key_args<int,std::pair<int const,NSString * {__strong}> const&>(a1, a2, (uint64_t)a2);
      a2 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_229502EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<int,NSString * {__strong}>,std::__unordered_map_hasher<int,std::__hash_value_type<int,NSString * {__strong}>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,NSString * {__strong}>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,NSString * {__strong}>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

ou3dor::OU3DObjectRepresentation *std::unique_ptr<ou3dor::OU3DObjectRepresentation>::reset[abi:ne180100](ou3dor::OU3DObjectRepresentation **a1, ou3dor::OU3DObjectRepresentation *a2)
{
  ou3dor::OU3DObjectRepresentation *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ou3dor::OU3DObjectRepresentation::~OU3DObjectRepresentation(result);
    JUMPOUT(0x22E2CAAE8);
  }
  return result;
}

void ou3dor::OU3DObjectRepresentation::~OU3DObjectRepresentation(ou3dor::OU3DObjectRepresentation *this)
{
  uint64_t v2;
  id v3;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)this + 128);
  utils::OUImageUtils::~OUImageUtils((ou3dor::OU3DObjectRepresentation *)((char *)this + 96));

  std::unique_ptr<ou3dor::OU3DORParser>::reset[abi:ne180100]((OU3DORIDTree **)this + 6, 0);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(id *)this;
  *(_QWORD *)this = 0;
  if (v3)
    (*(void (**)(id))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void utils::OUImageUtils::~OUImageUtils(utils::OUImageUtils *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  while (v2 != v3)
  {
    free(*(void **)(v2 + 24));
    v2 += 32;
  }
  free(*((void **)this + 3));
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

OU3DORIDTree *std::unique_ptr<ou3dor::OU3DORParser>::reset[abi:ne180100](OU3DORIDTree **a1, OU3DORIDTree *a2)
{
  OU3DORIDTree *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    OU3DORIDTree::~OU3DORIDTree(result);
    JUMPOUT(0x22E2CAAE8);
  }
  return result;
}

void OU3DORIDTree::~OU3DORIDTree(OU3DORIDTree *this)
{
  OU3DORIDTree::Node *v2;

  v2 = (OU3DORIDTree::Node *)*((_QWORD *)this + 3);
  if (v2)
  {
    OU3DORIDTree::Node::~Node(v2);
    MEMORY[0x22E2CAAE8]();
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void OU3DORIDTree::Node::~Node(OU3DORIDTree::Node *this)
{
  void *v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OU3DORIDTree::Node *v7;

  v3 = (char *)this + 24;
  v2 = (void *)*((_QWORD *)this + 3);
  v4 = *((_QWORD *)v3 + 1) - (_QWORD)v2;
  if ((int)(v4 >> 3) >= 1)
  {
    v5 = 0;
    v6 = v4 & 0x7FFFFFFF8;
    do
    {
      v7 = *(OU3DORIDTree::Node **)(*((_QWORD *)this + 3) + v5);
      if (v7)
      {
        OU3DORIDTree::Node::~Node(v7);
        MEMORY[0x22E2CAAE8]();
      }
      v5 += 8;
    }
    while (v6 != v5);
    v2 = (void *)*((_QWORD *)this + 3);
  }
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

utils::OUFrameWriter *std::unique_ptr<utils::OUFrameWriter>::reset[abi:ne180100](utils::OUFrameWriter **a1, utils::OUFrameWriter *a2)
{
  utils::OUFrameWriter *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    utils::OUFrameWriter::~OUFrameWriter(result);
    JUMPOUT(0x22E2CAAE8);
  }
  return result;
}

void _GLOBAL__sub_I_OUPipelineOnline_mm()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  void *context;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __CFString *v37;
  int v38;
  const __CFString *v39;
  int v40;
  __CFString *v41;
  int v42;
  __CFString *v43;
  int v44;
  const __CFString *v45;
  int v46;
  const __CFString *v47;
  int v48;
  __CFString *v49;
  int v50;
  const __CFString *v51;
  int v52;
  const __CFString *v53;
  int v54;
  __CFString *v55;
  int v56;
  const __CFString *v57;
  int v58;
  const __CFString *v59;
  int v60;
  const __CFString *v61;
  int v62;
  const __CFString *v63;
  int v64;
  const __CFString *v65;
  int v66;
  __CFString *v67;
  int v68;
  const __CFString *v69;
  int v70;
  const __CFString *v71;
  int v72;
  const __CFString *v73;
  int v74;
  const __CFString *v75;
  int v76;
  const __CFString *v77;
  int v78;
  const __CFString *v79;
  int v80;
  const __CFString *v81;
  int v82;
  const __CFString *v83;
  int v84;
  const __CFString *v85;
  int v86;
  const __CFString *v87;
  int v88;
  const __CFString *v89;
  int v90;
  const __CFString *v91;
  int v92;
  const __CFString *v93;
  int v94;
  const __CFString *v95;
  int v96;
  const __CFString *v97;
  int v98;
  const __CFString *v99;
  int v100;
  const __CFString *v101;
  int v102;
  const __CFString *v103;
  int v104;
  const __CFString *v105;
  int v106;
  const __CFString *v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x22E2CB070]();
  LODWORD(v22) = 0;
  *((_QWORD *)&v22 + 1) = CFSTR("Unknown");
  LODWORD(v23) = 1;
  *((_QWORD *)&v23 + 1) = *((id *)&v22 + 1);
  LODWORD(v24) = 2;
  *((_QWORD *)&v24 + 1) = *((id *)&v23 + 1);
  LODWORD(v25) = 3;
  *((_QWORD *)&v25 + 1) = *((id *)&v24 + 1);
  LODWORD(v26) = 4;
  *((_QWORD *)&v26 + 1) = *((id *)&v25 + 1);
  LODWORD(v27) = 5;
  *((_QWORD *)&v27 + 1) = *((id *)&v26 + 1);
  LODWORD(v28) = 6;
  v21 = CFSTR("Door");
  *((_QWORD *)&v28 + 1) = v21;
  LODWORD(v29) = 7;
  v20 = CFSTR("Window");
  *((_QWORD *)&v29 + 1) = v20;
  LODWORD(v30) = 8;
  *((_QWORD *)&v30 + 1) = *((id *)&v27 + 1);
  LODWORD(v31) = 9;
  v18 = CFSTR("Fireplace");
  *((_QWORD *)&v31 + 1) = v18;
  LODWORD(v32) = 10;
  *((_QWORD *)&v32 + 1) = *((id *)&v30 + 1);
  LODWORD(v33) = 11;
  *((_QWORD *)&v33 + 1) = *((id *)&v32 + 1);
  LODWORD(v34) = 12;
  v19 = CFSTR("Stairs");
  *((_QWORD *)&v34 + 1) = v19;
  LODWORD(v35) = 13;
  v14 = CFSTR("Bed");
  *((_QWORD *)&v35 + 1) = v14;
  LODWORD(v36) = 14;
  v37 = CFSTR("Cabinet");
  v38 = 15;
  v17 = CFSTR("Chair");
  v39 = v17;
  v40 = 16;
  v41 = v37;
  v42 = 17;
  v43 = v41;
  v44 = 18;
  v16 = CFSTR("Sofa");
  v45 = v16;
  v46 = 19;
  v15 = CFSTR("Table");
  v47 = v15;
  v48 = 20;
  v13 = CFSTR("Toilet");
  v49 = v13;
  v50 = 21;
  v0 = CFSTR("Sink");
  v51 = v0;
  v52 = 22;
  v12 = CFSTR("Bathtub");
  v53 = v12;
  v54 = 23;
  v55 = (__CFString *)*((id *)&v33 + 1);
  v56 = 24;
  v1 = CFSTR("Refrigerator");
  v57 = v1;
  v58 = 25;
  v2 = CFSTR("Stove");
  v59 = v2;
  v60 = 26;
  v3 = CFSTR("Washer");
  v61 = v3;
  v62 = 27;
  v4 = CFSTR("Oven");
  v63 = v4;
  v64 = 28;
  v5 = CFSTR("Dishwasher");
  v65 = v5;
  v66 = 29;
  v67 = v55;
  v68 = 30;
  v6 = v43;
  v69 = v6;
  v70 = 31;
  v71 = v67;
  v72 = 32;
  v7 = CFSTR("Screen");
  v73 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v22, 33);
  for (i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_2294C8000);
  v32 = xmmword_229560DB0;
  v33 = unk_229560DC0;
  v34 = xmmword_229560DD0;
  v35 = unk_229560DE0;
  v28 = xmmword_229560D70;
  v29 = unk_229560D80;
  v30 = xmmword_229560D90;
  v31 = unk_229560DA0;
  v24 = xmmword_229560D30;
  v25 = unk_229560D40;
  v26 = xmmword_229560D50;
  v27 = unk_229560D60;
  v22 = xmmword_229560D10;
  v23 = unk_229560D20;
  v36 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v22, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_2294C8000);
  LODWORD(v22) = 0;
  *((_QWORD *)&v22 + 1) = v6;
  LODWORD(v23) = 1;
  *((_QWORD *)&v23 + 1) = v1;
  LODWORD(v24) = 2;
  *((_QWORD *)&v24 + 1) = CFSTR("Shelf");
  LODWORD(v25) = 3;
  *((_QWORD *)&v25 + 1) = v2;
  LODWORD(v26) = 4;
  *((_QWORD *)&v26 + 1) = v14;
  LODWORD(v27) = 5;
  *((_QWORD *)&v27 + 1) = v0;
  LODWORD(v28) = 6;
  *((_QWORD *)&v28 + 1) = v3;
  LODWORD(v29) = 7;
  *((_QWORD *)&v29 + 1) = v13;
  LODWORD(v30) = 8;
  *((_QWORD *)&v30 + 1) = v12;
  LODWORD(v31) = 9;
  *((_QWORD *)&v31 + 1) = v4;
  LODWORD(v32) = 10;
  *((_QWORD *)&v32 + 1) = v5;
  LODWORD(v33) = 11;
  *((_QWORD *)&v33 + 1) = v18;
  LODWORD(v34) = 12;
  *((_QWORD *)&v34 + 1) = CFSTR("Stool");
  LODWORD(v35) = 13;
  *((_QWORD *)&v35 + 1) = v17;
  LODWORD(v36) = 14;
  v37 = v15;
  v38 = 15;
  v39 = v7;
  v40 = 16;
  v41 = v16;
  v42 = 17;
  v43 = v19;
  v44 = 18;
  v45 = v20;
  v46 = 19;
  v47 = v21;
  v48 = 20;
  v49 = CFSTR("BuildInCabinet");
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v22, 21);
  for (j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_2294C8000);
  *((_QWORD *)&v22 + 1) = CFSTR("Chair-chair_type-dining");
  LODWORD(v23) = 2;
  *((_QWORD *)&v23 + 1) = CFSTR("Chair-chair_type-swivel");
  LODWORD(v24) = 3;
  *((_QWORD *)&v24 + 1) = CFSTR("Chair-chair_type-other");
  LODWORD(v25) = 4;
  *((_QWORD *)&v25 + 1) = CFSTR("Chair-chair_leg_type-four");
  LODWORD(v26) = 5;
  *((_QWORD *)&v26 + 1) = CFSTR("Chair-chair_leg_type-star");
  LODWORD(v27) = 6;
  *((_QWORD *)&v27 + 1) = CFSTR("Chair-chair_leg_type-other");
  LODWORD(v28) = 7;
  *((_QWORD *)&v28 + 1) = CFSTR("Chair-chair_arm_type-missing");
  LODWORD(v29) = 8;
  *((_QWORD *)&v29 + 1) = CFSTR("Chair-chair_arm_type-existing");
  LODWORD(v30) = 9;
  *((_QWORD *)&v30 + 1) = CFSTR("Chair-chair_back_type-missing");
  LODWORD(v31) = 10;
  *((_QWORD *)&v31 + 1) = CFSTR("Chair-chair_back_type-existing");
  LODWORD(v32) = 11;
  *((_QWORD *)&v32 + 1) = CFSTR("Chair-chair_seat_height-tall_seat");
  LODWORD(v33) = 12;
  *((_QWORD *)&v33 + 1) = CFSTR("Chair-chair_seat_height-normal/low_seat");
  LODWORD(v34) = 13;
  *((_QWORD *)&v34 + 1) = CFSTR("Chair-chair_seat_shape-rectangular");
  LODWORD(v35) = 14;
  *((_QWORD *)&v35 + 1) = CFSTR("Chair-chair_seat_shape-round");
  LODWORD(v36) = 15;
  v37 = CFSTR("Chair-chair_seat_shape-none");
  v38 = 16;
  v39 = CFSTR("Sofa-sofa_type-rectangular");
  v40 = 17;
  v41 = CFSTR("Sofa-sofa_type-lShaped");
  v42 = 18;
  v43 = CFSTR("Sofa-sofa_type-singleSeat");
  v44 = 19;
  v45 = CFSTR("Sofa-sofa_type-lShapedMain");
  v46 = 20;
  v47 = CFSTR("Sofa-sofa_type-lShapedExtension");
  v48 = 21;
  v49 = CFSTR("Sofa-sofa_type-lShapedMiddle");
  v50 = 22;
  v51 = CFSTR("Sofa-sofa_type-other");
  v52 = 23;
  v53 = CFSTR("Sofa-sofa_arm_type-missing");
  v54 = 24;
  v55 = CFSTR("Sofa-sofa_arm_type-two_arms");
  v56 = 25;
  v57 = CFSTR("Sofa-sofa_arm_type-none");
  v58 = 26;
  v59 = CFSTR("Sofa-sofa_back_type-missing");
  v60 = 27;
  v61 = CFSTR("Sofa-sofa_back_type-existing");
  v62 = 28;
  v63 = CFSTR("Table-table_type-desk");
  v64 = 29;
  v65 = CFSTR("Table-table_type-coffee");
  v66 = 30;
  v67 = CFSTR("Table-table_type-dining");
  v68 = 31;
  v69 = CFSTR("Table-table_type-other");
  v70 = 32;
  v71 = CFSTR("Table-table_shape-rectangular");
  v72 = 33;
  v73 = CFSTR("Table-table_shape-lShaped");
  v74 = 34;
  v75 = CFSTR("Table-table_shape-circularElliptic");
  v76 = 35;
  v77 = CFSTR("Table-table_shape-other");
  v78 = 36;
  v79 = CFSTR("Table-table_leg_type-two_leg");
  v80 = 37;
  v81 = CFSTR("Table-table_leg_type-four_leg");
  v82 = 38;
  v83 = CFSTR("Table-table_leg_type-none");
  v84 = 39;
  v85 = CFSTR("Table-table_attribute-with_storage");
  v86 = 40;
  v87 = CFSTR("Table-table_attribute-without_storage");
  v88 = 41;
  v89 = CFSTR("Cabinet-cabinet_type-standalone_cabinet");
  v90 = 42;
  v91 = CFSTR("Cabinet-cabinet_type-kitchen_cabinet");
  v92 = 43;
  v93 = CFSTR("Cabinet-cabinet_type-nightstand");
  v94 = 44;
  v95 = CFSTR("Cabinet-cabinet_type-none");
  v96 = 45;
  v97 = CFSTR("Cabinet-cabinet_attribute-no_countertop");
  v98 = 46;
  v99 = CFSTR("Cabinet-cabinet_attribute-with_countertop");
  v100 = 100;
  v101 = CFSTR("Sofa-sofa_arm_type-existing");
  v102 = 101;
  LODWORD(v22) = 0;
  v103 = CFSTR("Storage-storage_type-cabinet");
  v104 = 102;
  v105 = CFSTR("Storage-storage_type-shelf");
  v106 = 103;
  v107 = CFSTR("Chair-chair_type-stool");
  std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::unordered_map((uint64_t)&ou3dor::k3DORSupportedAttributeTypeMap, (int *)&v22, 50);
  for (k = 792; k != -8; k -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::~unordered_map[abi:ne180100], &ou3dor::k3DORSupportedAttributeTypeMap, &dword_2294C8000);
  objc_autoreleasePoolPop(context);
}

void sub_229503C5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 792; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

void sub_229504EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void **a61)
{
  a61 = (void **)&STACK[0x3C0];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a61);
  a61 = (void **)&STACK[0x3D8];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a61);
  a61 = a18;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&a61);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x3F0], (_QWORD *)STACK[0x3F8]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x408], (_QWORD *)STACK[0x410]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x420], (_QWORD *)STACK[0x428]);
  _Unwind_Resume(a1);
}

void sub_2295050D4()
{
  JUMPOUT(0x2295050CCLL);
}

_anonymous_namespace_::UnionFind *`anonymous namespace'::UnionFind::UnionFind(_anonymous_namespace_::UnionFind *this, int a2)
{
  std::vector<int> *v4;
  std::vector<int>::size_type v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  std::vector<int>::value_type __x;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v4 = (std::vector<int> *)((char *)this + 24);
  v5 = a2;
  *(_OWORD *)this = 0u;
  std::vector<int>::resize((std::vector<int> *)this, a2);
  __x = 0;
  std::vector<int>::resize(v4, v5, &__x);
  v6 = *(_DWORD **)this;
  v7 = (_DWORD *)*((_QWORD *)this + 1);
  if (*(_DWORD **)this != v7)
  {
    v8 = 0;
    do
      *v6++ = v8++;
    while (v6 != v7);
  }
  *((_DWORD *)this + 12) = a2;
  return this;
}

void sub_229505164(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *`anonymous namespace'::UnionFind::unite(uint64_t *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int *i;
  int *j;
  uint64_t v7;
  int v8;

  v3 = *this;
  v4 = (this[1] - *this) >> 2;
  if (v4 > (int)a2 && v4 > (int)a3)
  {
    for (i = (int *)(v3 + 4 * (int)a2); *i != (_DWORD)a2; i = (int *)(v3 + 4 * a2))
    {
      a2 = *(int *)(v3 + 4 * *i);
      *i = a2;
    }
    for (j = (int *)(v3 + 4 * (int)a3); *j != (_DWORD)a3; j = (int *)(v3 + 4 * a3))
    {
      a3 = *(int *)(v3 + 4 * *j);
      *j = a3;
    }
    if ((_DWORD)a2 != (_DWORD)a3)
    {
      v7 = this[3];
      if (*(_DWORD *)(v7 + 4 * (int)a2) >= *(_DWORD *)(v7 + 4 * (int)a3))
      {
        *(_DWORD *)(v3 + 4 * (int)a3) = a2;
        v8 = *(_DWORD *)(v7 + 4 * (int)a2);
        if (v8 == *(_DWORD *)(v7 + 4 * (int)a3))
          *(_DWORD *)(v7 + 4 * (int)a2) = v8 + 1;
      }
      else
      {
        *(_DWORD *)(v3 + 4 * (int)a2) = a3;
      }
      --*((_DWORD *)this + 12);
    }
  }
  return this;
}

float32x2_t `anonymous namespace'::findIntersect(float32x4_t a1, int32x4_t a2, float32x4_t a3, int32x4_t a4)
{
  int32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x2_t v10;

  a1.i32[2] = 1.0;
  a2.i32[2] = 1.0;
  a3.i32[2] = 1.0;
  a4.i32[2] = 1.0;
  v4 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL), vnegq_f32(a1)), (float32x4_t)a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL);
  v6 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a4, a4), (int8x16_t)a4, 0xCuLL), vnegq_f32(a3)), (float32x4_t)a4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), (int8x16_t)a3, 0xCuLL));
  v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v6, v6), (int8x16_t)v6, 0xCuLL);
  v8 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), vnegq_f32(v5)), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
  if (fabsf(*(float *)&v8.i32[1]) >= 0.000001)
  {
    v10.i32[0] = vextq_s8(v8, v8, 8uLL).u32[0];
    v10.i32[1] = v8.i32[0];
    return vdiv_f32(v10, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1));
  }
  else
  {
    return (float32x2_t)vdupq_n_s32(0x7F7FFFFFu).u64[0];
  }
}

void sub_2295054FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_229506B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a64;
  _QWORD *a65;
  char a67;
  char a70;
  void *v71;
  void *v72;

  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  STACK[0x280] = (unint64_t)&a27;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  STACK[0x280] = (unint64_t)&a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  STACK[0x330] = (unint64_t)&a61;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((uint64_t)&a64, a65);
  STACK[0x330] = (unint64_t)&a67;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  _ZNSt3__15tupleIJNS_6vectorIDv4_hNS_9allocatorIS2_EEEENS1_IDv4_tNS3_IS6_EEEEEED1Ev((uint64_t)&a70);
  STACK[0x330] = (unint64_t)&STACK[0x220];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  v71 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v71;
    operator delete(v71);
  }
  v72 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v72;
    operator delete(v72);
  }
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x268], (_QWORD *)STACK[0x270]);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::mergeGivenBoxes(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, int **a4@<X3>, _QWORD *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  __CFString *v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int *v23;
  float *v24;
  int v25;
  float *v26;
  float *v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  int *v34;
  int *v35;
  uint64_t v36;
  std::vector<int>::pointer begin;
  int v38;
  float v39;
  float v40;
  signed int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  int v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  unint64_t v51;
  float32x4_t v52;
  int v53;
  float32x4_t v54;
  char *v55;
  float32x4_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  int v77;
  int v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  int v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t v93;
  BOOL v94;
  int v95;
  int v96;
  float32x4_t v97;
  int8x16_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float *v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  float v106;
  uint64_t v107;
  float32x4_t *v109;
  float32x4_t *v110;
  float v112;
  float v122;
  float v128;
  float v134;
  int v135;
  int v136;
  int v137;
  int **v138;
  uint64_t *v139;
  int *i;
  int v141;
  char v142;
  BOOL v143;
  float v144;
  float v145;
  float v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  int *v154;
  float v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int *v160;
  uint64_t v161;
  BOOL v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  BOOL v167;
  uint64_t v168;
  int v169;
  uint64_t *v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  int **v177;
  int **v178;
  uint64_t v179;
  void *v180[3];
  void *v181;
  float32x4_t *v182;
  void *v183;
  char *v184;
  char *v185;
  void *v186;
  char *v187;
  char *v188;
  void *__p;
  char *v190;
  char *v191;
  _QWORD v192[5];
  std::vector<int> v193;
  void *v194;
  float *v195;
  void *v196[4];
  __int128 __x;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;

  v205 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v14 = a4[1];
  if (*a4 == v14 || (v15 = a1[1], *a1 == v15) || (v16 = v14 - *a4, v16 > 0x6DB6DB6DB6DB6DB7 * ((v15 - *a1) >> 5)))
  {
    *(_WORD *)(a7 + 128) = 0;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    goto LABEL_5;
  }
  std::vector<float>::vector(&v194, v16);
  v17 = *a4;
  v18 = (float *)v194;
  v19 = (char *)a4[1] - (char *)*a4;
  if (v19)
  {
    v20 = v19 >> 2;
    v21 = (unint64_t)(v19 >> 2) > 1;
    v22 = *a3;
    if (!v21)
      v20 = 1;
    v23 = *a4;
    v24 = (float *)v194;
    do
    {
      v25 = *v23++;
      *v24++ = *(float *)(*(_QWORD *)(v22 + 24 * v25) + 12) * *(float *)(*(_QWORD *)(v22 + 24 * v25) + 16);
      --v20;
    }
    while (v20);
  }
  v26 = v18 + 1;
  _ZF = v18 == v195 || v26 == v195;
  v28 = v18;
  if (!_ZF)
  {
    v29 = *v18;
    v28 = v18;
    v30 = v18 + 1;
    do
    {
      v31 = *v30++;
      v32 = v31;
      if (v29 < v31)
      {
        v29 = v32;
        v28 = v26;
      }
      v26 = v30;
    }
    while (v30 != v195);
  }
  v169 = a6;
  v168 = a7;
  v33 = *(float *)(*(_QWORD *)(*a3 + 24 * *(int *)((char *)v17 + (((char *)v28 - (char *)v18) << 30 >> 30))) + 24);
  LODWORD(__x) = 0;
  std::vector<int>::vector(&v193, 0x18uLL, (const std::vector<int>::value_type *)&__x);
  v170 = (uint64_t *)a4;
  v34 = *a4;
  v35 = a4[1];
  if (v34 != v35)
  {
    v36 = *a3;
    begin = v193.__begin_;
    do
    {
      v38 = *v34++;
      v39 = *(float *)(*(_QWORD *)(v36 + 24 * v38) + 24) + 12.5663706 - v33;
      v40 = fmod(v39, 3.14159265);
      v41 = vcvtmd_s64_f64((v40 + 3.14159265) / 0.261799395);
      ++begin[v41];
    }
    while (v34 != v35);
  }
  __x = xmmword_229560E44;
  *(_QWORD *)&v198 = 0x1700000012;
  std::unordered_set<int>::unordered_set((uint64_t)v192, (int *)&__x, 6);
  LODWORD(__x) = 0;
  HIDWORD(v42) = HIDWORD(v170);
  v43 = 0;
  if (v193.__end_ == v193.__begin_)
  {
    v44 = v169;
  }
  else
  {
    v44 = v169;
    do
    {
      v45 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v192, (int *)&__x);
      v46 = __x;
      if (!v45)
      {
        if (v193.__begin_[(int)__x])
          v43 = (v43 + 1);
        else
          v43 = v43;
      }
      LODWORD(__x) = __x + 1;
    }
    while (v46 + 1 < (unint64_t)(v193.__end_ - v193.__begin_));
  }
  v167 = (int)v43 > 3;
  *(double *)v47.i64 = rotationZMatrix(v33);
  v172 = v48;
  v173 = v47;
  v171 = v49;
  __p = 0;
  v190 = 0;
  v191 = 0;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  std::vector<box3d>::vector(&v181, (v170[1] - *v170) >> 2);
  v50 = *v170;
  if (v170[1] == *v170)
  {
    v175 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v97.i64[0] = 0x80000000800000;
    v97.i64[1] = 0x80000000800000;
  }
  else
  {
    v51 = 0;
    v52.i64[0] = 0x80000000800000;
    v52.i64[1] = 0x80000000800000;
    v174 = v52;
    v175 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    HIDWORD(v43) = 0;
    do
    {
      v42 = 0;
      v53 = *(_DWORD *)(v50 + 4 * v51);
      do
      {
        v54 = *(float32x4_t *)(*a1 + 224 * v53 + 16 * v42);
        *((float32x4_t *)v181 + 8 * v51 + v42) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v173, v54.f32[0]), v172, *(float32x2_t *)v54.f32, 1), v171, v54, 2);
        v55 = (char *)v181 + 128 * v51;
        v56 = *(float32x4_t *)&v55[16 * v42];
        v57 = v190;
        v176 = v56;
        if (v190 >= v191)
        {
          v59 = (char *)__p;
          v60 = (v190 - (_BYTE *)__p) >> 2;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v62 = v191 - (_BYTE *)__p;
          if ((v191 - (_BYTE *)__p) >> 1 > v61)
            v61 = v62 >> 1;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
            v63 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          if (v63)
          {
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v191, v63);
            v59 = (char *)__p;
            v57 = v190;
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[4 * v60];
          *(_DWORD *)v65 = v176.i32[0];
          v58 = v65 + 4;
          while (v57 != v59)
          {
            v66 = *((_DWORD *)v57 - 1);
            v57 -= 4;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          __p = v65;
          v190 = v58;
          v191 = &v64[4 * v63];
          if (v59)
            operator delete(v59);
        }
        else
        {
          *(_DWORD *)v190 = v56.i32[0];
          v58 = v57 + 4;
        }
        v190 = v58;
        v67 = *(_DWORD *)&v55[16 * v42 + 4];
        v68 = v187;
        if (v187 >= v188)
        {
          v70 = (char *)v186;
          v71 = (v187 - (_BYTE *)v186) >> 2;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v73 = v188 - (_BYTE *)v186;
          if ((v188 - (_BYTE *)v186) >> 1 > v72)
            v72 = v73 >> 1;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
            v74 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v74 = v72;
          if (v74)
          {
            v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v188, v74);
            v70 = (char *)v186;
            v68 = v187;
          }
          else
          {
            v75 = 0;
          }
          v76 = &v75[4 * v71];
          *(_DWORD *)v76 = v67;
          v69 = v76 + 4;
          while (v68 != v70)
          {
            v77 = *((_DWORD *)v68 - 1);
            v68 -= 4;
            *((_DWORD *)v76 - 1) = v77;
            v76 -= 4;
          }
          v186 = v76;
          v187 = v69;
          v188 = &v75[4 * v74];
          if (v70)
            operator delete(v70);
        }
        else
        {
          *(_DWORD *)v187 = v67;
          v69 = v68 + 4;
        }
        v187 = v69;
        v78 = *(_DWORD *)&v55[16 * v42 + 8];
        v79 = v184;
        if (v184 >= v185)
        {
          v81 = (char *)v183;
          v82 = (v184 - (_BYTE *)v183) >> 2;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v84 = v185 - (_BYTE *)v183;
          if ((v185 - (_BYTE *)v183) >> 1 > v83)
            v83 = v84 >> 1;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
            v85 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v85 = v83;
          if (v85)
          {
            v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v185, v85);
            v81 = (char *)v183;
            v79 = v184;
          }
          else
          {
            v86 = 0;
          }
          v87 = &v86[4 * v82];
          *(_DWORD *)v87 = v78;
          v80 = v87 + 4;
          while (v79 != v81)
          {
            v88 = *((_DWORD *)v79 - 1);
            v79 -= 4;
            *((_DWORD *)v87 - 1) = v88;
            v87 -= 4;
          }
          v183 = v87;
          v184 = v80;
          v185 = &v86[4 * v85];
          if (v81)
            operator delete(v81);
        }
        else
        {
          *(_DWORD *)v184 = v78;
          v80 = v79 + 4;
        }
        v89 = v175;
        v90 = v176;
        v89.i32[3] = 0;
        v90.i32[3] = 0;
        v91 = vminnmq_f32(v89, v90);
        v92 = v174;
        v92.i32[3] = 0;
        v174 = vmaxnmq_f32(v92, v90);
        v175 = v91;
        v184 = v80;
        ++v42;
      }
      while (v42 != 8);
      ++v51;
      v50 = *v170;
      v93 = v170[1] - *v170;
    }
    while (v51 < v93 >> 2);
    v94 = (unint64_t)v93 < 0x10 || CFSTR("Stairs") == v13;
    v44 = v169;
    if (v94)
      goto LABEL_91;
    std::__sort<std::__less<float,float> &,float *>();
    std::__sort<std::__less<float,float> &,float *>();
    std::__sort<std::__less<float,float> &,float *>();
    v97.f32[0] = (float)(unint64_t)((v190 - (_BYTE *)__p) >> 2);
    v95 = (int)(float)(v97.f32[0] * 0.15);
    v96 = (int)(float)(v97.f32[0] * 0.85);
    v97.i32[0] = *((_DWORD *)__p + v95);
    v97.i32[1] = *((_DWORD *)v186 + v95);
    v97.i32[2] = *((_DWORD *)v183 + v95);
    v175 = v97;
    v97.i32[0] = *((_DWORD *)__p + v96);
    v97.i32[1] = *((_DWORD *)v186 + v96);
    v97.i32[2] = *((_DWORD *)v183 + v96);
  }
  v174 = v97;
LABEL_91:
  LODWORD(__x) = 0;
  std::vector<float>::vector(v180, 7uLL, &__x);
  v98 = (int8x16_t)vabdq_f32(v174, v175);
  v99.i64[0] = 0x3F0000003F000000;
  v99.i64[1] = 0x3F0000003F000000;
  v100 = vmulq_f32(vaddq_f32(v174, v175), v99);
  v101 = (float *)v180[0];
  v100.i32[3] = v98.i32[0];
  *(float32x4_t *)v180[0] = v100;
  *((_QWORD *)v101 + 2) = vextq_s8(v98, v98, 4uLL).u64[0];
  v101[6] = v33;
  v203 = 0u;
  v204 = 0u;
  v201 = 0u;
  v202 = 0u;
  v199 = 0u;
  v200 = 0u;
  __x = 0u;
  v198 = 0u;
  centroidSizeAngleToBox3d((uint64_t *)v180, 0, &__x);
  if (v44)
  {
    v178 = 0;
    v179 = 0;
    v177 = 0;
    v102 = *((float *)v180[0] + 4);
    LODWORD(v43) = vcvtps_s32_f32(*((float *)v180[0] + 3) / 0.1);
    std::vector<std::vector<int>>::resize((uint64_t *)&v177, (int)v43);
    LODWORD(v42) = vcvtps_s32_f32(v102 / 0.1);
    if ((int)v43 >= 1)
    {
      v103 = 0;
      do
      {
        std::vector<int>::resize((std::vector<int> *)&v177[v103], (int)v42);
        v103 += 3;
      }
      while (3 * v43 != v103);
    }
    if ((int)v43 >= 1)
    {
      v104 = 0;
      v105 = *(float *)v180[0] - (float)(*((float *)v180[0] + 3) * 0.5);
      v106 = *((float *)v180[0] + 1) - (float)(*((float *)v180[0] + 4) * 0.5);
      do
      {
        if ((int)v42 >= 1)
        {
          v107 = 0;
          _S13 = v105 + (float)((float)(int)v104 * 0.1);
          do
          {
            v109 = (float32x4_t *)v181;
            v110 = v182;
            if (v181 != v182)
            {
              _S15 = v106 + (float)((float)(int)v107 * 0.1);
              do
              {
                box3dToCentroidSizeAngle(v109, (uint64_t *)v196);
                v112 = *((float *)v196[0] + 3) * *((float *)v196[0] + 4);
                _Q1 = *v109;
                _Q5 = v109[1];
                _S3 = _Q5.i32[1];
                __asm
                {
                  FMLS            S4, S3, V1.S[0]
                  FMLA            S4, S13, V5.S[1]
                  FMLS            S4, S15, V5.S[0]
                }
                v122 = (float)(fabsf(_S4) * 0.5) + 0.0;
                if (v122 > v112)
                  goto LABEL_104;
                _S6 = -_Q5.f32[0];
                _Q5 = v109[2];
                __asm
                {
                  FMLA            S7, S6, V5.S[1]
                  FMLA            S7, S13, V5.S[1]
                  FMLS            S7, S15, V5.S[0]
                }
                v128 = v122 + (float)(fabsf(_S7) * 0.5);
                if (v128 > v112)
                  goto LABEL_104;
                _S7 = -_Q5.f32[0];
                _Q3 = v109[3];
                __asm
                {
                  FMLA            S5, S7, V3.S[1]
                  FMLA            S5, S13, V3.S[1]
                  FMLS            S5, S15, V3.S[0]
                }
                v134 = v128 + (float)(fabsf(_S5) * 0.5);
                if (v134 <= v112)
                  v135 = (float)(v134
                               + (float)(fabsf((float)((float)((float)((float)((float)(_Q3.f32[1]* (float)-(float)(v105+ (float)((float)(int)v104 * 0.1)))+ (float)(_Q3.f32[0] * _S15))+ (float)(_Q1.f32[0] * _Q3.f32[1]))+ (float)((float)-_Q3.f32[0]* COERCE_FLOAT(HIDWORD(v109->i64[0]))))+ (float)(_S13 * COERCE_FLOAT(HIDWORD(v109->i64[0]))))+ (float)((float)-_Q1.f32[0] * _S15))* 0.5)) <= v112;
                else
LABEL_104:
                  v135 = 0;
                v196[1] = v196[0];
                operator delete(v196[0]);
                v177[3 * v104][v107] += v135;
                v109 += 8;
              }
              while (v109 != v110);
            }
            ++v107;
          }
          while (v107 != v42);
        }
        ++v104;
      }
      while (v104 != v43);
    }
    if (v177 == v178)
    {
      v137 = 0;
      v136 = 0;
      v139 = v170;
    }
    else
    {
      v136 = 0;
      v137 = 0;
      v138 = v177;
      v139 = v170;
      do
      {
        for (i = *v138; i != v138[1]; ++i)
        {
          v141 = *i;
          v136 += v141;
          if (!v141)
            ++v137;
        }
        v138 += 3;
      }
      while (v138 != v178);
    }
    v144 = (float)(0xAAAAAAAAAAAAAAABLL * (v178 - v177) * (v177[1] - *v177));
    v145 = (float)v137 / v144;
    v146 = (float)((float)v136 / (float)(unint64_t)(((char *)v182 - (_BYTE *)v181) >> 7)) / v144;
    v148 = *v139;
    v147 = v139[1];
    v149 = v147 - *v139;
    if (v147 == *v139)
    {
      v151 = 0;
      v155 = 0.0;
      v143 = v167;
    }
    else
    {
      v150 = 0;
      v151 = 0;
      v152 = v149 >> 2;
      if (v152 <= 1)
        v153 = 1;
      else
        v153 = v152;
      v154 = (int *)(v148 + 4);
      v155 = 0.0;
      v156 = 1;
      v143 = v167;
      do
      {
        v157 = v150 + 1;
        if (v152 > v150 + 1)
        {
          v158 = *(_QWORD *)(*a5 + 24 * *(int *)(v148 + 4 * v150));
          v159 = v152;
          v160 = v154;
          do
          {
            v161 = *v160++;
            v155 = v155 + *(float *)(v158 + 4 * v161);
            ++v151;
            --v159;
          }
          while (v156 != v159);
        }
        ++v156;
        ++v154;
        v150 = v157;
      }
      while (v157 != v153);
    }
    v162 = (float)(v155 / (float)v151) >= 0.5;
    if (v146 >= 0.5)
      v162 = 1;
    v142 = v145 <= 0.07 || v162;
    v196[0] = &v177;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v196);
  }
  else
  {
    v142 = 1;
    v143 = v167;
  }
  v163 = v202;
  *(_OWORD *)(v168 + 64) = v201;
  *(_OWORD *)(v168 + 80) = v163;
  v164 = v204;
  *(_OWORD *)(v168 + 96) = v203;
  *(_OWORD *)(v168 + 112) = v164;
  v165 = v198;
  *(_OWORD *)v168 = __x;
  *(_OWORD *)(v168 + 16) = v165;
  v166 = v200;
  *(_OWORD *)(v168 + 32) = v199;
  *(_OWORD *)(v168 + 48) = v166;
  *(_BYTE *)(v168 + 128) = v142;
  *(_BYTE *)(v168 + 129) = v143;
  if (v180[0])
  {
    v180[1] = v180[0];
    operator delete(v180[0]);
  }
  if (v181)
  {
    v182 = (float32x4_t *)v181;
    operator delete(v181);
  }
  if (v183)
  {
    v184 = (char *)v183;
    operator delete(v183);
  }
  if (v186)
  {
    v187 = (char *)v186;
    operator delete(v186);
  }
  if (__p)
  {
    v190 = (char *)__p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v192);
  if (v193.__begin_)
  {
    v193.__end_ = v193.__begin_;
    operator delete(v193.__begin_);
  }
  if (v194)
  {
    v195 = (float *)v194;
    operator delete(v194);
  }
LABEL_5:

}

void sub_229507A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char *a62)
{
  void *v62;

  a62 = &a30;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a48);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }

  _Unwind_Resume(a1);
}

float **`anonymous namespace'::getMeanLogits@<X0>(uint64_t *a1@<X0>, int **a2@<X1>, _QWORD *a3@<X8>)
{
  float **result;
  int *v6;
  int *v7;
  float *v8;
  float *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  float *v14;
  float *v15;
  float v16;
  float v17;
  uint64_t v18;

  result = (float **)std::vector<float>::vector(a3, (uint64_t)(*(_QWORD *)(*a1 + 224 * **a2 + 168) - *(_QWORD *)(*a1 + 224 * **a2 + 160)) >> 2);
  v6 = *a2;
  v7 = a2[1];
  v8 = *result;
  v9 = result[1];
  v10 = v9 - *result;
  if (*a2 != v7)
  {
    v11 = *a1;
    if (v10 <= 1)
      v12 = 1;
    else
      v12 = v9 - *result;
    v13 = *a2;
    do
    {
      if (v9 != v8)
      {
        v14 = *(float **)(v11 + 224 * *v13 + 160);
        result = (float **)v12;
        v15 = v8;
        do
        {
          v16 = *v14++;
          *v15 = v16 + *v15;
          ++v15;
          result = (float **)((char *)result - 1);
        }
        while (result);
      }
      ++v13;
    }
    while (v13 != v7);
  }
  if (v9 != v8)
  {
    v17 = (float)(unint64_t)(v7 - v6);
    if (v10 <= 1)
      v18 = 1;
    else
      v18 = v10;
    do
    {
      *v8 = *v8 / v17;
      ++v8;
      --v18;
    }
    while (v18);
  }
  return result;
}

void RemoveFPCabinetFromRefridge(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE v12[12];
  float v13;

  if (a2)
  {
    v5 = *a1;
    v4 = a1[1];
    if (a2[1] == 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5) && v4 != v5)
    {
      v7 = 0;
      do
      {
        if (((*(_QWORD *)(*a2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        {
          v8 = objc_msgSend(*(id *)(v5 + 224 * v7 + 128), "isEqualToString:", CFSTR("Refrigerator"));
          v9 = *a1;
          v4 = a1[1];
          if (v8)
          {
            v5 = a1[1];
            if (v4 != v9)
            {
              v10 = 0;
              v11 = 0;
              do
              {
                if ((*(_QWORD *)(*a2 + 8 * (v11 >> 6)) & (1 << v11)) == 0
                  && objc_msgSend(*(id *)(v9 + v10 + 128), "isEqualToString:", CFSTR("Cabinet")))
                {
                  box3dIou((float32x4_t *)(*a1 + 224 * v7), (float32x4_t *)(*a1 + v10), 0, (uint64_t)v12);
                  if (v13 > 0.7)
                    *(_QWORD *)(*a2 + 8 * (v11 >> 6)) |= 1 << v11;
                }
                ++v11;
                v9 = *a1;
                v4 = a1[1];
                v10 += 224;
              }
              while (v11 < 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5));
              v5 = *a1;
            }
          }
          else
          {
            v5 = *a1;
          }
        }
        ++v7;
      }
      while (v7 < 0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 5));
    }
  }
}

void sub_229509020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char *a33,char *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a17 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  if (a33)
  {
    a34 = a33;
    operator delete(a33);
  }
  if (a27)
    operator delete(a27);
  if (a30)
    operator delete(a30);
  a33 = &a40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = &a43;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = &a46;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = &a49;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::sortIndices@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v11;

  std::vector<unsigned long>::vector(a2, (a1[1] - *a1) >> 2);
  v4 = *a2;
  v5 = (uint64_t *)a2[1];
  if ((uint64_t *)*a2 != v5)
  {
    v6 = 0;
    v7 = (uint64_t *)*a2;
    do
      *v7++ = v6++;
    while (v7 != v5);
  }
  v8 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 3);
  v11 = a1;
  if (v5 == (uint64_t *)v4)
    v9 = 0;
  else
    v9 = v8;
}

void `anonymous namespace'::nonMaxSuppressBoxes(void ***a1, const OUBox3d **a2, int a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, float a7)
{
  const OUBox3d *v7;
  const OUBox3d *v8;
  unint64_t v9;
  void **v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  const OUBox3d **v31;
  void *v33[3];
  void *v34[3];
  uint64_t *v35;
  _QWORD *v36[2];
  OUBox3d v37;
  void *v38[4];
  void *v39;
  void *v40;
  void *__p;
  id v42;

  v8 = *a2;
  v7 = a2[1];
  v9 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (char *)*a2) >> 5);
  if (v9 >= 2)
  {
    if (a6 && a6[1] == v9)
    {
      v36[0] = 0;
      v36[1] = 0;
      v35 = (uint64_t *)v36;
      v15 = *a1;
      v14 = a1[1];
      if (*a1 != v14)
      {
        do
        {
          std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__emplace_unique_key_args<NSString * {__strong},NSString * const {__strong}&>(&v35, v15, v15);
          ++v15;
        }
        while (v15 != v14);
        v8 = *a2;
        v7 = a2[1];
      }
      memset(v34, 0, sizeof(v34));
      for (; v8 != v7; v8 = (const OUBox3d *)((char *)v8 + 224))
      {
        OUBox3d::OUBox3d(&v37, v8);
        LOBYTE(v33[0]) = v36 != (_QWORD **)std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>((uint64_t)&v35, v38);
        std::vector<BOOL>::push_back((uint64_t)v34, v33);

        if (__p)
          operator delete(__p);
        if (v39)
        {
          v40 = v39;
          operator delete(v39);
        }

      }
      v31 = a2;
      v16 = *a4;
      v17 = a4[1];
      if (v17 != *a4)
      {
        v18 = 0;
        do
        {
          v19 = *(_QWORD *)(v16 + 8 * v18);
          if (((1 << v19) & *(_QWORD *)(*a6 + 8 * (v19 >> 6))) == 0
            && (*((_QWORD *)v34[0] + (v19 >> 6)) & (1 << v19)) != 0)
          {
            v20 = v18 + 1;
            if (v18 + 1 < (v17 - v16) >> 3)
            {
              do
              {
                v21 = *(_QWORD *)(v16 + 8 * v20);
                v22 = v21 >> 6;
                v23 = 1 << v21;
                if (((1 << v21) & *(_QWORD *)(*a6 + 8 * (v21 >> 6))) == 0 && (*((_QWORD *)v34[0] + v22) & v23) != 0)
                {
                  v24 = (void *)*((_QWORD *)&(*v31)[1].var5.var0 + 28 * v19);
                  v25 = *((_QWORD *)&(*v31)[1].var5.var0 + 28 * v21);
                  if (a3)
                  {
                    if ((objc_msgSend(v24, "isEqualToString:", v25) & 1) == 0
                      && *(float *)(*(_QWORD *)(*a5 + 24 * v19) + 4 * v21) >= a7)
                    {
                      *(_QWORD *)(*a6 + 8 * v22) |= v23;
                    }
                  }
                  else if (objc_msgSend(v24, "isEqualToString:", v25)
                         && *(float *)(*(_QWORD *)(*a5 + 24 * v19) + 4 * v21) >= a7)
                  {
                    box3dToCentroidSizeAngle((float32x4_t *)*v31 + 14 * v19, (uint64_t *)&v37);
                    box3dToCentroidSizeAngle((float32x4_t *)*v31 + 14 * v21, (uint64_t *)v33);
                    v26 = v33[0];
                    v27 = v19 >> 6;
                    if ((float)((float)(*((float *)v37.var1 + 4) * *((float *)v37.var1 + 3)) * *((float *)v37.var1 + 5)) <= (float)((float)(*((float *)v33[0] + 4) * *((float *)v33[0] + 3)) * *((float *)v33[0] + 5)))
                    {
                      v28 = 1 << v19;
                    }
                    else
                    {
                      v27 = v21 >> 6;
                      v28 = 1 << v21;
                    }
                    *(_QWORD *)(*a6 + 8 * v27) |= v28;
                    v33[1] = v26;
                    operator delete(v26);
                    if (v37.var1)
                    {
                      *(_QWORD *)&v37.var2 = v37.var1;
                      operator delete(v37.var1);
                    }
                  }
                }
                ++v20;
                v16 = *a4;
                v17 = a4[1];
              }
              while (v20 < (v17 - *a4) >> 3);
            }
          }
          ++v18;
        }
        while (v18 < (v17 - v16) >> 3);
      }
      if (v34[0])
        operator delete(v34[0]);
      std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&v35, v36[0]);
    }
    else
    {
      _OULoggingGetOSLogForCategoryObjectUnderstanding();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))

    }
  }
}

void sub_2295098B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,_QWORD *a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a17)
    operator delete(a17);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::SaveBoxes(OUBox3d *a1, _QWORD *a2, uint64_t a3)
{
  _BYTE *v4;
  _BYTE *var1;
  OUBox3d *v7;
  uint64_t v8;
  OUBox3d *v9;
  unint64_t v10;
  const OUBox3d *v11;
  void *v12;
  uint64_t v13;
  OUBox3d *v14;
  unint64_t v15;
  void **v16;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  var1 = a1->var1;
  v4 = *(_BYTE **)&a1->var2;
  if (v4 != a1->var1)
  {
    v7 = a1;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      if (((*(_QWORD *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        v11 = (const OUBox3d *)&var1[v8];
        if ((unint64_t)v9 >= v15)
        {
          a1 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v13, v11);
          v9 = a1;
        }
        else
        {
          OUBox3d::OUBox3d(v9, v11);
          v9 = (OUBox3d *)((char *)v9 + 224);
        }
        v14 = v9;
        var1 = v7->var1;
        v4 = *(_BYTE **)&v7->var2;
      }
      ++v10;
      v8 += 224;
    }
    while (v10 < 0x6DB6DB6DB6DB6DB7 * ((v4 - var1) >> 5));
  }
  v12 = OUVizTool::Get((OUVizTool *)a1);
  OUVizTool::SaveBoxes((uint64_t)v12, a3, &v13);
  v16 = (void **)&v13;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_229509A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::zeroOutClassScores(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  std::vector<float>::vector(a3, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 5));
  if (a3[1] != *a3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = objc_msgSend(*(id *)(*a1 + v5 + 128), "isEqualToString:", v11);
      v8 = 0;
      if ((v7 & 1) == 0)
        v8 = *(_DWORD *)(*a1 + v5 + 136);
      v9 = *a3;
      v10 = a3[1];
      *(_DWORD *)(*a3 + 4 * v6++) = v8;
      v5 += 224;
    }
    while (v6 < (v10 - v9) >> 2);
  }

}

void sub_229509AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_229509C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v7;
  int *value;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::size_type v16;
  int *v17;
  int *v18;
  int *v19;
  std::vector<int>::size_type v20;
  int *v21;
  int *v22;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer i;
  int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 7);
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_229509F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_229509FF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<box3d>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<box3d>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, a2 << 7);
    a1[1] = &v4[128 * a2];
  }
  return a1;
}

void sub_22950A064(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<box3d>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 57)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void std::vector<std::vector<int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_22950A2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<std::vector<int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22950A48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<OUBox3d>::__emplace_back_slow_path<OUBox3d&>(uint64_t *a1, const OUBox3d *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  OUBox3d *v14;
  vector<float, std::allocator<float>> *p_var5;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x92492492492492)
    v9 = 0x124924924924924;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (OUBox3d *)&v10[224 * v4];
  v16 = &v10[224 * v9];
  OUBox3d::OUBox3d(v14, a2);
  p_var5 = &v14[2].var5;
  std::vector<OUBox3d>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_22950A5A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t *v63;
  int64_t v64;
  uint64_t *v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  float v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  uint64_t *v93;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 1);
        v43 = *v10;
        if (*(float *)(**a3 + 4 * (int)v42) > *(float *)(**a3 + (*v10 << 32 >> 30)))
        {
          *v10 = v42;
          *(a2 - 1) = v43;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v44 = v10 + 1;
        v45 = v10 + 2;
        v46 = v10 + 3;
        v47 = *(a2 - 1);
        v48 = v10[3];
        v49 = **a3;
        if (*(float *)(v49 + 4 * (int)v47) > *(float *)(v49 + 4 * (int)v48))
        {
          *v46 = v47;
          *(a2 - 1) = v48;
          v50 = *v46;
          v51 = *v45;
          v52 = *(float *)(v49 + (*v46 << 32 >> 30));
          if (v52 > *(float *)(v49 + (*v45 << 32 >> 30)))
          {
            *v45 = v50;
            *v46 = v51;
            v53 = *v44;
            if (v52 > *(float *)(v49 + (*v44 << 32 >> 30)))
            {
              v10[1] = v50;
              v10[2] = v53;
              v54 = *v10;
              if (v52 > *(float *)(v49 + (*v10 << 32 >> 30)))
              {
                *v10 = v50;
                v10[1] = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v55 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v56 = 0;
                v57 = **a3;
                v58 = v10;
                do
                {
                  v60 = *v58;
                  v59 = v58[1];
                  v58 = v55;
                  v61 = *(float *)(v57 + 4 * (int)v59);
                  if (v61 > *(float *)(v57 + 4 * (int)v60))
                  {
                    v62 = v56;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v62 + 8) = v60;
                      if (!v62)
                        break;
                      v60 = *(uint64_t *)((char *)v10 + v62 - 8);
                      v62 -= 8;
                      if (v61 <= *(float *)(v57 + 4 * (int)v60))
                      {
                        v63 = (uint64_t *)((char *)v10 + v62 + 8);
                        goto LABEL_74;
                      }
                    }
                    v63 = v10;
LABEL_74:
                    *v63 = v59;
                  }
                  v55 = v58 + 1;
                  v56 += 8;
                }
                while (v58 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v95 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v96 = **a3;
              do
              {
                v98 = *v9;
                v97 = v9[1];
                v9 = v95;
                v99 = *(float *)(v96 + 4 * (int)v97);
                if (v99 > *(float *)(v96 + 4 * (int)v98))
                {
                  do
                  {
                    *v95 = v98;
                    v98 = *(v95 - 2);
                    --v95;
                  }
                  while (v99 > *(float *)(v96 + 4 * (int)v98));
                  *v95 = v97;
                }
                v95 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v64 = (v12 - 2) >> 1;
            v65 = *a3;
            v66 = v64;
            do
            {
              v67 = v66;
              if (v64 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = &v10[v68];
                v70 = 2 * v66 + 2;
                v71 = *v65;
                if (v70 < (uint64_t)v12 && *(float *)(v71 + (*v69 << 32 >> 30)) > *(float *)(v71 + 4 * (int)v69[1]))
                {
                  ++v69;
                  v68 = 2 * v67 + 2;
                }
                v72 = &v10[v67];
                result = *v69;
                v73 = *v72;
                v74 = *(float *)(v71 + (*v72 << 32 >> 30));
                if (*(float *)(v71 + (*v69 << 32 >> 30)) <= v74)
                {
                  do
                  {
                    v75 = v69;
                    *v72 = result;
                    if (v64 < v68)
                      break;
                    v76 = 2 * v68;
                    v68 = (2 * v68) | 1;
                    v69 = &v10[v68];
                    v77 = v76 + 2;
                    if (v77 < (uint64_t)v12
                      && *(float *)(v71 + (*v69 << 32 >> 30)) > *(float *)(v71 + 4 * (int)v69[1]))
                    {
                      ++v69;
                      v68 = v77;
                    }
                    result = *v69;
                    v72 = v75;
                  }
                  while (*(float *)(v71 + (*v69 << 32 >> 30)) <= v74);
                  *v75 = v73;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v78 = (unint64_t)v11 >> 3;
            do
            {
              v79 = 0;
              v80 = *v10;
              v81 = *a3;
              v82 = v10;
              do
              {
                v83 = v82;
                v82 += v79 + 1;
                v84 = 2 * v79;
                v79 = (2 * v79) | 1;
                v85 = v84 + 2;
                if (v85 < v78)
                {
                  result = v82[1];
                  if (*(float *)(*v81 + (*v82 << 32 >> 30)) > *(float *)(*v81 + 4 * (int)result))
                  {
                    ++v82;
                    v79 = v85;
                  }
                }
                *v83 = *v82;
              }
              while (v79 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              if (v82 == --a2)
              {
                *v82 = v80;
              }
              else
              {
                *v82 = *a2;
                *a2 = v80;
                v86 = (char *)v82 - (char *)v10 + 8;
                if (v86 >= 9)
                {
                  v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                  v88 = &v10[v87];
                  v89 = *v88;
                  v90 = *v82;
                  v91 = *v81;
                  v92 = *(float *)(v91 + (*v82 << 32 >> 30));
                  if (*(float *)(v91 + (*v88 << 32 >> 30)) > v92)
                  {
                    do
                    {
                      v93 = v88;
                      *v82 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v10[v87];
                      v89 = *v88;
                      v82 = v93;
                    }
                    while (*(float *)(v91 + (*v88 << 32 >> 30)) > v92);
                    *v93 = v90;
                  }
                }
              }
            }
            while (v78-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
        }
        else
        {
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = **a3;
        if ((a5 & 1) == 0)
        {
          v18 = *(float *)(v17 + 4 * (int)v16);
          if (*(float *)(v17 + (*(v9 - 1) << 32 >> 30)) <= v18)
          {
            if (v18 <= *(float *)(v17 + (*(a2 - 1) << 32 >> 30)))
            {
              v34 = v9 + 1;
              do
              {
                v10 = v34;
                if (v34 >= a2)
                  break;
                ++v34;
              }
              while (v18 <= *(float *)(v17 + (*v10 << 32 >> 30)));
            }
            else
            {
              v10 = v9;
              do
              {
                v33 = v10[1];
                ++v10;
              }
              while (v18 <= *(float *)(v17 + 4 * (int)v33));
            }
            v35 = a2;
            if (v10 < a2)
            {
              v35 = a2;
              do
                v36 = *--v35;
              while (v18 > *(float *)(v17 + 4 * (int)v36));
            }
            if (v10 < v35)
            {
              v37 = *v10;
              v38 = *v35;
              do
              {
                *v10 = v38;
                *v35 = v37;
                do
                {
                  v39 = v10[1];
                  ++v10;
                  v37 = v39;
                }
                while (v18 <= *(float *)(v17 + 4 * (int)v39));
                do
                {
                  v40 = *--v35;
                  v38 = v40;
                }
                while (v18 > *(float *)(v17 + 4 * (int)v40));
              }
              while (v10 < v35);
            }
            v41 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v41;
            a5 = 0;
            *v41 = v16;
            continue;
          }
        }
        v19 = 0;
        v20 = *(float *)(v17 + 4 * (int)v16);
        do
          v21 = v9[++v19];
        while (*(float *)(v17 + 4 * (int)v21) > v20);
        v22 = &v9[v19];
        v23 = a2;
        if (v19 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v25 = *--v23;
          }
          while (*(float *)(v17 + 4 * (int)v25) <= v20);
        }
        else
        {
          do
            v24 = *--v23;
          while (*(float *)(v17 + 4 * (int)v24) <= v20);
        }
        if (v22 >= v23)
        {
          v31 = v22 - 1;
        }
        else
        {
          v26 = *v23;
          v27 = &v9[v19];
          v28 = v23;
          do
          {
            *v27 = v26;
            *v28 = v21;
            do
            {
              v29 = v27[1];
              ++v27;
              v21 = v29;
            }
            while (*(float *)(v17 + 4 * (int)v29) > v20);
            do
            {
              v30 = *--v28;
              v26 = v30;
            }
            while (*(float *)(v17 + 4 * (int)v30) <= v20);
          }
          while (v27 < v28);
          v31 = v27 - 1;
        }
        if (v31 != v9)
          *v9 = *v31;
        *v31 = v16;
        if (v22 < v23)
        {
LABEL_32:
          a5 = 0;
          v10 = v31 + 1;
          continue;
        }
        v10 = v31 + 1;
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_32;
        }
        a2 = v31;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *result;
  v6 = **a4;
  v7 = *(float *)(v6 + (*a2 << 32 >> 30));
  v8 = *(float *)(v6 + (*result << 32 >> 30));
  v9 = *a3;
  v10 = *(float *)(v6 + (*a3 << 32 >> 30));
  if (v7 <= v8)
  {
    if (v10 > v7)
    {
      *a2 = v9;
      *a3 = v4;
      v11 = *result;
      if (*(float *)(v6 + (*a2 << 32 >> 30)) > *(float *)(v6 + (*result << 32 >> 30)))
      {
        *result = *a2;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v10 <= v7)
    {
      *result = v4;
      *a2 = v5;
      if (*(float *)(v6 + (*a3 << 32 >> 30)) <= v8)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**a3 + 4 * (int)v8) > *(float *)(**a3 + (*a1 << 32 >> 30)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v21 = a1 + 1;
      v22 = a1 + 2;
      v23 = a1 + 3;
      v24 = *(a2 - 1);
      v25 = a1[3];
      v26 = **a3;
      if (*(float *)(v26 + 4 * (int)v24) > *(float *)(v26 + 4 * (int)v25))
      {
        *v23 = v24;
        *(a2 - 1) = v25;
        v27 = *v23;
        v28 = *v22;
        v29 = *(float *)(v26 + (*v23 << 32 >> 30));
        if (v29 > *(float *)(v26 + (*v22 << 32 >> 30)))
        {
          *v22 = v27;
          *v23 = v28;
          v30 = *v21;
          if (v29 > *(float *)(v26 + (*v21 << 32 >> 30)))
          {
            a1[1] = v27;
            a1[2] = v30;
            v31 = *a1;
            if (v29 > *(float *)(v26 + (*a1 << 32 >> 30)))
            {
              *a1 = v27;
              a1[1] = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + (*v11 << 32 >> 30));
    if (v17 > *(float *)(v13 + (*v10 << 32 >> 30)))
    {
      v18 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18) = v16;
        v19 = v18 - 8;
        if (v18 == 8)
          break;
        v16 = *(uint64_t *)((char *)a1 + v18 - 16);
        v18 -= 8;
        if (v17 <= *(float *)(v13 + 4 * (int)v16))
        {
          v20 = (uint64_t *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = *a3;
  v12 = **a5;
  if (*(float *)(v12 + (*a4 << 32 >> 30)) > *(float *)(v12 + (*a3 << 32 >> 30)))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(float *)(v12 + (*a3 << 32 >> 30)) > *(float *)(v12 + (*a2 << 32 >> 30)))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(float *)(v12 + (*a2 << 32 >> 30)) > *(float *)(v12 + (*a1 << 32 >> 30)))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t *std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__emplace_unique_key_args<NSString * {__strong},NSString * const {__strong}&>(uint64_t **a1, void **a2, id *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = (uint64_t)*a3;
    std::__tree<int>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::find<NSString * {__strong}>(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = CompareNSString::operator()(v5, *(void **)(v3 + 32), *a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || CompareNSString::operator()(v5, *a2, *(void **)(v6 + 32)))
    return v2;
  return v6;
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_22950B3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void *OUVizTool::Get(OUVizTool *this)
{
  unsigned __int8 v1;

  {
    OUVizTool::OUVizTool((OUVizTool *)&OUVizTool::Get(void)::viz_tool_singleton);
    __cxa_atexit((void (*)(void *))OUVizTool::~OUVizTool, &OUVizTool::Get(void)::viz_tool_singleton, &dword_2294C8000);
  }
  return &OUVizTool::Get(void)::viz_tool_singleton;
}

void sub_22950B664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUVizTool::~OUVizTool(id *this)
{

  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::set[abi:ne180100](uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__emplace_hint_unique_key_args<NSString * {__strong},NSString * const {__strong}&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_22950B758(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__emplace_hint_unique_key_args<NSString * {__strong},NSString * const {__strong}&>(uint64_t **a1, uint64_t *a2, void **a3, id *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = (uint64_t)*a4;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

void std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void _GLOBAL__sub_I_OU3DObjectMerger_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x22E2CB070]();
  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.ObjectUnderstandingTests"));
  ObjectUnderstandingTest::Bundle = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

uint64_t OUCannyEdgeDetectorRGB::OUCannyEdgeDetectorRGB(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _DWORD *v14;
  id v15;
  double v16;
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  int v22;
  void *__p[3];

  v4 = (_QWORD *)OUCannyEdgeDetectorInterface::OUCannyEdgeDetectorInterface(a1, a2);
  *v4 = &off_24F2430F8;
  v4[18] = 0;
  v4[19] = 0;
  v22 = 1038323257;
  std::vector<float>::vector(__p, 9uLL, &v22);
  v5 = objc_alloc(MEMORY[0x24BDDE3A8]);
  v6 = objc_msgSend(v5, "initWithDevice:kernelWidth:kernelHeight:weights:", *(_QWORD *)(a1 + 8), 3, 3, __p[0]);
  v7 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v6;

  OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture(a1, (unsigned int *)(a1 + 64), 80);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;

  OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture(a1, (unsigned int *)(a1 + 72), objc_msgSend(*(id *)(a1 + 40), "pixelFormat"));
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v10;

  if (*(_DWORD *)(a1 + 64) != *(_DWORD *)(a1 + 72) || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a1 + 76))
  {
    OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture(a1, (unsigned int *)(a1 + 72), 80);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;

  }
  v14 = operator new(0xCuLL);
  *(_QWORD *)v14 = 0x3F1645A23E991687;
  v14[2] = 1038710997;
  v15 = objc_alloc(MEMORY[0x24BDDE398]);
  LODWORD(v16) = 1.0;
  v17 = objc_msgSend(v15, "initWithDevice:linearToGrayScaleTransform:sigma:", *(_QWORD *)(a1 + 8), v14, v16);
  v18 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v17;

  LODWORD(v19) = *(_DWORD *)(a2 + 4);
  objc_msgSend(*(id *)(a1 + 56), "setHighThreshold:", v19);
  LODWORD(v20) = *(_DWORD *)a2;
  objc_msgSend(*(id *)(a1 + 56), "setLowThreshold:", v20);
  objc_msgSend(*(id *)(a1 + 56), "setUseFastMode:", *(unsigned __int8 *)(a2 + 8));
  operator delete(v14);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_22950BAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void **v11;

  if (__p)
    operator delete(__p);

  OUCannyEdgeDetectorInterface::~OUCannyEdgeDetectorInterface(v11);
  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorRGB::GenerateSourceTexture(uint64_t a1, void *a2)
{
  __CVBuffer *v3;
  __IOSurface *IOSurface;
  uint64_t v5;
  void *v6;
  size_t Width;
  void *v8;
  uint64_t v9;
  void *v10;
  std::logic_error *exception;
  id v12;

  v12 = a2;
  v3 = (__CVBuffer *)objc_msgSend(v12, "sceneColorBuffer");
  if (CVPixelBufferGetWidth(v3) != *(_DWORD *)(a1 + 64) || CVPixelBufferGetHeight(v3) != *(_DWORD *)(a1 + 68))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] Edge detection image size doesn't match.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  IOSurface = CVPixelBufferGetIOSurface(v3);
  if (CVPixelBufferGetPixelFormatType(v3) == 2016686640)
    v5 = 505;
  else
    v5 = 500;
  v6 = (void *)MEMORY[0x24BDDD740];
  Width = IOSurfaceGetWidth(IOSurface);
  objc_msgSend(v6, "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v5, Width, IOSurfaceGetHeight(IOSurface), 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setUsage:", 3);
  v9 = objc_msgSend(*(id *)(a1 + 8), "newTextureWithDescriptor:iosurface:plane:", v8, IOSurface, 0);
  v10 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;

}

void sub_22950BC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorRGB::PostProcess(id *this)
{
  id v2;
  id v3;

  objc_msgSend(this[2], "commandBuffer");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(this[19], "encodeToCommandBuffer:sourceTexture:destinationTexture:");
  objc_msgSend(v3, "commit");
  objc_msgSend(v3, "waitUntilCompleted");
  v2 = this[5];
  this[5] = this[18];
  this[18] = v2;

}

void sub_22950BD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorRGB::~OUCannyEdgeDetectorRGB(id *this)
{
  OUCannyEdgeDetectorRGB::~OUCannyEdgeDetectorRGB(this);
  JUMPOUT(0x22E2CAAE8);
}

{

  OUCannyEdgeDetectorInterface::~OUCannyEdgeDetectorInterface(this);
}

BOOL ou3dor::E5RTExecute(int *a1)
{
  int v1;
  uint64_t last_error_message;
  NSObject *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  if (*a1)
  {
    last_error_message = e5rt_get_last_error_message();
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = 136315138;
      v6 = last_error_message;
      _os_log_impl(&dword_2294C8000, v3, OS_LOG_TYPE_INFO, "[3DOR] E5RT operation failed with message = %s", (uint8_t *)&v5, 0xCu);
    }

  }
  return v1 == 0;
}

uint64_t ou3dor::DescribeTensorDescriptor()
{
  NSObject *v0;
  uint8_t buf[4];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2294C8000, v0, OS_LOG_TYPE_INFO, "[3DOR] Printing tensor information", buf, 2u);
  }

  e5rt_tensor_desc_retain_dtype();
  e5rt_tensor_desc_dtype_get_num_components();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v3) = 0;
    _os_log_impl(&dword_2294C8000, v0, OS_LOG_TYPE_INFO, "[3DOR] Num components per element = %u \n", buf, 8u);
  }

  e5rt_tensor_desc_dtype_get_component_dtype();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2294C8000, v0, OS_LOG_TYPE_INFO, "[3DOR] Component data type is UINT \n", buf, 2u);
  }

  e5rt_tensor_desc_dtype_get_component_size();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v3 = 0;
    _os_log_impl(&dword_2294C8000, v0, OS_LOG_TYPE_INFO, "[3DOR] Component size is %zu bytes \n", buf, 0xCu);
  }

  e5rt_tensor_desc_dtype_get_element_size();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v3 = 0;
    _os_log_impl(&dword_2294C8000, v0, OS_LOG_TYPE_INFO, "[3DOR] Element size is %zu bytes \n", buf, 0xCu);
  }

  e5rt_tensor_desc_get_rank();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v3 = 0;
    _os_log_impl(&dword_2294C8000, v0, OS_LOG_TYPE_INFO, "[3DOR] Tensor rank is %zu \n", buf, 0xCu);
  }

  e5rt_tensor_desc_get_shape();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_2294C8000, v0, OS_LOG_TYPE_INFO, "[3DOR] Tensor shape is { ", buf, 2u);
  }

  e5rt_tensor_desc_get_strides();
  return e5rt_tensor_desc_dtype_release();
}

uint64_t ou3dor::OU3DOREspressoV2Interface::OU3DOREspressoV2Interface(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = &off_24F243158;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  v3 = *a2;
  v4 = a2[1];
  *(_OWORD *)(a1 + 216) = a2[2];
  *(_OWORD *)(a1 + 200) = v4;
  *(_OWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 232) = 0;
  if (!ou3dor::OU3DOREspressoV2Interface::LoadModel((ou3dor::OU3DOREspressoV2Interface *)a1))
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOREspressoV2Interface::OU3DOREspressoV2Interface(v5, v6, v7, v8, v9, v10, v11, v12);

  }
  return a1;
}

void sub_22950C3AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL ou3dor::OU3DOREspressoV2Interface::LoadModel(ou3dor::OU3DOREspressoV2Interface *this)
{
  void *v2;
  void *v3;
  void *v4;
  char **v5;
  char **v6;
  NSObject *v7;
  char *v8;
  void *v9;
  _BOOL8 v10;
  unsigned __int8 *v11;
  BOOL v12;
  char **v13;
  char **v14;
  NSObject *v15;
  char *v16;
  void *p_p;
  _BOOL8 v18;
  unsigned __int8 *v19;
  _BOOL8 v20;
  NSObject *v21;
  void *__p;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char **v28;
  unint64_t v29;
  __int128 *v30;
  _BYTE v31[12];
  char v32;
  __int128 buf;
  char v34;
  uint8_t v35[8];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", *((_QWORD *)this + 23));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "pathForResource:ofType:", v3, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
    {
      _OULoggingGetOSLogForCategoryObjectUnderstanding();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        std::string::basic_string<std::string_view,0>(&__p, (uint64_t)this + 184);
        ou3dor::OU3DOREspressoV2Interface::LoadModel((char *)&__p, v35, v21);
      }

      v20 = 0;
      goto LABEL_52;
    }
    std::string::basic_string[abi:ne180100]<0>(v35, (char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String"));
    LODWORD(__p) = e5rt_execution_stream_operation_create_precompiled_compute_operation();
    if (!ou3dor::E5RTExecute((int *)&__p)
      || (v29 = 0, LODWORD(__p) = e5rt_execution_stream_operation_get_num_inputs(), !ou3dor::E5RTExecute((int *)&__p)))
    {
      v20 = 0;
LABEL_47:
      if (v36 < 0)
        operator delete(*(void **)v35);
LABEL_52:

      goto LABEL_53;
    }
    std::vector<char const*>::vector(&v27, v29);
    LODWORD(__p) = e5rt_execution_stream_operation_get_input_names();
    if (ou3dor::E5RTExecute((int *)&__p))
    {
      v6 = (char **)v27;
      v5 = v28;
      if (v27 == v28)
      {
LABEL_25:
        LODWORD(__p) = e5rt_execution_stream_operation_get_num_outputs();
        if (ou3dor::E5RTExecute((int *)&__p))
        {
          std::vector<char const*>::vector(&buf, 0);
          LODWORD(__p) = e5rt_execution_stream_operation_get_output_names();
          if (!ou3dor::E5RTExecute((int *)&__p))
            goto LABEL_57;
          v13 = (char **)*((_QWORD *)&buf + 1);
          v14 = (char **)buf;
          if ((_QWORD)buf != *((_QWORD *)&buf + 1))
          {
            _OULoggingGetOSLogForCategoryObjectUnderstanding();
            v15 = objc_claimAutoreleasedReturnValue();
            do
            {
              v16 = *v14;
              if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, v16);
                p_p = &__p;
                if (v25 < 0)
                  p_p = __p;
                *(_DWORD *)v31 = 136315138;
                *(_QWORD *)&v31[4] = p_p;
                _os_log_impl(&dword_2294C8000, v15, OS_LOG_TYPE_INFO, "[3DOR] Model output name: %s", v31, 0xCu);
                if (SHIBYTE(v25) < 0)
                  operator delete(__p);
              }

              LODWORD(__p) = e5rt_execution_stream_operation_retain_output_port();
              v18 = ou3dor::E5RTExecute((int *)&__p);
              __p = 0;
              v24 = 0;
              v25 = 0;
              ou3dor::OU3DOREspressoV2Interface::GetTensorShapeFromPort(v18, 0, (uint64_t)&__p);
              std::string::basic_string[abi:ne180100]<0>(v31, v16);
              v30 = (__int128 *)v31;
              v19 = std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 64, v31, (uint64_t)&std::piecewise_construct, &v30);
              if (v19 + 40 != (unsigned __int8 *)&__p)
                _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)v19 + 40, (char *)__p, (uint64_t)v24, (v24 - (_BYTE *)__p) >> 3);
              *((_QWORD *)v19 + 8) = v26;
              if (v32 < 0)
                operator delete(*(void **)v31);
              *(_DWORD *)v31 = e5rt_io_port_release();
              ou3dor::E5RTExecute((int *)v31);
              std::string::basic_string[abi:ne180100]<0>(v31, v16);
              ou3dor::OU3DOREspressoV2Interface::CreateAndBindOutputPort((uint64_t)this, v31);
              if (v32 < 0)
                operator delete(*(void **)v31);
              if (__p)
              {
                v24 = __p;
                operator delete(__p);
              }
              ++v14;
            }
            while (v14 != v13);
          }
          LODWORD(__p) = e5rt_execution_stream_create();
          if (ou3dor::E5RTExecute((int *)&__p))
          {
            LODWORD(__p) = e5rt_execution_stream_encode_operation();
            v20 = ou3dor::E5RTExecute((int *)&__p);
          }
          else
          {
LABEL_57:
            v20 = 0;
          }
          if ((_QWORD)buf)
          {
            *((_QWORD *)&buf + 1) = buf;
            operator delete((void *)buf);
          }
          goto LABEL_55;
        }
      }
      else
      {
        _OULoggingGetOSLogForCategoryObjectUnderstanding();
        v7 = objc_claimAutoreleasedReturnValue();
        while (1)
        {
          v8 = *v6;
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, v8);
            v9 = &__p;
            if (v25 < 0)
              v9 = __p;
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v9;
            _os_log_impl(&dword_2294C8000, v7, OS_LOG_TYPE_INFO, "[3DOR] Load model file: %s", (uint8_t *)&buf, 0xCu);
            if (SHIBYTE(v25) < 0)
              operator delete(__p);
          }

          v30 = 0;
          LODWORD(__p) = e5rt_execution_stream_operation_retain_input_port();
          v10 = ou3dor::E5RTExecute((int *)&__p);
          if (!v10)
            break;
          __p = 0;
          v24 = 0;
          v25 = 0;
          ou3dor::OU3DOREspressoV2Interface::GetTensorShapeFromPort(v10, (uint64_t)v30, (uint64_t)&__p);
          std::string::basic_string[abi:ne180100]<0>(&buf, v8);
          *(_QWORD *)v31 = &buf;
          v11 = std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 24, (unsigned __int8 *)&buf, (uint64_t)&std::piecewise_construct, (__int128 **)v31);
          if (v11 + 40 != (unsigned __int8 *)&__p)
            _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)v11 + 40, (char *)__p, (uint64_t)v24, (v24 - (_BYTE *)__p) >> 3);
          *((_QWORD *)v11 + 8) = v26;
          if (v34 < 0)
            operator delete((void *)buf);
          LODWORD(buf) = e5rt_io_port_release();
          v12 = ou3dor::E5RTExecute((int *)&buf);
          if (v12)
          {
            std::string::basic_string[abi:ne180100]<0>(&buf, v8);
            ou3dor::OU3DOREspressoV2Interface::CreateAndBindInputPort((uint64_t)this, (unsigned __int8 *)&buf);
            if (v34 < 0)
              operator delete((void *)buf);
          }
          if (__p)
          {
            v24 = __p;
            operator delete(__p);
          }
          if (!v12)
            break;
          if (++v6 == v5)
            goto LABEL_25;
        }
      }
    }
    v20 = 0;
LABEL_55:
    if (v27)
    {
      v28 = (char **)v27;
      operator delete(v27);
    }
    goto LABEL_47;
  }
  v20 = 0;
LABEL_53:

  return v20;
}

void sub_22950C9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  void *v36;
  uint64_t v37;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (*(char *)(v37 - 105) < 0)
    operator delete(*(void **)(v37 - 128));

  _Unwind_Resume(a1);
}

void ou3dor::OU3DOREspressoV2Interface::~OU3DOREspressoV2Interface(ou3dor::OU3DOREspressoV2Interface *this)
{
  CVPixelBufferRef *i;
  CVPixelBufferRef *j;
  int v4;
  int v5;

  *(_QWORD *)this = &off_24F243158;
  v5 = e5rt_execution_stream_operation_release();
  ou3dor::E5RTExecute(&v5);
  v4 = e5rt_execution_stream_release();
  ou3dor::E5RTExecute(&v4);
  std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::clear((uint64_t)this + 24);
  std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::clear((uint64_t)this + 64);
  for (i = (CVPixelBufferRef *)((char *)this + 120); ; CVPixelBufferRelease(i[5]))
  {
    i = (CVPixelBufferRef *)*i;
    if (!i)
      break;
  }
  for (j = (CVPixelBufferRef *)((char *)this + 160); ; CVPixelBufferRelease(j[5]))
  {
    j = (CVPixelBufferRef *)*j;
    if (!j)
      break;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 104);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)this + 24);
}

{
  ou3dor::OU3DOREspressoV2Interface::~OU3DOREspressoV2Interface(this);
  JUMPOUT(0x22E2CAAE8);
}

BOOL ou3dor::OU3DOREspressoV2Interface::GetTensorShapeFromPort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v18;
  int component_dtype;
  int v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v23[2];

  v23[1] = 0;
  LODWORD(v23[0]) = e5rt_io_port_retain_tensor_desc();
  ou3dor::E5RTExecute((int *)v23);
  ou3dor::DescribeTensorDescriptor();
  v22 = 0;
  v23[0] = 0;
  LODWORD(v21) = e5rt_tensor_desc_get_shape();
  ou3dor::E5RTExecute((int *)&v21);
  if (v22)
  {
    v4 = 0;
    v5 = (_QWORD *)(a3 + 16);
    v6 = *(_QWORD **)(a3 + 8);
    do
    {
      v7 = v23[0];
      if ((unint64_t)v6 >= *v5)
      {
        v9 = *(_QWORD **)a3;
        v10 = ((uint64_t)v6 - *(_QWORD *)a3) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v12 = *v5 - (_QWORD)v9;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v13);
          v9 = *(_QWORD **)a3;
          v6 = *(_QWORD **)(a3 + 8);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = *(_QWORD *)(v7 + 8 * v4);
        v8 = v15 + 8;
        while (v6 != v9)
        {
          v16 = *--v6;
          *((_QWORD *)v15 - 1) = v16;
          v15 -= 8;
        }
        *(_QWORD *)a3 = v15;
        *(_QWORD *)(a3 + 8) = v8;
        *(_QWORD *)(a3 + 16) = &v14[8 * v13];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v6 = *(_QWORD *)(v23[0] + 8 * v4);
        v8 = v6 + 1;
      }
      *(_QWORD *)(a3 + 8) = v8;
      ++v4;
      v6 = v8;
    }
    while (v4 < v22);
  }
  v21 = 0;
  v20 = e5rt_tensor_desc_retain_dtype();
  ou3dor::E5RTExecute(&v20);
  v20 = 0;
  component_dtype = e5rt_tensor_desc_dtype_get_component_dtype();
  ou3dor::E5RTExecute(&component_dtype);
  *(_DWORD *)(a3 + 24) = v20;
  component_dtype = 0;
  e5rt_tensor_desc_dtype_get_component_pack();
  *(_DWORD *)(a3 + 28) = component_dtype;
  v18 = e5rt_tensor_desc_dtype_release();
  ou3dor::E5RTExecute(&v18);
  v18 = e5rt_tensor_desc_release();
  return ou3dor::E5RTExecute(&v18);
}

_QWORD *std::string::basic_string<std::string_view,0>(_QWORD *__dst, uint64_t a2)
{
  size_t v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((_BYTE *)v5 + v3) = 0;
  return __dst;
}

BOOL ou3dor::OU3DOREspressoV2Interface::CreateAndBindInputPort(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  char **v8;
  uint64_t *v9;
  uint64_t *i;
  uint64_t v11;
  OSType v12;
  int v13;
  const char *v14;
  __CVBuffer *PixelBuffer;
  _BOOL8 result;
  int v17;
  uint64_t v18;
  _BYTE buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if ((a2[23] & 0x80u) == 0)
      v5 = a2;
    else
      v5 = *(unsigned __int8 **)a2;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_2294C8000, v4, OS_LOG_TYPE_INFO, "[3DOR] Model input name: %s", buf, 0xCu);
  }

  *(_QWORD *)buf = a2;
  v6 = std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 24, a2, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
  v7 = v6;
  v8 = (char **)(v6 + 40);
  v9 = (uint64_t *)*((_QWORD *)v6 + 5);
  for (i = (uint64_t *)*((_QWORD *)v6 + 6); v9 != i; ++v9)
  {
    v11 = *v9;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_2294C8000, v4, OS_LOG_TYPE_INFO, "[3DOR] Model input shape: %zu", buf, 0xCu);
    }

  }
  v12 = 1278226534;
  v13 = *((_DWORD *)v7 + 17);
  if (v13 == 3)
  {
    v12 = 1278226536;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v14 = "[3DOR] e5rt tensor format: float 16 type";
      goto LABEL_16;
    }
LABEL_17:

    goto LABEL_18;
  }
  if (v13 == 6)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v14 = "[3DOR] e5rt tensor format: float 32 type";
LABEL_16:
      _os_log_impl(&dword_2294C8000, v4, OS_LOG_TYPE_INFO, v14, buf, 2u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
LABEL_18:
  PixelBuffer = (__CVBuffer *)ou3dor::OU3DOREspressoV2Interface::CreatePixelBuffer((uint64_t)v6, v8, v12);
  *(_QWORD *)buf = a2;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 104, a2, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 5) = PixelBuffer;
  *(_QWORD *)buf = 0;
  LODWORD(v18) = e5rt_execution_stream_operation_retain_input_port();
  result = ou3dor::E5RTExecute((int *)&v18);
  if (!result)
    goto LABEL_24;
  CVPixelBufferGetIOSurface(PixelBuffer);
  v18 = 0;
  v17 = e5rt_buffer_object_create_from_iosurface();
  result = ou3dor::E5RTExecute(&v17);
  if (!result)
    goto LABEL_24;
  v17 = e5rt_io_port_bind_buffer_object();
  result = ou3dor::E5RTExecute(&v17);
  if (result
    && (v17 = e5rt_buffer_object_release(), result = ou3dor::E5RTExecute(&v17))
    && (v17 = e5rt_io_port_release(), result = ou3dor::E5RTExecute(&v17)))
  {
    *(_BYTE *)(a1 + 233) = 1;
  }
  else
  {
LABEL_24:
    *(_BYTE *)(a1 + 233) = 0;
  }
  return result;
}

BOOL ou3dor::OU3DOREspressoV2Interface::CreateAndBindOutputPort(uint64_t a1, unsigned __int8 *a2)
{
  OSType v4;
  unsigned __int8 *v5;
  char **v6;
  int v7;
  NSObject *v8;
  const char *v9;
  __CVBuffer *PixelBuffer;
  _BOOL8 result;
  int v12;
  uint64_t v13;
  uint8_t buf[8];

  v4 = 1278226534;
  *(_QWORD *)buf = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 64, a2, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
  v6 = (char **)(v5 + 40);
  v7 = *((_DWORD *)v5 + 17);
  if (v7 == 3)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v8 = objc_claimAutoreleasedReturnValue();
    v4 = 1278226536;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v9 = "[3DOR] e5rt tensor format: float 16 type";
      goto LABEL_7;
    }
LABEL_8:

    goto LABEL_9;
  }
  if (v7 == 6)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v9 = "[3DOR] e5rt tensor format: float 32 type";
LABEL_7:
      _os_log_impl(&dword_2294C8000, v8, OS_LOG_TYPE_INFO, v9, buf, 2u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:
  PixelBuffer = (__CVBuffer *)ou3dor::OU3DOREspressoV2Interface::CreatePixelBuffer((uint64_t)v5, v6, v4);
  *(_QWORD *)buf = a2;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 144, a2, (uint64_t)&std::piecewise_construct, (__int128 **)buf)+ 5) = PixelBuffer;
  *(_QWORD *)buf = 0;
  LODWORD(v13) = e5rt_execution_stream_operation_retain_output_port();
  result = ou3dor::E5RTExecute((int *)&v13);
  if (!result)
    goto LABEL_15;
  CVPixelBufferGetIOSurface(PixelBuffer);
  v13 = 0;
  v12 = e5rt_buffer_object_create_from_iosurface();
  result = ou3dor::E5RTExecute(&v12);
  if (!result)
    goto LABEL_15;
  v12 = e5rt_io_port_bind_buffer_object();
  result = ou3dor::E5RTExecute(&v12);
  if (result
    && (v12 = e5rt_buffer_object_release(), result = ou3dor::E5RTExecute(&v12))
    && (v12 = e5rt_io_port_release(), result = ou3dor::E5RTExecute(&v12)))
  {
    *(_BYTE *)(a1 + 234) = 1;
  }
  else
  {
LABEL_15:
    *(_BYTE *)(a1 + 234) = 0;
  }
  return result;
}

void ou3dor::OU3DOREspressoV2Interface::Inference(ou3dor::OU3DOREspressoV2Interface *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*((_BYTE *)this + 232))
  {
    kdebug_trace();
    ou3dor::OU3DOREspressoV2Interface::Eval(this);
    kdebug_trace();
  }
  else
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOREspressoV2Interface::Inference(v2, v3, v4, v5, v6, v7, v8, v9);

  }
}

void ou3dor::OU3DOREspressoV2Interface::Eval(ou3dor::OU3DOREspressoV2Interface *this)
{
  int v2;
  uint64_t last_error_message;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = e5rt_execution_stream_execute_sync();
  if (v2)
  {
    last_error_message = e5rt_get_last_error_message();
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = 136315138;
      v6 = last_error_message;
      _os_log_impl(&dword_2294C8000, v4, OS_LOG_TYPE_INFO, "[3DOD] E5RT operation failed with message = %s", (uint8_t *)&v5, 0xCu);
    }

  }
  *((_BYTE *)this + 235) = v2 == 0;
}

uint64_t ou3dor::OU3DOREspressoV2Interface::CreatePixelBuffer(uint64_t a1, char **a2, OSType a3)
{
  char *v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  NSObject *v21;
  int v22;
  const __CFDictionary *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint8_t buf[8];
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[1];
  v6 = 1;
  if (*a2 != v5)
  {
    v7 = *a2;
    do
    {
      v8 = *(_DWORD *)v7;
      v7 += 8;
      v6 *= v8;
    }
    while (v7 != v5);
  }
  v9 = (unint64_t)(v5 - v4) >> 3;
  if ((int)v9 < 2)
  {
    v12 = 1;
  }
  else
  {
    v10 = (v9 - 1);
    v11 = 0x7FFFFFFF;
    v12 = 1;
    v13 = 1;
    do
    {
      v14 = *(_DWORD *)v4;
      v4 += 8;
      v13 *= v14;
      v15 = v6 / v13;
      v16 = v13 + 7;
      if (v13 >= 0)
        v16 = v13;
      v17 = (v16 & 0xFFFFFFF8) + 8;
      if ((v13 & 7) == 0)
        v17 = v13;
      v18 = v15 + 7;
      if (v15 >= 0)
        v18 = v6 / v13;
      v19 = (v18 & 0xFFFFFFF8) + 8;
      if ((v15 & 7) != 0)
        v15 = v19;
      v20 = v15 * v17;
      if (v20 < v11)
      {
        v11 = v20;
        v12 = v13;
      }
      --v10;
    }
    while (v10);
  }
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = v6 / v12;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v12;
    v29 = 1024;
    v30 = v22;
    _os_log_impl(&dword_2294C8000, v21, OS_LOG_TYPE_INFO, "[3DOD] Create CVPixelBuffer width %d height %d", buf, 0xEu);
  }

  *(_QWORD *)buf = 0;
  v26 = *MEMORY[0x24BDC5668];
  v27 = MEMORY[0x24BDBD1B8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
  v23 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v12, v22, a3, v23, (CVPixelBufferRef *)buf);
  v24 = *(_QWORD *)buf;

  return v24;
}

void sub_22950D65C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (char *)operator new(0x48uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)v17 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_22950D958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_22950DC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ou3dor::StaticDescripter>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ou3dor::StaticDescripter>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_22950DCD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_22950DF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_22950E010(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

BOOL test_utils::Comparator::closeEnoughWPercent(test_utils::Comparator *this, float a2, float a3, float a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  _BOOL8 result;
  NSObject *OSLogForCategoryObjectUnderstanding;
  int v12;
  double v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = fmaxf(a4, 0.0);
  v7 = vabds_f32(a2, a3);
  if (v7 < v6)
    return 1;
  v8 = fabsf(a2);
  v9 = fabsf(a3);
  if (v9 < v8)
    v8 = v9;
  if (v7 < (float)(v8 * v6))
    return 1;
  OSLogForCategoryObjectUnderstanding = _OULoggingGetOSLogForCategoryObjectUnderstanding();
  result = os_log_type_enabled(OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO);
  if (result)
  {
    v12 = 134218240;
    v13 = a2;
    v14 = 2048;
    v15 = a3;
    _os_log_impl(&dword_2294C8000, OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO, "val1: %.9f, and val2: %.9f are not close enough!\n", (uint8_t *)&v12, 0x16u);
    return 0;
  }
  return result;
}

BOOL test_utils::Comparator::closeEnough(test_utils::Comparator *this, float a2, float a3)
{
  double v4;
  float v5;
  float v6;
  NSObject *OSLogForCategoryObjectUnderstanding;
  int v9;
  double v10;
  __int16 v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (a2 <= 0.001)
    v5 = 0.000001;
  else
    v5 = a2 / 1000.0;
  v6 = vabds_f32(a2, a3);
  if (v6 >= v5)
  {
    OSLogForCategoryObjectUnderstanding = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO))
    {
      v9 = 134218240;
      v10 = v4;
      v11 = 2048;
      v12 = a3;
      _os_log_impl(&dword_2294C8000, OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO, "val1: %.7f, and val2: %.7f are not close enough!\n", (uint8_t *)&v9, 0x16u);
    }
  }
  return v6 < v5;
}

BOOL test_utils::Comparator::closeEnough(float *a1, float *a2)
{
  _BOOL8 v4;
  _BOOL8 v5;

  v4 = test_utils::Comparator::closeEnough((test_utils::Comparator *)a1, *a1, *a2);
  return v4
      && (v5 = test_utils::Comparator::closeEnough((test_utils::Comparator *)v4, a1[1], a2[1]))
      && test_utils::Comparator::closeEnough((test_utils::Comparator *)v5, a1[2], a2[2]);
}

BOOL test_utils::Comparator::closeEnough(test_utils::Comparator *this, int a2)
{
  int v3;
  NSObject *OSLogForCategoryObjectUnderstanding;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v3 = (int)this;
  v9 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)this != a2)
  {
    OSLogForCategoryObjectUnderstanding = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO))
    {
      v6[0] = 67109376;
      v6[1] = v3;
      v7 = 1024;
      v8 = a2;
      _os_log_impl(&dword_2294C8000, OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO, "val1: %d, and val2: %d are not close enough!\n", (uint8_t *)v6, 0xEu);
    }
  }
  return v3 == a2;
}

BOOL test_utils::Comparator::closeEnoughSoftmax(test_utils::Comparator *this, float a2, float a3)
{
  float v3;
  NSObject *OSLogForCategoryObjectUnderstanding;
  int v8;
  double v9;
  __int16 v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = vabds_f32(a2, a3);
  if (v3 >= 0.01)
  {
    OSLogForCategoryObjectUnderstanding = _OULoggingGetOSLogForCategoryObjectUnderstanding();
    if (os_log_type_enabled(OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO))
    {
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = a3;
      _os_log_impl(&dword_2294C8000, OSLogForCategoryObjectUnderstanding, OS_LOG_TYPE_INFO, "val1: %.3f, and val2: %.3f are not close enough!\n", (uint8_t *)&v8, 0x16u);
    }
  }
  return v3 < 0.01;
}

ou3dor::CadModelRetriever *ou3dor::CadModelRetriever::CadModelRetriever(ou3dor::CadModelRetriever *this)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Data;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  _WORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int16 v49;
  void *v50;
  uint64_t v51;
  void *v52;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::logic_error *v62;
  NSObject *v63;
  std::logic_error *exception;
  unint64_t v65;
  unint64_t v66;
  id v67;
  void *v68;
  uint64_t *v69;
  char *v70;
  void **v71;
  uint64_t v72;
  void *__p[2];
  char v74;

  *(_OWORD *)((char *)this + 8) = 0u;
  v2 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &unk_24F243188;
  *(_OWORD *)((char *)this + 24) = 0u;
  v71 = (void **)((char *)this + 24);
  v69 = (uint64_t *)((char *)this + 8);
  v70 = (char *)this + 112;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 1065353216;
  objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v68, "pathForResource:ofType:", CFSTR("CadAssets"), 0);
  v67 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v3 = (char *)objc_msgSend(v67, "UTF8String");
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, v3);
  OUDataLoader::OUDataLoader(v4, __p);
  v72 = v4;
  if (v74 < 0)
  {
    operator delete(__p[0]);
    v4 = v72;
  }
  v72 = 0;
  v5 = *v2;
  *v2 = v4;
  if (v5)
  {
    std::default_delete<OUDataLoader>::operator()[abi:ne180100]((uint64_t)v2, v5);
    v6 = v72;
    v72 = 0;
    if (v6)
      std::default_delete<OUDataLoader>::operator()[abi:ne180100]((uint64_t)&v72, v6);
  }
  v7 = *v2;
  std::string::basic_string[abi:ne180100]<0>(__p, "asset_embedding_normalize");
  Data = OUDataLoader::getDataSpan<float>(v7, (unsigned __int8 *)__p);
  v10 = v9;
  if (v74 < 0)
    operator delete(__p[0]);
  if ((_BYTE)v10)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v63 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      ou3dor::CadModelRetriever::CadModelRetriever(v63);

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, (const char *)&unk_22956FEC2);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v66 = (int)(v10 >> 8);
  std::vector<std::span<float,18446744073709551615ul>>::reserve(v71, v66);
  v65 = v10;
  v11 = (unint64_t)v10 >> 8;
  if ((int)((unint64_t)v10 >> 8) >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = (_QWORD *)((char *)this + 40);
    v15 = (char *)*((_QWORD *)this + 4);
    do
    {
      v16 = Data + 4 * v13;
      if ((unint64_t)v15 >= *v14)
      {
        v17 = (v15 - (_BYTE *)*v71) >> 4;
        if ((unint64_t)(v17 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v18 = *v14 - (_QWORD)*v71;
        v19 = v18 >> 3;
        if (v18 >> 3 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v21 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)this + 40, v20);
        else
          v21 = 0;
        v22 = (uint64_t *)&v21[16 * v17];
        *v22 = v16;
        v22[1] = 256;
        v24 = (char *)*((_QWORD *)this + 3);
        v23 = (char *)*((_QWORD *)this + 4);
        v25 = v22;
        if (v23 != v24)
        {
          do
          {
            *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
            v25 -= 2;
            v23 -= 16;
          }
          while (v23 != v24);
          v23 = (char *)*v71;
        }
        v15 = (char *)(v22 + 2);
        *((_QWORD *)this + 3) = v25;
        *((_QWORD *)this + 4) = v22 + 2;
        *((_QWORD *)this + 5) = &v21[16 * v20];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v15 = v16;
        *((_QWORD *)v15 + 1) = 256;
        v15 += 16;
      }
      *((_QWORD *)this + 4) = v15;
      ++v12;
      v13 += 256;
    }
    while (v12 != (_DWORD)v11);
  }
  v26 = *v69;
  std::string::basic_string[abi:ne180100]<0>(__p, "asset_index");
  *((_QWORD *)this + 6) = OUDataLoader::getDataSpan<unsigned short>(v26, (unsigned __int8 *)__p);
  *((_QWORD *)this + 7) = v27;
  if (v74 < 0)
    operator delete(__p[0]);
  v28 = *v69;
  std::string::basic_string[abi:ne180100]<0>(__p, "asset_class");
  *((_QWORD *)this + 8) = OUDataLoader::getDataSpan<unsigned char>(v28, (unsigned __int8 *)__p);
  *((_QWORD *)this + 9) = v29;
  if (v74 < 0)
    operator delete(__p[0]);
  v30 = *v69;
  std::string::basic_string[abi:ne180100]<0>(__p, "asset_labels_detailed");
  *((_QWORD *)this + 10) = OUDataLoader::getDataSpan<unsigned char>(v30, (unsigned __int8 *)__p);
  *((_QWORD *)this + 11) = v31;
  if (v74 < 0)
    operator delete(__p[0]);
  v32 = *v69;
  std::string::basic_string[abi:ne180100]<0>(__p, "asset_selected");
  *((_QWORD *)this + 12) = OUDataLoader::getDataSpan<signed char>(v32, (unsigned __int8 *)__p);
  *((_QWORD *)this + 13) = v33;
  if (v74 < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)this + 9) != v66 || *((_QWORD *)this + 11) != v66 || *((_QWORD *)this + 13) != v66)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v54 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      ou3dor::CadModelRetriever::CadModelRetriever(v54, v55, v56, v57, v58, v59, v60, v61);

    v62 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v62, (const char *)&unk_22956FEC2);
    v62->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v62, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if ((int)v11 >= 1)
  {
    v34 = 0;
    do
    {
      __p[0] = (void *)(*((_QWORD *)this + 8) + v34);
      v35 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)v70, (unsigned __int8 *)__p[0], (uint64_t)&std::piecewise_construct, (_BYTE **)__p);
      v36 = v35;
      v37 = (char *)v35[4];
      v38 = (uint64_t)(v35 + 5);
      v39 = v35[5];
      if ((unint64_t)v37 >= v39)
      {
        v41 = (char *)v35[3];
        v42 = v37 - v41;
        if (v37 - v41 <= -3)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v43 = v42 >> 1;
        v44 = v39 - (_QWORD)v41;
        if (v44 <= (v42 >> 1) + 1)
          v45 = v43 + 1;
        else
          v45 = v44;
        if (v44 >= 0x7FFFFFFFFFFFFFFELL)
          v46 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v46 = v45;
        if (v46)
        {
          v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(v38, v46);
          v41 = (char *)v36[3];
          v37 = (char *)v36[4];
        }
        else
        {
          v47 = 0;
        }
        v48 = &v47[2 * v43];
        *(_WORD *)v48 = v34;
        v40 = v48 + 2;
        while (v37 != v41)
        {
          v49 = *((_WORD *)v37 - 1);
          v37 -= 2;
          *((_WORD *)v48 - 1) = v49;
          v48 -= 2;
        }
        v36[3] = v48;
        v36[4] = v40;
        v36[5] = &v47[2 * v46];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *(_WORD *)v37 = v34;
        v40 = v37 + 2;
      }
      v36[4] = v40;
      ++v34;
    }
    while (v34 != (v65 >> 8));
  }

  objc_msgSend(v68, "pathForResource:ofType:", CFSTR("CadAssets/asset_index_to_name"), CFSTR("plist"));
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithContentsOfFile:", v50);
  v51 = objc_claimAutoreleasedReturnValue();
  v52 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v51;

  return this;
}

void sub_22950E9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void *v25;
  uint64_t v26;

  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::~__hash_table(a15);
  v25 = *a16;
  if (*a16)
  {
    *(_QWORD *)(v23 + 32) = v25;
    operator delete(v25);
  }

  v26 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = 0;
  if (v26)
    std::default_delete<OUDataLoader>::operator()[abi:ne180100](a14, v26);
  _Unwind_Resume(a1);
}

uint64_t OUDataLoader::getDataSpan<float>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  std::logic_error *exception;

  v2 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((_QWORD *)(a1 + 24), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v3 = v2[63];
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)v2 + 6);
  if (v3 != 7
    || (v4 >= 0 ? (v5 = (int *)(v2 + 40)) : (v5 = (int *)*((_QWORD *)v2 + 5)),
        (v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == 1634692198) ? (v8 = v7 == 842232929) : (v8 = 0),
        !v8))
  {
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v2 + 5, "float64");
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOU] Mismatching querying data type.");
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *((_QWORD *)v2 + 12);
}

void sub_22950EBD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::span<float,18446744073709551615ul>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t OUDataLoader::getDataSpan<unsigned short>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  const void **v3;
  uint64_t v4;
  int v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  BOOL v9;
  std::logic_error *exception;

  v2 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((_QWORD *)(a1 + 24), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v3 = (const void **)(v2 + 40);
  v4 = v2[63];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)v2 + 6);
  if (v4 != 6
    || (v5 >= 0 ? (v6 = (unsigned __int16 *)(v2 + 40)) : (v6 = (unsigned __int16 *)*v3),
        (v7 = *(_DWORD *)v6, v8 = v6[2], v7 == 1953393013) ? (v9 = v8 == 13873) : (v9 = 0),
        !v9))
  {
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v2 + 5, "uint32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "uint64");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int8");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int64");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float64");
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOU] Mismatching querying data type.");
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *((_QWORD *)v2 + 12);
}

void sub_22950EDCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t OUDataLoader::getDataSpan<unsigned char>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  const void **v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  BOOL v9;
  std::logic_error *exception;

  v2 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((_QWORD *)(a1 + 24), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v3 = (const void **)(v2 + 40);
  v4 = v2[63];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)v2 + 6);
  if (v4 != 5
    || (v5 >= 0 ? (v6 = v2 + 40) : (v6 = (unsigned __int8 *)*v3),
        (v7 = *(_DWORD *)v6, v8 = v6[4], v7 == 1953393013) ? (v9 = v8 == 56) : (v9 = 0),
        !v9))
  {
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v2 + 5, "uint16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "uint32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "uint64");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int8");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int64");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float64");
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOU] Mismatching querying data type.");
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *((_QWORD *)v2 + 12);
}

void sub_22950EF34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t OUDataLoader::getDataSpan<signed char>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  const void **v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  std::logic_error *exception;

  v2 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((_QWORD *)(a1 + 24), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v3 = (const void **)(v2 + 40);
  v4 = v2[63];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)v2 + 6);
  if (v4 != 4 || (v5 >= 0 ? (v6 = v2 + 40) : (v6 = *v3), *v6 != 947154537))
  {
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v2 + 5, "int16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "int64");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float16");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float32");
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "float64");
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOU] Mismatching querying data type.");
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *((_QWORD *)v2 + 12);
}

void sub_22950F050(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ou3dor::CadModelRetriever::RetrieveCadModels(ou3dor::CadModelRetriever *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  OU3DObject *v7;
  uint64_t CadModel;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  void *v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v3);
        v7 = (OU3DObject *)*(id *)(*((_QWORD *)&v14 + 1) + 8 * i);
        CadModel = ou3dor::CadModelRetriever::RetrieveCadModel(a1, v7);
        if ((_DWORD)CadModel != -1)
        {
          v9 = (void *)*((_QWORD *)a1 + 2);
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d"), CadModel);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "objectForKeyedSubscript:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          -[OU3DObject setCadModelName:](v7, "setCadModelName:", v11);

          _OULoggingGetOSLogForCategoryObjectUnderstanding();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            -[OU3DObject cadModelName](v7, "cadModelName");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136315394;
            v19 = "CadModelRetriever";
            v20 = 2112;
            v21 = v13;
            _os_log_impl(&dword_2294C8000, v12, OS_LOG_TYPE_INFO, "[3DOR][%s] retrieved model: %@", buf, 0x16u);

          }
        }

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
    }
    while (v4);
  }

}

void sub_22950F258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ou3dor::CadModelRetriever::RetrieveCadModel(ou3dor::CadModelRetriever *this, OU3DObject *a2)
{
  OU3DObject *v3;
  id v4;
  unsigned __int8 *v5;
  NSObject *v6;
  uint64_t v7;
  float v8;
  void *v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  void *v14;
  float v15;
  unsigned __int8 *v16;
  uint64_t **v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  unsigned __int8 v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  void *v25;
  void *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float v32;
  double v33;
  BOOL v35;
  NSObject *v36;
  uint64_t v37;
  int *begin;
  uint64_t v39;
  NSObject *v40;
  __int32 v41;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *exception;
  unsigned __int8 v52;
  _OWORD v53[2];
  int v54;
  std::vector<int> __p;
  float32x4_t v56[3];
  float32x4_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _DWORD buf[5];
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  -[OU3DObject type](v3, "type");
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(buf, (char *)objc_msgSend(v4, "UTF8String"));
  v5 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(kObjectTypeToRetrievelClassIdx, (unsigned __int8 *)buf);
  if (v63 < 0)
    operator delete(*(void **)buf);

  if (!v5)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315138;
      *(_QWORD *)&buf[1] = "CadModelRetriever";
      _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOR][%s] unsupported object type for retrieval.", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_34;
  }
  -[OU3DObject embedding3d](v3, "embedding3d");
  v6 = objc_claimAutoreleasedReturnValue();
  if (!-[NSObject count](v6, "count"))
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315138;
      *(_QWORD *)&buf[1] = "CadModelRetriever";
      _os_log_impl(&dword_2294C8000, v36, OS_LOG_TYPE_INFO, "[3DOR][%s] no object embedding for the current object; skipping.",
        (uint8_t *)buf,
        0xCu);
    }

LABEL_34:
    v37 = 0xFFFFFFFFLL;
    goto LABEL_45;
  }
  if (-[NSObject count](v6, "count") != 256)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      ou3dor::CadModelRetriever::RetrieveCadModel(v43, v44, v45, v46, v47, v48, v49, v50);

    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E2CA890](exception, &unk_22956FEC2);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v7 = 0;
  v8 = 0.0;
  do
  {
    -[NSObject objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "floatValue");
    v11 = v10;

    v8 = v11 * v11 + v8;
    ++v7;
  }
  while (v7 != 256);
  v12 = 0;
  v13 = sqrtf(v8);
  do
  {
    -[NSObject objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "floatValue");
    *(float *)&buf[v12] = v15 / v13;

    ++v12;
  }
  while (v12 != 256);
  v16 = v5 + 40;
  v17 = std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::find<unsigned char>((_QWORD *)this + 14, v16);
  if (!v17)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v18 = v17 + 3;
  ou3dor::CadModelRetriever::SortByDistance((uint64_t)this, (uint64_t *)v17 + 3, (uint64_t)buf, &__p);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(v53, 0, sizeof(v53));
  v54 = 1065353216;
  do
  {
    v22 = *(unsigned __int16 *)(*v18 + 2 * __p.__begin_[v19]);
    v52 = 0;
    v52 = *(_BYTE *)(*((_QWORD *)this + 10) + v22);
    v56[0].i64[0] = (uint64_t)&v52;
    v23 = std::__hash_table<std::__hash_value_type<unsigned char,int>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,int>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,int>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,int>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)v53, &v52, (uint64_t)&std::piecewise_construct, v56);
    ++v19;
    v24 = *((_DWORD *)v23 + 5);
    *((_DWORD *)v23 + 5) = v24 + 1;
    if (v24 >= v20)
    {
      v21 = v52;
      v20 = v24 + 1;
    }
  }
  while (v19 != 10);
  -[OU3DObject boxesDict](v3, "boxesDict");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "objectForKey:", CFSTR("rawdetection"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    memset(v56, 0, sizeof(v56));
    box3dFromNSArray(v26, (uint64_t)v56);
    v27 = vsubq_f32(v56[0], v56[1]);
    v28 = vmulq_f32(v27, v27);
    v28.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]);
    v29 = vsubq_f32(v56[0], v57);
    v30 = vmulq_f32(v29, v29);
    v30.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
    v35 = v28.f32[0] < v30.f32[0];
    v31 = v30.f32[0] / v28.f32[0];
    v32 = v28.f32[0] / v30.f32[0];
    if (!v35)
      v32 = v31;
    v33 = v32;
    if (v33 <= 0.7 || v21 > 1u)
    {
      v35 = (v21 & 0xFE) == 0xE && v33 < 0.7;
      if (v35)
        v21 -= 14;
    }
    else
    {
      v21 += 14;
    }
  }
  begin = __p.__begin_;
  if (__p.__begin_ == __p.__end_)
  {
LABEL_39:
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      v41 = *v16;
      v56[0].i32[0] = 136315650;
      *(uint64_t *)((char *)v56[0].i64 + 4) = (uint64_t)"CadModelRetriever";
      v56[0].i16[6] = 1024;
      *(__int32 *)((char *)&v56[0].i32[3] + 2) = v41;
      v56[1].i16[1] = 1024;
      v56[1].i32[1] = v21;
      _os_log_impl(&dword_2294C8000, v40, OS_LOG_TYPE_INFO, "[3DOR][%s] Could not find any CAD model for (class, subclass) = (%d, %d).", (uint8_t *)v56, 0x18u);
    }

    v37 = 0xFFFFFFFFLL;
  }
  else
  {
    while (1)
    {
      v39 = *(unsigned __int16 *)(*v18 + 2 * *begin);
      if (*(_BYTE *)(*((_QWORD *)this + 12) + v39))
      {
        if (*(unsigned __int8 *)(*((_QWORD *)this + 10) + v39) == v21)
          break;
      }
      if (++begin == __p.__end_)
        goto LABEL_39;
    }
    v37 = *(unsigned __int16 *)(*((_QWORD *)this + 6) + 2 * v39);
  }

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v53);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
LABEL_45:

  return v37;
}

void sub_22950F7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;
  void *v44;

  __cxa_free_exception(v44);

  _Unwind_Resume(a1);
}

void ou3dor::CadModelRetriever::SortByDistance(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, std::vector<int> *a4@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::vector<int>::size_type v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  int *begin;
  int *end;
  int v21;
  int *v22;
  unint64_t v23;
  uint64_t v24;
  void *__p[3];
  void **v26;

  v8 = (a2[1] - *a2) >> 1;
  LODWORD(v26) = 0;
  std::vector<float>::vector(__p, v8, &v26);
  v9 = *a2;
  v10 = a2[1] - *a2;
  v11 = v10 >> 1;
  if (v10)
  {
    v12 = 0;
    v13 = __p[0];
    v14 = *(_QWORD *)(a1 + 24);
    if (v11 <= 1)
      v15 = 1;
    else
      v15 = v11;
    do
    {
      v16 = 0;
      v13[v12] = 0;
      v17 = *(_QWORD *)(v14 + 16 * *(unsigned __int16 *)(v9 + 2 * v12));
      v18 = 0.0;
      do
      {
        v18 = (float)(*(float *)(a3 + v16) - *(float *)(v17 + v16))
            * (float)(*(float *)(a3 + v16) - *(float *)(v17 + v16))
            + v18;
        *(float *)&v13[v12] = v18;
        v16 += 4;
      }
      while (v16 != 1024);
      ++v12;
    }
    while (v12 != v15);
  }
  std::vector<int>::vector(a4, v11);
  begin = a4->__begin_;
  end = a4->__end_;
  if (a4->__begin_ != end)
  {
    v21 = 0;
    v22 = a4->__begin_;
    do
      *v22++ = v21++;
    while (v22 != end);
  }
  v23 = 126 - 2 * __clz(end - begin);
  v26 = __p;
  if (end == begin)
    v24 = 0;
  else
    v24 = v23;
  std::__introsort<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *,false>(begin, end, (uint64_t **)&v26, v24, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22950F9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ou3dor::CadModelRetriever::~CadModelRetriever(ou3dor::CadModelRetriever *this)
{
  ou3dor::CadModelRetriever::~CadModelRetriever(this);
  JUMPOUT(0x22E2CAAE8);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_24F243188;
  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::~__hash_table((uint64_t)this + 112);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<OUDataLoader>::operator()[abi:ne180100]((uint64_t)this + 8, v3);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_22950FA64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *std::__introsort<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *,false>(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  BOOL v32;
  uint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  int *v62;
  int64_t v63;
  uint64_t *v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t *v80;
  int *v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  int *v92;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 1);
        v43 = *v10;
        if (*(float *)(**a3 + 4 * v42) < *(float *)(**a3 + 4 * v43))
        {
          *v10 = v42;
          *(a2 - 1) = v43;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        v44 = v10 + 2;
        v45 = v10 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v46 = *(a2 - 1);
        v47 = v10[3];
        v48 = **a3;
        if (*(float *)(v48 + 4 * v46) < *(float *)(v48 + 4 * v47))
        {
          *v45 = v46;
          *(a2 - 1) = v47;
          v49 = *v45;
          v50 = *v44;
          v51 = *(float *)(v48 + 4 * v49);
          if (v51 < *(float *)(v48 + 4 * v50))
          {
            *v44 = v49;
            *v45 = v50;
            v52 = v10[1];
            if (v51 < *(float *)(v48 + 4 * v52))
            {
              v10[1] = v49;
              v10[2] = v52;
              v53 = *v10;
              if (v51 < *(float *)(v48 + 4 * v53))
              {
                *v10 = v49;
                v10[1] = v53;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v54 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v55 = 0;
                v56 = **a3;
                v57 = v10;
                do
                {
                  v59 = *v57;
                  v58 = v57[1];
                  v57 = v54;
                  v60 = *(float *)(v56 + 4 * v58);
                  if (v60 < *(float *)(v56 + 4 * v59))
                  {
                    v61 = v55;
                    while (1)
                    {
                      *(int *)((char *)v10 + v61 + 4) = v59;
                      if (!v61)
                        break;
                      v59 = *(int *)((char *)v10 + v61 - 4);
                      v61 -= 4;
                      if (v60 >= *(float *)(v56 + 4 * v59))
                      {
                        v62 = (int *)((char *)v10 + v61 + 4);
                        goto LABEL_75;
                      }
                    }
                    v62 = v10;
LABEL_75:
                    *v62 = v58;
                  }
                  v54 = v57 + 1;
                  v55 += 4;
                }
                while (v57 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v94 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v95 = **a3;
              do
              {
                v97 = *v9;
                v96 = v9[1];
                v9 = v94;
                v98 = *(float *)(v95 + 4 * v96);
                if (v98 < *(float *)(v95 + 4 * v97))
                {
                  do
                  {
                    *v94 = v97;
                    v97 = *(v94 - 2);
                    --v94;
                  }
                  while (v98 < *(float *)(v95 + 4 * v97));
                  *v94 = v96;
                }
                v94 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v63 = (v12 - 2) >> 1;
            v64 = *a3;
            v65 = v63;
            do
            {
              v66 = v65;
              if (v63 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = &v10[v67];
                v69 = 2 * v65 + 2;
                v70 = *v64;
                if (v69 < (uint64_t)v12 && *(float *)(v70 + 4 * *v68) < *(float *)(v70 + 4 * v68[1]))
                {
                  ++v68;
                  v67 = 2 * v66 + 2;
                }
                result = &v10[v66];
                v71 = *v68;
                v72 = *result;
                v73 = *(float *)(v70 + 4 * v72);
                if (*(float *)(v70 + 4 * v71) >= v73)
                {
                  do
                  {
                    v74 = v68;
                    *result = v71;
                    if (v63 < v67)
                      break;
                    v75 = 2 * v67;
                    v67 = (2 * v67) | 1;
                    v68 = &v10[v67];
                    v76 = v75 + 2;
                    if (v76 < (uint64_t)v12 && *(float *)(v70 + 4 * *v68) < *(float *)(v70 + 4 * v68[1]))
                    {
                      ++v68;
                      v67 = v76;
                    }
                    v71 = *v68;
                    result = v74;
                  }
                  while (*(float *)(v70 + 4 * v71) >= v73);
                  *v74 = v72;
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v77 = (unint64_t)v11 >> 2;
            do
            {
              v78 = 0;
              v79 = *v10;
              v80 = *a3;
              v81 = v10;
              do
              {
                v82 = v81;
                v81 += v78 + 1;
                v83 = 2 * v78;
                v78 = (2 * v78) | 1;
                v84 = v83 + 2;
                if (v84 < v77)
                {
                  result = (int *)v81[1];
                  if (*(float *)(*v80 + 4 * *v81) < *(float *)(*v80 + 4 * (_QWORD)result))
                  {
                    ++v81;
                    v78 = v84;
                  }
                }
                *v82 = *v81;
              }
              while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              if (v81 == --a2)
              {
                *v81 = v79;
              }
              else
              {
                *v81 = *a2;
                *a2 = v79;
                v85 = (char *)v81 - (char *)v10 + 4;
                if (v85 >= 5)
                {
                  v86 = (((unint64_t)v85 >> 2) - 2) >> 1;
                  v87 = &v10[v86];
                  v88 = *v87;
                  v89 = *v81;
                  v90 = *v80;
                  v91 = *(float *)(v90 + 4 * v89);
                  if (*(float *)(v90 + 4 * v88) < v91)
                  {
                    do
                    {
                      v92 = v87;
                      *v81 = v88;
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = &v10[v86];
                      v88 = *v87;
                      v81 = v92;
                    }
                    while (*(float *)(v90 + 4 * v88) < v91);
                    *v92 = v89;
                  }
                }
              }
            }
            while (v77-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x201)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(&v9[v12 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v9, &v9[v12 >> 1], a2 - 1, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v9 + 1, v14 - 1, a2 - 2, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = **a3;
        if ((a5 & 1) == 0)
        {
          v18 = *(float *)(v17 + 4 * v16);
          if (*(float *)(v17 + 4 * *(v9 - 1)) < v18)
            goto LABEL_12;
          if (v18 >= *(float *)(v17 + 4 * *(a2 - 1)))
          {
            v34 = v9 + 1;
            do
            {
              v10 = v34;
              if (v34 >= a2)
                break;
              ++v34;
            }
            while (v18 >= *(float *)(v17 + 4 * *v10));
          }
          else
          {
            v10 = v9;
            do
            {
              v33 = v10[1];
              ++v10;
            }
            while (v18 >= *(float *)(v17 + 4 * v33));
          }
          v35 = a2;
          if (v10 < a2)
          {
            v35 = a2;
            do
              v36 = *--v35;
            while (v18 < *(float *)(v17 + 4 * v36));
          }
          if (v10 < v35)
          {
            v37 = *v10;
            v38 = *v35;
            do
            {
              *v10 = v38;
              *v35 = v37;
              do
              {
                v39 = v10[1];
                ++v10;
                v37 = v39;
              }
              while (v18 >= *(float *)(v17 + 4 * v39));
              do
              {
                v40 = *--v35;
                v38 = v40;
              }
              while (v18 < *(float *)(v17 + 4 * v40));
            }
            while (v10 < v35);
          }
          v41 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v41;
          a5 = 0;
          *v41 = v16;
          continue;
        }
        v18 = *(float *)(v17 + 4 * v16);
LABEL_12:
        v19 = 0;
        do
          v20 = v9[++v19];
        while (*(float *)(v17 + 4 * v20) < v18);
        v21 = &v9[v19];
        v22 = a2;
        if (v19 == 1)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *--v22;
          }
          while (*(float *)(v17 + 4 * v24) >= v18);
        }
        else
        {
          do
            v23 = *--v22;
          while (*(float *)(v17 + 4 * v23) >= v18);
        }
        if (v21 >= v22)
        {
          v31 = v21 - 1;
        }
        else
        {
          v25 = *v22;
          v26 = v20;
          v27 = &v9[v19];
          v28 = v22;
          do
          {
            *v27 = v25;
            *v28 = v26;
            do
            {
              v29 = v27[1];
              ++v27;
              v26 = v29;
            }
            while (*(float *)(v17 + 4 * v29) < v18);
            do
            {
              v30 = *--v28;
              v25 = v30;
            }
            while (*(float *)(v17 + 4 * v30) >= v18);
          }
          while (v27 < v28);
          v31 = v27 - 1;
        }
        if (v31 != v9)
          *v9 = *v31;
        *v31 = v16;
        if (v21 < v22)
        {
LABEL_33:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *,false>(v9, v31, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v31 + 1;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v9, v31, a3);
        v10 = v31 + 1;
        result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v31 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v31;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *result;
  v6 = **a4;
  v7 = *(float *)(v6 + 4 * v4);
  v8 = *(float *)(v6 + 4 * v5);
  v9 = *a3;
  v10 = *(float *)(v6 + 4 * v9);
  if (v7 >= v8)
  {
    if (v10 < v7)
    {
      *a2 = v9;
      *a3 = v4;
      v11 = *a2;
      v12 = *result;
      if (*(float *)(v6 + 4 * v11) < *(float *)(v6 + 4 * v12))
      {
        *result = v11;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v10 >= v7)
    {
      *result = v4;
      *a2 = v5;
      v13 = *a3;
      if (*(float *)(v6 + 4 * v13) >= v8)
        return result;
      *a2 = v13;
    }
    else
    {
      *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) < *(float *)(**a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 2;
      v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = a1[3];
      v25 = **a3;
      if (*(float *)(v25 + 4 * v23) < *(float *)(v25 + 4 * v24))
      {
        *v22 = v23;
        *(a2 - 1) = v24;
        v26 = *v22;
        v27 = *v21;
        v28 = *(float *)(v25 + 4 * v26);
        if (v28 < *(float *)(v25 + 4 * v27))
        {
          *v21 = v26;
          *v22 = v27;
          v29 = a1[1];
          if (v28 < *(float *)(v25 + 4 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            v30 = *a1;
            if (v28 < *(float *)(v25 + 4 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 4 * v15);
    if (v17 < *(float *)(v13 + 4 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t **a5)
{
  int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = **a5;
  if (*(float *)(v13 + 4 * v11) < *(float *)(v13 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(float *)(v13 + 4 * v14) < *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(float *)(v13 + 4 * v16) < *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::unordered_map<std::string,unsigned char>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned char> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_2295105B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned char> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::pair<std::string const,unsigned char> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_229510820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::pair<std::string const,unsigned char> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  v8[40] = *(_BYTE *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_2295108D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::default_delete<OUDataLoader>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::~__hash_table(a2 + 24);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x22E2CAAE8);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDataLoader::DataArray>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDataLoader::DataArray>,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_229510D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::find<unsigned char>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned char,int>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,int>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,int>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,int>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_229511068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void _GLOBAL__sub_I_CadModelRetriever_mm()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t i;
  __CFString *v9;
  __CFString *v10;
  uint64_t j;
  uint64_t k;
  void *context;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __CFString *v39;
  int v40;
  __CFString *v41;
  int v42;
  __CFString *v43;
  int v44;
  __CFString *v45;
  int v46;
  __CFString *v47;
  int v48;
  __CFString *v49;
  int v50;
  __CFString *v51;
  int v52;
  __CFString *v53;
  int v54;
  __CFString *v55;
  int v56;
  id v57;
  int v58;
  __CFString *v59;
  int v60;
  __CFString *v61;
  int v62;
  __CFString *v63;
  int v64;
  __CFString *v65;
  int v66;
  __CFString *v67;
  int v68;
  id v69;
  int v70;
  __CFString *v71;
  int v72;
  id v73;
  int v74;
  __CFString *v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x22E2CB070]();
  LODWORD(v24) = 0;
  *((_QWORD *)&v24 + 1) = CFSTR("Unknown");
  LODWORD(v25) = 1;
  *((_QWORD *)&v25 + 1) = *((id *)&v24 + 1);
  LODWORD(v26) = 2;
  *((_QWORD *)&v26 + 1) = *((id *)&v25 + 1);
  LODWORD(v27) = 3;
  *((_QWORD *)&v27 + 1) = *((id *)&v26 + 1);
  LODWORD(v28) = 4;
  *((_QWORD *)&v28 + 1) = *((id *)&v27 + 1);
  LODWORD(v29) = 5;
  *((_QWORD *)&v29 + 1) = *((id *)&v28 + 1);
  LODWORD(v30) = 6;
  v23 = CFSTR("Door");
  *((_QWORD *)&v30 + 1) = v23;
  LODWORD(v31) = 7;
  v22 = CFSTR("Window");
  *((_QWORD *)&v31 + 1) = v22;
  LODWORD(v32) = 8;
  *((_QWORD *)&v32 + 1) = *((id *)&v29 + 1);
  LODWORD(v33) = 9;
  v20 = CFSTR("Fireplace");
  *((_QWORD *)&v33 + 1) = v20;
  LODWORD(v34) = 10;
  *((_QWORD *)&v34 + 1) = *((id *)&v32 + 1);
  LODWORD(v35) = 11;
  *((_QWORD *)&v35 + 1) = *((id *)&v34 + 1);
  LODWORD(v36) = 12;
  v21 = CFSTR("Stairs");
  *((_QWORD *)&v36 + 1) = v21;
  LODWORD(v37) = 13;
  v16 = CFSTR("Bed");
  *((_QWORD *)&v37 + 1) = v16;
  LODWORD(v38) = 14;
  v39 = CFSTR("Cabinet");
  v40 = 15;
  v19 = CFSTR("Chair");
  v41 = v19;
  v42 = 16;
  v43 = v39;
  v44 = 17;
  v45 = v43;
  v46 = 18;
  v18 = CFSTR("Sofa");
  v47 = v18;
  v48 = 19;
  v17 = CFSTR("Table");
  v49 = v17;
  v50 = 20;
  v15 = CFSTR("Toilet");
  v51 = v15;
  v52 = 21;
  v0 = CFSTR("Sink");
  v53 = v0;
  v54 = 22;
  v14 = CFSTR("Bathtub");
  v55 = v14;
  v56 = 23;
  v57 = *((id *)&v35 + 1);
  v58 = 24;
  v1 = CFSTR("Refrigerator");
  v59 = v1;
  v60 = 25;
  v2 = CFSTR("Stove");
  v61 = v2;
  v62 = 26;
  v3 = CFSTR("Washer");
  v63 = v3;
  v64 = 27;
  v4 = CFSTR("Oven");
  v65 = v4;
  v66 = 28;
  v5 = CFSTR("Dishwasher");
  v67 = v5;
  v68 = 29;
  v69 = v57;
  v70 = 30;
  v6 = v45;
  v71 = v6;
  v72 = 31;
  v73 = v69;
  v74 = 32;
  v7 = CFSTR("Screen");
  v75 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v24, 33);
  for (i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_2294C8000);
  v34 = xmmword_229560F6C;
  v35 = unk_229560F7C;
  v36 = xmmword_229560F8C;
  v37 = unk_229560F9C;
  v30 = xmmword_229560F2C;
  v31 = unk_229560F3C;
  v32 = xmmword_229560F4C;
  v33 = unk_229560F5C;
  v26 = xmmword_229560EEC;
  v27 = unk_229560EFC;
  v28 = xmmword_229560F0C;
  v29 = unk_229560F1C;
  v24 = xmmword_229560ECC;
  v25 = unk_229560EDC;
  v38 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v24, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_2294C8000);
  LODWORD(v24) = 0;
  *((_QWORD *)&v24 + 1) = v6;
  LODWORD(v25) = 1;
  *((_QWORD *)&v25 + 1) = v1;
  LODWORD(v26) = 2;
  *((_QWORD *)&v26 + 1) = CFSTR("Shelf");
  LODWORD(v27) = 3;
  *((_QWORD *)&v27 + 1) = v2;
  LODWORD(v28) = 4;
  *((_QWORD *)&v28 + 1) = v16;
  LODWORD(v29) = 5;
  *((_QWORD *)&v29 + 1) = v0;
  LODWORD(v30) = 6;
  *((_QWORD *)&v30 + 1) = v3;
  LODWORD(v31) = 7;
  *((_QWORD *)&v31 + 1) = v15;
  LODWORD(v32) = 8;
  *((_QWORD *)&v32 + 1) = v14;
  LODWORD(v33) = 9;
  *((_QWORD *)&v33 + 1) = v4;
  LODWORD(v34) = 10;
  *((_QWORD *)&v34 + 1) = v5;
  LODWORD(v35) = 11;
  *((_QWORD *)&v35 + 1) = v20;
  LODWORD(v36) = 12;
  *((_QWORD *)&v36 + 1) = CFSTR("Stool");
  LODWORD(v37) = 13;
  v9 = v19;
  *((_QWORD *)&v37 + 1) = v9;
  LODWORD(v38) = 14;
  v39 = v17;
  v40 = 15;
  v41 = v7;
  v42 = 16;
  v10 = v18;
  v43 = v10;
  v44 = 17;
  v45 = v21;
  v46 = 18;
  v47 = v22;
  v48 = 19;
  v49 = v23;
  v50 = 20;
  v51 = CFSTR("BuildInCabinet");
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v24, 21);
  for (j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_2294C8000);
  std::string::basic_string[abi:ne180100]<0>(&v24, (char *)-[__CFString UTF8String](v10, "UTF8String"));
  BYTE8(v25) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v26, (char *)-[__CFString UTF8String](v9, "UTF8String"));
  BYTE8(v27) = 1;
  std::unordered_map<std::string,unsigned char>::unordered_map((uint64_t)kObjectTypeToRetrievelClassIdx, (unsigned __int8 *)&v24, 2);
  for (k = 0; k != -64; k -= 32)
  {
    if (*((char *)&v27 + k + 7) < 0)
      operator delete(*(void **)((char *)&v26 + k));
  }
  __cxa_atexit((void (*)(void *))std::unordered_map<std::string,unsigned char>::~unordered_map[abi:ne180100], kObjectTypeToRetrievelClassIdx, &dword_2294C8000);
  objc_autoreleasePoolPop(context);
}

void sub_2295117FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v28;

  v28 = 0;
  while (1)
  {
    if (*(char *)(v26 + v28 + 55) < 0)
      operator delete(*(void **)(v26 + v28 + 32));
    v28 -= 32;
    if (v28 == -64)
      _Unwind_Resume(exception_object);
  }
}

void sub_2295119EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_229511A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t is_sample_points_equal(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  unint64_t v6;
  unint64_t v7;
  float *v8;
  float *v9;
  int v10;
  test_utils::Comparator *v11;
  __int128 v12;
  _BOOL8 v13;
  _BOOL4 v14;
  _BOOL8 v15;

  v5 = a2;
  v6 = 0;
  v7 = (objc_msgSend(v5, "count") + 29) / 0x1EuLL;
  v8 = (float *)(a3 + 8);
  v9 = (float *)(a1 + 8);
  v10 = 1;
  while (v6 < objc_msgSend(v5, "count"))
  {
    v11 = (test_utils::Comparator *)objc_msgSend(v5, "points");
    v12 = *((_OWORD *)v11 + v6);
    *(_OWORD *)(v8 - 2) = v12;
    v13 = test_utils::Comparator::closeEnoughWPercent(v11, *(v9 - 2), *(float *)&v12, 0.000001);
    v14 = v13;
    v15 = test_utils::Comparator::closeEnoughWPercent((test_utils::Comparator *)v13, *(v9 - 1), *(v8 - 1), 0.000001);
    v10 &= test_utils::Comparator::closeEnoughWPercent((test_utils::Comparator *)v15, *v9, *v8, 0.000001) && v15 && v14;
    v6 += v7;
    v8 += 4;
    v9 += 4;
  }

  return v10 & 1;
}

void sub_229511B90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229511E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_229512324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_229512460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_2295125C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_229512814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229512958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229512AB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229512C40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_229513234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, id a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_229513418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2295135FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_229513824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_2295139EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_229513B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_229513DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double rotationZMatrix(float a1)
{
  __float2 v1;

  v1 = __sincosf_stret(a1);
  return COERCE_DOUBLE(__PAIR64__(LODWORD(v1.__sinval), LODWORD(v1.__cosval)));
}

double rotationYMatrix(float a1)
{
  double result;

  *(_QWORD *)&result = LODWORD(__sincosf_stret(a1).__cosval);
  return result;
}

double rotationXMatrix(float a1)
{
  double result;

  __sincosf_stret(a1);
  *(_QWORD *)&result = 1065353216;
  return result;
}

__n128 swapCornerGT2QA@<Q0>(const box3d *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *(_OWORD *)a1;
  v3 = *((_OWORD *)a1 + 1);
  v4 = *((_OWORD *)a1 + 2);
  *(_OWORD *)a2 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  result = *((__n128 *)a1 + 4);
  v6 = *((_OWORD *)a1 + 5);
  v7 = *((_OWORD *)a1 + 6);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)a1 + 7);
  *(__n128 *)(a2 + 80) = result;
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 112) = v7;
  return result;
}

__n128 box3dToCentroidSizeAngle@<Q0>(float32x4_t *a1@<X0>, uint64_t *a2@<X8>)
{
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float v12;
  uint64_t v13;
  __n128 result;
  float32x4_t v15;
  int v16;

  v3 = vsubq_f32(*a1, a1[3]);
  v4 = vmulq_f32(v3, v3);
  v5 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]);
  v6 = vsubq_f32(*a1, a1[1]);
  v7 = vmulq_f32(v6, v6);
  v8 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]);
  v9 = vsubq_f32(*a1, a1[4]);
  v10 = vmulq_f32(v9, v9);
  v11 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  v15 = vmulq_f32(vaddq_f32(*a1, a1[6]), v10);
  v12 = atan2f(v6.f32[0], v6.f32[1]);
  v16 = 0;
  std::vector<float>::vector(a2, 7uLL, &v16);
  v13 = *a2;
  result = (__n128)v15;
  *(_QWORD *)v13 = v15.i64[0];
  *(_DWORD *)(v13 + 8) = v15.i32[2];
  *(float *)(v13 + 12) = v5;
  *(float *)(v13 + 16) = v8;
  *(float *)(v13 + 20) = v11;
  *(float *)(v13 + 24) = v12;
  return result;
}

void box3dVol(const float *a1)
{
  float v2;
  float *__C[3];

  if (a1)
  {
    std::vector<float>::vector(__C, 3uLL);
    v2 = 0.0;
    vDSP_vsub(a1 + 3, 1, a1, 1, __C[0], 1, 3uLL);
    vDSP_svesq(__C[0], 1, &v2, 3uLL);
    vDSP_vsub(a1 + 6, 1, a1 + 3, 1, __C[0], 1, 3uLL);
    vDSP_svesq(__C[0], 1, &v2, 3uLL);
    vDSP_vsub(a1 + 12, 1, a1, 1, __C[0], 1, 3uLL);
    vDSP_svesq(__C[0], 1, &v2, 3uLL);
    if (__C[0])
    {
      __C[1] = __C[0];
      operator delete(__C[0]);
    }
  }
}

void sub_229514304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float boxVolume(const box3d *a1)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  char *v9;
  uint64_t v10;
  float v11;
  float v12;
  void *__p[3];

  v2 = operator new(0x80uLL);
  v3 = *((_OWORD *)a1 + 5);
  v2[4] = *((_OWORD *)a1 + 4);
  v2[5] = v3;
  v4 = *((_OWORD *)a1 + 7);
  v2[6] = *((_OWORD *)a1 + 6);
  v2[7] = v4;
  v5 = *((_OWORD *)a1 + 1);
  *v2 = *(_OWORD *)a1;
  v2[1] = v5;
  v6 = *((_OWORD *)a1 + 3);
  v2[2] = *((_OWORD *)a1 + 2);
  v2[3] = v6;
  std::vector<float>::vector(__p, 0x18uLL);
  v7 = 0;
  v8 = v2;
  do
  {
    v9 = (char *)__p[0] + v7;
    v10 = *(_QWORD *)v8;
    *((_DWORD *)v9 + 2) = *((_DWORD *)v8 + 2);
    *(_QWORD *)v9 = v10;
    v7 += 12;
    ++v8;
  }
  while (v7 != 96);
  operator delete(v2);
  box3dVol((const float *)__p[0]);
  v12 = v11;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v12;
}

void sub_2295143E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t box3dToYDownCoord@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  int32x4_t v3;

  for (i = 0; i != 128; i += 16)
  {
    v3 = (int32x4_t)vmulq_f32(*(float32x4_t *)(result + i), (float32x4_t)xmmword_229560FF0);
    *(int32x4_t *)(a2 + i) = vuzp1q_s32(v3, vrev64q_s32(v3));
  }
  return result;
}

uint64_t box3dToZUpCoord@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  int32x4_t v3;

  for (i = 0; i != 128; i += 16)
  {
    v3 = (int32x4_t)vmulq_f32(*(float32x4_t *)(result + i), (float32x4_t)xmmword_229561000);
    *(int32x4_t *)(a2 + i) = vuzp1q_s32(v3, vrev64q_s32(v3));
  }
  return result;
}

float flipAxisToWorld@<S0>(const box3d *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  float *v7;
  unint64_t v8;
  float result;

  v2 = 0;
  v3 = *((_OWORD *)a1 + 5);
  a2[4] = *((_OWORD *)a1 + 4);
  a2[5] = v3;
  v4 = *((_OWORD *)a1 + 7);
  a2[6] = *((_OWORD *)a1 + 6);
  a2[7] = v4;
  v5 = *((_OWORD *)a1 + 1);
  *a2 = *(_OWORD *)a1;
  a2[1] = v5;
  v6 = *((_OWORD *)a1 + 3);
  a2[2] = *((_OWORD *)a1 + 2);
  a2[3] = v6;
  do
  {
    v7 = (float *)&a2[v2];
    v8 = vuzp1q_s32((int32x4_t)a2[v2], (int32x4_t)a2[v2]).u64[0];
    result = -COERCE_FLOAT(HIDWORD(*(_QWORD *)&a2[v2]));
    v7[2] = result;
    *(_QWORD *)v7 = v8;
    ++v2;
  }
  while (v2 != 8);
  return result;
}

void box3dIou(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  void **v16;
  unint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float *v23;
  unint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v33;
  float32x4_t v34;
  const Polygon *v35;
  float v36;
  const Polygon *v37;
  float v38;
  const Polygon *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  const Polygon *v45;
  float v46;
  const Polygon *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  void *__p[5];
  _OWORD v58[8];
  void *v59[2];
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  _OWORD v67[2];
  _OWORD v68[2];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = *a2;
  v9 = vsubq_f32(*a1, *a2);
  v10 = vmulq_f32(v9, v9);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]) <= 0.001)
  {
    v25 = 1;
    while (v25 != 8)
    {
      v26 = vsubq_f32(a1[v25], a2[v25]);
      v27 = vmulq_f32(v26, v26);
      ++v25;
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]) > 0.001)
      {
        if ((unint64_t)(v25 - 2) < 7)
          goto LABEL_2;
        break;
      }
    }
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)a4 = _D0;
    *(float *)(a4 + 8) = boxVolume((const box3d *)a1);
    *(_OWORD *)(a4 + 12) = xmmword_229561010;
    *(_OWORD *)(a4 + 28) = xmmword_2295604C0;
    *(_DWORD *)(a4 + 44) = 0;
  }
  else
  {
LABEL_2:
    if (a3)
    {
      v11 = 0;
      v12 = a1[5];
      v63 = a1[4];
      v64 = v12;
      v13 = a1[7];
      v65 = a1[6];
      v66 = v13;
      v14 = a1[1];
      *(float32x4_t *)v59 = *a1;
      v60 = v14;
      v15 = a1[3];
      v61 = a1[2];
      v62 = v15;
      do
      {
        v16 = &v59[v11];
        v17 = vuzp1q_s32(*(int32x4_t *)&v59[v11], *(int32x4_t *)&v59[v11]).u64[0];
        *((float *)v16 + 2) = -COERCE_FLOAT((unint64_t)v59[v11] >> 32);
        *v16 = (void *)v17;
        v11 += 2;
      }
      while (v11 != 16);
      v18 = 0;
      v19 = a2[7];
      v58[6] = a2[6];
      v58[7] = v19;
      v20 = a2[5];
      v58[4] = a2[4];
      v58[5] = v20;
      v21 = a2[1];
      v58[0] = *a2;
      v58[1] = v21;
      v22 = a2[3];
      v58[2] = a2[2];
      v58[3] = v22;
      do
      {
        v23 = (float *)&v58[v18];
        v24 = vuzp1q_s32((int32x4_t)v58[v18], (int32x4_t)v58[v18]).u64[0];
        v23[2] = -COERCE_FLOAT(HIDWORD(*(_QWORD *)&v58[v18]));
        *(_QWORD *)v23 = v24;
        ++v18;
      }
      while (v18 != 8);
      box3dIou((const box3d *)v59, (const box3d *)v58, 0);
    }
    else
    {
      v33 = a1[2];
      v7.i64[1] = a1[1].i64[0];
      v33.i64[1] = a1[3].i64[0];
      v34 = a2[2];
      v8.i64[1] = a2[1].i64[0];
      v68[0] = v7;
      v68[1] = v33;
      v34.i64[1] = a2[3].i64[0];
      v67[0] = v8;
      v67[1] = v34;
      OU::Polygon::Polygon(v59, v68, 4);
      OU::Polygon::Polygon(v58, v67, 4);
      OU::clip((OU *)v59, (const Polygon *)v58, (char *)__p);
      v36 = OU::area((OU *)v59, v35);
      v38 = OU::area((OU *)v58, v37);
      v40 = OU::area((OU *)__p, v39);
      v41 = a1->f32[2];
      v42 = a2->f32[2];
      v43 = a1[4].f32[2];
      v44 = a2[4].f32[2];
      v46 = OU::area((OU *)v59, v45);
      v55 = *a1;
      v56 = a1[4];
      v48 = OU::area((OU *)v58, v47);
      v49 = (float)(v36 + v38) - v40;
      v50 = fmax((float)(fminf(v43, v44) - fmaxf(v41, v42)), 0.0);
      v51 = v40 * v50;
      v52 = v46 * vabds_f32(v56.f32[2], v55.f32[2]);
      v53 = v48 * vabds_f32(a2[4].f32[2], a2->f32[2]);
      v54 = (float)(v52 + v53) - v51;
      *(float *)a4 = v51 / v54;
      *(float *)(a4 + 4) = v51;
      *(float *)(a4 + 8) = v54;
      *(float *)(a4 + 12) = v51 / fminf(v52, v53);
      *(float *)(a4 + 16) = v51 / v52;
      *(float *)(a4 + 20) = v51 / v53;
      *(float *)(a4 + 24) = v40 / v49;
      *(float *)(a4 + 28) = v40;
      *(float *)(a4 + 32) = v49;
      *(float *)(a4 + 36) = v40 / fminf(v36, v38);
      *(float *)(a4 + 40) = v40 / v36;
      *(float *)(a4 + 44) = v40 / v38;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (*(_QWORD *)&v58[0])
      {
        *((_QWORD *)&v58[0] + 1) = *(_QWORD *)&v58[0];
        operator delete(*(void **)&v58[0]);
      }
      if (v59[0])
      {
        v59[1] = v59[0];
        operator delete(v59[0]);
      }
    }
  }
}

void sub_22951482C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a35)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

void centroidSizeAngleToBox3d(_OWORD *a1@<X8>, __n128 a2@<Q0>, int8x16_t a3@<Q1>, float a4@<S2>)
{
  __n128 v6;
  int8x8_t *v7;
  void *__p[3];

  std::vector<float>::vector(__p, 7uLL);
  v6 = a2;
  v6.n128_u32[3] = a3.i32[0];
  v7 = (int8x8_t *)__p[0];
  *(__n128 *)__p[0] = v6;
  v7[2] = vext_s8(*(int8x8_t *)a3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL), 4uLL);
  *(float *)v7[3].i32 = a4;
  centroidSizeAngleToBox3d((uint64_t *)__p, 1, a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_229514910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void centroidSizeAngleToBox3d(uint64_t *a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  float32_t v6;
  float32x2_t *v7;
  float32x2_t *v8;
  uint64_t v9;
  float32x4_t v10;
  _OWORD *v11;
  unint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  __float2 v17;
  uint64_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;

  v5 = *a1;
  v6 = *(float *)(*a1 + 20) * 0.5;
  v21 = vmul_f32(*(float32x2_t *)(*a1 + 12), (float32x2_t)0x3F0000003F000000);
  v7 = (float32x2_t *)operator new(0x60uLL);
  v8 = v7;
  v9 = 0;
  *v7 = v21;
  v7[1].f32[0] = -v6;
  v7[1].i32[1] = v21.i32[0];
  v7[2].f32[0] = -v21.f32[1];
  v7[2].f32[1] = -v6;
  v7[3].f32[0] = -v21.f32[0];
  v7[3].f32[1] = -v21.f32[1];
  v7[4].f32[0] = -v6;
  v7[4].f32[1] = -v21.f32[0];
  v7[5].i32[0] = v21.i32[1];
  v7[5].f32[1] = -v6;
  v7[6] = v21;
  v7[7].f32[0] = v6;
  v7[7].i32[1] = v21.i32[0];
  v7[8].f32[0] = -v21.f32[1];
  v7[8].f32[1] = v6;
  v7[9].f32[0] = -v21.f32[0];
  v7[9].f32[1] = -v21.f32[1];
  v7[11].i32[0] = v21.i32[1];
  v7[10].f32[0] = v6;
  v7[10].f32[1] = -v21.f32[0];
  v7[11].f32[1] = v6;
  v10.i32[3] = 0;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  v11 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  do
  {
    *(float32x2_t *)v11 = *(float32x2_t *)((char *)v7 + v9 * 4);
    *((_DWORD *)v11 + 2) = v7[1].i32[v9];
    v9 += 3;
    ++v11;
  }
  while (v9 != 24);
  if (a2)
  {
    v12 = (unint64_t)__sincosf_stret(*(float *)(v5 + 24));
    v13 = 0;
    v14.i64[1] = 0;
    v14.i32[0] = HIDWORD(v12);
    v10.i32[3] = 0;
    do
    {
      v14.f32[1] = -*(float *)&v12;
      a3[v13] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(a3[v13])), (float32x4_t)v12, *(float32x2_t *)&a3[v13], 1), (float32x4_t)xmmword_2295604C0, (float32x4_t)a3[v13], 2);
      ++v13;
    }
    while (v13 != 8);
  }
  v15 = 0;
  v10.i64[0] = *(_QWORD *)v5;
  v10.i32[2] = *(_DWORD *)(v5 + 8);
  do
  {
    a3[v15] = vaddq_f32(v10, (float32x4_t)a3[v15]);
    ++v15;
  }
  while (v15 != 8);
  if ((a2 & 1) == 0)
  {
    v17 = __sincosf_stret(*(float *)(v5 + 24));
    *(__float2 *)v16.i8 = v17;
    v18 = 0;
    v19 = vzip1q_s32(v16, (int32x4_t)0);
    v20 = (float32x4_t)vzip2q_s32(vzip1q_s32(vdupq_lane_s32(*(int32x2_t *)v19.i8, 0), (int32x4_t)0), v19);
    do
    {
      a3[v18] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)__PAIR64__(-v17.__sinval, LODWORD(v17.__cosval)), COERCE_FLOAT(a3[v18])), v20, *(float32x2_t *)&a3[v18], 1), (float32x4_t)xmmword_2295604C0, (float32x4_t)a3[v18], 2);
      ++v18;
    }
    while (v18 != 8);
  }
  operator delete(v8);
}

double getCentroid(const box3d *a1)
{
  uint64_t v1;
  float32x4_t v2;
  float32x4_t v3;
  double result;

  v1 = 0;
  v2 = 0uLL;
  do
  {
    v2 = vaddq_f32(v2, *(float32x4_t *)((char *)a1 + v1));
    v1 += 16;
  }
  while (v1 != 128);
  v3.i64[0] = 0x3E0000003E000000;
  v3.i64[1] = 0x3E0000003E000000;
  *(_QWORD *)&result = vmulq_f32(v2, v3).u64[0];
  return result;
}

int32x4_t *rotateBoxCorners@<X0>(int32x4_t *result@<X0>, const box3d *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  v3 = 0;
  v4 = result[1];
  v5 = result[2];
  v6 = result[3];
  v7 = vzip1q_s32(*result, v5);
  v8 = vzip2q_s32(*result, v5);
  v9 = vzip1q_s32(v4, v6);
  v10 = vzip2q_s32(v4, v6);
  v11 = vzip1q_s32(v7, v9);
  v12 = vzip2q_s32(v7, v9);
  v13 = vzip1q_s32(v8, v10);
  v14 = vzip2q_s32(v8, v10);
  v15 = vzip1q_s32(v11, v13);
  v16 = vzip2q_s32(v11, v13);
  v17 = vzip1q_s32(v12, v14);
  v18 = vzip2q_s32(v12, v14);
  v19 = (float32x4_t)vzip1q_s32(v15, v17);
  v20 = (float32x4_t)vzip2q_s32(v15, v17);
  v21 = (float32x4_t)vzip1q_s32(v16, v18);
  v22 = (float32x4_t)vzip2q_s32(v16, v18);
  do
  {
    *(float32x4_t *)(a3 + v3) = vaddq_f32(v22, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(_OWORD *)((char *)a2 + v3))), v20, *(float32x2_t *)((char *)a2 + v3), 1), v21, *(float32x4_t *)((char *)a2 + v3), 2));
    v3 += 16;
  }
  while (v3 != 128);
  return result;
}

float32x4_t *rotateBoxCorners@<X0>(float32x4_t *result@<X0>, const box3d *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;

  v3 = 0;
  v4 = *result;
  v5 = result[1];
  v6 = result[2];
  do
  {
    *(float32x4_t *)(a3 + v3) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*(_OWORD *)((char *)a2 + v3))), v5, *(float32x2_t *)((char *)a2 + v3), 1), v6, *(float32x4_t *)((char *)a2 + v3), 2);
    v3 += 16;
  }
  while (v3 != 128);
  return result;
}

void writeBox3ds(const void **a1, uint64_t *a2, uint64_t *a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  size_t v9;
  std::string *p_s;
  const void *v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  size_t v15;
  std::string *v16;
  const void *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  const std::string::value_type *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  int v33;
  uint64_t v34;
  uint64_t size;
  _QWORD *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::vector<std::string> v45;
  void *__p[3];
  void *v47[3];
  std::string v48;
  std::string v49;
  std::string __s;
  std::string v51;
  std::fstream v52;
  std::ios_base v53;
  uint64_t v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) == (a3[1] - *a3) >> 2)
  {
    if (*((char *)a1 + 23) >= 0)
      v6 = *((unsigned __int8 *)a1 + 23);
    else
      v6 = (size_t)a1[1];
    v7 = &v51;
    std::string::basic_string[abi:ne180100]((uint64_t)&v51, v6 + 11);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (*((char *)a1 + 23) >= 0)
        v8 = a1;
      else
        v8 = *a1;
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, "corners.txt");
    if (*((char *)a1 + 23) >= 0)
      v9 = *((unsigned __int8 *)a1 + 23);
    else
      v9 = (size_t)a1[1];
    p_s = &__s;
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v9 + 9);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (v9)
    {
      if (*((char *)a1 + 23) >= 0)
        v11 = a1;
      else
        v11 = *a1;
      memmove(p_s, v11, v9);
    }
    strcpy((char *)p_s + v9, "types.txt");
    if (*((char *)a1 + 23) >= 0)
      v12 = *((unsigned __int8 *)a1 + 23);
    else
      v12 = (size_t)a1[1];
    v13 = &v49;
    std::string::basic_string[abi:ne180100]((uint64_t)&v49, v12 + 15);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if (v12)
    {
      if (*((char *)a1 + 23) >= 0)
        v14 = a1;
      else
        v14 = *a1;
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, "confidences.txt");
    if (*((char *)a1 + 23) >= 0)
      v15 = *((unsigned __int8 *)a1 + 23);
    else
      v15 = (size_t)a1[1];
    v16 = &v48;
    std::string::basic_string[abi:ne180100]((uint64_t)&v48, v15 + 9);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if (v15)
    {
      if (*((char *)a1 + 23) >= 0)
        v17 = a1;
      else
        v17 = *a1;
      memmove(v16, v17, v15);
    }
    strcpy((char *)v16 + v15, "uuids.txt");
    std::vector<float>::vector(v47, 0x4924924924924928 * ((a2[1] - *a2) >> 5));
    std::vector<float>::vector(__p, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
    std::vector<std::string>::vector(&v45, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
    v18 = *a2;
    if (a2[1] != *a2)
    {
      v19 = 0;
      v20 = 0;
      v21 = 4;
      do
      {
        v22 = v47[0];
        v23 = (_DWORD *)(v18 + v21);
        v24 = -24;
        do
        {
          v22[(v19 + v24 + 24)] = *(v23 - 1);
          v22[(v19 + v24 + 25)] = *v23;
          v22[(v19 + v24 + 26)] = v23[1];
          v23 += 4;
          v24 += 3;
        }
        while (v24);
        v25 = v18 + 224 * v20;
        *((_DWORD *)__p[0] + v20) = *(_DWORD *)(v25 + 136);
        objc_msgSend(*(id *)(v25 + 144), "UUIDString");
        v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v27 = (const std::string::value_type *)objc_msgSend(v26, "UTF8String");
        std::string::__assign_external(&v45.__begin_[v20], v27);

        ++v20;
        v18 = *a2;
        v21 += 224;
        v19 += 24;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > v20);
    }
    ObjectUnderstandingTest::writeValue<std::vector<float>>(&v51, (uint64_t *)v47);
    v52.__sb_.__extbufnext_ = 0;
    v53.__vftable = (std::ios_base_vtbl *)&unk_24F243410;
    v52.__sb_.__extbuf_ = (char *)&unk_24F2433E8;
    std::ios_base::init(&v53, v52.__sb_.__extbuf_min_);
    v55 = -1;
    v54 = 0;
    MEMORY[0x22E2CA938](v52.__sb_.__extbuf_min_);
    std::fstream::open(&v52, &__s, 0x10u);
    v28 = *a3;
    v29 = a3[1];
    if (*a3 != v29)
    {
      do
      {
        v30 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" ", 1);
        v28 += 4;
      }
      while (v28 != v29);
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&v52 + *((_QWORD *)v52.__sb_.__extbuf_ - 3)), *(_DWORD *)&v52.__sb_.__extbuf_min_[*((_QWORD *)v52.__sb_.__extbuf_ - 3) + 8] | 4);
    MEMORY[0x22E2CA944](v52.__sb_.__extbuf_min_);
    std::iostream::~basic_iostream();
    MEMORY[0x22E2CAA7C](&v53);
    ObjectUnderstandingTest::writeValue<std::vector<float>>(&v49, (uint64_t *)__p);
    v52.__sb_.__extbufnext_ = 0;
    v53.__vftable = (std::ios_base_vtbl *)&unk_24F243410;
    v52.__sb_.__extbuf_ = (char *)&unk_24F2433E8;
    std::ios_base::init(&v53, v52.__sb_.__extbuf_min_);
    v55 = -1;
    v54 = 0;
    MEMORY[0x22E2CA938](v52.__sb_.__extbuf_min_);
    std::fstream::open(&v52, &v48, 0x10u);
    begin = v45.__begin_;
    for (i = v45.__end_; begin != i; ++begin)
    {
      v33 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
      if (v33 >= 0)
        v34 = (uint64_t)begin;
      else
        v34 = begin->__r_.__value_.__r.__words[0];
      if (v33 >= 0)
        size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      else
        size = begin->__r_.__value_.__l.__size_;
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52.__sb_.__extbufend_, v34, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" ", 1);
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&v52 + *((_QWORD *)v52.__sb_.__extbuf_ - 3)), *(_DWORD *)&v52.__sb_.__extbuf_min_[*((_QWORD *)v52.__sb_.__extbuf_ - 3) + 8] | 4);
    MEMORY[0x22E2CA944](v52.__sb_.__extbuf_min_);
    std::iostream::~basic_iostream();
    MEMORY[0x22E2CAA7C](&v53);
    v52.__sb_.__extbuf_ = (char *)&v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v47[0])
    {
      v47[1] = v47[0];
      operator delete(v47[0]);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
  }
  else
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      writeBox3ds(v37, v38, v39, v40, v41, v42, v43, v44);

  }
}

void sub_229515270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t *a42,char a43)
{
  uint64_t v43;

  std::iostream::~basic_iostream();
  MEMORY[0x22E2CAA7C](v43);
  a42 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a15)
  {
    a16 = (uint64_t)a15;
    operator delete(a15);
  }
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

uint64_t ObjectUnderstandingTest::writeValue<std::vector<float>>(const std::string *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::fstream v8;
  std::ios_base v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v8.__sb_.__extbufnext_ = 0;
  v9.__vftable = (std::ios_base_vtbl *)&unk_24F243410;
  std::ios_base::init(&v9, v8.__sb_.__extbuf_min_);
  v11 = -1;
  v10 = 0;
  MEMORY[0x22E2CA938](v8.__sb_.__extbuf_min_);
  std::fstream::open(&v8, a1, 0x10u);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
      v4 += 4;
    }
    while (v4 != v5);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&v8 + *((_QWORD *)v8.__sb_.__extbuf_ - 3)), *(_DWORD *)&v8.__sb_.__extbuf_min_[*((_QWORD *)v8.__sb_.__extbuf_ - 3) + 8] | 4);
  MEMORY[0x22E2CA944](v8.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x22E2CAA7C](&v9);
}

void sub_229515518(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x22E2CAA7C](v1);
  _Unwind_Resume(a1);
}

uint64_t loadBoxes(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *__p;
  char *v35;
  char *v36;
  int v37;
  _QWORD v38[2];
  _BYTE v39[120];
  uint64_t v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v35 = 0;
  v36 = 0;
  std::ifstream::basic_ifstream(v38);
  v3 = v40;
  if (v40)
  {
    v37 = 0;
    while (1)
    {
      v4 = (_QWORD *)MEMORY[0x22E2CA974](v38, &v37);
      if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) != 0)
        break;
      v5 = v35;
      if (v35 >= v36)
      {
        v7 = __p;
        v8 = (v35 - __p) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v10 = v36 - __p;
        if ((v36 - __p) >> 1 > v9)
          v9 = v10 >> 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v36, v11);
          v7 = __p;
          v5 = v35;
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[4 * v8];
        *(_DWORD *)v13 = v37;
        v6 = v13 + 4;
        while (v5 != v7)
        {
          v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        __p = v13;
        v36 = &v12[4 * v11];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_DWORD *)v35 = v37;
        v6 = v35 + 4;
      }
      v35 = v6;
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24)), *(_DWORD *)&v39[*(_QWORD *)(v38[0] - 24) + 16] | 4);
  }
  v38[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x22E2CA944](v39);
  std::istream::~istream();
  MEMORY[0x22E2CAA7C](v41);
  if (v3 && (v15 = (v35 - __p) >> 2, v16 = v15 / 0x18, !(v15 % 0x18)))
  {
    a2[1] = *a2;
    std::vector<box3d>::resize((uint64_t)a2, v16);
    if ((unint64_t)(v35 - __p) >= 0x60)
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      if (v16 <= 1)
        v30 = 1;
      else
        v30 = v16;
      do
      {
        v31 = 0;
        v32 = v28;
        do
        {
          *(_QWORD *)&v26 = *(_QWORD *)&__p[v32];
          DWORD2(v26) = *(_DWORD *)&__p[v32 + 8];
          *(_OWORD *)(*a2 + v27 + v31) = v26;
          v32 += 12;
          v31 += 16;
        }
        while (v31 != 128);
        ++v29;
        v28 += 96;
        v27 += 128;
      }
      while (v29 != v30);
    }
    v25 = 1;
  }
  else
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      loadBoxes(v17, v18, v19, v20, v21, v22, v23, v24);

    v25 = 0;
  }
  if (__p)
    operator delete(__p);
  return v25;
}

void sub_229515824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<box3d>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 7;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + (a2 << 7);
  }
  else
  {
    std::vector<box3d>::__append((void **)a1, a2 - v2);
  }
}

uint64_t box2boxCornerdist(uint64_t result, const box3d *a2)
{
  uint64_t v2;
  float v3;
  uint64_t i;
  float32x4_t v5;
  float32x4_t v6;
  float v7;

  v2 = 0;
  v3 = 3.4028e38;
  do
  {
    for (i = 0; i != 128; i += 16)
    {
      v5 = vsubq_f32(*(float32x4_t *)(result + 16 * v2), *(float32x4_t *)((char *)a2 + i));
      v6 = vmulq_f32(v5, v5);
      v7 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
      if (v7 < v3)
        v3 = v7;
    }
    ++v2;
  }
  while (v2 != 8);
  return result;
}

float GetHeadingAngle(float32x4_t *a1)
{
  unint64_t v1;

  v1 = vsubq_f32(*a1, a1[1]).u64[0];
  return atan2f(*(float *)&v1, *((float *)&v1 + 1));
}

void box3dEnlarge(float32x4_t *a1@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, _OWORD *a5@<X8>)
{
  int8x16_t v5;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;

  v18 = *a1;
  v8 = vsubq_f32(*a1, a1[3]);
  v9 = vmulq_f32(v8, v8);
  v9.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0])+ a2;
  v10 = vsubq_f32(*a1, a1[1]);
  v11 = vmulq_f32(v10, v10);
  *(float *)v5.i32 = fmaxf(v9.f32[0], 0.1);
  v12 = fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0])+ a3, 0.1);
  v13 = vsubq_f32(*a1, a1[4]);
  v14 = vmulq_f32(v13, v13);
  *(float *)&v5.i32[1] = v12;
  v5.i32[2] = fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0])+ a4, 0.1);
  v17 = v5;
  v15 = atan2f(v10.f32[0], v10.f32[1]);
  v16.i64[0] = 0x3F0000003F000000;
  v16.i64[1] = 0x3F0000003F000000;
  centroidSizeAngleToBox3d(a5, (__n128)vmulq_f32(vaddq_f32(v18, a1[6]), v16), v17, v15);
}

void box3dFromNSArray(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t i;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  __int128 v13;
  int v14;
  std::logic_error *exception;
  int v16;
  __int128 v17;
  id v18;

  v3 = a1;
  v18 = v3;
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] box3dFromNSArray takes non-null pointer).");
    goto LABEL_8;
  }
  if (objc_msgSend(v3, "count") != 8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] box3dFromNSArray takes non-8 corners box).");
LABEL_8:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  for (i = 0; i != 8; ++i)
  {
    objc_msgSend(v18, "objectAtIndexedSubscript:", i);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "floatValue");
    *(_QWORD *)&v17 = v7;
    objc_msgSend(v18, "objectAtIndexedSubscript:", i);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectAtIndexedSubscript:", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "floatValue");
    v16 = v10;
    objc_msgSend(v18, "objectAtIndexedSubscript:", i);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectAtIndexedSubscript:", 2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "floatValue");
    v13 = v17;
    DWORD1(v13) = v16;
    DWORD2(v13) = v14;
    *(_OWORD *)(a2 + 16 * i) = v13;

  }
}

void sub_229515B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;

  __cxa_free_exception(v14);

  _Unwind_Resume(a1);
}

BOOL areBoxesEqualByCorners(const box3d *a1, const box3d *a2)
{
  unint64_t v2;
  BOOL v3;
  float32x2_t *v4;
  float32x2_t *v5;
  float32x2_t v6;
  int32x2_t v7;

  v2 = 0;
  v3 = 0;
  v4 = (float32x2_t *)((char *)a2 + 4);
  v5 = (float32x2_t *)((char *)a1 + 4);
  v6 = (float32x2_t)vdup_n_s32(0x358637BDu);
  do
  {
    if (vabds_f32(v5[-1].f32[1], v4[-1].f32[1]) > 0.000001)
      break;
    v7 = vcgt_f32(vabd_f32(*v5, *v4), v6);
    if ((v7.i8[0] & 1) != 0)
      break;
    if ((v7.i8[4] & 1) != 0)
      break;
    v3 = v2 > 6;
    v4 += 2;
    v5 += 2;
    ++v2;
  }
  while (v2 != 8);
  return v3;
}

id rawBoxesToObjects(uint64_t *a1, unsigned int a2)
{
  return boxesToObjects(a1, CFSTR("rawdetection"), a2);
}

id boxesToObjects(uint64_t *a1, void *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  BOOL v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  OU3DObject *v12;
  void *v13;
  void *v14;
  double v15;
  uint64_t v16;
  void *v17;
  double v18;
  _DWORD *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  __int128 v25;
  id v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  void *__p;
  _BYTE *v35;
  uint64_t v36;

  v27 = a2;
  v5 = *a1;
  v4 = a1[1];
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 5);
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v4 == v5;
  v9 = v7;
  if (!v8)
  {
    v10 = 0;
    if (v6 <= 1)
      v11 = 1;
    else
      v11 = v6;
    v25 = xmmword_229561020;
    do
    {
      v12 = objc_alloc_init(OU3DObject);
      -[OU3DObject setType:](v12, "setType:", *(_QWORD *)(*a1 + 224 * v10 + 128));
      v13 = (void *)objc_msgSend(*(id *)(*a1 + 224 * v10 + 152), "copy");
      -[OU3DObject setDetection_source:](v12, "setDetection_source:", v13);

      v14 = (void *)objc_msgSend(*(id *)(*a1 + 224 * v10 + 144), "copy");
      -[OU3DObject setIdentifier:](v12, "setIdentifier:", v14);

      LODWORD(v15) = *(_DWORD *)(*a1 + 224 * v10 + 136);
      -[OU3DObject setConfidence:](v12, "setConfidence:", v15);
      v16 = *a1 + 224 * v10;
      v29 = 0;
      v30 = 0;
      v28 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v28, *(const void **)(v16 + 160), *(_QWORD *)(v16 + 168), (uint64_t)(*(_QWORD *)(v16 + 168) - *(_QWORD *)(v16 + 160)) >> 2);
      v31 = 0;
      v32 = 0;
      v33 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v31, v28, (uint64_t)v29, (v29 - (_BYTE *)v28) >> 2);
      __p = 0;
      v35 = 0;
      v36 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v31, (uint64_t)v32, (v32 - (_BYTE *)v31) >> 2);
      objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", (v35 - (_BYTE *)__p) >> 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = __p;
      if (v35 != __p)
      {
        v20 = 0;
        do
        {
          LODWORD(v18) = v19[v20];
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v18, v25);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "addObject:", v21);

          ++v20;
          v19 = __p;
        }
        while (v20 < (v35 - (_BYTE *)__p) >> 2);
      }
      v22 = (void *)objc_msgSend(v17, "copy", v25);

      v9 = v7;
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      -[OU3DObject setLogits:](v12, "setLogits:", v22);

      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      -[OU3DObject setStatus:](v12, "setStatus:", a3);
      -[OU3DObject setColor:](v12, "setColor:", *(double *)&v25);
      -[OU3DObject addGroupId:forGroupType:](v12, "addGroupId:forGroupType:", *(__int16 *)(*a1 + 224 * v10 + 216), *(_QWORD *)(*a1 + 224 * v10 + 208));
      -[OU3DObject addBoxesDict:forDictKey:](v12, "addBoxesDict:forDictKey:", *a1 + 224 * v10, v27);
      objc_msgSend(v7, "addObject:", v12);

      ++v10;
    }
    while (v10 != v11);
  }
  v23 = (void *)objc_msgSend(v9, "copy");

  return v23;
}

void sub_229515F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void updateObjectsWithBoxes(uint64_t *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  uint64_t v17;
  void *v18;
  double v19;
  _DWORD *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  void *__p;
  _BYTE *v33;
  uint64_t v34;

  v5 = a2;
  v25 = a3;
  v6 = objc_msgSend(v5, "count");
  if (v6)
  {
    v7 = 0;
    v24 = v6;
    do
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *a1;
      if (a1[1] != *a1)
      {
        v10 = 0;
        do
        {
          v11 = *(void **)(v9 + 224 * v10 + 144);
          objc_msgSend(v5, "objectAtIndexedSubscript:", v7);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "identifier");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v11) = objc_msgSend(v11, "isEqual:", v13);

          if ((v11 & 1) != 0)
          {
            objc_msgSend(v8, "setType:", *(_QWORD *)(*a1 + 224 * v10 + 128));
            v14 = (void *)objc_msgSend(*(id *)(*a1 + 224 * v10 + 152), "copy");
            objc_msgSend(v8, "setDetection_source:", v14);

            v15 = (void *)objc_msgSend(*(id *)(*a1 + 224 * v10 + 144), "copy");
            objc_msgSend(v8, "setIdentifier:", v15);

            LODWORD(v16) = *(_DWORD *)(*a1 + 224 * v10 + 136);
            objc_msgSend(v8, "setConfidence:", v16);
            v17 = *a1 + 224 * v10;
            v27 = 0;
            v28 = 0;
            v26 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v26, *(const void **)(v17 + 160), *(_QWORD *)(v17 + 168), (uint64_t)(*(_QWORD *)(v17 + 168) - *(_QWORD *)(v17 + 160)) >> 2);
            v29 = 0;
            v30 = 0;
            v31 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v29, v26, (uint64_t)v27, (v27 - (_BYTE *)v26) >> 2);
            __p = 0;
            v33 = 0;
            v34 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 2);
            objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", (v33 - (_BYTE *)__p) >> 2);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = __p;
            if (v33 != __p)
            {
              v21 = 0;
              do
              {
                LODWORD(v19) = v20[v21];
                objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v19);
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v18, "addObject:", v22);

                ++v21;
                v20 = __p;
              }
              while (v21 < (v33 - (_BYTE *)__p) >> 2);
            }
            v23 = (void *)objc_msgSend(v18, "copy");

            if (__p)
            {
              v33 = __p;
              operator delete(__p);
            }
            if (v29)
            {
              v30 = v29;
              operator delete(v29);
            }
            objc_msgSend(v8, "setLogits:", v23);

            if (v26)
            {
              v27 = v26;
              operator delete(v26);
            }
            objc_msgSend(v8, "addGroupId:forGroupType:", *(__int16 *)(*a1 + 224 * v10 + 216), *(_QWORD *)(*a1 + 224 * v10 + 208));
            objc_msgSend(v8, "addBoxesDict:forDictKey:", *a1 + 224 * v10, v25);
          }
          ++v10;
          v9 = *a1;
        }
        while (v10 < 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
      }

      ++v7;
    }
    while (v7 != v24);
  }

}

void sub_22951629C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t isBoxRectangle(float32x4_t *a1)
{
  uint64_t v1;
  float32x4_t *v2;
  int16x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  int32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  float32x2_t v14;
  int32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = 0;
  v2 = a1;
  do
  {
    v3 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v2, a1[(v1 & 0xFFFFFFFB) + 4])));
    if (v3.i8[0] & 1 | v3.i8[2] & 1)
      return 0;
    ++v1;
    ++v2;
  }
  while (v1 != 4);
  v4 = *(float32x2_t *)a1[1].f32;
  v5 = vsub_f32(*(float32x2_t *)a1->f32, v4);
  v6 = (int32x2_t)vmul_f32(v5, v5);
  v7 = *(float32x2_t *)a1[2].f32;
  v8 = *(float32x2_t *)a1[3].f32;
  v9 = vsub_f32(v7, v8);
  v10 = (int32x2_t)vmul_f32(v9, v9);
  v11 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v6, v10), (float32x2_t)vzip2_s32(v6, v10)));
  if (fabsf(vsub_f32(v11, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1)).f32[0]) > 0.00005)
    return 0;
  v12 = vsub_f32(v4, v7);
  v13 = (int32x2_t)vmul_f32(v12, v12);
  v14 = vsub_f32(*(float32x2_t *)a1->f32, v8);
  v15 = (int32x2_t)vmul_f32(v14, v14);
  v16 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v15, v13), (float32x2_t)vzip2_s32(v15, v13)));
  if (fabsf(vsub_f32(v16, (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1)).f32[0]) > 0.00005)
    return 0;
  v17 = a1[1];
  v18 = a1[2];
  v19 = vsubq_f32(v18, v17);
  if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(vsubq_f32(v17, *a1), v19)) > 0.00001)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      isBoxRectangle(v20, v21, v22, v23, v24, v25, v26, v27);
LABEL_15:

    return 0;
  }
  v28 = a1[3];
  v29 = vsubq_f32(v28, v18);
  if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v19, v29)) > 0.00001)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      isBoxRectangle(v20, v30, v31, v32, v33, v34, v35, v36);
    goto LABEL_15;
  }
  if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v29, vsubq_f32(*a1, v28))) > 0.00001)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      isBoxRectangle(v20, v37, v38, v39, v40, v41, v42, v43);
    goto LABEL_15;
  }
  return 1;
}

void Box3dEnlarge(int32x2_t a1@<D0>, float32x4_t *a2@<X1>, int a3@<W0>, float32x4_t *a4@<X8>)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  uint64_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  void **v31;
  _OWORD *v32;
  int **v33;
  int *v34;
  int *v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD v49[2];
  char v50;
  void **v51[18];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v6 = a2[3];
  v7 = a2[5];
  v45 = a2[4];
  a4[4] = v45;
  a4[5] = v7;
  v8 = a2[7];
  a4[6] = a2[6];
  a4[7] = v8;
  v9 = a2[1];
  v42 = v6;
  v44 = *a2;
  *a4 = *a2;
  a4[1] = v9;
  v10 = a2[3];
  v40 = a2[1];
  a4[2] = a2[2];
  a4[3] = v10;
  v11 = (void **)operator new(0x10uLL);
  v51[0] = v11;
  *(_OWORD *)v11 = xmmword_229560930;
  v51[1] = v11 + 2;
  v51[2] = v11 + 2;
  v12 = (void **)operator new(0x10uLL);
  v51[3] = v12;
  *(_OWORD *)v12 = xmmword_229560980;
  v51[4] = v12 + 2;
  v51[5] = v12 + 2;
  v13 = (void **)operator new(0x10uLL);
  v51[6] = v13;
  *(_OWORD *)v13 = xmmword_229560940;
  v51[7] = v13 + 2;
  v51[8] = v13 + 2;
  v14 = (void **)operator new(0x10uLL);
  v51[9] = v14;
  *(_OWORD *)v14 = xmmword_229560950;
  v51[10] = v14 + 2;
  v51[11] = v14 + 2;
  v15 = (void **)operator new(0x10uLL);
  v51[12] = v15;
  *(_OWORD *)v15 = xmmword_229560960;
  v51[13] = v15 + 2;
  v51[14] = v15 + 2;
  v16 = (void **)operator new(0x10uLL);
  v51[15] = v16;
  *(_OWORD *)v16 = xmmword_229560970;
  v51[16] = v16 + 2;
  v51[17] = v16 + 2;
  v48 = 0;
  v49[0] = 0;
  v47 = 0;
  v49[1] = &v47;
  v50 = 0;
  v47 = operator new(0x90uLL);
  v48 = v47;
  v49[0] = v47 + 18;
  v17 = 0;
  v48 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)v49, (uint64_t)v51, (uint64_t)&v52, v47);
  v18 = vsubq_f32(v40, v44);
  v19 = (int32x4_t)vmulq_f32(v18, v18);
  v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
  v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
  v22 = vmulq_n_f32(v18, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
  v23 = vsubq_f32(v42, v44);
  v24 = (int32x4_t)vmulq_f32(v23, v23);
  v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
  v25 = vrsqrte_f32((float32x2_t)v24.u32[0]);
  v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v25, v25)));
  v41 = v22;
  v43 = vmulq_n_f32(v23, vmul_f32(v26, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v26, v26))).f32[0]);
  v27 = vsubq_f32(v45, v44);
  v28 = (int32x4_t)vmulq_f32(v27, v27);
  v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2), vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1))).u32[0];
  v29 = vrsqrte_f32((float32x2_t)v28.u32[0]);
  v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v29, v29)));
  v46 = vmulq_n_f32(v27, vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30))).f32[0]);
  do
  {
    v31 = v51[v17 + 15];
    if (v31)
    {
      v51[v17 + 16] = v31;
      operator delete(v31);
    }
    v17 -= 3;
  }
  while (v17 != -18);
  v32 = operator new(0x60uLL);
  *v32 = v46;
  v32[1] = v46;
  v32[2] = v43;
  v32[3] = v41;
  v32[4] = v43;
  v32[5] = v41;
  v33 = (int **)&v47[3 * a3];
  v34 = *v33;
  v35 = v33[1];
  if (v34 != v35)
  {
    v36 = (float32x4_t)vdupq_lane_s32(a1, 0);
    v37 = (float32x4_t)v32[a3];
    do
    {
      v38 = *v34++;
      a4[v38] = vmlaq_f32(a4[v38], v37, v36);
    }
    while (v34 != v35);
  }
  operator delete(v32);
  v51[0] = (void **)&v47;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v51);
}

void sub_229516864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a19;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a24);
  _Unwind_Resume(a1);
}

void sub_229516900()
{
  JUMPOUT(0x2295168F8);
}

void rawBoxesFromObjects(void *a1@<X0>, uint64_t *a2@<X8>)
{
  boxesFromObjects(a1, CFSTR("rawdetection"), 0, a2);
}

void boxesFromObjects(void *a1@<X0>, void *a2@<X1>, char **a3@<X2>, uint64_t *a4@<X8>)
{
  id v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  float v34;
  float v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  void *v53;
  id v54;
  id v55;
  __int128 v56[8];
  id v57;
  id v58;
  id v59;
  void *v60;
  void *v61;
  void *__p;
  id v63;
  __int128 v64[8];
  char *v65;
  char *v66;
  char *v67;

  v7 = a1;
  v54 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v52 = a4;
  if (a3)
    a3[1] = *a3;
  v8 = 0;
  v51 = (uint64_t)(a3 + 2);
  while (objc_msgSend(v7, "count", v51) > v8)
  {
    v9 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    while (1)
    {
      objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "logits");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "count");

      if (v12 <= v9)
        break;
      objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "logits");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectAtIndex:", v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "floatValue");
      v17 = v16;

      v18 = v66;
      if (v66 >= v67)
      {
        v20 = v65;
        v21 = (v66 - v65) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v23 = v67 - v65;
        if ((v67 - v65) >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v67, v24);
          v20 = v65;
          v18 = v66;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[4 * v21];
        *(_DWORD *)v26 = v17;
        v19 = v26 + 4;
        while (v18 != v20)
        {
          v27 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        v65 = v26;
        v66 = v19;
        v67 = &v25[4 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_DWORD *)v66 = v17;
        v19 = v18 + 4;
      }
      v66 = v19;
      ++v9;
    }
    objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v28, "hasBoxesDict:", v54);

    if ((v29 & 1) != 0)
    {
      memset(v64, 0, sizeof(v64));
      objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "boxesDict");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "objectForKeyedSubscript:", v54);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      box3dFromNSArray(v32, (uint64_t)v64);

      objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "type");
      v55 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "confidence");
      v35 = v34;
      objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "identifier");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "detection_source");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      OUBox3d::OUBox3d((uint64_t)v56, v64, &v55, v37, (uint64_t)&v65, v39, v35);
      std::vector<OUBox3d>::push_back[abi:ne180100](v52, v56);

      if (__p)
        operator delete(__p);
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }

      if (a3)
      {
        v41 = a3[1];
        v40 = (unint64_t)a3[2];
        if ((unint64_t)v41 >= v40)
        {
          v43 = *a3;
          v44 = (v41 - *a3) >> 2;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v46 = v40 - (_QWORD)v43;
          if (v46 >> 1 > v45)
            v45 = v46 >> 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
            v47 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          if (v47)
          {
            v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v51, v47);
            v43 = *a3;
            v41 = a3[1];
          }
          else
          {
            v48 = 0;
          }
          v49 = &v48[4 * v44];
          *(_DWORD *)v49 = v8;
          v42 = v49 + 4;
          while (v41 != v43)
          {
            v50 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v49 - 1) = v50;
            v49 -= 4;
          }
          *a3 = v49;
          a3[1] = v42;
          a3[2] = &v48[4 * v47];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_DWORD *)v41 = v8;
          v42 = v41 + 4;
        }
        a3[1] = v42;
      }
    }
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    ++v8;
  }

}

void sub_229516D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, OUBox3d *a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void **a15)
{
  void *v15;
  uint64_t v16;
  void *v18;

  v18 = *(void **)(v16 - 136);
  if (v18)
  {
    *(_QWORD *)(v16 - 128) = v18;
    operator delete(v18);
  }
  a15 = a10;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&a15);

  _Unwind_Resume(a1);
}

void NonMaximumSuppression(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char **a4@<X8>, float a5@<S0>)
{
  int *begin;
  int *end;
  int v11;
  std::vector<int>::pointer v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  std::vector<int>::pointer v27;
  int *v28;
  int v29;
  int v30;
  float v31;
  std::vector<int> v32;
  uint64_t v33;

  if (a2)
  {
    std::vector<int>::vector(&v32, a2);
    begin = v32.__begin_;
    end = v32.__end_;
    if (v32.__begin_ != v32.__end_)
    {
      v11 = 0;
      v12 = v32.__begin_;
      do
        *v12++ = v11++;
      while (v12 != end);
    }
    v13 = 126 - 2 * __clz(end - begin);
    v33 = a1;
    if (end == begin)
      v14 = 0;
    else
      v14 = v13;
    std::__introsort<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,false>(begin, end, &v33, v14, 1);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    while (v32.__begin_ != v32.__end_)
    {
      v15 = *(v32.__end_ - 1);
      v17 = a4[1];
      v16 = (unint64_t)a4[2];
      if ((unint64_t)v17 >= v16)
      {
        v19 = *a4;
        v20 = (v17 - *a4) >> 3;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v22 = v16 - (_QWORD)v19;
        if (v22 >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v23);
          v19 = *a4;
          v17 = a4[1];
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = v15;
        v18 = v25 + 8;
        while (v17 != v19)
        {
          v26 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v25 - 1) = v26;
          v25 -= 8;
        }
        *a4 = v25;
        a4[1] = v18;
        a4[2] = &v24[8 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v17 = v15;
        v18 = v17 + 8;
      }
      a4[1] = v18;
      v27 = v32.__begin_;
      v28 = v32.__end_ - 1;
      v32.__end_ = v28;
      if (v32.__begin_ == v28)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        do
        {
          v30 = *v27;
          std::function<float ()(int,int)>::operator()(a3, v15, *v27);
          if (v31 <= a5)
            v32.__begin_[v29++] = v30;
          ++v27;
        }
        while (v27 != v28);
      }
      std::vector<int>::resize(&v32, v29);
    }
    if (v32.__begin_)
    {
      v32.__end_ = v32.__begin_;
      operator delete(v32.__begin_);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_22951705C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::function<float ()(int,int)>::operator()(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

_QWORD *nmsSameCls@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>, float a4@<S0>)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = v11;
  v4 = -1227133513 * ((a1[1] - *a1) >> 5);
  v11[0] = &off_24F243498;
  v11[1] = a1;
  v9[0] = &off_24F243528;
  v9[1] = a1;
  v9[2] = a2;
  v10 = v9;
  NonMaximumSuppression((uint64_t)v11, v4, (uint64_t)v9, a3, a4);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_2295171D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void nmsSameCls(id **a1@<X0>, float (*a2)(_OWORD *, _OWORD *)@<X1>, void *a3@<X2>, char **a4@<X8>, float a5@<S0>)
{
  id v9;
  id *v10;
  id *v11;
  id *v12;
  _DWORD *v13;
  int v14;
  int *begin;
  int *end;
  int v17;
  std::vector<int>::pointer v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  std::vector<int>::pointer v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  int v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  int *v52;
  int v53;
  uint64_t v54;
  _OWORD v55[10];
  _OWORD v56[8];
  std::vector<int> v57;
  _DWORD *v58;
  _BYTE *v59;

  v9 = a3;
  v10 = a1[1];
  if (*a1 == v10)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    std::vector<float>::vector(&v58, v10 - *a1);
    v11 = *a1;
    v12 = a1[1];
    v13 = v58;
    if (*a1 != v12)
    {
      do
      {
        objc_msgSend(*v11, "confidence");
        *v13++ = v14;
        ++v11;
      }
      while (v11 != v12);
      v13 = v58;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::vector<int>::vector(&v57, (v59 - (_BYTE *)v13) >> 2);
    begin = v57.__begin_;
    end = v57.__end_;
    if (v57.__begin_ != v57.__end_)
    {
      v17 = 0;
      v18 = v57.__begin_;
      do
        *v18++ = v17++;
      while (v18 != end);
    }
    v19 = 126 - 2 * __clz(end - begin);
    *(_QWORD *)&v56[0] = &v58;
    if (end == begin)
      v20 = 0;
    else
      v20 = v19;
    v21 = v57.__begin_;
    v22 = v57.__end_;
    if (v57.__begin_ != v57.__end_)
    {
      v54 = (uint64_t)(a4 + 2);
      do
      {
        v23 = *(v22 - 1);
        if ((objc_msgSend((*a1)[v23], "hasBoxesDict:", v9, v54) & 1) == 0)
          --v57.__end_;
        memset(v56, 0, sizeof(v56));
        objc_msgSend((*a1)[v23], "boxesDict");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "objectForKeyedSubscript:", v9);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        box3dFromNSArray(v25, (uint64_t)v56);

        v27 = a4[1];
        v26 = (unint64_t)a4[2];
        if ((unint64_t)v27 >= v26)
        {
          v29 = *a4;
          v30 = (v27 - *a4) >> 3;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v32 = v26 - (_QWORD)v29;
          if (v32 >> 2 > v31)
            v31 = v32 >> 2;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v54, v33);
            v29 = *a4;
            v27 = a4[1];
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[8 * v30];
          *(_QWORD *)v35 = v23;
          v28 = v35 + 8;
          while (v27 != v29)
          {
            v36 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *((_QWORD *)v35 - 1) = v36;
            v35 -= 8;
          }
          *a4 = v35;
          a4[1] = v28;
          a4[2] = &v34[8 * v33];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v27 = v23;
          v28 = v27 + 8;
        }
        a4[1] = v28;
        memset((char *)&v55[8] + 8, 0, 24);
        v37 = v57.__begin_;
        if ((std::vector<int>::pointer)((char *)v57.__end_ - (char *)v57.__begin_) != (std::vector<int>::pointer)4)
        {
          v38 = 0;
          do
          {
            v39 = v37[v38];
            if ((objc_msgSend((*a1)[v39], "hasBoxesDict:", v9) & 1) != 0)
            {
              objc_msgSend((*a1)[v23], "type");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend((*a1)[v39], "type");
              v41 = (void *)objc_claimAutoreleasedReturnValue();

              if (v40 != v41)
                goto LABEL_36;
              memset(v55, 0, 128);
              objc_msgSend((*a1)[v39], "boxesDict");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "objectForKeyedSubscript:", v9);
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              box3dFromNSArray(v43, (uint64_t)v55);

              if (a2(v56, v55) <= a5)
              {
LABEL_36:
                v44 = *(char **)&v55[9];
                if (*(_QWORD *)&v55[9] >= *((_QWORD *)&v55[9] + 1))
                {
                  v46 = (char *)*((_QWORD *)&v55[8] + 1);
                  v47 = (uint64_t)(*(_QWORD *)&v55[9] - *((_QWORD *)&v55[8] + 1)) >> 2;
                  v48 = v47 + 1;
                  if ((unint64_t)(v47 + 1) >> 62)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v49 = *((_QWORD *)&v55[9] + 1) - *((_QWORD *)&v55[8] + 1);
                  if ((uint64_t)(*((_QWORD *)&v55[9] + 1) - *((_QWORD *)&v55[8] + 1)) >> 1 > v48)
                    v48 = v49 >> 1;
                  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                    v50 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v50 = v48;
                  if (v50)
                  {
                    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v55[9] + 8, v50);
                    v46 = (char *)*((_QWORD *)&v55[8] + 1);
                    v44 = *(char **)&v55[9];
                  }
                  else
                  {
                    v51 = 0;
                  }
                  v52 = (int *)&v51[4 * v47];
                  *v52 = v39;
                  v45 = v52 + 1;
                  while (v44 != v46)
                  {
                    v53 = *((_DWORD *)v44 - 1);
                    v44 -= 4;
                    *--v52 = v53;
                  }
                  *((_QWORD *)&v55[8] + 1) = v52;
                  *(_QWORD *)&v55[9] = v45;
                  *((_QWORD *)&v55[9] + 1) = &v51[4 * v50];
                  if (v46)
                    operator delete(v46);
                }
                else
                {
                  **(_DWORD **)&v55[9] = v39;
                  v45 = v44 + 4;
                }
                *(_QWORD *)&v55[9] = v45;
              }
            }
            ++v38;
            v37 = v57.__begin_;
          }
          while (v57.__end_ - v57.__begin_ - 1 > v38);
        }
        if (v37)
        {
          v57.__end_ = v37;
          operator delete(v37);
        }
        v21 = (int *)*((_QWORD *)&v55[8] + 1);
        v57 = *(std::vector<int> *)((char *)&v55[8] + 8);
        v22 = *(std::vector<int>::pointer *)&v55[9];
      }
      while (*((_QWORD *)&v55[8] + 1) != *(_QWORD *)&v55[9]);
    }
    if (v21)
    {
      v57.__end_ = v21;
      operator delete(v21);
    }
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
  }

}

void sub_229517680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  void *v34;

  v33 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v33;
    operator delete(v33);
  }
  v34 = *(void **)(v31 - 136);
  if (v34)
  {
    *(_QWORD *)(v31 - 128) = v34;
    operator delete(v34);
  }

  _Unwind_Resume(a1);
}

_QWORD *nmsAgnosticCls@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>, float a4@<S0>)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = v11;
  v4 = -1227133513 * ((a1[1] - *a1) >> 5);
  v11[0] = &off_24F2435B8;
  v11[1] = a1;
  v9[0] = &off_24F243638;
  v9[1] = a1;
  v9[2] = a2;
  v10 = v9;
  NonMaximumSuppression((uint64_t)v11, v4, (uint64_t)v9, a3, a4);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_22951782C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t nmsWReference@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, float (*a3)(uint64_t, uint64_t)@<X2>, char **a4@<X8>, float a5@<S0>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[4];
  int v32;

  if (*a2 == a2[1])
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v9 = (uint64_t *)result;
    memset(v31, 0, sizeof(v31));
    v32 = 1065353216;
    v30 = 0;
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v31, &v30))
      {
        v10 = *v9;
        if (v9[1] != *v9)
        {
          v11 = 0;
          v12 = 0;
          do
          {
            if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) <= (unint64_t)v30)
              std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
            if (a3(*a2 + 224 * v30, v10 + v11) > a5)
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v31, &v30, &v30);
            ++v12;
            v10 = *v9;
            v11 += 224;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((v9[1] - *v9) >> 5) > v12);
        }
      }
      v13 = ++v30;
      v15 = *a2;
      v14 = a2[1];
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v14 - *a2) >> 5) > v13);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v30 = 0;
    if (v14 != v15)
    {
      do
      {
        v16 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v31, &v30);
        v17 = v30;
        if (!v16)
        {
          v18 = v30;
          v20 = a4[1];
          v19 = (unint64_t)a4[2];
          if ((unint64_t)v20 >= v19)
          {
            v22 = *a4;
            v23 = (v20 - *a4) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v25 = v19 - (_QWORD)v22;
            if (v25 >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v26);
              v22 = *a4;
              v20 = a4[1];
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[8 * v23];
            *(_QWORD *)v28 = v18;
            v21 = v28 + 8;
            while (v20 != v22)
            {
              v29 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *((_QWORD *)v28 - 1) = v29;
              v28 -= 8;
            }
            *a4 = v28;
            a4[1] = v21;
            a4[2] = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v20 = v30;
            v21 = v20 + 8;
          }
          a4[1] = v21;
          v17 = v30;
        }
        v30 = v17 + 1;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > (unint64_t)(v17 + 1));
    }
    return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v31);
  }
  return result;
}

void sub_229517AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

id packBoxesDict(void *a1, uint64_t *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unsigned __int8 *v20;
  OU3DObject *v21;
  void *v22;
  double v23;
  void *v24;
  double v25;
  _DWORD *v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  _OWORD v34[2];
  int v35;
  void *__p;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;

  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_msgSend(v5, "mutableCopy");
  v8 = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 1065353216;
  while (v8 < objc_msgSend(v7, "count"))
  {
    objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "identifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "UUIDString");
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&v39, (char *)objc_msgSend(v11, "UTF8String"));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v34, (unsigned __int8 *)&v39, (uint64_t)&v39);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);

    v12 = *a2;
    if (a2[1] != *a2)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = *(void **)(v12 + v13 + 144);
        objc_msgSend(v9, "identifier");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v15) = objc_msgSend(v15, "isEqual:", v16);

        if ((_DWORD)v15)
        {
          objc_msgSend(v9, "addBoxesDict:forDictKey:", *a2 + v13, v6);
          objc_msgSend(v9, "addGroupId:forGroupType:", *(__int16 *)(*a2 + v13 + 216), *(_QWORD *)(*a2 + v13 + 208));
        }
        ++v14;
        v12 = *a2;
        v13 += 224;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > v14);
    }

    ++v8;
  }
  if (objc_msgSend(v6, "isEqualToString:", CFSTR("lshaped")))
  {
    v17 = *a2;
    v18 = a2[1];
    if (*a2 != v18)
    {
      do
      {
        objc_msgSend(*(id *)(v17 + 144), "UUIDString");
        v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(&v39, (char *)objc_msgSend(v19, "UTF8String"));
        v20 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v34, (unsigned __int8 *)&v39);
        if (SHIBYTE(v41) < 0)
          operator delete(v39);

        if (!v20)
        {
          v21 = objc_alloc_init(OU3DObject);
          -[OU3DObject setType:](v21, "setType:", *(_QWORD *)(v17 + 128));
          v22 = (void *)objc_msgSend(*(id *)(v17 + 144), "copy");
          -[OU3DObject setIdentifier:](v21, "setIdentifier:", v22);

          LODWORD(v23) = *(_DWORD *)(v17 + 136);
          -[OU3DObject setConfidence:](v21, "setConfidence:", v23);
          v31 = 0;
          v32 = 0;
          v33 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v31, *(const void **)(v17 + 160), *(_QWORD *)(v17 + 168), (uint64_t)(*(_QWORD *)(v17 + 168) - *(_QWORD *)(v17 + 160)) >> 2);
          __p = 0;
          v37 = 0;
          v38 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v31, (uint64_t)v32, (v32 - (_BYTE *)v31) >> 2);
          v39 = 0;
          v40 = 0;
          v41 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v39, __p, (uint64_t)v37, (v37 - (_BYTE *)__p) >> 2);
          objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", (v40 - v39) >> 2);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = v39;
          if (v40 != v39)
          {
            v27 = 0;
            do
            {
              LODWORD(v25) = v26[v27];
              objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v25);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "addObject:", v28);

              ++v27;
              v26 = v39;
            }
            while (v27 < (v40 - v39) >> 2);
          }
          v29 = (void *)objc_msgSend(v24, "copy");

          if (v39)
          {
            v40 = v39;
            operator delete(v39);
          }
          if (__p)
          {
            v37 = __p;
            operator delete(__p);
          }
          -[OU3DObject setLogits:](v21, "setLogits:", v29);

          if (v31)
          {
            v32 = v31;
            operator delete(v31);
          }
          -[OU3DObject setStatus:](v21, "setStatus:", 1);
          -[OU3DObject setColor:](v21, "setColor:", 0.000195791275);
          -[OU3DObject addGroupId:forGroupType:](v21, "addGroupId:forGroupType:", *(__int16 *)(v17 + 216), *(_QWORD *)(v17 + 208));
          -[OU3DObject addBoxesDict:forDictKey:](v21, "addBoxesDict:forDictKey:", v17, v6);
          objc_msgSend(v7, "insertObject:atIndex:", v21, 0);

        }
        v17 += 224;
      }
      while (v17 != v18);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v34);

  return v7;
}

void sub_229517F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;
  void *v24;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a17);

  _Unwind_Resume(a1);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_2295180D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void std::vector<box3d>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 7);
      v7 += 128 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 7);
    if (v9 >> 57)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 7;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 6 > v9)
      v9 = v11 >> 6;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFF80)
      v12 = 0x1FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[128 * v10];
    v15 = &v13[128 * v12];
    bzero(v14, a2 << 7);
    v16 = &v14[128 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 8);
        v20 = *((_OWORD *)v17 - 7);
        v21 = *((_OWORD *)v17 - 5);
        *((_OWORD *)v14 - 6) = *((_OWORD *)v17 - 6);
        *((_OWORD *)v14 - 5) = v21;
        *((_OWORD *)v14 - 8) = v19;
        *((_OWORD *)v14 - 7) = v20;
        v22 = *((_OWORD *)v17 - 4);
        v23 = *((_OWORD *)v17 - 3);
        v24 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v24;
        *((_OWORD *)v14 - 4) = v22;
        *((_OWORD *)v14 - 3) = v23;
        v14 -= 128;
        v17 -= 128;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,false>(int *a1, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int *v103;
  BOOL v105;
  uint64_t v106;
  int *v107;
  int *v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  int64_t v122;
  int64_t v123;
  int64_t v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int *v135;
  float v136;
  uint64_t v137;
  uint64_t v138;
  float v139;
  float v140;
  int v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int *v155;
  int *v156;
  uint64_t v157;
  int *v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  float v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  int *v169;
  uint64_t v170;
  uint64_t v171;
  float v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  float v179;
  uint64_t v180;
  uint64_t v181;
  int *v183;
  uint64_t v184;
  uint64_t v185;
  float v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int *v190;
  uint64_t v191;
  uint64_t v192;
  float v193;
  uint64_t v194;
  uint64_t v195;
  int *v196;
  unint64_t v197;
  int *v198;
  int64_t v199;
  int *v200;
  int v201;
  int v202;

LABEL_1:
  v9 = a2 - 1;
  v198 = a2 - 2;
  v200 = a2;
  v196 = a2 - 3;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = v200;
    v12 = (char *)v200 - (char *)v10;
    v13 = v200 - v10;
    switch(v13)
    {
      case 0:
      case 1:
        return;
      case 2:
        v97 = *a3;
        v202 = *(v200 - 1);
        v98 = *(_QWORD *)(v97 + 24);
        if (!v98)
          goto LABEL_165;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v98 + 48))(v98, &v202);
        v100 = *a3;
        v202 = *a1;
        v101 = *(_QWORD *)(v100 + 24);
        if (!v101)
          goto LABEL_165;
        if (v99 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v101 + 48))(v101, &v202))
        {
          v102 = *a1;
          *a1 = *(v200 - 1);
          *(v200 - 1) = v102;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a1 + 1, v9, a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a1 + 1, a1 + 2, v9, a3);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, v9, a3);
        return;
      default:
        if (v12 <= 95)
        {
          v103 = a1 + 1;
          v105 = a1 == v200 || v103 == v200;
          if ((a5 & 1) != 0)
          {
            if (v105)
              return;
            v106 = 0;
            v107 = a1;
            while (1)
            {
              v108 = v103;
              v109 = *a3;
              v202 = v107[1];
              v110 = *(_QWORD *)(v109 + 24);
              if (!v110)
                break;
              (*(void (**)(uint64_t, int *))(*(_QWORD *)v110 + 48))(v110, &v202);
              v112 = *a3;
              v202 = *v107;
              v113 = *(_QWORD *)(v112 + 24);
              if (!v113)
                break;
              if (v111 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v113 + 48))(v113, &v202))
              {
                v114 = *v108;
                v115 = v106;
                while (1)
                {
                  *(int *)((char *)a1 + v115 + 4) = *(int *)((char *)a1 + v115);
                  if (!v115)
                    break;
                  v116 = *a3;
                  v202 = v114;
                  v117 = *(_QWORD *)(v116 + 24);
                  if (!v117)
                    goto LABEL_165;
                  (*(void (**)(uint64_t, int *))(*(_QWORD *)v117 + 48))(v117, &v202);
                  v119 = *a3;
                  v202 = *(int *)((char *)a1 + v115 - 4);
                  v120 = *(_QWORD *)(v119 + 24);
                  if (!v120)
                    goto LABEL_165;
                  v115 -= 4;
                  if (v118 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v120 + 48))(v120, &v202))
                  {
                    v121 = (int *)((char *)a1 + v115 + 4);
                    goto LABEL_103;
                  }
                }
                v121 = a1;
LABEL_103:
                *v121 = v114;
              }
              v103 = v108 + 1;
              v106 += 4;
              v107 = v108;
              if (v108 + 1 == v200)
                return;
            }
          }
          else
          {
            if (v105)
              return;
            while (1)
            {
              v183 = v103;
              v184 = *a3;
              v202 = a1[1];
              v185 = *(_QWORD *)(v184 + 24);
              if (!v185)
                break;
              (*(void (**)(uint64_t, int *))(*(_QWORD *)v185 + 48))(v185, &v202);
              v187 = *a3;
              v202 = *a1;
              v188 = *(_QWORD *)(v187 + 24);
              if (!v188)
                break;
              if (v186 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v188 + 48))(v188, &v202))
              {
                v189 = *v183;
                v190 = v183;
                do
                {
                  *v190 = *(v190 - 1);
                  v191 = *a3;
                  v202 = v189;
                  v192 = *(_QWORD *)(v191 + 24);
                  if (!v192)
                    goto LABEL_165;
                  (*(void (**)(uint64_t, int *))(*(_QWORD *)v192 + 48))(v192, &v202);
                  v194 = *a3;
                  v202 = *(v190 - 2);
                  v195 = *(_QWORD *)(v194 + 24);
                  if (!v195)
                    goto LABEL_165;
                  --v190;
                }
                while (v193 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v195 + 48))(v195, &v202));
                *v190 = v189;
              }
              v103 = v183 + 1;
              a1 = v183;
              if (v183 + 1 == v200)
                return;
            }
          }
LABEL_165:
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if (a4)
        {
          v14 = (unint64_t)v13 >> 1;
          v15 = &a1[(unint64_t)v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v15, a1, v9, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, v15, v9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1 + 1, v15 - 1, v198, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1 + 2, &a1[v14 + 1], v196, a3);
            v11 = v200;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v15 - 1, v15, &a1[v14 + 1], a3);
            v16 = *a1;
            *a1 = *v15;
            *v15 = v16;
          }
          --a4;
          if ((a5 & 1) == 0)
          {
            v17 = *a3;
            v202 = *(a1 - 1);
            v18 = *(_QWORD *)(v17 + 24);
            if (!v18)
              goto LABEL_165;
            (*(void (**)(uint64_t, int *))(*(_QWORD *)v18 + 48))(v18, &v202);
            v20 = *a3;
            v202 = *a1;
            v21 = *(_QWORD *)(v20 + 24);
            if (!v21)
              goto LABEL_165;
            if (v19 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v21 + 48))(v21, &v202))
            {
              v60 = *a1;
              v61 = *a3;
              v202 = *a1;
              v62 = *(_QWORD *)(v61 + 24);
              if (!v62)
                goto LABEL_165;
              (*(void (**)(uint64_t, int *))(*(_QWORD *)v62 + 48))(v62, &v202);
              v64 = *a3;
              v202 = *v9;
              v65 = *(_QWORD *)(v64 + 24);
              if (!v65)
                goto LABEL_165;
              if (v63 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v65 + 48))(v65, &v202))
              {
                v10 = a1;
                while (1)
                {
                  v66 = *a3;
                  v202 = v60;
                  v67 = *(_QWORD *)(v66 + 24);
                  if (!v67)
                    goto LABEL_165;
                  (*(void (**)(uint64_t, int *))(*(_QWORD *)v67 + 48))(v67, &v202);
                  v69 = *a3;
                  v202 = v10[1];
                  v70 = *(_QWORD *)(v69 + 24);
                  if (!v70)
                    goto LABEL_165;
                  ++v10;
                  if (v68 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v70 + 48))(v70, &v202))
                    goto LABEL_57;
                }
              }
              v71 = a1 + 1;
              do
              {
                v10 = v71;
                if (v71 >= v11)
                  break;
                v72 = *a3;
                v202 = v60;
                v73 = *(_QWORD *)(v72 + 24);
                if (!v73)
                  goto LABEL_165;
                (*(void (**)(uint64_t, int *))(*(_QWORD *)v73 + 48))(v73, &v202);
                v75 = *a3;
                v202 = *v10;
                v76 = *(_QWORD *)(v75 + 24);
                if (!v76)
                  goto LABEL_165;
                v77 = v74;
                v78 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v76 + 48))(v76, &v202);
                v71 = v10 + 1;
              }
              while (v77 >= v78);
LABEL_57:
              v79 = v11;
              if (v10 < v11)
              {
                v79 = v11;
                do
                {
                  v80 = *a3;
                  v202 = v60;
                  v81 = *(_QWORD *)(v80 + 24);
                  if (!v81)
                    goto LABEL_165;
                  (*(void (**)(uint64_t, int *))(*(_QWORD *)v81 + 48))(v81, &v202);
                  v83 = *a3;
                  v202 = *(v79 - 1);
                  v84 = *(_QWORD *)(v83 + 24);
                  if (!v84)
                    goto LABEL_165;
                  --v79;
                }
                while (v82 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v84 + 48))(v84, &v202));
              }
LABEL_70:
              if (v10 < v79)
              {
                v85 = *v10;
                *v10 = *v79;
                *v79 = v85;
                do
                {
                  v86 = *a3;
                  v202 = v60;
                  v87 = *(_QWORD *)(v86 + 24);
                  if (!v87)
                    goto LABEL_165;
                  (*(void (**)(uint64_t, int *))(*(_QWORD *)v87 + 48))(v87, &v202);
                  v89 = *a3;
                  v202 = v10[1];
                  v90 = *(_QWORD *)(v89 + 24);
                  if (!v90)
                    goto LABEL_165;
                  ++v10;
                }
                while (v88 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v90 + 48))(v90, &v202));
                while (1)
                {
                  v91 = *a3;
                  v202 = v60;
                  v92 = *(_QWORD *)(v91 + 24);
                  if (!v92)
                    goto LABEL_165;
                  (*(void (**)(uint64_t, int *))(*(_QWORD *)v92 + 48))(v92, &v202);
                  v94 = *a3;
                  v202 = *(v79 - 1);
                  v95 = *(_QWORD *)(v94 + 24);
                  if (!v95)
                    goto LABEL_165;
                  --v79;
                  if (v93 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v95 + 48))(v95, &v202))
                    goto LABEL_70;
                }
              }
              v96 = v10 - 1;
              if (v10 - 1 != a1)
                *a1 = *v96;
              a5 = 0;
              *v96 = v60;
              continue;
            }
          }
          v22 = 0;
          v23 = *a1;
          do
          {
            v24 = *a3;
            v202 = a1[v22 + 1];
            v25 = *(_QWORD *)(v24 + 24);
            if (!v25)
              goto LABEL_165;
            (*(void (**)(uint64_t, int *))(*(_QWORD *)v25 + 48))(v25, &v202);
            v27 = *a3;
            v202 = v23;
            v28 = *(_QWORD *)(v27 + 24);
            if (!v28)
              goto LABEL_165;
            ++v22;
          }
          while (v26 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v28 + 48))(v28, &v202));
          v29 = &a1[v22];
          v30 = v11;
          if (v22 != 1)
          {
            while (1)
            {
              v31 = *--v30;
              v32 = *a3;
              v202 = v31;
              v33 = *(_QWORD *)(v32 + 24);
              if (!v33)
                goto LABEL_165;
              (*(void (**)(uint64_t, int *))(*(_QWORD *)v33 + 48))(v33, &v202);
              v35 = *a3;
              v202 = v23;
              v36 = *(_QWORD *)(v35 + 24);
              if (!v36)
                goto LABEL_165;
              if (v34 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v36 + 48))(v36, &v202))
                goto LABEL_26;
            }
          }
          v30 = v11;
          while (v29 < v30)
          {
            v37 = *--v30;
            v38 = *a3;
            v202 = v37;
            v39 = *(_QWORD *)(v38 + 24);
            if (!v39)
              goto LABEL_165;
            (*(void (**)(uint64_t, int *))(*(_QWORD *)v39 + 48))(v39, &v202);
            v41 = *a3;
            v202 = v23;
            v42 = *(_QWORD *)(v41 + 24);
            if (!v42)
              goto LABEL_165;
            if (v40 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v42 + 48))(v42, &v202))
              break;
          }
LABEL_26:
          if (v29 >= v30)
          {
            v58 = v29 - 1;
          }
          else
          {
            v43 = &a1[v22];
            v44 = v30;
            do
            {
              v45 = *v43;
              *v43 = *v44;
              *v44 = v45;
              do
              {
                v46 = v43[1];
                ++v43;
                v47 = *a3;
                v202 = v46;
                v48 = *(_QWORD *)(v47 + 24);
                if (v48)
                {
                  (*(void (**)(uint64_t, int *))(*(_QWORD *)v48 + 48))(v48, &v202);
                  v50 = *a3;
                  v202 = v23;
                  v51 = *(_QWORD *)(v50 + 24);
                  if (v51)
                    continue;
                }
                goto LABEL_165;
              }
              while (v49 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v51 + 48))(v51, &v202));
              do
              {
                v52 = *--v44;
                v53 = *a3;
                v202 = v52;
                v54 = *(_QWORD *)(v53 + 24);
                if (v54)
                {
                  (*(void (**)(uint64_t, int *))(*(_QWORD *)v54 + 48))(v54, &v202);
                  v56 = *a3;
                  v202 = v23;
                  v57 = *(_QWORD *)(v56 + 24);
                  if (v57)
                    continue;
                }
                goto LABEL_165;
              }
              while (v55 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v57 + 48))(v57, &v202));
            }
            while (v43 < v44);
            v58 = v43 - 1;
          }
          if (v58 != a1)
            *a1 = *v58;
          *v58 = v23;
          if (v29 < v30)
          {
LABEL_43:
            std::__introsort<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,false>(a1, v58, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v58 + 1;
            continue;
          }
          v59 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, v58, a3);
          v10 = v58 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(v58 + 1, v200, a3))
          {
            if (!v59)
              goto LABEL_43;
            continue;
          }
          a2 = v58;
          if (v59)
            return;
          goto LABEL_1;
        }
        if (a1 != v200)
        {
          v197 = v12;
          v122 = (unint64_t)(v13 - 2) >> 1;
          v123 = v122;
          while (1)
          {
            v124 = v123;
            if (v122 >= v123)
            {
              v199 = v123;
              v125 = (2 * v123) | 1;
              v126 = &a1[v125];
              v127 = 2 * v123 + 2;
              if (v127 < v13)
              {
                v128 = *a3;
                v202 = *v126;
                v129 = *(_QWORD *)(v128 + 24);
                if (!v129)
                  goto LABEL_165;
                (*(void (**)(uint64_t, int *))(*(_QWORD *)v129 + 48))(v129, &v202);
                v131 = *a3;
                v202 = v126[1];
                v132 = *(_QWORD *)(v131 + 24);
                if (!v132)
                  goto LABEL_165;
                if (v130 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v132 + 48))(v132, &v202))
                {
                  ++v126;
                  v125 = v127;
                }
              }
              v133 = *a3;
              v202 = *v126;
              v134 = *(_QWORD *)(v133 + 24);
              if (!v134)
                goto LABEL_165;
              v135 = &a1[v199];
              (*(void (**)(uint64_t, int *))(*(_QWORD *)v134 + 48))(v134, &v202);
              v137 = *a3;
              v202 = *v135;
              v138 = *(_QWORD *)(v137 + 24);
              if (!v138)
                goto LABEL_165;
              v139 = v136;
              v140 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v138 + 48))(v138, &v202);
              v124 = v199;
              if (v139 >= v140)
              {
                v141 = *v135;
                do
                {
                  v142 = v135;
                  v135 = v126;
                  *v142 = *v126;
                  if (v122 < v125)
                    break;
                  v143 = (2 * v125) | 1;
                  v126 = &a1[v143];
                  v125 = 2 * v125 + 2;
                  if (v125 >= v13)
                  {
                    v125 = v143;
                  }
                  else
                  {
                    v144 = *a3;
                    v202 = *v126;
                    v145 = *(_QWORD *)(v144 + 24);
                    if (!v145)
                      goto LABEL_165;
                    (*(void (**)(uint64_t, int *))(*(_QWORD *)v145 + 48))(v145, &v202);
                    v147 = *a3;
                    v202 = v126[1];
                    v148 = *(_QWORD *)(v147 + 24);
                    if (!v148)
                      goto LABEL_165;
                    if (v146 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v148 + 48))(v148, &v202))
                      v125 = v143;
                    else
                      ++v126;
                  }
                  v149 = *a3;
                  v202 = *v126;
                  v150 = *(_QWORD *)(v149 + 24);
                  if (!v150)
                    goto LABEL_165;
                  (*(void (**)(uint64_t, int *))(*(_QWORD *)v150 + 48))(v150, &v202);
                  v152 = *a3;
                  v202 = v141;
                  v153 = *(_QWORD *)(v152 + 24);
                  if (!v153)
                    goto LABEL_165;
                }
                while (v151 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v153 + 48))(v153, &v202));
                *v135 = v141;
                v124 = v199;
              }
            }
            v123 = v124 - 1;
            if (!v124)
            {
              v154 = v197 >> 2;
              v155 = v200;
              while (1)
              {
                v156 = v155;
                v157 = 0;
                v201 = *a1;
                v158 = a1;
                do
                {
                  v159 = v158;
                  v158 += v157 + 1;
                  v160 = 2 * v157;
                  v157 = (2 * v157) | 1;
                  v161 = v160 + 2;
                  if (v160 + 2 < v154)
                  {
                    v162 = *a3;
                    v202 = *v158;
                    v163 = *(_QWORD *)(v162 + 24);
                    if (!v163)
                      goto LABEL_165;
                    (*(void (**)(uint64_t, int *))(*(_QWORD *)v163 + 48))(v163, &v202);
                    v165 = *a3;
                    v202 = v158[1];
                    v166 = *(_QWORD *)(v165 + 24);
                    if (!v166)
                      goto LABEL_165;
                    if (v164 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v166 + 48))(v166, &v202))
                    {
                      ++v158;
                      v157 = v161;
                    }
                  }
                  *v159 = *v158;
                }
                while (v157 <= (uint64_t)((unint64_t)(v154 - 2) >> 1));
                v155 = v156 - 1;
                if (v158 == v156 - 1)
                {
                  *v158 = v201;
                }
                else
                {
                  *v158 = *v155;
                  *v155 = v201;
                  v167 = (char *)v158 - (char *)a1 + 4;
                  if (v167 >= 5)
                  {
                    v168 = (((unint64_t)v167 >> 2) - 2) >> 1;
                    v169 = &a1[v168];
                    v170 = *a3;
                    v202 = *v169;
                    v171 = *(_QWORD *)(v170 + 24);
                    if (!v171)
                      goto LABEL_165;
                    (*(void (**)(uint64_t, int *))(*(_QWORD *)v171 + 48))(v171, &v202);
                    v173 = *a3;
                    v202 = *v158;
                    v174 = *(_QWORD *)(v173 + 24);
                    if (!v174)
                      goto LABEL_165;
                    if (v172 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v174 + 48))(v174, &v202))
                    {
                      v175 = *v158;
                      do
                      {
                        v176 = v158;
                        v158 = v169;
                        *v176 = *v169;
                        if (!v168)
                          break;
                        v168 = (v168 - 1) >> 1;
                        v169 = &a1[v168];
                        v177 = *a3;
                        v202 = *v169;
                        v178 = *(_QWORD *)(v177 + 24);
                        if (!v178)
                          goto LABEL_165;
                        (*(void (**)(uint64_t, int *))(*(_QWORD *)v178 + 48))(v178, &v202);
                        v180 = *a3;
                        v202 = v175;
                        v181 = *(_QWORD *)(v180 + 24);
                        if (!v181)
                          goto LABEL_165;
                      }
                      while (v179 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v181 + 48))(v181, &v202));
                      *v158 = v175;
                    }
                  }
                }
                if (v154-- <= 2)
                  return;
              }
            }
          }
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)a2 - v8) >> 4);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(a2 - 2) > *(float *)(v8 + 136))
        {
          v200 = *(_OWORD *)v8;
          v236 = *(_OWORD *)(v8 + 48);
          v248 = *(_OWORD *)(v8 + 64);
          v212 = *(_OWORD *)(v8 + 16);
          v224 = *(_OWORD *)(v8 + 32);
          v284 = *(_OWORD *)(v8 + 112);
          v296 = *(_OWORD *)(v8 + 128);
          v260 = *(_OWORD *)(v8 + 80);
          v272 = *(_OWORD *)(v8 + 96);
          *(_OWORD *)v8 = *((_OWORD *)a2 - 9);
          v72 = *((_OWORD *)a2 - 8);
          v73 = *((_OWORD *)a2 - 7);
          v74 = *((_OWORD *)a2 - 5);
          *(_OWORD *)(v8 + 48) = *((_OWORD *)a2 - 6);
          *(_OWORD *)(v8 + 64) = v74;
          *(_OWORD *)(v8 + 16) = v72;
          *(_OWORD *)(v8 + 32) = v73;
          v75 = *((_OWORD *)a2 - 4);
          v76 = *((_OWORD *)a2 - 3);
          v77 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v8 + 112) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v8 + 128) = v77;
          *(_OWORD *)(v8 + 80) = v75;
          *(_OWORD *)(v8 + 96) = v76;
          *((_OWORD *)a2 - 9) = v200;
          *((_OWORD *)a2 - 6) = v236;
          *((_OWORD *)a2 - 5) = v248;
          *((_OWORD *)a2 - 8) = v212;
          *((_OWORD *)a2 - 7) = v224;
          *((_OWORD *)a2 - 2) = v284;
          *((_OWORD *)a2 - 1) = v296;
          *((_OWORD *)a2 - 4) = v260;
          *((_OWORD *)a2 - 3) = v272;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)v8, (__int128 *)(v8 + 144), a2 - 36);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)v8, (__int128 *)(v8 + 144), (__int128 *)(v8 + 288), (__int128 *)a2 - 9);
        return;
      case 5:
        v78 = (__int128 *)(v8 + 144);
        v79 = (__int128 *)(v8 + 288);
        v80 = (__int128 *)(v8 + 432);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)v8, (__int128 *)(v8 + 144), (__int128 *)(v8 + 288), (__int128 *)(v8 + 432));
        if (*(a2 - 2) > *(float *)(v8 + 568))
        {
          v225 = *(_OWORD *)(v8 + 464);
          v237 = *(_OWORD *)(v8 + 480);
          v285 = *(_OWORD *)(v8 + 544);
          v297 = *(_OWORD *)(v8 + 560);
          v249 = *(_OWORD *)(v8 + 496);
          v261 = *(_OWORD *)(v8 + 512);
          v273 = *(_OWORD *)(v8 + 528);
          v201 = *v80;
          v213 = *(_OWORD *)(v8 + 448);
          *v80 = *((_OWORD *)a2 - 9);
          v81 = *((_OWORD *)a2 - 8);
          v82 = *((_OWORD *)a2 - 7);
          v83 = *((_OWORD *)a2 - 5);
          *(_OWORD *)(v8 + 480) = *((_OWORD *)a2 - 6);
          *(_OWORD *)(v8 + 496) = v83;
          *(_OWORD *)(v8 + 448) = v81;
          *(_OWORD *)(v8 + 464) = v82;
          v84 = *((_OWORD *)a2 - 4);
          v85 = *((_OWORD *)a2 - 3);
          v86 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v8 + 544) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v8 + 560) = v86;
          *(_OWORD *)(v8 + 512) = v84;
          *(_OWORD *)(v8 + 528) = v85;
          *((_OWORD *)a2 - 9) = v201;
          *((_OWORD *)a2 - 6) = v237;
          *((_OWORD *)a2 - 5) = v249;
          *((_OWORD *)a2 - 8) = v213;
          *((_OWORD *)a2 - 7) = v225;
          *((_OWORD *)a2 - 2) = v285;
          *((_OWORD *)a2 - 1) = v297;
          *((_OWORD *)a2 - 4) = v261;
          *((_OWORD *)a2 - 3) = v273;
          if (*(float *)(v8 + 568) > *(float *)(v8 + 424))
          {
            v274 = *(_OWORD *)(v8 + 384);
            v286 = *(_OWORD *)(v8 + 400);
            v298 = *(_OWORD *)(v8 + 416);
            v226 = *(_OWORD *)(v8 + 320);
            v238 = *(_OWORD *)(v8 + 336);
            v250 = *(_OWORD *)(v8 + 352);
            v262 = *(_OWORD *)(v8 + 368);
            v202 = *v79;
            v214 = *(_OWORD *)(v8 + 304);
            v87 = *(_OWORD *)(v8 + 512);
            *(_OWORD *)(v8 + 352) = *(_OWORD *)(v8 + 496);
            *(_OWORD *)(v8 + 368) = v87;
            v88 = *(_OWORD *)(v8 + 544);
            *(_OWORD *)(v8 + 384) = *(_OWORD *)(v8 + 528);
            *(_OWORD *)(v8 + 400) = v88;
            *(_OWORD *)(v8 + 416) = *(_OWORD *)(v8 + 560);
            v89 = *(_OWORD *)(v8 + 480);
            *(_OWORD *)(v8 + 320) = *(_OWORD *)(v8 + 464);
            *(_OWORD *)(v8 + 336) = v89;
            v90 = *(_OWORD *)(v8 + 448);
            *v79 = *v80;
            *(_OWORD *)(v8 + 304) = v90;
            *(_OWORD *)(v8 + 496) = v250;
            *(_OWORD *)(v8 + 512) = v262;
            *(_OWORD *)(v8 + 528) = v274;
            *(_OWORD *)(v8 + 544) = v286;
            *(_OWORD *)(v8 + 560) = v298;
            *(_OWORD *)(v8 + 464) = v226;
            *(_OWORD *)(v8 + 480) = v238;
            LODWORD(v90) = *(_DWORD *)(v8 + 424);
            LODWORD(v89) = *(_DWORD *)(v8 + 280);
            *v80 = v202;
            *(_OWORD *)(v8 + 448) = v214;
            if (*(float *)&v90 > *(float *)&v89)
            {
              v275 = *(_OWORD *)(v8 + 240);
              v287 = *(_OWORD *)(v8 + 256);
              v299 = *(_OWORD *)(v8 + 272);
              v227 = *(_OWORD *)(v8 + 176);
              v239 = *(_OWORD *)(v8 + 192);
              v251 = *(_OWORD *)(v8 + 208);
              v263 = *(_OWORD *)(v8 + 224);
              v203 = *v78;
              v215 = *(_OWORD *)(v8 + 160);
              v91 = *(_OWORD *)(v8 + 368);
              *(_OWORD *)(v8 + 208) = *(_OWORD *)(v8 + 352);
              *(_OWORD *)(v8 + 224) = v91;
              v92 = *(_OWORD *)(v8 + 400);
              *(_OWORD *)(v8 + 240) = *(_OWORD *)(v8 + 384);
              *(_OWORD *)(v8 + 256) = v92;
              *(_OWORD *)(v8 + 272) = *(_OWORD *)(v8 + 416);
              v93 = *(_OWORD *)(v8 + 336);
              *(_OWORD *)(v8 + 176) = *(_OWORD *)(v8 + 320);
              *(_OWORD *)(v8 + 192) = v93;
              v94 = *(_OWORD *)(v8 + 304);
              *v78 = *v79;
              *(_OWORD *)(v8 + 160) = v94;
              *(_OWORD *)(v8 + 352) = v251;
              *(_OWORD *)(v8 + 368) = v263;
              *(_OWORD *)(v8 + 384) = v275;
              *(_OWORD *)(v8 + 400) = v287;
              *(_OWORD *)(v8 + 416) = v299;
              *(_OWORD *)(v8 + 320) = v227;
              *(_OWORD *)(v8 + 336) = v239;
              LODWORD(v94) = *(_DWORD *)(v8 + 280);
              LODWORD(v93) = *(_DWORD *)(v8 + 136);
              *v79 = v203;
              *(_OWORD *)(v8 + 304) = v215;
              if (*(float *)&v94 > *(float *)&v93)
              {
                v204 = *(_OWORD *)v8;
                v240 = *(_OWORD *)(v8 + 48);
                v252 = *(_OWORD *)(v8 + 64);
                v216 = *(_OWORD *)(v8 + 16);
                v228 = *(_OWORD *)(v8 + 32);
                v288 = *(_OWORD *)(v8 + 112);
                v300 = *(_OWORD *)(v8 + 128);
                v264 = *(_OWORD *)(v8 + 80);
                v276 = *(_OWORD *)(v8 + 96);
                v95 = *(_OWORD *)(v8 + 192);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 176);
                *(_OWORD *)(v8 + 48) = v95;
                v96 = *(_OWORD *)(v8 + 272);
                v97 = *(_OWORD *)(v8 + 240);
                *(_OWORD *)(v8 + 112) = *(_OWORD *)(v8 + 256);
                *(_OWORD *)(v8 + 128) = v96;
                v98 = *(_OWORD *)(v8 + 224);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 208);
                *(_OWORD *)(v8 + 80) = v98;
                *(_OWORD *)(v8 + 96) = v97;
                v99 = *(_OWORD *)(v8 + 160);
                *(_OWORD *)v8 = *v78;
                *(_OWORD *)(v8 + 16) = v99;
                *(_OWORD *)(v8 + 240) = v276;
                *(_OWORD *)(v8 + 256) = v288;
                *(_OWORD *)(v8 + 272) = v300;
                *(_OWORD *)(v8 + 176) = v228;
                *(_OWORD *)(v8 + 192) = v240;
                *(_OWORD *)(v8 + 208) = v252;
                *(_OWORD *)(v8 + 224) = v264;
                *v78 = v204;
                *(_OWORD *)(v8 + 160) = v216;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 3455)
        {
          v100 = (float *)(v8 + 144);
          v102 = (float *)v8 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v8;
              do
              {
                v105 = v100;
                v106 = *(float *)(v104 + 280);
                if (v106 > *(float *)(v104 + 136))
                {
                  v205 = *(_OWORD *)v100;
                  v241 = *((_OWORD *)v100 + 3);
                  v253 = *((_OWORD *)v100 + 4);
                  v217 = *((_OWORD *)v100 + 1);
                  v229 = *((_OWORD *)v100 + 2);
                  v301 = *((_QWORD *)v100 + 16);
                  v277 = *((_OWORD *)v100 + 6);
                  v289 = *((_OWORD *)v100 + 7);
                  v265 = *((_OWORD *)v100 + 5);
                  v107 = *(_DWORD *)(v104 + 284);
                  v108 = v103;
                  while (1)
                  {
                    v109 = (float *)(v8 + v108);
                    v110 = *(_OWORD *)(v8 + v108 + 112);
                    *((_OWORD *)v109 + 15) = *(_OWORD *)(v8 + v108 + 96);
                    *((_OWORD *)v109 + 16) = v110;
                    *((_OWORD *)v109 + 17) = *(_OWORD *)(v8 + v108 + 128);
                    v111 = *(_OWORD *)(v8 + v108 + 48);
                    *((_OWORD *)v109 + 11) = *(_OWORD *)(v8 + v108 + 32);
                    *((_OWORD *)v109 + 12) = v111;
                    v112 = *(_OWORD *)(v8 + v108 + 80);
                    *((_OWORD *)v109 + 13) = *(_OWORD *)(v8 + v108 + 64);
                    *((_OWORD *)v109 + 14) = v112;
                    v113 = *(_OWORD *)(v8 + v108 + 16);
                    *((_OWORD *)v109 + 9) = *(_OWORD *)(v8 + v108);
                    *((_OWORD *)v109 + 10) = v113;
                    if (!v108)
                      break;
                    v108 -= 144;
                    if (v106 <= *(v109 - 2))
                    {
                      v114 = v8 + v108 + 144;
                      goto LABEL_79;
                    }
                  }
                  v114 = v8;
LABEL_79:
                  *(_OWORD *)v114 = v205;
                  *(_OWORD *)(v114 + 48) = v241;
                  *(_OWORD *)(v114 + 64) = v253;
                  *(_OWORD *)(v114 + 16) = v217;
                  *(_OWORD *)(v114 + 32) = v229;
                  *(_QWORD *)(v114 + 128) = v301;
                  *(_OWORD *)(v114 + 96) = v277;
                  *(_OWORD *)(v114 + 112) = v289;
                  *(_OWORD *)(v114 + 80) = v265;
                  *(float *)(v114 + 136) = v106;
                  *(_DWORD *)(v114 + 140) = v107;
                }
                v100 = v105 + 36;
                v103 += 144;
                v104 = (unint64_t)v105;
              }
              while (v105 + 36 != a2);
            }
          }
          else if (!v102)
          {
            do
            {
              v163 = (uint64_t)v100;
              v164 = *(float *)(a1 + 280);
              if (v164 > *(float *)(a1 + 136))
              {
                v208 = *(_OWORD *)v100;
                v244 = *((_OWORD *)v100 + 3);
                v256 = *((_OWORD *)v100 + 4);
                v220 = *((_OWORD *)v100 + 1);
                v232 = *((_OWORD *)v100 + 2);
                v304 = *((_QWORD *)v100 + 16);
                v280 = *((_OWORD *)v100 + 6);
                v292 = *((_OWORD *)v100 + 7);
                v268 = *((_OWORD *)v100 + 5);
                v165 = *(_DWORD *)(a1 + 284);
                do
                {
                  v166 = *((_OWORD *)v100 - 2);
                  *((_OWORD *)v100 + 6) = *((_OWORD *)v100 - 3);
                  *((_OWORD *)v100 + 7) = v166;
                  *((_OWORD *)v100 + 8) = *((_OWORD *)v100 - 1);
                  v167 = *((_OWORD *)v100 - 6);
                  *((_OWORD *)v100 + 2) = *((_OWORD *)v100 - 7);
                  *((_OWORD *)v100 + 3) = v167;
                  v168 = *((_OWORD *)v100 - 4);
                  *((_OWORD *)v100 + 4) = *((_OWORD *)v100 - 5);
                  *((_OWORD *)v100 + 5) = v168;
                  v169 = *((_OWORD *)v100 - 8);
                  *(_OWORD *)v100 = *((_OWORD *)v100 - 9);
                  *((_OWORD *)v100 + 1) = v169;
                  *(float *)&v169 = *(v100 - 38);
                  v100 -= 36;
                }
                while (v164 > *(float *)&v169);
                *(_OWORD *)v100 = v208;
                *((_OWORD *)v100 + 3) = v244;
                *((_OWORD *)v100 + 4) = v256;
                *((_OWORD *)v100 + 1) = v220;
                *((_OWORD *)v100 + 2) = v232;
                *((_QWORD *)v100 + 16) = v304;
                *((_OWORD *)v100 + 6) = v280;
                *((_OWORD *)v100 + 7) = v292;
                *((_OWORD *)v100 + 5) = v268;
                v100[34] = v164;
                *((_DWORD *)v100 + 35) = v165;
              }
              v100 = (float *)(v163 + 144);
              a1 = v163;
            }
            while ((float *)(v163 + 144) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v115 = (unint64_t)(v10 - 2) >> 1;
            v116 = v115;
            do
            {
              v117 = v116;
              if (v115 >= v116)
              {
                v118 = (2 * v116) | 1;
                v119 = v8 + 144 * v118;
                if (2 * v116 + 2 < v10 && *(float *)(v8 + 144 * v118 + 136) > *(float *)(v119 + 280))
                {
                  v119 += 144;
                  v118 = 2 * v116 + 2;
                }
                v120 = *(float *)(v8 + 144 * v116 + 136);
                if (*(float *)(v119 + 136) <= v120)
                {
                  v121 = v8 + 144 * v116;
                  v206 = *(_OWORD *)v121;
                  v242 = *(_OWORD *)(v121 + 48);
                  v254 = *(_OWORD *)(v121 + 64);
                  v218 = *(_OWORD *)(v121 + 16);
                  v230 = *(_OWORD *)(v121 + 32);
                  v302 = *(_QWORD *)(v121 + 128);
                  v278 = *(_OWORD *)(v121 + 96);
                  v290 = *(_OWORD *)(v121 + 112);
                  v266 = *(_OWORD *)(v121 + 80);
                  v122 = *(_DWORD *)(v121 + 140);
                  do
                  {
                    v123 = (_OWORD *)v121;
                    v121 = v119;
                    *v123 = *(_OWORD *)v119;
                    v124 = *(_OWORD *)(v119 + 16);
                    v125 = *(_OWORD *)(v119 + 32);
                    v126 = *(_OWORD *)(v119 + 64);
                    v123[3] = *(_OWORD *)(v119 + 48);
                    v123[4] = v126;
                    v123[1] = v124;
                    v123[2] = v125;
                    v127 = *(_OWORD *)(v119 + 80);
                    v128 = *(_OWORD *)(v119 + 96);
                    v129 = *(_OWORD *)(v119 + 128);
                    v123[7] = *(_OWORD *)(v119 + 112);
                    v123[8] = v129;
                    v123[5] = v127;
                    v123[6] = v128;
                    if (v115 < v118)
                      break;
                    v130 = (2 * v118) | 1;
                    v119 = v8 + 144 * v130;
                    v131 = 2 * v118 + 2;
                    if (v131 < v10 && *(float *)(v8 + 144 * v130 + 136) > *(float *)(v119 + 280))
                    {
                      v119 += 144;
                      v130 = v131;
                    }
                    v118 = v130;
                  }
                  while (*(float *)(v119 + 136) <= v120);
                  *(_OWORD *)v121 = v206;
                  *(_OWORD *)(v121 + 48) = v242;
                  *(_OWORD *)(v121 + 64) = v254;
                  *(_OWORD *)(v121 + 16) = v218;
                  *(_OWORD *)(v121 + 32) = v230;
                  *(_QWORD *)(v121 + 128) = v302;
                  *(_OWORD *)(v121 + 96) = v278;
                  *(_OWORD *)(v121 + 112) = v290;
                  *(_OWORD *)(v121 + 80) = v266;
                  *(float *)(v121 + 136) = v120;
                  *(_DWORD *)(v121 + 140) = v122;
                }
              }
              v116 = v117 - 1;
            }
            while (v117);
            v132 = v9 / 0x90uLL;
            do
            {
              v133 = 0;
              v207 = *(_OWORD *)v8;
              v243 = *(_OWORD *)(v8 + 48);
              v255 = *(_OWORD *)(v8 + 64);
              v219 = *(_OWORD *)(v8 + 16);
              v231 = *(_OWORD *)(v8 + 32);
              v291 = *(_OWORD *)(v8 + 112);
              v303 = *(_OWORD *)(v8 + 128);
              v267 = *(_OWORD *)(v8 + 80);
              v279 = *(_OWORD *)(v8 + 96);
              v134 = v8;
              do
              {
                v135 = (_OWORD *)v134;
                v136 = v133 + 1;
                v134 += 144 * (v133 + 1);
                v137 = 2 * v133;
                v133 = (2 * v133) | 1;
                v138 = v137 + 2;
                if (v138 < v132 && *((float *)&v135[9 * v136 + 8] + 2) > *(float *)(v134 + 280))
                {
                  v134 += 144;
                  v133 = v138;
                }
                *v135 = *(_OWORD *)v134;
                v139 = *(_OWORD *)(v134 + 16);
                v140 = *(_OWORD *)(v134 + 32);
                v141 = *(_OWORD *)(v134 + 64);
                v135[3] = *(_OWORD *)(v134 + 48);
                v135[4] = v141;
                v135[1] = v139;
                v135[2] = v140;
                v142 = *(_OWORD *)(v134 + 80);
                v143 = *(_OWORD *)(v134 + 96);
                v144 = *(_OWORD *)(v134 + 128);
                v135[7] = *(_OWORD *)(v134 + 112);
                v135[8] = v144;
                v135[5] = v142;
                v135[6] = v143;
              }
              while (v133 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
              a2 -= 36;
              if ((float *)v134 == a2)
              {
                *(_OWORD *)v134 = v207;
                *(_OWORD *)(v134 + 48) = v243;
                *(_OWORD *)(v134 + 64) = v255;
                *(_OWORD *)(v134 + 16) = v219;
                *(_OWORD *)(v134 + 32) = v231;
                *(_OWORD *)(v134 + 112) = v291;
                *(_OWORD *)(v134 + 128) = v303;
                *(_OWORD *)(v134 + 80) = v267;
                *(_OWORD *)(v134 + 96) = v279;
              }
              else
              {
                *(_OWORD *)v134 = *(_OWORD *)a2;
                v145 = *((_OWORD *)a2 + 1);
                v146 = *((_OWORD *)a2 + 2);
                v147 = *((_OWORD *)a2 + 4);
                *(_OWORD *)(v134 + 48) = *((_OWORD *)a2 + 3);
                *(_OWORD *)(v134 + 64) = v147;
                *(_OWORD *)(v134 + 16) = v145;
                *(_OWORD *)(v134 + 32) = v146;
                v148 = *((_OWORD *)a2 + 5);
                v149 = *((_OWORD *)a2 + 6);
                v150 = *((_OWORD *)a2 + 8);
                *(_OWORD *)(v134 + 112) = *((_OWORD *)a2 + 7);
                *(_OWORD *)(v134 + 128) = v150;
                *(_OWORD *)(v134 + 80) = v148;
                *(_OWORD *)(v134 + 96) = v149;
                *(_OWORD *)a2 = v207;
                *((_OWORD *)a2 + 3) = v243;
                *((_OWORD *)a2 + 4) = v255;
                *((_OWORD *)a2 + 1) = v219;
                *((_OWORD *)a2 + 2) = v231;
                *((_OWORD *)a2 + 7) = v291;
                *((_OWORD *)a2 + 8) = v303;
                *((_OWORD *)a2 + 5) = v267;
                *((_OWORD *)a2 + 6) = v279;
                v151 = v134 - v8 + 144;
                if (v151 >= 145)
                {
                  v152 = (v151 / 0x90uLL - 2) >> 1;
                  v153 = *(float *)(v134 + 136);
                  if (*(float *)(v8 + 144 * v152 + 136) > v153)
                  {
                    v172 = *(_OWORD *)v134;
                    v181 = *(_OWORD *)(v134 + 48);
                    v184 = *(_OWORD *)(v134 + 64);
                    v175 = *(_OWORD *)(v134 + 16);
                    v178 = *(_OWORD *)(v134 + 32);
                    v196 = *(_QWORD *)(v134 + 128);
                    v190 = *(_OWORD *)(v134 + 96);
                    v193 = *(_OWORD *)(v134 + 112);
                    v187 = *(_OWORD *)(v134 + 80);
                    v154 = *(_DWORD *)(v134 + 140);
                    do
                    {
                      v155 = (_OWORD *)v134;
                      v134 = v8 + 144 * v152;
                      *v155 = *(_OWORD *)v134;
                      v156 = *(_OWORD *)(v134 + 16);
                      v157 = *(_OWORD *)(v134 + 32);
                      v158 = *(_OWORD *)(v134 + 64);
                      v155[3] = *(_OWORD *)(v134 + 48);
                      v155[4] = v158;
                      v155[1] = v156;
                      v155[2] = v157;
                      v159 = *(_OWORD *)(v134 + 80);
                      v160 = *(_OWORD *)(v134 + 96);
                      v161 = *(_OWORD *)(v134 + 128);
                      v155[7] = *(_OWORD *)(v134 + 112);
                      v155[8] = v161;
                      v155[5] = v159;
                      v155[6] = v160;
                      if (!v152)
                        break;
                      v152 = (v152 - 1) >> 1;
                    }
                    while (*(float *)(v8 + 144 * v152 + 136) > v153);
                    *(_OWORD *)v134 = v172;
                    *(_OWORD *)(v134 + 48) = v181;
                    *(_OWORD *)(v134 + 64) = v184;
                    *(_OWORD *)(v134 + 16) = v175;
                    *(_OWORD *)(v134 + 32) = v178;
                    *(_QWORD *)(v134 + 128) = v196;
                    *(_OWORD *)(v134 + 96) = v190;
                    *(_OWORD *)(v134 + 112) = v193;
                    *(_OWORD *)(v134 + 80) = v187;
                    *(float *)(v134 + 136) = v153;
                    *(_DWORD *)(v134 + 140) = v154;
                  }
                }
              }
            }
            while (v132-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 144 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x4801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)v12, (__int128 *)a1, a2 - 36);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)a1, (__int128 *)v12, a2 - 36);
          v13 = 9 * v11;
          v14 = (__int128 *)(a1 + 144 * v11 - 144);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)(a1 + 144), v14, a2 - 72);
          v15 = (__int128 *)(a1 + 144 + 16 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)(a1 + 288), v15, a2 - 108);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)v14, (__int128 *)v12, (float *)v15);
          v197 = *(_OWORD *)a1;
          v233 = *(_OWORD *)(a1 + 48);
          v245 = *(_OWORD *)(a1 + 64);
          v209 = *(_OWORD *)(a1 + 16);
          v221 = *(_OWORD *)(a1 + 32);
          v281 = *(_OWORD *)(a1 + 112);
          v293 = *(_OWORD *)(a1 + 128);
          v257 = *(_OWORD *)(a1 + 80);
          v269 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          v16 = *(_OWORD *)(v12 + 16);
          v17 = *(_OWORD *)(v12 + 32);
          v18 = *(_OWORD *)(v12 + 64);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(v12 + 48);
          *(_OWORD *)(a1 + 64) = v18;
          *(_OWORD *)(a1 + 16) = v16;
          *(_OWORD *)(a1 + 32) = v17;
          v19 = *(_OWORD *)(v12 + 80);
          v20 = *(_OWORD *)(v12 + 96);
          v21 = *(_OWORD *)(v12 + 128);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(v12 + 112);
          *(_OWORD *)(a1 + 128) = v21;
          *(_OWORD *)(a1 + 80) = v19;
          *(_OWORD *)(a1 + 96) = v20;
          *(_OWORD *)v12 = v197;
          *(_OWORD *)(v12 + 48) = v233;
          *(_OWORD *)(v12 + 64) = v245;
          *(_OWORD *)(v12 + 16) = v209;
          *(_OWORD *)(v12 + 32) = v221;
          *(_OWORD *)(v12 + 112) = v281;
          *(_OWORD *)(v12 + 128) = v293;
          *(_OWORD *)(v12 + 80) = v257;
          *(_OWORD *)(v12 + 96) = v269;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v22 = *(float *)(a1 + 136);
          if (*(float *)(a1 - 8) > v22)
            goto LABEL_11;
          v171 = *(_OWORD *)a1;
          v180 = *(_OWORD *)(a1 + 48);
          v183 = *(_OWORD *)(a1 + 64);
          v174 = *(_OWORD *)(a1 + 16);
          v177 = *(_OWORD *)(a1 + 32);
          v195 = *(_QWORD *)(a1 + 128);
          v189 = *(_OWORD *)(a1 + 96);
          v192 = *(_OWORD *)(a1 + 112);
          v186 = *(_OWORD *)(a1 + 80);
          if (v22 <= *(a2 - 2))
          {
            v51 = a1 + 144;
            do
            {
              v8 = v51;
              if (v51 >= (unint64_t)a2)
                break;
              v52 = *(float *)(v51 + 136);
              v51 += 144;
            }
            while (v22 <= v52);
          }
          else
          {
            v49 = a1;
            do
            {
              v8 = v49 + 144;
              v50 = *(float *)(v49 + 280);
              v49 += 144;
            }
            while (v22 <= v50);
          }
          v53 = a2;
          if (v8 < (unint64_t)a2)
          {
            v54 = a2;
            do
            {
              v53 = v54 - 36;
              v55 = *(v54 - 2);
              v54 -= 36;
            }
            while (v22 > v55);
          }
          v56 = *(_DWORD *)(a1 + 140);
          while (v8 < (unint64_t)v53)
          {
            v199 = *(_OWORD *)v8;
            v235 = *(_OWORD *)(v8 + 48);
            v247 = *(_OWORD *)(v8 + 64);
            v211 = *(_OWORD *)(v8 + 16);
            v223 = *(_OWORD *)(v8 + 32);
            v283 = *(_OWORD *)(v8 + 112);
            v295 = *(_OWORD *)(v8 + 128);
            v259 = *(_OWORD *)(v8 + 80);
            v271 = *(_OWORD *)(v8 + 96);
            *(_OWORD *)v8 = *(_OWORD *)v53;
            v57 = *((_OWORD *)v53 + 1);
            v58 = *((_OWORD *)v53 + 2);
            v59 = *((_OWORD *)v53 + 4);
            *(_OWORD *)(v8 + 48) = *((_OWORD *)v53 + 3);
            *(_OWORD *)(v8 + 64) = v59;
            *(_OWORD *)(v8 + 16) = v57;
            *(_OWORD *)(v8 + 32) = v58;
            v60 = *((_OWORD *)v53 + 5);
            v61 = *((_OWORD *)v53 + 6);
            v62 = *((_OWORD *)v53 + 8);
            *(_OWORD *)(v8 + 112) = *((_OWORD *)v53 + 7);
            *(_OWORD *)(v8 + 128) = v62;
            *(_OWORD *)(v8 + 80) = v60;
            *(_OWORD *)(v8 + 96) = v61;
            *(_OWORD *)v53 = v199;
            *((_OWORD *)v53 + 3) = v235;
            *((_OWORD *)v53 + 4) = v247;
            *((_OWORD *)v53 + 1) = v211;
            *((_OWORD *)v53 + 2) = v223;
            *((_OWORD *)v53 + 7) = v283;
            *((_OWORD *)v53 + 8) = v295;
            *((_OWORD *)v53 + 5) = v259;
            *((_OWORD *)v53 + 6) = v271;
            do
            {
              v63 = *(float *)(v8 + 280);
              v8 += 144;
            }
            while (v22 <= v63);
            do
            {
              v64 = *(v53 - 2);
              v53 -= 36;
            }
            while (v22 > v64);
          }
          v65 = (__int128 *)(v8 - 144);
          if (v8 - 144 != a1)
          {
            *(_OWORD *)a1 = *v65;
            v66 = *(_OWORD *)(v8 - 128);
            v67 = *(_OWORD *)(v8 - 112);
            v68 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 64) = v68;
            *(_OWORD *)(a1 + 16) = v66;
            *(_OWORD *)(a1 + 32) = v67;
            v69 = *(_OWORD *)(v8 - 64);
            v70 = *(_OWORD *)(v8 - 48);
            v71 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 128) = v71;
            *(_OWORD *)(a1 + 80) = v69;
            *(_OWORD *)(a1 + 96) = v70;
          }
          a4 = 0;
          *v65 = v171;
          *(_OWORD *)(v8 - 96) = v180;
          *(_OWORD *)(v8 - 80) = v183;
          *(_OWORD *)(v8 - 128) = v174;
          *(_OWORD *)(v8 - 112) = v177;
          *(_QWORD *)(v8 - 16) = v195;
          *(_OWORD *)(v8 - 48) = v189;
          *(_OWORD *)(v8 - 32) = v192;
          *(_OWORD *)(v8 - 64) = v186;
          *(float *)(v8 - 8) = v22;
          *(_DWORD *)(v8 - 4) = v56;
          continue;
        }
        v22 = *(float *)(a1 + 136);
LABEL_11:
        v23 = 0;
        v170 = *(_OWORD *)a1;
        v179 = *(_OWORD *)(a1 + 48);
        v182 = *(_OWORD *)(a1 + 64);
        v173 = *(_OWORD *)(a1 + 16);
        v176 = *(_OWORD *)(a1 + 32);
        v194 = *(_QWORD *)(a1 + 128);
        v188 = *(_OWORD *)(a1 + 96);
        v191 = *(_OWORD *)(a1 + 112);
        v185 = *(_OWORD *)(a1 + 80);
        v24 = *(_DWORD *)(a1 + 140);
        do
        {
          v25 = *(float *)(a1 + v23 + 280);
          v23 += 144;
        }
        while (v25 > v22);
        v26 = a1 + v23;
        v27 = a2;
        if (v23 == 144)
        {
          v30 = a2;
          while (v26 < (unint64_t)v30)
          {
            v28 = v30 - 36;
            v31 = *(v30 - 2);
            v30 -= 36;
            if (v31 > v22)
              goto LABEL_21;
          }
          v28 = v30;
        }
        else
        {
          do
          {
            v28 = v27 - 36;
            v29 = *(v27 - 2);
            v27 -= 36;
          }
          while (v29 <= v22);
        }
LABEL_21:
        v8 = v26;
        if (v26 < (unint64_t)v28)
        {
          v32 = v28;
          do
          {
            v198 = *(_OWORD *)v8;
            v234 = *(_OWORD *)(v8 + 48);
            v246 = *(_OWORD *)(v8 + 64);
            v210 = *(_OWORD *)(v8 + 16);
            v222 = *(_OWORD *)(v8 + 32);
            v282 = *(_OWORD *)(v8 + 112);
            v294 = *(_OWORD *)(v8 + 128);
            v258 = *(_OWORD *)(v8 + 80);
            v270 = *(_OWORD *)(v8 + 96);
            *(_OWORD *)v8 = *(_OWORD *)v32;
            v33 = *((_OWORD *)v32 + 1);
            v34 = *((_OWORD *)v32 + 2);
            v35 = *((_OWORD *)v32 + 4);
            *(_OWORD *)(v8 + 48) = *((_OWORD *)v32 + 3);
            *(_OWORD *)(v8 + 64) = v35;
            *(_OWORD *)(v8 + 16) = v33;
            *(_OWORD *)(v8 + 32) = v34;
            v36 = *((_OWORD *)v32 + 5);
            v37 = *((_OWORD *)v32 + 6);
            v38 = *((_OWORD *)v32 + 8);
            *(_OWORD *)(v8 + 112) = *((_OWORD *)v32 + 7);
            *(_OWORD *)(v8 + 128) = v38;
            *(_OWORD *)(v8 + 80) = v36;
            *(_OWORD *)(v8 + 96) = v37;
            *(_OWORD *)v32 = v198;
            *((_OWORD *)v32 + 3) = v234;
            *((_OWORD *)v32 + 4) = v246;
            *((_OWORD *)v32 + 1) = v210;
            *((_OWORD *)v32 + 2) = v222;
            *((_OWORD *)v32 + 7) = v282;
            *((_OWORD *)v32 + 8) = v294;
            *((_OWORD *)v32 + 5) = v258;
            *((_OWORD *)v32 + 6) = v270;
            do
            {
              v39 = *(float *)(v8 + 280);
              v8 += 144;
            }
            while (v39 > v22);
            do
            {
              v40 = *(v32 - 2);
              v32 -= 36;
            }
            while (v40 <= v22);
          }
          while (v8 < (unint64_t)v32);
        }
        v41 = (__int128 *)(v8 - 144);
        if (v8 - 144 != a1)
        {
          *(_OWORD *)a1 = *v41;
          v42 = *(_OWORD *)(v8 - 128);
          v43 = *(_OWORD *)(v8 - 112);
          v44 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 64) = v44;
          *(_OWORD *)(a1 + 16) = v42;
          *(_OWORD *)(a1 + 32) = v43;
          v45 = *(_OWORD *)(v8 - 64);
          v46 = *(_OWORD *)(v8 - 48);
          v47 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 128) = v47;
          *(_OWORD *)(a1 + 80) = v45;
          *(_OWORD *)(a1 + 96) = v46;
        }
        *v41 = v170;
        *(_OWORD *)(v8 - 96) = v179;
        *(_OWORD *)(v8 - 80) = v182;
        *(_OWORD *)(v8 - 128) = v173;
        *(_OWORD *)(v8 - 112) = v176;
        *(_QWORD *)(v8 - 16) = v194;
        *(_OWORD *)(v8 - 48) = v188;
        *(_OWORD *)(v8 - 32) = v191;
        *(_OWORD *)(v8 - 64) = v185;
        *(float *)(v8 - 8) = v22;
        *(_DWORD *)(v8 - 4) = v24;
        if (v26 < (unint64_t)v28)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *,false>(a1, v8 - 144, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v48 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(a1, v8 - 144);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(v8, (uint64_t)a2))
        {
          if (v48)
            continue;
          goto LABEL_32;
        }
        a2 = (float *)(v8 - 144);
        if (!v48)
          goto LABEL_1;
        return;
    }
  }
}

  i = a1;
  while (2)
  {
    a1 = i;
    v9 = (char *)a2 - (char *)i;
    v10 = ((char *)a2 - (char *)i) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v55 = a2 - 4;
        v56 = *(a2 - 4);
        v57 = v56 <= *i;
        if (v56 == *i)
        {
          v58 = *(a2 - 3);
          v59 = i[1];
          v57 = v58 <= v59;
          if (v58 == v59)
            v57 = *(a2 - 2) <= i[2];
        }
        if (!v57)
        {
          v142 = *(_OWORD *)i;
          *(_OWORD *)i = *(_OWORD *)v55;
          *(_OWORD *)v55 = v142;
        }
        return;
      case 3uLL:
        return;
      case 4uLL:
        return;
      case 5uLL:
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return;
            v77 = (v10 - 2) >> 1;
            v78 = v77;
            while (1)
            {
              v79 = v78;
              if (v77 >= v78)
              {
                v80 = (2 * v78) | 1;
                v81 = &i[4 * v80];
                if (2 * v79 + 2 < (uint64_t)v10)
                {
                  v82 = v81[4];
                  v83 = *v81 <= v82;
                  if (*v81 == v82)
                  {
                    v84 = &i[4 * v80];
                    v85 = v84[1];
                    v86 = v81[5];
                    v83 = v85 <= v86;
                    if (v85 == v86)
                      v83 = v84[2] <= v81[6];
                  }
                  if (!v83)
                  {
                    v81 += 4;
                    v80 = 2 * v79 + 2;
                  }
                }
                v87 = &i[4 * v79];
                v88 = *v87;
                if (*v81 == *v87)
                {
                  v89 = v81[1];
                  v90 = &i[4 * v79];
                  v91 = v90[1];
                  v92 = v89 <= v91;
                  if (v89 == v91)
                  {
                    v91 = v81[1];
                    v92 = v81[2] <= v90[2];
                  }
                  if (v92)
                    goto LABEL_163;
                }
                else if (*v81 <= v88)
                {
                  v91 = v87[1];
LABEL_163:
                  v93 = *((_QWORD *)v87 + 1);
                  *(_OWORD *)v87 = *(_OWORD *)v81;
                  if (v77 >= v80)
                  {
                    while (1)
                    {
                      v94 = v81;
                      v95 = 2 * v80;
                      v80 = (2 * v80) | 1;
                      v81 = &i[4 * v80];
                      v96 = v95 + 2;
                      if (v96 < (uint64_t)v10)
                      {
                        v97 = v81[4];
                        v98 = *v81 <= v97;
                        if (*v81 == v97)
                        {
                          v99 = &i[4 * v80];
                          v100 = v99[1];
                          v101 = v81[5];
                          v98 = v100 <= v101;
                          if (v100 == v101)
                            v98 = v99[2] <= v81[6];
                        }
                        if (!v98)
                        {
                          v81 += 4;
                          v80 = v96;
                        }
                      }
                      v102 = *v81 <= v88;
                      if (*v81 == v88)
                      {
                        v103 = v81[1];
                        v102 = v103 <= v91;
                        if (v103 == v91)
                          v102 = v81[2] <= (int)v93;
                      }
                      if (!v102)
                        break;
                      *(_OWORD *)v94 = *(_OWORD *)v81;
                      if (v77 < v80)
                        goto LABEL_176;
                    }
                    v81 = v94;
                  }
LABEL_176:
                  *v81 = v88;
                  v81[1] = v91;
                  *((_QWORD *)v81 + 1) = v93;
                }
              }
              v78 = v79 - 1;
              if (!v79)
              {
                v104 = (unint64_t)v9 >> 4;
                while (1)
                {
                  v105 = 0;
                  v143 = *(_OWORD *)i;
                  v106 = i;
                  do
                  {
                    v107 = v106;
                    v108 = v105 + 1;
                    v106 += 4 * v105 + 4;
                    v109 = 2 * v105;
                    v105 = (2 * v105) | 1;
                    v110 = v109 + 2;
                    if (v110 < v104)
                    {
                      v111 = v106[4];
                      v112 = *v106 <= v111;
                      if (*v106 == v111)
                      {
                        v113 = &v107[4 * v108];
                        v114 = v113[1];
                        v115 = v106[5];
                        v112 = v114 <= v115;
                        if (v114 == v115)
                          v112 = v113[2] <= v106[6];
                      }
                      if (!v112)
                      {
                        v106 += 4;
                        v105 = v110;
                      }
                    }
                    *(_OWORD *)v107 = *(_OWORD *)v106;
                  }
                  while (v105 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
                  a2 -= 4;
                  if (v106 == a2)
                  {
                    *(_OWORD *)v106 = v143;
                  }
                  else
                  {
                    *(_OWORD *)v106 = *(_OWORD *)a2;
                    *(_OWORD *)a2 = v143;
                    v116 = (char *)v106 - (char *)i + 16;
                    if (v116 >= 17)
                    {
                      v117 = ((unint64_t)v116 >> 4) - 2;
                      v118 = v117 >> 1;
                      v119 = &i[4 * (v117 >> 1)];
                      v120 = *v106;
                      if (*v119 == *v106)
                      {
                        v121 = v119[1];
                        v122 = v106[1];
                        v123 = v121 <= v122;
                        if (v121 == v122)
                        {
                          v122 = v119[1];
                          v123 = i[4 * v118 + 2] <= v106[2];
                        }
                        if (!v123)
                          goto LABEL_198;
                      }
                      else if (*v119 > v120)
                      {
                        v122 = v106[1];
LABEL_198:
                        v124 = *((_QWORD *)v106 + 1);
                        *(_OWORD *)v106 = *(_OWORD *)v119;
                        if (v117 >= 2)
                        {
                          while (1)
                          {
                            v126 = v118 - 1;
                            v118 = (v118 - 1) >> 1;
                            v125 = &i[4 * v118];
                            v127 = *v125 <= v120;
                            if (*v125 == v120)
                            {
                              v128 = v125[1];
                              v127 = v128 <= v122;
                              if (v128 == v122)
                                v127 = i[4 * v118 + 2] <= (int)v124;
                            }
                            if (v127)
                              break;
                            *(_OWORD *)v119 = *(_OWORD *)v125;
                            v119 = &i[4 * v118];
                            if (v126 <= 1)
                              goto LABEL_205;
                          }
                        }
                        v125 = v119;
LABEL_205:
                        *v125 = v120;
                        v125[1] = v122;
                        *((_QWORD *)v125 + 1) = v124;
                      }
                    }
                  }
                  v21 = v104-- <= 2;
                  if (v21)
                    return;
                }
              }
            }
          }
          v11 = v10 >> 1;
          v12 = &i[4 * (v10 >> 1)];
          if ((unint64_t)v9 < 0x801)
          {
          }
          else
          {
            v139 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v139;
          }
          --a3;
          v13 = *a1;
          if ((a4 & 1) == 0)
          {
            v14 = *(a1 - 4);
            if (v14 == v13)
            {
              v15 = *(a1 - 3);
              v16 = a1[1];
              if (v15 == v16)
              {
                if (*(a1 - 2) > a1[2])
                  goto LABEL_16;
                v16 = *(a1 - 3);
              }
              else if (v15 > v16)
              {
                goto LABEL_16;
              }
            }
            else
            {
              if (v14 > v13)
                goto LABEL_16;
              v16 = a1[1];
            }
            v37 = *((_QWORD *)a1 + 1);
            v38 = *(a2 - 4);
            v39 = v13 <= v38;
            if (v13 == v38)
            {
              v40 = *(a2 - 3);
              v39 = v16 <= v40;
              if (v16 == v40)
                v39 = (int)v37 <= *(a2 - 2);
            }
            if (v39)
            {
              for (i = a1 + 4; i < a2; i += 4)
              {
                v43 = v13 <= *i;
                if (v13 == *i)
                {
                  v44 = i[1];
                  v43 = v16 <= v44;
                  if (v16 == v44)
                    v43 = (int)v37 <= i[2];
                }
                if (!v43)
                  break;
              }
            }
            else
            {
              for (i = a1 + 4; ; i += 4)
              {
                v41 = v13 <= *i;
                if (v13 == *i)
                {
                  v42 = i[1];
                  v41 = v16 <= v42;
                  if (v16 == v42)
                    v41 = (int)v37 <= i[2];
                }
                if (!v41)
                  break;
              }
            }
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 4; ; j -= 4)
              {
                v46 = v13 <= v38;
                if (v13 == v38)
                {
                  v47 = j[1];
                  v46 = v16 <= v47;
                  if (v16 == v47)
                    v46 = (int)v37 <= j[2];
                }
                if (v46)
                  break;
                v48 = *(j - 4);
                v38 = v48;
              }
            }
            while (i < j)
            {
              v141 = *(_OWORD *)i;
              *(_OWORD *)i = *(_OWORD *)j;
              *(_OWORD *)j = v141;
              do
              {
                v49 = i[4];
                i += 4;
                v50 = v13 <= v49;
                if (v13 == v49)
                {
                  v51 = i[1];
                  v50 = v16 <= v51;
                  if (v16 == v51)
                    v50 = (int)v37 <= i[2];
                }
              }
              while (v50);
              do
              {
                v52 = *(j - 4);
                j -= 4;
                v53 = v13 <= v52;
                if (v13 == v52)
                {
                  v54 = j[1];
                  v53 = v16 <= v54;
                  if (v16 == v54)
                    v53 = (int)v37 <= j[2];
                }
              }
              while (!v53);
            }
            if (i - 4 != a1)
              *(_OWORD *)a1 = *((_OWORD *)i - 1);
            a4 = 0;
            *(i - 4) = v13;
            *(i - 3) = v16;
            *((_QWORD *)i - 1) = v37;
            continue;
          }
LABEL_16:
          v17 = 0;
          v18 = a1[1];
          v19 = *((_QWORD *)a1 + 1);
          while (1)
          {
            v20 = a1[v17 + 4];
            v21 = v20 <= v13;
            if (v20 == v13)
            {
              v22 = a1[v17 + 5];
              v21 = v22 <= v18;
              if (v22 == v18)
                v21 = a1[v17 + 6] <= (int)v19;
            }
            if (v21)
              break;
            v17 += 4;
          }
          v23 = (unint64_t)&a1[v17 + 4];
          k = a2 - 4;
          if (v17 * 4)
          {
            while (1)
            {
              v25 = *k <= v13;
              if (*k == v13)
              {
                v26 = k[1];
                v25 = v26 <= v18;
                if (v26 == v18)
                  v25 = k[2] <= (int)v19;
              }
              if (!v25)
                break;
              k -= 4;
            }
          }
          else
          {
            k = a2;
            if (v23 < (unint64_t)a2)
            {
              for (k = a2 - 4; ; k -= 4)
              {
                if (*k == v13)
                {
                  v27 = k[1];
                  if (v27 == v18)
                  {
                    if (v23 >= (unint64_t)k || k[2] > (int)v19)
                      break;
                  }
                  else if (v23 >= (unint64_t)k || v27 > v18)
                  {
                    break;
                  }
                }
                else if (*k > v13 || v23 >= (unint64_t)k)
                {
                  break;
                }
              }
            }
          }
          i = (int *)v23;
          if (v23 < (unint64_t)k)
          {
            v29 = k;
            do
            {
              v140 = *(_OWORD *)i;
              *(_OWORD *)i = *(_OWORD *)v29;
              *(_OWORD *)v29 = v140;
              do
              {
                v30 = i[4];
                i += 4;
                v31 = v30 <= v13;
                if (v30 == v13)
                {
                  v32 = i[1];
                  v31 = v32 <= v18;
                  if (v32 == v18)
                    v31 = i[2] <= (int)v19;
                }
              }
              while (!v31);
              do
              {
                v33 = *(v29 - 4);
                v29 -= 4;
                v34 = v33 <= v13;
                if (v33 == v13)
                {
                  v35 = v29[1];
                  v34 = v35 <= v18;
                  if (v35 == v18)
                    v34 = v29[2] <= (int)v19;
                }
              }
              while (v34);
            }
            while (i < v29);
          }
          if (i - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)i - 1);
          *(i - 4) = v13;
          *(i - 3) = v18;
          *((_QWORD *)i - 1) = v19;
          if (v23 < (unint64_t)k)
          {
LABEL_63:
            a4 = 0;
            continue;
          }
          {
            if (v36)
              continue;
            goto LABEL_63;
          }
          a2 = i - 4;
          if (v36)
            return;
          goto LABEL_1;
        }
        v60 = i + 4;
        v62 = i == a2 || v60 == a2;
        if ((a4 & 1) == 0)
        {
          if (v62)
            return;
          while (1)
          {
            v129 = a1;
            a1 = v60;
            v130 = v129[4];
            if (v130 == *v129)
              break;
            if (v130 > *v129)
            {
              v131 = v129[5];
LABEL_218:
              v134 = *((_QWORD *)v129 + 3);
              do
              {
                v135 = v129;
                *((_OWORD *)v129 + 1) = *(_OWORD *)v129;
                v136 = *(v129 - 4);
                v129 -= 4;
                v137 = v130 <= v136;
                if (v130 == v136)
                {
                  v138 = *(v135 - 3);
                  v137 = v131 <= v138;
                  if (v131 == v138)
                    v137 = (int)v134 <= *(v135 - 2);
                }
              }
              while (!v137);
              *v135 = v130;
              v135[1] = v131;
              *((_QWORD *)v135 + 1) = v134;
            }
LABEL_225:
            v60 = a1 + 4;
            if (a1 + 4 == a2)
              return;
          }
          v131 = v129[5];
          v132 = v129[1];
          v133 = v131 <= v132;
          if (v131 == v132)
            v133 = v129[6] <= v129[2];
          if (v133)
            goto LABEL_225;
          goto LABEL_218;
        }
        if (v62)
          return;
        v63 = 0;
        v64 = i;
        do
        {
          v65 = v64;
          v64 = v60;
          v66 = v65[4];
          if (v66 == *v65)
          {
            v67 = v65[5];
            v68 = v65[1];
            v69 = v67 <= v68;
            if (v67 == v68)
              v69 = v65[6] <= v65[2];
            if (v69)
              goto LABEL_145;
          }
          else
          {
            if (v66 <= *v65)
              goto LABEL_145;
            v67 = v65[5];
          }
          v70 = *((_QWORD *)v65 + 3);
          *(_OWORD *)v64 = *(_OWORD *)v65;
          v71 = i;
          if (v65 == i)
            goto LABEL_144;
          v72 = v63;
          while (1)
          {
            v73 = (_OWORD *)((char *)i + v72);
            v74 = *(int *)((char *)i + v72 - 16);
            v75 = v66 <= v74;
            if (v66 != v74)
              goto LABEL_137;
            v76 = *((_DWORD *)v73 - 3);
            if (v67 == v76)
            {
              v75 = (int)v70 <= *(int *)((char *)i + v72 - 8);
LABEL_137:
              if (v75)
              {
                v71 = v65;
                goto LABEL_144;
              }
              goto LABEL_141;
            }
            if (v67 <= v76)
              break;
LABEL_141:
            v65 -= 4;
            *v73 = *(_OWORD *)((char *)i + v72 - 16);
            v72 -= 16;
            if (!v72)
            {
              v71 = i;
              goto LABEL_144;
            }
          }
          v71 = (int *)((char *)i + v72);
LABEL_144:
          *v71 = v66;
          v71[1] = v67;
          *((_QWORD *)v71 + 1) = v70;
LABEL_145:
          v60 = v64 + 4;
          v63 += 16;
        }
        while (v64 + 4 != a2);
        return;
    }
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,0>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a2, a3, a4, a6);
  v12 = *a6;
  v36 = *a5;
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13)
    goto LABEL_15;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, &v36);
  v15 = *a6;
  v36 = *a4;
  v16 = *(_QWORD *)(v15 + 24);
  if (!v16)
    goto LABEL_15;
  if (v14 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v36))
    return;
  v17 = *a4;
  *a4 = *a5;
  *a5 = v17;
  v18 = *a6;
  v36 = *a4;
  v19 = *(_QWORD *)(v18 + 24);
  if (!v19)
    goto LABEL_15;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v19 + 48))(v19, &v36);
  v21 = *a6;
  v36 = *a3;
  v22 = *(_QWORD *)(v21 + 24);
  if (!v22)
    goto LABEL_15;
  if (v20 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v22 + 48))(v22, &v36))
    return;
  v23 = *a3;
  *a3 = *a4;
  *a4 = v23;
  v24 = *a6;
  v36 = *a3;
  v25 = *(_QWORD *)(v24 + 24);
  if (!v25)
    goto LABEL_15;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v25 + 48))(v25, &v36);
  v27 = *a6;
  v36 = *a2;
  v28 = *(_QWORD *)(v27 + 24);
  if (!v28)
    goto LABEL_15;
  if (v26 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v28 + 48))(v28, &v36))
    return;
  v29 = *a2;
  *a2 = *a3;
  *a3 = v29;
  v30 = *a6;
  v36 = *a2;
  v31 = *(_QWORD *)(v30 + 24);
  if (!v31
    || ((*(void (**)(uint64_t, int *))(*(_QWORD *)v31 + 48))(v31, &v36),
        v33 = *a6,
        v36 = *a1,
        (v34 = *(_QWORD *)(v33 + 24)) == 0))
  {
LABEL_15:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v32 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v34 + 48))(v34, &v36))
  {
    v35 = *a1;
    *a1 = *a2;
    *a2 = v35;
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v5 = *a4;
  v39 = *a2;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_21;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 48))(v6, &v39);
  v11 = *a4;
  v39 = *a1;
  v12 = *(_QWORD *)(v11 + 24);
  if (!v12)
    goto LABEL_21;
  v13 = v10;
  v14 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v39);
  v15 = *a4;
  if (v13 < v14)
  {
    v39 = *a3;
    v16 = *(_QWORD *)(v15 + 24);
    if (v16)
    {
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v39);
      v18 = *a4;
      v39 = *a2;
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
      {
        v20 = v17;
        v21 = (*(float (**)(uint64_t, int *))(*(_QWORD *)v19 + 48))(v19, &v39);
        v22 = *a1;
        if (v20 < v21)
        {
          *a1 = *a3;
LABEL_19:
          *a3 = v22;
          return;
        }
        *a1 = *a2;
        *a2 = v22;
        v34 = *a4;
        v39 = *a3;
        v35 = *(_QWORD *)(v34 + 24);
        if (v35)
        {
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v35 + 48))(v35, &v39);
          v37 = *a4;
          v39 = *a2;
          v38 = *(_QWORD *)(v37 + 24);
          if (v38)
          {
            if (v36 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v38 + 48))(v38, &v39))
              return;
            v22 = *a2;
            *a2 = *a3;
            goto LABEL_19;
          }
        }
      }
    }
LABEL_21:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v39 = *a3;
  v23 = *(_QWORD *)(v15 + 24);
  if (!v23)
    goto LABEL_21;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v23 + 48))(v23, &v39);
  v25 = *a4;
  v39 = *a2;
  v26 = *(_QWORD *)(v25 + 24);
  if (!v26)
    goto LABEL_21;
  if (v24 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v26 + 48))(v26, &v39))
    return;
  v27 = *a2;
  *a2 = *a3;
  *a3 = v27;
  v28 = *a4;
  v39 = *a2;
  v29 = *(_QWORD *)(v28 + 24);
  if (!v29)
    goto LABEL_21;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v29 + 48))(v29, &v39);
  v31 = *a4;
  v39 = *a1;
  v32 = *(_QWORD *)(v31 + 24);
  if (!v32)
    goto LABEL_21;
  if (v30 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v32 + 48))(v32, &v39))
  {
    v33 = *a1;
    *a1 = *a2;
    *a2 = v33;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a3;
      v31 = *(a2 - 1);
      v9 = *(_QWORD *)(v8 + 24);
      if (!v9)
        goto LABEL_26;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v31);
      v11 = *a3;
      v31 = *a1;
      v12 = *(_QWORD *)(v11 + 24);
      if (!v12)
        goto LABEL_26;
      if (v10 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v31))
      {
        v13 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v13;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v14 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a3);
      v15 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    v18 = *a3;
    v31 = *v15;
    v19 = *(_QWORD *)(v18 + 24);
    if (!v19
      || ((*(void (**)(uint64_t, int *))(*(_QWORD *)v19 + 48))(v19, &v31),
          v21 = *a3,
          v31 = *v14,
          (v22 = *(_QWORD *)(v21 + 24)) == 0))
    {
LABEL_26:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if (v20 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v22 + 48))(v22, &v31))
    {
      v23 = *v15;
      v24 = v16;
      while (1)
      {
        *(int *)((char *)a1 + v24 + 12) = *(int *)((char *)a1 + v24 + 8);
        if (v24 == -8)
          break;
        v25 = *a3;
        v31 = v23;
        v26 = *(_QWORD *)(v25 + 24);
        if (!v26)
          goto LABEL_26;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v26 + 48))(v26, &v31);
        v28 = *a3;
        v31 = *(int *)((char *)a1 + v24 + 4);
        v29 = *(_QWORD *)(v28 + 24);
        if (!v29)
          goto LABEL_26;
        v24 -= 4;
        if (v27 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v29 + 48))(v29, &v31))
        {
          v30 = (int *)((char *)a1 + v24 + 12);
          goto LABEL_18;
        }
      }
      v30 = a1;
LABEL_18:
      *v30 = v23;
      if (++v17 == 8)
        return v15 + 1 == a2;
    }
    v14 = v15;
    v16 += 4;
    if (++v15 == a2)
      return 1;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x22E2CAAE8);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,NonMaximumSuppression(std::function<float ()(int)> const&,int,std::function<float ()(int,int)> const&,float)::$_0 &,int *>(a1, a2, a3, a5);
  v10 = *a5;
  v28 = *a4;
  v11 = *(_QWORD *)(v10 + 24);
  if (!v11)
    goto LABEL_12;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 48))(v11, &v28);
  v13 = *a5;
  v28 = *a3;
  v14 = *(_QWORD *)(v13 + 24);
  if (!v14)
    goto LABEL_12;
  if (v12 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v28))
    return;
  v15 = *a3;
  *a3 = *a4;
  *a4 = v15;
  v16 = *a5;
  v28 = *a3;
  v17 = *(_QWORD *)(v16 + 24);
  if (!v17)
    goto LABEL_12;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v17 + 48))(v17, &v28);
  v19 = *a5;
  v28 = *a2;
  v20 = *(_QWORD *)(v19 + 24);
  if (!v20)
    goto LABEL_12;
  if (v18 >= (*(float (**)(uint64_t, int *))(*(_QWORD *)v20 + 48))(v20, &v28))
    return;
  v21 = *a2;
  *a2 = *a3;
  *a3 = v21;
  v22 = *a5;
  v28 = *a2;
  v23 = *(_QWORD *)(v22 + 24);
  if (!v23
    || ((*(void (**)(uint64_t, int *))(*(_QWORD *)v23 + 48))(v23, &v28),
        v25 = *a5,
        v28 = *a1,
        (v26 = *(_QWORD *)(v25 + 24)) == 0))
  {
LABEL_12:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v24 < (*(float (**)(uint64_t, int *))(*(_QWORD *)v26 + 48))(v26, &v28))
  {
    v27 = *a1;
    *a1 = *a2;
    *a2 = v27;
  }
}

int *std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,int *,false>(int *result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  BOOL v32;
  uint64_t v33;
  int *v34;
  int *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  int *v62;
  int64_t v63;
  uint64_t *v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t *v80;
  int *v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  int *v92;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 1);
        v43 = *v10;
        if (*(float *)(**a3 + 4 * v42) < *(float *)(**a3 + 4 * v43))
        {
          *v10 = v42;
          *(a2 - 1) = v43;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        v44 = v10 + 2;
        v45 = v10 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v46 = *(a2 - 1);
        v47 = v10[3];
        v48 = **a3;
        if (*(float *)(v48 + 4 * v46) < *(float *)(v48 + 4 * v47))
        {
          *v45 = v46;
          *(a2 - 1) = v47;
          v49 = *v45;
          v50 = *v44;
          v51 = *(float *)(v48 + 4 * v49);
          if (v51 < *(float *)(v48 + 4 * v50))
          {
            *v44 = v49;
            *v45 = v50;
            v52 = v10[1];
            if (v51 < *(float *)(v48 + 4 * v52))
            {
              v10[1] = v49;
              v10[2] = v52;
              v53 = *v10;
              if (v51 < *(float *)(v48 + 4 * v53))
              {
                *v10 = v49;
                v10[1] = v53;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v54 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v55 = 0;
                v56 = **a3;
                v57 = v10;
                do
                {
                  v59 = *v57;
                  v58 = v57[1];
                  v57 = v54;
                  v60 = *(float *)(v56 + 4 * v58);
                  if (v60 < *(float *)(v56 + 4 * v59))
                  {
                    v61 = v55;
                    while (1)
                    {
                      *(int *)((char *)v10 + v61 + 4) = v59;
                      if (!v61)
                        break;
                      v59 = *(int *)((char *)v10 + v61 - 4);
                      v61 -= 4;
                      if (v60 >= *(float *)(v56 + 4 * v59))
                      {
                        v62 = (int *)((char *)v10 + v61 + 4);
                        goto LABEL_75;
                      }
                    }
                    v62 = v10;
LABEL_75:
                    *v62 = v58;
                  }
                  v54 = v57 + 1;
                  v55 += 4;
                }
                while (v57 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v94 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v95 = **a3;
              do
              {
                v97 = *v9;
                v96 = v9[1];
                v9 = v94;
                v98 = *(float *)(v95 + 4 * v96);
                if (v98 < *(float *)(v95 + 4 * v97))
                {
                  do
                  {
                    *v94 = v97;
                    v97 = *(v94 - 2);
                    --v94;
                  }
                  while (v98 < *(float *)(v95 + 4 * v97));
                  *v94 = v96;
                }
                v94 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v63 = (v12 - 2) >> 1;
            v64 = *a3;
            v65 = v63;
            do
            {
              v66 = v65;
              if (v63 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = &v10[v67];
                v69 = 2 * v65 + 2;
                v70 = *v64;
                if (v69 < (uint64_t)v12 && *(float *)(v70 + 4 * *v68) < *(float *)(v70 + 4 * v68[1]))
                {
                  ++v68;
                  v67 = 2 * v66 + 2;
                }
                result = &v10[v66];
                v71 = *v68;
                v72 = *result;
                v73 = *(float *)(v70 + 4 * v72);
                if (*(float *)(v70 + 4 * v71) >= v73)
                {
                  do
                  {
                    v74 = v68;
                    *result = v71;
                    if (v63 < v67)
                      break;
                    v75 = 2 * v67;
                    v67 = (2 * v67) | 1;
                    v68 = &v10[v67];
                    v76 = v75 + 2;
                    if (v76 < (uint64_t)v12 && *(float *)(v70 + 4 * *v68) < *(float *)(v70 + 4 * v68[1]))
                    {
                      ++v68;
                      v67 = v76;
                    }
                    v71 = *v68;
                    result = v74;
                  }
                  while (*(float *)(v70 + 4 * v71) >= v73);
                  *v74 = v72;
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v77 = (unint64_t)v11 >> 2;
            do
            {
              v78 = 0;
              v79 = *v10;
              v80 = *a3;
              v81 = v10;
              do
              {
                v82 = v81;
                v81 += v78 + 1;
                v83 = 2 * v78;
                v78 = (2 * v78) | 1;
                v84 = v83 + 2;
                if (v84 < v77)
                {
                  result = (int *)v81[1];
                  if (*(float *)(*v80 + 4 * *v81) < *(float *)(*v80 + 4 * (_QWORD)result))
                  {
                    ++v81;
                    v78 = v84;
                  }
                }
                *v82 = *v81;
              }
              while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              if (v81 == --a2)
              {
                *v81 = v79;
              }
              else
              {
                *v81 = *a2;
                *a2 = v79;
                v85 = (char *)v81 - (char *)v10 + 4;
                if (v85 >= 5)
                {
                  v86 = (((unint64_t)v85 >> 2) - 2) >> 1;
                  v87 = &v10[v86];
                  v88 = *v87;
                  v89 = *v81;
                  v90 = *v80;
                  v91 = *(float *)(v90 + 4 * v89);
                  if (*(float *)(v90 + 4 * v88) < v91)
                  {
                    do
                    {
                      v92 = v87;
                      *v81 = v88;
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = &v10[v86];
                      v88 = *v87;
                      v81 = v92;
                    }
                    while (*(float *)(v90 + 4 * v88) < v91);
                    *v92 = v89;
                  }
                }
              }
            }
            while (v77-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x201)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(&v9[v12 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v9, &v9[v12 >> 1], a2 - 1, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v9 + 1, v14 - 1, a2 - 2, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = **a3;
        if ((a5 & 1) == 0)
        {
          v18 = *(float *)(v17 + 4 * v16);
          if (*(float *)(v17 + 4 * *(v9 - 1)) < v18)
            goto LABEL_12;
          if (v18 >= *(float *)(v17 + 4 * *(a2 - 1)))
          {
            v34 = v9 + 1;
            do
            {
              v10 = v34;
              if (v34 >= a2)
                break;
              ++v34;
            }
            while (v18 >= *(float *)(v17 + 4 * *v10));
          }
          else
          {
            v10 = v9;
            do
            {
              v33 = v10[1];
              ++v10;
            }
            while (v18 >= *(float *)(v17 + 4 * v33));
          }
          v35 = a2;
          if (v10 < a2)
          {
            v35 = a2;
            do
              v36 = *--v35;
            while (v18 < *(float *)(v17 + 4 * v36));
          }
          if (v10 < v35)
          {
            v37 = *v10;
            v38 = *v35;
            do
            {
              *v10 = v38;
              *v35 = v37;
              do
              {
                v39 = v10[1];
                ++v10;
                v37 = v39;
              }
              while (v18 >= *(float *)(v17 + 4 * v39));
              do
              {
                v40 = *--v35;
                v38 = v40;
              }
              while (v18 < *(float *)(v17 + 4 * v40));
            }
            while (v10 < v35);
          }
          v41 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v41;
          a5 = 0;
          *v41 = v16;
          continue;
        }
        v18 = *(float *)(v17 + 4 * v16);
LABEL_12:
        v19 = 0;
        do
          v20 = v9[++v19];
        while (*(float *)(v17 + 4 * v20) < v18);
        v21 = &v9[v19];
        v22 = a2;
        if (v19 == 1)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v24 = *--v22;
          }
          while (*(float *)(v17 + 4 * v24) >= v18);
        }
        else
        {
          do
            v23 = *--v22;
          while (*(float *)(v17 + 4 * v23) >= v18);
        }
        if (v21 >= v22)
        {
          v31 = v21 - 1;
        }
        else
        {
          v25 = *v22;
          v26 = v20;
          v27 = &v9[v19];
          v28 = v22;
          do
          {
            *v27 = v25;
            *v28 = v26;
            do
            {
              v29 = v27[1];
              ++v27;
              v26 = v29;
            }
            while (*(float *)(v17 + 4 * v29) < v18);
            do
            {
              v30 = *--v28;
              v25 = v30;
            }
            while (*(float *)(v17 + 4 * v30) >= v18);
          }
          while (v27 < v28);
          v31 = v27 - 1;
        }
        if (v31 != v9)
          *v9 = *v31;
        *v31 = v16;
        if (v21 < v22)
        {
LABEL_33:
          a5 = 0;
          v10 = v31 + 1;
          continue;
        }
        v10 = v31 + 1;
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v31;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,`anonymous namespace'::sortIndices(std::vector<float> const&)::$_0 &,int *>(int *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**a3 + 4 * v8) < *(float *)(**a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 2;
      v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = a1[3];
      v25 = **a3;
      if (*(float *)(v25 + 4 * v23) < *(float *)(v25 + 4 * v24))
      {
        *v22 = v23;
        *(a2 - 1) = v24;
        v26 = *v22;
        v27 = *v21;
        v28 = *(float *)(v25 + 4 * v26);
        if (v28 < *(float *)(v25 + 4 * v27))
        {
          *v21 = v26;
          *v22 = v27;
          v29 = a1[1];
          if (v28 < *(float *)(v25 + 4 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            v30 = *a1;
            if (v28 < *(float *)(v25 + 4 * v30))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dor::CadModelRetriever::SortByDistance(std::vector<unsigned short> const&,std::array<float,256ul> const&)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 4 * v15);
    if (v17 < *(float *)(v13 + 4 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 >= *(float *)(v13 + 4 * v16))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

void std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::fstream::open(std::fstream *this, const std::string *__s, std::ios_base::openmode __mode)
{
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base::iostate v6;

  v4 = std::filebuf::open();
  v5 = (std::ios_base *)((char *)this + *((_QWORD *)this->__sb_.__extbuf_ - 3));
  if (v4)
    v6 = 0;
  else
    v6 = v5->__rdstate_ | 4;
  std::ios_base::clear(v5, v6);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x22E2CA944](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x22E2CAA7C](v2);
  return a1;
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  _QWORD *v1;

  v1 = a1 + 54;
  MEMORY[0x22E2CA944](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x22E2CAA7C](v1);
  JUMPOUT(0x22E2CAAE8);
}

void `non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x22E2CA944](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x22E2CAA7CLL);
}

{
  _QWORD *v1;

  v1 = a1 + 52;
  MEMORY[0x22E2CA944](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x22E2CAA7C](v1);
  JUMPOUT(0x22E2CAAE8);
}

void `virtual thunk to'std::fstream::~fstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x22E2CA944](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x22E2CAA7CLL);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x22E2CA944](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x22E2CAA7C](v1 + 54);
  JUMPOUT(0x22E2CAAE8);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x22E2CA980](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x22E2CA98C](v13);
  return a1;
}

void sub_22951A618(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x22E2CA98C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x22951A5F8);
}

void sub_22951A660(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_22951A794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::~__func()
{
  JUMPOUT(0x22E2CAAE8);
}

_QWORD *std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F243498;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F243498;
  a2[1] = v2;
  return result;
}

float std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3[1] - *v3) >> 5) <= v2)
    std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
  return *(float *)(*v3 + 224 * (int)v2 + 136);
}

uint64_t std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x22E2CAAE8);
}

__n128 std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F243528;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F243528;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::operator()(uint64_t result, int *a2, int *a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *a2;
  v4 = *(uint64_t **)(result + 8);
  v5 = *v4;
  v6 = 0x6DB6DB6DB6DB6DB7 * ((v4[1] - *v4) >> 5);
  if (v6 <= v3 || (v7 = *a3, v6 <= v7))
    std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
  if (*(_QWORD *)(v5 + 224 * (int)v3 + 128) == *(_QWORD *)(v5 + 224 * (int)v7 + 128))
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(v5 + 224 * (int)v3, v5 + 224 * (int)v7);
  return result;
}

uint64_t std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsSameCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::target_type()
{
}

void std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::~__func()
{
  JUMPOUT(0x22E2CAAE8);
}

_QWORD *std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F2435B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F2435B8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3[1] - *v3) >> 5) <= v2)
    std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
  return *(float *)(*v3 + 224 * (int)v2 + 136);
}

uint64_t std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_0>,float ()(int)>::target_type()
{
}

void std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x22E2CAAE8);
}

__n128 std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F243638;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F243638;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[1] - *v5) >> 5);
  if (v6 <= v4 || (v7 = *a3, v6 <= v7))
    std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 16))(*v5 + 224 * (int)v4, *v5 + 224 * (int)v7);
}

uint64_t std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1,std::allocator<nmsAgnosticCls(std::vector<OUBox3d> *,float,float (*)(box3d const&,box3d const&))::$_1>,float ()(int,int)>::target_type()
{
}

void OUTLINED_FUNCTION_0_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void _GLOBAL__sub_I_OUBoxUtils_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x22E2CB070]();
  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.ObjectUnderstandingTests"));
  ObjectUnderstandingTest::Bundle = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

void OUDataLoader::OUDataLoader(std::string *this, __int128 *a2)
{
  __int128 v3;
  std::string *v4;
  uint64_t v5;
  id v6;
  unsigned __int8 *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t i;
  int v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  std::string *v27;
  id v28;
  unint64_t *v29;
  unint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  char *v39;
  _BYTE *v40;
  _BYTE *v41;
  char v42;
  int v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  _WORD *v50;
  int *v53;
  int v56;
  int v57;
  _BYTE *v59;
  void *v63;
  std::logic_error *exception;
  void *v65;
  void *v66;
  std::string::size_type v67;
  std::string::size_type v68;
  uint64_t v69;
  std::string *v70;
  std::string *v71;
  const void **v72;
  id v73;
  unint64_t v74;
  id obj;
  void *v76;
  id v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  std::string v87;
  _BYTE v88[128];
  _BYTE v89[128];
  std::string __p[5];
  uint64_t v91;
  _QWORD v92[21];

  v92[19] = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 1065353216;
  v70 = this + 1;
  v4 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  v71 = this;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%s/metadata.json"), v4);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:");
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v74 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v89, 16);
  if (v74)
  {
    v78 = 0;
    v5 = *(_QWORD *)v84;
    v68 = *MEMORY[0x24BEDB7E0];
    v67 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
    v69 = *(_QWORD *)v84;
    while (1)
    {
      if (v5 != v69)
        objc_enumerationMutation(obj);
      v6 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v83 + 1) + 8 * v78));
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v6, "UTF8String"));
      v87.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      v7 = std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v70, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v87);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      objc_msgSend(obj, "objectForKey:", v6);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "objectForKey:", CFSTR("type"));
      v77 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v72 = (const void **)(v7 + 40);
      std::string::__assign_external((std::string *)(v7 + 40), (const std::string::value_type *)objc_msgSend(v77, "UTF8String"));
      objc_msgSend(v76, "objectForKey:", CFSTR("shape"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v73 = v6;
      *((_QWORD *)v7 + 11) = 1;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v9 = v8;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v79, v88, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v80;
        v12 = (void **)(v7 + 64);
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v80 != v11)
              objc_enumerationMutation(v9);
            v14 = objc_msgSend(*(id *)(*((_QWORD *)&v79 + 1) + 8 * i), "intValue");
            v15 = v14;
            v17 = (char *)*((_QWORD *)v7 + 9);
            v16 = *((_QWORD *)v7 + 10);
            if ((unint64_t)v17 >= v16)
            {
              v19 = (char *)*v12;
              v20 = (v17 - (_BYTE *)*v12) >> 3;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v22 = v16 - (_QWORD)v19;
              if (v22 >> 2 > v21)
                v21 = v22 >> 2;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
                v23 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23)
              {
                v24 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v7 + 80), v23);
                v19 = (char *)*((_QWORD *)v7 + 8);
                v17 = (char *)*((_QWORD *)v7 + 9);
              }
              else
              {
                v24 = 0;
              }
              v25 = &v24[8 * v20];
              *(_QWORD *)v25 = v15;
              v18 = v25 + 8;
              while (v17 != v19)
              {
                v26 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *((_QWORD *)v25 - 1) = v26;
                v25 -= 8;
              }
              *((_QWORD *)v7 + 8) = v25;
              *((_QWORD *)v7 + 9) = v18;
              *((_QWORD *)v7 + 10) = &v24[8 * v23];
              if (v19)
                operator delete(v19);
            }
            else
            {
              *(_QWORD *)v17 = v14;
              v18 = v17 + 8;
            }
            *((_QWORD *)v7 + 9) = v18;
            *((_QWORD *)v7 + 11) *= v15;
          }
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v79, v88, 16);
        }
        while (v10);
      }

      v27 = v71;
      if (SHIBYTE(v71->__r_.__value_.__r.__words[2]) < 0)
        v27 = (std::string *)v71->__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%s/%@.bin"), v27, v73);
      v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v28, "UTF8String");
      std::ifstream::basic_ifstream(__p);
      if (v91)
      {
        v29 = (unint64_t *)(v7 + 96);
        v87.__r_.__value_.__s.__data_[0] = 0;
        while (std::istream::peek() != -1)
        {
          std::istream::read();
          v31 = (_BYTE *)*((_QWORD *)v7 + 13);
          v30 = *((_QWORD *)v7 + 14);
          if ((unint64_t)v31 >= v30)
          {
            v33 = *v29;
            v34 = &v31[-*v29];
            v35 = (unint64_t)(v34 + 1);
            if ((uint64_t)(v34 + 1) < 0)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v36 = v30 - v33;
            if (2 * v36 > v35)
              v35 = 2 * v36;
            if (v36 >= 0x3FFFFFFFFFFFFFFFLL)
              v37 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
              v38 = (char *)operator new(v37);
            else
              v38 = 0;
            v39 = &v34[(_QWORD)v38];
            v40 = &v34[(_QWORD)v38];
            *v40 = v87.__r_.__value_.__s.__data_[0];
            v32 = v40 + 1;
            if (v31 != (_BYTE *)v33)
            {
              v41 = &v31[~v33];
              do
              {
                v42 = *--v31;
                (v41--)[(_QWORD)v38] = v42;
              }
              while (v31 != (_BYTE *)v33);
              v31 = (_BYTE *)*v29;
              v39 = v38;
            }
            *((_QWORD *)v7 + 12) = v39;
            *((_QWORD *)v7 + 13) = v32;
            *((_QWORD *)v7 + 14) = &v38[v37];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *v31 = v87.__r_.__value_.__s.__data_[0];
            v32 = v31 + 1;
          }
          *((_QWORD *)v7 + 13) = v32;
        }
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1]+ *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) | 4);
      }
      __p[0].__r_.__value_.__r.__words[0] = v68;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(_QWORD *)(v68 - 24)) = v67;
      MEMORY[0x22E2CA944](&__p[0].__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x22E2CAA7C](v92);

      v43 = (char)v7[63];
      if (v43 >= 0)
        v44 = v7[63];
      else
        v44 = *((_QWORD *)v7 + 6);
      v46 = *((_QWORD *)v7 + 12);
      v45 = *((_QWORD *)v7 + 13);
      v47 = *((_QWORD *)v7 + 11);
      switch(v44)
      {
        case 4uLL:
          if (v43 >= 0)
            v48 = v72;
          else
            v48 = *v72;
          if (!memcmp(v48, "int8", v44))
            goto LABEL_68;
          goto LABEL_127;
        case 5uLL:
          if (v43 >= 0)
            v59 = v72;
          else
            v59 = *v72;
          if (*(_DWORD *)v59 == 913600105 && v59[4] == 52)
            goto LABEL_115;
          if (*(_DWORD *)v59 == 863268457 && v59[4] == 50)
            goto LABEL_117;
          if (!memcmp(v59, "int16", v44))
            goto LABEL_116;
          if (*(_DWORD *)v59 != 1953393013 || v59[4] != 56)
            goto LABEL_127;
LABEL_68:
          v49 = 1;
          break;
        case 6uLL:
          if (v43 >= 0)
            v50 = v72;
          else
            v50 = *v72;
          if (*(_DWORD *)v50 == 1953393013 && v50[2] == 13366)
            goto LABEL_115;
          if (*(_DWORD *)v50 == 1953393013 && v50[2] == 12851)
            goto LABEL_117;
          if (memcmp(v50, "uint16", v44))
            goto LABEL_127;
          goto LABEL_116;
        case 7uLL:
          if (v43 >= 0)
            v53 = (int *)v72;
          else
            v53 = (int *)*v72;
          if (*v53 == 1634692198 && *(int *)((char *)v53 + 3) == 875983969)
          {
LABEL_115:
            v49 = 8;
          }
          else if (*v53 == 1634692198 && *(int *)((char *)v53 + 3) == 842232929)
          {
LABEL_117:
            v49 = 4;
          }
          else
          {
            v56 = *v53;
            v57 = *(int *)((char *)v53 + 3);
            if (v56 != 1634692198 || v57 != 909210721)
            {
LABEL_127:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(") .", &v87, __p);
              std::logic_error::logic_error(exception, __p);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
              __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
            }
LABEL_116:
            v49 = 2;
          }
          break;
        default:
          goto LABEL_127;
      }
      if (v45 - v46 != v49 * v47)
      {
        v63 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x22E2CA890](v63, "[OUDataLoader] mismatching data size; bin file might be corrupted.");
        __cxa_throw(v63, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }

      if (++v78 >= v74)
      {
        v74 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v83, v89, 16);
        if (!v74)
          break;
        v78 = 0;
      }
      v5 = *(_QWORD *)v84;
    }
  }

}

void sub_22951B5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{

  std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::~__hash_table(a17);
  if (*(char *)(a18 + 23) < 0)
    operator delete(*(void **)a18);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDataLoader::DataArray>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDataLoader::DataArray>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (char *)operator new(0x78uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)v17 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_22951B9BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDataLoader::DataArray>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDataLoader::DataArray>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_22951BAEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x22E2CAA7C](v1 + 424);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_OUDataLoader_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x22E2CB070]();
  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.ObjectUnderstandingTests"));
  ObjectUnderstandingTest::Bundle = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v0);
}

uint64_t std::vector<int>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void ou3dod::OU3DSparseSSDetector::createForEspressoCPU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v3;
  int *v4;
  int *i;
  uint64_t j;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  std::vector<int>::size_type v19;
  std::vector<int>::pointer begin;
  std::string::size_type size;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::pointer data;
  std::string::size_type v33;
  __int128 v34;
  int64x2_t v35;
  std::string::size_type v36;
  uint64_t k;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  std::vector<int>::pointer v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int64x2_t v56;
  std::string::size_type v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type v63;
  char *v64;
  std::string::size_type v65;
  void *exception;
  std::string __x;
  void *__p[2];
  uint64_t v72;
  std::vector<int> v73;
  std::string v74[2];
  int64x2_t v75;
  _QWORD v76[2];
  int *v77;
  int *v78;
  uint64_t v79;
  char *v80;
  int64x2_t v81;
  std::string::size_type v82;
  std::string::value_type *v83;

  v3 = *(_DWORD *)(a1 + 72);
  v77 = 0;
  v78 = 0;
  v79 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v77, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v4 = v77;
  for (i = v78; v4 != i; ++v4)
    *v4 = (v3 - 1 + *v4) / v3;
  v76[0] = 0;
  v75 = 0u;
  memset(v74, 0, sizeof(v74));
  std::string::__assign_external(v74, "sparse_voxelssd_cpu.espresso.net", 0x20uLL);
  for (j = qword_2540CA588; j; j = *(_QWORD *)j)
  {
    v7 = (uint64_t *)(j + 16);
    v8 = *(unsigned __int8 *)(j + 39);
    if ((v8 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(j + 39);
    else
      v9 = *(_QWORD *)(j + 24);
    if (v9 == 13
      && ((v8 & 0x80u) == 0 ? (v10 = (uint64_t *)(j + 16)) : (v10 = (uint64_t *)*v7),
          (v11 = *v10, v12 = *(uint64_t *)((char *)v10 + 5), v11 == 0x765F657372617073)
        ? (v13 = v12 == 0x736C65786F765F65)
        : (v13 = 0),
          v13))
    {
      v18 = 0;
      v19 = 3;
    }
    else
    {
      if ((v8 & 0x80) != 0)
      {
        v15 = *v7;
        v14 = (char *)(*v7 + 1);
        v8 = *(_QWORD *)(j + 24);
      }
      else
      {
        v14 = (char *)(j + 17);
        v15 = j + 16;
      }
      v16 = *v14;
      v17 = *(char *)(v15 + v8 - 1);
      switch(v17)
      {
        case '1':
          v18 = v16 - 48;
          break;
        case 'r':
          v18 = v16 - 49;
          break;
        case '2':
          v18 = v16 - 47;
          break;
        default:
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x22E2CA890](exception, "[3DOD IS] unexpected post-script.");
          __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      v19 = 5;
    }
    LODWORD(__x.__r_.__value_.__l.__data_) = -1;
    std::vector<int>::vector(&v73, v19, (const std::vector<int>::value_type *)&__x);
    begin = v73.__begin_;
    *v73.__begin_ = v77[v18];
    if (*(char *)(j + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&__x, *(const std::string::value_type **)(j + 16), *(_QWORD *)(j + 24));
      begin = v73.__begin_;
    }
    else
    {
      *(_OWORD *)&__x.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
      __x.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 32);
    }
    __p[0] = 0;
    __p[1] = 0;
    v72 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, begin, (uint64_t)v73.__end_, v73.__end_ - begin);
    size = v74[1].__r_.__value_.__l.__size_;
    if (v74[1].__r_.__value_.__l.__size_ >= v74[1].__r_.__value_.__r.__words[2])
    {
      v23 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(v74[1].__r_.__value_.__l.__size_ - v74[1].__r_.__value_.__r.__words[0]) >> 4);
      v24 = v23 + 1;
      if (v23 + 1 > 0x555555555555555)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556
         * ((uint64_t)(v74[1].__r_.__value_.__r.__words[2] - v74[1].__r_.__value_.__r.__words[0]) >> 4) > v24)
        v24 = 0x5555555555555556
            * ((uint64_t)(v74[1].__r_.__value_.__r.__words[2] - v74[1].__r_.__value_.__r.__words[0]) >> 4);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v74[1].__r_.__value_.__r.__words[2] - v74[1].__r_.__value_.__r.__words[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v25 = 0x555555555555555;
      else
        v25 = v24;
      v83 = &v74[1].__r_.__value_.__s.__data_[16];
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>((uint64_t)&v74[1].__r_.__value_.__r.__words[2], v25);
      v27 = &v26[48 * v23];
      v80 = v26;
      v81.i64[0] = (uint64_t)v27;
      v82 = (std::string::size_type)&v26[48 * v28];
      v29 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
      *((_QWORD *)v27 + 2) = *((_QWORD *)&__x.__r_.__value_.__l + 2);
      *(_OWORD *)v27 = v29;
      memset(&__x, 0, sizeof(__x));
      *((_QWORD *)v27 + 3) = 0;
      *((_QWORD *)v27 + 4) = 0;
      *((_QWORD *)v27 + 5) = 0;
      *(_OWORD *)(v27 + 24) = *(_OWORD *)__p;
      *((_QWORD *)v27 + 5) = v72;
      __p[0] = 0;
      __p[1] = 0;
      v72 = 0;
      v30 = (std::string::size_type)(v27 + 48);
      v81.i64[1] = (uint64_t)(v27 + 48);
      v31 = v74[1].__r_.__value_.__l.__size_;
      data = v74[1].__r_.__value_.__l.__data_;
      v33 = v81.i64[0];
      if (v74[1].__r_.__value_.__l.__size_ == v74[1].__r_.__value_.__r.__words[0])
      {
        v35 = vdupq_n_s64(v74[1].__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          v34 = *(_OWORD *)(v31 - 48);
          *(_QWORD *)(v33 - 32) = *(_QWORD *)(v31 - 32);
          *(_OWORD *)(v33 - 48) = v34;
          *(_QWORD *)(v31 - 40) = 0;
          *(_QWORD *)(v31 - 32) = 0;
          *(_QWORD *)(v31 - 48) = 0;
          *(_QWORD *)(v33 - 24) = 0;
          *(_QWORD *)(v33 - 16) = 0;
          *(_QWORD *)(v33 - 8) = 0;
          *(_OWORD *)(v33 - 24) = *(_OWORD *)(v31 - 24);
          *(_QWORD *)(v33 - 8) = *(_QWORD *)(v31 - 8);
          v33 -= 48;
          *(_QWORD *)(v31 - 24) = 0;
          *(_QWORD *)(v31 - 16) = 0;
          *(_QWORD *)(v31 - 8) = 0;
          v31 -= 48;
        }
        while ((std::string::pointer)v31 != data);
        v35 = *(int64x2_t *)&v74[1].__r_.__value_.__l.__data_;
        v30 = v81.u64[1];
      }
      v74[1].__r_.__value_.__r.__words[0] = v33;
      v74[1].__r_.__value_.__l.__size_ = v30;
      v81 = v35;
      v36 = v74[1].__r_.__value_.__r.__words[2];
      v74[1].__r_.__value_.__r.__words[2] = v82;
      v82 = v36;
      v80 = (char *)v35.i64[0];
      std::__split_buffer<OUEspressoInference::ModelInfo::BlobInfo>::~__split_buffer((uint64_t)&v80);
      v74[1].__r_.__value_.__l.__size_ = v30;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      v22 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
      *(_QWORD *)(v74[1].__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__x.__r_.__value_.__l + 2);
      *(_QWORD *)(size + 24) = 0;
      *(_OWORD *)size = v22;
      memset(&__x, 0, sizeof(__x));
      *(_QWORD *)(size + 32) = 0;
      *(_QWORD *)(size + 40) = 0;
      *(_OWORD *)(size + 24) = *(_OWORD *)__p;
      *(_QWORD *)(size + 40) = v72;
      __p[0] = 0;
      __p[1] = 0;
      v72 = 0;
      v74[1].__r_.__value_.__l.__size_ = size + 48;
    }
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
    if (v73.__begin_)
    {
      v73.__end_ = v73.__begin_;
      operator delete(v73.__begin_);
    }
  }
  for (k = qword_2540CA5B0; k; k = *(_QWORD *)k)
  {
    v38 = (uint64_t *)(k + 16);
    v39 = k + 16;
    if (*(char *)(k + 39) < 0)
      v39 = *v38;
    v40 = *(char *)(v39 + 1);
    LODWORD(__x.__r_.__value_.__l.__data_) = -1;
    std::vector<int>::vector(&v73, 3uLL, (const std::vector<int>::value_type *)&__x);
    v41 = v73.__begin_;
    *v73.__begin_ = v77[v40 - 48];
    if (*(char *)(k + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&__x, *(const std::string::value_type **)(k + 16), *(_QWORD *)(k + 24));
      v41 = v73.__begin_;
    }
    else
    {
      *(_OWORD *)&__x.__r_.__value_.__l.__data_ = *(_OWORD *)v38;
      __x.__r_.__value_.__r.__words[2] = *(_QWORD *)(k + 32);
    }
    __p[0] = 0;
    __p[1] = 0;
    v72 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v41, (uint64_t)v73.__end_, v73.__end_ - v41);
    v42 = v75.i64[1];
    if (v75.i64[1] >= v76[0])
    {
      v44 = 0xAAAAAAAAAAAAAAABLL * ((v75.i64[1] - v75.i64[0]) >> 4);
      v45 = v44 + 1;
      if (v44 + 1 > 0x555555555555555)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((v76[0] - v75.i64[0]) >> 4) > v45)
        v45 = 0x5555555555555556 * ((v76[0] - v75.i64[0]) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((v76[0] - v75.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v46 = 0x555555555555555;
      else
        v46 = v45;
      v83 = (std::string::value_type *)v76;
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>((uint64_t)v76, v46);
      v48 = &v47[48 * v44];
      v80 = v47;
      v81.i64[0] = (uint64_t)v48;
      v82 = (std::string::size_type)&v47[48 * v49];
      v50 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
      *((_QWORD *)v48 + 2) = *((_QWORD *)&__x.__r_.__value_.__l + 2);
      *(_OWORD *)v48 = v50;
      memset(&__x, 0, sizeof(__x));
      *((_QWORD *)v48 + 3) = 0;
      *((_QWORD *)v48 + 4) = 0;
      *((_QWORD *)v48 + 5) = 0;
      *(_OWORD *)(v48 + 24) = *(_OWORD *)__p;
      *((_QWORD *)v48 + 5) = v72;
      __p[0] = 0;
      __p[1] = 0;
      v72 = 0;
      v51 = v48 + 48;
      v81.i64[1] = (uint64_t)(v48 + 48);
      v52 = v75.i64[1];
      v53 = v75.i64[0];
      v54 = v81.i64[0];
      if (v75.i64[1] == v75.i64[0])
      {
        v56 = vdupq_n_s64(v75.u64[1]);
      }
      else
      {
        do
        {
          v55 = *(_OWORD *)(v52 - 48);
          *(_QWORD *)(v54 - 32) = *(_QWORD *)(v52 - 32);
          *(_OWORD *)(v54 - 48) = v55;
          *(_QWORD *)(v52 - 40) = 0;
          *(_QWORD *)(v52 - 32) = 0;
          *(_QWORD *)(v52 - 48) = 0;
          *(_QWORD *)(v54 - 24) = 0;
          *(_QWORD *)(v54 - 16) = 0;
          *(_QWORD *)(v54 - 8) = 0;
          *(_OWORD *)(v54 - 24) = *(_OWORD *)(v52 - 24);
          *(_QWORD *)(v54 - 8) = *(_QWORD *)(v52 - 8);
          v54 -= 48;
          *(_QWORD *)(v52 - 24) = 0;
          *(_QWORD *)(v52 - 16) = 0;
          *(_QWORD *)(v52 - 8) = 0;
          v52 -= 48;
        }
        while (v52 != v53);
        v56 = v75;
        v51 = (char *)v81.i64[1];
      }
      v75.i64[0] = v54;
      v75.i64[1] = (uint64_t)v51;
      v81 = v56;
      v57 = v76[0];
      v76[0] = v82;
      v82 = v57;
      v80 = (char *)v56.i64[0];
      std::__split_buffer<OUEspressoInference::ModelInfo::BlobInfo>::~__split_buffer((uint64_t)&v80);
      v75.i64[1] = (uint64_t)v51;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      v43 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
      *(_QWORD *)(v75.i64[1] + 16) = *((_QWORD *)&__x.__r_.__value_.__l + 2);
      *(_QWORD *)(v42 + 24) = 0;
      *(_OWORD *)v42 = v43;
      memset(&__x, 0, sizeof(__x));
      *(_QWORD *)(v42 + 32) = 0;
      *(_QWORD *)(v42 + 40) = 0;
      *(_OWORD *)(v42 + 24) = *(_OWORD *)__p;
      *(_QWORD *)(v42 + 40) = v72;
      __p[0] = 0;
      __p[1] = 0;
      v72 = 0;
      v75.i64[1] = v42 + 48;
    }
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
    if (v73.__begin_)
    {
      v73.__end_ = v73.__begin_;
      operator delete(v73.__begin_);
    }
  }
  objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = operator new();
  OUEspressoInference::OUEspressoInference(v59, v58, v74, 0, 65568);
  v60 = operator new();
  __x.__r_.__value_.__r.__words[0] = v59;
  ou3dod::OU3DSparseSSDetector::OU3DSparseSSDetector(v60, (uint64_t *)&__x, (_OWORD *)a1);
  v61 = __x.__r_.__value_.__r.__words[0];
  *a3 = v60;
  __x.__r_.__value_.__r.__words[0] = 0;
  if (v61)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v61 + 8))(v61);
  v62 = v74[1].__r_.__value_.__l.__size_;
  if (v74[1].__r_.__value_.__r.__words[0] != v74[1].__r_.__value_.__l.__size_)
  {
    v63 = v74[1].__r_.__value_.__r.__words[0] + 24;
    do
    {
      __x.__r_.__value_.__r.__words[0] = v63 - 24;
      v64 = (char *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v60 + 432, (unsigned __int8 *)(v63 - 24), (uint64_t)&std::piecewise_construct, (__int128 **)&__x)+ 40);
      if ((char *)v63 != v64)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v64, *(char **)v63, *(_QWORD *)(v63 + 8), (uint64_t)(*(_QWORD *)(v63 + 8) - *(_QWORD *)v63) >> 2);
      v65 = v63 + 24;
      v63 += 48;
    }
    while (v65 != v62);
  }
  if (v60 + 192 != a2)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(v60 + 192), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);

  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74[1];
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  if (SHIBYTE(v74[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74[0].__r_.__value_.__l.__data_);
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
}

void sub_22951C3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;

  *a12 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);

  OUEspressoInference::ModelInfo::~ModelInfo(&a26);
  v30 = *(void **)(v28 - 160);
  if (v30)
  {
    *(_QWORD *)(v28 - 152) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void OUEspressoInference::ModelInfo::BlobInfo::~BlobInfo(OUEspressoInference::ModelInfo::BlobInfo *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void ou3dod::OU3DSparseSSDetector::createForEspressoANETunneled(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t i;
  std::string::size_type size;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  std::string::size_type v10;
  uint64_t v11;
  __int128 v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::pointer data;
  std::string::size_type v16;
  __int128 v17;
  int64x2_t v18;
  std::string::size_type v19;
  uint64_t j;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  std::string::size_type v27;
  uint64_t v28;
  __int128 v29;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type v33;
  __int128 v34;
  int64x2_t v35;
  std::string::size_type v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  unsigned int v41;
  void **v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  std::vector<int>::size_type v69;
  unsigned __int8 *v70;
  void *v71;
  void *v72;
  std::string v74;
  std::string v75;
  void *__p[2];
  uint64_t v77;
  std::string v78[2];
  int64x2_t v79;
  std::string::size_type v80;
  std::string v81;
  std::string::size_type v82;
  std::string::value_type *v83;

  v80 = 0;
  v79 = 0u;
  memset(v78, 0, sizeof(v78));
  std::string::__assign_external(v78, "sparse_voxelssd_ane.espresso.net", 0x20uLL);
  for (i = qword_2540CA588; i; i = *(_QWORD *)i)
  {
    if (*(char *)(i + 39) < 0)
      std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(i + 16), *(_QWORD *)(i + 24));
    else
      v75 = *(std::string *)(i + 16);
    __p[0] = 0;
    __p[1] = 0;
    v77 = 0;
    size = v78[1].__r_.__value_.__l.__size_;
    if (v78[1].__r_.__value_.__l.__size_ >= v78[1].__r_.__value_.__r.__words[2])
    {
      v6 = 0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v78[1].__r_.__value_.__l.__size_ - v78[1].__r_.__value_.__r.__words[0]) >> 4);
      v7 = v6 + 1;
      if (v6 + 1 > 0x555555555555555)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556
         * ((uint64_t)(v78[1].__r_.__value_.__r.__words[2] - v78[1].__r_.__value_.__r.__words[0]) >> 4) > v7)
        v7 = 0x5555555555555556
           * ((uint64_t)(v78[1].__r_.__value_.__r.__words[2] - v78[1].__r_.__value_.__r.__words[0]) >> 4);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v78[1].__r_.__value_.__r.__words[2] - v78[1].__r_.__value_.__r.__words[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v8 = 0x555555555555555;
      else
        v8 = v7;
      v83 = &v78[1].__r_.__value_.__s.__data_[16];
      v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>((uint64_t)&v78[1].__r_.__value_.__r.__words[2], v8);
      v10 = (std::string::size_type)v9 + 48 * v6;
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
      v81.__r_.__value_.__l.__size_ = v10;
      v82 = (std::string::size_type)v9 + 48 * v11;
      v12 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)&v75.__r_.__value_.__l + 2);
      *(_OWORD *)v10 = v12;
      memset(&v75, 0, sizeof(v75));
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      *(_OWORD *)(v10 + 24) = *(_OWORD *)__p;
      *(_QWORD *)(v10 + 40) = v77;
      __p[0] = 0;
      __p[1] = 0;
      v77 = 0;
      v13 = v10 + 48;
      v81.__r_.__value_.__r.__words[2] = v10 + 48;
      v14 = v78[1].__r_.__value_.__l.__size_;
      data = v78[1].__r_.__value_.__l.__data_;
      v16 = v81.__r_.__value_.__l.__size_;
      if (v78[1].__r_.__value_.__l.__size_ == v78[1].__r_.__value_.__r.__words[0])
      {
        v18 = vdupq_n_s64(v78[1].__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          v17 = *(_OWORD *)(v14 - 48);
          *(_QWORD *)(v16 - 32) = *(_QWORD *)(v14 - 32);
          *(_OWORD *)(v16 - 48) = v17;
          *(_QWORD *)(v14 - 40) = 0;
          *(_QWORD *)(v14 - 32) = 0;
          *(_QWORD *)(v14 - 48) = 0;
          *(_QWORD *)(v16 - 24) = 0;
          *(_QWORD *)(v16 - 16) = 0;
          *(_QWORD *)(v16 - 8) = 0;
          *(_OWORD *)(v16 - 24) = *(_OWORD *)(v14 - 24);
          *(_QWORD *)(v16 - 8) = *(_QWORD *)(v14 - 8);
          v16 -= 48;
          *(_QWORD *)(v14 - 24) = 0;
          *(_QWORD *)(v14 - 16) = 0;
          *(_QWORD *)(v14 - 8) = 0;
          v14 -= 48;
        }
        while ((std::string::pointer)v14 != data);
        v18 = *(int64x2_t *)&v78[1].__r_.__value_.__l.__data_;
        v13 = v81.__r_.__value_.__r.__words[2];
      }
      v78[1].__r_.__value_.__r.__words[0] = v16;
      v78[1].__r_.__value_.__l.__size_ = v13;
      *(int64x2_t *)&v81.__r_.__value_.__r.__words[1] = v18;
      v19 = v78[1].__r_.__value_.__r.__words[2];
      v78[1].__r_.__value_.__r.__words[2] = v82;
      v82 = v19;
      v81.__r_.__value_.__r.__words[0] = v18.i64[0];
      std::__split_buffer<OUEspressoInference::ModelInfo::BlobInfo>::~__split_buffer((uint64_t)&v81);
      v78[1].__r_.__value_.__l.__size_ = v13;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      v5 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      *(_QWORD *)(v78[1].__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v75.__r_.__value_.__l + 2);
      *(_QWORD *)(size + 24) = 0;
      *(_OWORD *)size = v5;
      memset(&v75, 0, sizeof(v75));
      *(_QWORD *)(size + 32) = 0;
      *(_QWORD *)(size + 40) = 0;
      *(_OWORD *)(size + 24) = *(_OWORD *)__p;
      *(_QWORD *)(size + 40) = v77;
      __p[0] = 0;
      __p[1] = 0;
      v77 = 0;
      v78[1].__r_.__value_.__l.__size_ = size + 48;
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
  }
  for (j = qword_2540CA5B0; j; j = *(_QWORD *)j)
  {
    if (*(char *)(j + 39) < 0)
      std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(j + 16), *(_QWORD *)(j + 24));
    else
      v75 = *(std::string *)(j + 16);
    __p[0] = 0;
    __p[1] = 0;
    v77 = 0;
    v21 = v79.i64[1];
    if (v79.i64[1] >= v80)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((v79.i64[1] - v79.i64[0]) >> 4);
      v24 = v23 + 1;
      if (v23 + 1 > 0x555555555555555)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v80 - v79.i64[0]) >> 4) > v24)
        v24 = 0x5555555555555556 * ((uint64_t)(v80 - v79.i64[0]) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - v79.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v25 = 0x555555555555555;
      else
        v25 = v24;
      v83 = (std::string::value_type *)&v80;
      v26 = std::__allocate_at_least[abi:ne180100]<std::allocator<OUEspressoInference::ModelInfo::BlobInfo>>((uint64_t)&v80, v25);
      v27 = (std::string::size_type)v26 + 48 * v23;
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      v81.__r_.__value_.__l.__size_ = v27;
      v82 = (std::string::size_type)v26 + 48 * v28;
      v29 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      *(_QWORD *)(v27 + 16) = *((_QWORD *)&v75.__r_.__value_.__l + 2);
      *(_OWORD *)v27 = v29;
      memset(&v75, 0, sizeof(v75));
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0;
      *(_QWORD *)(v27 + 40) = 0;
      *(_OWORD *)(v27 + 24) = *(_OWORD *)__p;
      *(_QWORD *)(v27 + 40) = v77;
      __p[0] = 0;
      __p[1] = 0;
      v77 = 0;
      v30 = v27 + 48;
      v81.__r_.__value_.__r.__words[2] = v27 + 48;
      v31 = v79.i64[1];
      v32 = v79.i64[0];
      v33 = v81.__r_.__value_.__l.__size_;
      if (v79.i64[1] == v79.i64[0])
      {
        v35 = vdupq_n_s64(v79.u64[1]);
      }
      else
      {
        do
        {
          v34 = *(_OWORD *)(v31 - 48);
          *(_QWORD *)(v33 - 32) = *(_QWORD *)(v31 - 32);
          *(_OWORD *)(v33 - 48) = v34;
          *(_QWORD *)(v31 - 40) = 0;
          *(_QWORD *)(v31 - 32) = 0;
          *(_QWORD *)(v31 - 48) = 0;
          *(_QWORD *)(v33 - 24) = 0;
          *(_QWORD *)(v33 - 16) = 0;
          *(_QWORD *)(v33 - 8) = 0;
          *(_OWORD *)(v33 - 24) = *(_OWORD *)(v31 - 24);
          *(_QWORD *)(v33 - 8) = *(_QWORD *)(v31 - 8);
          v33 -= 48;
          *(_QWORD *)(v31 - 24) = 0;
          *(_QWORD *)(v31 - 16) = 0;
          *(_QWORD *)(v31 - 8) = 0;
          v31 -= 48;
        }
        while (v31 != v32);
        v35 = v79;
        v30 = v81.__r_.__value_.__r.__words[2];
      }
      v79.i64[0] = v33;
      v79.i64[1] = v30;
      *(int64x2_t *)&v81.__r_.__value_.__r.__words[1] = v35;
      v36 = v80;
      v80 = v82;
      v82 = v36;
      v81.__r_.__value_.__r.__words[0] = v35.i64[0];
      std::__split_buffer<OUEspressoInference::ModelInfo::BlobInfo>::~__split_buffer((uint64_t)&v81);
      v79.i64[1] = v30;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      v22 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      *(_QWORD *)(v79.i64[1] + 16) = *((_QWORD *)&v75.__r_.__value_.__l + 2);
      *(_QWORD *)(v21 + 24) = 0;
      *(_OWORD *)v21 = v22;
      memset(&v75, 0, sizeof(v75));
      *(_QWORD *)(v21 + 32) = 0;
      *(_QWORD *)(v21 + 40) = 0;
      *(_OWORD *)(v21 + 24) = *(_OWORD *)__p;
      *(_QWORD *)(v21 + 40) = v77;
      __p[0] = 0;
      __p[1] = 0;
      v77 = 0;
      v79.i64[1] = v21 + 48;
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
  }
  objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
  v37 = objc_claimAutoreleasedReturnValue();
  v38 = operator new();
  OUEspressoInference::OUEspressoInference(v38, v37, v78, 10007, 65568);
  v39 = operator new();
  v75.__r_.__value_.__r.__words[0] = v38;
  ou3dod::OU3DSparseSSDetector::OU3DSparseSSDetector(v39, (uint64_t *)&v75, (_OWORD *)a1);
  v72 = (void *)v37;
  *a2 = v39;
  v40 = v75.__r_.__value_.__r.__words[0];
  v75.__r_.__value_.__r.__words[0] = 0;
  if (v40)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v40 + 8))(v40);
  v41 = 0;
  *(_WORD *)(v39 + 472) = 256;
  v42 = (void **)(v39 + 192);
  do
  {
    std::to_string(&v74, v41);
    v43 = std::string::insert(&v74, 0, "l", 1uLL);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = std::string::append(&v81, "_k3_s1", 6uLL);
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    OUDnnInferenceInterface::GetInputSpan<float,void>(*(_QWORD *)(v39 + 32), (unsigned __int8 *)&v75);
    v48 = v47 / 0x36;
    v50 = *(char **)(v39 + 200);
    v49 = *(_QWORD *)(v39 + 208);
    if ((unint64_t)v50 >= v49)
    {
      v52 = (char *)*v42;
      v53 = (v50 - (_BYTE *)*v42) >> 2;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 62)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v55 = v49 - (_QWORD)v52;
      if (v55 >> 1 > v54)
        v54 = v55 >> 1;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
        v56 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
      {
        v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v39 + 208, v56);
        v52 = *(char **)(v39 + 192);
        v50 = *(char **)(v39 + 200);
      }
      else
      {
        v57 = 0;
      }
      v58 = &v57[4 * v53];
      *(_DWORD *)v58 = v48;
      v51 = v58 + 4;
      while (v50 != v52)
      {
        v59 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v58 - 1) = v59;
        v58 -= 4;
      }
      *(_QWORD *)(v39 + 192) = v58;
      *(_QWORD *)(v39 + 200) = v51;
      *(_QWORD *)(v39 + 208) = &v57[4 * v56];
      if (v52)
        operator delete(v52);
    }
    else
    {
      *(_DWORD *)v50 = v48;
      v51 = v50 + 4;
    }
    *(_QWORD *)(v39 + 200) = v51;
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
  }
  while (v41++ < *(_DWORD *)(a1 + 68));
  v61 = qword_2540CA588;
  if (qword_2540CA588)
  {
    v62 = *a2 + 432;
    do
    {
      v63 = *(unsigned __int8 *)(v61 + 39);
      v64 = (char)v63;
      if ((v63 & 0x80u) != 0)
        v63 = *(_QWORD *)(v61 + 24);
      if (v63 == 13)
      {
        v65 = *(unint64_t **)(v61 + 16);
        if (v64 >= 0)
          v65 = (unint64_t *)(v61 + 16);
        v66 = bswap64(*v65);
        v67 = 0x7370617273655F76;
        if (v66 == 0x7370617273655F76
          && (v66 = bswap64(*(unint64_t *)((char *)v65 + 5)),
              v67 = 0x655F766F78656C73,
              v66 == 0x655F766F78656C73))
        {
          v68 = 0;
        }
        else if (v66 < v67)
        {
          v68 = -1;
        }
        else
        {
          v68 = 1;
        }
        if (v68)
          v69 = 5;
        else
          v69 = 3;
      }
      else
      {
        v69 = 5;
      }
      LODWORD(v74.__r_.__value_.__l.__data_) = -1;
      std::vector<int>::vector((std::vector<int> *)&v75, v69, (const std::vector<int>::value_type *)&v74);
      v81.__r_.__value_.__r.__words[0] = v61 + 16;
      v70 = std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v62, (unsigned __int8 *)(v61 + 16), (uint64_t)&std::piecewise_construct, (__int128 **)&v81);
      v71 = (void *)*((_QWORD *)v70 + 5);
      if (v71)
      {
        *((_QWORD *)v70 + 6) = v71;
        operator delete(v71);
        *((_QWORD *)v70 + 5) = 0;
        *((_QWORD *)v70 + 6) = 0;
        *((_QWORD *)v70 + 7) = 0;
      }
      *(std::string *)(v70 + 40) = v75;
      v61 = *(_QWORD *)v61;
    }
    while (v61);
  }

  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78[1];
  std::vector<OUEspressoInference::ModelInfo::BlobInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  if (SHIBYTE(v78[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78[0].__r_.__value_.__l.__data_);
}

void sub_22951CD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  uint64_t v28;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  MEMORY[0x22E2CAAE8](v28, 0x10B1C40E4B8FA47);

  OUEspressoInference::ModelInfo::~ModelInfo(&a27);
  _Unwind_Resume(a1);
}

uint64_t ou3dod::OU3DSparseSSDetector::OU3DSparseSSDetector(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  float v12;
  float v13;
  std::logic_error *exception;

  v5 = ou3dod::OU3DODInterface::OU3DODInterface((_QWORD *)a1, a2);
  *v5 = &off_24F2436B8;
  v6 = a3[3];
  v7 = a3[4];
  v8 = a3[5];
  *((_OWORD *)v5 + 9) = a3[6];
  v9 = a3[1];
  v10 = a3[2];
  *((_OWORD *)v5 + 3) = *a3;
  *((_OWORD *)v5 + 4) = v9;
  *((_OWORD *)v5 + 7) = v7;
  *((_OWORD *)v5 + 8) = v8;
  *((_OWORD *)v5 + 5) = v10;
  *((_OWORD *)v5 + 6) = v6;
  if (*((_BYTE *)v5 + 152))
    v11 = *(_DWORD *)(a1 + 48) + 3;
  else
    v11 = 3;
  *(_DWORD *)(a1 + 160) = v11;
  _ZNSt3__16vectorINS0_IDv3_iNS_9allocatorIS1_EEEENS2_IS4_EEEC2Em((_QWORD *)(a1 + 168), (*(_DWORD *)(a1 + 116) + 1));
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 248) = 1065353216;
  std::vector<std::span<float,18446744073709551615ul>>::vector((_QWORD *)(a1 + 256), (*(_DWORD *)(a1 + 116) + 1));
  std::vector<std::span<float,18446744073709551615ul>>::vector((_QWORD *)(a1 + 280), (*(_DWORD *)(a1 + 116) + 1));
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  v12 = *(float *)(a1 + 80);
  v13 = *(float *)(a1 + 84);
  *(_WORD *)(a1 + 472) = 1;
  if (v12 != v13 || v12 != *(float *)(a1 + 88))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD IS] Expect the voxel size is identical across all three dimensions.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return a1;
}

void sub_22951D01C(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, ...)
{
  uint64_t v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void **v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a4);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(v4 + 432);

  v7 = *(void **)(v4 + 400);
  if (v7)
  {
    *(_QWORD *)(v4 + 408) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(v4 + 376);
  if (v8)
  {
    *(_QWORD *)(v4 + 384) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(v4 + 352);
  if (v9)
  {
    *(_QWORD *)(v4 + 360) = v9;
    operator delete(v9);
  }
  v10 = (void **)(v4 + 304);
  v11 = *(void **)(v4 + 328);
  if (v11)
  {
    *(_QWORD *)(v4 + 336) = v11;
    operator delete(v11);
  }
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v4 + 312) = v12;
    operator delete(v12);
  }
  v13 = *a3;
  if (*a3)
  {
    *(_QWORD *)(v4 + 288) = v13;
    operator delete(v13);
  }
  v14 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v4 + 264) = v14;
    operator delete(v14);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)(a4 + 3));
  v15 = *a4;
  if (*a4)
  {
    *(_QWORD *)(v4 + 200) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ou3dod::OU3DODInterface::~OU3DODInterface((ou3dod::OU3DODInterface *)v4);
  _Unwind_Resume(a1);
}

uint64_t ou3dod::OU3DSparseSSDetector::Preprocess(ou3dod::OU3DSparseSSDetector *this, OUPointCloudCpp *a2)
{
  double v4;
  int32x4_t v5;
  uint64_t result;
  _QWORD *i;
  NSObject *v8;
  std::logic_error *exception;

  if (!OUPointCloudCpp::IsValid(a2))
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      ou3dod::OU3DSparseSSDetector::Preprocess(v8);

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)&unk_22956FEC2);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  ou3dod::OU3DSparseSSDetector::VoxelizePointCloud(this, a2, *((float *)this + 20));
  result = ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps(this, *((_DWORD *)this + 29), v4, v5);
  if (*((_BYTE *)this + 472))
  {
    for (i = (_QWORD *)*((_QWORD *)this + 56); i; i = (_QWORD *)*i)
      result = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4), i + 2, i + 5);
  }
  return result;
}

void sub_22951D1DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::VoxelizePointCloud(ou3dod::OU3DSparseSSDetector *this, const OUPointCloudCpp *a2, float a3)
{
  int v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  int i;
  __int128 v14;
  int j;
  int v16;
  __int128 v17;
  unsigned int v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  std::vector<int>::pointer end;
  int *v32;
  std::vector<int>::pointer begin;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  int *v39;
  int v40;
  unint64_t v41;
  NSObject *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *Input;
  uint64_t v47;
  uint16x8_t v48;
  std::vector<int>::pointer v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  char *v58;
  char *v59;
  char *v60;
  char **v61;
  _QWORD *v62;
  unint64_t v63;
  unsigned __int8 *v64;
  _OWORD v65[3];
  std::vector<int> v66;
  _OWORD v67[2];
  int v68;
  void *__p[2];
  char v70;
  _BYTE buf[22];
  __int16 v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "sparse_voxels");
  v6 = **((_DWORD **)this + 24);
  memset(v67, 0, sizeof(v67));
  v68 = 1065353216;
  v7 = (char **)*((_QWORD *)this + 21);
  v7[1] = *v7;
  memset(&v66, 0, sizeof(v66));
  std::vector<int>::reserve(&v66, v6);
  v9 = *(_QWORD *)a2;
  v8 = *((_QWORD *)a2 + 1);
  if (v8 != *(_QWORD *)a2)
  {
    v10 = 0;
    do
    {
      v11 = *(_OWORD *)(v9 + 16 * v10);
      v12 = *((_QWORD *)a2 + 3);
      for (i = 1; ; ++i)
      {
        v65[2] = v11;
        if (i == 3)
          break;
      }
      if ((i - 1) >= 2)
      {
        v14 = *(_OWORD *)(v12 + 16 * v10);
        for (j = 1; ; ++j)
        {
          v65[1] = v14;
          if (j == 3)
            break;
        }
        if ((j - 1) >= 2)
        {
          v16 = 0;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          v17 = 0uLL;
          do
          {
            v18 = vcvtms_s32_f32(*(float *)(v12 + 16 * v10 + 4 * (v16 & 3)) / a3);
            v65[0] = v17;
            *(_DWORD *)((unint64_t)v65 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16 & 3))) = v18;
            v17 = v65[0];
            *(_DWORD *)&buf[8] = DWORD2(v65[0]);
            *(_QWORD *)buf = *(_QWORD *)&v65[0];
            ++v16;
          }
          while (v16 != 3);
          if (!_ZNKSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE4findIS2_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(v67, (int32x4_t *)buf))
          {
            _ZNSt3__112__hash_tableIDv3_iN5utils8SimdHashIS1_EENS2_9SimdEqualIS1_EENS_9allocatorIS1_EEE25__emplace_unique_key_argsIS1_JRKS1_EEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS1_PvEEEEbEERKT_DpOT0_((uint64_t)v67, (int32x4_t *)buf, (int32x4_t *)buf);
            v20 = v7[1];
            v19 = (unint64_t)v7[2];
            if ((unint64_t)v20 >= v19)
            {
              v22 = (v20 - *v7) >> 4;
              if ((unint64_t)(v22 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v23 = v19 - (_QWORD)*v7;
              v24 = v23 >> 3;
              if (v23 >> 3 <= (unint64_t)(v22 + 1))
                v24 = v22 + 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
                v25 = 0xFFFFFFFFFFFFFFFLL;
              else
                v25 = v24;
              if (v25)
                v26 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v7 + 2), v25);
              else
                v26 = 0;
              v27 = &v26[16 * v22];
              *(_OWORD *)v27 = *(_OWORD *)buf;
              v21 = v27 + 16;
              v29 = *v7;
              v28 = v7[1];
              if (v28 != *v7)
              {
                do
                {
                  v30 = *((_OWORD *)v28 - 1);
                  v28 -= 16;
                  *((_OWORD *)v27 - 1) = v30;
                  v27 -= 16;
                }
                while (v28 != v29);
                v28 = *v7;
              }
              *v7 = v27;
              v7[1] = v21;
              v7[2] = &v26[16 * v25];
              if (v28)
                operator delete(v28);
            }
            else
            {
              *(_OWORD *)v20 = *(_OWORD *)buf;
              v21 = v20 + 16;
            }
            v7[1] = v21;
            end = v66.__end_;
            if (v66.__end_ >= v66.__end_cap_.__value_)
            {
              begin = v66.__begin_;
              v34 = v66.__end_ - v66.__begin_;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v36 = (char *)v66.__end_cap_.__value_ - (char *)v66.__begin_;
              if (((char *)v66.__end_cap_.__value_ - (char *)v66.__begin_) >> 1 > v35)
                v35 = v36 >> 1;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                v37 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v66.__end_cap_, v37);
                begin = v66.__begin_;
                end = v66.__end_;
              }
              else
              {
                v38 = 0;
              }
              v39 = (int *)&v38[4 * v34];
              *v39 = v10;
              v32 = v39 + 1;
              while (end != begin)
              {
                v40 = *--end;
                *--v39 = v40;
              }
              v66.__begin_ = v39;
              v66.__end_ = v32;
              v66.__end_cap_.__value_ = (int *)&v38[4 * v37];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *v66.__end_ = v10;
              v32 = end + 1;
            }
            v66.__end_ = v32;
          }
          v9 = *(_QWORD *)a2;
          v8 = *((_QWORD *)a2 + 1);
        }
      }
      ++v10;
    }
    while (v10 < (v8 - v9) >> 4);
  }
  v41 = (v7[1] - *v7) >> 4;
  if (v41 > v6)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "SparseSSD";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v41;
      v72 = 1024;
      v73 = v6;
      _os_log_impl(&dword_2294C8000, v42, OS_LOG_TYPE_INFO, "[3DOD][%s] Voxel count %lu > capacity %d, triggers resampling; this would cause regression to detection and/or segmentation.",
        buf,
        0x1Cu);
    }

    utils::Resample((utils *)v41, v6, (void **)buf);
    v43 = *(_QWORD *)buf;
    if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
    {
      v44 = 0;
      do
      {
        v45 = *(_QWORD *)(v43 + 8 * v44);
        *(_OWORD *)&(*v7)[16 * v44] = *(_OWORD *)&(*v7)[16 * v45];
        v66.__begin_[v44++] = v66.__begin_[v45];
        v43 = *(_QWORD *)buf;
      }
      while (v44 < (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
    }
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v7, v6);
    std::vector<int>::resize(&v66, v6);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  Input = (char *)OUDnnInferenceInterface::GetInputSpan<float,void>(*((_QWORD *)this + 4), (unsigned __int8 *)__p);
  bzero(Input, 4 * v47);
  v49 = v66.__begin_;
  if (v66.__end_ != v66.__begin_)
  {
    v50 = 0;
    v51 = v66.__end_ - v66.__begin_;
    v52 = *(_QWORD *)a2;
    v53 = *((unsigned __int8 *)this + 152);
    v54 = *((_QWORD *)a2 + 6);
    if (v51 <= 1)
      v51 = 1;
    do
    {
      v56 = *v49++;
      v55 = v56;
      v57 = (_DWORD *)(v52 + 16 * v56);
      v58 = &Input[4 * v50];
      *(_DWORD *)v58 = *v57;
      *((_DWORD *)v58 + 1) = v57[1];
      v50 += 3;
      *((_DWORD *)v58 + 2) = v57[2];
      if (v53)
      {
        v48.i32[0] = *(_DWORD *)(v54 + 4 * v55);
        v48 = vmovl_u8(*(uint8x8_t *)v48.i8);
        *(_DWORD *)&Input[4 * v50 + 4 * v48.u8[0]] = 1065353216;
        v50 += *((_DWORD *)this + 12);
      }
      --v51;
    }
    while (v51);
  }
  v61 = v7;
  v59 = *v7;
  v60 = v61[1];
  v62 = (_QWORD *)((char *)this + 432);
  v63 = *((unsigned int *)this + 30);
  v64 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(v62, (unsigned __int8 *)__p);
  if (!v64)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  **((_DWORD **)v64 + 5) = (v63 + ((v60 - v59) >> 4) - 1) / v63;
  if (v66.__begin_)
  {
    v66.__end_ = v66.__begin_;
    operator delete(v66.__begin_);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v67);
  if (v70 < 0)
    operator delete(__p[0]);
}

void sub_22951D754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a19);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps(ou3dod::OU3DSparseSSDetector *this, unsigned int a2, double a3, int32x4_t a4)
{
  unsigned int v4;
  ou3dod::OU3DSparseSSDetector *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  int32x4_t v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  int32x4_t *v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  unsigned int v49;
  unsigned int v50;
  size_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  uint64_t Input;
  unint64_t v64;
  unint64_t v65;
  ou3dod::OU3DSparseSSDetector *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  unsigned __int8 *v71;
  int v72;
  unsigned __int8 *v73;
  uint64_t v75;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  std::string v81;
  std::string v82;
  std::string __p;
  std::string v84;
  void *v85[2];
  std::string::size_type v86;
  _OWORD v87[2];
  int v88;
  uint64_t v89[2];

  v4 = a2;
  v5 = this;
  v89[0] = (uint64_t)this;
  if (a2)
  {
    v6 = 0;
    v7 = a2;
    do
    {
      memset(v87, 0, sizeof(v87));
      v88 = 1065353216;
      v8 = *((_QWORD *)this + 21);
      v9 = (int32x4_t *)(v8 + 24 * v6);
      v10 = (int32x4_t *)((char *)v9 + 24);
      v9[2].i64[0] = v9[1].i64[1];
      v11 = v9 + 2;
      v12 = v6 + 1;
      if (v9->i64[1] != v9->i64[0])
      {
        v13 = 0;
        v14 = (_QWORD *)(v8 + 24 * v12 + 16);
        do
        {
          v15 = 0;
          LODWORD(v85[1]) = 0;
          v85[0] = 0;
          v16 = *(_OWORD *)(v9->i64[0] + 16 * v13);
          v17 = 0uLL;
          do
          {
            v79 = v16;
            v18 = vcvtms_s32_f32((float)*(int *)((unint64_t)&v79 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) * 0.5);
            v80 = v17;
            *(_DWORD *)((unint64_t)&v80 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) = v18;
            v19 = v80;
            HIDWORD(v19) = HIDWORD(v17);
            ++v15;
            v17 = v19;
          }
          while (v15 != 3);
          *(_OWORD *)v85 = v80;
          if (!_ZNKSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE4findIS2_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(v87, (int32x4_t *)v85))
          {
            _ZNSt3__112__hash_tableIDv3_iN5utils8SimdHashIS1_EENS2_9SimdEqualIS1_EENS_9allocatorIS1_EEE25__emplace_unique_key_argsIS1_JRKS1_EEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS1_PvEEEEbEERKT_DpOT0_((uint64_t)v87, (int32x4_t *)v85, (int32x4_t *)v85);
            v20 = (_OWORD *)v11->i64[0];
            if (v11->i64[0] >= *v14)
            {
              v22 = ((uint64_t)v20 - v10->i64[0]) >> 4;
              if ((unint64_t)(v22 + 1) >> 60)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v23 = *v14 - v10->i64[0];
              v24 = v23 >> 3;
              if (v23 >> 3 <= (unint64_t)(v22 + 1))
                v24 = v22 + 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
                v25 = 0xFFFFFFFFFFFFFFFLL;
              else
                v25 = v24;
              if (v25)
                v26 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v14, v25);
              else
                v26 = 0;
              v27 = &v26[16 * v22];
              *(_OWORD *)v27 = *(_OWORD *)v85;
              v21 = v27 + 16;
              v28 = (_OWORD *)v11->i64[0];
              v29 = (_OWORD *)v10->i64[0];
              if (v11->i64[0] != v10->i64[0])
              {
                do
                {
                  v30 = *--v28;
                  *((_OWORD *)v27 - 1) = v30;
                  v27 -= 16;
                }
                while (v28 != v29);
                v28 = (_OWORD *)v10->i64[0];
              }
              v10->i64[0] = (uint64_t)v27;
              v11->i64[0] = (uint64_t)v21;
              *v14 = &v26[16 * v25];
              if (v28)
                operator delete(v28);
            }
            else
            {
              *v20 = *(_OWORD *)v85;
              v21 = v20 + 1;
            }
            v11->i64[0] = (uint64_t)v21;
          }
          ++v13;
        }
        while (v13 < (v9->i64[1] - v9->i64[0]) >> 4);
      }
      std::to_string(&v81, v6);
      v32 = std::string::insert(&v81, 0, "l", 1uLL);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      v34 = std::string::append(&v82, "_k3_s1", 6uLL);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps::$_0::operator()(v89, (unsigned __int8 *)&__p, (uint64_t)v85, v9, 1, 3, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      std::to_string(&v81, v6);
      v36 = std::string::insert(&v81, 0, "l", 1uLL);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = std::string::append(&v82, "_k3_s2", 6uLL);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps::$_0::operator()(v89, (unsigned __int8 *)&__p, (uint64_t)v85, v10, 2, 3, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      std::to_string(&v81, v6 + 1);
      v40 = std::string::insert(&v81, 0, "l", 1uLL);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      v42 = std::string::append(&v82, "_k2_tr", 6uLL);
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps::$_0::operator()(v89, (unsigned __int8 *)&__p, (uint64_t)&v84, v9, 2, 2, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v84);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v85);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v87);
      ++v6;
    }
    while (v12 != v7);
    v4 = a2;
    v5 = this;
  }
  else
  {
    LODWORD(v7) = 0;
  }
  v44 = (int32x4_t *)(*((_QWORD *)v5 + 21) + 24 * v7);
  std::to_string(&__p, v4);
  v45 = std::string::insert(&__p, 0, "l", 1uLL);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  v47 = std::string::append(&v84, "_k3_s1", 6uLL);
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v86 = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)v85 = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps::$_0::operator()(v89, (unsigned __int8 *)v85, (uint64_t)v87, v44, 1, 3, 0);
  if (SHIBYTE(v86) < 0)
    operator delete(v85[0]);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v4)
      return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v87);
  }
  else if (!v4)
  {
    return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v87);
  }
  v49 = 0;
  v50 = 2 * *((_DWORD *)v5 + 30);
  v51 = 4 * v50;
  v78 = 13 * v50;
  v52 = 27 * v50;
  v53 = (_QWORD *)((char *)v5 + 432);
  v75 = 52 * v50;
  v54 = 108 * v50;
  do
  {
    std::to_string(&__p, v49);
    v55 = std::string::insert(&__p, 0, "l", 1uLL);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v84, "_k3_s2", 6uLL);
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v86 = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)v85 = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::to_string(&v82, v49);
    v59 = std::string::insert(&v82, 0, "l", 1uLL);
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    v61 = std::string::append(&__p, "_k1_s2", 6uLL);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    Input = OUDnnInferenceInterface::GetInputSpan<float,void>(*((_QWORD *)v5 + 4), (unsigned __int8 *)v85);
    v65 = v64;
    v66 = v5;
    v67 = OUDnnInferenceInterface::GetInputSpan<float,void>(*((_QWORD *)v5 + 4), (unsigned __int8 *)&v84);
    if (v78 < v65)
    {
      v68 = (char *)v67;
      v69 = (char *)(Input + v75);
      v70 = v78;
      do
      {
        memcpy(v68, v69, v51);
        v70 += v52;
        v69 += v54;
        v68 += v51;
      }
      while (v70 < v65);
    }
    v71 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(v53, (unsigned __int8 *)v85);
    if (!v71
      || (v5 = v66,
          v72 = **((_DWORD **)v71 + 5),
          (v73 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(v53, (unsigned __int8 *)&v84)) == 0))
    {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    **((_DWORD **)v73 + 5) = v72;
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v84.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86) < 0)
      operator delete(v85[0]);
    ++v49;
  }
  while (v49 != a2);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v87);
}

void sub_22951DF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a52 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a36 < 0)
    operator delete(a31);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v52 - 160);
  _Unwind_Resume(a1);
}

int32x4_t *`anonymous namespace'::NeighborMapHelper::InitCoordToIndexMap@<X0>(int32x4_t *result@<X0>, unsigned __int32 a2@<W1>, uint64_t a3@<X8>, int32x4_t a4@<Q1>)
{
  int32x4_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint32x4_t v12;
  uint32x4_t v13;
  uint32x4_t *v14;

  v5.i32[1] = 0;
  v5.i64[1] = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = result->i64[1] - result->i64[0];
  if ((int)(v6 >> 4) >= 1)
  {
    v7 = (uint64_t *)result;
    v8 = 0;
    v5.i32[0] = 1;
    a4.i32[0] = a2;
    v9 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a4, v5), 0);
    v10.i64[0] = 0x100000001;
    v10.i64[1] = 0x100000001;
    v12 = (uint32x4_t)vbicq_s8(v10, v9);
    v11 = (v6 >> 4);
    do
    {
      v13 = vshlq_u32(*(uint32x4_t *)(*v7 + 16 * v8), v12);
      v14 = &v13;
      result = _ZNSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIS2_JRKNS_21piecewise_construct_tENS_5tupleIJOS2_EEENSK_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEEbEERKT_DpOT0_(a3, (int32x4_t *)&v13, (uint64_t)&std::piecewise_construct, (int32x4_t **)&v14);
      result[2].i32[0] = v8++;
    }
    while (v11 != v8);
  }
  return result;
}

void sub_22951E1A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *ou3dod::OU3DSparseSSDetector::ComputeNeighborMaps(unsigned int)::$_0::operator()(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4, int a5, int a6, char a7)
{
  int v13;
  std::vector<int>::size_type v14;
  uint64_t v15;
  std::vector<int>::pointer begin;
  int v17;
  std::vector<int>::pointer v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  void *v23;
  uint64_t *v24;
  char *Input;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  float *v36;
  float *v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  float *v42;
  _DWORD *v43;
  int v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  unsigned __int8 *result;
  std::logic_error *exception;
  struct type_info *v54;
  void (*v55)(void *);
  unsigned __int8 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  std::vector<int>::value_type __x[2];
  uint64_t v61;
  int32x4_t *(*v62)(int32x4_t *, uint64_t, int32x4_t);
  void *v63;
  void **v64;
  _QWORD *v65;
  void *__p;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  char v72;
  std::vector<int> v73;
  void *v74;
  void *v75;
  uint64_t v76;
  __n128 (*v77)(__n128 *, __n128 *);
  void (*v78)(uint64_t);
  const char *v79;
  std::vector<int> v80;

  v57 = *a1;
  v74 = 0;
  v75 = &v74;
  v76 = 0x4812000000;
  v77 = __Block_byref_object_copy_;
  v78 = __Block_byref_object_dispose_;
  v79 = "";
  v13 = a6 * a6 * a6;
  v14 = (int)(v13 * ((a4[1] - *a4) >> 4));
  __x[0] = -1;
  std::vector<int>::vector(&v80, v14, __x);
  v15 = a6;
  std::vector<int>::vector(&v73, a6);
  v56 = a2;
  begin = v73.__begin_;
  if (a6 >= 1)
  {
    v17 = -1;
    v18 = v73.__begin_;
    do
    {
      *v18++ = v17++;
      --v15;
    }
    while (v15);
  }
  dispatch_get_global_queue(0, 0);
  v19 = objc_claimAutoreleasedReturnValue();
  v21 = *a4;
  v20 = a4[1];
  *(_QWORD *)__x = MEMORY[0x24BDAC760];
  v61 = 3321888768;
  v62 = ___ZN12_GLOBAL__N_117NeighborMapHelper7ComputeERKNSt3__113unordered_mapIDv3_iiN5utils8SimdHashIS3_EENS4_9SimdEqualIS3_EENS1_9allocatorINS1_4pairIKS3_iEEEEEERKNS1_6vectorIS3_NS9_IS3_EEEEjib_block_invoke;
  v63 = &unk_24F2436F8;
  v72 = a7;
  v70 = a6;
  v71 = a5;
  v65 = a4;
  __p = 0;
  v67 = 0;
  v68 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, begin, (uint64_t)v73.__end_, v73.__end_ - begin);
  v69 = a3;
  v64 = &v74;
  dispatch_apply((v20 - v21) >> 4, v19, __x);
  v59 = 0;
  v58 = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v58, *((const void **)v75 + 6), *((_QWORD *)v75 + 7), (uint64_t)(*((_QWORD *)v75 + 7) - *((_QWORD *)v75 + 6)) >> 2);
  if (__p)
  {
    v67 = __p;
    operator delete(__p);
  }

  if (v73.__begin_)
  {
    v73.__end_ = v73.__begin_;
    operator delete(v73.__begin_);
  }
  _Block_object_dispose(&v74, 8);
  if (v80.__begin_)
  {
    v80.__end_ = v80.__begin_;
    operator delete(v80.__begin_);
  }
  *(_QWORD *)__x = v56;
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v57 + 216, v56, (uint64_t)&std::piecewise_construct, (__int128 **)__x);
  v24 = (uint64_t *)(v22 + 40);
  v23 = (void *)*((_QWORD *)v22 + 5);
  if (v23)
  {
    *((_QWORD *)v22 + 6) = v23;
    operator delete(v23);
    *v24 = 0;
    *((_QWORD *)v22 + 6) = 0;
    *((_QWORD *)v22 + 7) = 0;
  }
  *(_OWORD *)(v22 + 40) = v58;
  *((_QWORD *)v22 + 7) = v59;
  Input = (char *)OUDnnInferenceInterface::GetInputSpan<float,void>(*(_QWORD *)(v57 + 32), v56);
  v27 = *(_DWORD *)(v57 + 120);
  if (v27 <= 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD IS] ane_width must > 0.");
    v54 = (struct type_info *)off_24F242648;
    v55 = (void (*)(void *))MEMORY[0x24BEDAB88];
    goto LABEL_44;
  }
  v28 = (a4[1] - *a4) >> 4;
  v29 = (v27 + (int)v28 - 1) / v27;
  LODWORD(v30) = 2 * v13 * v27 * v29;
  if (v26 < (int)v30)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E2CA890](exception, "[3DOD IS] gather map capacity is too small.");
    v54 = (struct type_info *)MEMORY[0x24BEDB730];
    v55 = (void (*)(void *))MEMORY[0x24BEDAB60];
LABEL_44:
    __cxa_throw(exception, v54, v55);
  }
  v31 = Input;
  v32 = *(_QWORD *)(a3 + 24);
  v33 = v32;
  v30 = (int)v30;
  if (!*(_BYTE *)(v57 + 472))
    v30 = v26;
  if (v30)
    memset_pattern16(Input, &unk_229561750, 4 * v30);
  LODWORD(v74) = 0;
  std::vector<float>::vector(__x, (int)v32, &v74);
  LODWORD(v73.__begin_) = 0;
  std::vector<float>::vector(&v74, (int)v32, &v73);
  if ((int)v32 >= 1)
  {
    v34 = 0;
    v35 = 0;
    v36 = *(float **)__x;
    v37 = (float *)v74;
    do
    {
      *v36++ = (float)v35;
      *v37++ = (float)v34;
      if (v34 + 1 == v27)
      {
        ++v35;
        v34 = 0;
      }
      else
      {
        ++v34;
      }
      --v33;
    }
    while (v33);
  }
  if (v29 >= 1)
  {
    v38 = 0;
    v39 = 0;
    v40 = *v24;
    do
    {
      if (v13 >= 1)
      {
        v41 = 0;
        v42 = *(float **)__x;
        v43 = v74;
        do
        {
          v44 = 0;
          v45 = &v31[4 * v39 + 4];
          v46 = v41;
          do
          {
            if (v44 < (int)v28)
            {
              v47 = *(int *)(v40 + 4 * v46);
              if ((_DWORD)v47 != -1)
              {
                *((float *)v45 - 1) = v42[v47];
                *(_DWORD *)v45 = v43[v47];
              }
              v46 += v13;
            }
            ++v44;
            v45 += 8;
            v39 += 2;
          }
          while (v27 != v44);
          ++v41;
        }
        while (v41 != v13);
      }
      LODWORD(v28) = v28 - v27;
      v40 += 4 * v27 * v13;
      ++v38;
    }
    while (v38 != v29);
  }
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  if (*(_QWORD *)__x)
  {
    v61 = *(_QWORD *)__x;
    operator delete(*(void **)__x);
  }
  v50 = a4;
  v48 = *a4;
  v49 = v50[1];
  v51 = *(_DWORD *)(v57 + 120);
  result = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>((_QWORD *)(v57 + 432), v56);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  **((_DWORD **)result + 5) = (int)(v51 + ((unint64_t)(v49 - v48) >> 4) - 1) / v51;
  return result;
}

void sub_22951E644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void *v36;

  __cxa_free_exception(v36);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::ParseNetOutput(ou3dod::OU3DSparseSSDetector *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  std::string::size_type size;
  std::string *v15;
  std::string *p_p;
  uint64_t Output;
  uint64_t v18;
  _QWORD *v19;
  std::string *v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  double v33;
  float v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  std::string::size_type v40;
  unint64_t v41;
  std::string v42;
  std::string v43;
  std::string __p;

  v2 = *((int *)this + 39);
  if (v2 > 2)
    v40 = 0;
  else
    v40 = qword_229561730[v2];
  v39 = (*((_DWORD *)this + 33) - *((_DWORD *)this + 34));
  v3 = *((unsigned int *)this + 29);
  if ((v3 & 0x80000000) == 0)
  {
    v41 = 0;
    v4 = (16 * v3) | 8;
    v5 = 24 * v3 + 8;
    while (1)
    {
      std::to_string(&v42, v3);
      v6 = std::string::insert(&v42, 0, "l", 1uLL);
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      v8 = std::string::append(&v43, "_", 1uLL);
      __p = *v8;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      v9 = (uint64_t *)(*((_QWORD *)this + 21) + v5);
      v10 = *(v9 - 1);
      v11 = *v9;
      v12 = *((_QWORD *)this + 4);
      v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v43, size + 7);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v43;
      else
        v15 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if (size)
      {
        if (v13 >= 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v15, p_p, size);
      }
      strcpy((char *)v15 + size, "preds_1");
      Output = OUDnnInferenceInterface::GetOutputSpan<float,void>(v12, (unsigned __int8 *)&v43);
      v18 = (v11 - v10) >> 4;
      v19 = (_QWORD *)(*((_QWORD *)this + 32) + v4);
      *(v19 - 1) = Output;
      *v19 = v18 * v40;
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]((uint64_t)&v43, size + 8);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v43;
      else
        v20 = (std::string *)v43.__r_.__value_.__r.__words[0];
      if (size)
      {
        if (v13 >= 0)
          v21 = &__p;
        else
          v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v20, v21, size);
      }
      strcpy((char *)v20 + size, "scores_1");
      v22 = *((_QWORD *)this + 4);
      if (v3)
      {
        v23 = OUDnnInferenceInterface::GetOutputSpan<float,void>(v22, (unsigned __int8 *)&v43);
        v25 = v18 * v39;
        if (v18 * v39 == -1)
          v25 = v24;
        v26 = (uint64_t *)(*((_QWORD *)this + 35) + v4);
        *(v26 - 1) = v23;
        *v26 = v25;
        v41 += v18;
      }
      else
      {
        v27 = OUDnnInferenceInterface::GetOutputSpan<float,void>(v22, (unsigned __int8 *)&v43);
        v29 = v18 * *((unsigned int *)this + 33);
        v30 = (uint64_t *)*((_QWORD *)this + 35);
        if (v29 == -1)
          v29 = v28;
        *v30 = v27;
        v30[1] = v29;
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v43.__r_.__value_.__l.__data_);
        if (v13 < 0)
LABEL_44:
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (v13 < 0)
      {
        goto LABEL_44;
      }
      v4 -= 16;
      v5 -= 24;
      if (v3-- <= 0)
        goto LABEL_46;
    }
  }
  v41 = 0;
LABEL_46:
  *((_QWORD *)this + 39) = *((_QWORD *)this + 38);
  *((_QWORD *)this + 42) = *((_QWORD *)this + 41);
  *((_QWORD *)this + 45) = *((_QWORD *)this + 44);
  *((_QWORD *)this + 48) = *((_QWORD *)this + 47);
  std::vector<box3d>::reserve((void **)this + 38, v41);
  std::vector<float>::reserve((void **)this + 41, v41);
  std::vector<float>::reserve((void **)this + 44, v41 * v39);
  std::vector<box3d>::reserve((void **)this + 47, (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 21) + 8) - **((_QWORD **)this + 21)) >> 4);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  __p.__r_.__value_.__l.__size_ = v40;
  v32 = *((unsigned int *)this + 29);
  if ((v32 & 0x80000000) == 0)
  {
    v33 = *((float *)this + 20);
    v34 = ldexp(1.0, *((_DWORD *)this + 29)) * v33;
    if ((_DWORD)v32)
    {
      v35 = v32 - 1;
      v36 = 16 * v32;
      v37 = 24 * v32;
      do
      {
        ou3dod::OU3DSparseSSDetector::ParseNetOutput(void)::$_0::operator()((uint64_t *)&__p, (void **)this + 38, (uint64_t)this + 328, (uint64_t *)(*((_QWORD *)this + 21) + v37), (_QWORD *)(*((_QWORD *)this + 32) + v36), v34);
        std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((uint64_t)this + 352, *((_QWORD *)this + 45), *(char **)(*((_QWORD *)this + 35) + v36), (char *)(*(_QWORD *)(*((_QWORD *)this + 35) + v36) + 4 * *(_QWORD *)(*((_QWORD *)this + 35) + v36 + 8)), *(_QWORD *)(*((_QWORD *)this + 35) + v36 + 8));
        v38 = *((float *)this + 20);
        v34 = ldexp(1.0, v35--) * v38;
        v37 -= 24;
        v36 -= 16;
      }
      while (v36);
    }
    ou3dod::OU3DSparseSSDetector::ParseNetOutput(void)::$_0::operator()((uint64_t *)&__p, (void **)this + 47, 0, *((uint64_t **)this + 21), *((_QWORD **)this + 32), v34);
  }
}

void sub_22951EAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25)
{
  int v25;

  if (a23 < 0)
    operator delete(__p);
  if (v25 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void std::vector<box3d>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 7)
  {
    if (a2 >> 57)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFF80];
    v9 = &v6[128 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 8);
        v14 = *((_OWORD *)v10 - 7);
        v15 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v15;
        *((_OWORD *)v12 - 8) = v13;
        *((_OWORD *)v12 - 7) = v14;
        v16 = *((_OWORD *)v10 - 4);
        v17 = *((_OWORD *)v10 - 3);
        v18 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v18;
        *((_OWORD *)v12 - 4) = v16;
        *((_OWORD *)v12 - 3) = v17;
        v12 -= 128;
        v10 -= 128;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void ou3dod::OU3DSparseSSDetector::ParseNetOutput(void)::$_0::operator()(uint64_t *a1, void **a2, uint64_t a3, uint64_t *a4, _QWORD *a5, float a6)
{
  uint64_t v6;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  int v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t *v34;
  __int32 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _OWORD *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  float *v67;
  float *v68;
  float *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  float *v75;
  int v76;
  std::logic_error *exception;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int32 v82;
  int32x4_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v6 = *a4;
  if (a4[1] != *a4)
  {
    v11 = 0;
    v12 = 0;
    v78 = a3 + 16;
    v79 = (uint64_t)(a2 + 2);
    v80 = *a1;
    do
    {
      v84 = *(int32x4_t *)(v6 + 16 * v11);
      v13 = (float *)(*a5 + 4 * v12);
      v14 = *(_DWORD *)(v80 + 156);
      v15 = expf(*v13);
      v16 = expf(v13[1]);
      v17 = expf(v13[2]);
      v18 = expf(v13[3]);
      v19 = expf(v13[4]);
      v20 = expf(v13[5]);
      if (v14 == 2)
      {
        v22 = 0;
        v23 = -1;
        v24 = -3.4028e38;
        do
        {
          if (v13[v22 + 6] > v24)
          {
            v24 = v13[v22 + 6];
            v23 = v22;
          }
          ++v22;
        }
        while (v22 != 12);
        v25 = (float)v23;
        v26 = expf(v13[v23 + 18]);
        v21 = (float)(v26 + (float)(v25 * 0.5236))
            - floor((float)(v26 + (float)(v25 * 0.5236)) / 6.28318531) * 6.28318531;
      }
      else
      {
        v21 = 0.0;
        if (v14 == 1)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::invalid_argument::invalid_argument[abi:ne180100](exception, "[OU3D IS] Not implemented.");
          __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
        }
      }
      v27 = 0;
      v28.i32[3] = v82;
      v28.f32[0] = v16 - v15;
      v28.f32[1] = v18 - v17;
      v28.f32[2] = v20 - v19;
      v31.i64[0] = 0x3F0000003F000000;
      v31.i64[1] = 0x3F0000003F000000;
      v30 = vmulq_f32(v28, v31);
      v29 = vaddq_f32(vmulq_n_f32(vcvtq_f32_s32(v84), a6), v30);
      v30.f32[0] = (float)(v15 + v16) * 0.5;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      *(float *)&v93 = -(float)((float)(v19 + v20) * 0.5);
      *((float *)&v93 + 1) = (float)(v19 + v20) * 0.5;
      v31.f32[0] = -v30.f32[0];
      v32 = v31;
      v33 = v30;
      v34 = (float32x4_t *)&v87;
      do
      {
        v35 = *(_DWORD *)((char *)&v93 + v27);
        v32.f32[1] = -(float)((float)(v17 + v18) * 0.5);
        v36 = v32;
        v36.i32[2] = v35;
        v31.f32[1] = (float)(v17 + v18) * 0.5;
        v37 = v31;
        v37.i32[2] = v35;
        v34[-2] = vaddq_f32(v29, v36);
        v34[-1] = vaddq_f32(v29, v37);
        v33.f32[1] = v31.f32[1];
        v38 = v33;
        v38.i32[2] = v35;
        v30.f32[1] = v32.f32[1];
        v39 = v30;
        v39.i32[2] = v35;
        v27 += 4;
        *v34 = vaddq_f32(v29, v38);
        v34[1] = vaddq_f32(v29, v39);
        v34 += 4;
      }
      while (v27 != 8);
      v97 = v89;
      v98 = v90;
      v99 = v91;
      v100 = v92;
      v93 = v85;
      v94 = v86;
      v95 = v87;
      v96 = v88;
      v40 = a2[1];
      v41 = (unint64_t)a2[2];
      if ((unint64_t)v40 >= v41)
      {
        v47 = ((char *)v40 - (_BYTE *)*a2) >> 7;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 57)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v49 = v41 - (_QWORD)*a2;
        if (v49 >> 6 > v48)
          v48 = v49 >> 6;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFF80)
          v50 = 0x1FFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>(v79, v50);
        else
          v51 = 0;
        v52 = &v51[128 * v47];
        v53 = v94;
        *(_OWORD *)v52 = v93;
        *((_OWORD *)v52 + 1) = v53;
        v54 = v96;
        *((_OWORD *)v52 + 2) = v95;
        *((_OWORD *)v52 + 3) = v54;
        v55 = v100;
        *((_OWORD *)v52 + 6) = v99;
        *((_OWORD *)v52 + 7) = v55;
        v56 = v98;
        *((_OWORD *)v52 + 4) = v97;
        *((_OWORD *)v52 + 5) = v56;
        v58 = (char *)*a2;
        v57 = (char *)a2[1];
        v59 = v52;
        if (v57 != *a2)
        {
          do
          {
            v60 = *((_OWORD *)v57 - 8);
            v61 = *((_OWORD *)v57 - 7);
            v62 = *((_OWORD *)v57 - 5);
            *((_OWORD *)v59 - 6) = *((_OWORD *)v57 - 6);
            *((_OWORD *)v59 - 5) = v62;
            *((_OWORD *)v59 - 8) = v60;
            *((_OWORD *)v59 - 7) = v61;
            v63 = *((_OWORD *)v57 - 4);
            v64 = *((_OWORD *)v57 - 3);
            v65 = *((_OWORD *)v57 - 1);
            *((_OWORD *)v59 - 2) = *((_OWORD *)v57 - 2);
            *((_OWORD *)v59 - 1) = v65;
            *((_OWORD *)v59 - 4) = v63;
            *((_OWORD *)v59 - 3) = v64;
            v59 -= 128;
            v57 -= 128;
          }
          while (v57 != v58);
          v57 = (char *)*a2;
        }
        v46 = v52 + 128;
        *a2 = v59;
        a2[1] = v52 + 128;
        a2[2] = &v51[128 * v50];
        if (v57)
          operator delete(v57);
      }
      else
      {
        v42 = v98;
        v40[4] = v97;
        v40[5] = v42;
        v43 = v100;
        v40[6] = v99;
        v40[7] = v43;
        v44 = v94;
        *v40 = v93;
        v40[1] = v44;
        v45 = v96;
        v40[2] = v95;
        v40[3] = v45;
        v46 = v40 + 8;
      }
      a2[1] = v46;
      if (a3)
      {
        v67 = *(float **)(a3 + 8);
        v66 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v67 >= v66)
        {
          v69 = *(float **)a3;
          v70 = ((uint64_t)v67 - *(_QWORD *)a3) >> 2;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v72 = v66 - (_QWORD)v69;
          if (v72 >> 1 > v71)
            v71 = v72 >> 1;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
            v73 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v73 = v71;
          if (v73)
          {
            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v78, v73);
            v69 = *(float **)a3;
            v67 = *(float **)(a3 + 8);
          }
          else
          {
            v74 = 0;
          }
          v75 = (float *)&v74[4 * v70];
          *v75 = v21;
          v68 = v75 + 1;
          while (v67 != v69)
          {
            v76 = *((_DWORD *)v67-- - 1);
            *((_DWORD *)v75-- - 1) = v76;
          }
          *(_QWORD *)a3 = v75;
          *(_QWORD *)(a3 + 8) = v68;
          *(_QWORD *)(a3 + 16) = &v74[4 * v73];
          if (v69)
            operator delete(v69);
        }
        else
        {
          *v67 = v21;
          v68 = v67 + 1;
        }
        *(_QWORD *)(a3 + 8) = v68;
      }
      ++v11;
      v12 += a1[1];
      v6 = *a4;
    }
    while (v11 < (a4[1] - *a4) >> 4);
  }
}

void sub_22951F0E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(ou3dod::OU3DSparseSSDetector *this)
{
  int v2;
  int v3;
  std::vector<int>::size_type v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  std::vector<int>::pointer v22;
  std::vector<int>::pointer end;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  std::vector<int>::pointer v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  std::vector<int>::value_type *v33;
  std::vector<int>::pointer v34;
  std::vector<int>::pointer v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v46;
  std::vector<int>::pointer v47;
  std::vector<int>::pointer v48;
  unint64_t v49;
  uint64_t v50;
  float v51;
  _OWORD *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  void **v60;
  uint64_t *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t **v68;
  void *v69;
  std::vector<int>::value_type **v70;
  uint64_t v71;
  std::vector<int>::value_type *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _OWORD *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  float *v105;
  float *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t i;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  uint64_t *v117;
  float v118;
  void *v119;
  __CFString *v120;
  uint64_t ***v121;
  unint64_t *v122;
  char *v123;
  char *v124;
  void *__p;
  uint64_t *v126;
  uint64_t **v127;
  void *v128;
  char *v129;
  unint64_t v130;
  std::vector<int> v131;
  std::vector<int>::value_type __x[4];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  id v140;
  id v141;
  id v142;
  void *v143;
  void *v144;
  void *v145;
  id v146;
  std::vector<int>::value_type *v147;
  void **p_p;
  uint64_t *v149;
  uint64_t **v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)this + 33);
  v3 = *((_DWORD *)this + 34);
  v4 = (uint64_t)(*((_QWORD *)this + 39) - *((_QWORD *)this + 38)) >> 7;
  __x[0] = 0;
  std::vector<int>::vector(&v131, v4, __x);
  v5 = (v2 - v3);
  v6 = *((_QWORD *)this + 39) - *((_QWORD *)this + 38);
  v7 = v6 >> 7;
  if ((int)(v6 >> 7) >= 1)
  {
    v8 = 0;
    begin = v131.__begin_;
    v10 = ((unint64_t)v6 >> 7);
    do
    {
      begin[v8] = v8;
      ++v8;
    }
    while (v10 != v8);
  }
  if (v7 > *((unsigned int *)this + 32))
  {
    LODWORD(v147) = -8388609;
    std::vector<float>::vector(__x, v7, &v147);
    v11 = *((_QWORD *)this + 39) - *((_QWORD *)this + 38);
    if ((int)(v11 >> 7) >= 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = *(_QWORD *)__x;
      if (v5 <= 1)
        v15 = 1;
      else
        v15 = (v2 - v3);
      v16 = (v11 >> 7);
      do
      {
        if (v2 != v3)
        {
          v17 = *(float *)(v14 + 4 * v12);
          v18 = (float *)(*((_QWORD *)this + 44) + 4 * v13);
          v13 += v15;
          v19 = v15;
          do
          {
            v20 = *v18;
            if (v17 < *v18)
            {
              *(float *)(v14 + 4 * v12) = v20;
              v17 = v20;
            }
            ++v18;
            --v19;
          }
          while (v19);
        }
        ++v12;
      }
      while (v12 != v16);
    }
    v21 = *((unsigned int *)this + 32);
    v22 = v131.__begin_;
    end = v131.__end_;
    v147 = __x;
    if ((_DWORD)v21)
    {
      v24 = &v131.__begin_[v21];
      if ((_DWORD)v21 != 1)
      {
        v25 = (unint64_t)(v21 - 2) >> 1;
        v26 = v25 + 1;
        v27 = &v131.__begin_[v25];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v22, (uint64_t **)&v147, v21, v27--);
          --v26;
        }
        while (v26);
      }
      if (v24 != end)
      {
        v28 = &v22[v21];
        do
        {
          v29 = *v28;
          v30 = *v22;
          if (*(float *)(*(_QWORD *)__x + 4 * v29) > *(float *)(*(_QWORD *)__x + 4 * v30))
          {
            *v28 = v30;
            *v22 = v29;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_0 &,std::__wrap_iter<int *>>((uint64_t)v22, (uint64_t **)&v147, v21, v22);
          }
          ++v28;
        }
        while (v28 != end);
      }
      if ((_DWORD)v21 != 1)
      {
        do
        {
          v31 = 0;
          v32 = *v22;
          v33 = v147;
          v34 = v22;
          do
          {
            v35 = v34;
            v34 += v31 + 1;
            v36 = 2 * v31;
            v31 = (2 * v31) | 1;
            v37 = v36 + 2;
            if (v37 < v21 && *(float *)(*(_QWORD *)v33 + 4 * *v34) > *(float *)(*(_QWORD *)v33 + 4 * v34[1]))
            {
              ++v34;
              v31 = v37;
            }
            *v35 = *v34;
          }
          while (v31 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
          if (v34 == --v24)
          {
            *v34 = v32;
          }
          else
          {
            *v34 = *v24;
            *v24 = v32;
            v38 = (char *)v34 - (char *)v22 + 4;
            if (v38 >= 5)
            {
              v39 = (((unint64_t)v38 >> 2) - 2) >> 1;
              v40 = &v22[v39];
              v41 = *v40;
              v42 = *(_QWORD *)v33;
              v43 = *v34;
              v44 = *(float *)(v42 + 4 * v43);
              if (*(float *)(v42 + 4 * v41) > v44)
              {
                do
                {
                  *v34 = v41;
                  v34 = v40;
                  if (!v39)
                    break;
                  v39 = (v39 - 1) >> 1;
                  v40 = &v22[v39];
                  v41 = *v40;
                }
                while (*(float *)(v42 + 4 * v41) > v44);
                *v34 = v43;
              }
            }
          }
        }
        while (v21-- > 2);
      }
    }
    std::vector<int>::resize(&v131, *((unsigned int *)this + 32));
    if (*(_QWORD *)__x)
    {
      *(_QWORD *)&__x[2] = *(_QWORD *)__x;
      operator delete(*(void **)__x);
    }
  }
  v128 = 0;
  v129 = 0;
  v130 = 0;
  if ((int)v5 >= 1)
  {
    v46 = 0;
    v121 = &v127;
    v122 = &v130;
    while (1)
    {
      __p = 0;
      v126 = 0;
      v127 = 0;
      v47 = v131.__begin_;
      v48 = v131.__end_;
      if (v131.__begin_ == v131.__end_)
      {
        v69 = 0;
        v49 = 0;
      }
      else
      {
        v49 = 0;
        do
        {
          v50 = *v47;
          v51 = *(float *)(*((_QWORD *)this + 44) + 4 * (v46 + v50 * v5));
          if (v51 > *((float *)this + 35))
          {
            v52 = (_OWORD *)(*((_QWORD *)this + 38) + (v50 << 7));
            v136 = v52[4];
            v137 = v52[5];
            v138 = v52[6];
            v139 = v52[7];
            *(_OWORD *)__x = *v52;
            v133 = v52[1];
            v134 = v52[2];
            v135 = v52[3];
            v53 = *(_DWORD *)(*((_QWORD *)this + 41) + 4 * v50);
            if (v49 >= (unint64_t)v127)
            {
              v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v49 - (_QWORD)__p) >> 4);
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) > 0x1C71C71C71C71C7)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              if (0x1C71C71C71C71C72 * (((char *)v127 - (_BYTE *)__p) >> 4) > v55)
                v55 = 0x1C71C71C71C71C72 * (((char *)v127 - (_BYTE *)__p) >> 4);
              if (0x8E38E38E38E38E39 * (((char *)v127 - (_BYTE *)__p) >> 4) >= 0xE38E38E38E38E3)
                v56 = 0x1C71C71C71C71C7;
              else
                v56 = v55;
              std::__split_buffer<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore> &>::__split_buffer(&v147, v56, v54, (uint64_t)v121);
              v57 = v149;
              *((_OWORD *)v149 + 4) = v136;
              *((_OWORD *)v57 + 5) = v137;
              *((_OWORD *)v57 + 6) = v138;
              *((_OWORD *)v57 + 7) = v139;
              *(_OWORD *)v57 = *(_OWORD *)__x;
              *((_OWORD *)v57 + 1) = v133;
              *((_OWORD *)v57 + 2) = v134;
              *((_OWORD *)v57 + 3) = v135;
              *((_DWORD *)v57 + 32) = v53;
              *((_DWORD *)v57 + 33) = v46;
              *((float *)v57 + 34) = v51;
              v58 = (uint64_t *)__p;
              v59 = v126;
              v60 = p_p;
              if (v126 == __p)
              {
                v58 = v126;
              }
              else
              {
                v61 = v126;
                do
                {
                  *((_OWORD *)v60 - 9) = *((_OWORD *)v61 - 9);
                  v62 = *((_OWORD *)v61 - 8);
                  v63 = *((_OWORD *)v61 - 7);
                  v64 = *((_OWORD *)v61 - 5);
                  *((_OWORD *)v60 - 6) = *((_OWORD *)v61 - 6);
                  *((_OWORD *)v60 - 5) = v64;
                  *((_OWORD *)v60 - 8) = v62;
                  *((_OWORD *)v60 - 7) = v63;
                  v65 = *((_OWORD *)v61 - 4);
                  v66 = *((_OWORD *)v61 - 3);
                  v67 = *((_OWORD *)v61 - 1);
                  *((_OWORD *)v60 - 2) = *((_OWORD *)v61 - 2);
                  *((_OWORD *)v60 - 1) = v67;
                  *((_OWORD *)v60 - 4) = v65;
                  *((_OWORD *)v60 - 3) = v66;
                  v60 -= 18;
                  v61 -= 18;
                }
                while (v61 != v58);
              }
              v49 = (unint64_t)(v57 + 18);
              __p = v60;
              v126 = v57 + 18;
              v68 = v127;
              v127 = v150;
              v149 = v59;
              v150 = v68;
              v147 = (std::vector<int>::value_type *)v58;
              p_p = (void **)v58;
              if (v59 != v58)
                v149 = (uint64_t *)((char *)v59 - 144 - 144 * (((char *)v59 - (char *)v58 - 144) / 0x90uLL));
              if (v58)
                operator delete(v58);
            }
            else
            {
              memmove((void *)v49, v52, 0x80uLL);
              *(_DWORD *)(v49 + 128) = v53;
              *(_DWORD *)(v49 + 132) = v46;
              *(float *)(v49 + 136) = v51;
              v49 += 144;
            }
            v126 = (uint64_t *)v49;
          }
          ++v47;
        }
        while (v47 != v48);
        v69 = __p;
      }
      *(_QWORD *)__x = &off_24F243738;
      *(_QWORD *)&__x[2] = &__p;
      *((_QWORD *)&v133 + 1) = __x;
      v147 = (std::vector<int>::value_type *)&off_24F2437B8;
      p_p = &__p;
      v150 = (uint64_t **)&v147;
      NonMaximumSuppression((uint64_t)__x, 954437177 * ((v49 - (unint64_t)v69) >> 4), (uint64_t)&v147, &v123, *((float *)this + 36));
      v70 = (std::vector<int>::value_type **)v150;
      if (v150 == (uint64_t **)&v147)
      {
        v70 = &v147;
        v71 = 4;
      }
      else
      {
        if (!v150)
          goto LABEL_73;
        v71 = 5;
      }
      (*(void (**)(void))&(*v70)[2 * v71])();
LABEL_73:
      v72 = (std::vector<int>::value_type *)*((_QWORD *)&v133 + 1);
      if (*((std::vector<int>::value_type **)&v133 + 1) == __x)
      {
        v72 = __x;
        v73 = 4;
        goto LABEL_77;
      }
      if (*((_QWORD *)&v133 + 1))
      {
        v73 = 5;
LABEL_77:
        (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
      }
      v75 = v123;
      v74 = v124;
      if (v123 != v124)
      {
        v76 = v129;
        do
        {
          v77 = (char *)__p + 144 * *(_QWORD *)v75;
          if ((unint64_t)v76 >= v130)
          {
            v84 = 0x8E38E38E38E38E39 * ((v76 - (_BYTE *)v128) >> 4);
            v85 = v84 + 1;
            if ((unint64_t)(v84 + 1) > 0x1C71C71C71C71C7)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if (0x1C71C71C71C71C72 * ((uint64_t)(v130 - (_QWORD)v128) >> 4) > v85)
              v85 = 0x1C71C71C71C71C72 * ((uint64_t)(v130 - (_QWORD)v128) >> 4);
            if (0x8E38E38E38E38E39 * ((uint64_t)(v130 - (_QWORD)v128) >> 4) >= 0xE38E38E38E38E3)
              v86 = 0x1C71C71C71C71C7;
            else
              v86 = v85;
            std::__split_buffer<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore> &>::__split_buffer(__x, v86, v84, (uint64_t)v122);
            v87 = (_OWORD *)v133;
            v88 = v77[1];
            v89 = v77[2];
            v90 = v77[4];
            *(_OWORD *)(v133 + 48) = v77[3];
            v87[4] = v90;
            v87[2] = v89;
            v91 = v77[8];
            v93 = v77[5];
            v92 = v77[6];
            v87[7] = v77[7];
            v87[8] = v91;
            v87[5] = v93;
            v87[6] = v92;
            *v87 = *v77;
            v87[1] = v88;
            v94 = (char *)v128;
            v95 = v129;
            v96 = *(char **)&__x[2];
            if (v129 == v128)
            {
              v94 = v129;
            }
            else
            {
              v97 = v129;
              do
              {
                *((_OWORD *)v96 - 9) = *((_OWORD *)v97 - 9);
                v98 = *((_OWORD *)v97 - 8);
                v99 = *((_OWORD *)v97 - 7);
                v100 = *((_OWORD *)v97 - 5);
                *((_OWORD *)v96 - 6) = *((_OWORD *)v97 - 6);
                *((_OWORD *)v96 - 5) = v100;
                *((_OWORD *)v96 - 8) = v98;
                *((_OWORD *)v96 - 7) = v99;
                v101 = *((_OWORD *)v97 - 4);
                v102 = *((_OWORD *)v97 - 3);
                v103 = *((_OWORD *)v97 - 1);
                *((_OWORD *)v96 - 2) = *((_OWORD *)v97 - 2);
                *((_OWORD *)v96 - 1) = v103;
                *((_OWORD *)v96 - 4) = v101;
                *((_OWORD *)v96 - 3) = v102;
                v96 -= 144;
                v97 -= 144;
              }
              while (v97 != v94);
            }
            v76 = (char *)(v87 + 9);
            v128 = v96;
            v129 = (char *)(v87 + 9);
            v104 = v130;
            v130 = *((_QWORD *)&v133 + 1);
            *(_QWORD *)&v133 = v95;
            *((_QWORD *)&v133 + 1) = v104;
            *(_QWORD *)__x = v94;
            *(_QWORD *)&__x[2] = v94;
            if (v95 != v94)
              *(_QWORD *)&v133 = &v95[-144 - 144 * ((v95 - v94 - 144) / 0x90uLL)];
            if (v94)
              operator delete(v94);
          }
          else
          {
            *(_OWORD *)v76 = *v77;
            v78 = v77[1];
            v79 = v77[2];
            v80 = v77[4];
            *((_OWORD *)v76 + 3) = v77[3];
            *((_OWORD *)v76 + 4) = v80;
            *((_OWORD *)v76 + 1) = v78;
            *((_OWORD *)v76 + 2) = v79;
            v81 = v77[5];
            v82 = v77[6];
            v83 = v77[8];
            *((_OWORD *)v76 + 7) = v77[7];
            *((_OWORD *)v76 + 8) = v83;
            *((_OWORD *)v76 + 5) = v81;
            *((_OWORD *)v76 + 6) = v82;
            v76 += 144;
          }
          v129 = v76;
          v75 += 8;
        }
        while (v75 != v74);
        v75 = v123;
      }
      if (v75)
      {
        v124 = v75;
        operator delete(v75);
      }
      if (__p)
      {
        v126 = (uint64_t *)__p;
        operator delete(__p);
      }
      if (++v46 == v5)
      {
        v105 = (float *)v128;
        v106 = (float *)v129;
        goto LABEL_106;
      }
    }
  }
  v106 = 0;
  v105 = 0;
LABEL_106:
  v107 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((char *)v106 - (char *)v105) >> 4));
  if (v106 == v105)
    v108 = 0;
  else
    v108 = v107;
  std::__introsort<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *,false>((uint64_t)v105, v106, v108, 1);
  v109 = *((_QWORD *)this + 1);
  if (0x8E38E38E38E38E39 * ((v129 - (_BYTE *)v128) >> 4) >= *((unsigned int *)this + 31))
    v110 = *((unsigned int *)this + 31);
  else
    v110 = 0x8E38E38E38E38E39 * ((v129 - (_BYTE *)v128) >> 4);
  for (i = *((_QWORD *)this + 2); i != v109; std::__destroy_at[abi:ne180100]<OUBox3d,0>(i))
    i -= 224;
  *((_QWORD *)this + 2) = v109;
  std::vector<OUBox3d>::reserve((uint64_t *)this + 1, v110);
  v122 = (unint64_t *)((char *)this + 400);
  std::vector<float>::resize((uint64_t)this + 400, v110);
  v112 = (char *)v128;
  if (v110)
  {
    v113 = 0;
    v114 = 0;
    v115 = 4 * v110;
    do
    {
      v116 = (__int128 *)&v112[v113];
      v117 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(kSparseSSDObjectLabels, (int *)&v112[v113 + 132]);
      if (!v117)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v118 = *(float *)((char *)v128 + v113 + 136);
      objc_msgSend(MEMORY[0x24BDD1880], "UUID");
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(__p) = 0;
      std::vector<float>::vector(&v147, 0x15uLL, &__p);
      if (*((_BYTE *)this + 473))
        v120 = CFSTR("online");
      else
        v120 = CFSTR("offline");
      OUBox3d::OUBox3d((uint64_t)__x, v116, (id *)v117 + 3, v119, (uint64_t)&v147, v120, v118);
      std::vector<OUBox3d>::emplace_back<OUBox3d>((uint64_t *)this + 1, (__int128 *)__x);

      if (v145)
        operator delete(v145);
      if (v143)
      {
        v144 = v143;
        operator delete(v143);
      }

      if (v147)
      {
        p_p = (void **)v147;
        operator delete(v147);
      }

      v112 = (char *)v128;
      *(_DWORD *)(*v122 + v114) = *(_DWORD *)((char *)v128 + v113 + 128);
      v114 += 4;
      v113 += 144;
    }
    while (v115 != v114);
  }
  else if (!v128)
  {
    goto LABEL_131;
  }
  v129 = v112;
  operator delete(v112);
LABEL_131:
  if (v131.__begin_)
  {
    v131.__end_ = v131.__begin_;
    operator delete(v131.__begin_);
  }
}

void sub_22951FB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t ou3dod::OU3DSparseSSDetector::InstanceSegmentation(ou3dod::OU3DSparseSSDetector *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  OU3DVoxel *v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  float *v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  float32x4_t *v28;
  uint64_t v29;
  double v30;
  uint64_t v32;
  float v33;
  char v34;
  _QWORD v35[5];

  v2 = (uint64_t *)*((_QWORD *)this + 21);
  v4 = *v2;
  v3 = v2[1];
  v5 = (v3 - *v2) >> 4;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = v6;

  if (v3 == v4)
  {
    v33 = 3.7912e-37;
    v34 = 0;
    std::unordered_set<SemanticLabelv5>::unordered_set((uint64_t)v35, (unsigned __int8 *)&v33, 5);
  }
  else
  {
    v32 = v3;
    v8 = 0;
    if (v5 <= 1)
      v9 = 1;
    else
      v9 = v5;
    do
    {
      v10 = objc_alloc_init(OU3DVoxel);
      v11.i64[0] = 0x3F0000003F000000;
      v11.i64[1] = 0x3F0000003F000000;
      -[OU3DVoxel setCenter:](v10, "setCenter:", *(double *)vmulq_f32(*((float32x4_t *)this + 5), vaddq_f32(vcvtq_f32_s32(*(int32x4_t *)(**((_QWORD **)this + 21) + 16 * v8)), v11)).i64);
      -[OU3DVoxel setSize:](v10, "setSize:", *((double *)this + 10));
      objc_msgSend(*((id *)this + 53), "addObject:", v10);

      ++v8;
    }
    while (v9 != v8);
    v12 = 0;
    v13 = 0;
    v14 = (_QWORD *)*((_QWORD *)this + 35);
    do
    {
      v33 = 0.0;
      v15 = *((_DWORD *)this + 33);
      if (v15 < 2)
      {
        ++v12;
      }
      else
      {
        v16 = (float *)(*v14 + 4 * v12);
        v17 = *v16;
        v18 = 1;
        do
        {
          v19 = v16[v18];
          if (v19 > v17)
          {
            v33 = *(float *)&v18;
            v17 = v19;
          }
          ++v18;
        }
        while (v15 != (_DWORD)v18);
        v12 += v15 - 2 + 2;
      }
      v20 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(kSparseSSDSemanticLabels, (int *)&v33);
      if (!v20)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v21 = *((unsigned __int8 *)v20 + 20);
      objc_msgSend(*((id *)this + 53), "objectAtIndexedSubscript:", v13);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setSemantic_label:", v21);

      ++v13;
    }
    while (v13 != v9);
    v33 = 3.7912e-37;
    v34 = 0;
    std::unordered_set<SemanticLabelv5>::unordered_set((uint64_t)v35, (unsigned __int8 *)&v33, 5);
    if (v32 != v4)
    {
      v23 = 0;
      if (v5 <= 1)
        v24 = 1;
      else
        v24 = v5;
      do
      {
        objc_msgSend(*((id *)this + 53), "objectAtIndexedSubscript:", v23, v32);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v33) = objc_msgSend(v25, "semantic_label");
        if (!std::__hash_table<std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::vector<unsigned short>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::vector<unsigned short>>>>::find<unsigned char>(v35, (unsigned __int8 *)&v33))
        {
          v26 = *((_QWORD *)this + 1);
          if (*((_QWORD *)this + 2) != v26)
          {
            v27 = 0;
            v28 = (float32x4_t *)(*((_QWORD *)this + 47) + (v23 << 7));
            v29 = 144;
            while (1)
            {
              box3dIou(v28, (float32x4_t *)(v26 + v29 - 144), 0, (uint64_t)&v33);
              *(float *)&v30 = v33;
              if (v33 > *((float *)this + 37))
                break;
              ++v27;
              v26 = *((_QWORD *)this + 1);
              v29 += 224;
              if (v27 >= 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 2) - v26) >> 5))
                goto LABEL_21;
            }
            objc_msgSend(v25, "setObject_id:", *(_QWORD *)(v26 + v29), v30);
          }
        }
LABEL_21:

        ++v23;
      }
      while (v23 != v24);
    }
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v35);
}

void sub_22951FF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ou3dod::OU3DSparseSSDetector::Postprocess(ou3dod::OU3DSparseSSDetector *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __float2 v5;
  uint64_t v6;
  float32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  uint64_t v10;
  __int128 v11;
  float32x2_t v12;

  ou3dod::OU3DSparseSSDetector::ParseNetOutput(this);
  ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(this);
  ou3dod::OU3DSparseSSDetector::InstanceSegmentation(this);
  v2 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = __sincosf_stret(*(float *)(*((_QWORD *)this + 50) + 4 * v4));
      v6 = 0;
      v7.i64[0] = 0x3F0000003F000000;
      v7.i64[1] = 0x3F0000003F000000;
      v8 = (float32x2_t)vmulq_f32(vaddq_f32(*(float32x4_t *)(v2 + 224 * v4), *(float32x4_t *)(v2 + 224 * v4 + 32)), v7).u64[0];
      v9.f32[0] = -v5.__sinval;
      v9.i32[1] = LODWORD(v5.__cosval);
      v10 = v2 + v3;
      do
      {
        v11 = *(_OWORD *)(v10 + v6);
        v12 = vsub_f32(*(float32x2_t *)&v11, v8);
        *(_DWORD *)(v10 + v6 + 8) = DWORD2(v11);
        *(float32x2_t *)(v10 + v6) = vmla_lane_f32(vmla_n_f32(v8, (float32x2_t)__PAIR64__(LODWORD(v5.__sinval), LODWORD(v5.__cosval)), v12.f32[0]), v9, v12, 1);
        v6 += 16;
      }
      while (v6 != 128);
      ++v4;
      v2 = *((_QWORD *)this + 1);
      v3 += 224;
    }
    while (v4 < 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 2) - v2) >> 5));
  }
}

void ou3dod::OU3DSparseSSDetector::~OU3DSparseSSDetector(id *this)
{
  ou3dod::OU3DSparseSSDetector::~OU3DSparseSSDetector(this);
  JUMPOUT(0x22E2CAAE8);
}

{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void **v10;

  *this = &off_24F2436B8;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)(this + 54));

  v2 = this[50];
  if (v2)
  {
    this[51] = v2;
    operator delete(v2);
  }
  v3 = this[47];
  if (v3)
  {
    this[48] = v3;
    operator delete(v3);
  }
  v4 = this[44];
  if (v4)
  {
    this[45] = v4;
    operator delete(v4);
  }
  v5 = this[41];
  if (v5)
  {
    this[42] = v5;
    operator delete(v5);
  }
  v6 = this[38];
  if (v6)
  {
    this[39] = v6;
    operator delete(v6);
  }
  v7 = this[35];
  if (v7)
  {
    this[36] = v7;
    operator delete(v7);
  }
  v8 = this[32];
  if (v8)
  {
    this[33] = v8;
    operator delete(v8);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)(this + 27));
  v9 = this[24];
  if (v9)
  {
    this[25] = v9;
    operator delete(v9);
  }
  v10 = this + 21;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  ou3dod::OU3DODInterface::~OU3DODInterface((ou3dod::OU3DODInterface *)this);
}

uint64_t std::__split_buffer<OUEspressoInference::ModelInfo::BlobInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<OUEspressoInference::ModelInfo::BlobInfo,0>(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *_ZNSt3__16vectorINS0_IDv3_iNS_9allocatorIS1_EEEENS2_IS4_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_229520160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::span<float,18446744073709551615ul>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_2295201CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int32x4_t *_ZNSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIS2_JRKNS_21piecewise_construct_tENS_5tupleIJOS2_EEENSK_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEEbEERKT_DpOT0_(uint64_t a1, int32x4_t *a2, uint64_t a3, int32x4_t **a4)
{
  unint64_t v4;
  int32x4_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  int32x4_t **v14;
  int32x4_t *j;
  unint64_t v16;
  uint32x4_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  int32x4_t **v25;
  unint64_t v26;
  int32x4_t v28;

  v7 = *a2;
  v8 = a2->i32[0];
  v9 = 1;
  for (i = 7; i != 21; i += 7)
  {
    v28 = v7;
    v8 ^= (uint64_t)*(int *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9++ & 3))) << i;
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v11)
        v4 = v8 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v8;
    }
    v14 = *(int32x4_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (j = *v14; j; j = (int32x4_t *)j->i64[0])
      {
        v16 = j->u64[1];
        if (v16 == v8)
        {
          v17 = (uint32x4_t)vceqq_s32(j[1], v7);
          v17.i32[3] = v17.i32[2];
          if ((vminvq_u32(v17) & 0x80000000) != 0)
            return j;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  j = (int32x4_t *)operator new(0x30uLL);
  j->i64[0] = 0;
  j->i64[1] = v8;
  j[1] = **a4;
  j[2].i32[0] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v4 = v8 % v11;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v11 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(int32x4_t ***)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    j->i64[0] = (uint64_t)*v25;
LABEL_40:
    *v25 = j;
    goto LABEL_41;
  }
  j->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = j;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (j->i64[0])
  {
    v26 = *(_QWORD *)(j->i64[0] + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (int32x4_t **)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return j;
}

void sub_22952043C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

_QWORD *__copy_helper_block_ea8_48c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v2 = (_QWORD *)(a1 + 48);
  v2[2] = 0;
  return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v2, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
}

void __destroy_helper_block_ea8_48c39_ZTSNSt3__16vectorIiNS_9allocatorIiEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

int32x4_t *_ZNKSt3__112__hash_tableINS_17__hash_value_typeIDv3_iiEENS_22__unordered_map_hasherIS2_S3_N5utils8SimdHashIS2_EENS5_9SimdEqualIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S9_S7_Lb1EEENS_9allocatorIS3_EEE4findIS2_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(_QWORD *a1, int32x4_t *a2)
{
  int32x4_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  int32x4_t **v10;
  int32x4_t *result;
  unint64_t v12;
  uint32x4_t v13;
  int32x4_t v14;

  v2 = *a2;
  v3 = a2->i32[0];
  v4 = 1;
  for (i = 7; i != 21; i += 7)
  {
    v14 = v2;
    v3 ^= (uint64_t)*(int *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4++ & 3))) << i;
  }
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v3;
    if (v3 >= *(_QWORD *)&v6)
      v9 = v3 % *(_QWORD *)&v6;
  }
  else
  {
    v9 = (*(_QWORD *)&v6 - 1) & v3;
  }
  v10 = *(int32x4_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (result = *v10; result; result = (int32x4_t *)result->i64[0])
  {
    v12 = result->u64[1];
    if (v3 == v12)
    {
      v13 = (uint32x4_t)vceqq_s32(result[1], v2);
      v13.i32[3] = v13.i32[2];
      if ((vminvq_u32(v13) & 0x80000000) != 0)
        return result;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v6)
          v12 %= *(_QWORD *)&v6;
      }
      else
      {
        v12 &= *(_QWORD *)&v6 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return result;
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2295208A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_0 &,std::__wrap_iter<int *>>(uint64_t result, uint64_t **a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      v5 = ((uint64_t)a4 - result) >> 1;
      v6 = v5 | 1;
      v7 = (int *)(result + 4 * (v5 | 1));
      v8 = v5 + 2;
      v9 = **a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *v7;
      v11 = *a4;
      v12 = *(float *)(v9 + 4 * v11);
      if (*(float *)(v9 + 4 * v10) <= v12)
      {
        do
        {
          *a4 = v10;
          a4 = v7;
          if (v4 < v6)
            break;
          v13 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (int *)(result + 4 * v6);
          v14 = v13 + 2;
          if (v14 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v14;
          }
          v10 = *v7;
        }
        while (*(float *)(v9 + 4 * v10) <= v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

_QWORD *std::__split_buffer<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore> &>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x1C71C71C71C71C8)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(144 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[144 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[144 * a2];
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *,false>(uint64_t a1, float *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float v22;
  uint64_t v23;
  int v24;
  float v25;
  unint64_t v26;
  float *v27;
  float *v28;
  float v29;
  float *v30;
  float v31;
  float *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float v39;
  float v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  BOOL v48;
  uint64_t v49;
  float v50;
  unint64_t v51;
  float v52;
  float *v53;
  float *v54;
  float v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  float v63;
  float v64;
  __int128 *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 *v78;
  __int128 *v79;
  __int128 *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  float *v100;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  float *v105;
  float v106;
  int v107;
  uint64_t v108;
  float *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  int64_t v115;
  int64_t v116;
  int64_t v117;
  uint64_t v118;
  unint64_t v119;
  float v120;
  unint64_t v121;
  int v122;
  _OWORD *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  unint64_t v134;
  _OWORD *v135;
  uint64_t v136;
  uint64_t v137;
  int64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  unint64_t v152;
  float v153;
  int v154;
  _OWORD *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v163;
  float v164;
  int v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(float *a1, __int128 *a2, float *a3)
{
  __n128 result;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  result.n128_u32[0] = *((_DWORD *)a2 + 34);
  v4 = a3[34];
  if (result.n128_f32[0] <= a1[34])
  {
    if (v4 > result.n128_f32[0])
    {
      v60 = a2[6];
      v64 = a2[7];
      v68 = a2[8];
      v44 = a2[2];
      v48 = a2[3];
      v52 = a2[4];
      v56 = a2[5];
      v36 = *a2;
      v40 = (__n128)a2[1];
      *a2 = *(_OWORD *)a3;
      v11 = *((_OWORD *)a3 + 1);
      v12 = *((_OWORD *)a3 + 2);
      v13 = *((_OWORD *)a3 + 4);
      a2[3] = *((_OWORD *)a3 + 3);
      a2[4] = v13;
      a2[1] = v11;
      a2[2] = v12;
      v14 = *((_OWORD *)a3 + 5);
      v15 = *((_OWORD *)a3 + 6);
      v16 = *((_OWORD *)a3 + 8);
      a2[7] = *((_OWORD *)a3 + 7);
      a2[8] = v16;
      a2[5] = v14;
      a2[6] = v15;
      *((_OWORD *)a3 + 6) = v60;
      *((_OWORD *)a3 + 7) = v64;
      *((_OWORD *)a3 + 8) = v68;
      *((_OWORD *)a3 + 2) = v44;
      *((_OWORD *)a3 + 3) = v48;
      *((_OWORD *)a3 + 4) = v52;
      *((_OWORD *)a3 + 5) = v56;
      result = v40;
      *(_OWORD *)a3 = v36;
      *((__n128 *)a3 + 1) = v40;
      result.n128_u32[0] = *((_DWORD *)a2 + 34);
      if (result.n128_f32[0] > a1[34])
      {
        v61 = *((_OWORD *)a1 + 6);
        v65 = *((_OWORD *)a1 + 7);
        v69 = *((_OWORD *)a1 + 8);
        v45 = *((_OWORD *)a1 + 2);
        v49 = *((_OWORD *)a1 + 3);
        v53 = *((_OWORD *)a1 + 4);
        v57 = *((_OWORD *)a1 + 5);
        v37 = *(_OWORD *)a1;
        v41 = *(__n128 *)(a1 + 4);
        *(_OWORD *)a1 = *a2;
        v17 = a2[1];
        v18 = a2[2];
        v19 = a2[4];
        *((_OWORD *)a1 + 3) = a2[3];
        *((_OWORD *)a1 + 4) = v19;
        *((_OWORD *)a1 + 1) = v17;
        *((_OWORD *)a1 + 2) = v18;
        v20 = a2[5];
        v21 = a2[6];
        v22 = a2[8];
        *((_OWORD *)a1 + 7) = a2[7];
        *((_OWORD *)a1 + 8) = v22;
        *((_OWORD *)a1 + 5) = v20;
        *((_OWORD *)a1 + 6) = v21;
        a2[6] = v61;
        a2[7] = v65;
        a2[8] = v69;
        a2[2] = v45;
        a2[3] = v49;
        a2[4] = v53;
        a2[5] = v57;
        result = v41;
        *a2 = v37;
        a2[1] = (__int128)v41;
      }
    }
  }
  else
  {
    if (v4 <= result.n128_f32[0])
    {
      v62 = *((_OWORD *)a1 + 6);
      v66 = *((_OWORD *)a1 + 7);
      v70 = *((_OWORD *)a1 + 8);
      v46 = *((_OWORD *)a1 + 2);
      v50 = *((_OWORD *)a1 + 3);
      v54 = *((_OWORD *)a1 + 4);
      v58 = *((_OWORD *)a1 + 5);
      v38 = *(_OWORD *)a1;
      v42 = *(__n128 *)(a1 + 4);
      *(_OWORD *)a1 = *a2;
      v23 = a2[1];
      v24 = a2[2];
      v25 = a2[4];
      *((_OWORD *)a1 + 3) = a2[3];
      *((_OWORD *)a1 + 4) = v25;
      *((_OWORD *)a1 + 1) = v23;
      *((_OWORD *)a1 + 2) = v24;
      v26 = a2[5];
      v27 = a2[6];
      v28 = a2[8];
      *((_OWORD *)a1 + 7) = a2[7];
      *((_OWORD *)a1 + 8) = v28;
      *((_OWORD *)a1 + 5) = v26;
      *((_OWORD *)a1 + 6) = v27;
      a2[6] = v62;
      a2[7] = v66;
      a2[8] = v70;
      a2[2] = v46;
      a2[3] = v50;
      a2[4] = v54;
      a2[5] = v58;
      result = v42;
      *a2 = v38;
      a2[1] = (__int128)v42;
      result.n128_f32[0] = a3[34];
      if (result.n128_f32[0] <= *((float *)a2 + 34))
        return result;
      v59 = a2[6];
      v63 = a2[7];
      v67 = a2[8];
      v43 = a2[2];
      v47 = a2[3];
      v51 = a2[4];
      v55 = a2[5];
      v35 = *a2;
      v39 = (__n128)a2[1];
      *a2 = *(_OWORD *)a3;
      v29 = *((_OWORD *)a3 + 1);
      v30 = *((_OWORD *)a3 + 2);
      v31 = *((_OWORD *)a3 + 4);
      a2[3] = *((_OWORD *)a3 + 3);
      a2[4] = v31;
      a2[1] = v29;
      a2[2] = v30;
      v32 = *((_OWORD *)a3 + 5);
      v33 = *((_OWORD *)a3 + 6);
      v34 = *((_OWORD *)a3 + 8);
      a2[7] = *((_OWORD *)a3 + 7);
      a2[8] = v34;
      a2[5] = v32;
      a2[6] = v33;
    }
    else
    {
      v59 = *((_OWORD *)a1 + 6);
      v63 = *((_OWORD *)a1 + 7);
      v67 = *((_OWORD *)a1 + 8);
      v43 = *((_OWORD *)a1 + 2);
      v47 = *((_OWORD *)a1 + 3);
      v51 = *((_OWORD *)a1 + 4);
      v55 = *((_OWORD *)a1 + 5);
      v35 = *(_OWORD *)a1;
      v39 = *(__n128 *)(a1 + 4);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      v5 = *((_OWORD *)a3 + 1);
      v6 = *((_OWORD *)a3 + 2);
      v7 = *((_OWORD *)a3 + 4);
      *((_OWORD *)a1 + 3) = *((_OWORD *)a3 + 3);
      *((_OWORD *)a1 + 4) = v7;
      *((_OWORD *)a1 + 1) = v5;
      *((_OWORD *)a1 + 2) = v6;
      v8 = *((_OWORD *)a3 + 5);
      v9 = *((_OWORD *)a3 + 6);
      v10 = *((_OWORD *)a3 + 8);
      *((_OWORD *)a1 + 7) = *((_OWORD *)a3 + 7);
      *((_OWORD *)a1 + 8) = v10;
      *((_OWORD *)a1 + 5) = v8;
      *((_OWORD *)a1 + 6) = v9;
    }
    *((_OWORD *)a3 + 6) = v59;
    *((_OWORD *)a3 + 7) = v63;
    *((_OWORD *)a3 + 8) = v67;
    *((_OWORD *)a3 + 2) = v43;
    *((_OWORD *)a3 + 3) = v47;
    *((_OWORD *)a3 + 4) = v51;
    *((_OWORD *)a3 + 5) = v55;
    result = v39;
    *(_OWORD *)a3 = v35;
    *((__n128 *)a3 + 1) = v39;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  v4 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 8) > *(float *)(a1 + 136))
      {
        v82 = *(_OWORD *)(a1 + 96);
        v88 = *(_OWORD *)(a1 + 112);
        v94 = *(_OWORD *)(a1 + 128);
        v58 = *(_OWORD *)(a1 + 32);
        v64 = *(_OWORD *)(a1 + 48);
        v70 = *(_OWORD *)(a1 + 64);
        v76 = *(_OWORD *)(a1 + 80);
        v46 = *(_OWORD *)a1;
        v52 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 144);
        v6 = *(_OWORD *)(a2 - 128);
        v7 = *(_OWORD *)(a2 - 112);
        v8 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 64) = v8;
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 32) = v7;
        v9 = *(_OWORD *)(a2 - 64);
        v10 = *(_OWORD *)(a2 - 48);
        v11 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 128) = v11;
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a2 - 48) = v82;
        *(_OWORD *)(a2 - 32) = v88;
        *(_OWORD *)(a2 - 16) = v94;
        *(_OWORD *)(a2 - 112) = v58;
        *(_OWORD *)(a2 - 96) = v64;
        *(_OWORD *)(a2 - 80) = v70;
        *(_OWORD *)(a2 - 64) = v76;
        *(_OWORD *)(a2 - 144) = v46;
        *(_OWORD *)(a2 - 128) = v52;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)a1, (__int128 *)(a1 + 144), (float *)(a2 - 144));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)a1, (__int128 *)(a1 + 144), (__int128 *)(a1 + 288), (__int128 *)(a2 - 144));
      return 1;
    case 5uLL:
      v25 = (__int128 *)(a1 + 144);
      v26 = (__int128 *)(a1 + 288);
      v27 = (__int128 *)(a1 + 432);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)a1, (__int128 *)(a1 + 144), (__int128 *)(a1 + 288), (__int128 *)(a1 + 432));
      if (*(float *)(a2 - 8) <= *(float *)(a1 + 568))
        return 1;
      v84 = *(_OWORD *)(a1 + 528);
      v90 = *(_OWORD *)(a1 + 544);
      v96 = *(_OWORD *)(a1 + 560);
      v60 = *(_OWORD *)(a1 + 464);
      v66 = *(_OWORD *)(a1 + 480);
      v72 = *(_OWORD *)(a1 + 496);
      v78 = *(_OWORD *)(a1 + 512);
      v48 = *v27;
      v54 = *(_OWORD *)(a1 + 448);
      *v27 = *(_OWORD *)(a2 - 144);
      v28 = *(_OWORD *)(a2 - 128);
      v29 = *(_OWORD *)(a2 - 112);
      v30 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 496) = v30;
      *(_OWORD *)(a1 + 448) = v28;
      *(_OWORD *)(a1 + 464) = v29;
      v31 = *(_OWORD *)(a2 - 64);
      v32 = *(_OWORD *)(a2 - 48);
      v33 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 560) = v33;
      *(_OWORD *)(a1 + 512) = v31;
      *(_OWORD *)(a1 + 528) = v32;
      *(_OWORD *)(a2 - 48) = v84;
      *(_OWORD *)(a2 - 32) = v90;
      *(_OWORD *)(a2 - 16) = v96;
      *(_OWORD *)(a2 - 112) = v60;
      *(_OWORD *)(a2 - 96) = v66;
      *(_OWORD *)(a2 - 80) = v72;
      *(_OWORD *)(a2 - 64) = v78;
      *(_OWORD *)(a2 - 144) = v48;
      *(_OWORD *)(a2 - 128) = v54;
      if (*(float *)(a1 + 568) <= *(float *)(a1 + 424))
        return 1;
      v85 = *(_OWORD *)(a1 + 384);
      v91 = *(_OWORD *)(a1 + 400);
      v97 = *(_OWORD *)(a1 + 416);
      v61 = *(_OWORD *)(a1 + 320);
      v67 = *(_OWORD *)(a1 + 336);
      v73 = *(_OWORD *)(a1 + 352);
      v79 = *(_OWORD *)(a1 + 368);
      v49 = *v26;
      v55 = *(_OWORD *)(a1 + 304);
      v34 = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 368) = v34;
      v35 = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 400) = v35;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 560);
      v36 = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 464);
      *(_OWORD *)(a1 + 336) = v36;
      v37 = *(_OWORD *)(a1 + 448);
      *v26 = *v27;
      *(_OWORD *)(a1 + 304) = v37;
      *(_OWORD *)(a1 + 496) = v73;
      *(_OWORD *)(a1 + 512) = v79;
      *(_OWORD *)(a1 + 528) = v85;
      *(_OWORD *)(a1 + 544) = v91;
      *(_OWORD *)(a1 + 560) = v97;
      *(_OWORD *)(a1 + 464) = v61;
      *(_OWORD *)(a1 + 480) = v67;
      LODWORD(v37) = *(_DWORD *)(a1 + 424);
      LODWORD(v36) = *(_DWORD *)(a1 + 280);
      *v27 = v49;
      *(_OWORD *)(a1 + 448) = v55;
      if (*(float *)&v37 <= *(float *)&v36)
        return 1;
      v86 = *(_OWORD *)(a1 + 240);
      v92 = *(_OWORD *)(a1 + 256);
      v98 = *(_OWORD *)(a1 + 272);
      v62 = *(_OWORD *)(a1 + 176);
      v68 = *(_OWORD *)(a1 + 192);
      v74 = *(_OWORD *)(a1 + 208);
      v80 = *(_OWORD *)(a1 + 224);
      v50 = *v25;
      v56 = *(_OWORD *)(a1 + 160);
      v38 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 224) = v38;
      v39 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 256) = v39;
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 416);
      v40 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 192) = v40;
      v41 = *(_OWORD *)(a1 + 304);
      *v25 = *v26;
      *(_OWORD *)(a1 + 160) = v41;
      *(_OWORD *)(a1 + 352) = v74;
      *(_OWORD *)(a1 + 368) = v80;
      *(_OWORD *)(a1 + 384) = v86;
      *(_OWORD *)(a1 + 400) = v92;
      *(_OWORD *)(a1 + 416) = v98;
      *(_OWORD *)(a1 + 320) = v62;
      *(_OWORD *)(a1 + 336) = v68;
      LODWORD(v41) = *(_DWORD *)(a1 + 280);
      LODWORD(v40) = *(_DWORD *)(a1 + 136);
      *v26 = v50;
      *(_OWORD *)(a1 + 304) = v56;
      if (*(float *)&v41 <= *(float *)&v40)
        return 1;
      v87 = *(_OWORD *)(a1 + 96);
      v93 = *(_OWORD *)(a1 + 112);
      v99 = *(_OWORD *)(a1 + 128);
      v63 = *(_OWORD *)(a1 + 32);
      v69 = *(_OWORD *)(a1 + 48);
      v75 = *(_OWORD *)(a1 + 64);
      v81 = *(_OWORD *)(a1 + 80);
      v51 = *(_OWORD *)a1;
      v57 = *(_OWORD *)(a1 + 16);
      v42 = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 80) = v42;
      v43 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 112) = v43;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 272);
      v44 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 48) = v44;
      v45 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)a1 = *v25;
      *(_OWORD *)(a1 + 16) = v45;
      *(_OWORD *)(a1 + 208) = v75;
      *(_OWORD *)(a1 + 224) = v81;
      *(_OWORD *)(a1 + 240) = v87;
      *(_OWORD *)(a1 + 256) = v93;
      *(_OWORD *)(a1 + 272) = v99;
      *(_OWORD *)(a1 + 176) = v63;
      *(_OWORD *)(a1 + 192) = v69;
      result = 1;
      *v25 = v51;
      *(_OWORD *)(a1 + 160) = v57;
      return result;
    default:
      v12 = a1 + 288;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>((float *)a1, (__int128 *)(a1 + 144), (float *)(a1 + 288));
      v13 = a1 + 432;
      if (a1 + 432 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(float *)(v13 + 136);
    if (v16 > *(float *)(v12 + 136))
    {
      v83 = *(_OWORD *)(v13 + 96);
      v89 = *(_OWORD *)(v13 + 112);
      v95 = *(_QWORD *)(v13 + 128);
      v59 = *(_OWORD *)(v13 + 32);
      v65 = *(_OWORD *)(v13 + 48);
      v71 = *(_OWORD *)(v13 + 64);
      v77 = *(_OWORD *)(v13 + 80);
      v47 = *(_OWORD *)v13;
      v53 = *(_OWORD *)(v13 + 16);
      v17 = v14;
      v18 = *(_DWORD *)(v13 + 140);
      while (1)
      {
        v19 = a1 + v17;
        v20 = *(_OWORD *)(a1 + v17 + 400);
        *(_OWORD *)(v19 + 528) = *(_OWORD *)(a1 + v17 + 384);
        *(_OWORD *)(v19 + 544) = v20;
        *(_OWORD *)(v19 + 560) = *(_OWORD *)(a1 + v17 + 416);
        v21 = *(_OWORD *)(a1 + v17 + 336);
        *(_OWORD *)(v19 + 464) = *(_OWORD *)(a1 + v17 + 320);
        *(_OWORD *)(v19 + 480) = v21;
        v22 = *(_OWORD *)(a1 + v17 + 368);
        *(_OWORD *)(v19 + 496) = *(_OWORD *)(a1 + v17 + 352);
        *(_OWORD *)(v19 + 512) = v22;
        v23 = *(_OWORD *)(a1 + v17 + 304);
        *(_OWORD *)(v19 + 432) = *(_OWORD *)(a1 + v17 + 288);
        *(_OWORD *)(v19 + 448) = v23;
        if (v17 == -288)
          break;
        v17 -= 144;
        if (v16 <= *(float *)(v19 + 280))
        {
          v24 = a1 + v17 + 432;
          goto LABEL_12;
        }
      }
      v24 = a1;
LABEL_12:
      *(_OWORD *)(v24 + 96) = v83;
      *(_OWORD *)(v24 + 112) = v89;
      *(_QWORD *)(v24 + 128) = v95;
      *(_OWORD *)(v24 + 32) = v59;
      *(_OWORD *)(v24 + 48) = v65;
      *(_OWORD *)(v24 + 64) = v71;
      *(_OWORD *)(v24 + 80) = v77;
      *(_OWORD *)v24 = v47;
      *(_OWORD *)(v24 + 16) = v53;
      *(float *)(v24 + 136) = v16;
      ++v15;
      *(_DWORD *)(v24 + 140) = v18;
      if (v15 == 8)
        return v13 + 144 == a2;
    }
    v12 = v13;
    v14 += 144;
    v13 += 144;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(float *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_1 &,ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::BoxHeadingClassScore *>(a1, a2, (float *)a3);
  result.n128_u32[0] = *((_DWORD *)a4 + 34);
  if (result.n128_f32[0] > *((float *)a3 + 34))
  {
    v45 = a3[6];
    v48 = a3[7];
    v51 = a3[8];
    v33 = a3[2];
    v36 = a3[3];
    v39 = a3[4];
    v42 = a3[5];
    v27 = *a3;
    v30 = (__n128)a3[1];
    *a3 = *a4;
    v9 = a4[1];
    v10 = a4[2];
    v11 = a4[4];
    a3[3] = a4[3];
    a3[4] = v11;
    a3[1] = v9;
    a3[2] = v10;
    v12 = a4[5];
    v13 = a4[6];
    v14 = a4[8];
    a3[7] = a4[7];
    a3[8] = v14;
    a3[5] = v12;
    a3[6] = v13;
    a4[6] = v45;
    a4[7] = v48;
    a4[8] = v51;
    a4[2] = v33;
    a4[3] = v36;
    a4[4] = v39;
    a4[5] = v42;
    result = v30;
    *a4 = v27;
    a4[1] = (__int128)v30;
    result.n128_u32[0] = *((_DWORD *)a3 + 34);
    if (result.n128_f32[0] > *((float *)a2 + 34))
    {
      v46 = a2[6];
      v49 = a2[7];
      v52 = a2[8];
      v34 = a2[2];
      v37 = a2[3];
      v40 = a2[4];
      v43 = a2[5];
      v28 = *a2;
      v31 = (__n128)a2[1];
      *a2 = *a3;
      v15 = a3[1];
      v16 = a3[2];
      v17 = a3[4];
      a2[3] = a3[3];
      a2[4] = v17;
      a2[1] = v15;
      a2[2] = v16;
      v18 = a3[5];
      v19 = a3[6];
      v20 = a3[8];
      a2[7] = a3[7];
      a2[8] = v20;
      a2[5] = v18;
      a2[6] = v19;
      a3[6] = v46;
      a3[7] = v49;
      a3[8] = v52;
      a3[2] = v34;
      a3[3] = v37;
      a3[4] = v40;
      a3[5] = v43;
      result = v31;
      *a3 = v28;
      a3[1] = (__int128)v31;
      result.n128_u32[0] = *((_DWORD *)a2 + 34);
      if (result.n128_f32[0] > a1[34])
      {
        v47 = *((_OWORD *)a1 + 6);
        v50 = *((_OWORD *)a1 + 7);
        v53 = *((_OWORD *)a1 + 8);
        v35 = *((_OWORD *)a1 + 2);
        v38 = *((_OWORD *)a1 + 3);
        v41 = *((_OWORD *)a1 + 4);
        v44 = *((_OWORD *)a1 + 5);
        v29 = *(_OWORD *)a1;
        v32 = *(__n128 *)(a1 + 4);
        *(_OWORD *)a1 = *a2;
        v21 = a2[1];
        v22 = a2[2];
        v23 = a2[4];
        *((_OWORD *)a1 + 3) = a2[3];
        *((_OWORD *)a1 + 4) = v23;
        *((_OWORD *)a1 + 1) = v21;
        *((_OWORD *)a1 + 2) = v22;
        v24 = a2[5];
        v25 = a2[6];
        v26 = a2[8];
        *((_OWORD *)a1 + 7) = a2[7];
        *((_OWORD *)a1 + 8) = v26;
        *((_OWORD *)a1 + 5) = v24;
        *((_OWORD *)a1 + 6) = v25;
        a2[6] = v47;
        a2[7] = v50;
        a2[8] = v53;
        a2[2] = v35;
        a2[3] = v38;
        a2[4] = v41;
        a2[5] = v44;
        result = v32;
        *a2 = v29;
        a2[1] = (__int128)v32;
      }
    }
  }
  return result;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_22952241C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_229522688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_229522730(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,__CVBuffer *>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_2295229CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_229522A6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ou3dor::StaticDescripter>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

int32x4_t *_ZNSt3__112__hash_tableIDv3_iN5utils8SimdHashIS1_EENS2_9SimdEqualIS1_EENS_9allocatorIS1_EEE25__emplace_unique_key_argsIS1_JRKS1_EEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS1_PvEEEEbEERKT_DpOT0_(uint64_t a1, int32x4_t *a2, int32x4_t *a3)
{
  unint64_t v3;
  int32x4_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  int32x4_t **v13;
  int32x4_t *j;
  unint64_t v15;
  uint32x4_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  int32x4_t **v24;
  unint64_t v25;
  int32x4_t v27;

  v6 = *a2;
  v7 = a2->i32[0];
  v8 = 1;
  for (i = 7; i != 21; i += 7)
  {
    v27 = v6;
    v7 ^= (uint64_t)*(int *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8++ & 3))) << i;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v10)
        v3 = v7 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v7;
    }
    v13 = *(int32x4_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (j = *v13; j; j = (int32x4_t *)j->i64[0])
      {
        v15 = j->u64[1];
        if (v15 == v7)
        {
          v16 = (uint32x4_t)vceqq_s32(j[1], v6);
          v16.i32[3] = v16.i32[2];
          if ((vminvq_u32(v16) & 0x80000000) != 0)
            return j;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  j = (int32x4_t *)operator new(0x20uLL);
  j->i64[0] = 0;
  j->i64[1] = v7;
  j[1] = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v7 >= v10)
        v3 = v7 % v10;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v10 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(int32x4_t ***)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    j->i64[0] = (uint64_t)*v24;
LABEL_40:
    *v24 = j;
    goto LABEL_41;
  }
  j->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = j;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (j->i64[0])
  {
    v25 = *(_QWORD *)(j->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (int32x4_t **)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return j;
}

void sub_229522CD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::~__func()
{
  JUMPOUT(0x22E2CAAE8);
}

_QWORD *std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F243738;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F243738;
  a2[1] = v2;
  return result;
}

float std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return *(float *)(**(_QWORD **)(a1 + 8) + 144 * *a2 + 136);
}

uint64_t std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_2>,float ()(int)>::target_type()
{
}

void std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::~__func()
{
  JUMPOUT(0x22E2CAAE8);
}

_QWORD *std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F2437B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F2437B8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  float v4[12];

  box3dIou((float32x4_t *)(**(_QWORD **)(a1 + 8) + 144 * *a2), (float32x4_t *)(**(_QWORD **)(a1 + 8) + 144 * *a3), 0, (uint64_t)v4);
  return v4[0];
}

uint64_t std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3,std::allocator<ou3dod::OU3DSparseSSDetector::NonMaximumSuppression(void)::$_3>,float ()(int,int)>::target_type()
{
}

uint64_t std::unordered_set<SemanticLabelv5>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v4 = a3;
    do
    {
      std::__hash_table<SemanticLabelv5,std::hash<SemanticLabelv5>,std::equal_to<SemanticLabelv5>,std::allocator<SemanticLabelv5>>::__emplace_unique_key_args<SemanticLabelv5,SemanticLabelv5 const&>(a1, a2, a2);
      ++a2;
      --v4;
    }
    while (v4);
  }
  return a1;
}

void sub_229522F04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<SemanticLabelv5,std::hash<SemanticLabelv5>,std::equal_to<SemanticLabelv5>,std::allocator<SemanticLabelv5>>::__emplace_unique_key_args<SemanticLabelv5,SemanticLabelv5 const&>(uint64_t a1, unsigned __int8 *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_BYTE *)v10 + 16) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_229523120(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_OU3DSparseSSDetector_mm()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  __CFString *v10;
  _QWORD *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  char *v17;
  uint64_t v18;
  uint64_t j;
  _OWORD *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  uint64_t k;
  id v27;
  id v28;
  id v29;
  __CFString *v30;
  __CFString *v31;
  __CFString *v32;
  id v33;
  __CFString *v34;
  __CFString *v35;
  __CFString *v36;
  __CFString *v37;
  __CFString *v38;
  id v39;
  __CFString *v40;
  __CFString *v41;
  uint64_t m;
  uint64_t n;
  _DWORD *v44;
  uint64_t v45;
  uint64_t ii;
  __CFString *v47;
  __CFString *v48;
  __CFString *v49;
  __CFString *v50;
  __CFString *v51;
  void *context;
  __CFString *v53;
  __CFString *v54;
  __CFString *v55;
  __CFString *v56;
  __CFString *v57;
  __CFString *v58;
  __CFString *v59;
  __CFString *v60;
  __CFString *v61;
  __CFString *v62;
  __CFString *v63;
  __CFString *v64;
  __CFString *v65;
  __CFString *v66;
  __CFString *v67;
  __CFString *v68;
  __CFString *v69;
  __CFString *v70;
  __CFString *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __CFString *v87;
  uint64_t v88;
  __CFString *v89;
  int v90;
  __CFString *v91;
  int v92;
  __CFString *v93;
  uint64_t v94;
  __CFString *v95;
  int v96;
  __CFString *v97;
  int v98;
  __CFString *v99;
  _QWORD v100[2];
  int v101;
  __CFString *v102;
  int v103;
  id v104;
  _QWORD v105[2];
  int v106;
  __CFString *v107;
  int v108;
  __CFString *v109;
  int v110;
  __CFString *v111;
  int v112;
  __CFString *v113;
  int v114;
  id v115;
  int v116;
  __CFString *v117;
  int v118;
  id v119;
  int v120;
  __CFString *v121;
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x22E2CB070]();
  v0 = CFSTR("Cabinet");
  *(_QWORD *)&v72 = v0;
  v71 = CFSTR("Refrigerator");
  *((_QWORD *)&v72 + 1) = v71;
  v55 = CFSTR("Shelf");
  *(_QWORD *)&v73 = v55;
  v70 = CFSTR("Stove");
  *((_QWORD *)&v73 + 1) = v70;
  v1 = CFSTR("Bed");
  *(_QWORD *)&v74 = v1;
  v64 = CFSTR("Sink");
  *((_QWORD *)&v74 + 1) = v64;
  v69 = CFSTR("Washer");
  *(_QWORD *)&v75 = v69;
  v62 = CFSTR("Toilet");
  *((_QWORD *)&v75 + 1) = v62;
  v2 = CFSTR("Bathtub");
  *(_QWORD *)&v76 = v2;
  v68 = CFSTR("Oven");
  *((_QWORD *)&v76 + 1) = v68;
  v67 = CFSTR("Dishwasher");
  *(_QWORD *)&v77 = v67;
  v58 = CFSTR("Fireplace");
  *((_QWORD *)&v77 + 1) = v58;
  v54 = CFSTR("Stool");
  *(_QWORD *)&v78 = v54;
  v60 = CFSTR("Chair");
  *((_QWORD *)&v78 + 1) = v60;
  v3 = CFSTR("Table");
  *(_QWORD *)&v79 = v3;
  v66 = CFSTR("Screen");
  *((_QWORD *)&v79 + 1) = v66;
  v4 = CFSTR("Sofa");
  *(_QWORD *)&v80 = v4;
  v56 = CFSTR("Stairs");
  *((_QWORD *)&v80 + 1) = v56;
  v5 = CFSTR("Window");
  *(_QWORD *)&v81 = v5;
  v6 = CFSTR("Door");
  *((_QWORD *)&v81 + 1) = v6;
  v53 = CFSTR("BuildInCabinet");
  *(_QWORD *)&v82 = v53;
  qword_2540CA1D0 = 0;
  qword_2540CA1D8 = 0;
  ou3dod::kObjectTypesLUT = 0;
  v7 = (char *)operator new(0xA8uLL);
  v8 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v7;
  qword_2540CA1D0 = (uint64_t)v7;
  qword_2540CA1D8 = (uint64_t)(v7 + 168);
  do
  {
    *(_QWORD *)&v7[v8] = *(id *)((char *)&v72 + v8);
    v8 += 8;
  }
  while (v8 != 168);
  qword_2540CA1D0 = (uint64_t)(v7 + 168);
  for (i = 160; i != -8; i -= 8)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_2294C8000);
  v10 = v0;
  qword_2540CA388 = 0;
  unk_2540CA390 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  *(_QWORD *)&v72 = &ou3dod::kAFClassIdToObjectTypeOffline;
  BYTE8(v72) = 0;
  v11 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v11;
  *v11 = v10;
  qword_2540CA388 = (uint64_t)(v11 + 1);
  unk_2540CA390 = v11 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_2294C8000);
  v12 = v10;
  *(_QWORD *)&v72 = v12;
  v13 = v1;
  *((_QWORD *)&v72 + 1) = v13;
  v14 = v2;
  *(_QWORD *)&v73 = v14;
  v15 = v3;
  *((_QWORD *)&v73 + 1) = v15;
  v16 = v4;
  *(_QWORD *)&v74 = v16;
  qword_2540CA260 = 0;
  qword_2540CA268 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  v17 = (char *)operator new(0x28uLL);
  v18 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v17;
  qword_2540CA260 = (uint64_t)v17;
  qword_2540CA268 = (uint64_t)(v17 + 40);
  do
  {
    *(_QWORD *)&v17[v18] = *(id *)((char *)&v72 + v18);
    v18 += 8;
  }
  while (v18 != 40);
  qword_2540CA260 = (uint64_t)(v17 + 40);
  for (j = 32; j != -8; j -= 8)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_2294C8000);
  qword_2540CA2F0 = 0;
  unk_2540CA2F8 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  v20 = operator new(0x50uLL);
  qword_2540CA2F0 = (uint64_t)(v20 + 5);
  unk_2540CA2F8 = v20 + 5;
  v20[2] = xmmword_229561470;
  v20[3] = unk_229561480;
  v20[4] = xmmword_229561490;
  *v20 = xmmword_229561450;
  v20[1] = unk_229561460;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v20;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_2294C8000);
  v21 = v12;
  *(_QWORD *)&v72 = v21;
  DWORD2(v72) = 1055286886;
  v22 = v13;
  *(_QWORD *)&v73 = v22;
  DWORD2(v73) = 1039516303;
  v23 = v14;
  *(_QWORD *)&v74 = v23;
  DWORD2(v74) = 1045220557;
  v24 = v15;
  *(_QWORD *)&v75 = v24;
  DWORD2(v75) = 1050253722;
  v25 = v16;
  *(_QWORD *)&v76 = v25;
  DWORD2(v76) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v72, 5);
  for (k = 64; k != -16; k -= 16)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_2294C8000);
  LODWORD(v72) = 0;
  *((_QWORD *)&v72 + 1) = CFSTR("Unknown");
  LODWORD(v73) = 1;
  *((_QWORD *)&v73 + 1) = *((id *)&v72 + 1);
  LODWORD(v74) = 2;
  *((_QWORD *)&v74 + 1) = *((id *)&v73 + 1);
  LODWORD(v75) = 3;
  *((_QWORD *)&v75 + 1) = *((id *)&v74 + 1);
  LODWORD(v76) = 4;
  *((_QWORD *)&v76 + 1) = *((id *)&v75 + 1);
  LODWORD(v77) = 5;
  v27 = *((id *)&v76 + 1);
  *((_QWORD *)&v77 + 1) = v27;
  LODWORD(v78) = 6;
  v51 = v6;
  *((_QWORD *)&v78 + 1) = v51;
  LODWORD(v79) = 7;
  v50 = v5;
  *((_QWORD *)&v79 + 1) = v50;
  LODWORD(v80) = 8;
  v28 = v27;
  *((_QWORD *)&v80 + 1) = v28;
  LODWORD(v81) = 9;
  v49 = v58;
  *((_QWORD *)&v81 + 1) = v49;
  LODWORD(v82) = 10;
  *((_QWORD *)&v82 + 1) = v28;
  LODWORD(v83) = 11;
  v29 = *((id *)&v82 + 1);
  *((_QWORD *)&v83 + 1) = v29;
  LODWORD(v84) = 12;
  v59 = v56;
  *((_QWORD *)&v84 + 1) = v59;
  LODWORD(v85) = 13;
  v47 = v22;
  *((_QWORD *)&v85 + 1) = v47;
  LODWORD(v86) = 14;
  v30 = v21;
  v87 = v30;
  LODWORD(v88) = 15;
  v61 = v60;
  v89 = v61;
  v90 = 16;
  v91 = v30;
  v92 = 17;
  v31 = v91;
  v93 = v31;
  LODWORD(v94) = 18;
  v57 = v25;
  v95 = v57;
  v96 = 19;
  v48 = v24;
  v97 = v48;
  v98 = 20;
  v63 = v62;
  v99 = v63;
  LODWORD(v100[0]) = 21;
  v32 = v64;
  v100[1] = v32;
  v101 = 22;
  v65 = v23;
  v102 = v65;
  v103 = 23;
  v33 = v29;
  v104 = v33;
  LODWORD(v105[0]) = 24;
  v34 = v71;
  v105[1] = v34;
  v106 = 25;
  v35 = v70;
  v107 = v35;
  v108 = 26;
  v36 = v69;
  v109 = v36;
  v110 = 27;
  v37 = v68;
  v111 = v37;
  v112 = 28;
  v38 = v67;
  v113 = v38;
  v114 = 29;
  v39 = v33;
  v115 = v39;
  v116 = 30;
  v40 = v31;
  v117 = v40;
  v118 = 31;
  v119 = v39;
  v120 = 32;
  v41 = v66;
  v121 = v41;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v72, 33);
  for (m = 520; m != -8; m -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_2294C8000);
  v82 = xmmword_229561540;
  v83 = unk_229561550;
  v84 = xmmword_229561560;
  v85 = unk_229561570;
  v78 = xmmword_229561500;
  v79 = unk_229561510;
  v80 = xmmword_229561520;
  v81 = unk_229561530;
  v74 = xmmword_2295614C0;
  v75 = unk_2295614D0;
  v76 = xmmword_2295614E0;
  v77 = unk_2295614F0;
  v72 = xmmword_2295614A0;
  v73 = unk_2295614B0;
  v86 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)kSparseSSDSemanticLabels, (int *)&v72, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], kSparseSSDSemanticLabels, &dword_2294C8000);
  LODWORD(v72) = 0;
  *((_QWORD *)&v72 + 1) = v40;
  LODWORD(v73) = 1;
  *((_QWORD *)&v73 + 1) = v34;
  LODWORD(v74) = 2;
  *((_QWORD *)&v74 + 1) = v55;
  LODWORD(v75) = 3;
  *((_QWORD *)&v75 + 1) = v35;
  LODWORD(v76) = 4;
  *((_QWORD *)&v76 + 1) = v47;
  LODWORD(v77) = 5;
  *((_QWORD *)&v77 + 1) = v32;
  LODWORD(v78) = 6;
  *((_QWORD *)&v78 + 1) = v36;
  LODWORD(v79) = 7;
  *((_QWORD *)&v79 + 1) = v63;
  LODWORD(v80) = 8;
  *((_QWORD *)&v80 + 1) = v65;
  LODWORD(v81) = 9;
  *((_QWORD *)&v81 + 1) = v37;
  LODWORD(v82) = 10;
  *((_QWORD *)&v82 + 1) = v38;
  LODWORD(v83) = 11;
  *((_QWORD *)&v83 + 1) = v49;
  LODWORD(v84) = 12;
  *((_QWORD *)&v84 + 1) = v54;
  LODWORD(v85) = 13;
  *((_QWORD *)&v85 + 1) = v61;
  LODWORD(v86) = 14;
  v87 = v48;
  LODWORD(v88) = 15;
  v89 = v41;
  v90 = 16;
  v91 = v57;
  v92 = 17;
  v93 = v59;
  LODWORD(v94) = 18;
  v95 = v50;
  v96 = 19;
  v97 = v51;
  v98 = 20;
  v99 = v53;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)kSparseSSDObjectLabels, (int *)&v72, 21);
  for (n = 328; n != -8; n -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], kSparseSSDObjectLabels, &dword_2294C8000);
  qword_2540CA5D0 = 0;
  unk_2540CA5D8 = 0;
  ou3dod::OU3DSparseSSDetector::kDefaultLevelVoxelCapacity = 0;
  v44 = operator new(0x14uLL);
  qword_2540CA5D0 = (uint64_t)(v44 + 5);
  unk_2540CA5D8 = v44 + 5;
  v44[4] = 512;
  *(_OWORD *)v44 = xmmword_229561588;
  ou3dod::OU3DSparseSSDetector::kDefaultLevelVoxelCapacity = (uint64_t)v44;
  __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &ou3dod::OU3DSparseSSDetector::kDefaultLevelVoxelCapacity, &dword_2294C8000);
  std::string::basic_string[abi:ne180100]<0>(&v72, "sparse_voxels");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v73 + 1, "l0_k3_s1");
  std::string::basic_string[abi:ne180100]<0>(&v75, "l0_k1_s2");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v76 + 1, "l0_k3_s2");
  std::string::basic_string[abi:ne180100]<0>(&v78, "l1_k3_s1");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v79 + 1, "l1_k1_s2");
  std::string::basic_string[abi:ne180100]<0>(&v81, "l1_k3_s2");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v82 + 1, "l1_k2_tr");
  std::string::basic_string[abi:ne180100]<0>(&v84, "l2_k3_s1");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v85 + 1, "l2_k1_s2");
  std::string::basic_string[abi:ne180100]<0>(&v88, "l2_k3_s2");
  std::string::basic_string[abi:ne180100]<0>(&v91, "l2_k2_tr");
  std::string::basic_string[abi:ne180100]<0>(&v94, "l3_k3_s1");
  std::string::basic_string[abi:ne180100]<0>(&v97, "l3_k1_s2");
  std::string::basic_string[abi:ne180100]<0>(v100, "l3_k3_s2");
  std::string::basic_string[abi:ne180100]<0>(&v102, "l3_k2_tr");
  std::string::basic_string[abi:ne180100]<0>(v105, "l4_k3_s1");
  std::string::basic_string[abi:ne180100]<0>(&v107, "l4_k2_tr");
  std::unordered_set<std::string>::unordered_set((uint64_t)&ou3dod::OU3DSparseSSDetector::kInputBlobName, (unsigned __int8 *)&v72, 18);
  v45 = 432;
  do
  {
    if (*((char *)&v72 + v45 - 1) < 0)
      operator delete(*(void **)((char *)&v72 + v45 - 24));
    v45 -= 24;
  }
  while (v45);
  __cxa_atexit((void (*)(void *))std::unordered_set<std::string>::~unordered_set[abi:ne180100], &ou3dod::OU3DSparseSSDetector::kInputBlobName, &dword_2294C8000);
  std::string::basic_string[abi:ne180100]<0>(&v72, "l0_preds_1");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v73 + 1, "l0_scores_1");
  std::string::basic_string[abi:ne180100]<0>(&v75, "l1_preds_1");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v76 + 1, "l1_scores_1");
  std::string::basic_string[abi:ne180100]<0>(&v78, "l2_preds_1");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v79 + 1, "l2_scores_1");
  std::string::basic_string[abi:ne180100]<0>(&v81, "l3_preds_1");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v82 + 1, "l3_scores_1");
  std::string::basic_string[abi:ne180100]<0>(&v84, "l4_preds_1");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v85 + 1, "l4_scores_1");
  std::unordered_set<std::string>::unordered_set((uint64_t)&ou3dod::OU3DSparseSSDetector::kOutputBlobName, (unsigned __int8 *)&v72, 10);
  for (ii = 0; ii != -240; ii -= 24)
  {
    if (*((char *)&v87 + ii + 7) < 0)
      operator delete(*(void **)((char *)&v85 + ii + 8));
  }
  __cxa_atexit((void (*)(void *))std::unordered_set<std::string>::~unordered_set[abi:ne180100], &ou3dod::OU3DSparseSSDetector::kOutputBlobName, &dword_2294C8000);
  objc_autoreleasePoolPop(context);
}

void sub_229523F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v33;

  v33 = 0;
  while (1)
  {
    if (*(char *)(v31 + v33 + 239) < 0)
      operator delete(*(void **)(v31 + v33 + 216));
    v33 -= 24;
    if (v33 == -240)
      _Unwind_Resume(exception_object);
  }
}

_QWORD *ou3dod::OU3DODInterface::OU3DODInterface(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  *result = &unk_24F242E70;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  v2 = *a2;
  *a2 = 0;
  result[4] = v2;
  return result;
}

uint64_t ou3dod::OU3DODInterface::Process(OUDnnInferenceInterface **this, const OUPointCloudCpp *a2)
{
  kdebug_trace();
  OUDnnInferenceInterface::LockInputs(this[4], 0);
  (*((void (**)(OUDnnInferenceInterface **, const OUPointCloudCpp *))*this + 2))(this, a2);
  OUDnnInferenceInterface::UnlockInputs(this[4], 0);
  kdebug_trace();
  kdebug_trace();
  (*(void (**)(OUDnnInferenceInterface *))(*(_QWORD *)this[4] + 16))(this[4]);
  kdebug_trace();
  kdebug_trace();
  OUDnnInferenceInterface::LockOutputs(this[4], 1uLL);
  (*((void (**)(OUDnnInferenceInterface **))*this + 3))(this);
  OUDnnInferenceInterface::UnlockOutputs(this[4], 1uLL);
  return kdebug_trace();
}

void _GLOBAL__sub_I_OU3DODInterface_mm()
{
  void *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  __CFString *v9;
  _QWORD *v10;
  uint64_t *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  char *v16;
  uint64_t v17;
  uint64_t j;
  _OWORD *v19;
  uint64_t k;
  uint64_t *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  __CFString *v32;
  __CFString *v33;
  __CFString *v34;
  __CFString *v35;
  __CFString *v36;
  __CFString *v37;
  __CFString *v38;
  __CFString *v39;
  __CFString *v40;
  __CFString *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v0 = (void *)MEMORY[0x22E2CB070]();
  v1 = CFSTR("Cabinet");
  v21 = (uint64_t *)v1;
  v22 = CFSTR("Refrigerator");
  v23 = CFSTR("Shelf");
  v24 = CFSTR("Stove");
  v2 = CFSTR("Bed");
  v25 = v2;
  v26 = CFSTR("Sink");
  v27 = CFSTR("Washer");
  v28 = CFSTR("Toilet");
  v3 = CFSTR("Bathtub");
  v29 = v3;
  v30 = CFSTR("Oven");
  v31 = CFSTR("Dishwasher");
  v32 = CFSTR("Fireplace");
  v33 = CFSTR("Stool");
  v34 = CFSTR("Chair");
  v4 = CFSTR("Table");
  v35 = v4;
  v36 = CFSTR("Screen");
  v5 = CFSTR("Sofa");
  v37 = v5;
  v38 = CFSTR("Stairs");
  v39 = CFSTR("Window");
  v40 = CFSTR("Door");
  v41 = CFSTR("BuildInCabinet");
  qword_2540CA1E8 = 0;
  qword_2540CA1F0 = 0;
  ou3dod::kObjectTypesLUT = 0;
  v6 = (char *)operator new(0xA8uLL);
  v7 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v6;
  qword_2540CA1E8 = (uint64_t)v6;
  qword_2540CA1F0 = (uint64_t)(v6 + 168);
  do
  {
    *(_QWORD *)&v6[v7 * 8] = (&v21)[v7];
    ++v7;
  }
  while (v7 != 21);
  qword_2540CA1E8 = (uint64_t)(v6 + 168);
  for (i = 20; i != -1; --i)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_2294C8000);
  v9 = v1;
  qword_2540CA3A0 = 0;
  unk_2540CA3A8 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  v21 = &ou3dod::kAFClassIdToObjectTypeOffline;
  LOBYTE(v22) = 0;
  v10 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v10;
  *v10 = v9;
  qword_2540CA3A0 = (uint64_t)(v10 + 1);
  unk_2540CA3A8 = v10 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_2294C8000);
  v11 = v9;
  v21 = v11;
  v12 = v2;
  v22 = v12;
  v13 = v3;
  v23 = v13;
  v14 = v4;
  v24 = v14;
  v15 = v5;
  v25 = v15;
  qword_2540CA278 = 0;
  qword_2540CA280 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  v16 = (char *)operator new(0x28uLL);
  v17 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v16;
  qword_2540CA278 = (uint64_t)v16;
  qword_2540CA280 = (uint64_t)(v16 + 40);
  do
  {
    *(_QWORD *)&v16[v17 * 8] = (&v21)[v17];
    ++v17;
  }
  while (v17 != 5);
  qword_2540CA278 = (uint64_t)(v16 + 40);
  for (j = 4; j != -1; --j)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_2294C8000);
  qword_2540CA308 = 0;
  unk_2540CA310 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  v19 = operator new(0x50uLL);
  qword_2540CA308 = (uint64_t)(v19 + 5);
  unk_2540CA310 = v19 + 5;
  v19[2] = xmmword_229561780;
  v19[3] = unk_229561790;
  v19[4] = xmmword_2295617A0;
  *v19 = xmmword_229561760;
  v19[1] = unk_229561770;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v19;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_2294C8000);
  v21 = v11;
  LODWORD(v22) = 1055286886;
  v23 = v12;
  LODWORD(v24) = 1039516303;
  v25 = v13;
  LODWORD(v26) = 1045220557;
  v27 = v14;
  LODWORD(v28) = 1050253722;
  v29 = v15;
  LODWORD(v30) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v21, 5);
  for (k = 8; k != -2; k -= 2)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_2294C8000);
  objc_autoreleasePoolPop(v0);
}

void sub_2295246DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 64; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

_QWORD *GetRange@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, int32x2_t *a3@<X8>, float32x2_t a4@<D0>)
{
  uint64_t v4;
  char v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  int32x2_t v10;
  char v11;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = a4;
  do
  {
    while (*(float *)(*a2 + 4 * v4) >= 0.1)
    {
      v8 = vminnm_f32(vmaxnm_f32(*(float32x2_t *)(*result + 8 * v4), 0), a4);
      v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v8, v6), (int8x8_t)v8, (int8x8_t)v6);
      v7 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v8), (int8x8_t)v8, (int8x8_t)v7);
      v5 = 1;
      if (v4++ == 7)
        goto LABEL_9;
    }
    ++v4;
  }
  while (v4 != 8);
  if ((v5 & 1) != 0)
  {
LABEL_9:
    v10.i32[0] = vdup_lane_s32((int32x2_t)v7, 1).u32[0];
    v10.i32[1] = v6.i32[1];
    *a3 = vzip1_s32((int32x2_t)v7, (int32x2_t)v6);
    a3[1] = v10;
    v11 = 1;
    goto LABEL_11;
  }
  v11 = 0;
  a3->i8[0] = 0;
LABEL_11:
  a3[2].i8[0] = v11;
  return result;
}

_QWORD *FilterByCornerInView@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, int32x4_t *a3@<X8>, float32x2_t a4@<D0>)
{
  uint64_t v4;
  int v5;
  float32x2_t v6;
  float32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  char v11;

  if (result[1] - *result != 64 || a2[1] - *a2 != 32)
    goto LABEL_11;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  *(float32x2_t *)v7.f32 = a4;
  do
  {
    if (*(float *)(*a2 + 4 * v4) >= 0.1)
    {
      ++v5;
      v8 = vminnm_f32(vmaxnm_f32(*(float32x2_t *)(*result + 8 * v4), 0), a4);
      v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v8, v6), (int8x8_t)v8, (int8x8_t)v6);
      *(int8x8_t *)v7.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v7.f32, v8), (int8x8_t)v8, *(int8x8_t *)v7.f32);
    }
    ++v4;
  }
  while (v4 != 8);
  if (v5 >= 8
    && (v9 = vsub_f32(v6, *(float32x2_t *)v7.f32), v10 = vdiv_f32(v9, a4), v10.f32[1] >= 0.15)
    && v10.f32[0] >= 0.15)
  {
    *(float32x2_t *)&v7.u32[2] = v9;
    a3->i32[0] = v5;
    a3->u64[1] = (unint64_t)v10;
    a3[1].i64[0] = 0;
    a3[2] = vcvtq_s32_f32(v7);
    v11 = 1;
  }
  else
  {
LABEL_11:
    v11 = 0;
    a3->i8[0] = 0;
  }
  a3[3].i8[0] = v11;
  return result;
}

BOOL FilterByOcclusion(void *a1, _QWORD *a2, float **a3, box3d *a4, uint64_t a5)
{
  id v9;
  size_t Width;
  size_t Height;
  float32x2_t v12;
  float32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  float *v16;
  float *v17;
  float v18;
  float v19;
  int32x2_t v20;
  int v21;
  int v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float32x4_t v28;
  float32x4_t *v29;
  float32x4_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  _BOOL8 v39;
  _BYTE *v40;
  float v41;
  uint64_t v43;
  box3d *v44;
  char *BaseAddress;
  size_t BytesPerRow;
  float32x2_t v47;
  int32x2_t v48;
  float32x4_t v49;
  float v50;
  float32x4_t v51;
  _BYTE *v52;
  _BYTE *v53;
  float32x4_t v54[8];
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  int32x2_t v58;
  int32x2_t v59;
  char v60;
  simd_float4x4 v61;
  simd_float4x4 v62;

  v9 = a1;
  Width = CVPixelBufferGetWidth((CVPixelBufferRef)objc_msgSend(v9, "sceneColorBuffer"));
  Height = CVPixelBufferGetHeight((CVPixelBufferRef)objc_msgSend(v9, "sceneColorBuffer"));
  v12.f32[0] = (float)Width;
  v12.f32[1] = (float)Height;
  GetRange(a2, a3, &v58, v12);
  if (v60)
  {
    objc_msgSend(v9, "GetSceneRgbToDepthRatio");
    v14 = vcvt_s32_f32(vdiv_f32((float32x2_t)vzip1_s32(v58, v59), v13));
    v15 = vcvt_s32_f32(vdiv_f32((float32x2_t)vzip2_s32(v58, v59), v13));
    v16 = *a3;
    v17 = a3[1];
    v47 = v13;
    v18 = 0.0;
    if (*a3 != v17)
    {
      do
      {
        v19 = *v16++;
        v18 = v18 + v19;
      }
      while (v16 != v17);
    }
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v48 = v15;
    *(int32x2_t *)v49.f32 = v14;
    v20 = vsub_s32(v15, v14);
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v55, vmul_lane_s32(v20, v20, 1).i32[0]);
    BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)objc_msgSend(v9, "sceneDepthBuffer"));
    CVPixelBufferLockBaseAddress((CVPixelBufferRef)objc_msgSend(v9, "sceneDepthBuffer"), 1uLL);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)objc_msgSend(v9, "sceneDepthBuffer"));
    v43 = a5;
    v44 = a4;
    if (v49.i32[1] >= v48.i32[1])
    {
      v22 = 0;
      v21 = 0;
    }
    else
    {
      v21 = 0;
      v22 = 0;
      v23 = fmaxf(v18 * 0.125, 0.1);
      v24 = v49.i32[0];
      v25 = v49.i32[1];
      do
      {
        if ((int)v24 < v48.i32[0])
        {
          v26 = v24;
          do
          {
            v27 = *(float *)&BaseAddress[4 * v26 + BytesPerRow * v25];
            if (v27 > 0.1)
            {
              ++v21;
              v50 = *(float *)&BaseAddress[4 * v26 + BytesPerRow * v25];
              if (v27 <= v23)
              {
                objc_msgSend(v9, "GetSceneCameraProjectionMatrixInVisionWorld");
                v62 = __invert_f4(v61);
                v28 = vaddq_f32((float32x4_t)v62.columns[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v62.columns[0], (float)(v47.f32[0] * (float)(int)v26) * v50), (float32x4_t)v62.columns[1], (float)(v47.f32[1] * (float)(int)v25) * v50), (float32x4_t)v62.columns[2], v50));
                v29 = v56;
                if (v56 >= v57)
                {
                  v51 = v28;
                  v31 = v56 - v55;
                  if ((unint64_t)(v31 + 1) >> 60)
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  v32 = ((char *)v57 - (char *)v55) >> 3;
                  if (v32 <= v31 + 1)
                    v32 = v31 + 1;
                  if ((unint64_t)((char *)v57 - (char *)v55) >= 0x7FFFFFFFFFFFFFF0)
                    v33 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v33 = v32;
                  if (v33)
                    v34 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v57, v33);
                  else
                    v34 = 0;
                  v35 = (float32x4_t *)&v34[16 * v31];
                  *v35 = v51;
                  v30 = v35 + 1;
                  v37 = v55;
                  v36 = v56;
                  if (v56 != v55)
                  {
                    do
                    {
                      v38 = v36[-1];
                      --v36;
                      v35[-1] = v38;
                      --v35;
                    }
                    while (v36 != v37);
                    v36 = v55;
                  }
                  v55 = v35;
                  v56 = v30;
                  v57 = (float32x4_t *)&v34[16 * v33];
                  if (v36)
                    operator delete(v36);
                }
                else
                {
                  *v56 = v28;
                  v30 = v29 + 1;
                }
                v56 = v30;
              }
              else
              {
                ++v22;
              }
            }
            ++v26;
          }
          while (v48.i32[0] != (_DWORD)v26);
        }
        ++v25;
      }
      while (v48.i32[1] != (_DWORD)v25);
    }
    CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)objc_msgSend(v9, "sceneDepthBuffer"), 1uLL);
    memset(v54, 0, sizeof(v54));
    box3dEnlarge((float32x4_t *)v44, 0.1, 0.1, 0.1, v54);
    CollectPointCloudFromBox((uint64_t *)&v55, v54, (uint64_t)&v52);
    v40 = v52;
    v41 = (float)(int)(v22 + ((unint64_t)(v53 - v52) >> 4)) / (float)((float)v21 + 0.001);
    *(float *)(v43 + 20) = v41;
    v39 = v41 >= 0.35;
    if (v40)
    {
      v53 = v40;
      operator delete(v40);
    }
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
  }
  else
  {
    v39 = 0;
  }

  return v39;
}

void sub_229524C98(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 168);
  if (v4)
  {
    *(_QWORD *)(v2 - 160) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

BOOL FilterByCoverage3d(uint64_t *a1, uint64_t *a2, float32x4_t *a3, uint64_t a4)
{
  _BYTE *v7;
  _BYTE *v8;
  float v9;
  _BOOL8 v10;
  _BYTE *v12;
  _BYTE *v13;
  void *__p;
  _BYTE *v15;

  CollectPointCloudFromBox(a1, a3, (uint64_t)&__p);
  v7 = __p;
  if (__p == v15)
  {
    v10 = 0;
    if (!__p)
      return v10;
    goto LABEL_5;
  }
  CollectPointCloudFromBox(a2, a3, (uint64_t)&v12);
  v8 = v12;
  v7 = __p;
  v9 = (float)(unint64_t)((v13 - v12) >> 4) / (float)(unint64_t)((v15 - (_BYTE *)__p) >> 4);
  *(float *)(a4 + 16) = v9;
  v10 = v9 > 0.4;
  if (v8)
  {
    v13 = v8;
    operator delete(v8);
    v7 = __p;
  }
  if (v7)
  {
LABEL_5:
    v15 = v7;
    operator delete(v7);
  }
  return v10;
}

void sub_229524DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL FilterByCoverage3d(uint64_t *a1, _OUFrame *a2, float32x4_t *a3, uint64_t a4)
{
  _BOOL8 v7;
  void *__p[3];

  WorldPCFromARFrameSceneCamera(a2, 0.8, 4u, (uint64_t)__p);
  v7 = FilterByCoverage3d(a1, (uint64_t *)__p, a3, a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v7;
}

void sub_229524E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FilterByCenter(float32x4_t *a1, float32x2_t *a2, float32x4_t a3)
{
  float32x4_t v3;
  char v4;

  v3 = vaddq_f32(a1[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2->f32)), a1[1], *a2, 1), a1[2], *(float32x4_t *)a2->f32, 2));
  if (v3.f32[2] <= 0.0)
  {
    v4 = 0;
  }
  else
  {
    a3.i64[1] = vdivq_f32(v3, (float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2)).u64[0];
    v4 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgeq_f32(a3, (float32x4_t)a3.u64[1])), 0xFuLL)));
  }
  return v4 & 1;
}

void IsObjectBoxInView(_OUFrame *a1@<X0>, box3d *a2@<X1>, simd_float4 *a3@<X8>)
{
  _OUFrame *v5;
  __CVBuffer *v6;
  size_t Width;
  size_t Height;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  char v24;
  float32x4_t v25;
  float32x4_t v26;
  _OWORD v27[2];
  simd_float4 v28;
  void *v29[3];
  void *v30;
  void *__p[3];
  simd::float4x4 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = -[_OUFrame sceneColorBuffer](v5, "sceneColorBuffer");
  Width = CVPixelBufferGetWidth(v6);
  Height = CVPixelBufferGetHeight(v6);
  -[_OUFrame GetSceneCameraProjectionMatrixInVisionWorld](v5, "GetSceneCameraProjectionMatrixInVisionWorld");
  v32.columns[0] = v9;
  v32.columns[1] = v10;
  v32.columns[2] = v11;
  v32.columns[3] = v12;
  ProjectToImage(&v32, a2, v29);
  v13.f32[0] = (float)Width;
  v13.f32[1] = (float)Height;
  FilterByCornerInView(v29, __p, (int32x4_t *)&v32, v13);
  if (!v32.columns[3].i8[0])
    goto LABEL_13;
  v25 = *((float32x4_t *)a2 + 6);
  v26 = *(float32x4_t *)a2;
  -[_OUFrame GetSceneCameraProjectionMatrixInVisionWorld](v5, "GetSceneCameraProjectionMatrixInVisionWorld");
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  v15 = vmulq_f32(vaddq_f32(v26, v25), v14);
  v20 = vaddq_f32(v19, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v15.f32[0]), v17, *(float32x2_t *)v15.f32, 1), v18, v15, 2));
  if (v20.f32[2] <= 0.0)
    goto LABEL_13;
  v21 = vdivq_f32(v20, (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2)).u64[0];
  v22 = *(float *)&v21 < 0.0 || *(float *)&v21 > (float)Width;
  if (v22 || (*((float *)&v21 + 1) >= 0.0 ? (v23 = *((float *)&v21 + 1) > (float)Height) : (v23 = 1), v23))
  {
LABEL_13:
    a3->i8[0] = 0;
    a3[1].i8[0] = 0;
  }
  else
  {
    v27[0] = v32.columns[0];
    v27[1] = v32.columns[1];
    v28 = v32.columns[2];
    if (FilterByOcclusion(v5, v29, (float **)__p, a2, (uint64_t)v27))
    {
      *a3 = v28;
      v24 = 1;
    }
    else
    {
      v24 = 0;
      a3->i8[0] = 0;
    }
    a3[1].i8[0] = v24;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30)
    operator delete(v30);
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }

}

void sub_229525090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  va_list va;

  va_start(va, a16);
  _ZNSt3__15tupleIJNS_6vectorIDv2_fNS_9allocatorIS2_EEEENS1_IbNS3_IbEEEENS1_IfNS3_IfEEEEEED1Ev((uint64_t)va);

  _Unwind_Resume(a1);
}

void ProjectToImage(const simd::float4x4 *a1@<X0>, const box3d *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t i;
  int32x4_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[3];
  void *v12[3];
  void *v13[3];

  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(v13, 8uLL);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(v12, 8uLL, (unsigned __int8 *)__p);
  std::vector<float>::vector(__p, 8uLL);
  for (i = 0; i != 8; ++i)
  {
    v7 = (int32x4_t)vaddq_f32((float32x4_t)a1->columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a1->columns[0], COERCE_FLOAT(*((_OWORD *)a2 + i))), (float32x4_t)a1->columns[1], *(float32x2_t *)((char *)a2 + 16 * i), 1), (float32x4_t)a1->columns[2], *((float32x4_t *)a2 + i), 2));
    v8 = i >> 6;
    v9 = 1 << i;
    if (*(float *)&v7.i32[2] <= 0.0)
      v10 = *((_QWORD *)v12[0] + v8) | v9;
    else
      v10 = *((_QWORD *)v12[0] + v8) & ~v9;
    *((_QWORD *)v12[0] + v8) = v10;
    *((_DWORD *)__p[0] + i) = v7.i32[2];
    *((float32x2_t *)v13[0] + i) = vdiv_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2));
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv2_fNS_9allocatorIS4_EEEENS3_IbNS5_IbEEEENS3_IfNS5_IfEEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_S9_SB_EJEJEJRS7_RS9_RSB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSI_IJDpT2_EEEDpOT3_(a3, (uint64_t)v13, (uint64_t)v12, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v12[0])
    operator delete(v12[0]);
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_2295251E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__15tupleIJNS_6vectorIDv2_fNS_9allocatorIS2_EEEENS1_IbNS3_IbEEEENS1_IfNS3_IfEEEEEED1Ev(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
    operator delete(v3);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIDv2_fNS_9allocatorIS4_EEEENS3_IbNS5_IbEEEENS3_IfNS5_IfEEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS7_S9_SB_EJEJEJRS7_RS9_RSB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSI_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  std::vector<BOOL>::vector(a1 + 3, a3);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1 + 6, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  return a1;
}

void sub_2295252EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*v2)
    operator delete(*v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_229525378(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_OU3DORPreprocess_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x22E2CB070]();
  RW_VW = xmmword_2295604A0;
  unk_2540C9E80 = xmmword_2295604D0;
  xmmword_2540C9E90 = xmmword_2295604B0;
  unk_2540C9EA0 = xmmword_229560490;
  *(simd_float4x4 *)VW_RW = __invert_f4(*(simd_float4x4 *)_PromotedConst_1);
  RC_VC = xmmword_2295604A0;
  unk_2540C9D80 = xmmword_2295604E0;
  xmmword_2540C9D90 = xmmword_2295604D0;
  unk_2540C9DA0 = xmmword_229560490;
  *(simd_float4x4 *)VC_RC = __invert_f4(*(simd_float4x4 *)_PromotedConst_5);
  ARKit_VW_RW = xmmword_2295604E0;
  *(_OWORD *)algn_2540C9610 = xmmword_2295604C0;
  xmmword_2540C9620 = xmmword_2295604F0;
  unk_2540C9630 = xmmword_229560490;
  objc_autoreleasePoolPop(v0);
}

uint64_t OUCannyEdgeDetectorInterface::OUCannyEdgeDetectorInterface(uint64_t a1, uint64_t a2)
{
  id *v3;
  unsigned int *v4;
  __int128 v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  void *v17;

  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (id *)(a1 + 8);
  *(_QWORD *)a1 = off_24F243838;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 20);
  v4 = (unsigned int *)(a1 + 72);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 112), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 112) = v5;
  }
  *(_DWORD *)(a1 + 136) = 0;
  v6 = MTLCreateSystemDefaultDevice();
  v7 = *v3;
  *v3 = v6;

  v8 = objc_msgSend(*v3, "newCommandQueue");
  v9 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;

  v10 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE388]), "initWithDevice:", *v3);
  v11 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;

  v13 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v14.i64[0] = (int)v12;
  v14.i64[1] = SHIDWORD(v12);
  v15 = vcvtq_f64_s64(v14);
  v14.i64[0] = (int)v13;
  v14.i64[1] = SHIDWORD(v13);
  *(float64x2_t *)(a1 + 80) = vdivq_f64(v15, vcvtq_f64_s64(v14));
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  objc_msgSend(*(id *)(a1 + 48), "setScaleTransform:");
  OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture(a1, v4, 10);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v16;

  return a1;
}

void sub_2295255BC(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

id OUCannyEdgeDetectorInterface::GenerateEmptyMTLTexture(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *v10;
  IOSurfaceRef v11;
  void *v12;
  void *v13;
  _QWORD v15[5];
  _QWORD v16[6];

  v16[5] = *MEMORY[0x24BDAC8D0];
  v15[0] = *MEMORY[0x24BDD8FD0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = v6;
  v15[1] = *MEMORY[0x24BDD8EB0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", a2[1]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *MEMORY[0x24BDD8E30];
  v16[1] = v7;
  v16[2] = &unk_24F24AC48;
  v9 = *MEMORY[0x24BDD8EF8];
  v15[2] = v8;
  v15[3] = v9;
  v15[4] = *MEMORY[0x24BDD8EE8];
  v16[3] = &unk_24F24AC60;
  v16[4] = &unk_24F24AC78;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v16, v15, 5);
  v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  v11 = IOSurfaceCreate(v10);
  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", a3, (int)*a2, (int)a2[1], 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setUsage:", 3);
  v13 = (void *)objc_msgSend(*(id *)(a1 + 8), "newTextureWithDescriptor:iosurface:plane:", v12, v11, 0);
  CFRelease(v11);

  return v13;
}

void sub_2295257A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id OUCannyEdgeDetectorInterface::DetectEdges(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  (*((void (**)(id *, id))*a1 + 3))(a1, v3);
  OUCannyEdgeDetectorInterface::RescaleSourceMTLTexture(a1);
  v4 = OUCannyEdgeDetectorInterface::DetectEdgesInternal(a1);
  (*((void (**)(id *))*a1 + 4))(a1);
  v5 = a1[5];

  return v5;
}

void sub_229525868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OUCannyEdgeDetectorInterface::RescaleSourceMTLTexture(id *this)
{
  id v3;
  id v4;
  void *v5;

  if (*((_DWORD *)this + 16) == *((_DWORD *)this + 18) && *((_DWORD *)this + 17) == *((_DWORD *)this + 19))
  {
    v4 = this[3];
    v3 = this[4];
    this[4] = v4;
  }
  else
  {
    objc_msgSend(this[2], "commandBuffer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(this[6], "encodeToCommandBuffer:sourceTexture:destinationTexture:");
    objc_msgSend(v5, "commit");
    objc_msgSend(v5, "waitUntilCompleted");
    v3 = v5;
  }

}

void sub_2295258F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id OUCannyEdgeDetectorInterface::DetectEdgesInternal(id *this)
{
  void *v2;
  id v3;

  objc_msgSend(this[2], "commandBuffer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(this[7], "encodeToCommandBuffer:sourceTexture:destinationTexture:", v2, this[4], this[5]);
  objc_msgSend(v2, "commit");
  objc_msgSend(v2, "waitUntilCompleted");
  v3 = this[5];

  return v3;
}

void sub_22952596C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id OUCannyEdgeDetectorInterface::GenerateCIImage(uint64_t a1, void *a2)
{
  id v2;
  void *v3;

  v2 = a2;
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBF660]), "initWithMTLTexture:options:", v2, 0);

  return v3;
}

void sub_2295259C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ou3dod::OU3DLShapeObjectMerger::MergeLShape(uint64_t *a1@<X1>, void *a2@<X2>, void *a3@<X3>, int a4@<W4>, _QWORD *a5@<X8>)
{
  id v8;
  ou3dod::HistoryMergeInfo *v9;
  __int128 *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  __CFString *v22;
  _QWORD *v23;
  uint64_t v24;
  __CFString *v25;
  float v26;
  float v27;
  double v28;
  const OUBox3d *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  const OUBox3d *v33;
  unint64_t v34;
  uint64_t v35;
  const OUBox3d *v36;
  OUBox3d *v37;
  OUBox3d *v38;
  OUBox3d *v39;
  OUBox3d *v40;
  int v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t *v44;
  float32x2_t *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  float32x2_t *v49;
  char *v50;
  char *v51;
  float32x2_t v52;
  OUBox3d *v53;
  float32x4_t *v54;
  OUBox3d *v55;
  int64_t v56;
  NSObject *v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *i;
  const OUBox3d *v64;
  const box3d *v65;
  float32x2_t v66;
  const box3d *v67;
  float32x2_t v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  OUBox3d *v82;
  __CFString *v83;
  _QWORD *v84;
  __CFString *v85;
  float v86;
  OUBox3d *v87;
  __CFString *v88;
  _QWORD *v89;
  __CFString *v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  const box3d *v96;
  _BOOL4 v97;
  _BOOL4 IsBoxSurfaceAttached;
  _BOOL4 v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *j;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  const OUBox3d *v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  __int128 *v118;
  ou3dod::HistoryMergeInfo *v120;
  void *v121;
  _QWORD *v122;
  uint64_t v123;
  NSObject *v124;
  __int128 v125;
  __int128 v126;
  int v127;
  void *v128;
  float32x2_t *v129;
  float32x2_t *v130;
  OUBox3d *v131;
  OUBox3d *v132;
  unint64_t v133;
  char *v134;
  void *v135[2];
  char v136;
  void *v137;
  char v138;
  _OWORD v139[3];
  float32x4_t v140[8];
  float32x4_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _OWORD v149[2];
  __int128 v150;
  float32x4_t v151[4];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  void *__p[2];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint8_t buf;
  char v165[7];
  _QWORD v166[2];
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 *v170[2];

  v8 = a2;
  v9 = a3;
  v10 = ou3dod::HistoryMergeInfo::Get(v9);
  v118 = ou3dod::HistoryMergeInfo::Get((ou3dod::HistoryMergeInfo *)v10);
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    ou3dod::OU3DLShapeObjectMerger::MergeLShape((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  v121 = v8;
  v124 = v11;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v122 = a5;
  v120 = v9;
  if ((int)(-1227133513 * ((a1[1] - *a1) >> 5)) <= 0)
  {
    LODWORD(v117) = 0;
    v41 = 0;
    v40 = 0;
    v128 = 0;
    v129 = 0;
    v130 = 0;
LABEL_52:
    v116 = v41;
    v167 = 0;
    v168 = 0;
    v55 = v40;
    v169 = 0;
    goto LABEL_53;
  }
  v18 = 0;
  v19 = 0xFFFFFFC000000020 * ((a1[1] - *a1) >> 5);
  do
  {
    v20 = -[ou3dod::HistoryMergeInfo containsObject:](v9, "containsObject:", *(_QWORD *)(*a1 + v18 + 128));
    v21 = *a1;
    if ((v20 & 1) != 0)
    {
      v22 = CFSTR("Table");
      *(_QWORD *)&v157 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v151[0].i64[0] = (uint64_t)__p;
      v151[0].i8[8] = 0;
      v23 = operator new(8uLL);
      v24 = v21 + v18;
      __p[0] = v23;
      __p[1] = v23;
      *(_QWORD *)&v157 = v23 + 1;
      v25 = v22;
      *v23 = v25;
      __p[1] = v23 + 1;
      LODWORD(v23) = ou3dod::IsObjectBelongToType(v24, __p);
      v151[0].i64[0] = (uint64_t)__p;
      std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v151);

      a5 = v122;
      if (!(_DWORD)v23)
        goto LABEL_21;
      box3dToCentroidSizeAngle((float32x4_t *)(*a1 + v18), (uint64_t *)__p);
      v27 = *((float *)__p[0] + 3);
      v26 = *((float *)__p[0] + 4);
      if (v26 >= 0.6 || v27 >= 0.6)
      {
        v28 = (float)(v26 / v27);
        if (v28 < 0.9 || v28 > 1.1)
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
LABEL_21:
          v36 = (const OUBox3d *)(*a1 + v18);
          v37 = v132;
          if ((unint64_t)v132 >= v133)
          {
            v38 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>((uint64_t *)&v131, v36);
          }
          else
          {
            OUBox3d::OUBox3d(v132, v36);
            v38 = (OUBox3d *)((char *)v37 + 224);
          }
          v132 = v38;
          goto LABEL_25;
        }
      }
      v29 = (const OUBox3d *)(*a1 + v18);
      v30 = v122[1];
      if (v30 >= v122[2])
      {
        v32 = std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(v122, v29);
      }
      else
      {
        OUBox3d::OUBox3d((OUBox3d *)v122[1], v29);
        v32 = v30 + 224;
        v122[1] = v30 + 224;
      }
      v122[1] = v32;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      v33 = (const OUBox3d *)(v21 + v18);
      v34 = a5[1];
      if (v34 >= a5[2])
      {
        v35 = std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(a5, v33);
      }
      else
      {
        OUBox3d::OUBox3d((OUBox3d *)a5[1], v33);
        v35 = v34 + 224;
        a5[1] = v34 + 224;
      }
      a5[1] = v35;
    }
LABEL_25:
    v18 += 224;
  }
  while (v19 != v18);
  v40 = v131;
  v39 = v132;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v117 = 0x6DB6DB6DB6DB6DB7 * (((char *)v132 - (char *)v131) >> 5);
  v41 = v117;
  if (v132 == v131)
    goto LABEL_52;
  do
  {
    v42 = ou3dod::ComputeHeadingDirection((float32x4_t *)v40, (const box3d *)v31);
    v43 = v42;
    v44 = v129;
    if (v129 >= v130)
    {
      v46 = ((char *)v129 - (_BYTE *)v128) >> 3;
      if ((unint64_t)(v46 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v47 = ((char *)v130 - (_BYTE *)v128) >> 2;
      if (v47 <= v46 + 1)
        v47 = v46 + 1;
      if ((unint64_t)((char *)v130 - (_BYTE *)v128) >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v47;
      if (v31)
        v48 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v130, v31);
      else
        v48 = 0;
      v49 = (float32x2_t *)&v48[8 * v46];
      *v49 = v43;
      v45 = v49 + 1;
      v51 = (char *)v128;
      v50 = (char *)v129;
      if (v129 != v128)
      {
        do
        {
          v52 = *(float32x2_t *)(v50 - 8);
          v50 -= 8;
          v49[-1] = v52;
          --v49;
        }
        while (v50 != v51);
        v50 = (char *)v128;
      }
      v128 = v49;
      v129 = v45;
      v130 = (float32x2_t *)&v48[8 * v31];
      if (v50)
        operator delete(v50);
    }
    else
    {
      *v129 = v42;
      v45 = v44 + 1;
    }
    v129 = v45;
    v40 = (OUBox3d *)((char *)v40 + 224);
  }
  while (v40 != v39);
  v53 = v131;
  v40 = v132;
  if (v131 == v132)
    goto LABEL_52;
  do
  {
    ou3dod::MaybeReorderObjectCorner(&v53->var1, (OUBox3d *)v31);
    v53 = (OUBox3d *)((char *)v53 + 224);
  }
  while (v53 != v40);
  v54 = (float32x4_t *)v131;
  v40 = v132;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v116 = v117;
  if (v131 == v132)
  {
    v55 = v132;
  }
  else
  {
    do
    {
      box3dToCentroidSizeAngle(v54, (uint64_t *)__p);
      std::vector<std::vector<float>>::push_back[abi:ne180100](&v167, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v54 += 14;
    }
    while (v54 != (float32x4_t *)v40);
    v40 = v131;
    v55 = v132;
  }
LABEL_53:
  v125 = 0u;
  v126 = 0u;
  v127 = 1065353216;
  v56 = (unint64_t)(-1227133513 * ((unint64_t)((char *)v55 - (char *)v40) >> 5)) << 32;
  v57 = v124;
  if (v56)
  {
    v58 = 0;
    v123 = (uint64_t)v10 + 40;
    v59 = v56 >> 32;
    if (v59 <= 1)
      v60 = 1;
    else
      v60 = v59;
    do
    {
      v61 = 0;
      v62 = 0;
      for (i = 0; i != (char *)v60; ++i)
      {
        if (v58 != i)
        {
          v166[0] = i;
          v166[1] = v58;
          if (!std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::find<std::pair<unsigned long,unsigned long>>(&v125, v166))
          {
            if (ou3dod::ShouldForceMerge((ou3dod *)((char *)v131 + 224 * (_QWORD)v58), (float32x4_t *)((char *)v131 + v62), v64))
            {
              if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
                ou3dod::OU3DLShapeObjectMerger::MergeLShape(&buf, v165, v57);

              __p[0] = v58;
              __p[1] = i;
              std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v125, __p, __p);
            }
            else
            {
              v66 = ou3dod::ComputeHeadingDirection((float32x4_t *)v131 + 14 * (_QWORD)v58, v65);
              v68 = ou3dod::ComputeHeadingDirection((float32x4_t *)((char *)v131 + v62), v67);
              v69 = (__int128 *)((char *)v131 + 224 * (_QWORD)v58);
              v70 = v69[3];
              v72 = *v69;
              v71 = v69[1];
              v158 = v69[2];
              v159 = v70;
              *(_OWORD *)__p = v72;
              v157 = v71;
              v73 = v69[7];
              v75 = v69[4];
              v74 = v69[5];
              v162 = v69[6];
              v163 = v73;
              v160 = v75;
              v161 = v74;
              v76 = *(float32x4_t *)((char *)&v131->var1 + v62);
              v77 = *(float32x4_t *)((char *)&v131->var3 + v62);
              v78 = *(float32x4_t *)((char *)&v131->var5.var2.var0 + v62);
              v151[2] = *(float32x4_t *)((char *)&v131->var5.var0 + v62);
              v151[3] = v78;
              v151[0] = v76;
              v151[1] = v77;
              v79 = *(_OWORD *)((char *)&v131->var6.var1 + v62);
              v80 = *(_OWORD *)((char *)&v131->var7 + v62);
              v81 = *(_OWORD *)((char *)&v131[1].var3 + v62);
              v154 = *(_OWORD *)((char *)&v131[1].var1 + v62);
              v155 = v81;
              v152 = v79;
              v153 = v80;
              v150 = 0u;
              memset(v149, 0, sizeof(v149));
              box3dIou((float32x4_t *)__p, v151, 0, (uint64_t)v149);
              v82 = v131;
              v83 = CFSTR("Table");
              *(_QWORD *)&v142 = 0;
              v141 = 0uLL;
              v140[0].i64[0] = (uint64_t)&v141;
              v140[0].i8[8] = 0;
              v84 = operator new(8uLL);
              v141.i64[0] = (uint64_t)v84;
              v141.i64[1] = (uint64_t)v84;
              *(_QWORD *)&v142 = v84 + 1;
              v85 = v83;
              *v84 = v85;
              v141.i64[1] = (uint64_t)(v84 + 1);
              LODWORD(v84) = ou3dod::IsObjectBelongToType((uint64_t)v82 + 224 * (_QWORD)v58, &v141);
              v140[0].i64[0] = (uint64_t)&v141;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v140);

              if ((_DWORD)v84)
                v86 = 0.15;
              else
                v86 = 0.3;
              v87 = v131;
              v88 = v85;
              *(_QWORD *)&v142 = 0;
              v141 = 0uLL;
              v140[0].i64[0] = (uint64_t)&v141;
              v140[0].i8[8] = 0;
              v89 = operator new(8uLL);
              v141.i64[0] = (uint64_t)v89;
              v141.i64[1] = (uint64_t)v89;
              *(_QWORD *)&v142 = v89 + 1;
              v90 = v88;
              *v89 = v90;
              v141.i64[1] = (uint64_t)(v89 + 1);
              LODWORD(v89) = ou3dod::IsObjectBelongToType((uint64_t)v87 + 224 * (_QWORD)v58, &v141);
              v140[0].i64[0] = (uint64_t)&v141;
              std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)v140);

              if ((_DWORD)v89)
                v91 = 0.15;
              else
                v91 = 0.1;
              v147 = 0u;
              v148 = 0u;
              v145 = 0u;
              v146 = 0u;
              v143 = 0u;
              v144 = 0u;
              v141 = 0u;
              v142 = 0u;
              box3dEnlarge((float32x4_t *)__p, v86, v91, 0.0, &v141);
              v57 = v124;
              memset(v140, 0, sizeof(v140));
              box3dEnlarge(v151, v86, v91, 0.0, v140);
              memset(v139, 0, sizeof(v139));
              box3dIou(&v141, v140, 0, (uint64_t)v139);
              v92 = *(float *)(*(_QWORD *)(v167 + 24 * (_QWORD)v58) + 8);
              v93 = *(float *)(*(_QWORD *)(v167 + v61) + 8);
              v94 = *(float *)v139;
              v95 = *((float *)&v150 + 1);
              v97 = (objc_msgSend(*((id *)&v131[1].var5.var0 + 28 * (_QWORD)v58), "isEqualToString:", v90) & 1) == 0
                 && !objc_msgSend(*((id *)&v131[1].var5.var0 + 28 * (_QWORD)v58), "isEqualToString:", CFSTR("Cabinet"))|| vabds_f32(*((float *)&v160 + 2), *((float *)&v152 + 2)) < 0.2;
              IsBoxSurfaceAttached = ou3dod::IsBoxSurfaceAttached((float32x4_t *)v131 + 14 * (_QWORD)v58, (const box3d *)((char *)v131 + v62), v96);
              v99 = fabsf(vaddv_f32(vmul_f32(v66, v68))) >= 0.173;
              if (vabds_f32(v92, v93) >= 0.7)
                v99 = 1;
              if (v94 <= 0.0)
                v99 = 1;
              if (v95 > 0.6)
                v99 = 1;
              if (!v99 && v97 && !IsBoxSurfaceAttached)
              {
                v135[0] = v58;
                v135[1] = i;
                std::__hash_table<std::pair<unsigned long,unsigned long>,ou3dod::pair_hash,std::equal_to<std::pair<unsigned long,unsigned long>>,std::allocator<std::pair<unsigned long,unsigned long>>>::__emplace_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<unsigned long,unsigned long>>((uint64_t)&v125, v135, v135);
                objc_msgSend(*((id *)&v131[1].var5.var2.var0 + 28 * (_QWORD)v58), "UUIDString");
                v100 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v170[0] = (__int128 *)objc_msgSend(v100, "UTF8String");
                objc_msgSend(*(id *)((char *)&v131[1].var5.var2.var0 + v62), "UUIDString");
                v101 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v134 = (char *)objc_msgSend(v101, "UTF8String");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v135, (char **)v170, &v134);

                v170[0] = (__int128 *)v135;
                std::__hash_table<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::__unordered_map_hasher<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,ou3dod::pair_hash,std::equal_to<std::pair<std::string,std::string>>,true>,std::__unordered_map_equal<std::pair<std::string,std::string>,std::__hash_value_type<std::pair<std::string,std::string>,BOOL>,std::equal_to<std::pair<std::string,std::string>>,ou3dod::pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<std::string,std::string>,BOOL>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::string> const&>,std::tuple<>>(v123, (unsigned __int8 *)v135, (uint64_t)&std::piecewise_construct, v170)[64] = 0;
                if (v138 < 0)
                  operator delete(v137);
                if (v136 < 0)
                  operator delete(v135[0]);
              }
            }
          }
        }
        v62 += 224;
        v61 += 24;
      }
      v58 = (char *)v58 + 1;
    }
    while (v58 != (void *)v60);
  }
  __p[0] = &v167;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    ou3dod::OU3DLShapeObjectMerger::MergeLShape((uint64_t)&v125, v57, v102, v103, v104, v105, v106, v107);

  v151[0].i8[0] = 0;
  std::vector<BOOL>::vector(__p, (int)v117, (unsigned __int8 *)v151);
  for (j = (_QWORD *)v126; j; j = (_QWORD *)*j)
    ou3dod::LShapeBeautification(v122, j[2], j[3], v121, a4, (uint64_t *)&v131, __p, v118);
  if (v116 >= 1)
  {
    v109 = 0;
    v110 = 0;
    do
    {
      ou3dod::MaybeReorderBackObjectCorner((float32x4_t *)((char *)v131 + v109), *(float32x2_t *)((char *)v128 + 8 * v110++));
      v109 += 224;
    }
    while (v117 != v110);
    v111 = 0;
    v112 = 0;
    do
    {
      if (((*(_QWORD *)((char *)__p[0] + ((v112 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v112) & 1) == 0)
      {
        v113 = (OUBox3d *)((char *)v131 + v111);
        v114 = v122[1];
        if (v114 >= v122[2])
        {
          v115 = std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(v122, v113);
        }
        else
        {
          OUBox3d::OUBox3d((OUBox3d *)v122[1], v113);
          v115 = v114 + 224;
          v122[1] = v114 + 224;
        }
        v122[1] = v115;
      }
      ++v112;
      v111 += 224;
    }
    while (v117 != v112);
  }
  if (__p[0])
    operator delete(__p[0]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v125);
  if (v128)
  {
    v129 = (float32x2_t *)v128;
    operator delete(v128);
  }
  __p[0] = &v131;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);

}

void sub_2295264C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a25);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  STACK[0x2F0] = (unint64_t)&a33;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  STACK[0x2F0] = a17;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);

  _Unwind_Resume(a1);
}

uint64_t ou3dod::OU3DLShapeObjectMerger::GetLShapeMergeInfo(ou3dod::OU3DLShapeObjectMerger *this)
{
  return (uint64_t)ou3dod::HistoryMergeInfo::Get(this) + 40;
}

void _GLOBAL__sub_I_OU3DLShapeObjectMerger_mm()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t i;
  uint64_t j;
  void *context;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __CFString *v36;
  int v37;
  __CFString *v38;
  int v39;
  __CFString *v40;
  int v41;
  __CFString *v42;
  int v43;
  __CFString *v44;
  int v45;
  __CFString *v46;
  int v47;
  __CFString *v48;
  int v49;
  __CFString *v50;
  int v51;
  __CFString *v52;
  int v53;
  id v54;
  int v55;
  __CFString *v56;
  int v57;
  __CFString *v58;
  int v59;
  __CFString *v60;
  int v61;
  __CFString *v62;
  int v63;
  __CFString *v64;
  int v65;
  id v66;
  int v67;
  __CFString *v68;
  int v69;
  id v70;
  int v71;
  __CFString *v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x22E2CB070]();
  LODWORD(v21) = 0;
  *((_QWORD *)&v21 + 1) = CFSTR("Unknown");
  LODWORD(v22) = 1;
  *((_QWORD *)&v22 + 1) = *((id *)&v21 + 1);
  LODWORD(v23) = 2;
  *((_QWORD *)&v23 + 1) = *((id *)&v22 + 1);
  LODWORD(v24) = 3;
  *((_QWORD *)&v24 + 1) = *((id *)&v23 + 1);
  LODWORD(v25) = 4;
  *((_QWORD *)&v25 + 1) = *((id *)&v24 + 1);
  LODWORD(v26) = 5;
  *((_QWORD *)&v26 + 1) = *((id *)&v25 + 1);
  LODWORD(v27) = 6;
  v20 = CFSTR("Door");
  *((_QWORD *)&v27 + 1) = v20;
  LODWORD(v28) = 7;
  v19 = CFSTR("Window");
  *((_QWORD *)&v28 + 1) = v19;
  LODWORD(v29) = 8;
  *((_QWORD *)&v29 + 1) = *((id *)&v26 + 1);
  LODWORD(v30) = 9;
  v17 = CFSTR("Fireplace");
  *((_QWORD *)&v30 + 1) = v17;
  LODWORD(v31) = 10;
  *((_QWORD *)&v31 + 1) = *((id *)&v29 + 1);
  LODWORD(v32) = 11;
  *((_QWORD *)&v32 + 1) = *((id *)&v31 + 1);
  LODWORD(v33) = 12;
  v18 = CFSTR("Stairs");
  *((_QWORD *)&v33 + 1) = v18;
  LODWORD(v34) = 13;
  v13 = CFSTR("Bed");
  *((_QWORD *)&v34 + 1) = v13;
  LODWORD(v35) = 14;
  v36 = CFSTR("Cabinet");
  v37 = 15;
  v16 = CFSTR("Chair");
  v38 = v16;
  v39 = 16;
  v40 = v36;
  v41 = 17;
  v42 = v40;
  v43 = 18;
  v15 = CFSTR("Sofa");
  v44 = v15;
  v45 = 19;
  v14 = CFSTR("Table");
  v46 = v14;
  v47 = 20;
  v12 = CFSTR("Toilet");
  v48 = v12;
  v49 = 21;
  v0 = CFSTR("Sink");
  v50 = v0;
  v51 = 22;
  v11 = CFSTR("Bathtub");
  v52 = v11;
  v53 = 23;
  v54 = *((id *)&v32 + 1);
  v55 = 24;
  v1 = CFSTR("Refrigerator");
  v56 = v1;
  v57 = 25;
  v2 = CFSTR("Stove");
  v58 = v2;
  v59 = 26;
  v3 = CFSTR("Washer");
  v60 = v3;
  v61 = 27;
  v4 = CFSTR("Oven");
  v62 = v4;
  v63 = 28;
  v5 = CFSTR("Dishwasher");
  v64 = v5;
  v65 = 29;
  v66 = v54;
  v67 = 30;
  v6 = v42;
  v68 = v6;
  v69 = 31;
  v70 = v66;
  v71 = 32;
  v7 = CFSTR("Screen");
  v72 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v21, 33);
  for (i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_2294C8000);
  v31 = xmmword_229561920;
  v32 = unk_229561930;
  v33 = xmmword_229561940;
  v34 = unk_229561950;
  v27 = xmmword_2295618E0;
  v28 = unk_2295618F0;
  v29 = xmmword_229561900;
  v30 = unk_229561910;
  v23 = xmmword_2295618A0;
  v24 = unk_2295618B0;
  v25 = xmmword_2295618C0;
  v26 = unk_2295618D0;
  v21 = xmmword_229561880;
  v22 = unk_229561890;
  v35 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v21, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_2294C8000);
  LODWORD(v21) = 0;
  *((_QWORD *)&v21 + 1) = v6;
  LODWORD(v22) = 1;
  *((_QWORD *)&v22 + 1) = v1;
  LODWORD(v23) = 2;
  *((_QWORD *)&v23 + 1) = CFSTR("Shelf");
  LODWORD(v24) = 3;
  *((_QWORD *)&v24 + 1) = v2;
  LODWORD(v25) = 4;
  *((_QWORD *)&v25 + 1) = v13;
  LODWORD(v26) = 5;
  *((_QWORD *)&v26 + 1) = v0;
  LODWORD(v27) = 6;
  *((_QWORD *)&v27 + 1) = v3;
  LODWORD(v28) = 7;
  *((_QWORD *)&v28 + 1) = v12;
  LODWORD(v29) = 8;
  *((_QWORD *)&v29 + 1) = v11;
  LODWORD(v30) = 9;
  *((_QWORD *)&v30 + 1) = v4;
  LODWORD(v31) = 10;
  *((_QWORD *)&v31 + 1) = v5;
  LODWORD(v32) = 11;
  *((_QWORD *)&v32 + 1) = v17;
  LODWORD(v33) = 12;
  *((_QWORD *)&v33 + 1) = CFSTR("Stool");
  LODWORD(v34) = 13;
  *((_QWORD *)&v34 + 1) = v16;
  LODWORD(v35) = 14;
  v36 = v14;
  v37 = 15;
  v38 = v7;
  v39 = 16;
  v40 = v15;
  v41 = 17;
  v42 = v18;
  v43 = 18;
  v44 = v19;
  v45 = 19;
  v46 = v20;
  v47 = 20;
  v48 = CFSTR("BuildInCabinet");
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v21, 21);
  for (j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_2294C8000);
  objc_autoreleasePoolPop(context);
}

void sub_229526D4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 328; i != -8; i -= 16)

  _Unwind_Resume(a1);
}

void sub_229527190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229527434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::~pair(uint64_t a1)
{
  std::__tree<int>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  std::__tree<int>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::~set[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

ou3dor::OU3DObjectRepresentation *ou3dor::OU3DObjectRepresentation::OU3DObjectRepresentation(ou3dor::OU3DObjectRepresentation *this, int a2)
{
  ou3dor::OU3DOROnlineEspressoV2 *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  ou3dor::OU3DOROfflineEspressoV2 *v9;
  uint64_t v10;
  ou3dor::OU3DORParser *v11;
  __int16 v13;
  __int16 v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::set[abi:ne180100]((uint64_t *)this + 2, (uint64_t)&ou3dor::k3DORTargetClasses);
  *((_OWORD *)this + 3) = 0u;
  *((_BYTE *)this + 80) = 0;
  *((_OWORD *)this + 4) = 0u;
  utils::OUImageUtils::OUImageUtils((ou3dor::OU3DObjectRepresentation *)((char *)this + 96));
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  if (a2)
  {
    v4 = (ou3dor::OU3DOROnlineEspressoV2 *)operator new();
    ou3dor::OU3DOROnlineEspressoV2::OU3DOROnlineEspressoV2(v4);
    v5 = *(_QWORD *)this;
    *(_QWORD *)this = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v14 = 0;
      v7 = "======== Load Online 2D Embedding is done. ========";
      v8 = (uint8_t *)&v14;
LABEL_10:
      _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, v7, v8, 2u);
    }
  }
  else
  {
    v9 = (ou3dor::OU3DOROfflineEspressoV2 *)operator new();
    ou3dor::OU3DOROfflineEspressoV2::OU3DOROfflineEspressoV2(v9);
    v10 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v13 = 0;
      v7 = "======== Load offline 3DOR is done. ========";
      v8 = (uint8_t *)&v13;
      goto LABEL_10;
    }
  }

  v11 = (ou3dor::OU3DORParser *)operator new();
  ou3dor::OU3DORParser::OU3DORParser(v11);
  std::unique_ptr<ou3dor::OU3DORParser>::reset[abi:ne180100]((OU3DORIDTree **)this + 6, v11);
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 80) = 0;
  return this;
}

void sub_2295276F4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  OU3DORIDTree **v3;
  utils::OUImageUtils *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v7 = v6;
  MEMORY[0x22E2CAAE8](v7, 0x10F1C404C2F8F17);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table(v5);
  utils::OUImageUtils::~OUImageUtils(v4);

  std::unique_ptr<ou3dor::OU3DORParser>::reset[abi:ne180100](v3, 0);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v2, (_QWORD *)v1[3]);
  v9 = v1[1];
  v1[1] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *v1;
  *v1 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void sub_2295277DC()
{
  JUMPOUT(0x2295277A4);
}

uint64_t ou3dor::OU3DObjectRepresentation::InitRotater(ou3dor::OU3DObjectRepresentation *this, CVPixelBufferRef pixelBuffer)
{
  uint64_t PixelFormatType;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;

  if (!*((_BYTE *)this + 80))
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    v4 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 90, PixelFormatType, 224.0, 224.0);
    v5 = (void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v4;

    v6 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 180, PixelFormatType, 224.0, 224.0);
    v7 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v6;

    v8 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 270, PixelFormatType, 224.0, 224.0);
    v9 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v8;

    *((_BYTE *)this + 80) = 1;
  }
  return 1;
}

BOOL ou3dor::OU3DObjectRepresentation::InitRotater(ou3dor::OU3DObjectRepresentation *this, _OUFrame *a2)
{
  _OUFrame *v3;
  __CVBuffer *v4;
  __CVBuffer *v5;
  uint64_t PixelFormatType;
  size_t Width;
  size_t Height;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;

  v3 = a2;
  v4 = -[_OUFrame GetSceneColorBufferBGRA](v3, "GetSceneColorBufferBGRA");
  v5 = v4;
  if (v4 && !*((_BYTE *)this + 80))
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(v4);
    Width = CVPixelBufferGetWidth(v5);
    Height = CVPixelBufferGetHeight(v5);
    v9 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 90, PixelFormatType, (float)Height, (float)Width);
    v10 = (void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v9;

    v11 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 180, PixelFormatType, (float)Width, (float)Height);
    v12 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v11;

    v13 = -[OUCVPixelBufferRotate initForRotationDegree:resolution:pixelFormat:]([OUCVPixelBufferRotate alloc], "initForRotationDegree:resolution:pixelFormat:", 270, PixelFormatType, (float)Height, (float)Width);
    v14 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v13;

    *((_BYTE *)this + 80) = 1;
  }

  return v5 != 0;
}

void sub_2295279D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CVBuffer *ou3dor::OU3DObjectRepresentation::RotateImage(ou3dor::OU3DObjectRepresentation *this, _OUFrame *a2, __CVBuffer *a3)
{
  _OUFrame *v5;
  NSObject *v6;
  id *v7;
  NSObject *v8;
  uint8_t v10[16];

  v5 = a2;
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    ou3dor::OU3DObjectRepresentation::RotateImage();

  switch(-[_OUFrame deviceOrientation](v5, "deviceOrientation"))
  {
    case 1:
      v7 = (id *)((char *)this + 56);
      goto LABEL_10;
    case 2:
      v7 = (id *)((char *)this + 72);
      goto LABEL_10;
    case 3:
      goto LABEL_14;
    case 4:
      v7 = (id *)((char *)this + 64);
LABEL_10:
      v8 = *v7;
      a3 = (__CVBuffer *)-[NSObject rotateImage:](v8, "rotateImage:", a3);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "Generating up-right over wide camera image.", v10, 2u);
      }

      break;
    default:
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        ou3dor::OU3DObjectRepresentation::RotateImage();
      a3 = 0;
      v8 = v6;
      break;
  }

LABEL_14:
  return a3;
}

void sub_229527B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::AddObjects2DFeatures(ou3dor::OU3DObjectRepresentation *a1, void *a2, void *a3)
{
  _OUFrame *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  OUVizTool *v8;
  OUVizTool *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t i;
  void *v15;
  void *v16;
  id v17;
  unsigned __int8 *v18;
  void *v19;
  double v20;
  _DWORD *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t j;
  OU3DObject *v28;
  BOOL v29;
  void *v30;
  void *v31;
  BOOL v32;
  void *v33;
  void *v34;
  int v35;
  int8x16_t v36;
  __CVBuffer *v37;
  char v38;
  __CVBuffer *v39;
  __CVBuffer *v40;
  char v41;
  __CVBuffer *v42;
  __CVBuffer *v43;
  void *v44;
  id v45;
  OUVizTool *v46;
  OUVizTool *v47;
  void *v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  unsigned __int8 *v56;
  void *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  id v65;
  void *v66;
  __CVBuffer *pixelBuffer;
  void **v69;
  _OUFrame *v70;
  NSObject *obj;
  uint64_t v72;
  void *v73;
  _BYTE *v74;
  uint64_t v75;
  void *v76;
  _BYTE *v77;
  char v78;
  char v79;
  void *v80[2];
  char v81;
  void *__p[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  void *v95;
  _BYTE *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  void *v102;
  _BYTE *v103;
  uint64_t v104;
  uint8_t buf[24];
  uint64_t v106;
  void *v107[2];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _BYTE v115[128];
  _BYTE v116[128];
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v65 = a3;
  v70 = v4;
  if (!v4 || (-[_OUFrame camera](v4, "camera"), (v5 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_69:
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    obj = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(obj, OS_LOG_TYPE_DEBUG))
      ou3dor::OU3DObjectRepresentation::AddObjects2DFeatures();
LABEL_71:

    goto LABEL_72;
  }
  -[_OUFrame sceneCamera](v4, "sceneCamera");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6 || !-[_OUFrame sceneColorBuffer](v4, "sceneColorBuffer"))
  {

    goto LABEL_69;
  }
  v7 = -[_OUFrame sceneDepthBuffer](v4, "sceneDepthBuffer");

  if (!v7)
    goto LABEL_69;
  if (objc_msgSend(v65, "count") || *(_DWORD *)OUVizTool::Get(0))
  {
    v8 = -[_OUFrame GetSceneColorBufferBGRA](v70, "GetSceneColorBufferBGRA");
    v9 = (OUVizTool *)OUVizTool::Get(v8);
    OUVizTool::SaveARFrameImage(v9, v8);
    pixelBuffer = v8;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v10 = v65;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v98, v116, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v99;
      v13 = (_QWORD *)((char *)a1 + 128);
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v99 != v12)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * i);
          objc_msgSend(v15, "identifier");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "UUIDString");
          v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(&v76, (char *)objc_msgSend(v17, "UTF8String"));

          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v13, (unsigned __int8 *)&v76))
          {
            v18 = std::__hash_table<std::__hash_value_type<std::string,__CVBuffer *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,__CVBuffer *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,__CVBuffer *>>>::find<std::string>(v13, (unsigned __int8 *)&v76);
            if (!v18)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v95 = 0;
            v96 = 0;
            v97 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v95, *((const void **)v18 + 5), *((_QWORD *)v18 + 6), (uint64_t)(*((_QWORD *)v18 + 6) - *((_QWORD *)v18 + 5)) >> 2);
            v107[1] = 0;
            v107[0] = 0;
            *(_QWORD *)&v108 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v107, v95, (uint64_t)v96, (v96 - (_BYTE *)v95) >> 2);
            __p[0] = 0;
            __p[1] = 0;
            *(_QWORD *)&v83 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v107[0], (uint64_t)v107[1], ((char *)v107[1] - (char *)v107[0]) >> 2);
            objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", ((char *)__p[1] - (char *)__p[0]) >> 2);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v21 = __p[0];
            if (__p[1] != __p[0])
            {
              v22 = 0;
              do
              {
                LODWORD(v20) = v21[v22];
                objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v20);
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v19, "addObject:", v23);

                ++v22;
                v21 = __p[0];
              }
              while (v22 < ((char *)__p[1] - (char *)__p[0]) >> 2);
            }
            v24 = (void *)objc_msgSend(v19, "copy");

            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (v107[0])
            {
              v107[1] = v107[0];
              operator delete(v107[0]);
            }
            if (v95)
            {
              v96 = v95;
              operator delete(v95);
            }
            objc_msgSend(v15, "updateObjectEmbedding2d:", v24);

          }
          if (v78 < 0)
            operator delete(v76);
        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v98, v116, 16);
      }
      while (v11);
    }

    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    obj = v10;
    v25 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v91, v115, 16);
    if (v25)
    {
      v72 = *(_QWORD *)v92;
      v69 = (void **)((char *)a1 + 96);
      *(_QWORD *)&v26 = 138412802;
      v64 = v26;
      while (1)
      {
        for (j = 0; j != v25; ++j)
        {
          if (*(_QWORD *)v92 != v72)
            objc_enumerationMutation(obj);
          v28 = *(OU3DObject **)(*((_QWORD *)&v91 + 1) + 8 * j);
          -[OU3DObject type](v28, "type", v64);
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__count_unique<NSString * {__strong}>((uint64_t)a1 + 16, &v90) == 0;

          if (!v29)
          {
            -[OU3DObject boxesDict](v28, "boxesDict");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "objectForKey:", CFSTR("rawdetection"));
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            v32 = v31 == 0;

            if (!v32)
            {
              v88 = 0u;
              v89 = 0u;
              v86 = 0u;
              v87 = 0u;
              v84 = 0u;
              v85 = 0u;
              *(_OWORD *)__p = 0u;
              v83 = 0u;
              -[OU3DObject boxesDict](v28, "boxesDict");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("rawdetection"));
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              box3dFromNSArray(v34, (uint64_t)__p);

              box3dEnlarge((float32x4_t *)__p, 0.1, 0.1, 0.1, v107);
              v86 = v111;
              v87 = v112;
              v88 = v113;
              v89 = v114;
              *(_OWORD *)__p = *(_OWORD *)v107;
              v83 = v108;
              v84 = v109;
              v85 = v110;
              IsObjectBoxInView(v70, (box3d *)__p, (simd_float4 *)v107);
              if ((_BYTE)v108)
              {
                *(int32x2_t *)v36.i8 = ou3dor::OU3DObjectRepresentation::MaybeEnlargeCropImageSize(v35, pixelBuffer, (int32x2_t *)v107);
                v37 = utils::OUImageUtils::SquareCropImage(v69, pixelBuffer, 0x100u, *(double *)v36.i64, (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
                if (v38)
                {
                  v39 = v37;
                  v40 = utils::OUImageUtils::CropImage(v69, v37, COERCE_DOUBLE(0x1000000010), COERCE_DOUBLE(0xE0000000E0));
                  if (v41)
                  {
                    v42 = v40;
                    ou3dor::OU3DObjectRepresentation::InitRotater(a1, v40);
                    v43 = ou3dor::OU3DObjectRepresentation::RotateImage(a1, v70, v42);
                    if (v43)
                    {
                      -[OU3DObject identifier](v28, "identifier");
                      v44 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v44, "UUIDString");
                      v45 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                      std::string::basic_string[abi:ne180100]<0>(v80, (char *)objc_msgSend(v45, "UTF8String"));

                      v47 = (OUVizTool *)OUVizTool::Get(v46);
                      OUVizTool::SaveObjectImageCrop(v47, v28, v43);
                      if (ou3dor::OU3DOROnlineEspressoV2::SetInput(*(ou3dor::OU3DOROnlineEspressoV2 **)a1, v43)
                        && (ou3dor::OU3DOREspressoV2Interface::Inference(*(ou3dor::OU3DOREspressoV2Interface **)a1),
                            ou3dor::OU3DOROnlineEspressoV2::GetOutput(*(_QWORD *)a1, &v76),
                            v79))
                      {
                        v73 = 0;
                        v74 = 0;
                        v75 = 0;
                        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v73, v76, (uint64_t)v77, (v77 - (_BYTE *)v76) >> 2);
                        v102 = 0;
                        v103 = 0;
                        v104 = 0;
                        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v102, v73, (uint64_t)v74, (v74 - (_BYTE *)v73) >> 2);
                        memset(buf, 0, sizeof(buf));
                        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(buf, v102, (uint64_t)v103, (v103 - (_BYTE *)v102) >> 2);
                        objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2);
                        v48 = (void *)objc_claimAutoreleasedReturnValue();
                        v50 = *(_QWORD *)buf;
                        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                        {
                          v51 = 0;
                          do
                          {
                            LODWORD(v49) = *(_DWORD *)(v50 + 4 * v51);
                            objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v49);
                            v52 = (void *)objc_claimAutoreleasedReturnValue();
                            objc_msgSend(v48, "addObject:", v52);

                            ++v51;
                            v50 = *(_QWORD *)buf;
                          }
                          while (v51 < (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2);
                        }
                        v66 = (void *)objc_msgSend(v48, "copy");

                        if (*(_QWORD *)buf)
                        {
                          *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                          operator delete(*(void **)buf);
                        }
                        if (v102)
                        {
                          v103 = v102;
                          operator delete(v102);
                        }
                        if (v73)
                        {
                          v74 = v73;
                          operator delete(v73);
                        }
                        -[OU3DObject updateObjectEmbedding2d:](v28, "updateObjectEmbedding2d:", v66);
                        -[OU3DObject embedding2d](v28, "embedding2d");
                        v53 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v53, "objectAtIndexedSubscript:", 0);
                        v54 = (void *)objc_claimAutoreleasedReturnValue();
                        -[OU3DObject updateObjectEmbedding3d:](v28, "updateObjectEmbedding3d:", v54);

                        -[OU3DObject embedding3d](v28, "embedding3d");
                        v55 = (void *)objc_claimAutoreleasedReturnValue();
                        vectorFromNSArray(v55, buf);
                        v102 = v80;
                        v56 = std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 128, (unsigned __int8 *)v80, (uint64_t)&std::piecewise_construct, (__int128 **)&v102);
                        v57 = (void *)*((_QWORD *)v56 + 5);
                        if (v57)
                        {
                          *((_QWORD *)v56 + 6) = v57;
                          operator delete(v57);
                          *((_QWORD *)v56 + 5) = 0;
                          *((_QWORD *)v56 + 6) = 0;
                          *((_QWORD *)v56 + 7) = 0;
                        }
                        *(_OWORD *)(v56 + 40) = *(_OWORD *)buf;
                        *((_QWORD *)v56 + 7) = *(_QWORD *)&buf[16];
                        memset(buf, 0, sizeof(buf));

                        _OULoggingGetOSLogForCategoryObjectUnderstanding();
                        v58 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
                        {
                          -[OU3DObject type](v28, "type");
                          v59 = (void *)objc_claimAutoreleasedReturnValue();
                          -[OU3DObject identifier](v28, "identifier");
                          v60 = (void *)objc_claimAutoreleasedReturnValue();
                          -[OU3DObject embedding2d](v28, "embedding2d");
                          v61 = (void *)objc_claimAutoreleasedReturnValue();
                          v62 = objc_msgSend(v61, "count");
                          *(_DWORD *)buf = v64;
                          *(_QWORD *)&buf[4] = v59;
                          *(_WORD *)&buf[12] = 2112;
                          *(_QWORD *)&buf[14] = v60;
                          *(_WORD *)&buf[22] = 2048;
                          v106 = v62;
                          _os_log_impl(&dword_2294C8000, v58, OS_LOG_TYPE_INFO, "😁 [OR] Online embedding runs on %@ of UUID %@, %zu.", buf, 0x20u);

                        }
                        if (v79 && v76)
                        {
                          v77 = v76;
                          operator delete(v76);
                        }
                        v63 = 0;
                      }
                      else
                      {
                        v63 = 5;
                      }
                      if (v81 < 0)
                      {
                        operator delete(v80[0]);
                        if (v63)
                          continue;
                      }
                      else if (v63)
                      {
                        continue;
                      }
                    }
                    CVPixelBufferRelease(v39);
                    CVPixelBufferRelease(v42);
                  }
                }
              }
            }
          }
        }
        v25 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v91, v115, 16);
        if (!v25)
          goto LABEL_71;
      }
    }
    goto LABEL_71;
  }
LABEL_72:

}

void sub_229528428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

int32x2_t ou3dor::OU3DObjectRepresentation::MaybeEnlargeCropImageSize(int a1, CVPixelBufferRef pixelBuffer, int32x2_t *a3)
{
  int Width;

  Width = CVPixelBufferGetWidth(pixelBuffer);
  CVPixelBufferGetHeight(pixelBuffer);
  return vmax_s32(vsub_s32(*a3, vdup_n_s32((int)(float)((float)((float)Width * 0.0039062) * 5.0))), 0);
}

void ou3dor::OU3DObjectRepresentation::AddObjectRepresentation(uint64_t a1, void *a2, void *a3)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  OUVizTool *v21;
  OUVizTool *v22;
  OU3DORIDTree::Node **v23;
  id v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  id v39;
  uint64_t *v40;
  NSObject *v41;
  uint64_t *v42;
  void *v43;
  void *v44;
  BOOL v45;
  uint64_t v46;
  void *v47;
  uint64_t *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  OUPointCloud *v55;
  uint64_t v56;
  id v57;
  void *v58[2];
  char v59;
  uint64_t *v60;
  uint64_t *v61;
  void *v62[3];
  char v63;
  _QWORD v64[3];
  uint64_t v65[3];
  uint64_t v66[3];
  char v67;
  void *v68[3];
  void *v69[3];
  void *v70[3];
  float32x4_t v71[8];
  void *v72[3];
  void *v73;
  uint64_t v74[3];
  void *v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE __p[22];
  __int16 v79;
  uint64_t *v80;
  float32x4_t buf[8];
  uint8_t v82[4];
  uint64_t v83;
  uint8_t v84[4];
  _QWORD v85[5];

  *(_QWORD *)((char *)&v85[2] + 4) = *MEMORY[0x24BDAC8D0];
  v55 = a2;
  v57 = a3;
  if (objc_msgSend(v57, "count") && -[OUPointCloud count](v55, "count"))
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      buf[0].i16[0] = 0;
      _os_log_impl(&dword_2294C8000, v4, OS_LOG_TYPE_INFO, "[OR] Offline prediction starts.", (uint8_t *)buf, 2u);
    }

    if (*(_QWORD *)(a1 + 48))
    {
      v76 = 0;
      v75 = 0;
      v77 = 0;
      boxesFromObjects(v57, CFSTR("rawdetection"), (char **)&v75, v74);
      if ((int)((unint64_t)(v76 - (_BYTE *)v75) >> 2) >= 1)
      {
        v5 = 0;
        v56 = ((unint64_t)(v76 - (_BYTE *)v75) >> 2);
        while (1)
        {
          objc_msgSend(v57, "objectAtIndexedSubscript:", *((int *)v75 + v5));
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "type");
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          v7 = std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__count_unique<NSString * {__strong}>(a1 + 16, &v73) == 0;

          if (v7)
          {
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend(v6, "type");
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              ou3dor::OU3DObjectRepresentation::AddObjectRepresentation(v49, v84, v85, v4);
            }
            goto LABEL_69;
          }
          objc_msgSend(v6, "boxesDict");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "objectForKey:", CFSTR("rawdetection"));
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = v9 == 0;

          if (v10)
            break;
          objc_msgSend(v6, "embedding2d");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v11
            || (objc_msgSend(v6, "embedding2d"),
                v12 = (void *)objc_claimAutoreleasedReturnValue(),
                v13 = objc_msgSend(v12, "count") == 0,
                v12,
                v11,
                v13))
          {
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend(v6, "type");
              v51 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v6, "identifier");
              v52 = (void *)objc_claimAutoreleasedReturnValue();
              buf[0].i32[0] = 138412546;
              *(uint64_t *)((char *)buf[0].i64 + 4) = (uint64_t)v51;
              buf[0].i16[6] = 2112;
              *(uint64_t *)((char *)&buf[0].i64[1] + 6) = (uint64_t)v52;
              _os_log_debug_impl(&dword_2294C8000, v4, OS_LOG_TYPE_DEBUG, "[OR] The %@ has no online embedding: %@", (uint8_t *)buf, 0x16u);

            }
LABEL_69:

            goto LABEL_82;
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v6, "type");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "identifier");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            buf[0].i32[0] = 138412546;
            *(uint64_t *)((char *)buf[0].i64 + 4) = (uint64_t)v14;
            buf[0].i16[6] = 2112;
            *(uint64_t *)((char *)&buf[0].i64[1] + 6) = (uint64_t)v15;
            _os_log_impl(&dword_2294C8000, v4, OS_LOG_TYPE_INFO, "😁 [OR] Offline 3DOR runs on %@ of UUID %@.", (uint8_t *)buf, 0x16u);

          }
          objc_msgSend(v6, "embedding2d");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "objectAtIndexedSubscript:", 0);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          vectorFromNSArray(v17, v72);

          memset(buf, 0, sizeof(buf));
          objc_msgSend(v6, "boxesDict");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "objectForKey:", CFSTR("rawdetection"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          box3dFromNSArray(v19, (uint64_t)buf);

          memset(v71, 0, sizeof(v71));
          box3dEnlarge(buf, 0.1, 0.1, 0.1, v71);
          CollectPointCloudFromBox(v55, v71, v68);
          FarthestPointSample((uint64_t *)v68, v69, v70, 1024, (uint64_t)v64, v20);
          if (v67)
          {
            v21 = (OUVizTool *)NormalizePointCloud(v64, (uint64_t)v62);
            if (v63)
            {
              v22 = (OUVizTool *)OUVizTool::Get(v21);
              if (!v63 || (OUVizTool::SaveObjectPointCloud(v22, v6, (uint64_t)v62), !v63))
                std::__throw_bad_optional_access[abi:ne180100]();
              if ((ou3dor::OU3DOROfflineEspressoV2::SetInputs(*(_QWORD *)(a1 + 8), (int **)v72, (uint64_t)v62, v65, v66, v5, v74) & 1) != 0)
              {
                ou3dor::OU3DOREspressoV2Interface::Inference(*(ou3dor::OU3DOREspressoV2Interface **)(a1 + 8));
                ou3dor::OU3DOROfflineEspressoV2::GetOutput(*(_QWORD *)(a1 + 8), __p);
                if ((_BYTE)v80)
                {
                  if (*(_QWORD *)__p)
                  {
                    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
                    operator delete(*(void **)__p);
                  }
                  v23 = *(OU3DORIDTree::Node ***)(a1 + 48);
                  ou3dor::OU3DOROfflineEspressoV2::GetOutput(*(_QWORD *)(a1 + 8), __p);
                  if (!(_BYTE)v80)
                    std::__throw_bad_optional_access[abi:ne180100]();
                  objc_msgSend(v6, "type");
                  v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                  std::string::basic_string[abi:ne180100]<0>(v58, (char *)objc_msgSend(v24, "UTF8String"));
                  ou3dor::OU3DORParser::ParseNetworkOutput(v23, __p, (unsigned __int8 **)v58, (uint64_t *)&v60);
                  if (v59 < 0)
                    operator delete(v58[0]);

                  if ((_BYTE)v80 && *(_QWORD *)__p)
                  {
                    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
                    operator delete(*(void **)__p);
                  }
                  *(_DWORD *)__p = 33;
                  v25 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
                  if (!v25)
                    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                  v53 = (id)v25[3];
                  v26 = v61;
                  if (v60 != v61)
                  {
                    v27 = v60 + 6;
                    do
                    {
                      objc_msgSend(v6, "type");
                      v28 = (void *)objc_claimAutoreleasedReturnValue();
                      v29 = v27 - 6;
                      if (!objc_msgSend(v28, "isEqualToString:", CFSTR("Table")))
                        goto LABEL_42;
                      v30 = *((unsigned __int8 *)v27 - 25);
                      v31 = (char)v30;
                      if ((v30 & 0x80u) != 0)
                        v30 = *(v27 - 5);
                      if (v30 == 11
                        && (v31 >= 0 ? (v32 = v27 - 6) : (v32 = (uint64_t *)*v29),
                            (v33 = *v32, v34 = *(uint64_t *)((char *)v32 + 3), v33 == 0x68735F656C626174)
                          ? (v35 = v34 == 0x65706168735F656CLL)
                          : (v35 = 0),
                            v35))
                      {
                        objc_msgSend(v6, "parts");
                        v43 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v43, "objectForKey:", v53);
                        v44 = (void *)objc_claimAutoreleasedReturnValue();
                        v45 = v44 == 0;

                        if (!v45)
                        {
                          v41 = v4;
                          if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
                          {
                            objc_msgSend(v6, "type");
                            v46 = objc_claimAutoreleasedReturnValue();
                            v47 = (void *)v46;
                            if (*((char *)v27 - 25) < 0)
                              v29 = (uint64_t *)*v29;
                            v48 = v27;
                            if (*((char *)v27 + 23) < 0)
                              v48 = (uint64_t *)*v27;
                            *(_DWORD *)__p = 138412802;
                            *(_QWORD *)&__p[4] = v46;
                            *(_WORD *)&__p[12] = 2080;
                            *(_QWORD *)&__p[14] = v29;
                            v79 = 2080;
                            v80 = v48;
                            _os_log_impl(&dword_2294C8000, v4, OS_LOG_TYPE_INFO, "😄 [OR] Offline 3DOR runs on %@, and predict it's with attribute name:%s parts: %s not added due to L shape already detected.", __p, 0x20u);

                            v41 = v4;
                          }
                          goto LABEL_52;
                        }
                      }
                      else
                      {
LABEL_42:

                      }
                      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
                      {
                        objc_msgSend(v6, "type");
                        v36 = objc_claimAutoreleasedReturnValue();
                        v37 = (void *)v36;
                        if (*((char *)v27 - 25) < 0)
                          v29 = (uint64_t *)*v29;
                        v38 = v27;
                        if (*((char *)v27 + 23) < 0)
                          v38 = (uint64_t *)*v27;
                        *(_DWORD *)__p = 138412802;
                        *(_QWORD *)&__p[4] = v36;
                        *(_WORD *)&__p[12] = 2080;
                        *(_QWORD *)&__p[14] = v29;
                        v79 = 2080;
                        v80 = v38;
                        _os_log_impl(&dword_2294C8000, v4, OS_LOG_TYPE_INFO, "😄 [OR] Offline 3DOR runs on %@, and predict it's with attribute name:%s parts: %s.", __p, 0x20u);

                      }
                      v39 = objc_alloc(MEMORY[0x24BDD17C8]);
                      v40 = v27;
                      if (*((char *)v27 + 23) < 0)
                        v40 = (uint64_t *)*v27;
                      v41 = objc_msgSend(v39, "initWithUTF8String:", v40);
                      objc_msgSend(v6, "addObjectPartAttribute:", v41);
LABEL_52:

                      v42 = v27 + 4;
                      v27 += 10;
                    }
                    while (v42 != v26);
                  }

                  *(_QWORD *)__p = &v60;
                  std::vector<ou3dor::OU3DORParser::AttibuteInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                }
              }
              if (v63 && v62[0])
              {
                v62[1] = v62[0];
                operator delete(v62[0]);
              }
            }
          }
          _ZNSt3__124__optional_destruct_baseINS_5tupleIJNS_6vectorIDv3_fNS_9allocatorIS3_EEEENS2_IDv4_hNS4_IS7_EEEENS2_IDv4_tNS4_ISA_EEEEEEELb0EED2B8ne180100Ev((uint64_t)v64);
          if (v70[0])
          {
            v70[1] = v70[0];
            operator delete(v70[0]);
          }
          if (v69[0])
          {
            v69[1] = v69[0];
            operator delete(v69[0]);
          }
          if (v68[0])
          {
            v68[1] = v68[0];
            operator delete(v68[0]);
          }
          if (v72[0])
          {
            v72[1] = v72[0];
            operator delete(v72[0]);
          }
LABEL_82:

          if (++v5 == v56)
            goto LABEL_83;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(v6, "type");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          ou3dor::OU3DObjectRepresentation::AddObjectRepresentation(v50, v82, &v83, v4);
        }
        goto LABEL_69;
      }
LABEL_83:
      ou3dor::OU3DObjectRepresentation::PostProcess(a1, v57);
      buf[0].i64[0] = (uint64_t)v74;
      std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (v75)
      {
        v76 = v75;
        operator delete(v75);
      }
    }
    else
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        ou3dor::OU3DObjectRepresentation::AddObjectRepresentation();

    }
  }

}

void sub_229529058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,int a40,__int16 a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  void *v51;
  void *v52;
  void *v54;
  void *v55;

  STACK[0x260] = (unint64_t)&a33;
  std::vector<ou3dor::OU3DORParser::AttibuteInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  if (a39 && __p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  _ZNSt3__124__optional_destruct_baseINS_5tupleIJNS_6vectorIDv3_fNS_9allocatorIS3_EEEENS2_IDv4_hNS4_IS7_EEEENS2_IDv4_tNS4_ISA_EEEEEEELb0EED2B8ne180100Ev((uint64_t)&a41);
  _ZNSt3__15tupleIJNS_6vectorIDv3_fNS_9allocatorIS2_EEEENS1_IDv4_hNS3_IS6_EEEENS1_IDv4_tNS3_IS9_EEEEEED1Ev((uint64_t)&a51);
  v54 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v54;
    operator delete(v54);
  }

  STACK[0x280] = (unint64_t)&STACK[0x230];
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x280]);
  v55 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v55;
    operator delete(v55);
  }

  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::at(_QWORD *a1, int *a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 3;
}

uint64_t _ZNSt3__15tupleIJNS_6vectorIDv3_fNS_9allocatorIS2_EEEENS1_IDv4_hNS3_IS6_EEEENS1_IDv4_tNS3_IS9_EEEEEED1Ev(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void ou3dor::OU3DObjectRepresentation::PostProcess(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  ou3dor::OU3DObjectRepresentation::LshapeSofaPostProcess(a1, v7);
  ou3dor::OU3DObjectRepresentation::AssignCabinetShelfPartAttribute(v3, v7);
  ou3dor::OU3DObjectRepresentation::AssignSingleSeatedSofaAttribute(v4, v7);
  ou3dor::OU3DObjectRepresentation::AssignChairTypeStoolAttribute(a1, v7);
  ou3dor::OU3DObjectRepresentation::RegulateTableTypeDeskAttribute(v5, v7);
  ou3dor::OU3DObjectRepresentation::RegulateTableTypeCoffeeAttribute(a1, v7);
  ou3dor::OU3DObjectRepresentation::ConflictAttributeSetMapping(v6, v7);

}

void sub_229529374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::AssignCabinetShelfPartAttribute(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  int v10;
  id v11;
  void *v12;
  int v13;
  id v14;
  id v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  v21 = 101;
  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v21);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v16 = (id)v2[3];
  v21 = 102;
  v3 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v21);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = (id)v3[3];
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = v14;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_msgSend(v8, "type");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("Cabinet"));

        if (v10)
        {
          objc_msgSend(v8, "setType:", CFSTR("Storage"));
          v11 = v16;
        }
        else
        {
          objc_msgSend(v8, "type");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "isEqualToString:", CFSTR("Shelf"));

          if (!v13)
            continue;
          objc_msgSend(v8, "setType:", CFSTR("Storage"));
          v11 = v15;
        }
        objc_msgSend(v8, "addObjectPartAttribute:", v11);
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v5);
  }

}

void sub_2295295A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::AssignSingleSeatedSofaAttribute(uint64_t a1, void *a2)
{
  id v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t *v5;
  id v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  float v18;
  float v19;
  float v20;
  id v21;
  void *__p[3];
  uint64_t v23[3];
  void *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = a2;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  boxesFromObjects(v2, CFSTR("rawdetection"), (char **)&v24, v23);
  v4 = v24;
  v3 = v25;
  LODWORD(__p[0]) = 16;
  v5 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (id)v5[3];
  LODWORD(__p[0]) = 18;
  v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = v3 - v4;
  v21 = (id)v7[3];
  if ((int)(v8 >> 2) >= 1)
  {
    v9 = 0;
    v10 = (v8 >> 2);
    do
    {
      objc_msgSend(v2, "objectAtIndexedSubscript:", *((int *)v24 + v9), v21);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "type");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v12, "isEqualToString:", CFSTR("Sofa")) & 1) != 0)
      {
        objc_msgSend(v11, "boxesDict");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "objectForKey:", CFSTR("rawdetection"));
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          objc_msgSend(v11, "parts");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "objectForKey:", v6);
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v16)
          {
            box3dToCentroidSizeAngle((float32x4_t *)(v23[0] + 224 * v9), (uint64_t *)__p);
            v17 = __p[0];
            v18 = *((float *)__p[0] + 3);
            v19 = *((float *)__p[0] + 4);
            if (v18 >= v19)
              v20 = *((float *)__p[0] + 4);
            else
              v20 = *((float *)__p[0] + 3);
            if (v19 >= v18)
              v18 = *((float *)__p[0] + 4);
            if ((float)(v20 / v18) <= 0.8
              || (objc_msgSend(v11, "addObjectPartAttribute:", v21),
                  objc_msgSend(v11, "removeObjectPartAttribute:", v6),
                  (v17 = __p[0]) != 0))
            {
              __p[1] = v17;
              operator delete(v17);
            }
          }
        }
      }
      else
      {

      }
      ++v9;
    }
    while (v9 != v10);
  }

  __p[0] = v23;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }

}

void sub_229529848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::AssignChairTypeStoolAttribute(uint64_t a1, void *a2)
{
  uint64_t *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  id v16;
  void *__p[2];
  char v18;
  uint64_t AttributeIDRange;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  LODWORD(__p[0]) = 9;
  v3 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v4 = (id)v3[3];
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v5 = v16;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v21 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_msgSend(v9, "type");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("Chair"));

        if ((v11 & 1) != 0)
        {
          objc_msgSend(v9, "parts");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "objectForKey:", v4);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = v13 == 0;

          if (!v14)
          {
            v15 = *(_QWORD *)(a1 + 48);
            std::string::basic_string[abi:ne180100]<0>(__p, "chair_type");
            AttributeIDRange = ou3dor::OU3DORParser::FindAttributeIDRange(v15, __p);
            ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes(AttributeIDRange, (int *)&AttributeIDRange, 103, v9);
            if (v18 < 0)
              operator delete(__p[0]);
          }
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v6);
  }

}

void sub_229529AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes(uint64_t a1, int *a2, int a3, void *a4)
{
  id v5;
  int v6;
  uint64_t *v7;
  uint64_t *v9;
  void *exception;
  int v11;
  int v12;
  int v13;

  v13 = a3;
  v5 = a4;
  v6 = *a2;
  if (*a2 > a2[1])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E2CA890](exception, "[3DOR] input range not valid");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  do
  {
    v12 = v6;
    if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v12))
    {
      v11 = v6;
      v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v11);
      if (!v7)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      objc_msgSend(v5, "removeObjectPartAttribute:", v7[3]);
    }
  }
  while (v6++ < a2[1]);
  v9 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v13);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  objc_msgSend(v5, "addObjectPartAttribute:", v9[3]);

}

void sub_229529C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::RegulateTableTypeDeskAttribute(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  id v20;
  id v21;
  id v22;
  id obj;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  void *__p;
  void *v30;
  uint64_t v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  __p = 0;
  v30 = 0;
  v31 = 0;
  v28 = 28;
  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v28);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v22 = (id)v2[3];
  v28 = 31;
  v3 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, &v28);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v21 = (id)v3[3];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = v20;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        objc_msgSend(v8, "type");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v9, "isEqualToString:", CFSTR("Table")) & 1) != 0)
        {
          objc_msgSend(v8, "boxesDict");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "objectForKey:", CFSTR("rawdetection"));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = v11 == 0;

          if (!v12)
          {
            if ((v5 & 1) == 0)
            objc_msgSend(v8, "parts");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v13
              || (objc_msgSend(v8, "parts"),
                  v14 = (void *)objc_claimAutoreleasedReturnValue(),
                  v15 = objc_msgSend(v14, "count") == 0,
                  v14,
                  v13,
                  v15))
            {
                objc_msgSend(v8, "addObjectPartAttribute:", v22);
            }
            else
            {
              objc_msgSend(v8, "parts");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "allKeys");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = objc_msgSend(v17, "containsObject:", v22);

              if (v18)
              {
                if (!v19 || v19 >= 3)
                {
                  objc_msgSend(v8, "removeObjectPartAttribute:", v22);
                  objc_msgSend(v8, "addObjectPartAttribute:", v21);
                }
              }
            }
            v5 = 1;
          }
        }
        else
        {

        }
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    }
    while (v4);
  }

  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }

}

void sub_229529F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ou3dor::`anonymous namespace'::GetRawBoxesFromObjects(void *a1, void *a2, char **a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  BOOL v14;
  void *v15;
  void *v16;
  char *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  id obj;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = a2;
  a3[1] = *a3;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v61, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v58;
    v47 = (uint64_t)(a3 + 2);
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v58 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * i);
        objc_msgSend(v10, "type", v47);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v11, "isEqualToString:", v6) & 1) != 0)
        {
          objc_msgSend(v10, "boxesDict");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "objectForKey:", CFSTR("rawdetection"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = v13 == 0;

          if (!v14)
          {
            objc_msgSend(v10, "boxesDict");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "objectForKey:", CFSTR("rawdetection"));
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            box3dFromNSArray(v16, (uint64_t)&v49);
            v17 = a3[1];
            v18 = (unint64_t)a3[2];
            if ((unint64_t)v17 >= v18)
            {
              v26 = (v17 - *a3) >> 7;
              v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 57)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v28 = v18 - (_QWORD)*a3;
              if (v28 >> 6 > v27)
                v27 = v28 >> 6;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFF80)
                v29 = 0x1FFFFFFFFFFFFFFLL;
              else
                v29 = v27;
              if (v29)
                v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<box3d>>(v47, v29);
              else
                v30 = 0;
              v31 = &v30[128 * v26];
              v32 = v49;
              v33 = v50;
              v34 = v52;
              *((_OWORD *)v31 + 2) = v51;
              *((_OWORD *)v31 + 3) = v34;
              *(_OWORD *)v31 = v32;
              *((_OWORD *)v31 + 1) = v33;
              v35 = v53;
              v36 = v54;
              v37 = v56;
              *((_OWORD *)v31 + 6) = v55;
              *((_OWORD *)v31 + 7) = v37;
              *((_OWORD *)v31 + 4) = v35;
              *((_OWORD *)v31 + 5) = v36;
              v39 = *a3;
              v38 = a3[1];
              v40 = v31;
              if (v38 != *a3)
              {
                do
                {
                  v41 = *((_OWORD *)v38 - 8);
                  v42 = *((_OWORD *)v38 - 7);
                  v43 = *((_OWORD *)v38 - 5);
                  *((_OWORD *)v40 - 6) = *((_OWORD *)v38 - 6);
                  *((_OWORD *)v40 - 5) = v43;
                  *((_OWORD *)v40 - 8) = v41;
                  *((_OWORD *)v40 - 7) = v42;
                  v44 = *((_OWORD *)v38 - 4);
                  v45 = *((_OWORD *)v38 - 3);
                  v46 = *((_OWORD *)v38 - 1);
                  *((_OWORD *)v40 - 2) = *((_OWORD *)v38 - 2);
                  *((_OWORD *)v40 - 1) = v46;
                  *((_OWORD *)v40 - 4) = v44;
                  *((_OWORD *)v40 - 3) = v45;
                  v40 -= 128;
                  v38 -= 128;
                }
                while (v38 != v39);
                v38 = *a3;
              }
              v25 = v31 + 128;
              *a3 = v40;
              a3[1] = v31 + 128;
              a3[2] = &v30[128 * v29];
              if (v38)
                operator delete(v38);
            }
            else
            {
              v19 = v49;
              v20 = v50;
              v21 = v52;
              *((_OWORD *)v17 + 2) = v51;
              *((_OWORD *)v17 + 3) = v21;
              *(_OWORD *)v17 = v19;
              *((_OWORD *)v17 + 1) = v20;
              v22 = v53;
              v23 = v54;
              v24 = v56;
              *((_OWORD *)v17 + 6) = v55;
              *((_OWORD *)v17 + 7) = v24;
              *((_OWORD *)v17 + 4) = v22;
              *((_OWORD *)v17 + 5) = v23;
              v25 = v17 + 128;
            }
            a3[1] = v25;

          }
        }
        else
        {

        }
      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v57, v61, 16);
    }
    while (v7);
  }

}

void sub_22952A2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ou3dor::`anonymous namespace'::NumberOfOverlapChairs(void *a1, float32x4_t **a2, int a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  float v9;
  float v10;
  float32x4_t *v11;
  float32x4_t *v12;
  uint64_t v13;
  _OWORD v15[8];
  float32x4_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24[3];

  v5 = a1;
  v6 = v5;
  if (*a2 == a2[1])
  {
    v13 = 0;
  }
  else
  {
    objc_msgSend(v5, "boxesDict");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKey:", CFSTR("rawdetection"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
      goto LABEL_19;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    box3dFromNSArray(v8, (uint64_t)&v16);
    if (a3)
    {
      box3dToCentroidSizeAngle(&v16, (uint64_t *)v24);
      v9 = 0.3;
      if (*((float *)v24[0] + 3) <= *((float *)v24[0] + 4))
        v10 = 0.5;
      else
        v10 = 0.3;
      if (*((float *)v24[0] + 3) > *((float *)v24[0] + 4))
        v9 = 0.5;
      box3dEnlarge(&v16, v10, v9, 0.0, v15);
      if (v24[0])
      {
        v24[1] = v24[0];
        operator delete(v24[0]);
      }
      v20 = v15[4];
      v21 = v15[5];
      v22 = v15[6];
      v23 = v15[7];
      v16 = (float32x4_t)v15[0];
      v17 = v15[1];
      v18 = v15[2];
      v19 = v15[3];
    }
    v11 = *a2;
    v12 = a2[1];
    if (*a2 == v12)
    {
LABEL_19:
      v13 = 0;
    }
    else
    {
      LODWORD(v13) = 0;
      do
      {
        box3dIou(&v16, v11, 0, (uint64_t)v15);
        if (*(float *)v15 <= 0.0)
          v13 = v13;
        else
          v13 = (v13 + 1);
        v11 += 8;
      }
      while (v11 != v12);
    }

  }
  return v13;
}

void sub_22952A4BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v5;

  v5 = *(void **)(v3 - 72);
  if (v5)
  {
    *(_QWORD *)(v3 - 64) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::RegulateTableTypeCoffeeAttribute(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  int v20;
  uint64_t v21;
  double v22;
  id v23;
  id v24;
  id v26;
  id v27;
  id obj;
  void *__p[2];
  char v30;
  uint64_t AttributeIDRange;
  float32x4_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v32.i32[0] = 29;
  v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)&v32);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v26 = (id)v2[3];
  v32.i32[0] = 31;
  v3 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)&v32);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v27 = (id)v3[3];
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  obj = v24;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v38 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
        objc_msgSend(v8, "type", v24);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v9, "isEqualToString:", CFSTR("Table")) & 1) != 0)
        {
          objc_msgSend(v8, "boxesDict");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "objectForKey:", CFSTR("rawdetection"));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = v11 == 0;

          if (!v12)
          {
            if ((v5 & 1) == 0)
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            memset(&v32, 0, 64);
            objc_msgSend(v8, "boxesDict");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "objectForKey:", CFSTR("rawdetection"));
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            box3dFromNSArray(v14, (uint64_t)&v32);

            objc_msgSend(v8, "parts");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v15
              || (objc_msgSend(v8, "parts"),
                  v16 = (void *)objc_claimAutoreleasedReturnValue(),
                  v17 = objc_msgSend(v16, "count") == 0,
                  v16,
                  v15,
                  v17))
            {
              {
                if ((float)(*((float *)&v33 + 2) - v32.f32[2]) >= 0.65)
                  v23 = v27;
                else
                  v23 = v26;
                *(float *)&v22 = *((float *)&v33 + 2) - v32.f32[2];
                objc_msgSend(v8, "addObjectPartAttribute:", v23, v22);
              }
            }
            else
            {
              objc_msgSend(v8, "parts");
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "allKeys");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v20 = objc_msgSend(v19, "containsObject:", v27);

              if (v20)
              {
                  && (float)(*((float *)&v33 + 2) - v32.f32[2]) < 0.65)
                {
                  v21 = *(_QWORD *)(a1 + 48);
                  std::string::basic_string[abi:ne180100]<0>(__p, "table_type");
                  AttributeIDRange = ou3dor::OU3DORParser::FindAttributeIDRange(v21, __p);
                  ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes(AttributeIDRange, (int *)&AttributeIDRange, 29, v8);
                  if (v30 < 0)
                    operator delete(__p[0]);
                }
              }
            }
            v5 = 1;
          }
        }
        else
        {

        }
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
    }
    while (v4);
  }

  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }

}

void sub_22952A8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

float ou3dor::`anonymous namespace'::MinTableSofasDistance(float32x4_t *a1, float32x4_t **a2)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float result;
  float32x4_t v7;
  float32x4_t v8;
  float v9;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 3.4028e38;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  v5 = vmulq_f32(vaddq_f32(*a1, a1[6]), v4);
  result = 3.4028e38;
  v7.i64[0] = 0xBF000000BF000000;
  v7.i64[1] = 0xBF000000BF000000;
  do
  {
    v8 = vaddq_f32(v5, vmulq_f32(vaddq_f32(*v2, v2[6]), v7));
    if (vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(vsubq_f32(v2[1], *v2), v8)) >= 0.0)
    {
      v9 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v8, v8)));
      if (v9 < result)
        result = v9;
    }
    v2 += 8;
  }
  while (v2 != v3);
  return result;
}

void ou3dor::OU3DObjectRepresentation::ConflictAttributeSetMapping(uint64_t a1, void *a2)
{
  uint64_t i;
  int v3;
  uint64_t v4;
  uint64_t j;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t k;
  int *v11;
  _QWORD *v12;
  id v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  id v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  void *v22;
  id v23;
  id obj;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  _QWORD *v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  _BYTE v39[128];
  id *v40[19];

  v40[16] = *(id **)MEMORY[0x24BDAC8D0];
  v23 = a2;
  v33[0] = 0;
  v33[1] = 0;
  v32 = (uint64_t *)v33;
  for (i = qword_2540CA500; i; i = *(_QWORD *)i)
  {
    v3 = *(_DWORD *)(i + 16);
    v40[0] = (id *)(i + 24);
    *((_DWORD *)std::__tree<std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(&v32, (void **)(i + 24), (uint64_t)&std::piecewise_construct, v40)+ 10) = v3;
  }
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  obj = v23;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v39, 16);
  if (v4)
  {
    v25 = *(_QWORD *)v29;
    do
    {
      for (j = 0; j != v4; ++j)
      {
        if (*(_QWORD *)v29 != v25)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * j);
        v27[0] = 0;
        v27[1] = 0;
        v26 = (uint64_t *)v27;
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        objc_msgSend(v6, "parts", v23);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
        if (v8)
        {
          v9 = *(_QWORD *)v35;
          do
          {
            for (k = 0; k != v8; ++k)
            {
              if (*(_QWORD *)v35 != v9)
                objc_enumerationMutation(v7);
              v38 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * k);
              v11 = (int *)std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::at((uint64_t)&v32, &v38);
              std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v26, v11, v11);
            }
            v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
          }
          while (v8);
        }

        {
          if (!v12)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v13 = v6;
          v14 = (void *)objc_opt_new();
          v15 = (_QWORD *)v12[5];
          v16 = v12 + 6;
          if (v15 != v12 + 6)
          {
            do
            {
              LODWORD(v40[0]) = *((_DWORD *)v15 + 7);
              v17 = objc_alloc_init(MEMORY[0x24BDBCE30]);
              v18 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)v40);
              if (!v18)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              objc_msgSend(v14, "setObject:forKeyedSubscript:", v17, v18[3]);

              v19 = (_QWORD *)v15[1];
              if (v19)
              {
                do
                {
                  v20 = v19;
                  v19 = (_QWORD *)*v19;
                }
                while (v19);
              }
              else
              {
                do
                {
                  v20 = (_QWORD *)v15[2];
                  v21 = *v20 == (_QWORD)v15;
                  v15 = v20;
                }
                while (!v21);
              }
              v15 = v20;
            }
            while (v20 != v16);
          }
          v22 = (void *)objc_msgSend(v14, "copy");
          objc_msgSend(v13, "setParts:", v22);

        }
        std::__tree<int>::destroy((uint64_t)&v26, v27[0]);
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v39, 16);
    }
    while (v4);
  }

  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&v32, v33[0]);
}

void sub_22952AD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25)
{

  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::AssignLShapeAttribute(uint64_t a1, void *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  id obj;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t i;
  void *__p[2];
  char v20;
  uint64_t AttributeIDRange;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  _BYTE v31[128];
  _BYTE v32[128];
  _QWORD v33[5];

  v33[3] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  if ((v3 & 1) == 0
  {
    LODWORD(__p[0]) = 19;
    v33[0] = *std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::at(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
    LODWORD(AttributeIDRange) = 20;
    v33[1] = *std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::at(ou3dor::k3DORSupportedAttributeTypeMap, (int *)&AttributeIDRange);
    v30 = 21;
    v33[2] = *std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::at(ou3dor::k3DORSupportedAttributeTypeMap, &v30);
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v33, 3);
    ou3dor::OU3DObjectRepresentation::AssignLShapeAttribute(NSArray<OU3DObject *> *)::kLShapeVariants = objc_claimAutoreleasedReturnValue();
  }
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = (id)ou3dor::OU3DObjectRepresentation::AssignLShapeAttribute(NSArray<OU3DObject *> *)::kLShapeVariants;
  v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
  if (v17)
  {
    v15 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)v27 != v15)
          objc_enumerationMutation(obj);
        v4 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i);
        v22 = 0u;
        v23 = 0u;
        v24 = 0u;
        v25 = 0u;
        v5 = v16;
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v31, 16);
        if (v6)
        {
          v7 = *(_QWORD *)v23;
          do
          {
            for (j = 0; j != v6; ++j)
            {
              if (*(_QWORD *)v23 != v7)
                objc_enumerationMutation(v5);
              v9 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * j);
              objc_msgSend(v9, "parts");
              v10 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v10, "objectForKey:", v4);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              v12 = v11 == 0;

              if (!v12)
              {
                v13 = *(_QWORD *)(a1 + 48);
                std::string::basic_string[abi:ne180100]<0>(__p, "sofa_type");
                AttributeIDRange = ou3dor::OU3DORParser::FindAttributeIDRange(v13, __p);
                ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes(AttributeIDRange, (int *)&AttributeIDRange, 17, v9);
                if (v20 < 0)
                  operator delete(__p[0]);
              }
            }
            v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v31, 16);
          }
          while (v6);
        }

      }
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
    }
    while (v17);
  }

}

void sub_22952B0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{

  _Unwind_Resume(a1);
}

id ou3dor::OU3DObjectRepresentation::LShapeSofaExtendOrClip(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  BOOL v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  id *v17;
  id *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  uint64_t *j;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  id v32;
  _QWORD *v33;
  void *v34;
  int v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t LShapeMergeInfo;
  id v45;
  id obj;
  id v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *v54[2];
  uint64_t v55;
  void *__p[2];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  int v63;
  void **AttributeIDRange;
  _BYTE v65[128];
  _BYTE v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  memset(v62, 0, sizeof(v62));
  v63 = 1065353216;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  obj = a2;
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v66, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v59;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v59 != v3)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * i);
        objc_msgSend(v5, "parts");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(__p[0]) = 17;
        v7 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(ou3dor::k3DORSupportedAttributeTypeMap, (int *)__p);
        if (!v7)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        objc_msgSend(v6, "objectForKey:", v7[3]);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v8 == 0;

        if (!v9)
        {
          objc_msgSend(v5, "identifier");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "UUIDString");
          v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v11, "UTF8String"));
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v62, (unsigned __int8 *)__p, (uint64_t)__p);
          if (SHIBYTE(v57) < 0)
            operator delete(__p[0]);

        }
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v66, 16);
    }
    while (v2);
  }

  rawBoxesFromObjects(obj, (uint64_t *)__p);
  ou3dor::OU3DLShapeSofaOfflineMerger::MergeLShape((ou3dod::HistoryMergeInfo *)(a1 + 40), (const OUBox3d **)__p, v62, (uint64_t *)v54);
  std::vector<OUBox3d>::__vdeallocate(__p);
  *(_OWORD *)__p = *(_OWORD *)v54;
  v57 = v55;
  v54[1] = 0;
  v55 = 0;
  v54[0] = 0;
  AttributeIDRange = v54;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&AttributeIDRange);
  LShapeMergeInfo = ou3dor::OU3DLShapeSofaOfflineMerger::GetLShapeMergeInfo((ou3dor::OU3DLShapeSofaOfflineMerger *)(a1 + 40));
  v48 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v45 = obj;
  v12 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v50, v65, 16);
  if (v12)
  {
    v49 = *(_QWORD *)v51;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v51 != v49)
          objc_enumerationMutation(v45);
        v14 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * v13);
        if (objc_msgSend(v14, "hasBoxesDict:", CFSTR("rawdetection")))
        {
          objc_msgSend(v14, "type");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("Sofa"));

          if ((v16 & 1) != 0)
          {
            v18 = (id *)__p[0];
            v17 = (id *)__p[1];
            while (1)
            {
              if (v18 == v17)
                goto LABEL_25;
              objc_msgSend(v14, "identifier");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v19, "UUIDString");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18[18], "UUIDString");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              v22 = objc_msgSend(v20, "isEqualToString:", v21);

              if (v22)
                break;
              v18 += 28;
            }
            objc_msgSend(v14, "addBoxesDict:forDictKey:", v18, CFSTR("lshaped"));
            for (j = *(uint64_t **)(LShapeMergeInfo + 16); j; j = (uint64_t *)*j)
            {
              if (!*((_BYTE *)j + 64))
                continue;
              objc_msgSend(v14, "identifier");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "UUIDString");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              v26 = objc_alloc(MEMORY[0x24BDD17C8]);
              if (*((char *)j + 39) < 0)
                v27 = j[2];
              else
                v27 = (uint64_t)(j + 2);
              v28 = (void *)objc_msgSend(v26, "initWithUTF8String:", v27);
              v29 = objc_msgSend(v25, "isEqualToString:", v28);

              objc_msgSend(v14, "identifier");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v30, "UUIDString");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              v32 = objc_alloc(MEMORY[0x24BDD17C8]);
              v33 = j + 5;
              if (*((char *)j + 63) < 0)
                v33 = (_QWORD *)*v33;
              v34 = (void *)objc_msgSend(v32, "initWithUTF8String:", v33);
              v35 = objc_msgSend(v31, "isEqualToString:", v34);

              if (((v29 | v35) & 1) == 0)
                continue;
              v36 = *(_QWORD *)(a1 + 48);
              std::string::basic_string[abi:ne180100]<0>(v54, "sofa_type");
              AttributeIDRange = (void **)ou3dor::OU3DORParser::FindAttributeIDRange(v36, v54);
              ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes((uint64_t)AttributeIDRange, (int *)&AttributeIDRange, 17, v14);
              if (SHIBYTE(v55) < 0)
              {
                operator delete(v54[0]);
                if (v35)
                {
LABEL_39:
                  v37 = objc_alloc(MEMORY[0x24BDD1880]);
                  if (*((char *)j + 39) >= 0)
                    v38 = (uint64_t)(j + 2);
                  else
                    v38 = j[2];
                  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v38);
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  v40 = (void *)objc_msgSend(v37, "initWithUUIDString:", v39);

                  objc_msgSend(v14, "setParent_id:", v40);
                  v41 = *(_QWORD *)(a1 + 48);
                  std::string::basic_string[abi:ne180100]<0>(v54, "sofa_type");
                  AttributeIDRange = (void **)ou3dor::OU3DORParser::FindAttributeIDRange(v41, v54);
                  ou3dor::OU3DObjectRepresentation::OverrideExistingPartTypesWithNewTypes((uint64_t)AttributeIDRange, (int *)&AttributeIDRange, 20, v14);
                  if (SHIBYTE(v55) < 0)
                    operator delete(v54[0]);
                }
              }
              else if (v35)
              {
                goto LABEL_39;
              }
            }
          }
        }
        objc_msgSend(v48, "addObject:", v14);
LABEL_25:
        ++v13;
      }
      while (v13 != v12);
      v42 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v50, v65, 16);
      v12 = v42;
    }
    while (v42);
  }

  v54[0] = __p;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v62);

  return v48;
}

void sub_22952B714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{

  __p = &a34;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100](&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a49);

  _Unwind_Resume(a1);
}

void ou3dor::OU3DObjectRepresentation::LshapeSofaPostProcess(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  ou3dor::OU3DObjectRepresentation::AssignLShapeAttribute(a1, v3);
  ou3dor::OU3DObjectRepresentation::LShapeSofaExtendOrClip(a1, v3);
  v4 = (id)objc_claimAutoreleasedReturnValue();

}

void sub_22952B8F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = std::set<ou3dor::PartAttributeID>::set[abi:ne180100](a1, a2);
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100](v5 + 3, a3);
  return a1;
}

void sub_22952B938(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<ou3dor::PartAttributeID>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_22952B98C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

utils::OUImageUtils *utils::OUImageUtils::OUImageUtils(utils::OUImageUtils *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 3) = malloc_type_malloc(0x271000uLL, 0x51AB3EFDuLL);
  return this;
}

void sub_22952B9E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

void std::vector<ou3dor::OU3DORParser::AttibuteInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:ne180100]<ou3dor::OU3DORParser::AttibuteInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<ou3dor::OU3DORParser::AttibuteInfo,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t _ZNSt3__124__optional_destruct_baseINS_5tupleIJNS_6vectorIDv3_fNS_9allocatorIS3_EEEENS2_IDv4_hNS4_IS7_EEEENS2_IDv4_tNS4_ISA_EEEEEEELb0EED2B8ne180100Ev(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t std::set<ou3dor::PartAttributeID>::set[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 4 * a3;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_22952BBB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>,std::__unordered_map_hasher<std::set<ou3dor::PartAttributeID>,std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>,ou3dor::`anonymous namespace'::SetHash,std::equal_to<std::set<ou3dor::PartAttributeID>>,true>,std::__unordered_map_equal<std::set<ou3dor::PartAttributeID>,std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>,std::equal_to<std::set<ou3dor::PartAttributeID>>,ou3dor::`anonymous namespace'::SetHash,true>,std::allocator<std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>>>::~__hash_table(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      std::__tree<int>::destroy((uint64_t)(v2 + 5), v2[6]);
      std::__tree<int>::destroy((uint64_t)(v2 + 2), v2[3]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

unint64_t std::__unordered_map_hasher<std::set<ou3dor::PartAttributeID>,std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>,ou3dor::`anonymous namespace'::SetHash,std::equal_to<std::set<ou3dor::PartAttributeID>>,true>::operator()[abi:ne180100](_QWORD *a1)
{
  unint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  result = a1[2];
  v5 = (_QWORD *)*a1;
  v3 = a1 + 1;
  v4 = v5;
  if (v5 != v3)
  {
    do
    {
      v6 = (_QWORD *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      result ^= (result << 6) + (result >> 2) + 2654435769u + *((int *)v4 + 7);
      v4 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

BOOL std::equal_to<std::set<ou3dor::PartAttributeID>>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;
  _BOOL8 result;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2[2] != a3[2])
    return 0;
  v5 = (_QWORD *)*a2;
  v3 = a2 + 1;
  v4 = v5;
  if (v5 == v3)
    return 1;
  v6 = (_QWORD *)*a3;
  do
  {
    v7 = *((_DWORD *)v4 + 7);
    v8 = *((_DWORD *)v6 + 7);
    result = v7 == v8;
    if (v7 != v8)
      break;
    v10 = (_QWORD *)v4[1];
    v11 = v4;
    if (v10)
    {
      do
      {
        v4 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v11[2];
        v12 = *v4 == (_QWORD)v11;
        v11 = v4;
      }
      while (!v12);
    }
    v13 = (_QWORD *)v6[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v6[2];
        v12 = *v14 == (_QWORD)v6;
        v6 = v14;
      }
      while (!v12);
    }
    v6 = v14;
  }
  while (v4 != v3);
  return result;
}

uint64_t *std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = std::set<ou3dor::PartAttributeID>::set[abi:ne180100](a1, a2);
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100](v4 + 3, a2 + 24);
  return a1;
}

void sub_22952BD94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<int>::destroy((uint64_t)(a2 + 5), a2[6]);
    std::__tree<int>::destroy((uint64_t)(a2 + 2), a2[3]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::insert[abi:ne180100]<std::__tree_const_iterator<NSString * {__strong},std::__tree_node<NSString * {__strong},void *> *,long>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_22952BE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::insert[abi:ne180100]<std::__tree_const_iterator<NSString * {__strong},std::__tree_node<NSString * {__strong},void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t *v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__emplace_hint_unique_key_args<NSString * {__strong},NSString * const {__strong}&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__tree<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::__count_unique<NSString * {__strong}>(uint64_t a1, void **a2)
{
  uint64_t **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!CompareNSString::operator()(v4, *a2, v2[4]))
      {
        if (!CompareNSString::operator()(v4, v2[4], *a2))
          return v5;
        ++v2;
      }
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return 0;
}

_QWORD *std::__tree<std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},ou3dor::PartAttributeID>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>((uint64_t)a1, &v10, a2);
  v7 = (_QWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v7[4] = **a4;
    *((_DWORD *)v7 + 10) = 0;
    std::__tree<int>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

_QWORD *std::unordered_map<std::set<ou3dor::PartAttributeID>,std::set<ou3dor::PartAttributeID>,ou3dor::`anonymous namespace'::SetHash,std::equal_to<std::set<ou3dor::PartAttributeID>>,std::allocator<std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>>>::find[abi:ne180100](_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

    return 0;
  v4 = v2;
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v2;
  }
  else
  {
  }
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = v9[1];
      if (v4 == v10)
      {
        if (std::equal_to<std::set<ou3dor::PartAttributeID>>::operator()[abi:ne180100]((uint64_t)&dword_2540CA480, v9 + 2, a1))
        {
          return v9;
        }
      }
      else
      {
        if (v6 > 1)
        {
          if (v10 >= v3)
            v10 %= v3;
        }
        else
        {
          v10 &= v3 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  return v9;
}

void OUTLINED_FUNCTION_1_0(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0xCu);
}

uint64_t __cxx_global_var_init_120()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  float v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t prime;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD **v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *i;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  _BYTE v32[8];
  _QWORD *v33;
  int v34;
  _BYTE v35[8];
  _QWORD *v36;
  _BYTE v37[8];
  _QWORD *v38;
  _BYTE v39[8];
  _QWORD *v40;
  _BYTE v41[8];
  _QWORD *v42;
  _BYTE v43[8];
  _QWORD *v44;
  _BYTE v45[8];
  _QWORD *v46;
  _BYTE v47[8];
  _QWORD *v48;
  _BYTE v49[8];
  _QWORD *v50;
  _BYTE v51[8];
  _QWORD *v52;
  _BYTE v53[8];
  _QWORD *v54;
  _BYTE v55[8];
  _QWORD *v56;
  _BYTE v57[8];
  _QWORD *v58;
  _BYTE v59[8];
  _QWORD *v60;
  _BYTE v61[8];
  _QWORD *v62;
  _BYTE v63[8];
  _QWORD *v64;
  _BYTE v65[8];
  _QWORD *v66;
  _BYTE v67[8];
  _QWORD *v68;
  _BYTE v69[8];
  _QWORD *v70;
  _BYTE v71[8];
  _QWORD *v72;
  _BYTE v73[8];
  _QWORD *v74;
  _BYTE v75[8];
  _QWORD *v76;
  _BYTE v77[8];
  _QWORD *v78;
  _BYTE v79[8];
  _QWORD *v80;
  _BYTE v81[8];
  _QWORD *v82;
  _BYTE v83[8];
  _QWORD *v84;
  _BYTE v85[8];
  _QWORD *v86;
  _BYTE v87[8];
  _QWORD *v88;
  _BYTE v89[8];
  _QWORD *v90;
  _BYTE v91[8];
  _QWORD *v92;
  _BYTE v93[8];
  _QWORD *v94;
  _BYTE v95[8];
  _QWORD *v96;
  _BYTE v97[8];
  _QWORD *v98;
  _BYTE v99[8];
  _QWORD *v100;
  _BYTE v101[8];
  _QWORD *v102;
  _BYTE v103[8];
  _QWORD *v104;
  _BYTE v105[8];
  _QWORD *v106;
  _BYTE v107[8];
  _QWORD *v108;
  _BYTE v109[8];
  _QWORD *v110;
  _BYTE v111[8];
  _QWORD *v112;
  _BYTE v113[8];
  _QWORD *v114;
  _BYTE v115[8];
  _QWORD *v116;
  _BYTE v117[8];
  _QWORD *v118;
  _BYTE v119[8];
  _QWORD *v120;
  _BYTE v121[8];
  _QWORD *v122;
  _BYTE v123[8];
  _QWORD *v124;
  _BYTE v125[8];
  _QWORD *v126;
  _BYTE v127[8];
  _QWORD *v128;
  _QWORD **v129;
  _QWORD *v130[2];
  _BYTE v131[8];
  _QWORD *v132;
  _QWORD **v133;
  _QWORD *v134[2];
  _BYTE v135[8];
  _QWORD *v136;
  _QWORD **v137;
  _QWORD *v138[2];
  _BYTE v139[8];
  _QWORD *v140;
  _QWORD **v141;
  _QWORD *v142[2];
  _BYTE v143[8];
  _QWORD *v144;
  _QWORD **v145;
  _QWORD *v146[2];
  _BYTE v147[8];
  _QWORD *v148;
  _QWORD **v149;
  _QWORD *v150[2];
  _BYTE v151[8];
  _QWORD *v152;
  _QWORD **v153;
  _QWORD *v154[2];
  _BYTE v155[8];
  _QWORD *v156;
  _QWORD **v157;
  _QWORD *v158[2];
  _BYTE v159[8];
  _QWORD *v160;
  _QWORD **v161;
  _QWORD *v162[2];
  _BYTE v163[8];
  _QWORD *v164;
  _QWORD **v165;
  _QWORD *v166[2];
  _BYTE v167[8];
  _QWORD *v168;
  _QWORD **v169;
  _QWORD *v170[2];
  _BYTE v171[8];
  _QWORD *v172;
  _QWORD **v173;
  _QWORD *v174[2];
  _BYTE v175[8];
  _QWORD *v176;
  _QWORD **v177;
  _QWORD *v178[2];
  _BYTE v179[8];
  _QWORD *v180;
  _QWORD **v181;
  _QWORD *v182[2];
  _BYTE v183[8];
  _QWORD *v184;
  _QWORD **v185;
  _QWORD *v186[2];
  _BYTE v187[8];
  _QWORD *v188;
  uint64_t v189;
  uint64_t *v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254[6];
  uint64_t v255[6];
  uint64_t v256[6];
  uint64_t v257[6];
  uint64_t v258[6];
  uint64_t v259[6];
  uint64_t v260[6];
  uint64_t v261[6];
  uint64_t v262[6];
  uint64_t v263[6];
  uint64_t v264[6];
  uint64_t v265[6];
  uint64_t v266[6];
  uint64_t v267[6];
  uint64_t v268[6];
  uint64_t v269[6];
  uint64_t v270[6];
  uint64_t v271[6];
  uint64_t v272[6];
  uint64_t v273[6];
  uint64_t v274[6];
  uint64_t v275[6];
  uint64_t v276[6];
  uint64_t v277[6];
  uint64_t v278[6];
  uint64_t v279[6];
  uint64_t v280[6];
  uint64_t v281[6];
  uint64_t v282[6];
  uint64_t v283[6];
  uint64_t v284[6];
  uint64_t v285[6];
  uint64_t v286[6];
  uint64_t v287[6];
  uint64_t v288[6];
  uint64_t v289[6];
  uint64_t v290[6];
  uint64_t v291[6];
  uint64_t v292[9];

  MEMORY[0x24BDAC7A8]();
  v292[6] = *MEMORY[0x24BDAC8D0];
  v253 = xmmword_229561970;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v187, (int *)&v253, 4);
  v186[1] = 0;
  v186[0] = 0;
  v185 = v186;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v254, (uint64_t)v187, (uint64_t)&v185);
  v252 = xmmword_229561980;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v183, (int *)&v252, 4);
  v182[1] = 0;
  v182[0] = 0;
  v181 = v182;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v255, (uint64_t)v183, (uint64_t)&v181);
  v251 = xmmword_229561990;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v179, (int *)&v251, 4);
  v178[1] = 0;
  v178[0] = 0;
  v177 = v178;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v256, (uint64_t)v179, (uint64_t)&v177);
  v250 = xmmword_2295619A0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v175, (int *)&v250, 4);
  v174[1] = 0;
  v174[0] = 0;
  v173 = v174;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v257, (uint64_t)v175, (uint64_t)&v173);
  v249 = xmmword_2295619B0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v171, (int *)&v249, 4);
  v170[1] = 0;
  v170[0] = 0;
  v169 = v170;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v258, (uint64_t)v171, (uint64_t)&v169);
  v248 = xmmword_2295619C0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v167, (int *)&v248, 4);
  v166[1] = 0;
  v166[0] = 0;
  v165 = v166;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v259, (uint64_t)v167, (uint64_t)&v165);
  v247 = xmmword_2295619D0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v163, (int *)&v247, 4);
  v162[1] = 0;
  v162[0] = 0;
  v161 = v162;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v260, (uint64_t)v163, (uint64_t)&v161);
  v246 = xmmword_2295619E0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v159, (int *)&v246, 4);
  v158[1] = 0;
  v158[0] = 0;
  v157 = v158;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v261, (uint64_t)v159, (uint64_t)&v157);
  v245 = xmmword_2295619F0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v155, (int *)&v245, 4);
  v154[1] = 0;
  v154[0] = 0;
  v153 = v154;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v262, (uint64_t)v155, (uint64_t)&v153);
  v244 = xmmword_229561A00;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v151, (int *)&v244, 4);
  v150[1] = 0;
  v150[0] = 0;
  v149 = v150;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v263, (uint64_t)v151, (uint64_t)&v149);
  v243 = xmmword_229561A10;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v147, (int *)&v243, 4);
  v146[1] = 0;
  v146[0] = 0;
  v145 = v146;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v264, (uint64_t)v147, (uint64_t)&v145);
  v242 = xmmword_229561A20;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v143, (int *)&v242, 4);
  v142[1] = 0;
  v142[0] = 0;
  v141 = v142;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v265, (uint64_t)v143, (uint64_t)&v141);
  v241 = xmmword_229561A30;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v139, (int *)&v241, 4);
  v138[1] = 0;
  v138[0] = 0;
  v137 = v138;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v266, (uint64_t)v139, (uint64_t)&v137);
  v240 = xmmword_229561A40;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v135, (int *)&v240, 4);
  v134[1] = 0;
  v134[0] = 0;
  v133 = v134;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v267, (uint64_t)v135, (uint64_t)&v133);
  v239 = xmmword_229561A50;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v131, (int *)&v239, 4);
  v130[1] = 0;
  v130[0] = 0;
  v129 = v130;
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v268, (uint64_t)v131, (uint64_t)&v129);
  v238 = xmmword_229561A60;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v127, (int *)&v238, 4);
  v237 = xmmword_229561A70;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v125, (int *)&v237, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v269, (uint64_t)v127, (uint64_t)v125);
  v236 = xmmword_229561A80;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v123, (int *)&v236, 4);
  v235 = xmmword_229561A90;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v121, (int *)&v235, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v270, (uint64_t)v123, (uint64_t)v121);
  v234 = xmmword_229561AA0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v119, (int *)&v234, 4);
  v233 = xmmword_229561AB0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v117, (int *)&v233, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v271, (uint64_t)v119, (uint64_t)v117);
  v232 = xmmword_229561AC0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v115, (int *)&v232, 4);
  v231 = xmmword_229561AD0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v113, (int *)&v231, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v272, (uint64_t)v115, (uint64_t)v113);
  v230 = xmmword_229561AE0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v111, (int *)&v230, 4);
  v229 = xmmword_229561AF0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v109, (int *)&v229, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v273, (uint64_t)v111, (uint64_t)v109);
  v228 = xmmword_229561B00;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v107, (int *)&v228, 4);
  v227 = xmmword_229561AD0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v105, (int *)&v227, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v274, (uint64_t)v107, (uint64_t)v105);
  v226 = xmmword_229561B10;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v103, (int *)&v226, 4);
  v225 = xmmword_229561B20;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v101, (int *)&v225, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v275, (uint64_t)v103, (uint64_t)v101);
  v224 = xmmword_229561B30;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v99, (int *)&v224, 4);
  v223 = xmmword_229561A90;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v97, (int *)&v223, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v276, (uint64_t)v99, (uint64_t)v97);
  v222 = xmmword_229561B40;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v95, (int *)&v222, 4);
  v221 = xmmword_229561AB0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v93, (int *)&v221, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v277, (uint64_t)v95, (uint64_t)v93);
  v220 = xmmword_229561B50;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v91, (int *)&v220, 4);
  v219 = xmmword_229561B60;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v89, (int *)&v219, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v278, (uint64_t)v91, (uint64_t)v89);
  v218 = xmmword_229561B70;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v87, (int *)&v218, 4);
  v217 = xmmword_229561B80;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v85, (int *)&v217, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v279, (uint64_t)v87, (uint64_t)v85);
  v216 = xmmword_229561B90;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v83, (int *)&v216, 4);
  v215 = xmmword_229561BA0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v81, (int *)&v215, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v280, (uint64_t)v83, (uint64_t)v81);
  v214 = xmmword_229561BB0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v79, (int *)&v214, 4);
  v213 = xmmword_229561B20;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v77, (int *)&v213, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v281, (uint64_t)v79, (uint64_t)v77);
  v212 = xmmword_229561BC0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v75, (int *)&v212, 4);
  v211 = xmmword_229561A70;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v73, (int *)&v211, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v282, (uint64_t)v75, (uint64_t)v73);
  v210 = xmmword_229561BD0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v71, (int *)&v210, 4);
  v209 = xmmword_229561A70;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v69, (int *)&v209, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v283, (uint64_t)v71, (uint64_t)v69);
  v208 = xmmword_229561B80;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v67, (int *)&v208, 4);
  v207 = xmmword_229561BE0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v65, (int *)&v207, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v284, (uint64_t)v67, (uint64_t)v65);
  v206 = xmmword_229561BF0;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v63, (int *)&v206, 4);
  v205 = xmmword_229561A70;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v61, (int *)&v205, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v285, (uint64_t)v63, (uint64_t)v61);
  v204 = xmmword_229561C00;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v59, (int *)&v204, 4);
  v203 = xmmword_229561A90;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v57, (int *)&v203, 4);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v286, (uint64_t)v59, (uint64_t)v57);
  v202 = 0x210000001ELL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v55, (int *)&v202, 2);
  v201 = 0x200000001ELL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v53, (int *)&v201, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v287, (uint64_t)v55, (uint64_t)v53);
  v200 = 0x200000001CLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v51, (int *)&v200, 2);
  v199 = 0x200000001FLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v49, (int *)&v199, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v288, (uint64_t)v51, (uint64_t)v49);
  v198 = 0x210000001CLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v47, (int *)&v198, 2);
  v197 = 0x210000001FLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v45, (int *)&v197, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v289, (uint64_t)v47, (uint64_t)v45);
  v196 = 0x220000001CLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v43, (int *)&v196, 2);
  v195 = 0x220000001FLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v41, (int *)&v195, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v290, (uint64_t)v43, (uint64_t)v41);
  v194 = 0x230000001CLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v39, (int *)&v194, 2);
  v193 = 0x230000001FLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v37, (int *)&v193, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v291, (uint64_t)v39, (uint64_t)v37);
  v34 = 28;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v35, &v34, 1);
  v192 = 0x230000001FLL;
  std::set<ou3dor::PartAttributeID>::set[abi:ne180100]((uint64_t)v32, (int *)&v192, 2);
  std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100]<true,0>(v292, (uint64_t)v35, (uint64_t)v32);
  v1 = 0;
  *(_OWORD *)&qword_2540CA470 = 0u;
  dword_2540CA480 = 1065353216;
  do
  {
    v3 = v2;
    {
      v5.i16[0] = vaddlv_u8(v5);
      v6 = v5.u32[0];
      if (v5.u32[0] > 1uLL)
      {
        v0 = v2;
      }
      else
      {
      }
      if (v7)
      {
        v8 = (_QWORD *)*v7;
        if (*v7)
        {
          do
          {
            v9 = v8[1];
            if (v9 == v3)
            {
              if (std::equal_to<std::set<ou3dor::PartAttributeID>>::operator()[abi:ne180100]((uint64_t)&dword_2540CA480, v8 + 2, &v254[6 * v1]))
              {
                goto LABEL_73;
              }
            }
            else
            {
              if (v6 > 1)
              {
                if (v9 >= v4)
                  v9 %= v4;
              }
              else
              {
                v9 &= v4 - 1;
              }
              if (v9 != v0)
                break;
            }
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
      }
    }
    v10 = operator new(0x40uLL);
    v189 = (uint64_t)v10;
    v190 = &qword_2540CA470;
    v191 = 0;
    *v10 = 0;
    v10[1] = v3;
    std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::pair[abi:ne180100](v10 + 2, (uint64_t)&v254[6 * v1]);
    v191 = 1;
    v11 = (float)(unint64_t)(qword_2540CA478 + 1);
    if (!v4 || (float)(*(float *)&dword_2540CA480 * (float)v4) < v11)
    {
      v12 = (v4 & (v4 - 1)) == 0;
      if (v4 < 3)
        v12 = 0;
      v13 = (2 * v4) | !v12;
      v14 = vcvtps_u32_f32(v11 / *(float *)&dword_2540CA480);
      if (v13 <= v14)
        prime = (int8x8_t)v14;
      else
        prime = (int8x8_t)v13;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
        goto LABEL_30;
      {
        v22 = vcvtps_u32_f32((float)(unint64_t)qword_2540CA478 / *(float *)&dword_2540CA480);
              v23.i16[0] = vaddlv_u8(v23),
              v23.u32[0] > 1uLL))
        {
          v22 = std::__next_prime(v22);
        }
        else
        {
          v24 = 1 << -(char)__clz(v22 - 1);
          if (v22 >= 2)
            v22 = v24;
        }
        if (*(_QWORD *)&prime <= v22)
          prime = (int8x8_t)v22;
        if (*(_QWORD *)&prime >= v4)
        {
        }
        else
        {
          if (prime)
          {
LABEL_30:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v16 = operator new(8 * *(_QWORD *)&prime);
            if (v17)
              operator delete(v17);
            v18 = 0;
            do
            while (*(_QWORD *)&prime != v18);
            v19 = (_QWORD **)qword_2540CA470;
            if (qword_2540CA470)
            {
              v20 = *(_QWORD *)(qword_2540CA470 + 8);
              v21 = (uint8x8_t)vcnt_s8(prime);
              v21.i16[0] = vaddlv_u8(v21);
              if (v21.u32[0] > 1uLL)
              {
                if (v20 >= *(_QWORD *)&prime)
                  v20 %= *(_QWORD *)&prime;
              }
              else
              {
                v20 &= *(_QWORD *)&prime - 1;
              }
              for (i = *v19; i; v20 = v26)
              {
                v26 = i[1];
                if (v21.u32[0] > 1uLL)
                {
                  if (v26 >= *(_QWORD *)&prime)
                    v26 %= *(_QWORD *)&prime;
                }
                else
                {
                  v26 &= *(_QWORD *)&prime - 1;
                }
                if (v26 != v20)
                {
                  {
                    goto LABEL_55;
                  }
                  *v19 = (_QWORD *)*i;
                  i = v19;
                }
                v26 = v20;
LABEL_55:
                v19 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v4 = (unint64_t)prime;
            goto LABEL_59;
          }
          if (v29)
            operator delete(v29);
          v4 = 0;
        }
      }
LABEL_59:
      if ((v4 & (v4 - 1)) != 0)
      {
        if (v3 >= v4)
          v0 = v3 % v4;
        else
          v0 = v3;
      }
      else
      {
        v0 = (v4 - 1) & v3;
      }
    }
    if (v27)
    {
      *(_QWORD *)v189 = *v27;
      *v27 = v189;
    }
    else
    {
      *(_QWORD *)v189 = qword_2540CA470;
      qword_2540CA470 = v189;
      if (*(_QWORD *)v189)
      {
        v28 = *(_QWORD *)(*(_QWORD *)v189 + 8);
        if ((v4 & (v4 - 1)) != 0)
        {
          if (v28 >= v4)
            v28 %= v4;
        }
        else
        {
          v28 &= v4 - 1;
        }
      }
    }
    ++qword_2540CA478;
LABEL_73:
    ++v1;
  }
  while (v1 != 39);
  v30 = 234;
  do
  {
    std::__tree<int>::destroy((uint64_t)&v254[v30 - 1], (_QWORD *)v254[v30]);
    std::__tree<int>::destroy((uint64_t)&v251 + v30 * 8 + 8, *(_QWORD **)((char *)&v252 + v30 * 8));
    v30 -= 6;
  }
  while (v30 * 8);
  std::__tree<int>::destroy((uint64_t)v32, v33);
  std::__tree<int>::destroy((uint64_t)v35, v36);
  std::__tree<int>::destroy((uint64_t)v37, v38);
  std::__tree<int>::destroy((uint64_t)v39, v40);
  std::__tree<int>::destroy((uint64_t)v41, v42);
  std::__tree<int>::destroy((uint64_t)v43, v44);
  std::__tree<int>::destroy((uint64_t)v45, v46);
  std::__tree<int>::destroy((uint64_t)v47, v48);
  std::__tree<int>::destroy((uint64_t)v49, v50);
  std::__tree<int>::destroy((uint64_t)v51, v52);
  std::__tree<int>::destroy((uint64_t)v53, v54);
  std::__tree<int>::destroy((uint64_t)v55, v56);
  std::__tree<int>::destroy((uint64_t)v57, v58);
  std::__tree<int>::destroy((uint64_t)v59, v60);
  std::__tree<int>::destroy((uint64_t)v61, v62);
  std::__tree<int>::destroy((uint64_t)v63, v64);
  std::__tree<int>::destroy((uint64_t)v65, v66);
  std::__tree<int>::destroy((uint64_t)v67, v68);
  std::__tree<int>::destroy((uint64_t)v69, v70);
  std::__tree<int>::destroy((uint64_t)v71, v72);
  std::__tree<int>::destroy((uint64_t)v73, v74);
  std::__tree<int>::destroy((uint64_t)v75, v76);
  std::__tree<int>::destroy((uint64_t)v77, v78);
  std::__tree<int>::destroy((uint64_t)v79, v80);
  std::__tree<int>::destroy((uint64_t)v81, v82);
  std::__tree<int>::destroy((uint64_t)v83, v84);
  std::__tree<int>::destroy((uint64_t)v85, v86);
  std::__tree<int>::destroy((uint64_t)v87, v88);
  std::__tree<int>::destroy((uint64_t)v89, v90);
  std::__tree<int>::destroy((uint64_t)v91, v92);
  std::__tree<int>::destroy((uint64_t)v93, v94);
  std::__tree<int>::destroy((uint64_t)v95, v96);
  std::__tree<int>::destroy((uint64_t)v97, v98);
  std::__tree<int>::destroy((uint64_t)v99, v100);
  std::__tree<int>::destroy((uint64_t)v101, v102);
  std::__tree<int>::destroy((uint64_t)v103, v104);
  std::__tree<int>::destroy((uint64_t)v105, v106);
  std::__tree<int>::destroy((uint64_t)v107, v108);
  std::__tree<int>::destroy((uint64_t)v109, v110);
  std::__tree<int>::destroy((uint64_t)v111, v112);
  std::__tree<int>::destroy((uint64_t)v113, v114);
  std::__tree<int>::destroy((uint64_t)v115, v116);
  std::__tree<int>::destroy((uint64_t)v117, v118);
  std::__tree<int>::destroy((uint64_t)v119, v120);
  std::__tree<int>::destroy((uint64_t)v121, v122);
  std::__tree<int>::destroy((uint64_t)v123, v124);
  std::__tree<int>::destroy((uint64_t)v125, v126);
  std::__tree<int>::destroy((uint64_t)v127, v128);
  std::__tree<int>::destroy((uint64_t)&v129, v130[0]);
  std::__tree<int>::destroy((uint64_t)v131, v132);
  std::__tree<int>::destroy((uint64_t)&v133, v134[0]);
  std::__tree<int>::destroy((uint64_t)v135, v136);
  std::__tree<int>::destroy((uint64_t)&v137, v138[0]);
  std::__tree<int>::destroy((uint64_t)v139, v140);
  std::__tree<int>::destroy((uint64_t)&v141, v142[0]);
  std::__tree<int>::destroy((uint64_t)v143, v144);
  std::__tree<int>::destroy((uint64_t)&v145, v146[0]);
  std::__tree<int>::destroy((uint64_t)v147, v148);
  std::__tree<int>::destroy((uint64_t)&v149, v150[0]);
  std::__tree<int>::destroy((uint64_t)v151, v152);
  std::__tree<int>::destroy((uint64_t)&v153, v154[0]);
  std::__tree<int>::destroy((uint64_t)v155, v156);
  std::__tree<int>::destroy((uint64_t)&v157, v158[0]);
  std::__tree<int>::destroy((uint64_t)v159, v160);
  std::__tree<int>::destroy((uint64_t)&v161, v162[0]);
  std::__tree<int>::destroy((uint64_t)v163, v164);
  std::__tree<int>::destroy((uint64_t)&v165, v166[0]);
  std::__tree<int>::destroy((uint64_t)v167, v168);
  std::__tree<int>::destroy((uint64_t)&v169, v170[0]);
  std::__tree<int>::destroy((uint64_t)v171, v172);
  std::__tree<int>::destroy((uint64_t)&v173, v174[0]);
  std::__tree<int>::destroy((uint64_t)v175, v176);
  std::__tree<int>::destroy((uint64_t)&v177, v178[0]);
  std::__tree<int>::destroy((uint64_t)v179, v180);
  std::__tree<int>::destroy((uint64_t)&v181, v182[0]);
  std::__tree<int>::destroy((uint64_t)v183, v184);
  std::__tree<int>::destroy((uint64_t)&v185, v186[0]);
  std::__tree<int>::destroy((uint64_t)v187, v188);
}

void sub_22952D66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24,uint64_t a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,uint64_t a30,char a31,_QWORD *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a67;
  char a71;
  unint64_t *v71;
  _QWORD **v72;

  std::__tree<int>::destroy((uint64_t)&a19, a20);
  std::__tree<int>::destroy((uint64_t)&a23, a24);
  std::__tree<int>::destroy((uint64_t)&a27, a28);
  std::__tree<int>::destroy((uint64_t)&a31, a32);
  std::__tree<int>::destroy((uint64_t)&a35, v72[1]);
  std::__tree<int>::destroy((uint64_t)&a39, v72[5]);
  std::__tree<int>::destroy((uint64_t)&a43, v72[9]);
  std::__tree<int>::destroy((uint64_t)&a47, v72[13]);
  std::__tree<int>::destroy((uint64_t)&a51, v72[17]);
  std::__tree<int>::destroy((uint64_t)&a55, v72[21]);
  std::__tree<int>::destroy((uint64_t)&a59, v72[25]);
  std::__tree<int>::destroy((uint64_t)&a63, v72[29]);
  std::__tree<int>::destroy((uint64_t)&a67, v72[33]);
  std::__tree<int>::destroy((uint64_t)&a71, v72[37]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x210], v72[41]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x230], v72[45]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x250], v72[49]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x270], v72[53]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x290], v72[57]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x2B0], v72[61]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x2D0], v72[65]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x2F0], v72[69]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x310], v72[73]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x330], v72[77]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x350], v72[81]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x370], v72[85]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x390], v72[89]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x3B0], v72[93]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x3D0], v72[97]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x3F0], v72[101]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x410], v72[105]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x430], v72[109]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x450], v72[113]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x470], v72[117]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x490], v72[121]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4B0], v72[125]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4D0], v72[129]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4F0], v72[133]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x510], v72[137]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x530], v72[141]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x550], v72[145]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x570], v72[149]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x590], v72[153]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x5B0], v72[157]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x5D0], v72[161]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x5F0], v72[165]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x610], v72[169]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x630], v72[173]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x648], v72[176]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x668], v72[180]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x680], v72[183]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x6A0], v72[187]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x6B8], v72[190]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x6D8], v72[194]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x6F0], v72[197]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x710], v72[201]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x728], v72[204]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x748], v72[208]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x760], v72[211]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x780], v72[215]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x798], v72[218]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x7B8], v72[222]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x7D0], v72[225]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x7F0], v72[229]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x808], v72[232]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x828], v72[236]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x840], v72[239]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x860], v72[243]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x878], v72[246]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x898], v72[250]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x8B0], v72[253]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x8D0], v72[257]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x8E8], v72[260]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x908], v72[264]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x920], v72[267]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x940], v72[271]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x958], v72[274]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x978], v72[278]);
  while (v71 != &STACK[0xD38])
  {
    v71 -= 6;
    std::pair<std::set<ou3dor::PartAttributeID> const,std::set<ou3dor::PartAttributeID>>::~pair((uint64_t)v71);
  }
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_OU3DObjectRepresentation_mm()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  uint64_t i;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  void *context;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __CFString *v41;
  int v42;
  const __CFString *v43;
  int v44;
  __CFString *v45;
  int v46;
  __CFString *v47;
  int v48;
  const __CFString *v49;
  int v50;
  const __CFString *v51;
  int v52;
  __CFString *v53;
  int v54;
  const __CFString *v55;
  int v56;
  const __CFString *v57;
  int v58;
  __CFString *v59;
  int v60;
  const __CFString *v61;
  int v62;
  const __CFString *v63;
  int v64;
  const __CFString *v65;
  int v66;
  const __CFString *v67;
  int v68;
  const __CFString *v69;
  int v70;
  __CFString *v71;
  int v72;
  const __CFString *v73;
  int v74;
  const __CFString *v75;
  int v76;
  const __CFString *v77;
  int v78;
  const __CFString *v79;
  int v80;
  const __CFString *v81;
  int v82;
  const __CFString *v83;
  int v84;
  const __CFString *v85;
  int v86;
  const __CFString *v87;
  int v88;
  const __CFString *v89;
  int v90;
  const __CFString *v91;
  int v92;
  const __CFString *v93;
  int v94;
  const __CFString *v95;
  int v96;
  const __CFString *v97;
  int v98;
  const __CFString *v99;
  int v100;
  const __CFString *v101;
  int v102;
  const __CFString *v103;
  int v104;
  const __CFString *v105;
  int v106;
  const __CFString *v107;
  int v108;
  const __CFString *v109;
  int v110;
  const __CFString *v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x22E2CB070]();
  LODWORD(v26) = 0;
  *((_QWORD *)&v26 + 1) = CFSTR("Unknown");
  LODWORD(v27) = 1;
  *((_QWORD *)&v27 + 1) = *((id *)&v26 + 1);
  LODWORD(v28) = 2;
  *((_QWORD *)&v28 + 1) = *((id *)&v27 + 1);
  LODWORD(v29) = 3;
  *((_QWORD *)&v29 + 1) = *((id *)&v28 + 1);
  LODWORD(v30) = 4;
  *((_QWORD *)&v30 + 1) = *((id *)&v29 + 1);
  LODWORD(v31) = 5;
  *((_QWORD *)&v31 + 1) = *((id *)&v30 + 1);
  LODWORD(v32) = 6;
  v25 = CFSTR("Door");
  *((_QWORD *)&v32 + 1) = v25;
  LODWORD(v33) = 7;
  v24 = CFSTR("Window");
  *((_QWORD *)&v33 + 1) = v24;
  LODWORD(v34) = 8;
  *((_QWORD *)&v34 + 1) = *((id *)&v31 + 1);
  LODWORD(v35) = 9;
  v22 = CFSTR("Fireplace");
  *((_QWORD *)&v35 + 1) = v22;
  LODWORD(v36) = 10;
  *((_QWORD *)&v36 + 1) = *((id *)&v34 + 1);
  LODWORD(v37) = 11;
  *((_QWORD *)&v37 + 1) = *((id *)&v36 + 1);
  LODWORD(v38) = 12;
  v23 = CFSTR("Stairs");
  *((_QWORD *)&v38 + 1) = v23;
  LODWORD(v39) = 13;
  v18 = CFSTR("Bed");
  *((_QWORD *)&v39 + 1) = v18;
  LODWORD(v40) = 14;
  v41 = CFSTR("Cabinet");
  v42 = 15;
  v21 = CFSTR("Chair");
  v43 = v21;
  v44 = 16;
  v45 = v41;
  v46 = 17;
  v47 = v45;
  v48 = 18;
  v20 = CFSTR("Sofa");
  v49 = v20;
  v50 = 19;
  v19 = CFSTR("Table");
  v51 = v19;
  v52 = 20;
  v17 = CFSTR("Toilet");
  v53 = v17;
  v54 = 21;
  v15 = CFSTR("Sink");
  v55 = v15;
  v56 = 22;
  v16 = CFSTR("Bathtub");
  v57 = v16;
  v58 = 23;
  v59 = (__CFString *)*((id *)&v37 + 1);
  v60 = 24;
  v0 = CFSTR("Refrigerator");
  v61 = v0;
  v62 = 25;
  v1 = CFSTR("Stove");
  v63 = v1;
  v64 = 26;
  v2 = CFSTR("Washer");
  v65 = v2;
  v66 = 27;
  v3 = CFSTR("Oven");
  v67 = v3;
  v68 = 28;
  v4 = CFSTR("Dishwasher");
  v69 = v4;
  v70 = 29;
  v71 = v59;
  v72 = 30;
  v5 = v47;
  v73 = v5;
  v74 = 31;
  v75 = v71;
  v76 = 32;
  v6 = CFSTR("Screen");
  v77 = v6;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v26, 33);
  for (i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_2294C8000);
  v36 = xmmword_229561D14;
  v37 = unk_229561D24;
  v38 = xmmword_229561D34;
  v39 = unk_229561D44;
  v32 = xmmword_229561CD4;
  v33 = unk_229561CE4;
  v34 = xmmword_229561CF4;
  v35 = unk_229561D04;
  v28 = xmmword_229561C94;
  v29 = unk_229561CA4;
  v30 = xmmword_229561CB4;
  v31 = unk_229561CC4;
  v26 = xmmword_229561C74;
  v27 = unk_229561C84;
  v40 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v26, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_2294C8000);
  LODWORD(v26) = 0;
  *((_QWORD *)&v26 + 1) = v5;
  LODWORD(v27) = 1;
  *((_QWORD *)&v27 + 1) = v0;
  LODWORD(v28) = 2;
  *((_QWORD *)&v28 + 1) = CFSTR("Shelf");
  LODWORD(v29) = 3;
  *((_QWORD *)&v29 + 1) = v1;
  LODWORD(v30) = 4;
  *((_QWORD *)&v30 + 1) = v18;
  LODWORD(v31) = 5;
  *((_QWORD *)&v31 + 1) = v15;
  LODWORD(v32) = 6;
  *((_QWORD *)&v32 + 1) = v2;
  LODWORD(v33) = 7;
  *((_QWORD *)&v33 + 1) = v17;
  LODWORD(v34) = 8;
  *((_QWORD *)&v34 + 1) = v16;
  LODWORD(v35) = 9;
  *((_QWORD *)&v35 + 1) = v3;
  LODWORD(v36) = 10;
  *((_QWORD *)&v36 + 1) = v4;
  LODWORD(v37) = 11;
  *((_QWORD *)&v37 + 1) = v22;
  LODWORD(v38) = 12;
  *((_QWORD *)&v38 + 1) = CFSTR("Stool");
  LODWORD(v39) = 13;
  v8 = v21;
  *((_QWORD *)&v39 + 1) = v8;
  LODWORD(v40) = 14;
  v9 = v19;
  v41 = v9;
  v42 = 15;
  v43 = v6;
  v44 = 16;
  v10 = v20;
  v45 = v10;
  v46 = 17;
  v47 = v23;
  v48 = 18;
  v49 = v24;
  v50 = 19;
  v51 = v25;
  v52 = 20;
  v53 = CFSTR("BuildInCabinet");
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v26, 21);
  for (j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_2294C8000);
  *((_QWORD *)&v26 + 1) = CFSTR("Chair-chair_type-dining");
  LODWORD(v27) = 2;
  *((_QWORD *)&v27 + 1) = CFSTR("Chair-chair_type-swivel");
  LODWORD(v28) = 3;
  *((_QWORD *)&v28 + 1) = CFSTR("Chair-chair_type-other");
  LODWORD(v29) = 4;
  *((_QWORD *)&v29 + 1) = CFSTR("Chair-chair_leg_type-four");
  LODWORD(v30) = 5;
  *((_QWORD *)&v30 + 1) = CFSTR("Chair-chair_leg_type-star");
  LODWORD(v31) = 6;
  *((_QWORD *)&v31 + 1) = CFSTR("Chair-chair_leg_type-other");
  LODWORD(v32) = 7;
  *((_QWORD *)&v32 + 1) = CFSTR("Chair-chair_arm_type-missing");
  LODWORD(v33) = 8;
  *((_QWORD *)&v33 + 1) = CFSTR("Chair-chair_arm_type-existing");
  LODWORD(v34) = 9;
  *((_QWORD *)&v34 + 1) = CFSTR("Chair-chair_back_type-missing");
  LODWORD(v35) = 10;
  *((_QWORD *)&v35 + 1) = CFSTR("Chair-chair_back_type-existing");
  LODWORD(v36) = 11;
  *((_QWORD *)&v36 + 1) = CFSTR("Chair-chair_seat_height-tall_seat");
  LODWORD(v37) = 12;
  *((_QWORD *)&v37 + 1) = CFSTR("Chair-chair_seat_height-normal/low_seat");
  LODWORD(v38) = 13;
  *((_QWORD *)&v38 + 1) = CFSTR("Chair-chair_seat_shape-rectangular");
  LODWORD(v39) = 14;
  *((_QWORD *)&v39 + 1) = CFSTR("Chair-chair_seat_shape-round");
  LODWORD(v40) = 15;
  v41 = CFSTR("Chair-chair_seat_shape-none");
  v42 = 16;
  v43 = CFSTR("Sofa-sofa_type-rectangular");
  v44 = 17;
  v45 = CFSTR("Sofa-sofa_type-lShaped");
  v46 = 18;
  v47 = CFSTR("Sofa-sofa_type-singleSeat");
  v48 = 19;
  v49 = CFSTR("Sofa-sofa_type-lShapedMain");
  v50 = 20;
  v51 = CFSTR("Sofa-sofa_type-lShapedExtension");
  v52 = 21;
  v53 = CFSTR("Sofa-sofa_type-lShapedMiddle");
  v54 = 22;
  v55 = CFSTR("Sofa-sofa_type-other");
  v56 = 23;
  v57 = CFSTR("Sofa-sofa_arm_type-missing");
  v58 = 24;
  v59 = CFSTR("Sofa-sofa_arm_type-two_arms");
  v60 = 25;
  v61 = CFSTR("Sofa-sofa_arm_type-none");
  v62 = 26;
  v63 = CFSTR("Sofa-sofa_back_type-missing");
  v64 = 27;
  v65 = CFSTR("Sofa-sofa_back_type-existing");
  v66 = 28;
  v67 = CFSTR("Table-table_type-desk");
  v68 = 29;
  v69 = CFSTR("Table-table_type-coffee");
  v70 = 30;
  v71 = CFSTR("Table-table_type-dining");
  v72 = 31;
  v73 = CFSTR("Table-table_type-other");
  v74 = 32;
  v75 = CFSTR("Table-table_shape-rectangular");
  v76 = 33;
  v77 = CFSTR("Table-table_shape-lShaped");
  v78 = 34;
  v79 = CFSTR("Table-table_shape-circularElliptic");
  v80 = 35;
  v81 = CFSTR("Table-table_shape-other");
  v82 = 36;
  v83 = CFSTR("Table-table_leg_type-two_leg");
  v84 = 37;
  v85 = CFSTR("Table-table_leg_type-four_leg");
  v86 = 38;
  v87 = CFSTR("Table-table_leg_type-none");
  v88 = 39;
  v89 = CFSTR("Table-table_attribute-with_storage");
  v90 = 40;
  v91 = CFSTR("Table-table_attribute-without_storage");
  v92 = 41;
  v93 = CFSTR("Cabinet-cabinet_type-standalone_cabinet");
  v94 = 42;
  v95 = CFSTR("Cabinet-cabinet_type-kitchen_cabinet");
  v96 = 43;
  v97 = CFSTR("Cabinet-cabinet_type-nightstand");
  v98 = 44;
  v99 = CFSTR("Cabinet-cabinet_type-none");
  v100 = 45;
  v101 = CFSTR("Cabinet-cabinet_attribute-no_countertop");
  v102 = 46;
  v103 = CFSTR("Cabinet-cabinet_attribute-with_countertop");
  v104 = 100;
  v105 = CFSTR("Sofa-sofa_arm_type-existing");
  v106 = 101;
  LODWORD(v26) = 0;
  v107 = CFSTR("Storage-storage_type-cabinet");
  v108 = 102;
  v109 = CFSTR("Storage-storage_type-shelf");
  v110 = 103;
  v111 = CFSTR("Chair-chair_type-stool");
  std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::unordered_map((uint64_t)&ou3dor::k3DORSupportedAttributeTypeMap, (int *)&v26, 50);
  for (k = 792; k != -8; k -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::~unordered_map[abi:ne180100], &ou3dor::k3DORSupportedAttributeTypeMap, &dword_2294C8000);
  __cxx_global_var_init_120();
  *(_QWORD *)&v26 = v8;
  *((_QWORD *)&v26 + 1) = v9;
  *(_QWORD *)&v27 = v10;
  std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::set[abi:ne180100]((uint64_t)&ou3dor::k3DORTargetClasses, (void **)&v26, 3);
  for (m = 16; m != -8; m -= 8)

  __cxa_atexit((void (*)(void *))std::set<NSString * {__strong},CompareNSString,std::allocator<NSString * {__strong}>>::~set[abi:ne180100], &ou3dor::k3DORTargetClasses, &dword_2294C8000);
  objc_autoreleasePoolPop(context);
}

void sub_22952E988(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 16; i != -8; i -= 8)

  _Unwind_Resume(a1);
}

void sub_22952ED3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v13;
  NSObject *v14;
  void *v15;
  char v16;
  void *v17;

  if (a2 == 1)
  {
    v13 = __cxa_begin_catch(a1);
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      -[OUSession runWithConfiguration:].cold.4((uint64_t)v13);

    objc_msgSend(v11, "delegate");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_opt_respondsToSelector();

    if ((v16 & 1) != 0)
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        -[OUSession runWithConfiguration:].cold.1((uint64_t)v13);

      objc_msgSend(v11, "delegate");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "session:didFailWithError:", v11, -1);

    }
    __cxa_end_catch();
    JUMPOUT(0x22952ECD8);
  }

  _Unwind_Resume(a1);
}

void sub_22952F164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  void *v32;
  void *v33;

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22952F34C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22952F708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,id location)
{
  void *v30;
  id *v31;
  void *v32;

  objc_destroyWeak(v31);
  _Block_object_dispose(&a24, 8);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_22952F94C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22952FAD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22952FD6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22953005C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22953027C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2295303A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

BOOL OUTLINED_FUNCTION_2_0(NSObject *a1)
{
  NSObject **v1;

  *v1 = a1;
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

uint64_t OUTLINED_FUNCTION_4_0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void *OUTLINED_FUNCTION_6(void *a1)
{
  return __cxa_begin_catch(a1);
}

float OU::getLineEquation(float32x2_t *a1, float *a2, _DWORD *a3, float *a4)
{
  float32x2_t v4;
  float32x2_t v5;
  float v6;
  float result;

  if (a2 && a3)
  {
    if (a4)
    {
      v4 = *a1;
      v5 = a1[1];
      LODWORD(v6) = HIDWORD(*(unint64_t *)a1);
      *a2 = v5.f32[1] - v6;
      *a3 = vsub_f32(v4, v5).u32[0];
      result = vmlas_n_f32(vmuls_lane_f32(-v4.f32[0], v5, 1), v6, v5.f32[0]);
      *a4 = result;
    }
  }
  return result;
}

float OU::length(float32x2_t *a1)
{
  float32x2_t v1;

  v1 = vsub_f32(*a1, a1[1]);
  return sqrtf(vaddv_f32(vmul_f32(v1, v1)));
}

float OU::distance(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2;
  float v3;
  float v4;
  float32x2_t v5;
  float v6;
  float v7;

  v2 = a1[1];
  LODWORD(v3) = HIDWORD(*(unint64_t *)a1);
  v4 = v2.f32[1] - v3;
  v5 = vsub_f32(*a1, v2);
  v6 = vmlas_n_f32(vmuls_lane_f32(-COERCE_FLOAT(*a1), v2, 1), v3, v2.f32[0]);
  v7 = vmlas_n_f32(vmul_lane_f32(v5, *a2, 1).f32[0], v2.f32[1] - v3, COERCE_FLOAT(*a2));
  return sqrtf((float)((float)(v6 + v7) * (float)(v6 + v7)) / (float)(vmul_f32(v5, v5).f32[0] + (float)(v4 * v4)));
}

float OU::distance2(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2;
  float v3;
  float v4;
  float32x2_t v5;
  float v6;
  float v7;

  v2 = a1[1];
  LODWORD(v3) = HIDWORD(*(unint64_t *)a1);
  v4 = v2.f32[1] - v3;
  v5 = vsub_f32(*a1, v2);
  v6 = vmlas_n_f32(vmuls_lane_f32(-COERCE_FLOAT(*a1), v2, 1), v3, v2.f32[0]);
  v7 = vmlas_n_f32(vmul_lane_f32(v5, *a2, 1).f32[0], v2.f32[1] - v3, COERCE_FLOAT(*a2));
  return (float)((float)(v6 + v7) * (float)(v6 + v7)) / (float)(vmul_f32(v5, v5).f32[0] + (float)(v4 * v4));
}

uint64_t OU::intersect(int32x2_t *a1, int32x2_t *a2, float32x2_t *a3)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float v8;
  float32x2_t v14;

  if (!a3)
    return 0;
  v3.i32[0] = (__int32)*a1;
  v3.i32[1] = HIDWORD(*(_QWORD *)&a2[1]);
  v4.i32[0] = (__int32)a1[1];
  v4.i32[1] = HIDWORD(*(unint64_t *)a2);
  v5.i32[0] = (__int32)*a2;
  v5.i32[1] = HIDWORD(*(_QWORD *)&a1[1]);
  v6 = vsub_f32(v3, v4);
  v4.i32[0] = (__int32)a2[1];
  _D5.i32[1] = HIDWORD(*(unint64_t *)a1);
  _D6 = vsub_f32(v5, _D5);
  v8 = -(float)((float)((float)-v6.f32[1] * v6.f32[0]) + (float)(_D6.f32[1] * _D6.f32[0]));
  __asm { FMLA            S5, S6, V6.S[1] }
  if (_D5.f32[0] >= 0.0)
    v8 = _D5.f32[0];
  if (v8 < 0.00000001)
    return 0;
  v14 = vmla_f32(vmul_f32((float32x2_t)vzip2_s32(a2[1], a1[1]), vneg_f32((float32x2_t)vzip1_s32(*a2, *a1))), (float32x2_t)vzip2_s32(*a2, *a1), (float32x2_t)vzip1_s32(a2[1], a1[1]));
  *a3 = vdiv_f32(vmla_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v14), vneg_f32(_D6)), v14, v6), (float32x2_t)vdup_lane_s32((int32x2_t)_D5, 0));
  return 1;
}

char *OU::Polygon::Polygon(char *a1, char *a2, unint64_t a3)
{
  float32x2_t *v5;
  float32x2_t v6;
  unint64_t v7;
  uint64_t v8;
  float32x2_t v9;
  float32x2_t v10;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  if (a3)
  {
    _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l(a1, a2, (uint64_t)&a2[8 * a3], a3);
    if (a3 >= 3)
    {
      v5 = *(float32x2_t **)a1;
      v6 = **(float32x2_t **)a1;
      v7 = *((_QWORD *)a1 + 1) - *(_QWORD *)a1;
      if ((int)(v7 >> 3) < 1)
      {
        v9 = **(float32x2_t **)a1;
      }
      else
      {
        v8 = (v7 >> 3);
        v9 = **(float32x2_t **)a1;
        do
        {
          v10 = *v5++;
          v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v10), (int8x8_t)v10, (int8x8_t)v9);
          v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v6), (int8x8_t)v10, (int8x8_t)v6);
          --v8;
        }
        while (v8);
      }
      *((float32x2_t *)a1 + 3) = v9;
      *((float32x2_t *)a1 + 4) = v6;
    }
  }
  return a1;
}

void sub_229530740(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float32x2_t **OU::Polygon::Polygon(float32x2_t **this, const CGRect *a2)
{
  CGFloat MinY;
  float64x2_t v5;
  CGFloat x;
  CGFloat width;
  CGFloat height;
  CGFloat MaxY;
  float64x2_t v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  float64x2_t v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  float64x2_t v20;
  float32x2_t *v21;
  float32x2_t v22;
  unint64_t v23;
  uint64_t v24;
  float32x2_t v25;
  float32x2_t v26;
  CGFloat MinX;
  CGFloat v29;
  CGFloat MaxX;
  CGFloat v31;

  *this = 0;
  this[1] = 0;
  this[2] = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)this, 4uLL);
  MinX = CGRectGetMinX(*a2);
  MinY = CGRectGetMinY(*a2);
  v5.f64[0] = MinX;
  v5.f64[1] = MinY;
  **this = vcvt_f32_f64(v5);
  x = a2->origin.x;
  v5.f64[0] = a2->origin.y;
  width = a2->size.width;
  height = a2->size.height;
  v29 = CGRectGetMinX(*(CGRect *)((char *)&v5 - 8));
  MaxY = CGRectGetMaxY(*a2);
  v10.f64[0] = v29;
  v10.f64[1] = MaxY;
  (*this)[1] = vcvt_f32_f64(v10);
  v11 = a2->origin.x;
  v10.f64[0] = a2->origin.y;
  v12 = a2->size.width;
  v13 = a2->size.height;
  MaxX = CGRectGetMaxX(*(CGRect *)((char *)&v10 - 8));
  v14 = CGRectGetMaxY(*a2);
  v15.f64[0] = MaxX;
  v15.f64[1] = v14;
  (*this)[2] = vcvt_f32_f64(v15);
  v16 = a2->origin.x;
  v15.f64[0] = a2->origin.y;
  v17 = a2->size.width;
  v18 = a2->size.height;
  v31 = CGRectGetMaxX(*(CGRect *)((char *)&v15 - 8));
  v19 = CGRectGetMinY(*a2);
  v20.f64[0] = v31;
  v20.f64[1] = v19;
  (*this)[3] = vcvt_f32_f64(v20);
  v21 = *this;
  v22 = **this;
  v23 = (char *)this[1] - (char *)*this;
  if ((int)(v23 >> 3) < 1)
  {
    v25 = **this;
  }
  else
  {
    v24 = (v23 >> 3);
    v25 = **this;
    do
    {
      v26 = *v21++;
      v25 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v25, v26), (int8x8_t)v26, (int8x8_t)v25);
      v22 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v26, v22), (int8x8_t)v26, (int8x8_t)v22);
      --v24;
    }
    while (v24);
  }
  this[3] = (float32x2_t *)v25;
  this[4] = (float32x2_t *)v22;
  return this;
}

void sub_2295308A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

uint64_t OU::Polygon::PointInsidePolygon(uint64_t a1, float32x2_t *a2)
{
  float32x2_t *v2;
  unint64_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  int8x8_t v7;
  uint64_t v9;
  char v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  unsigned __int32 v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  float32x2_t v19;
  uint64_t v20;
  float32x2_t v21;
  int32x2_t v22[2];
  float32x2_t v23;
  int32x2_t v24[2];

  v2 = *(float32x2_t **)a1;
  v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((int)(v3 >> 3) < 3)
    return 0;
  v4 = *a2;
  v5 = *(float32x2_t *)(a1 + 24);
  if ((vmvn_s8((int8x8_t)vcge_f32(*a2, v5)).u8[0] & 1) != 0)
    return 0;
  v6 = *(float32x2_t *)(a1 + 32);
  if ((vmvn_s8((int8x8_t)vcge_f32(v6, v4)).u8[0] & 1) != 0)
    return 0;
  v7 = vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vzip2_s32((int32x2_t)v6, (int32x2_t)v4), (float32x2_t)vzip2_s32((int32x2_t)v4, (int32x2_t)v5)));
  if (((v7.i32[1] | v7.i32[0]) & 1) != 0)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = vsub_f32(vmul_f32(vadd_f32(*v2, v2[1]), (float32x2_t)0x3F0000003F000000), v4);
  v12 = vmul_f32(v11, v11);
  v13 = vsub_f32(v5, v6);
  v14 = vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)).u32[0];
  v15 = vrsqrte_f32((float32x2_t)v14);
  v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14, vmul_f32(v15, v15)));
  v17 = vmla_n_f32(v4, vmul_n_f32(v11, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14, vmul_f32(v16, v16))).f32[0]), sqrtf(vaddv_f32(vmul_f32(v13, v13))) + sqrtf(vaddv_f32(v12)));
  v24[0] = (int32x2_t)*a2;
  v24[1] = (int32x2_t)v17;
  v23 = 0;
  v18 = (v3 >> 3);
  do
  {
    v19 = v2[v9];
    if (v18 - 1 == v9)
      v20 = 0;
    else
      v20 = v9 + 1;
    v21 = v2[v20];
    v22[0] = (int32x2_t)v2[v9];
    v22[1] = (int32x2_t)v21;
    if (OU::intersect(v24, v22, &v23)
      && vaddv_f32(vmul_f32(vsub_f32(v23, v19), vsub_f32(v23, v21))) < 0.0
      && vaddv_f32(vmul_f32(vsub_f32(v23, v4), vsub_f32(v23, v17))) < 0.0)
    {
      ++v10;
    }
    ++v9;
  }
  while (v18 != v9);
  return v10 & 1;
}

float OU::area(OU *this, const Polygon *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v2)
  {
    v3 = v2 >> 3;
    if (v3 <= 1)
      v4 = 1;
    else
      v4 = v3;
    v5 = 1;
    v6 = *(uint64_t **)this;
    do
    {
      v7 = *v6++;
      _V1.S[1] = HIDWORD(v7);
      _D2 = *(_QWORD *)(*(_QWORD *)this + 8 * v5);
      __asm { FMLS            S0, S2, V1.S[1] }
      v5 = (v5 + 1) % v3;
      --v4;
    }
    while (v4);
  }
  else
  {
    _S0 = 0.0;
  }
  return fabsf(_S0) * 0.5;
}

float OU::AngleDifference(OU *this, float a2, float a3)
{
  __float2 v3;

  v3 = __sincosf_stret(a2 - a3);
  return fabsf(atan2f(v3.__sinval, v3.__cosval));
}

void OU::clip(OU *this@<X0>, const Polygon *a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[2];
  void (*v12)(uint64_t, int32x2_t, float32x2_t);
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __n128 (*v18)(__n128 *, __n128 *);
  void (*v19)(uint64_t);
  const char *v20;
  void *__p;
  void *v22;
  uint64_t v23;

  v15 = 0;
  v16 = &v15;
  v17 = 0x4812000000;
  v18 = __Block_byref_object_copy__1;
  v19 = __Block_byref_object_dispose__1;
  v20 = "";
  __p = 0;
  v22 = 0;
  v23 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&__p, *(const void **)this, *((_QWORD *)this + 1), (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v12 = ___ZN2OU4clipERKNS_7PolygonES2__block_invoke;
  v13 = &unk_24F2439A0;
  v14 = &v15;
  v6 = *(_QWORD *)&a2->polyBBox.right - *(_QWORD *)&a2->polySize;
  if (v6)
  {
    v7 = 0;
    v8 = v6 >> 3;
    if ((unint64_t)(v6 >> 3) <= 1)
      v9 = 1;
    else
      v9 = v6 >> 3;
    v10 = 1;
    do
    {
      ((void (*)(_QWORD *, double, double))v12)(v11, *(double *)(*(_QWORD *)&a2->polySize + 8 * v7++), *(double *)(*(_QWORD *)&a2->polySize + 8 * v10));
      v10 = (v10 + 1) % v8;
    }
    while (v9 != v7);
  }
  OU::Polygon::Polygon(a3, (char *)v16[6], (v16[7] - v16[6]) >> 3);
  _Block_object_dispose(&v15, 8);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_229530C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a14, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN2OU4clipERKNS_7PolygonES2__block_invoke(uint64_t a1, int32x2_t a2, float32x2_t a3)
{
  uint64_t v4;
  float32x2_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float32x2_t v10;
  float v11;
  float32x2_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  _BOOL4 v17;
  float v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  float32x2_t *v23;
  float32x2_t *v24;
  float32x2_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  float32x2_t *v30;
  float32x2_t *v31;
  float32x2_t v32;
  uint64_t v33;
  unint64_t v34;
  float32x2_t v35;
  _QWORD *v36;
  void *v37;
  _BYTE *v38;
  float32x2_t *v39;
  float32x2_t v40;
  float32x2_t *v41;
  float32x2_t *v42;
  float32x2_t *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  int32x2_t v50[2];

  v47 = (float32x2_t)a2;
  v48 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v45 = 0;
  v46 = 0;
  v44 = 0;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v44, *(const void **)(v4 + 48), *(_QWORD *)(v4 + 56), (uint64_t)(*(_QWORD *)(v4 + 56) - *(_QWORD *)(v4 + 48)) >> 3);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v5 = 0;
  if (v45 != v44)
  {
    v6 = 0;
    v7 = (v45 - v44) >> 3;
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = (v45 - v44) >> 3;
    v9 = 1;
    do
    {
      v10 = *(float32x2_t *)&v44[8 * v9];
      v50[0] = *(int32x2_t *)&v44[8 * v6];
      v50[1] = (int32x2_t)v10;
      v11 = v48.f32[1] - v47.f32[1];
      v12 = vsub_f32(v47, v48);
      v13 = vmlas_n_f32(vmuls_lane_f32(-v47.f32[0], v48, 1), v47.f32[1], v48.f32[0]);
      v14 = vmlas_n_f32(vmuls_lane_f32(v12.f32[0], (float32x2_t)v50[0], 1), v48.f32[1] - v47.f32[1], *(float *)v50[0].i32);
      v15 = vmul_f32(v12, v12).f32[0] + (float)(v11 * v11);
      LODWORD(v16) = vsub_f32(v48, v47).u32[0];
      v17 = vmlas_n_f32(-(float)(vsub_f32((float32x2_t)v50[0], v47).f32[0] * (float)(v48.f32[1] - v47.f32[1])), *(float *)&v50[0].i32[1] - v47.f32[1], v16) < 0.0;
      if ((float)((float)((float)(v13 + v14) * (float)(v13 + v14)) / v15) < 0.00000001)
        v17 = 1;
      v18 = vmlas_n_f32(vmuls_lane_f32(v12.f32[0], v10, 1), v11, v10.f32[0]);
      if ((float)((float)((float)(v13 + v18) * (float)(v13 + v18)) / v15) >= 0.00000001
        && vmlas_n_f32(-(float)(vsub_f32(v10, v47).f32[0] * v11), v10.f32[1] - v47.f32[1], v16) >= 0.0)
      {
        if (!v17)
          goto LABEL_50;
        v49 = 0;
        if (!OU::intersect(v50, (int32x2_t *)&v47, &v49))
          goto LABEL_50;
        if (v5 >= v43)
        {
          v33 = v5 - v41;
          if ((unint64_t)(v33 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v34 = ((char *)v43 - (char *)v41) >> 2;
          if (v34 <= v33 + 1)
            v34 = v33 + 1;
          if ((unint64_t)((char *)v43 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v34;
          if (v28)
            v29 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v43, v28);
          else
            v29 = 0;
          v30 = (float32x2_t *)&v29[8 * v33];
          *v30 = v49;
          v5 = v30 + 1;
          v31 = v42;
          if (v42 != v41)
          {
            do
            {
              v35 = v31[-1];
              --v31;
              v30[-1] = v35;
              --v30;
            }
            while (v31 != v41);
LABEL_46:
            v31 = v41;
          }
LABEL_47:
          v41 = v30;
          v43 = (float32x2_t *)&v29[8 * v28];
          if (v31)
            operator delete(v31);
          goto LABEL_49;
        }
        *v5++ = v49;
      }
      else
      {
        v40 = v10;
        if (!v17)
        {
          v49 = 0;
          if (OU::intersect(v50, (int32x2_t *)&v47, &v49))
          {
            if (v5 >= v43)
            {
              v19 = v5 - v41;
              if ((unint64_t)(v19 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v20 = ((char *)v43 - (char *)v41) >> 2;
              if (v20 <= v19 + 1)
                v20 = v19 + 1;
              if ((unint64_t)((char *)v43 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8)
                v21 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v21 = v20;
              if (v21)
                v22 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v43, v21);
              else
                v22 = 0;
              v23 = (float32x2_t *)&v22[8 * v19];
              *v23 = v49;
              v5 = v23 + 1;
              v24 = v42;
              if (v42 != v41)
              {
                do
                {
                  v25 = v24[-1];
                  --v24;
                  v23[-1] = v25;
                  --v23;
                }
                while (v24 != v41);
                v24 = v41;
              }
              v41 = v23;
              v43 = (float32x2_t *)&v22[8 * v21];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *v5++ = v49;
            }
            v42 = v5;
          }
        }
        if (v5 >= v43)
        {
          v26 = v5 - v41;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v27 = ((char *)v43 - (char *)v41) >> 2;
          if (v27 <= v26 + 1)
            v27 = v26 + 1;
          if ((unint64_t)((char *)v43 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          if (v28)
            v29 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v43, v28);
          else
            v29 = 0;
          v30 = (float32x2_t *)&v29[8 * v26];
          *v30 = v40;
          v5 = v30 + 1;
          v31 = v42;
          if (v42 != v41)
          {
            do
            {
              v32 = v31[-1];
              --v31;
              v30[-1] = v32;
              --v30;
            }
            while (v31 != v41);
            goto LABEL_46;
          }
          goto LABEL_47;
        }
        *v5++ = v40;
      }
LABEL_49:
      v42 = v5;
LABEL_50:
      ++v6;
      v9 = (v9 + 1) % v7;
    }
    while (v6 != v8);
  }
  v36 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v37 = (void *)v36[6];
  if (v37)
  {
    v36[7] = v37;
    operator delete(v37);
    v36[6] = 0;
    v36[7] = 0;
    v36[8] = 0;
    v5 = v42;
  }
  v39 = v43;
  v38 = v44;
  v36[6] = v41;
  v36[7] = v5;
  v36[8] = v39;
  if (v38)
  {
    v45 = v38;
    operator delete(v38);
  }
}

void sub_2295310C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void OU::ConvexHull(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v9;
  unint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float v44;
  float v45;
  uint64_t *v46;
  int v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float v53;
  float32x2_t v54;
  float32x2_t v55;
  float v56;
  double v57;
  float v58;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  _BYTE *v83;
  float32x2_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  _OWORD v89[2];
  int v90;
  void *__p;
  char *v92;
  _QWORD v93[2];

  v4 = *a1;
  v5 = a1[1] - *a1;
  v6 = v5 >> 3;
  if ((int)(v5 >> 3) >= 3)
  {
    v9 = 0;
    v10 = (v5 >> 3);
    v11 = v4 + 4;
    v12 = (float *)(v4 + 12);
    v13 = 1;
    do
    {
      v14 = *v12;
      v12 += 2;
      if (v14 < *(float *)(v11 + 8 * v9))
        v9 = v13;
      ++v13;
    }
    while (v10 != v13);
    __p = 0;
    v92 = 0;
    v93[0] = 0;
    _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE7reserveEm(&__p, v10);
    v15 = *a1;
    v16 = v92;
    if ((unint64_t)v92 >= v93[0])
    {
      v18 = (v92 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v19 = (uint64_t)(v93[0] - (_QWORD)__p) >> 2;
      if (v19 <= v18 + 1)
        v19 = v18 + 1;
      if (v93[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF8uLL)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v93, v20);
      else
        v21 = 0;
      v22 = &v21[8 * v18];
      v23 = &v21[8 * v20];
      *(_QWORD *)v22 = *(_QWORD *)(v15 + 8 * v9);
      v17 = v22 + 8;
      v25 = (char *)__p;
      v24 = v92;
      if (v92 != __p)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *((_QWORD *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        v24 = (char *)__p;
      }
      __p = v22;
      v92 = v17;
      v93[0] = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v92 = *(_QWORD *)(v15 + 8 * v9);
      v17 = v16 + 8;
    }
    v92 = v17;
    if (a2)
    {
      v27 = *(_DWORD **)a2;
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
      v28 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v27 >= v28)
      {
        v30 = v28 - (_QWORD)v27;
        v31 = v30 >> 1;
        if ((unint64_t)(v30 >> 1) <= 1)
          v31 = 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        v33 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v32);
        v34 = *(_DWORD **)a2;
        v35 = *(_DWORD **)(a2 + 8);
        v37 = &v33[v36];
        *v33 = v9;
        v29 = v33 + 1;
        while (v35 != v34)
        {
          v38 = *--v35;
          *--v33 = v38;
        }
        *(_QWORD *)a2 = v33;
        *(_QWORD *)(a2 + 8) = v29;
        *(_QWORD *)(a2 + 16) = v37;
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v27 = v9;
        v29 = v27 + 1;
      }
      *(_QWORD *)(a2 + 8) = v29;
    }
    memset(v89, 0, sizeof(v89));
    v90 = 1065353216;
    v83 = a3;
    while (1)
    {
      v39 = (char *)__p;
      v40 = (v92 - (_BYTE *)__p) >> 3;
      v41 = v40 - 1;
      v42 = (float32x2_t)1065353216;
      if (v92 - (_BYTE *)__p != 8)
        v42 = vsub_f32(*(float32x2_t *)((char *)__p + 8 * v41), *(float32x2_t *)((char *)__p + 8 * v40 - 16));
      LODWORD(v85) = -1;
      v43 = vmul_f32(v42, v42);
      v88 = 0;
      v84 = (float32x2_t)vadd_f32(v43, (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1)).u32[0];
      v44 = 0.0;
      v45 = -2.0;
      do
      {
        v46 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v89, &v88);
        v47 = v88;
        if (!v46)
        {
          v48 = vsub_f32(*(float32x2_t *)(*a1 + 8 * v88), *(float32x2_t *)&v39[8 * v41]);
          v49 = vrsqrte_f32(v84);
          v50 = vmul_f32(v49, vrsqrts_f32(v84, vmul_f32(v49, v49)));
          v51 = vmul_f32(v48, v48);
          v52 = vmul_n_f32(v42, vmul_f32(v50, vrsqrts_f32(v84, vmul_f32(v50, v50))).f32[0]);
          LODWORD(v53) = vadd_f32(v51, (float32x2_t)vdup_lane_s32((int32x2_t)v51, 1)).u32[0];
          v54 = vrsqrte_f32((float32x2_t)LODWORD(v53));
          v55 = vmul_f32(v54, vrsqrts_f32((float32x2_t)LODWORD(v53), vmul_f32(v54, v54)));
          v56 = vaddv_f32(vmul_f32(v52, vmul_n_f32(v48, vmul_f32(v55, vrsqrts_f32((float32x2_t)LODWORD(v53), vmul_f32(v55, v55))).f32[0])));
          v57 = (float)(v56 - v45);
          if (v57 >= -0.0001)
          {
            v58 = sqrtf(v53);
            if (v57 > 0.0001 || v58 > v44)
            {
              LODWORD(v85) = v88;
              v44 = v58;
              v45 = v56;
            }
          }
        }
        ++v88;
      }
      while (v47 + 1 < (int)v6);
      if ((_DWORD)v85 == -1 || (_DWORD)v85 == v9)
        break;
      v60 = (int)v85;
      v61 = *a1;
      v62 = v92;
      if ((unint64_t)v92 >= v93[0])
      {
        v64 = (v92 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v64 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v65 = (uint64_t)(v93[0] - (_QWORD)__p) >> 2;
        if (v65 <= v64 + 1)
          v65 = v64 + 1;
        if (v93[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF8uLL)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
          v67 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v93, v66);
        else
          v67 = 0;
        v68 = &v67[8 * v64];
        *(_QWORD *)v68 = *(_QWORD *)(v61 + 8 * v60);
        v63 = v68 + 8;
        v70 = (char *)__p;
        v69 = v92;
        if (v92 != __p)
        {
          do
          {
            v71 = *((_QWORD *)v69 - 1);
            v69 -= 8;
            *((_QWORD *)v68 - 1) = v71;
            v68 -= 8;
          }
          while (v69 != v70);
          v69 = (char *)__p;
        }
        __p = v68;
        v92 = v63;
        v93[0] = &v67[8 * v66];
        if (v69)
          operator delete(v69);
      }
      else
      {
        *(_QWORD *)v92 = *(_QWORD *)(v61 + 8 * (int)v85);
        v63 = v62 + 8;
      }
      v92 = v63;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v89, (int *)&v85, &v85);
      if (a2)
      {
        v73 = *(_DWORD **)(a2 + 8);
        v72 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v73 >= v72)
        {
          v75 = *(_DWORD **)a2;
          v76 = ((uint64_t)v73 - *(_QWORD *)a2) >> 2;
          v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 62)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v78 = v72 - (_QWORD)v75;
          if (v78 >> 1 > v77)
            v77 = v78 >> 1;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
            v79 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v79 = v77;
          if (v79)
          {
            v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v79);
            v75 = *(_DWORD **)a2;
            v73 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            v80 = 0;
          }
          v81 = &v80[4 * v76];
          *(_DWORD *)v81 = v85;
          v74 = v81 + 4;
          while (v73 != v75)
          {
            v82 = *--v73;
            *((_DWORD *)v81 - 1) = v82;
            v81 -= 4;
          }
          *(_QWORD *)a2 = v81;
          *(_QWORD *)(a2 + 8) = v74;
          *(_QWORD *)(a2 + 16) = &v80[4 * v79];
          if (v75)
            operator delete(v75);
        }
        else
        {
          *v73 = v85;
          v74 = v73 + 1;
        }
        *(_QWORD *)(a2 + 8) = v74;
      }
    }
    OU::Polygon::Polygon((char *)&v85, (char *)__p, (v92 - (_BYTE *)__p) >> 3);
    *(_OWORD *)v83 = v85;
    *((_QWORD *)v83 + 2) = v86;
    *(_OWORD *)(v83 + 24) = v87;
    v83[40] = 1;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v89);
    if (__p)
    {
      v92 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    *a3 = 0;
    a3[40] = 0;
  }
}

void sub_229531658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a21);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void OUDnnInferenceInterface::~OUDnnInferenceInterface(OUDnnInferenceInterface *this)
{
  CVPixelBufferRef *i;
  CVPixelBufferRef *j;

  *(_QWORD *)this = off_24F2439D0;
  for (i = (CVPixelBufferRef *)((char *)this + 24); ; CVPixelBufferRelease(i[5]))
  {
    i = (CVPixelBufferRef *)*i;
    if (!i)
      break;
  }
  for (j = (CVPixelBufferRef *)((char *)this + 64); ; CVPixelBufferRelease(j[5]))
  {
    j = (CVPixelBufferRef *)*j;
    if (!j)
      break;
  }
  std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::~__hash_table((uint64_t)this + 8);
}

CVPixelBufferLockFlags OUDnnInferenceInterface::LockCVPixelBuffers(CVPixelBufferLockFlags lockFlags, uint64_t a2)
{
  CVPixelBufferLockFlags v2;
  uint64_t **v3;
  void *exception;
  __n128 v5;
  std::string v6;
  std::string v7;

  v2 = lockFlags;
  v3 = (uint64_t **)(a2 + 16);
  while (1)
  {
    v3 = (uint64_t **)*v3;
    if (!v3)
      break;
    lockFlags = CVPixelBufferLockBaseAddress((CVPixelBufferRef)v3[5], v2);
    if ((_DWORD)lockFlags)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v5 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to lock buffer.", &v6, &v7);
      MEMORY[0x22E2CA89C](exception, &v7, v5);
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
  }
  return lockFlags;
}

void sub_2295318C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

CVPixelBufferLockFlags OUDnnInferenceInterface::UnlockCVPixelBuffers(CVPixelBufferLockFlags unlockFlags, uint64_t a2)
{
  CVPixelBufferLockFlags v2;
  uint64_t **v3;
  void *exception;
  __n128 v5;
  std::string v6;
  std::string v7;

  v2 = unlockFlags;
  v3 = (uint64_t **)(a2 + 16);
  while (1)
  {
    v3 = (uint64_t **)*v3;
    if (!v3)
      break;
    unlockFlags = CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v3[5], v2);
    if ((_DWORD)unlockFlags)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v5 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to unlock buffer.", &v6, &v7);
      MEMORY[0x22E2CA89C](exception, &v7, v5);
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
  }
  return unlockFlags;
}

void sub_2295319D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

CVPixelBufferLockFlags OUDnnInferenceInterface::LockInputs(OUDnnInferenceInterface *this, CVPixelBufferLockFlags lockFlags)
{
  return OUDnnInferenceInterface::LockCVPixelBuffers(lockFlags, (uint64_t)this + 8);
}

CVPixelBufferLockFlags OUDnnInferenceInterface::UnlockInputs(OUDnnInferenceInterface *this, CVPixelBufferLockFlags unlockFlags)
{
  return OUDnnInferenceInterface::UnlockCVPixelBuffers(unlockFlags, (uint64_t)this + 8);
}

CVPixelBufferLockFlags OUDnnInferenceInterface::LockOutputs(OUDnnInferenceInterface *this, CVPixelBufferLockFlags lockFlags)
{
  return OUDnnInferenceInterface::LockCVPixelBuffers(lockFlags, (uint64_t)this + 48);
}

CVPixelBufferLockFlags OUDnnInferenceInterface::UnlockOutputs(OUDnnInferenceInterface *this, CVPixelBufferLockFlags unlockFlags)
{
  return OUDnnInferenceInterface::UnlockCVPixelBuffers(unlockFlags, (uint64_t)this + 48);
}

uint64_t OUDnnInferenceInterface::CreateIOBuffer(uint64_t a1, std::string::size_type a2, char **a3, _anonymous_namespace_ *a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 SizeOf;
  __CVBuffer *CVPixelBuffer;
  uint64_t result;
  void *exception;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void *v27;
  __n128 v28;
  void *v29;
  __n128 v30;
  std::string v31;
  std::string v32;
  std::string v33;

  v8 = 48;
  if (a5)
    v8 = 8;
  v9 = a1 + v8;
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(a1 + v8), (unsigned __int8 *)a2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("]: duplicated buffer name - ", &v31, &v32);
    v22 = *(char *)(a2 + 23);
    if (v22 >= 0)
      v23 = (const std::string::value_type *)a2;
    else
      v23 = *(const std::string::value_type **)a2;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(a2 + 23);
    else
      v24 = *(_QWORD *)(a2 + 8);
    v25 = std::string::append(&v32, v23, v24);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x22E2CA89C](exception, &v33);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v33.__r_.__value_.__r.__words[0] = a2;
  v10 = std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v33);
  v11 = *a3;
  v12 = *(_QWORD *)*a3;
  *((_QWORD *)v10 + 8) = v12;
  v13 = a3[1] - v11;
  if ((unint64_t)v13 >= 9)
  {
    v14 = v13 >> 3;
    if (v14 <= 2)
      v14 = 2;
    v15 = v14 - 1;
    v16 = (uint64_t *)(v11 + 8);
    do
    {
      v17 = *v16++;
      v12 *= v17;
      --v15;
    }
    while (v15);
  }
  CVPixelBuffer = CreateCVPixelBuffer(0x40u / SizeOf, (v12 + (unint64_t)(0x40u / SizeOf) - 1) / (0x40u / SizeOf));
  *((_QWORD *)v10 + 5) = CVPixelBuffer;
  *((_DWORD *)v10 + 12) = (_DWORD)a4;
  *((_QWORD *)v10 + 8) = v12;
  if (v10 + 72 != (unsigned __int8 *)a3)
    _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)v10 + 72, *a3, (uint64_t)a3[1], (a3[1] - *a3) >> 3);
  if (CVPixelBufferLockBaseAddress(CVPixelBuffer, 1uLL))
  {
    v27 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v28 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to lock buffer.", &v32, &v33);
    MEMORY[0x22E2CA89C](v27, &v33, v28);
    __cxa_throw(v27, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  *((_QWORD *)v10 + 7) = CVPixelBufferGetBaseAddress(CVPixelBuffer);
  result = CVPixelBufferUnlockBaseAddress(CVPixelBuffer, 1uLL);
  if ((_DWORD)result)
  {
    v29 = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v30 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] failed to unlock buffer.", &v32, &v33);
    MEMORY[0x22E2CA89C](v29, &v33, v30);
    __cxa_throw(v29, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_229531D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  char v27;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  if ((v27 & 1) != 0)
    __cxa_free_exception(v26);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::GetSizeOf(_anonymous_namespace_ *this)
{
  int v1;
  uint64_t result;
  std::logic_error *exception;

  v1 = (int)this;
  result = 4;
  if (v1 > 1278226533)
  {
    if (v1 != 1278226534)
    {
      if (v1 != 1278226536)
        goto LABEL_9;
      return 2;
    }
  }
  else if (v1 != 1111970369)
  {
    if (v1 == 1278226488)
      return 1;
LABEL_9:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported OSType.");
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_229531E8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t OUDnnInferenceInterface::GetInputSpan<half,void>(uint64_t a1, unsigned __int8 *a2)
{
  return OUDnnInferenceInterface::GetSpan<half,void>(a2, (_QWORD *)(a1 + 8));
}

{
  return __ZNK23OUDnnInferenceInterface12GetInputSpanIDhvEENSt3__14spanIT_Lm18446744073709551615EEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(a1, a2);
}

uint64_t OUDnnInferenceInterface::GetSpan<half,void>(unsigned __int8 *a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  std::logic_error *exception;
  std::string v6;
  std::string v7;

  v2 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, a1);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v3 = v2;
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] Getting data span using incorrect type.", &v6, &v7);
    std::logic_error::logic_error(exception, &v7);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *((_QWORD *)v3 + 7);
}

void sub_229531F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t OUDnnInferenceInterface::GetInputSpan<float,void>(uint64_t a1, unsigned __int8 *a2)
{
  return OUDnnInferenceInterface::GetSpan<float,void>(a2, (_QWORD *)(a1 + 8));
}

{
  return __ZNK23OUDnnInferenceInterface12GetInputSpanIfvEENSt3__14spanIT_Lm18446744073709551615EEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(a1, a2);
}

uint64_t OUDnnInferenceInterface::GetSpan<float,void>(unsigned __int8 *a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  std::logic_error *exception;
  std::string v6;
  std::string v7;

  v2 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, a1);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v3 = v2;
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("] Getting data span using incorrect type.", &v6, &v7);
    std::logic_error::logic_error(exception, &v7);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return *((_QWORD *)v3 + 7);
}

void sub_2295320D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t OUDnnInferenceInterface::GetOutputSpan<half,void>(uint64_t a1, unsigned __int8 *a2)
{
  return OUDnnInferenceInterface::GetSpan<half,void>(a2, (_QWORD *)(a1 + 48));
}

{
  return __ZNK23OUDnnInferenceInterface13GetOutputSpanIDhvEENSt3__14spanIT_Lm18446744073709551615EEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(a1, a2);
}

uint64_t OUDnnInferenceInterface::GetOutputSpan<float,void>(uint64_t a1, unsigned __int8 *a2)
{
  return OUDnnInferenceInterface::GetSpan<float,void>(a2, (_QWORD *)(a1 + 48));
}

{
  return __ZNK23OUDnnInferenceInterface13GetOutputSpanIfvEENSt3__14spanIT_Lm18446744073709551615EEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(a1, a2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDnnInferenceInterface::InternalBuffer>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDnnInferenceInterface::InternalBuffer>,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_229532498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x78uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_229532548(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,OUDnnInferenceInterface::InternalBuffer>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,OUDnnInferenceInterface::InternalBuffer>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void _GLOBAL__sub_I_OUDnnInferenceInterface_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x22E2CB070]();
  std::string::basic_string[abi:ne180100]<0>(kClassName, "OUDnnInferenceInterface");
  __cxa_atexit(MEMORY[0x24BEDACF0], kClassName, &dword_2294C8000);
  objc_autoreleasePoolPop(v0);
}

uint64_t _ZNSt3__13mapIU8__strongP8NSStringDv3_f15CompareNSStringNS_9allocatorINS_4pairIU8__strongKS2_S4_EEEEED1B8ne180100Ev(uint64_t a1)
{
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t std::multimap<NSString * {__strong},SemanticLabelv5,CompareNSString,std::allocator<std::pair<NSString * const {__strong},SemanticLabelv5>>>::~multimap[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_2295328A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_22953299C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229532A98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_229533170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

void ou3dod::OU3DODInterface::GetDetectedBoxes(ou3dod::OU3DODInterface *this@<X0>, NSString *a2@<X1>, uint64_t *a3@<X8>)
{
  const OUBox3d *v5;
  const OUBox3d *v6;
  OUBox3d *v7;
  NSString *v8;

  v8 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v5 = (const OUBox3d *)*((_QWORD *)this + 1);
  v6 = (const OUBox3d *)*((_QWORD *)this + 2);
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      if ((NSString *)v5[1].var5.var0 == v8)
      {
        if ((unint64_t)v7 >= a3[2])
        {
          v7 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(a3, v5);
        }
        else
        {
          OUBox3d::OUBox3d(v7, v5);
          v7 = (OUBox3d *)((char *)v7 + 224);
          a3[1] = (uint64_t)v7;
        }
        a3[1] = (uint64_t)v7;
      }
      v5 = (const OUBox3d *)((char *)v5 + 224);
    }
    while (v5 != v6);
  }

}

void sub_2295333DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10)
{
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);

  _Unwind_Resume(a1);
}

void CheckOutputValidation(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  void *v4;
  id v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  BOOL v17;
  void *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  unsigned __int8 *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  __int128 v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id obj;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  int v49;
  uint8_t buf[4];
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  void *__p[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[128];
  _BYTE v63[128];
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  memset(v48, 0, sizeof(v48));
  v49 = 1065353216;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = a1;
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v64, 16);
  if (v1)
  {
    v2 = *(_QWORD *)v45;
    do
    {
      for (i = 0; i != v1; ++i)
      {
        if (*(_QWORD *)v45 != v2)
          objc_enumerationMutation(obj);
        objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * i), "identifier");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "UUIDString");
        v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v5, "UTF8String"));
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v48, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SBYTE7(v55) < 0)
          operator delete(__p[0]);

      }
      v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v64, 16);
    }
    while (v1);
  }

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v32 = obj;
  v6 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v40, v63, 16);
  if (v6)
  {
    v33 = *(_QWORD *)v41;
    *(_QWORD *)&v7 = 138412290;
    v31 = v7;
    do
    {
      v8 = 0;
      v34 = v6;
      do
      {
        if (*(_QWORD *)v41 != v33)
          objc_enumerationMutation(v32);
        v9 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v8);
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        objc_msgSend(v9, "boxesDict", v31);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v36, v62, 16);
        if (v11)
        {
          v12 = *(_QWORD *)v37;
          do
          {
            v13 = 0;
            do
            {
              if (*(_QWORD *)v37 != v12)
                objc_enumerationMutation(v10);
              v14 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v13);
              objc_msgSend(v9, "boxesDict");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "objectForKey:", v14);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = v16 == 0;

              if (!v17)
              {
                v60 = 0u;
                v61 = 0u;
                v58 = 0u;
                v59 = 0u;
                v56 = 0u;
                v57 = 0u;
                *(_OWORD *)__p = 0u;
                v55 = 0u;
                objc_msgSend(v9, "boxesDict");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v18, "objectForKey:", v14);
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                box3dFromNSArray(v19, (uint64_t)__p);

                if ((isBoxRectangle((float32x4_t *)__p) & 1) == 0)
                {
                  _OULoggingGetOSLogForCategoryObjectUnderstanding();
                  v20 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                  {
                    v21 = objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
                    objc_msgSend(v9, "type");
                    v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                    v23 = objc_msgSend(v22, "UTF8String");
                    *(_DWORD *)buf = 136315394;
                    v51 = v21;
                    v52 = 2080;
                    v53 = v23;
                    _os_log_debug_impl(&dword_2294C8000, v20, OS_LOG_TYPE_DEBUG, "[3DOD] Warning. The output object box is not rectangle for %s of %s", buf, 0x16u);

                  }
                }
              }
              ++v13;
            }
            while (v11 != v13);
            v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v36, v62, 16);
          }
          while (v11);
        }

        objc_msgSend(v9, "parent_id");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (v24)
        {
          objc_msgSend(v9, "parent_id");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "UUIDString");
          v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v26, "UTF8String"));
          v27 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v48, (unsigned __int8 *)__p);
          if (SBYTE7(v55) < 0)
            operator delete(__p[0]);

          if (!v27)
          {
            objc_msgSend(v9, "setParent_id:", 0);
            _OULoggingGetOSLogForCategoryObjectUnderstanding();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend(v9, "parent_id");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "UUIDString");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              LODWORD(__p[0]) = v31;
              *(void **)((char *)__p + 4) = v30;
              _os_log_debug_impl(&dword_2294C8000, v28, OS_LOG_TYPE_DEBUG, "[3DOD] Warning. The parent id of the object box does not exist, parent id is %@", (uint8_t *)__p, 0xCu);

            }
          }
        }
        ++v8;
      }
      while (v8 != v34);
      v6 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v40, v63, 16);
    }
    while (v6);
  }

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v48);
}

void sub_2295338B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_229533E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_229534344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  void *v40;
  uint64_t v41;

  if (a20 < 0)
    operator delete(__p);

  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v41 - 65) < 0)
    operator delete(*(void **)(v41 - 88));

  _Unwind_Resume(a1);
}

void OU3DObjectRGBSizeRefinerParams::~OU3DObjectRGBSizeRefinerParams(id *this)
{

  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

void sub_229534738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2CAAE8](v1, 0x10B0C40E05788A7);
  _Unwind_Resume(a1);
}

void sub_22953501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  OU3DObjectRGBSizeRefinerParams::~OU3DObjectRGBSizeRefinerParams((id *)&a21);

  _Unwind_Resume(a1);
}

void SmoothRefinedBoxes(void *a1, void *a2, uint64_t a3, void *a4, void *a5, unsigned int a6)
{
  id v10;
  OU3DObject *v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  OU3DObjectRefinedBox *v23;
  void *v24;
  void *v25;
  BOOL v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  BOOL v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  BOOL v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t m;
  void *v52;
  void *v53;
  void *v54;
  char v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  id obj;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  void *i;
  uint64_t v68;
  uint64_t v70;
  id v71;
  id v72;
  id k;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[128];
  _BYTE v91[128];
  __n128 v92[8];
  char v93;
  _BYTE v94[128];
  _BYTE v95[128];
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v10 = a1;
  v61 = a2;
  v71 = a4;
  v60 = a5;
  v66 = *(id *)(a3 + 112);
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  obj = v10;
  v64 = (id)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v95, 16);
  if (v64)
  {
    v63 = *(_QWORD *)v87;
    do
    {
      for (i = 0; i != v64; i = (char *)i + 1)
      {
        if (*(_QWORD *)v87 != v63)
          objc_enumerationMutation(obj);
        v11 = *(OU3DObject **)(*((_QWORD *)&v86 + 1) + 8 * (_QWORD)i);
        -[OU3DObject type](v11, "type", v60);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v66, "containsObject:", v12);

        if ((v13 & 1) != 0)
        {
          -[OU3DObject identifier](v11, "identifier");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v71, "containsObject:", v14);

          if ((v15 & 1) != 0)
          {
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v72 = v61;
            v16 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v82, v94, 16);
            if (!v16)
              goto LABEL_26;
            v17 = *(_QWORD *)v83;
            while (1)
            {
              for (j = 0; j != v16; ++j)
              {
                if (*(_QWORD *)v83 != v17)
                  objc_enumerationMutation(v72);
                v19 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * j);
                -[OU3DObject identifier](v11, "identifier");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v19, "identifier");
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                v22 = objc_msgSend(v20, "isEqual:", v21);

                if ((v22 & 1) != 0)
                {
                  v23 = objc_alloc_init(OU3DObjectRefinedBox);
                  objc_msgSend(v19, "boxesDict");
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v24, "objectForKey:", CFSTR("rawdetection"));
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  v26 = v25 == 0;

                  if (!v26)
                  {
                    objc_msgSend(v19, "boxesDict");
                    v27 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v27, "objectForKey:", CFSTR("rawdetection"));
                    v28 = (void *)objc_claimAutoreleasedReturnValue();
                    v29 = (void *)objc_msgSend(v28, "copy");
                    -[OU3DObjectRefinedBox setPreRefinedBox:](v23, "setPreRefinedBox:", v29);

                  }
                  -[OU3DObject identifier](v11, "identifier");
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend(v71, "containsObject:", v30))
                  {
                    -[OU3DObject boxesDict](v11, "boxesDict");
                    v31 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v31, "objectForKey:", CFSTR("rawdetection"));
                    v32 = (void *)objc_claimAutoreleasedReturnValue();
                    v33 = v32 == 0;

                    if (!v33)
                    {
                      -[OU3DObject boxesDict](v11, "boxesDict");
                      v30 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v30, "objectForKey:", CFSTR("rawdetection"));
                      v34 = (void *)objc_claimAutoreleasedReturnValue();
                      v35 = (void *)objc_msgSend(v34, "copy");
                      -[OU3DObjectRefinedBox setRefinedBox:](v23, "setRefinedBox:", v35);

                      goto LABEL_19;
                    }
                  }
                  else
                  {
LABEL_19:

                  }
                  -[OU3DObjectRefinedBox setFrameIndex:](v23, "setFrameIndex:", a6);
                  objc_msgSend(v19, "refined_box_history");
                  v36 = (void *)objc_claimAutoreleasedReturnValue();
                  v37 = (void *)objc_msgSend(v36, "mutableCopy");
                  -[OU3DObject setRefined_box_history:](v11, "setRefined_box_history:", v37);

                  -[OU3DObject addRefinedBoxToHistory:](v11, "addRefinedBoxToHistory:", v23);
                  SmoothObjectUponHistory(v11, (uint64_t)v92);
                  if (v93)
                  {
                    -[OU3DObject boxesDict](v11, "boxesDict");
                    v38 = (void *)objc_claimAutoreleasedReturnValue();
                    if (!v93)
                      std::__throw_bad_optional_access[abi:ne180100]();
                    box3dToNSArray(v92);
                    v39 = (void *)objc_claimAutoreleasedReturnValue();
                    v40 = (void *)objc_msgSend(v39, "copy");
                    objc_msgSend(v38, "setValue:forKey:", v40, CFSTR("rawdetection"));

                  }
                  continue;
                }
              }
              v16 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v82, v94, 16);
              if (!v16)
              {
LABEL_26:

                break;
              }
            }
          }
        }
      }
      v64 = (id)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v95, 16);
    }
    while (v64);
  }

  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v65 = obj;
  v70 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v78, v91, 16);
  if (v70)
  {
    v68 = *(_QWORD *)v79;
    do
    {
      for (k = 0; k != (id)v70; k = (char *)k + 1)
      {
        if (*(_QWORD *)v79 != v68)
          objc_enumerationMutation(v65);
        v41 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * (_QWORD)k);
        objc_msgSend(v41, "type", v60);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = objc_msgSend(v66, "containsObject:", v42);

        if ((v43 & 1) != 0)
        {
          objc_msgSend(v41, "identifier");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v45 = objc_msgSend(v71, "containsObject:", v44);

          if ((v45 & 1) == 0)
          {
            objc_msgSend(v41, "refined_box_history");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = objc_msgSend(v46, "count") == 0;

            if (!v47)
            {
              v76 = 0u;
              v77 = 0u;
              v74 = 0u;
              v75 = 0u;
              v48 = v60;
              v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v74, v90, 16);
              if (v49)
              {
                v50 = *(_QWORD *)v75;
                do
                {
                  for (m = 0; m != v49; ++m)
                  {
                    if (*(_QWORD *)v75 != v50)
                      objc_enumerationMutation(v48);
                    v52 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * m);
                    objc_msgSend(v41, "identifier");
                    v53 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v52, "identifier");
                    v54 = (void *)objc_claimAutoreleasedReturnValue();
                    v55 = objc_msgSend(v53, "isEqual:", v54);

                    if ((v55 & 1) != 0)
                    {
                      objc_msgSend(v41, "boxesDict");
                      v56 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v52, "boxesDict");
                      v57 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v57, "objectForKey:", CFSTR("rawdetection"));
                      v58 = (void *)objc_claimAutoreleasedReturnValue();
                      v59 = (void *)objc_msgSend(v58, "copy");
                      objc_msgSend(v56, "setValue:forKey:", v59, CFSTR("rawdetection"));

                    }
                  }
                  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v74, v90, 16);
                }
                while (v49);
              }

            }
          }
        }
      }
      v70 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v78, v91, 16);
    }
    while (v70);
  }

}

void sub_229535844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

id OU3DObjectRGBSizeRefiner::GetRefinerParams@<X0>(OU3DObjectRGBSizeRefiner *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  id result;

  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)this + 52);
  v4 = (std::string *)(a2 + 32);
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    *(_QWORD *)(a2 + 48) = *((_QWORD *)this + 11);
  }
  *(_OWORD *)(a2 + 56) = *((_OWORD *)this + 6);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)((char *)this + 108);
  v5 = (std::string *)(a2 + 88);
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    *(_QWORD *)(a2 + 104) = *((_QWORD *)this + 18);
  }
  result = *((id *)this + 19);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

void sub_229535AD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_229535BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2295363A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_229536B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void OUPointCloudCpp::Reserve(OUPointCloudCpp *this, unint64_t a2)
{
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)this + 3, a2);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)this, a2);
  _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE7reserveEm((void **)this + 6, a2);
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE7reserveEm((void **)this + 9, a2);
}

id box3dToNSArray(__n128 *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  float3ToNSArray(*a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = v2;
  float3ToNSArray(a1[1]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12[1] = v3;
  float3ToNSArray(a1[2]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v12[2] = v4;
  float3ToNSArray(a1[3]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v12[3] = v5;
  float3ToNSArray(a1[4]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v12[4] = v6;
  float3ToNSArray(a1[5]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12[5] = v7;
  float3ToNSArray(a1[6]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12[6] = v8;
  float3ToNSArray(a1[7]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v12[7] = v9;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v12, 8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_229536F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void withinClassNMS(_QWORD *a1@<X1>, std::vector<int> *a2@<X2>, _QWORD *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, unint64_t **a6@<X8>, float a7@<S0>)
{
  unint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  std::vector<int> *v12;
  unint64_t v14;
  unint64_t v15;
  std::vector<int>::size_type v16;
  _DWORD *v17;
  uint64_t v18;
  int *v19;
  int v20;
  char *begin;
  char *end;
  int v23;
  std::vector<int>::pointer v24;
  unint64_t v25;
  unint64_t v26;
  std::vector<int>::pointer v27;
  std::vector<int>::pointer v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  std::vector<int>::pointer v33;
  uint64_t v34;
  uint64_t v35;
  std::vector<int> *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  _QWORD *v43;
  float v44;
  double v45;
  uint64_t v46;
  float32x4_t *v47;
  __CFString *v48;
  __CFString *v49;
  int v50;
  int v51;
  int v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  BOOL v62;
  float v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t *v85;
  unint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::vector<int>::pointer v95;
  unint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  void *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  int64_t v112;
  unint64_t v113;
  char *v114;
  unint64_t *v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  std::vector<int>::pointer v144;
  unint64_t v145;
  _DWORD *v146;
  unint64_t v147;
  unint64_t *v148;
  uint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  std::logic_error *exception;
  uint64_t v158;
  uint64_t *v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  unint64_t **v163;
  _QWORD *v165;
  uint64_t v166;
  float32x4_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  void *v172[2];
  _OWORD v173[2];
  std::vector<int>::value_type __x[4];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  _BYTE __p[128];
  __int128 v183;
  __int128 v184;
  __int128 v185;
  std::vector<int> v186;
  void *v187[5];

  v7 = a6;
  v8 = a1[1];
  if (*a1 == v8)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  v9 = a4;
  v10 = a3;
  if (a3[1] - *a3 != a4[1] - *a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "[3DOD] Original and NMS iou matrix size should be the same.");
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v12 = a2;
  v14 = 0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 5);
  v15 = a2->__end_ - a2->__begin_;
  v16 = v14 - v15;
  std::vector<float>::vector(v187, v14);
  v17 = v187[0];
  if (v14 <= 1)
    v18 = 1;
  else
    v18 = v14;
  v19 = (int *)(*a1 + 136);
  v158 = v18;
  do
  {
    v20 = *v19;
    v19 += 56;
    *v17++ = v20;
    --v18;
  }
  while (v18);
  std::vector<int>::vector(&v186, v16);
  begin = (char *)v186.__begin_;
  end = (char *)v186.__end_;
  if (v186.__begin_ != v186.__end_)
  {
    v23 = (*((_DWORD *)v10 + 2) - *(_DWORD *)v10) / 24;
    v24 = v186.__begin_;
    do
      *v24++ = v23++;
    while (v24 != (std::vector<int>::pointer)end);
  }
  v159 = a5;
  v163 = v7;
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(v12, (uint64_t)v12->__end_, begin, end, (end - begin) >> 2);
  if (v14 != v15)
  {
    do
    {
      v25 = 1 - 0x5555555555555555 * ((uint64_t)(v10[1] - *v10) >> 3);
      __x[0] = -1082130432;
      std::vector<float>::vector(__p, v25, __x);
      std::vector<std::vector<float>>::push_back[abi:ne180100](v10, (uint64_t)__p);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      v26 = 1 - 0x5555555555555555 * ((v9[1] - *v9) >> 3);
      __x[0] = -1082130432;
      std::vector<float>::vector(__p, v26, __x);
      std::vector<std::vector<float>>::push_back[abi:ne180100](v9, (uint64_t)__p);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      --v16;
    }
    while (v16);
  }
  v28 = v12->__begin_;
  v27 = v12->__end_;
  v165 = v10;
  if (v15 >= v27 - v12->__begin_)
    goto LABEL_110;
  v29 = 0uLL;
  do
  {
    if (!v15)
      goto LABEL_109;
    v30 = 0;
    v31 = 0;
    v32 = a1;
    do
    {
      v33 = v12->__begin_;
      if (v15 >= v12->__end_ - v12->__begin_)
        std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
      v34 = v33[v15];
      v35 = v33[v31];
      if ((_DWORD)v34 != (_DWORD)v35)
      {
        v168 = v35;
        v36 = v12;
        v37 = v9;
        v38 = 3 * v34;
        v39 = *(_QWORD *)(*v9 + 8 * v38);
        v166 = *(_QWORD *)(*v10 + 8 * v38);
        v40 = *v32;
        v41 = (float32x4_t *)(*v32 + 224 * v15);
        v42 = (float32x4_t *)(*v32 + v30);
        v184 = v29;
        v185 = v29;
        v183 = v29;
        v43 = v32;
        box3dIou(v41, v42, 0, (uint64_t)&v183);
        v44 = *(float *)&v183;
        LODWORD(v45) = DWORD2(v184);
        v46 = *v43;
        v47 = (float32x4_t *)(*v43 + 224 * v15);
        v48 = (__CFString *)v47[8].i64[0];
        v32 = v43;
        if (v48 == CFSTR("Screen"))
        {
          v32 = a1;
          if (*(__CFString **)(v46 + v30 + 128) == CFSTR("Screen"))
          {
            memset(__p, 0, sizeof(__p));
            box3dEnlarge(v47, 0.0, 0.5, 0.0, __p);
            v9 = v37;
            v180 = 0u;
            v181 = 0u;
            v178 = 0u;
            v179 = 0u;
            v176 = 0u;
            v177 = 0u;
            *(_OWORD *)__x = 0u;
            v175 = 0u;
            box3dEnlarge((float32x4_t *)(*a1 + v30), 0.0, 0.5, 0.0, __x);
            v12 = v36;
            memset(v173, 0, sizeof(v173));
            *(_OWORD *)v172 = 0u;
            box3dIou((float32x4_t *)__p, (float32x4_t *)__x, 0, (uint64_t)v172);
            v63 = fmaxf(*(float *)v172, *((float *)v173 + 2));
            *(float *)(v166 + 4 * v168) = v63;
            *(float *)(v39 + 4 * v168) = v63;
            v32 = a1;
LABEL_106:
            v10 = v165;
            v29 = 0uLL;
            goto LABEL_107;
          }
        }
        v9 = v37;
        if (v48 == CFSTR("Stove") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Stove"))
        {
          *(_DWORD *)(v166 + 4 * v168) = DWORD2(v184);
          v12 = v36;
          if (*(float *)&v45 > 0.0)
          {
            if (v41[6].f32[2] <= *(float *)(v40 + v30 + 104))
              v64 = v31;
            else
              v64 = v15;
            *((float *)v187[0] + v64) = *((float *)v187[0] + v64) + 0.1;
            LODWORD(v45) = 1.0;
          }
          *(_DWORD *)(v39 + 4 * v168) = LODWORD(v45);
          goto LABEL_106;
        }
        v12 = v36;
        if (v48 == CFSTR("Sink") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Sink"))
        {
          if (v41[6].f32[2] <= *(float *)(v40 + v30 + 104))
            v65 = v31;
          else
            v65 = v15;
          *((float *)v187[0] + v65) = *((float *)v187[0] + v65) + 0.1;
          *(_DWORD *)(v39 + 4 * v168) = LODWORD(v45);
          *(_DWORD *)(v166 + 4 * v168) = LODWORD(v45);
          goto LABEL_106;
        }
        if (v48 == CFSTR("Bathtub") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Bathtub")
          || v48 == CFSTR("Toilet") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Toilet"))
        {
          v61 = v168;
          *(_DWORD *)(v166 + 4 * v168) = DWORD2(v184);
          if (*(float *)&v45 > 0.05)
            *(float *)&v45 = 1.0;
          goto LABEL_105;
        }
        if (v48 == CFSTR("Table") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Table")
          || v48 == CFSTR("Shelf") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Shelf"))
        {
          goto LABEL_83;
        }
        if (v48 == CFSTR("Sofa") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Sofa"))
        {
          v61 = v168;
          *(_DWORD *)(v166 + 4 * v168) = v183;
          v62 = v44 < 0.7;
LABEL_102:
          if (v62)
            *(float *)&v45 = 0.0;
          else
            *(float *)&v45 = v44;
LABEL_105:
          *(_DWORD *)(v39 + 4 * v61) = LODWORD(v45);
          goto LABEL_106;
        }
        if (v48 != CFSTR("Washer") || *(__CFString **)(v46 + v30 + 128) != CFSTR("Washer"))
        {
          if (v48 == CFSTR("Dishwasher") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Dishwasher")
            || v48 == CFSTR("Oven") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Oven"))
          {
            v61 = v168;
            *(_DWORD *)(v166 + 4 * v168) = v183;
            v66 = v44 <= 0.0;
LABEL_97:
            if (v66)
              *(float *)&v45 = v44;
            else
              *(float *)&v45 = 1.0;
            goto LABEL_105;
          }
          if (v48 != CFSTR("Chair") || *(__CFString **)(v46 + v30 + 128) != CFSTR("Chair"))
          {
            if ((v48 != CFSTR("Cabinet") || *(__CFString **)(v46 + v30 + 128) != CFSTR("Table"))
              && (v48 != CFSTR("Table") || *(__CFString **)(v46 + v30 + 128) != CFSTR("Cabinet")))
            {
              if (v48 == CFSTR("Cabinet")
                && ((v49 = *(__CFString **)(v46 + v30 + 128), CFSTR("Dishwasher") == v49)
                 || CFSTR("Oven") == v49
                 || CFSTR("Washer") == v49
                 || CFSTR("Sink") == v49
                 || CFSTR("Stove") == v49
                 || CFSTR("Refrigerator") == v49)
                || (v48 == CFSTR("Dishwasher")
                 || v48 == CFSTR("Oven")
                 || v48 == CFSTR("Washer")
                 || v48 == CFSTR("Sink")
                 || v48 == CFSTR("Stove")
                 || CFSTR("Refrigerator") == v48)
                && *(__CFString **)(v46 + v30 + 128) == CFSTR("Cabinet")
                || v48 == CFSTR("Chair") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Table")
                || v48 == CFSTR("Table") && *(__CFString **)(v46 + v30 + 128) == CFSTR("Chair"))
              {
                *(_DWORD *)(v39 + 4 * v168) = 0;
                *(_DWORD *)(v166 + 4 * v168) = 0;
              }
              else
              {
                *(_DWORD *)(v39 + 4 * v168) = v183;
                *(float *)(v166 + 4 * v168) = v44;
                v50 = -[__CFString isEqualToString:](v48, "isEqualToString:", CFSTR("Cabinet"), v45, v158);
                v32 = a1;
                if (v50)
                {
                  v51 = objc_msgSend(*(id *)(*a1 + v30 + 128), "isEqualToString:", CFSTR("Cabinet"));
                  v52 = v44 > 0.0 ? v51 : 0;
                  v32 = a1;
                  if (v52 == 1 && v44 < 0.5)
                  {
                    v161 = *v41;
                    v167 = vsubq_f32(*v41, v41[1]);
                    v53 = atan2f(v167.f32[0], v167.f32[1]);
                    v160 = *(float32x4_t *)(v40 + v30);
                    v162 = vsubq_f32(v160, *(float32x4_t *)(v40 + v30 + 16));
                    v54 = atan2f(v162.f32[0], v162.f32[1]);
                    v32 = a1;
                    if (vabds_f32(v53, v54) < 0.25)
                    {
                      v55 = vmulq_f32(v167, v167);
                      v56 = vmulq_f32(v162, v162);
                      if (vabds_f32(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0])) < 0.1)
                      {
                        v57 = vsubq_f32(v160, *(float32x4_t *)(v40 + v30 + 64));
                        v58 = vmulq_f32(v57, v57);
                        v59 = vsubq_f32(v161, v41[4]);
                        v60 = vmulq_f32(v59, v59);
                        if (vabds_f32(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0])) < 0.1&& fabsf(COERCE_FLOAT(vsubq_f32(v161, v160).i32[2])) < 0.1)
                        {
                          *(_DWORD *)(v39 + 4 * v168) = 0;
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_106;
            }
LABEL_83:
            v61 = v168;
            *(_DWORD *)(v166 + 4 * v168) = v183;
            v62 = v44 < 0.85;
            goto LABEL_102;
          }
        }
        v61 = v168;
        *(_DWORD *)(v166 + 4 * v168) = v183;
        v66 = v44 <= 0.3;
        goto LABEL_97;
      }
LABEL_107:
      ++v31;
      v30 += 224;
    }
    while (v15 != v31);
    v28 = v12->__begin_;
    v27 = v12->__end_;
    v7 = v163;
LABEL_109:
    ++v15;
  }
  while (v15 < v27 - v28);
LABEL_110:
  __x[0] = 1;
  std::vector<int>::vector((std::vector<int> *)__p, v14, __x);
  v67 = 0;
  v68 = *a1;
  v69 = *a1 + 128;
  v70 = v159;
  do
  {
    if (v67)
    {
      v71 = 0;
      v72 = *(_QWORD *)(v68 + 224 * v67 + 128);
      v73 = *(_QWORD *)__p;
      v74 = (_QWORD *)v69;
      do
      {
        if (v72 == *v74)
        {
          if (v67 >= v12->__end_ - v12->__begin_)
            std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
          if (*(float *)(*(_QWORD *)(*v9 + 24 * v12->__begin_[v67]) + 4 * v12->__begin_[v71]) > 0.7)
          {
            ++*(_DWORD *)(v73 + 4 * v67);
            ++*(_DWORD *)(v73 + 4 * v71);
          }
        }
        ++v71;
        v74 += 28;
      }
      while (v67 != v71);
    }
    ++v67;
  }
  while (v67 != v158);
  std::vector<unsigned long>::vector(__x, v14);
  v75 = *(_QWORD *)__x;
  v76 = *(uint64_t **)&__x[2];
  if (*(_QWORD *)__x != *(_QWORD *)&__x[2])
  {
    v77 = 0;
    v78 = *(uint64_t **)__x;
    do
      *v78++ = v77++;
    while (v78 != v76);
  }
  v79 = 126 - 2 * __clz(((uint64_t)v76 - v75) >> 3);
  *(_QWORD *)&v183 = v187;
  *((_QWORD *)&v183 + 1) = __p;
  if (v76 == (uint64_t *)v75)
    v80 = 0;
  else
    v80 = v79;
  std::__introsort<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *,false>(v75, v76, (uint64_t **)&v183, v80, 1);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  v81 = *(unint64_t **)__x;
  if (*(_QWORD *)&__x[2] != *(_QWORD *)__x)
  {
    do
    {
      v82 = *v81;
      v84 = v163[1];
      v83 = (unint64_t)v163[2];
      if ((unint64_t)v84 >= v83)
      {
        v86 = *v163;
        v87 = v84 - *v163;
        v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 61)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v89 = v83 - (_QWORD)v86;
        if (v89 >> 2 > v88)
          v88 = v89 >> 2;
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v88;
        if (v90)
        {
          v91 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v7 + 2), v90);
          v86 = *v163;
          v84 = v163[1];
        }
        else
        {
          v91 = 0;
        }
        v92 = (unint64_t *)&v91[8 * v87];
        *v92 = v82;
        v85 = v92 + 1;
        while (v84 != v86)
        {
          v93 = *--v84;
          *--v92 = v93;
        }
        *v163 = v92;
        v163[1] = v85;
        v163[2] = (unint64_t *)&v91[8 * v90];
        if (v86)
          operator delete(v86);
      }
      else
      {
        *v84 = v82;
        v85 = v84 + 1;
      }
      v163[1] = v85;
      std::vector<float>::vector(&v183, ((uint64_t)(*(_QWORD *)&__x[2] - *(_QWORD *)__x) >> 3) - 1);
      v94 = ((uint64_t)(*(_QWORD *)&__x[2] - *(_QWORD *)__x) >> 3) - 1;
      if ((uint64_t)(*(_QWORD *)&__x[2] - *(_QWORD *)__x) >> 3 != 1)
      {
        v95 = v12->__begin_;
        v96 = v12->__end_ - v12->__begin_;
        if (v96 <= v82)
          std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
        v97 = (_DWORD *)v183;
        v98 = v95[v82];
        v99 = (unint64_t *)(*(_QWORD *)__x + 8);
        do
        {
          v101 = *v99++;
          v100 = v101;
          if (v96 <= v101)
            std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
          v102 = v95[v100];
          if ((int)v98 <= (int)v102)
          {
            v103 = (_QWORD *)(*v9 + 24 * (int)v102);
            v102 = v98;
          }
          else
          {
            v103 = (_QWORD *)(*v9 + 24 * (int)v98);
          }
          *v97++ = *(_DWORD *)(*v103 + 4 * v102);
          --v94;
        }
        while (v94);
      }
      v172[0] = 0;
      v172[1] = 0;
      *(_QWORD *)&v173[0] = 0;
      v104 = *((_QWORD *)&v183 + 1);
      v105 = v183;
      if (*((_QWORD *)&v183 + 1) == (_QWORD)v183)
      {
        v121 = 0;
        v169 = 0;
        v170 = 0;
        v171 = 0;
      }
      else
      {
        v106 = 0;
        v107 = 0;
        do
        {
          if (*(float *)(v105 + 4 * v107) <= a7)
          {
            if ((unint64_t)v106 >= *(_QWORD *)&v173[0])
            {
              v109 = (char *)v172[0];
              v110 = (v106 - (char *)v172[0]) >> 3;
              v111 = v110 + 1;
              if ((unint64_t)(v110 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v112 = *(_QWORD *)&v173[0] - (unint64_t)v172[0];
              if ((uint64_t)(*(_QWORD *)&v173[0] - (unint64_t)v172[0]) >> 2 > v111)
                v111 = v112 >> 2;
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
                v113 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v113 = v111;
              if (v113)
              {
                v114 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v173, v113);
                v109 = (char *)v172[0];
                v106 = (char *)v172[1];
              }
              else
              {
                v114 = 0;
              }
              v115 = (unint64_t *)&v114[8 * v110];
              *v115 = v107;
              v108 = v115 + 1;
              while (v106 != v109)
              {
                v116 = *((_QWORD *)v106 - 1);
                v106 -= 8;
                *--v115 = v116;
              }
              v172[0] = v115;
              v172[1] = v108;
              *(_QWORD *)&v173[0] = &v114[8 * v113];
              if (v109)
                operator delete(v109);
            }
            else
            {
              *(_QWORD *)v106 = v107;
              v108 = v106 + 8;
            }
            v172[1] = v108;
            v106 = (char *)v108;
            v104 = *((_QWORD *)&v183 + 1);
            v105 = v183;
          }
          ++v107;
        }
        while (v107 < (v104 - v105) >> 2);
        v117 = (char *)v172[0];
        v169 = 0;
        v170 = 0;
        v171 = 0;
        if (v172[0] == v106)
        {
          v121 = 0;
        }
        else
        {
          v118 = 0;
          do
          {
            v119 = *(_QWORD *)v117 + 1;
            v120 = *(_QWORD *)__x;
            if (v118 >= v171)
            {
              v122 = v169;
              v123 = (v118 - v169) >> 3;
              v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 61)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v125 = v171 - v169;
              if ((v171 - v169) >> 2 > v124)
                v124 = v125 >> 2;
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8)
                v126 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v126 = v124;
              if (v126)
              {
                v127 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v171, v126);
                v122 = v169;
                v118 = v170;
              }
              else
              {
                v127 = 0;
              }
              v128 = &v127[8 * v123];
              *(_QWORD *)v128 = *(_QWORD *)(v120 + 8 * v119);
              v121 = v128 + 8;
              while (v118 != v122)
              {
                v129 = *((_QWORD *)v118 - 1);
                v118 -= 8;
                *((_QWORD *)v128 - 1) = v129;
                v128 -= 8;
              }
              v169 = v128;
              v171 = &v127[8 * v126];
              if (v122)
                operator delete(v122);
            }
            else
            {
              *(_QWORD *)v118 = *(_QWORD *)(*(_QWORD *)__x + 8 * v119);
              v121 = v118 + 8;
            }
            v170 = v121;
            v117 += 8;
            v118 = v121;
          }
          while (v117 != v106);
        }
      }
      if (*(_QWORD *)__x)
      {
        *(_QWORD *)&__x[2] = *(_QWORD *)__x;
        operator delete(*(void **)__x);
        v121 = v170;
      }
      *(_QWORD *)__x = v169;
      *(_QWORD *)&__x[2] = v121;
      *(_QWORD *)&v175 = v171;
      v10 = v165;
      if (v172[0])
      {
        v172[1] = v172[0];
        operator delete(v172[0]);
      }
      if ((_QWORD)v183)
      {
        *((_QWORD *)&v183 + 1) = v183;
        operator delete((void *)v183);
      }
      v81 = *(unint64_t **)__x;
    }
    while (*(_QWORD *)&__x[2] != *(_QWORD *)__x);
    v70 = v159;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  if (v70)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](v70);
    v130 = v163[1] - *v163;
    LODWORD(v172[0]) = 0;
    std::vector<float>::vector(&v183, v130, v172);
    std::vector<std::vector<float>>::resize(v70, v130, (uint64_t)&v183);
    if ((_QWORD)v183)
    {
      *((_QWORD *)&v183 + 1) = v183;
      operator delete((void *)v183);
    }
    v131 = *v163;
    v132 = (char *)v163[1] - (char *)*v163;
    if (v132)
    {
      v133 = 0;
      v134 = v132 >> 3;
      v135 = *v70;
      if (v134 <= 1)
        v136 = 1;
      else
        v136 = v134;
      v137 = (uint64_t *)(v135 + 24);
      v138 = v131 + 1;
      v139 = 1;
      v140 = 4;
      do
      {
        v141 = *(_QWORD *)(v135 + 24 * v133);
        *(_DWORD *)(v141 + 4 * v133) = 1065353216;
        v142 = v133 + 1;
        if (v134 > v133 + 1)
        {
          v143 = v131[v133];
          v144 = v12->__begin_;
          v145 = v12->__end_ - v12->__begin_;
          if (v145 <= v143)
            std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
          v146 = (_DWORD *)(v141 + v140);
          v147 = v134;
          v148 = v138;
          v149 = v137;
          do
          {
            v151 = *v148++;
            v150 = v151;
            if (v145 <= v151)
              std::vector<OUBox3d>::__throw_out_of_range[abi:ne180100]();
            v152 = v144[v143];
            v153 = v144[v150];
            if (v152 <= v153)
              v154 = v153;
            else
              v154 = v144[v143];
            if (v152 < v153)
              v153 = v144[v143];
            v155 = *(_DWORD *)(*(_QWORD *)(*v10 + 24 * v154) + 4 * v153);
            *v146++ = v155;
            v156 = *v149;
            v149 += 3;
            *(_DWORD *)(v156 + 4 * v133) = v155;
            --v147;
          }
          while (v139 != v147);
        }
        ++v139;
        v137 += 3;
        v140 += 4;
        ++v138;
        ++v133;
      }
      while (v142 != v136);
    }
  }
  if (*(_QWORD *)__x)
  {
    *(_QWORD *)&__x[2] = *(_QWORD *)__x;
    operator delete(*(void **)__x);
  }
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  if (v186.__begin_)
  {
    v186.__end_ = v186.__begin_;
    operator delete(v186.__begin_);
  }
  if (v187[0])
  {
    v187[1] = v187[0];
    operator delete(v187[0]);
  }
}

void sub_229538098(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<float>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void sizeRevision(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[8];
  void *v10[3];

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    while (1)
    {
      if (objc_msgSend(*(id *)(v1 + 128), "isEqualToString:", CFSTR("Stove")))
      {
        box3dToCentroidSizeAngle((float32x4_t *)v1, (uint64_t *)v10);
        *((_DWORD *)v10[0] + 5) = 1036831949;
        centroidSizeAngleToBox3d((uint64_t *)v10, 1, v9);
        goto LABEL_8;
      }
      if (objc_msgSend(*(id *)(v1 + 128), "isEqualToString:", CFSTR("Sink")))
        break;
      if (objc_msgSend(*(id *)(v1 + 128), "isEqualToString:", CFSTR("Screen")))
      {
        box3dToCentroidSizeAngle((float32x4_t *)v1, (uint64_t *)v10);
        *((_DWORD *)v10[0] + 4) = 1036831949;
        centroidSizeAngleToBox3d((uint64_t *)v10, 1, v9);
LABEL_8:
        v3 = v9[0];
        v4 = v9[1];
        v5 = v9[3];
        *(_OWORD *)(v1 + 32) = v9[2];
        *(_OWORD *)(v1 + 48) = v5;
        *(_OWORD *)v1 = v3;
        *(_OWORD *)(v1 + 16) = v4;
        v6 = v9[4];
        v7 = v9[5];
        v8 = v9[7];
        *(_OWORD *)(v1 + 96) = v9[6];
        *(_OWORD *)(v1 + 112) = v8;
        *(_OWORD *)(v1 + 64) = v6;
        *(_OWORD *)(v1 + 80) = v7;
        if (v10[0])
        {
          v10[1] = v10[0];
          operator delete(v10[0]);
        }
      }
      v1 += 224;
      if (v1 == v2)
        return;
    }
    box3dToCentroidSizeAngle((float32x4_t *)v1, (uint64_t *)v10);
    *((_DWORD *)v10[0] + 5) = 1050253722;
    centroidSizeAngleToBox3d((uint64_t *)v10, 1, v9);
    goto LABEL_8;
  }
}

void sub_2295383C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(_QWORD *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<OUBox3d>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  unsigned __int32 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  __n128 v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;

  v41 = a1[4];
  v42 = a1[5];
  v43 = a1[6];
  v44 = a1[7];
  v37 = *a1;
  v38 = a1[1];
  v39 = a1[2];
  v40 = a1[3];
  v4 = a1[8].n128_u64[0];
  a1[8].n128_u64[0] = 0;
  v5 = a1[8].n128_u32[2];
  v7 = a1[9].n128_u64[0];
  v6 = a1[9].n128_u64[1];
  a1[9] = 0u;
  v8 = (uint64_t)&a1[10];
  v33 = a1[10];
  v9 = a1[11].n128_u64[0];
  a1[10] = 0u;
  a1[11].n128_u64[0] = 0;
  v10 = (uint64_t)&a1[11].n128_i64[1];
  v11 = a1[12].n128_u64[0];
  v34 = a1[11].n128_u64[1];
  v35 = a1[12].n128_u64[1];
  *(__n128 *)((char *)&a1[11] + 8) = 0u;
  v12 = a1[13].n128_u64[0];
  *(__n128 *)((char *)&a1[12] + 8) = 0u;
  v36 = a1[13].n128_u16[4];
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[3];
  a1[2] = a2[2];
  a1[3] = v15;
  *a1 = v13;
  a1[1] = v14;
  v16 = a2[4];
  v17 = a2[5];
  v18 = a2[7];
  a1[6] = a2[6];
  a1[7] = v18;
  a1[4] = v16;
  a1[5] = v17;
  v19 = a2[8].n128_i64[0];
  a2[8].n128_u64[0] = 0;
  v20 = (void *)a1[8].n128_u64[0];
  a1[8].n128_u64[0] = v19;

  a1[8].n128_u32[2] = a2[8].n128_u32[2];
  v21 = a2[9].n128_i64[0];
  a2[9].n128_u64[0] = 0;
  v22 = (void *)a1[9].n128_u64[0];
  a1[9].n128_u64[0] = v21;

  v23 = a2[9].n128_i64[1];
  a2[9].n128_u64[1] = 0;
  v24 = (void *)a1[9].n128_u64[1];
  a1[9].n128_u64[1] = v23;

  std::vector<float>::__move_assign(v8, a2 + 10);
  std::vector<BOOL>::__move_assign(v10, &a2[11].n128_u64[1]);
  v25 = a2[13].n128_i64[0];
  a2[13].n128_u64[0] = 0;
  v26 = (void *)a1[13].n128_u64[0];
  a1[13].n128_u64[0] = v25;

  a1[13].n128_u16[4] = a2[13].n128_u16[4];
  a2[4] = v41;
  a2[5] = v42;
  a2[6] = v43;
  a2[7] = v44;
  *a2 = v37;
  a2[1] = v38;
  a2[2] = v39;
  a2[3] = v40;
  v27 = (void *)a2[8].n128_u64[0];
  a2[8].n128_u64[0] = v4;

  a2[8].n128_u32[2] = v5;
  v28 = (void *)a2[9].n128_u64[0];
  a2[9].n128_u64[0] = v7;

  v29 = (void *)a2[9].n128_u64[1];
  a2[9].n128_u64[1] = v6;

  v30 = (void *)a2[10].n128_u64[0];
  if (v30)
  {
    a2[10].n128_u64[1] = (unint64_t)v30;
    operator delete(v30);
  }
  a2[10] = v33;
  a2[11].n128_u64[0] = v9;
  v31 = (void *)a2[11].n128_u64[1];
  if (v31)
    operator delete(v31);
  a2[11].n128_u64[1] = v34;
  a2[12].n128_u64[0] = v11;
  v32 = (void *)a2[13].n128_u64[0];
  a2[12].n128_u64[1] = v35;
  a2[13].n128_u64[0] = v12;

  a2[13].n128_u16[4] = v36;
}

__n128 *std::vector<OUBox3d>::erase(uint64_t a1, __n128 *a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if (a2 != (__n128 *)a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<OUBox3d *,OUBox3d *,OUBox3d *>((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 224;
        std::__destroy_at[abi:ne180100]<OUBox3d,0>(v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void sub_229538D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, char *__pa, char *a14, OUBox3d *a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  a19 = &a23;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (__pa)
  {
    a14 = __pa;
    operator delete(__pa);
  }
  __pa = &a16;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void sub_229539178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{

  _Unwind_Resume(a1);
}

void sub_229539470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_229539724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_229539A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char **a16, char **a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  if (__p)
    operator delete(__p);
  if (a16)
  {
    a17 = a16;
    operator delete(a16);
  }

  a16 = &a19;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = &a22;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);

  _Unwind_Resume(a1);
}

void sub_229539E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a41);

  _Unwind_Resume(a1);
}

void sub_22953A27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  __p = (void *)(v20 - 136);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v20 - 112);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_22953A6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{

  _Unwind_Resume(a1);
}

void sub_22953B3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_22953C2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  void *v70;
  uint64_t v71;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a37);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__p);
  __p = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a70;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x200], (_QWORD *)STACK[0x208]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x218], (_QWORD *)STACK[0x220]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&STACK[0x230], (_QWORD *)STACK[0x238]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v71 - 248, *(_QWORD **)(v71 - 240));
  __p = (void *)(v71 - 224);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v71 - 200);
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_22953C520(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2CAAE8](v1, 0x10B0C40E05788A7);
  _Unwind_Resume(a1);
}

void sub_22953C904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t OUBox3d::OUBox3d(uint64_t a1, __int128 *a2, id *a3, void *a4, float a5)
{
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v9 = a4;
  v10 = a2[3];
  v12 = *a2;
  v11 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v11;
  v13 = a2[7];
  v15 = a2[4];
  v14 = a2[5];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 128) = *a3;
  *(float *)(a1 + 136) = a5;
  *(_QWORD *)(a1 + 144) = objc_msgSend(v9, "copy");
  *(_QWORD *)(a1 + 152) = CFSTR("unknown");
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 216) = -1;

  return a1;
}

void sub_22953C9E4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void std::vector<OUBox3d>::__assign_with_size[abi:ne180100]<OUBox3d*,OUBox3d*>(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a4)
  {
    std::vector<OUBox3d>::__vdeallocate((void **)a1);
    if (a4 > 0x124924924924924)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)) >= 0x92492492492492)
      v11 = 0x124924924924924;
    else
      v11 = v10;
    std::vector<OUBox3d>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d*,OUBox3d*,OUBox3d*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5) < a4)
  {
    v13 = &a2[2 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5)];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>,OUBox3d*,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d*,OUBox3d*,OUBox3d*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>,OUBox3d*,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 224;
      std::__destroy_at[abi:ne180100]<OUBox3d,0>(v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_22953CB78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22953CB80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22953CC5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int *v5;
  int *v7;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  int v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int v31;
  std::__split_buffer<int> __v;

  v5 = (int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_22953CE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  int *begin;
  std::vector<int>::pointer v6;
  int *v7;
  std::vector<int>::pointer v8;
  int v9;
  int *end;
  std::__split_buffer<int>::pointer v11;
  int64_t v12;
  int *v13;
  int *v14;
  int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *,false>(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  uint64_t *v68;
  int64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  float v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  uint64_t *v102;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float v109;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 1);
        v43 = *v10;
        if ((float)(*(float *)(**a3 + 4 * v42) * (float)*(int *)(*a3[1] + 4 * v42)) > (float)(*(float *)(**a3 + 4 * *v10)
                                                                                             * (float)*(int *)(*a3[1] + 4 * *v10)))
        {
          *v10 = v42;
          *(a2 - 1) = v43;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        v44 = v10 + 1;
        v45 = v10 + 2;
        v46 = v10 + 3;
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v47 = *(a2 - 1);
        v48 = v10[3];
        v49 = a3[1];
        v50 = **a3;
        v51 = *v49;
        if ((float)(*(float *)(v50 + 4 * v47) * (float)*(int *)(*v49 + 4 * v47)) > (float)(*(float *)(v50 + 4 * v48)
                                                                                          * (float)*(int *)(*v49 + 4 * v48)))
        {
          *v46 = v47;
          *(a2 - 1) = v48;
          v52 = *v46;
          v53 = *v45;
          v54 = *(float *)(v50 + 4 * *v46) * (float)*(int *)(v51 + 4 * *v46);
          if (v54 > (float)(*(float *)(v50 + 4 * *v45) * (float)*(int *)(v51 + 4 * *v45)))
          {
            *v45 = v52;
            v55 = *v44;
            v56 = *(float *)(v50 + 4 * *v44);
            *v46 = v53;
            if (v54 > (float)(v56 * (float)*(int *)(v51 + 4 * v55)))
            {
              v57 = *v10;
              v58 = *(float *)(v50 + 4 * *v10);
              v10[1] = v52;
              v10[2] = v55;
              if (v54 > (float)(v58 * (float)*(int *)(v51 + 4 * v57)))
              {
                *v10 = v52;
                v10[1] = v57;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v59 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v60 = 0;
                v61 = **a3;
                v62 = *a3[1];
                v63 = v10;
                do
                {
                  v65 = *v63;
                  v64 = v63[1];
                  v63 = v59;
                  v66 = *(float *)(v61 + 4 * v64) * (float)*(int *)(v62 + 4 * v64);
                  if (v66 > (float)(*(float *)(v61 + 4 * v65) * (float)*(int *)(v62 + 4 * v65)))
                  {
                    v67 = v60;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v67 + 8) = v65;
                      if (!v67)
                        break;
                      v65 = *(uint64_t *)((char *)v10 + v67 - 8);
                      v67 -= 8;
                      if (v66 <= (float)(*(float *)(v61 + 4 * v65) * (float)*(int *)(v62 + 4 * v65)))
                      {
                        v68 = (uint64_t *)((char *)v10 + v67 + 8);
                        goto LABEL_75;
                      }
                    }
                    v68 = v10;
LABEL_75:
                    *v68 = v64;
                  }
                  v59 = v63 + 1;
                  v60 += 8;
                }
                while (v63 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v104 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v105 = **a3;
              v106 = *a3[1];
              do
              {
                v108 = *v9;
                v107 = v9[1];
                v9 = v104;
                v109 = *(float *)(v105 + 4 * v107) * (float)*(int *)(v106 + 4 * v107);
                if (v109 > (float)(*(float *)(v105 + 4 * v108) * (float)*(int *)(v106 + 4 * v108)))
                {
                  do
                  {
                    *v104 = v108;
                    v108 = *(v104 - 2);
                    --v104;
                  }
                  while (v109 > (float)(*(float *)(v105 + 4 * v108) * (float)*(int *)(v106 + 4 * v108)));
                  *v104 = v107;
                }
                v104 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v69 = (v12 - 2) >> 1;
            v70 = *a3;
            v71 = a3[1];
            v72 = v69;
            do
            {
              v73 = v72;
              if (v69 >= v72)
              {
                v74 = (2 * v72) | 1;
                v75 = &v10[v74];
                v76 = 2 * v72 + 2;
                v77 = *v70;
                if (v76 >= (uint64_t)v12)
                {
                  v78 = *v71;
                }
                else
                {
                  v78 = *v71;
                  if ((float)(*(float *)(v77 + 4 * *v75) * (float)*(int *)(*v71 + 4 * *v75)) > (float)(*(float *)(v77 + 4 * v75[1]) * (float)*(int *)(*v71 + 4 * v75[1])))
                  {
                    ++v75;
                    v74 = 2 * v73 + 2;
                  }
                }
                v79 = &v10[v73];
                v80 = *v75;
                result = *v79;
                v81 = *(float *)(v77 + 4 * *v79) * (float)*(int *)(v78 + 4 * *v79);
                if ((float)(*(float *)(v77 + 4 * *v75) * (float)*(int *)(v78 + 4 * *v75)) <= v81)
                {
                  do
                  {
                    v82 = v75;
                    *v79 = v80;
                    if (v69 < v74)
                      break;
                    v83 = 2 * v74;
                    v74 = (2 * v74) | 1;
                    v75 = &v10[v74];
                    v84 = v83 + 2;
                    if (v84 < (uint64_t)v12
                      && (float)(*(float *)(v77 + 4 * *v75) * (float)*(int *)(v78 + 4 * *v75)) > (float)(*(float *)(v77 + 4 * v75[1]) * (float)*(int *)(v78 + 4 * v75[1])))
                    {
                      ++v75;
                      v74 = v84;
                    }
                    v80 = *v75;
                    v79 = v82;
                  }
                  while ((float)(*(float *)(v77 + 4 * *v75) * (float)*(int *)(v78 + 4 * *v75)) <= v81);
                  *v82 = result;
                }
              }
              v72 = v73 - 1;
            }
            while (v73);
            v85 = (unint64_t)v11 >> 3;
            do
            {
              v86 = 0;
              v87 = *v10;
              v88 = *a3;
              v89 = a3[1];
              v90 = v10;
              do
              {
                v91 = v90;
                v90 += v86 + 1;
                v92 = 2 * v86;
                v86 = (2 * v86) | 1;
                v93 = v92 + 2;
                if (v93 < v85)
                {
                  result = *v90;
                  if ((float)(*(float *)(*v88 + 4 * *v90) * (float)*(int *)(*v89 + 4 * *v90)) > (float)(*(float *)(*v88 + 4 * v90[1]) * (float)*(int *)(*v89 + 4 * v90[1])))
                  {
                    ++v90;
                    v86 = v93;
                  }
                }
                *v91 = *v90;
              }
              while (v86 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
              if (v90 == --a2)
              {
                *v90 = v87;
              }
              else
              {
                *v90 = *a2;
                *a2 = v87;
                v94 = (char *)v90 - (char *)v10 + 8;
                if (v94 >= 9)
                {
                  v95 = (((unint64_t)v94 >> 3) - 2) >> 1;
                  v96 = &v10[v95];
                  v97 = *v96;
                  v98 = *v90;
                  v99 = *v88;
                  v100 = *v89;
                  v101 = *(float *)(v99 + 4 * *v90) * (float)*(int *)(v100 + 4 * *v90);
                  if ((float)(*(float *)(v99 + 4 * *v96) * (float)*(int *)(v100 + 4 * *v96)) > v101)
                  {
                    do
                    {
                      v102 = v96;
                      *v90 = v97;
                      if (!v95)
                        break;
                      v95 = (v95 - 1) >> 1;
                      v96 = &v10[v95];
                      v97 = *v96;
                      v90 = v102;
                    }
                    while ((float)(*(float *)(v99 + 4 * *v96) * (float)*(int *)(v100 + 4 * *v96)) > v101);
                    *v102 = v98;
                  }
                }
              }
            }
            while (v85-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(&v9[v12 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v9, &v9[v12 >> 1], a2 - 1, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v9 + 1, v14 - 1, a2 - 2, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = **a3;
        v18 = *a3[1];
        if ((a5 & 1) == 0)
        {
          v19 = *(float *)(v17 + 4 * v16) * (float)*(int *)(v18 + 4 * v16);
          if ((float)(*(float *)(v17 + 4 * *(v9 - 1)) * (float)*(int *)(v18 + 4 * *(v9 - 1))) > v19)
            goto LABEL_12;
          if (v19 <= (float)(*(float *)(v17 + 4 * *(a2 - 1)) * (float)*(int *)(v18 + 4 * *(a2 - 1))))
          {
            v34 = v9 + 1;
            do
            {
              v10 = v34;
              if (v34 >= a2)
                break;
              ++v34;
            }
            while (v19 <= (float)(*(float *)(v17 + 4 * *v10) * (float)*(int *)(v18 + 4 * *v10)));
          }
          else
          {
            v10 = v9;
            do
            {
              v33 = v10[1];
              ++v10;
            }
            while (v19 <= (float)(*(float *)(v17 + 4 * v33) * (float)*(int *)(v18 + 4 * v33)));
          }
          v35 = a2;
          if (v10 < a2)
          {
            v35 = a2;
            do
              v36 = *--v35;
            while (v19 > (float)(*(float *)(v17 + 4 * v36) * (float)*(int *)(v18 + 4 * v36)));
          }
          if (v10 < v35)
          {
            v37 = *v10;
            v38 = *v35;
            do
            {
              *v10 = v38;
              *v35 = v37;
              do
              {
                v39 = v10[1];
                ++v10;
                v37 = v39;
              }
              while (v19 <= (float)(*(float *)(v17 + 4 * v39) * (float)*(int *)(v18 + 4 * v39)));
              do
              {
                v40 = *--v35;
                v38 = v40;
              }
              while (v19 > (float)(*(float *)(v17 + 4 * v40) * (float)*(int *)(v18 + 4 * v40)));
            }
            while (v10 < v35);
          }
          v41 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v41;
          a5 = 0;
          *v41 = v16;
          continue;
        }
        v19 = *(float *)(v17 + 4 * v16) * (float)*(int *)(v18 + 4 * v16);
LABEL_12:
        v20 = 0;
        do
          v21 = v9[++v20];
        while ((float)(*(float *)(v17 + 4 * v21) * (float)*(int *)(v18 + 4 * v21)) > v19);
        v22 = &v9[v20];
        v23 = a2;
        if (v20 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v25 = *--v23;
          }
          while ((float)(*(float *)(v17 + 4 * v25) * (float)*(int *)(v18 + 4 * v25)) <= v19);
        }
        else
        {
          do
            v24 = *--v23;
          while ((float)(*(float *)(v17 + 4 * v24) * (float)*(int *)(v18 + 4 * v24)) <= v19);
        }
        if (v22 >= v23)
        {
          v31 = v22 - 1;
        }
        else
        {
          v26 = *v23;
          v27 = &v9[v20];
          v28 = v23;
          do
          {
            *v27 = v26;
            *v28 = v21;
            do
            {
              v29 = v27[1];
              ++v27;
              v21 = v29;
            }
            while ((float)(*(float *)(v17 + 4 * v29) * (float)*(int *)(v18 + 4 * v29)) > v19);
            do
            {
              v30 = *--v28;
              v26 = v30;
            }
            while ((float)(*(float *)(v17 + 4 * v30) * (float)*(int *)(v18 + 4 * v30)) <= v19);
          }
          while (v27 < v28);
          v31 = v27 - 1;
        }
        if (v31 != v9)
          *v9 = *v31;
        *v31 = v16;
        if (v22 < v23)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *,false>(v9, v31, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v31 + 1;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v9, v31, a3);
        v10 = v31 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(v31 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v31;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = **a4;
  v7 = *a4[1];
  v8 = *(float *)(v6 + 4 * *a2) * (float)*(int *)(v7 + 4 * *a2);
  v9 = *a3;
  v10 = *(float *)(v6 + 4 * *result) * (float)*(int *)(v7 + 4 * *result);
  v11 = *(float *)(v6 + 4 * *a3) * (float)*(int *)(v7 + 4 * *a3);
  if (v8 <= v10)
  {
    if (v11 > v8)
    {
      *a2 = v9;
      *a3 = v4;
      v12 = *result;
      if ((float)(*(float *)(v6 + 4 * *a2) * (float)*(int *)(v7 + 4 * *a2)) > (float)(*(float *)(v6 + 4 * *result)
                                                                                     * (float)*(int *)(v7 + 4 * *result)))
      {
        *result = *a2;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v11 <= v8)
    {
      *result = v4;
      *a2 = v5;
      if ((float)(*(float *)(v6 + 4 * *a3) * (float)*(int *)(v7 + 4 * *a3)) <= v10)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if ((float)(*(float *)(**a3 + 4 * v8) * (float)*(int *)(*a3[1] + 4 * v8)) > (float)(*(float *)(**a3 + 4 * *a1)
                                                                                         * (float)*(int *)(*a3[1] + 4 * *a1)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v22 = a1 + 1;
      v23 = a1 + 2;
      v24 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v25 = *(a2 - 1);
      v26 = a1[3];
      v27 = a3[1];
      v28 = **a3;
      v29 = *v27;
      if ((float)(*(float *)(v28 + 4 * v25) * (float)*(int *)(*v27 + 4 * v25)) > (float)(*(float *)(v28 + 4 * v26)
                                                                                        * (float)*(int *)(*v27 + 4 * v26)))
      {
        *v24 = v25;
        *(a2 - 1) = v26;
        v30 = *v24;
        v31 = *v23;
        v32 = *(float *)(v28 + 4 * *v24) * (float)*(int *)(v29 + 4 * *v24);
        if (v32 > (float)(*(float *)(v28 + 4 * *v23) * (float)*(int *)(v29 + 4 * *v23)))
        {
          *v23 = v30;
          v33 = *v22;
          v34 = *(float *)(v28 + 4 * *v22);
          *v24 = v31;
          if (v32 > (float)(v34 * (float)*(int *)(v29 + 4 * v33)))
          {
            v35 = *a1;
            v36 = *(float *)(v28 + 4 * *a1);
            a1[1] = v30;
            a1[2] = v33;
            if (v32 > (float)(v36 * (float)*(int *)(v29 + 4 * v35)))
            {
              *a1 = v30;
              a1[1] = v35;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = *a3[1];
      v15 = 24;
      break;
  }
  while (1)
  {
    v16 = *v11;
    v17 = *v10;
    v18 = *(float *)(v13 + 4 * *v11) * (float)*(int *)(v14 + 4 * *v11);
    if (v18 > (float)(*(float *)(v13 + 4 * *v10) * (float)*(int *)(v14 + 4 * *v10)))
    {
      v19 = v15;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v19) = v17;
        v20 = v19 - 8;
        if (v19 == 8)
          break;
        v17 = *(uint64_t *)((char *)a1 + v19 - 16);
        v19 -= 8;
        if (v18 <= (float)(*(float *)(v13 + 4 * v17) * (float)*(int *)(v14 + 4 * v17)))
        {
          v21 = (uint64_t *)((char *)a1 + v20);
          goto LABEL_13;
        }
      }
      v21 = a1;
LABEL_13:
      *v21 = v16;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v15 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,withinClassNMS(std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&,std::vector<OUBox3d> const&,float,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<int,std::allocator<int>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>> *,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>,std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<std::map<NSString * {__strong},short,CompareNSString,std::allocator<std::pair<NSString * const {__strong},short>>> const&<float,std::allocator<float>>,std::allocator<std::allocator<float>>>)::$_0 &,unsigned long *>(a1, a2, a3, a5);
  v11 = *a3;
  v12 = a5[1];
  v13 = **a5;
  v14 = *v12;
  if ((float)(*(float *)(v13 + 4 * *a4) * (float)*(int *)(*v12 + 4 * *a4)) > (float)(*(float *)(v13 + 4 * *a3)
                                                                                    * (float)*(int *)(*v12 + 4 * *a3)))
  {
    *a3 = *a4;
    *a4 = v11;
    v15 = *a2;
    if ((float)(*(float *)(v13 + 4 * *a3) * (float)*(int *)(v14 + 4 * *a3)) > (float)(*(float *)(v13 + 4 * *a2)
                                                                                     * (float)*(int *)(v14 + 4 * *a2)))
    {
      *a2 = *a3;
      *a3 = v15;
      v16 = *a1;
      if ((float)(*(float *)(v13 + 4 * *a2) * (float)*(int *)(v14 + 4 * *a2)) > (float)(*(float *)(v13 + 4 * *a1)
                                                                                       * (float)*(int *)(v14 + 4 * *a1)))
      {
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
  return result;
}

_QWORD *std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (_QWORD *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<float>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_22953DEA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<std::vector<float>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_22953DF40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<OUBox3d *,OUBox3d *,OUBox3d *>(uint64_t a1, __int128 *a2, __int128 *a3, __n128 *a4)
{
  __n128 *v5;
  __int128 *v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;

  v5 = (__n128 *)a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *v5;
    v8 = v5[1];
    v9 = v5[3];
    a4[2] = v5[2];
    a4[3] = v9;
    *a4 = v7;
    a4[1] = v8;
    v10 = v5[4];
    v11 = v5[5];
    v12 = v5[7];
    a4[6] = v5[6];
    a4[7] = v12;
    a4[4] = v10;
    a4[5] = v11;
    v13 = v5[8].n128_i64[0];
    v5[8].n128_u64[0] = 0;
    v14 = (void *)a4[8].n128_u64[0];
    a4[8].n128_u64[0] = v13;

    a4[8].n128_u32[2] = v5[8].n128_u32[2];
    v15 = v5[9].n128_i64[0];
    v5[9].n128_u64[0] = 0;
    v16 = (void *)a4[9].n128_u64[0];
    a4[9].n128_u64[0] = v15;

    v17 = v5[9].n128_i64[1];
    v5[9].n128_u64[1] = 0;
    v18 = (void *)a4[9].n128_u64[1];
    a4[9].n128_u64[1] = v17;

    std::vector<float>::__move_assign((uint64_t)&a4[10], v5 + 10);
    std::vector<BOOL>::__move_assign((uint64_t)&a4[11].n128_i64[1], &v5[11].n128_u64[1]);
    v19 = v5[13].n128_i64[0];
    v5[13].n128_u64[0] = 0;
    v20 = (void *)a4[13].n128_u64[0];
    a4[13].n128_u64[0] = v19;

    a4[13].n128_u16[4] = v5[13].n128_u16[4];
    a4 += 14;
    v5 += 14;
  }
  while (v5 != (__n128 *)v6);
  return v6;
}

__int128 *std::vector<OUBox3d>::__insert_with_size[abi:ne180100]<std::__wrap_iter<OUBox3d*>,std::__wrap_iter<OUBox3d*>>(uint64_t *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 *v5;
  __int128 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  OUBox3d *v22;
  uint64_t v23;
  OUBox3d *v24;
  _QWORD v26[2];
  OUBox3d *v27;
  char *v28;
  uint64_t v29;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 5) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)a2) >> 5) >= a5)
      {
        v21 = &a3[14 * a5];
      }
      else
      {
        v21 = &a3[2 * ((uint64_t)(v12 - (_QWORD)a2) >> 5)];
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<OUBox3d>,OUBox3d*,OUBox3d*,OUBox3d*>(v9, (uint64_t)v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<OUBox3d>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[14 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<OUBox3d const*>,std::__wrap_iter<OUBox3d const*>,OUBox3d*,0>(v7, v21, (uint64_t)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x124924924924924)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 5);
      v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 5);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x92492492492492)
        v18 = 0x124924924924924;
      else
        v18 = v17;
      v29 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<OUBox3d>>(v9, v18);
      else
        v19 = 0;
      v22 = (OUBox3d *)&v19[224 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v27 = v22;
      v28 = &v19[224 * v18];
      v23 = 224 * a5;
      v24 = (OUBox3d *)((char *)v22 + 224 * a5);
      do
      {
        OUBox3d::OUBox3d(v22, (const OUBox3d *)v7);
        v22 = (OUBox3d *)((char *)v22 + 224);
        v7 += 14;
        v23 -= 224;
      }
      while (v23);
      v27 = v24;
      v5 = (__int128 *)std::vector<OUBox3d>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<OUBox3d>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_22953E210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(int *result, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  v5 = *result;
  v6 = *a4;
  v7 = *(_QWORD *)(*a4 + 24 * *((int *)a4 + 6));
  v8 = *(float *)(v7 + 4 * v4);
  v9 = *a3;
  v10 = *(float *)(v7 + 4 * v9);
  if (v8 <= *(float *)(v7 + 4 * *result))
  {
    if (v10 > v8)
    {
      *a2 = v9;
      *a3 = v4;
      v11 = *a2;
      v12 = *(_QWORD *)(v6 + 24 * *((int *)a4 + 6));
      v13 = *result;
      if (*(float *)(v12 + 4 * v11) > *(float *)(v12 + 4 * v13))
      {
        *result = v11;
        *a2 = v13;
      }
    }
  }
  else
  {
    if (v10 <= v8)
    {
      *result = v4;
      *a2 = v5;
      v14 = *(_QWORD *)(v6 + 24 * *((int *)a4 + 6));
      v15 = *a3;
      if (*(float *)(v14 + 4 * v15) <= *(float *)(v14 + 4 * v5))
        return result;
      *a2 = v15;
    }
    else
    {
      *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  int *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(_QWORD *)(*(_QWORD *)a3 + 24 * *(int *)(a3 + 24));
      v10 = *a1;
      if (*(float *)(v9 + 4 * v8) > *(float *)(v9 + 4 * v10))
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(a1, a1 + 1, a2 - 1, (uint64_t *)a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v25 = a1 + 2;
      v26 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v27 = *(a2 - 1);
      v28 = *(_QWORD *)a3;
      v29 = *(_QWORD *)(*(_QWORD *)a3 + 24 * *(int *)(a3 + 24));
      v30 = a1[3];
      if (*(float *)(v29 + 4 * v27) > *(float *)(v29 + 4 * v30))
      {
        *v26 = v27;
        *(a2 - 1) = v30;
        v31 = *v26;
        v32 = *(_QWORD *)(v28 + 24 * *(int *)(a3 + 24));
        v33 = *v25;
        if (*(float *)(v32 + 4 * *v26) > *(float *)(v32 + 4 * v33))
        {
          *v25 = v31;
          *v26 = v33;
          v34 = *(_QWORD *)(v28 + 24 * *(int *)(a3 + 24));
          v35 = a1[1];
          if (*(float *)(v34 + 4 * v31) > *(float *)(v34 + 4 * v35))
          {
            a1[1] = v31;
            a1[2] = v35;
            v36 = *(_QWORD *)(v28 + 24 * *(int *)(a3 + 24));
            v37 = *a1;
            if (*(float *)(v36 + 4 * v31) > *(float *)(v36 + 4 * v37))
            {
              *a1 = v31;
              a1[1] = v37;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(a1, a1 + 1, a1 + 2, (uint64_t *)a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = *(_QWORD *)a3;
      v15 = 12;
      break;
  }
  while (1)
  {
    v16 = *v12;
    v17 = *(_QWORD *)(v14 + 24 * *(int *)(a3 + 24));
    v18 = *v11;
    if (*(float *)(v17 + 4 * *v12) > *(float *)(v17 + 4 * v18))
    {
      v19 = v15;
      while (1)
      {
        *(int *)((char *)a1 + v19) = v18;
        v20 = v19 - 4;
        if (v19 == 4)
          break;
        v18 = *(int *)((char *)a1 + v19 - 8);
        v21 = *(_QWORD *)(v14 + 24 * *(int *)(a3 + 24));
        v22 = *(float *)(v21 + 4 * v16);
        v23 = *(float *)(v21 + 4 * v18);
        v19 = v20;
        if (v22 <= v23)
        {
          v24 = (int *)((char *)a1 + v20);
          goto LABEL_13;
        }
      }
      v24 = a1;
LABEL_13:
      *v24 = v16;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v15 += 4;
    if (++v12 == a2)
      return 1;
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_0 &,int *>(a1, a2, a3, (uint64_t *)a5);
  v11 = *a4;
  v12 = *(_QWORD *)a5;
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 24 * *(int *)(a5 + 24));
  v14 = *a3;
  if (*(float *)(v13 + 4 * v11) > *(float *)(v13 + 4 * v14))
  {
    *a3 = v11;
    *a4 = v14;
    v15 = *a3;
    v16 = *(_QWORD *)(v12 + 24 * *(int *)(a5 + 24));
    v17 = *a2;
    if (*(float *)(v16 + 4 * v15) > *(float *)(v16 + 4 * v17))
    {
      *a2 = v15;
      *a3 = v17;
      v18 = *a2;
      v19 = *(_QWORD *)(v12 + 24 * *(int *)(a5 + 24));
      v20 = *a1;
      if (*(float *)(v19 + 4 * v18) > *(float *)(v19 + 4 * v20))
      {
        *a1 = v18;
        *a2 = v20;
      }
    }
  }
  return result;
}

_QWORD *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22953EF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22953F03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(int *result, int *a2, int *a3, uint64_t *a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;

  v4 = *a2;
  v5 = *result;
  v6 = *a4;
  v7 = *((int *)a4 + 6);
  v8 = *(float *)(*(_QWORD *)(*a4 + 24 * *a2) + 4 * v7);
  v9 = *(_QWORD *)(*a4 + 24 * *result);
  v10 = *a3;
  v11 = *(float *)(*(_QWORD *)(*a4 + 24 * *a3) + 4 * v7);
  if (v8 <= *(float *)(v9 + 4 * v7))
  {
    if (v11 > v8)
    {
      *a2 = v10;
      *a3 = v4;
      v12 = *result;
      if (*(float *)(*(_QWORD *)(v6 + 24 * *a2) + 4 * *((int *)a4 + 6)) > *(float *)(*(_QWORD *)(v6 + 24 * *result)
                                                                                        + 4 * *((int *)a4 + 6)))
      {
        *result = *a2;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v11 <= v8)
    {
      *result = v4;
      *a2 = v5;
      if (*(float *)(*(_QWORD *)(v6 + 24 * *a3) + 4 * *((int *)a4 + 6)) <= *(float *)(v9 + 4 * *((int *)a4 + 6)))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v10;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  int *v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 24 * v8) + 4 * *(int *)(a3 + 24)) > *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 24 * *a1) + 4 * *(int *)(a3 + 24)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(a1, a1 + 1, a2 - 1, (uint64_t *)a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v24 = a1 + 2;
      v25 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v26 = *(a2 - 1);
      v27 = a1[3];
      v28 = *(_QWORD *)a3;
      if (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 24 * v26) + 4 * *(int *)(a3 + 24)) > *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 24 * v27) + 4 * *(int *)(a3 + 24)))
      {
        *v25 = v26;
        *(a2 - 1) = v27;
        v29 = *v25;
        v30 = *v24;
        v31 = *(_QWORD *)(v28 + 24 * *v25);
        if (*(float *)(v31 + 4 * *(int *)(a3 + 24)) > *(float *)(*(_QWORD *)(v28 + 24 * *v24)
                                                                  + 4 * *(int *)(a3 + 24)))
        {
          *v24 = v29;
          *v25 = v30;
          v32 = a1[1];
          if (*(float *)(v31 + 4 * *(int *)(a3 + 24)) > *(float *)(*(_QWORD *)(v28 + 24 * v32)
                                                                    + 4 * *(int *)(a3 + 24)))
          {
            a1[1] = v29;
            a1[2] = v32;
            v33 = *a1;
            if (*(float *)(v31 + 4 * *(int *)(a3 + 24)) > *(float *)(*(_QWORD *)(v28 + 24 * *a1)
                                                                      + 4 * *(int *)(a3 + 24)))
            {
              *a1 = v29;
              a1[1] = v33;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(a1, a1 + 1, a1 + 2, (uint64_t *)a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *(_QWORD *)a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(_QWORD *)(v13 + 24 * *v11);
    if (*(float *)(v17 + 4 * *(int *)(a3 + 24)) > *(float *)(*(_QWORD *)(v13 + 24 * *v10) + 4 * *(int *)(a3 + 24)))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v20 = *(int *)(a3 + 24);
        v21 = *(float *)(v17 + 4 * v20);
        v22 = *(float *)(*(_QWORD *)(v13 + 24 * v16) + 4 * v20);
        v18 = v19;
        if (v21 <= v22)
        {
          v23 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v23 = a1;
LABEL_13:
      *v23 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int *result;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[OU3DObjectDetector assignIdentifiersForNewObjects:withOldObjects:]::$_1 &,int *>(a1, a2, a3, (uint64_t *)a5);
  v11 = *a3;
  v12 = *(_QWORD *)a5;
  if (*(float *)(*(_QWORD *)(*(_QWORD *)a5 + 24 * *a4) + 4 * *(int *)(a5 + 24)) > *(float *)(*(_QWORD *)(*(_QWORD *)a5 + 24 * *a3)
                                                                                                + 4
                                                                                                * *(int *)(a5 + 24)))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(float *)(*(_QWORD *)(v12 + 24 * *a3) + 4 * *(int *)(a5 + 24)) > *(float *)(*(_QWORD *)(v12 + 24 * *a2)
                                                                                        + 4 * *(int *)(a5 + 24)))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(float *)(*(_QWORD *)(v12 + 24 * *a2) + 4 * *(int *)(a5 + 24)) > *(float *)(*(_QWORD *)(v12 + 24 * *a1)
                                                                                          + 4 * *(int *)(a5 + 24)))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__13mapIU8__strongP8NSStringDv3_f15CompareNSStringNS_9allocatorINS_4pairIU8__strongKS2_S4_EEEEEC2B8ne180100ESt16initializer_listIS9_ERKS5_(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      _ZNSt3__16__treeINS_12__value_typeIU8__strongP8NSStringDv3_fEENS_19__map_value_compareIS4_S6_15CompareNSStringLb1EEENS_9allocatorIS6_EEE30__emplace_hint_unique_key_argsIS4_JRKNS_4pairIU8__strongKS3_S5_EEEEENSE_INS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEbEENS_21__tree_const_iteratorIS6_SN_lEERKT_DpOT0_((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_22953FE94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__16__treeINS_12__value_typeIU8__strongP8NSStringDv3_fEENS_19__map_value_compareIS4_S6_15CompareNSStringLb1EEENS_9allocatorIS6_EEE30__emplace_hint_unique_key_argsIS4_JRKNS_4pairIU8__strongKS3_S5_EEEEENSE_INS_15__tree_iteratorIS6_PNS_11__tree_nodeIS6_PvEElEEbEENS_21__tree_const_iteratorIS6_SN_lEERKT_DpOT0_(uint64_t **a1, uint64_t *a2, void **a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>(a1, a2, &v11, &v10, a3);
  v7 = (_QWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v7[4] = *(id *)a4;
    *((_OWORD *)v7 + 3) = *(_OWORD *)(a4 + 16);
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t std::multimap<NSString * {__strong},SemanticLabelv5,CompareNSString,std::allocator<std::pair<NSString * const {__strong},SemanticLabelv5>>>::multimap[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__emplace_hint_multi<std::pair<NSString * const {__strong},SemanticLabelv5> const&>((uint64_t **)a1, v4, a2);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_22953FF9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__emplace_hint_multi<std::pair<NSString * const {__strong},SemanticLabelv5> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t **leaf;
  uint64_t v10[3];
  char v11;

  v6 = (uint64_t)(a1 + 1);
  v7 = operator new(0x30uLL);
  v10[2] = v6;
  *((_QWORD *)v7 + 4) = *(id *)a3;
  *((_BYTE *)v7 + 40) = *(_BYTE *)(a3 + 8);
  v11 = 1;
  leaf = (uint64_t **)std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf(a1, a2, v10, (void **)v7 + 4);
  std::__tree<int>::__insert_node_at(a1, v10[0], leaf, (uint64_t *)v7);
  return v7;
}

void sub_229540054(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},SemanticLabelv5>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf(_QWORD *a1, uint64_t a2, _QWORD *a3, void **a4)
{
  _QWORD *v6;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  v6 = (_QWORD *)a2;
  if (a1 + 1 != (_QWORD *)a2 && CompareNSString::operator()((uint64_t)(a1 + 2), *(void **)(a2 + 32), *a4))
    return std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf_low((uint64_t)a1, a3, a4);
  if ((_QWORD *)*a1 == v6)
  {
    v10 = v6;
  }
  else
  {
    v9 = (_QWORD *)*v6;
    if (*v6)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v11 = v6;
      do
      {
        v10 = (_QWORD *)v11[2];
        v12 = *v10 == (_QWORD)v11;
        v11 = v10;
      }
      while (v12);
    }
    if (CompareNSString::operator()((uint64_t)(a1 + 2), *a4, (void *)v10[4]))
      return std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf_high((uint64_t)a1, a3, a4);
  }
  if (*v6)
  {
    *a3 = v10;
    return v10 + 1;
  }
  else
  {
    *a3 = v6;
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!CompareNSString::operator()(v7, *a3, *(void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<std::__value_type<NSString * {__strong},SemanticLabelv5>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},SemanticLabelv5>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},SemanticLabelv5>>>::__find_leaf_low(uint64_t a1, _QWORD *a2, void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (CompareNSString::operator()(v7, *(void **)(v4 + 32), *a3))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NSString * {__strong},SemanticLabelv5>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

OU3DObjectRGBSizeRefiner *std::unique_ptr<OU3DObjectRGBSizeRefiner>::reset[abi:ne180100](OU3DObjectRGBSizeRefiner **a1, OU3DObjectRGBSizeRefiner *a2)
{
  OU3DObjectRGBSizeRefiner *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    OU3DObjectRGBSizeRefiner::~OU3DObjectRGBSizeRefiner(result);
    JUMPOUT(0x22E2CAAE8);
  }
  return result;
}

void OU3DObjectRGBSizeRefiner::~OU3DObjectRGBSizeRefiner(OU3DObjectRGBSizeRefiner *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v2 = (void *)*((_QWORD *)this + 40);
  if (v2)
  {
    *((_QWORD *)this + 41) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 37);
  if (v3)
  {
    *((_QWORD *)this + 38) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 34);
  if (v4)
  {
    *((_QWORD *)this + 35) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 31);
  if (v5)
  {
    *((_QWORD *)this + 32) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 28);
  if (v6)
  {
    *((_QWORD *)this + 29) = v6;
    operator delete(v6);
  }
  std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  v7 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);

  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));

  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }

}

void std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<NSString * {__strong},objc_object  {objcproto10MTLTexture}* {__strong},std::less<NSString * {__strong}>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::destroy(a1, a2[1]);
    v4 = a2[5];
    a2[5] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

    operator delete(a2);
  }
}

_QWORD *std::__tree<std::__value_type<NSString * {__strong},short>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},short>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},short>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::__find_equal<NSString * {__strong}>((uint64_t)a1, &v10, a2);
  v7 = (_QWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v7[4] = **a4;
    *((_WORD *)v7 + 20) = 0;
    std::__tree<int>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void _GLOBAL__sub_I_OU3DObjectDetector_mm()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t i;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  uint64_t j;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  __CFString *v21;
  char *v22;
  uint64_t v23;
  uint64_t k;
  __CFString *v25;
  _QWORD *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  char *v32;
  uint64_t v33;
  uint64_t m;
  _OWORD *v35;
  __CFString *v36;
  __CFString *v37;
  __CFString *v38;
  __CFString *v39;
  __CFString *v40;
  uint64_t n;
  uint64_t ii;
  __CFString *v43;
  __CFString *v44;
  __CFString *v45;
  __CFString *v46;
  __CFString *v47;
  __CFString *v48;
  __CFString *v49;
  __CFString *v50;
  __CFString *v51;
  __CFString *v52;
  __CFString *v53;
  uint64_t jj;
  __CFString *v55;
  __CFString *v56;
  __CFString *v57;
  __CFString *v58;
  __CFString *v59;
  __CFString *v60;
  __CFString *v61;
  __CFString *v62;
  __CFString *v63;
  __CFString *v64;
  __CFString *v65;
  __CFString *v66;
  __CFString *v67;
  __CFString *v68;
  __CFString *v69;
  __CFString *v70;
  __CFString *v71;
  uint64_t kk;
  __CFString *v73;
  __CFString *v74;
  __CFString *v75;
  __CFString *v76;
  __CFString *v77;
  __CFString *v78;
  __CFString *v79;
  __CFString *v80;
  uint64_t mm;
  uint64_t nn;
  void *context;
  __CFString *v84;
  __CFString *v85;
  __CFString *v86;
  __CFString *v87;
  __CFString *v88;
  __CFString *v89;
  __CFString *v90;
  __CFString *v91;
  __CFString *v92;
  __CFString *v93;
  __CFString *v94;
  __CFString *v95;
  __CFString *v96;
  __CFString *v97;
  __CFString *v98;
  __CFString *v99;
  __CFString *v100;
  __CFString *v101;
  __CFString *v102;
  __CFString *v103;
  __CFString *v104;
  __CFString *v105;
  __CFString *v106;
  __CFString *v107;
  __CFString *v108;
  __CFString *v109;
  __CFString *v110;
  __CFString *v111;
  __CFString *v112;
  __CFString *v113;
  __CFString *v114;
  __CFString *v115;
  __CFString *v116;
  __CFString *v117;
  __CFString *v118;
  __CFString *v119;
  __CFString *v120;
  __CFString *v121;
  __CFString *v122;
  __CFString *v123;
  __CFString *v124;
  __CFString *v125;
  __CFString *v126;
  __CFString *v127;
  __CFString *v128;
  __CFString *v129;
  __CFString *v130;
  __CFString *v131;
  __CFString *v132;
  __CFString *v133;
  __CFString *v134;
  __CFString *v135;
  __CFString *v136;
  __CFString *v137;
  __CFString *v138;
  __CFString *v139;
  __CFString *v140;
  __CFString *v141;
  __CFString *v142;
  __CFString *v143;
  __CFString *v144;
  __CFString *v145;
  __CFString *v146;
  __CFString *v147;
  id v148;
  __CFString *v149;
  __CFString *v150;
  __CFString *v151;
  __CFString *v152;
  __CFString *v153;
  __CFString *v154;
  __CFString *v155;
  __CFString *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  __CFString *v172;
  __int128 v173;
  __CFString *v174;
  __CFString *v175;
  __int128 v176;
  __CFString *v177;
  const __CFString *v178;
  __int128 v179;
  __CFString *v180;
  const __CFString *v181;
  __int128 v182;
  __CFString *v183;
  const __CFString *v184;
  __int128 v185;
  __CFString *v186;
  const __CFString *v187;
  __int128 v188;
  __CFString *v189;
  const __CFString *v190;
  __int128 v191;
  id v192;
  const __CFString *v193;
  __int128 v194;
  __CFString *v195;
  const __CFString *v196;
  __int128 v197;
  id v198;
  const __CFString *v199;
  __int128 v200;
  int v201;
  const __CFString *v202;
  int v203;
  const __CFString *v204;
  int v205;
  const __CFString *v206;
  int v207;
  const __CFString *v208;
  int v209;
  const __CFString *v210;
  int v211;
  const __CFString *v212;
  int v213;
  const __CFString *v214;
  int v215;
  const __CFString *v216;
  int v217;
  const __CFString *v218;
  int v219;
  const __CFString *v220;
  int v221;
  const __CFString *v222;
  int v223;
  const __CFString *v224;
  int v225;
  const __CFString *v226;
  int v227;
  const __CFString *v228;
  int v229;
  const __CFString *v230;
  int v231;
  const __CFString *v232;
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x22E2CB070]();
  LODWORD(v157) = 0;
  *((_QWORD *)&v157 + 1) = CFSTR("Unknown");
  LODWORD(v158) = 1;
  *((_QWORD *)&v158 + 1) = *((id *)&v157 + 1);
  LODWORD(v159) = 2;
  *((_QWORD *)&v159 + 1) = *((id *)&v158 + 1);
  LODWORD(v160) = 3;
  *((_QWORD *)&v160 + 1) = *((id *)&v159 + 1);
  LODWORD(v161) = 4;
  *((_QWORD *)&v161 + 1) = *((id *)&v160 + 1);
  LODWORD(v162) = 5;
  *((_QWORD *)&v162 + 1) = *((id *)&v161 + 1);
  LODWORD(v163) = 6;
  v134 = CFSTR("Door");
  *((_QWORD *)&v163 + 1) = v134;
  LODWORD(v164) = 7;
  v123 = CFSTR("Window");
  *((_QWORD *)&v164 + 1) = v123;
  LODWORD(v165) = 8;
  *((_QWORD *)&v165 + 1) = *((id *)&v162 + 1);
  LODWORD(v166) = 9;
  v153 = CFSTR("Fireplace");
  *((_QWORD *)&v166 + 1) = v153;
  LODWORD(v167) = 10;
  *((_QWORD *)&v167 + 1) = *((id *)&v165 + 1);
  LODWORD(v168) = 11;
  *((_QWORD *)&v168 + 1) = *((id *)&v167 + 1);
  LODWORD(v169) = 12;
  v113 = CFSTR("Stairs");
  *((_QWORD *)&v169 + 1) = v113;
  LODWORD(v170) = 13;
  v128 = CFSTR("Bed");
  *((_QWORD *)&v170 + 1) = v128;
  LODWORD(v171) = 14;
  v172 = CFSTR("Cabinet");
  LODWORD(v173) = 15;
  v149 = CFSTR("Chair");
  *((_QWORD *)&v173 + 1) = v149;
  LODWORD(v174) = 16;
  v175 = v172;
  LODWORD(v176) = 17;
  *((_QWORD *)&v176 + 1) = v175;
  LODWORD(v177) = 18;
  v144 = CFSTR("Sofa");
  v178 = v144;
  LODWORD(v179) = 19;
  v139 = CFSTR("Table");
  *((_QWORD *)&v179 + 1) = v139;
  LODWORD(v180) = 20;
  v118 = CFSTR("Toilet");
  v181 = v118;
  LODWORD(v182) = 21;
  v0 = CFSTR("Sink");
  *((_QWORD *)&v182 + 1) = v0;
  LODWORD(v183) = 22;
  v107 = CFSTR("Bathtub");
  v184 = v107;
  LODWORD(v185) = 23;
  *((_QWORD *)&v185 + 1) = *((id *)&v168 + 1);
  LODWORD(v186) = 24;
  v1 = CFSTR("Refrigerator");
  v187 = v1;
  LODWORD(v188) = 25;
  v2 = CFSTR("Stove");
  *((_QWORD *)&v188 + 1) = v2;
  LODWORD(v189) = 26;
  v3 = CFSTR("Washer");
  v190 = v3;
  LODWORD(v191) = 27;
  v4 = CFSTR("Oven");
  *((_QWORD *)&v191 + 1) = v4;
  LODWORD(v192) = 28;
  v5 = CFSTR("Dishwasher");
  v193 = v5;
  LODWORD(v194) = 29;
  *((_QWORD *)&v194 + 1) = *((id *)&v185 + 1);
  LODWORD(v195) = 30;
  v6 = (__CFString *)*((id *)&v176 + 1);
  v196 = v6;
  LODWORD(v197) = 31;
  *((_QWORD *)&v197 + 1) = *((id *)&v194 + 1);
  LODWORD(v198) = 32;
  v7 = CFSTR("Screen");
  v199 = v7;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSemanticsODLabelMap, (int *)&v157, 33);
  for (i = 520; i != -8; i -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSemanticsODLabelMap, &dword_2294C8000);
  v167 = xmmword_229561FB8;
  v168 = unk_229561FC8;
  v169 = xmmword_229561FD8;
  v170 = unk_229561FE8;
  v163 = xmmword_229561F78;
  v164 = unk_229561F88;
  v165 = xmmword_229561F98;
  v166 = unk_229561FA8;
  v159 = xmmword_229561F38;
  v160 = unk_229561F48;
  v161 = xmmword_229561F58;
  v162 = unk_229561F68;
  v157 = xmmword_229561F18;
  v158 = unk_229561F28;
  v171 = 28;
  std::unordered_map<int,SemanticLabelv5>::unordered_map((uint64_t)&kSparseSSDSemanticLabels, (int *)&v157, 29);
  __cxa_atexit((void (*)(void *))std::unordered_map<int,SemanticLabelv5>::~unordered_map[abi:ne180100], &kSparseSSDSemanticLabels, &dword_2294C8000);
  LODWORD(v157) = 0;
  v102 = v6;
  *((_QWORD *)&v157 + 1) = v102;
  LODWORD(v158) = 1;
  v97 = v1;
  *((_QWORD *)&v158 + 1) = v97;
  LODWORD(v159) = 2;
  v94 = CFSTR("Shelf");
  *((_QWORD *)&v159 + 1) = v94;
  LODWORD(v160) = 3;
  v92 = v2;
  *((_QWORD *)&v160 + 1) = v92;
  LODWORD(v161) = 4;
  v129 = v128;
  *((_QWORD *)&v161 + 1) = v129;
  LODWORD(v162) = 5;
  v90 = v0;
  *((_QWORD *)&v162 + 1) = v90;
  LODWORD(v163) = 6;
  v88 = v3;
  *((_QWORD *)&v163 + 1) = v88;
  LODWORD(v164) = 7;
  v119 = v118;
  *((_QWORD *)&v164 + 1) = v119;
  LODWORD(v165) = 8;
  v108 = v107;
  *((_QWORD *)&v165 + 1) = v108;
  LODWORD(v166) = 9;
  v87 = v4;
  *((_QWORD *)&v166 + 1) = v87;
  LODWORD(v167) = 10;
  v86 = v5;
  *((_QWORD *)&v167 + 1) = v86;
  LODWORD(v168) = 11;
  v154 = v153;
  *((_QWORD *)&v168 + 1) = v154;
  LODWORD(v169) = 12;
  v85 = CFSTR("Stool");
  *((_QWORD *)&v169 + 1) = v85;
  LODWORD(v170) = 13;
  v9 = v149;
  *((_QWORD *)&v170 + 1) = v9;
  LODWORD(v171) = 14;
  v10 = v139;
  v172 = v10;
  LODWORD(v173) = 15;
  v11 = v7;
  *((_QWORD *)&v173 + 1) = v11;
  LODWORD(v174) = 16;
  v12 = v144;
  v175 = v12;
  LODWORD(v176) = 17;
  v13 = v113;
  *((_QWORD *)&v176 + 1) = v13;
  LODWORD(v177) = 18;
  v14 = v123;
  v178 = v14;
  LODWORD(v179) = 19;
  v15 = v134;
  *((_QWORD *)&v179 + 1) = v15;
  LODWORD(v180) = 20;
  v16 = CFSTR("BuildInCabinet");
  v181 = v16;
  std::unordered_map<int,NSString * {__strong}>::unordered_map((uint64_t)&kSparseSSDObjectLabels, (int *)&v157, 21);
  for (j = 328; j != -8; j -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<int,NSString * {__strong}>::~unordered_map[abi:ne180100], &kSparseSSDObjectLabels, &dword_2294C8000);
  v18 = v102;
  *(_QWORD *)&v157 = v18;
  v84 = v97;
  *((_QWORD *)&v157 + 1) = v84;
  v95 = v94;
  *(_QWORD *)&v158 = v95;
  v98 = v92;
  *((_QWORD *)&v158 + 1) = v98;
  v150 = v129;
  *(_QWORD *)&v159 = v150;
  v103 = v90;
  *((_QWORD *)&v159 + 1) = v103;
  v114 = v88;
  *(_QWORD *)&v160 = v114;
  v124 = v119;
  *((_QWORD *)&v160 + 1) = v124;
  v19 = v108;
  *(_QWORD *)&v161 = v19;
  v130 = v87;
  *((_QWORD *)&v161 + 1) = v130;
  v135 = v86;
  *(_QWORD *)&v162 = v135;
  v140 = v154;
  *((_QWORD *)&v162 + 1) = v140;
  v145 = v85;
  *(_QWORD *)&v163 = v145;
  v120 = v9;
  *((_QWORD *)&v163 + 1) = v120;
  v20 = v10;
  *(_QWORD *)&v164 = v20;
  v109 = v11;
  *((_QWORD *)&v164 + 1) = v109;
  v21 = v12;
  *(_QWORD *)&v165 = v21;
  *((_QWORD *)&v165 + 1) = v13;
  *(_QWORD *)&v166 = v14;
  *((_QWORD *)&v166 + 1) = v15;
  *(_QWORD *)&v167 = v16;
  qword_2540CA200 = 0;
  qword_2540CA208 = 0;
  ou3dod::kObjectTypesLUT = 0;
  v22 = (char *)operator new(0xA8uLL);
  v23 = 0;
  ou3dod::kObjectTypesLUT = (uint64_t)v22;
  qword_2540CA200 = (uint64_t)v22;
  qword_2540CA208 = (uint64_t)(v22 + 168);
  do
  {
    *(_QWORD *)&v22[v23] = *(id *)((char *)&v157 + v23);
    v23 += 8;
  }
  while (v23 != 168);
  qword_2540CA200 = (uint64_t)(v22 + 168);
  for (k = 160; k != -8; k -= 8)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kObjectTypesLUT, &dword_2294C8000);
  v25 = v18;
  qword_2540CA3B8 = 0;
  unk_2540CA3C0 = 0;
  ou3dod::kAFClassIdToObjectTypeOffline = 0;
  *(_QWORD *)&v157 = &ou3dod::kAFClassIdToObjectTypeOffline;
  BYTE8(v157) = 0;
  v26 = operator new(8uLL);
  ou3dod::kAFClassIdToObjectTypeOffline = (uint64_t)v26;
  *v26 = v25;
  qword_2540CA3B8 = (uint64_t)(v26 + 1);
  unk_2540CA3C0 = v26 + 1;
  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kAFClassIdToObjectTypeOffline, &dword_2294C8000);
  v27 = v25;
  *(_QWORD *)&v157 = v27;
  v28 = v150;
  *((_QWORD *)&v157 + 1) = v28;
  v29 = v19;
  *(_QWORD *)&v158 = v29;
  v30 = v20;
  *((_QWORD *)&v158 + 1) = v30;
  v31 = v21;
  *(_QWORD *)&v159 = v31;
  qword_2540CA290 = 0;
  qword_2540CA298 = 0;
  ou3dod::kOfflineSsdTypesLUT = 0;
  v32 = (char *)operator new(0x28uLL);
  v33 = 0;
  ou3dod::kOfflineSsdTypesLUT = (uint64_t)v32;
  qword_2540CA290 = (uint64_t)v32;
  qword_2540CA298 = (uint64_t)(v32 + 40);
  do
  {
    *(_QWORD *)&v32[v33] = *(id *)((char *)&v157 + v33);
    v33 += 8;
  }
  while (v33 != 40);
  qword_2540CA290 = (uint64_t)(v32 + 40);
  for (m = 32; m != -8; m -= 8)

  __cxa_atexit((void (*)(void *))std::vector<NSString * {__strong}>::~vector[abi:ne180100], &ou3dod::kOfflineSsdTypesLUT, &dword_2294C8000);
  qword_2540CA328 = 0;
  unk_2540CA330 = 0;
  ou3dod::kOfflineSSDAnchorSizeList = 0;
  v35 = operator new(0x50uLL);
  qword_2540CA328 = (uint64_t)(v35 + 5);
  unk_2540CA330 = v35 + 5;
  v35[2] = xmmword_229562020;
  v35[3] = unk_229562030;
  v35[4] = xmmword_229562040;
  *v35 = xmmword_229562000;
  v35[1] = unk_229562010;
  ou3dod::kOfflineSSDAnchorSizeList = (uint64_t)v35;
  __cxa_atexit((void (*)(void *))_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEED1B8ne180100Ev, &ou3dod::kOfflineSSDAnchorSizeList, &dword_2294C8000);
  v36 = v27;
  *(_QWORD *)&v157 = v36;
  DWORD2(v157) = 1055286886;
  v37 = v28;
  *(_QWORD *)&v158 = v37;
  DWORD2(v158) = 1039516303;
  v38 = v29;
  *(_QWORD *)&v159 = v38;
  DWORD2(v159) = 1045220557;
  v39 = v30;
  *(_QWORD *)&v160 = v39;
  DWORD2(v160) = 1050253722;
  v40 = v31;
  *(_QWORD *)&v161 = v40;
  DWORD2(v161) = 1047904911;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&ou3dod::kOfflineSSD3dConfThresholdMap, (void **)&v157, 5);
  for (n = 64; n != -16; n -= 16)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &ou3dod::kOfflineSSD3dConfThresholdMap, &dword_2294C8000);
  *((_QWORD *)&v157 + 1) = CFSTR("Chair-chair_type-dining");
  LODWORD(v158) = 2;
  *((_QWORD *)&v158 + 1) = CFSTR("Chair-chair_type-swivel");
  LODWORD(v159) = 3;
  *((_QWORD *)&v159 + 1) = CFSTR("Chair-chair_type-other");
  LODWORD(v160) = 4;
  *((_QWORD *)&v160 + 1) = CFSTR("Chair-chair_leg_type-four");
  LODWORD(v161) = 5;
  *((_QWORD *)&v161 + 1) = CFSTR("Chair-chair_leg_type-star");
  LODWORD(v162) = 6;
  *((_QWORD *)&v162 + 1) = CFSTR("Chair-chair_leg_type-other");
  LODWORD(v163) = 7;
  *((_QWORD *)&v163 + 1) = CFSTR("Chair-chair_arm_type-missing");
  LODWORD(v164) = 8;
  *((_QWORD *)&v164 + 1) = CFSTR("Chair-chair_arm_type-existing");
  LODWORD(v165) = 9;
  *((_QWORD *)&v165 + 1) = CFSTR("Chair-chair_back_type-missing");
  LODWORD(v166) = 10;
  *((_QWORD *)&v166 + 1) = CFSTR("Chair-chair_back_type-existing");
  LODWORD(v167) = 11;
  *((_QWORD *)&v167 + 1) = CFSTR("Chair-chair_seat_height-tall_seat");
  LODWORD(v168) = 12;
  *((_QWORD *)&v168 + 1) = CFSTR("Chair-chair_seat_height-normal/low_seat");
  LODWORD(v169) = 13;
  *((_QWORD *)&v169 + 1) = CFSTR("Chair-chair_seat_shape-rectangular");
  LODWORD(v170) = 14;
  *((_QWORD *)&v170 + 1) = CFSTR("Chair-chair_seat_shape-round");
  LODWORD(v171) = 15;
  v172 = CFSTR("Chair-chair_seat_shape-none");
  LODWORD(v173) = 16;
  *((_QWORD *)&v173 + 1) = CFSTR("Sofa-sofa_type-rectangular");
  LODWORD(v174) = 17;
  v175 = CFSTR("Sofa-sofa_type-lShaped");
  LODWORD(v176) = 18;
  *((_QWORD *)&v176 + 1) = CFSTR("Sofa-sofa_type-singleSeat");
  LODWORD(v177) = 19;
  v178 = CFSTR("Sofa-sofa_type-lShapedMain");
  LODWORD(v179) = 20;
  *((_QWORD *)&v179 + 1) = CFSTR("Sofa-sofa_type-lShapedExtension");
  LODWORD(v180) = 21;
  v181 = CFSTR("Sofa-sofa_type-lShapedMiddle");
  LODWORD(v182) = 22;
  *((_QWORD *)&v182 + 1) = CFSTR("Sofa-sofa_type-other");
  LODWORD(v183) = 23;
  v184 = CFSTR("Sofa-sofa_arm_type-missing");
  LODWORD(v185) = 24;
  *((_QWORD *)&v185 + 1) = CFSTR("Sofa-sofa_arm_type-two_arms");
  LODWORD(v186) = 25;
  v187 = CFSTR("Sofa-sofa_arm_type-none");
  LODWORD(v188) = 26;
  *((_QWORD *)&v188 + 1) = CFSTR("Sofa-sofa_back_type-missing");
  LODWORD(v189) = 27;
  v190 = CFSTR("Sofa-sofa_back_type-existing");
  LODWORD(v191) = 28;
  *((_QWORD *)&v191 + 1) = CFSTR("Table-table_type-desk");
  LODWORD(v192) = 29;
  v193 = CFSTR("Table-table_type-coffee");
  LODWORD(v194) = 30;
  *((_QWORD *)&v194 + 1) = CFSTR("Table-table_type-dining");
  LODWORD(v195) = 31;
  v196 = CFSTR("Table-table_type-other");
  LODWORD(v197) = 32;
  *((_QWORD *)&v197 + 1) = CFSTR("Table-table_shape-rectangular");
  LODWORD(v198) = 33;
  v199 = CFSTR("Table-table_shape-lShaped");
  LODWORD(v200) = 34;
  *((_QWORD *)&v200 + 1) = CFSTR("Table-table_shape-circularElliptic");
  v201 = 35;
  v202 = CFSTR("Table-table_shape-other");
  v203 = 36;
  v204 = CFSTR("Table-table_leg_type-two_leg");
  v205 = 37;
  v206 = CFSTR("Table-table_leg_type-four_leg");
  v207 = 38;
  v208 = CFSTR("Table-table_leg_type-none");
  v209 = 39;
  v210 = CFSTR("Table-table_attribute-with_storage");
  v211 = 40;
  v212 = CFSTR("Table-table_attribute-without_storage");
  v213 = 41;
  v214 = CFSTR("Cabinet-cabinet_type-standalone_cabinet");
  v215 = 42;
  v216 = CFSTR("Cabinet-cabinet_type-kitchen_cabinet");
  v217 = 43;
  v218 = CFSTR("Cabinet-cabinet_type-nightstand");
  v219 = 44;
  v220 = CFSTR("Cabinet-cabinet_type-none");
  v221 = 45;
  v222 = CFSTR("Cabinet-cabinet_attribute-no_countertop");
  v223 = 46;
  v224 = CFSTR("Cabinet-cabinet_attribute-with_countertop");
  v225 = 100;
  v226 = CFSTR("Sofa-sofa_arm_type-existing");
  v227 = 101;
  LODWORD(v157) = 0;
  v228 = CFSTR("Storage-storage_type-cabinet");
  v229 = 102;
  v230 = CFSTR("Storage-storage_type-shelf");
  v231 = 103;
  v232 = CFSTR("Chair-chair_type-stool");
  std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::unordered_map((uint64_t)ou3dor::k3DORSupportedAttributeTypeMap, (int *)&v157, 50);
  for (ii = 792; ii != -8; ii -= 16)

  __cxa_atexit((void (*)(void *))std::unordered_map<ou3dor::PartAttributeID,NSString * {__strong}>::~unordered_map[abi:ne180100], ou3dor::k3DORSupportedAttributeTypeMap, &dword_2294C8000);
  RW_VW = xmmword_2295604A0;
  unk_2540C9EC0 = xmmword_2295604D0;
  xmmword_2540C9ED0 = xmmword_2295604B0;
  unk_2540C9EE0 = xmmword_229560490;
  *(simd_float4x4 *)VW_RW = __invert_f4(*(simd_float4x4 *)_PromotedConst_2);
  RC_VC = xmmword_2295604A0;
  unk_2540C9DC0 = xmmword_2295604E0;
  xmmword_2540C9DD0 = xmmword_2295604D0;
  unk_2540C9DE0 = xmmword_229560490;
  *(simd_float4x4 *)VC_RC = __invert_f4(*(simd_float4x4 *)_PromotedConst_372);
  ARKit_VW_RW = xmmword_2295604E0;
  *(_OWORD *)algn_2540C9650 = xmmword_2295604C0;
  xmmword_2540C9660 = xmmword_2295604F0;
  unk_2540C9670 = xmmword_229560490;
  objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.ObjectUnderstandingTests"));
  ObjectUnderstandingTest::Bundle = objc_claimAutoreleasedReturnValue();
  v43 = v36;
  *(_QWORD *)&v157 = v43;
  DWORD2(v157) = 1065185444;
  v44 = v84;
  *(_QWORD *)&v158 = v44;
  DWORD2(v158) = 1064766013;
  v45 = v95;
  *(_QWORD *)&v159 = v45;
  DWORD2(v159) = 1064011039;
  v155 = v98;
  *(_QWORD *)&v160 = v155;
  DWORD2(v160) = 1065017672;
  v151 = v37;
  *(_QWORD *)&v161 = v151;
  DWORD2(v161) = 1065185444;
  v104 = v103;
  *(_QWORD *)&v162 = v104;
  v46 = v40;
  DWORD2(v162) = 1065101558;
  v115 = v114;
  *(_QWORD *)&v163 = v115;
  DWORD2(v163) = 1065185444;
  v47 = v124;
  *(_QWORD *)&v164 = v47;
  DWORD2(v164) = 1065185444;
  v48 = v38;
  v49 = v39;
  v50 = v48;
  *(_QWORD *)&v165 = v48;
  DWORD2(v165) = 1065017672;
  v131 = v130;
  *(_QWORD *)&v166 = v131;
  DWORD2(v166) = 1064178811;
  v136 = v135;
  *(_QWORD *)&v167 = v136;
  DWORD2(v167) = 1065101558;
  v51 = v140;
  *(_QWORD *)&v168 = v51;
  DWORD2(v168) = 1064178811;
  v146 = v145;
  *(_QWORD *)&v169 = v146;
  DWORD2(v169) = 1063675494;
  v141 = v120;
  *(_QWORD *)&v170 = v141;
  DWORD2(v170) = 1065185444;
  v52 = v49;
  v171 = (uint64_t)v52;
  LODWORD(v172) = 1064430469;
  v125 = v109;
  *(_QWORD *)&v173 = v125;
  DWORD2(v173) = 1065185444;
  v53 = v46;
  v174 = v53;
  LODWORD(v175) = 1064514355;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&kFloorplanConfThresholdMap, (void **)&v157, 17);
  v99 = v53;
  v110 = v52;
  for (jj = 256; jj != -16; jj -= 16)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &kFloorplanConfThresholdMap, &dword_2294C8000);
  v55 = v43;
  kFloorplanOU3DObjectTypeLUT = (uint64_t)v55;
  v56 = v44;
  qword_2540C9C08 = (uint64_t)v56;
  v57 = v45;
  qword_2540C9C10 = (uint64_t)v57;
  v58 = v155;
  qword_2540C9C18 = (uint64_t)v58;
  v59 = v151;
  qword_2540C9C20 = (uint64_t)v59;
  v60 = v104;
  qword_2540C9C28 = (uint64_t)v60;
  v61 = v115;
  qword_2540C9C30 = (uint64_t)v61;
  v62 = v47;
  qword_2540C9C38 = (uint64_t)v62;
  v63 = v50;
  qword_2540C9C40 = (uint64_t)v63;
  v105 = v131;
  qword_2540C9C48 = (uint64_t)v105;
  v116 = v136;
  qword_2540C9C50 = (uint64_t)v116;
  v121 = v51;
  qword_2540C9C58 = (uint64_t)v121;
  v132 = v146;
  qword_2540C9C60 = (uint64_t)v132;
  v137 = v141;
  qword_2540C9C68 = (uint64_t)v137;
  v142 = v110;
  qword_2540C9C70 = (uint64_t)v142;
  v147 = v125;
  qword_2540C9C78 = (uint64_t)v147;
  v152 = v99;
  qword_2540C9C80 = (uint64_t)v152;
  v89 = v55;
  *(_QWORD *)&v157 = v89;
  v158 = xmmword_229561E40;
  v64 = v56;
  *(_QWORD *)&v159 = v64;
  v160 = xmmword_229561E50;
  v111 = v57;
  *(_QWORD *)&v161 = v111;
  v162 = xmmword_229561E50;
  v126 = v58;
  *(_QWORD *)&v163 = v126;
  v164 = xmmword_229561E60;
  v100 = v59;
  *(_QWORD *)&v165 = v100;
  v166 = xmmword_229561E70;
  v96 = v60;
  *(_QWORD *)&v167 = v96;
  v168 = xmmword_229561E80;
  v91 = v61;
  *(_QWORD *)&v169 = v91;
  v170 = xmmword_229561E50;
  v65 = v62;
  v171 = (uint64_t)v65;
  v173 = 0u;
  v93 = v63;
  v174 = v93;
  v176 = 0u;
  v66 = v105;
  v177 = v66;
  v179 = xmmword_229561E50;
  v117 = v116;
  v180 = v117;
  v182 = xmmword_229561E50;
  v67 = v121;
  v183 = v67;
  v185 = xmmword_229561E90;
  v133 = v132;
  v186 = v133;
  v188 = 0u;
  v68 = v137;
  v189 = v68;
  v191 = xmmword_229561EA0;
  v69 = v142;
  v192 = v69;
  v194 = xmmword_229561EB0;
  v70 = v147;
  v195 = v70;
  v197 = xmmword_229561E90;
  v71 = v152;
  v198 = v71;
  v200 = 0u;
  _ZNSt3__13mapIU8__strongP8NSStringDv3_f15CompareNSStringNS_9allocatorINS_4pairIU8__strongKS2_S4_EEEEEC2B8ne180100ESt16initializer_listIS9_ERKS5_((uint64_t)&kFloorplanBoxPaddingMap, (void **)&v157, 17);
  v156 = v70;
  for (kk = 512; kk != -32; kk -= 32)

  __cxa_atexit((void (*)(void *))_ZNSt3__13mapIU8__strongP8NSStringDv3_f15CompareNSStringNS_9allocatorINS_4pairIU8__strongKS2_S4_EEEEED1B8ne180100Ev, &kFloorplanBoxPaddingMap, &dword_2294C8000);
  *(_QWORD *)&v157 = v89;
  BYTE8(v157) = 14;
  *(_QWORD *)&v158 = (id)v157;
  BYTE8(v158) = 16;
  *(_QWORD *)&v159 = (id)v158;
  BYTE8(v159) = 30;
  *(_QWORD *)&v160 = (id)v159;
  BYTE8(v160) = 21;
  *(_QWORD *)&v161 = (id)v160;
  BYTE8(v161) = 25;
  v148 = (id)v161;
  *(_QWORD *)&v162 = v148;
  BYTE8(v162) = 19;
  v143 = v64;
  *(_QWORD *)&v163 = v143;
  BYTE8(v163) = 24;
  v73 = v111;
  *(_QWORD *)&v164 = v73;
  BYTE8(v164) = 17;
  v127 = v126;
  *(_QWORD *)&v165 = v127;
  BYTE8(v165) = 25;
  v122 = v100;
  *(_QWORD *)&v166 = v122;
  BYTE8(v166) = 13;
  v112 = v96;
  *(_QWORD *)&v167 = v112;
  BYTE8(v167) = 21;
  v138 = v91;
  *(_QWORD *)&v168 = v138;
  BYTE8(v168) = 26;
  v106 = v65;
  *(_QWORD *)&v169 = v106;
  BYTE8(v169) = 20;
  v101 = v93;
  *(_QWORD *)&v170 = v101;
  BYTE8(v170) = 22;
  v171 = v66;
  LOBYTE(v172) = 27;
  *(_QWORD *)&v173 = (id)v171;
  BYTE8(v173) = 25;
  v74 = (__CFString *)(id)v173;
  v174 = v74;
  LOBYTE(v175) = 28;
  v75 = v117;
  *(_QWORD *)&v176 = v75;
  BYTE8(v176) = 28;
  v76 = v67;
  v177 = v76;
  LOBYTE(v178) = 9;
  v77 = v68;
  *(_QWORD *)&v179 = v77;
  BYTE8(v179) = 15;
  v78 = (__CFString *)v69;
  v180 = v78;
  LOBYTE(v181) = 19;
  v79 = v156;
  *(_QWORD *)&v182 = v79;
  BYTE8(v182) = 32;
  v183 = (__CFString *)v71;
  LOBYTE(v184) = 18;
  v80 = v183;
  *(_QWORD *)&v185 = v80;
  BYTE8(v185) = 15;
  std::multimap<NSString * {__strong},SemanticLabelv5,CompareNSString,std::allocator<std::pair<NSString * const {__strong},SemanticLabelv5>>>::multimap[abi:ne180100]((uint64_t)&kFloorplanClassToSemMap, (uint64_t)&v157, 24);
  for (mm = 368; mm != -16; mm -= 16)

  __cxa_atexit((void (*)(void *))std::multimap<NSString * {__strong},SemanticLabelv5,CompareNSString,std::allocator<std::pair<NSString * const {__strong},SemanticLabelv5>>>::~multimap[abi:ne180100], &kFloorplanClassToSemMap, &dword_2294C8000);
  *(_QWORD *)&v157 = v148;
  DWORD2(v157) = 1051931443;
  *(_QWORD *)&v158 = v143;
  DWORD2(v158) = 1051931443;
  *(_QWORD *)&v159 = v73;
  DWORD2(v159) = 1036831949;
  *(_QWORD *)&v160 = v127;
  DWORD2(v160) = 1036831949;
  *(_QWORD *)&v161 = v122;
  DWORD2(v161) = 1041865114;
  *(_QWORD *)&v162 = v112;
  DWORD2(v162) = 1045220557;
  *(_QWORD *)&v163 = v138;
  DWORD2(v163) = 1041865114;
  *(_QWORD *)&v164 = v106;
  DWORD2(v164) = 1048576000;
  *(_QWORD *)&v165 = v101;
  DWORD2(v165) = 1036831949;
  *(_QWORD *)&v166 = v74;
  DWORD2(v166) = 1041865114;
  *(_QWORD *)&v167 = v75;
  DWORD2(v167) = 981668463;
  *(_QWORD *)&v168 = v76;
  DWORD2(v168) = 1048576000;
  *(_QWORD *)&v169 = v133;
  DWORD2(v169) = 1036831949;
  *(_QWORD *)&v170 = v77;
  DWORD2(v170) = 1041865114;
  v171 = v78;
  LODWORD(v172) = 1025758986;
  *(_QWORD *)&v173 = v79;
  DWORD2(v173) = 1048576000;
  v174 = v80;
  LODWORD(v175) = 1041865114;
  std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::map[abi:ne180100]((uint64_t)&kFloorplanBoxSemThresholdMap, (void **)&v157, 17);
  for (nn = 256; nn != -16; nn -= 16)

  __cxa_atexit((void (*)(void *))std::map<NSString * {__strong},float,CompareNSString,std::allocator<std::pair<NSString * const {__strong},float>>>::~map[abi:ne180100], &kFloorplanBoxSemThresholdMap, &dword_2294C8000);
  objc_autoreleasePoolPop(context);
}

void sub_229541E64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 256; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

uint64_t circularMean(float **a1, char a2)
{
  float *v2;
  float *v3;
  float v5;
  float v6;
  float *v7;
  double v8;
  float v9;
  __float2 v10;
  float v11;
  uint64_t v12;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    v12 = 0;
    v11 = 0.0;
  }
  else
  {
    v5 = 0.0;
    v6 = 0.0;
    v7 = *a1;
    do
    {
      v8 = *v7;
      if ((a2 & 1) == 0)
        v8 = v8 * 3.14159265 / 180.0;
      v9 = v8;
      v10 = __sincosf_stret(v9);
      v5 = v5 + v10.__sinval;
      v6 = v6 + v10.__cosval;
      ++v7;
    }
    while (v7 != v3);
    v11 = atan2f(v5 / (float)(unint64_t)(v3 - v2), v6 / (float)(unint64_t)(v3 - v2));
    if ((a2 & 1) == 0)
      v11 = (float)(v11 * 180.0) / 3.14159265;
    v12 = 0x100000000;
  }
  return v12 | LODWORD(v11);
}

uint64_t FindLinesIntersect@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  v6 = a3;
  v6.i32[2] = 1.0;
  v7 = a4;
  v7.i32[2] = 1.0;
  v8 = a5;
  v8.i32[2] = 1.0;
  v9 = a6;
  v9.i32[2] = 1.0;
  v10 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), vnegq_f32(v6)), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL));
  v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL);
  v12 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), vnegq_f32(v8)), v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL));
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL);
  v14 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), vnegq_f32(v11)), v13, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL));
  if (fabsf(*(float *)&v14.i32[1]) < 1.0e-10)
    goto LABEL_35;
  v15 = vextq_s8(v14, v14, 8uLL);
  v15.i32[1] = v14.i32[0];
  *(float32x2_t *)v15.i8 = vdiv_f32(*(float32x2_t *)v15.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1));
  v16 = v15;
  v16.i32[2] = 1.0;
  if ((_DWORD)result)
    goto LABEL_3;
  v18 = (vmovn_s32(vcgtq_f32(a3, a4)).u8[0] & 1) != 0 ? a4.f32[0] : a3.f32[0];
  if (*(float *)v15.i32 < v18)
    goto LABEL_35;
  v19 = (vmovn_s32(vcgtq_f32(a5, a6)).u8[0] & 1) != 0 ? a6.f32[0] : a5.f32[0];
  if (*(float *)v15.i32 < v19)
    goto LABEL_35;
  v20 = (vmovn_s32(vcgtq_f32(a4, a3)).u8[0] & 1) != 0 ? a4.f32[0] : a3.f32[0];
  if (*(float *)v15.i32 > v20)
    goto LABEL_35;
  v21 = (vmovn_s32(vcgtq_f32(a6, a5)).u8[0] & 1) != 0 ? a6.f32[0] : a5.f32[0];
  if (*(float *)v15.i32 > v21)
    goto LABEL_35;
  a4.i32[0] = a4.i32[1];
  v22 = a4.f32[1] >= a3.f32[1] ? a3.f32[1] : a4.f32[1];
  if (*(float *)&v15.i32[1] < v22)
    goto LABEL_35;
  *(float *)v15.i32 = a6.f32[1] >= a5.f32[1] ? a5.f32[1] : a6.f32[1];
  if (*(float *)&v15.i32[1] < *(float *)v15.i32)
    goto LABEL_35;
  if (a3.f32[1] >= a4.f32[1])
    a4.f32[0] = a3.f32[1];
  if (*(float *)&v15.i32[1] <= a4.f32[0]
    && (a5.f32[1] >= a6.f32[1] ? (v23 = a5.f32[1]) : (v23 = a6.f32[1]), *(float *)&v15.i32[1] <= v23))
  {
LABEL_3:
    *a2 = v16;
    v17 = 1;
  }
  else
  {
LABEL_35:
    v17 = 0;
    a2->i8[0] = 0;
  }
  a2[1].i8[0] = v17;
  return result;
}

void FindSegmentInteractWithLine(int8x16_t *a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, int32x4_t a5@<Q3>)
{
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float v14;
  float v15;
  float v16;

  v5 = a2;
  v5.i32[2] = 1.0;
  v6 = a3;
  v6.i32[2] = 1.0;
  a4.i32[2] = 1.0;
  a5.i32[2] = 1.0;
  v7 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), vnegq_f32(v5)), v6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a5, a5), (int8x16_t)a5, 0xCuLL), vnegq_f32(a4)), (float32x4_t)a5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a4, (int32x4_t)a4), (int8x16_t)a4, 0xCuLL));
  v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL);
  v11 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), vnegq_f32(v8)), v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL));
  if (fabsf(*(float *)&v11.i32[1]) < 1.0e-10)
    goto LABEL_17;
  v12 = vextq_s8(v11, v11, 8uLL);
  v12.i32[1] = v11.i32[0];
  *(float32x2_t *)v12.i8 = vdiv_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1));
  v13 = v12;
  v13.i32[2] = 1.0;
  v14 = (vmovn_s32(vcgtq_f32(a2, a3)).u8[0] & 1) != 0 ? a3.f32[0] : a2.f32[0];
  if (*(float *)v12.i32 >= v14)
  {
    v15 = (vmovn_s32(vcgtq_f32(a3, a2)).u8[0] & 1) != 0 ? a3.f32[0] : a2.f32[0];
    if (*(float *)v12.i32 <= v15)
      goto LABEL_18;
  }
  a2.i32[0] = a2.i32[1];
  v16 = a3.f32[1] >= a2.f32[1] ? a2.f32[1] : a3.f32[1];
  if (*(float *)&v12.i32[1] < v16)
    goto LABEL_17;
  if (a2.f32[1] < a3.f32[1])
    a2.f32[0] = a3.f32[1];
  if (*(float *)&v12.i32[1] <= a2.f32[0])
  {
LABEL_18:
    *a1 = v13;
    a1[1].i8[0] = 1;
  }
  else
  {
LABEL_17:
    a1->i8[0] = 0;
    a1[1].i8[0] = 0;
  }
}

void OUVizTool::OUVizTool(OUVizTool *this)
{
  char *v2;
  void *v3;
  int v4;
  void *v5;
  int v6;
  int v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  __int128 v14;
  uint64_t v15;

  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v2 = (char *)this + 32;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLForKey:", CFSTR("com.apple.objectunderstanding.room_dev_dump"));

  objc_msgSend(MEMORY[0x24BDBCF50], "standardUserDefaults");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "BOOLForKey:", CFSTR("com.apple.objectunderstanding.room_clt_dump"));

  if (((v4 | v6) & 1) != 0)
  {
    if (v4)
      v7 = 1;
    else
      v7 = 2;
    *(_DWORD *)this = v7;
    v8 = objc_alloc_init(MEMORY[0x24BDBF648]);
    v9 = (void *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v8;

    *((_DWORD *)this + 1) = 0;
    v10 = objc_alloc_init(MEMORY[0x24BDD1500]);
    objc_msgSend(v10, "setDateFormat:", CFSTR("MM_dd_yyyy_HH_mm_ss_SSS"));
    objc_msgSend(MEMORY[0x24BDBCE60], "date");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stringFromDate:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = objc_retainAutorelease(v12);
    std::string::basic_string[abi:ne180100]<0>(&v14, (char *)objc_msgSend(v13, "UTF8String"));
    if (*((char *)this + 55) < 0)
      operator delete(*(void **)v2);
    *(_OWORD *)v2 = v14;
    *((_QWORD *)v2 + 2) = v15;
    OUVizTool::MaybeReset(this);

  }
}

void sub_229542504(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 127) < 0)
    operator delete(*(void **)(v1 + 104));
  if (*(char *)(v1 + 103) < 0)
    operator delete(*(void **)(v1 + 80));
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v4);
  _Unwind_Resume(a1);
}

void OUVizTool::MaybeReset(OUVizTool *this)
{
  int v2;
  const std::string::value_type *v3;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  char v7;
  std::string::size_type v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  char v14;
  const void **v15;
  std::string *p_p;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  std::string __p;
  std::string v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)this)
    return;
  if (*(_DWORD *)this == 1)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&__p, "/tmp/viz_tool/");
    v2 = *((char *)this + 55);
    if (v2 >= 0)
      v3 = (char *)this + 32;
    else
      v3 = (const std::string::value_type *)*((_QWORD *)this + 4);
    if (v2 >= 0)
      v4 = *((unsigned __int8 *)this + 55);
    else
      v4 = *((_QWORD *)this + 5);
    v5 = std::string::append(&__p, v3, v4);
    v6 = v5->__r_.__value_.__r.__words[0];
    v25.__r_.__value_.__r.__words[0] = v5->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
    v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)this + 79) < 0)
      operator delete(*((void **)this + 7));
    v8 = v25.__r_.__value_.__r.__words[0];
    *((_QWORD *)this + 7) = v6;
    *((_QWORD *)this + 8) = v8;
    *(_QWORD *)((char *)this + 71) = *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 7);
    *((_BYTE *)this + 79) = v7;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    OUVizTool::SetOriginalAndOnlineFolder(this);
    return;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&__p, "/tmp/cur_scene_id.txt");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", &__p, objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithContentsOfFile:encoding:error:", v9, 4, 0);
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v10, "UTF8String"));
  if (!v10)
    goto LABEL_32;
  v11 = *((unsigned __int8 *)this + 31);
  if ((v11 & 0x80u) == 0)
    v12 = *((unsigned __int8 *)this + 31);
  else
    v12 = *((_QWORD *)this + 2);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (v12 != size)
    goto LABEL_32;
  v15 = (const void **)((char *)this + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*v15, p_p, *((_QWORD *)this + 2)))
    {
LABEL_32:
      std::string::operator=((std::string *)((char *)this + 8), &__p);
      *((_DWORD *)this + 1) = 0;
      *((_BYTE *)&v25.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&v25, "/tmp/viz_tool/");
      v17 = *((char *)this + 31);
      if (v17 >= 0)
        v18 = (char *)this + 8;
      else
        v18 = (const std::string::value_type *)*((_QWORD *)this + 1);
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)this + 31);
      else
        v19 = *((_QWORD *)this + 2);
      v20 = std::string::append(&v25, v18, v19);
      v21 = v20->__r_.__value_.__r.__words[0];
      v26[0] = v20->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)this + 79) < 0)
        operator delete(*((void **)this + 7));
      v23 = v26[0];
      *((_QWORD *)this + 7) = v21;
      *((_QWORD *)this + 8) = v23;
      *(_QWORD *)((char *)this + 71) = *(_QWORD *)((char *)v26 + 7);
      *((_BYTE *)this + 79) = v22;
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      OUVizTool::SetOriginalAndOnlineFolder(this);
      v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  else if (*((_BYTE *)this + 31))
  {
    while (*(unsigned __int8 *)v15 == p_p->__r_.__value_.__s.__data_[0])
    {
      v15 = (const void **)((char *)v15 + 1);
      p_p = (std::string *)((char *)p_p + 1);
      if (!--v11)
        goto LABEL_43;
    }
    goto LABEL_32;
  }
LABEL_43:
  if (v14 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

}

void sub_229542890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);

  _Unwind_Resume(a1);
}

void OUVizTool::SetOriginalAndOnlineFolder(OUVizTool *this)
{
  char *v2;
  size_t v3;
  __int128 *v4;
  const void *v5;
  void **v6;
  size_t v7;
  __int128 *v8;
  uint64_t v9;
  const void *v10;
  void **v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v2 = (char *)this + 56;
  if (*((char *)this + 79) >= 0)
    v3 = *((unsigned __int8 *)this + 79);
  else
    v3 = *((_QWORD *)this + 8);
  v4 = &v13;
  std::string::basic_string[abi:ne180100]((uint64_t)&v13, v3 + 10);
  if (v14 < 0)
    v4 = (__int128 *)v13;
  if (v3)
  {
    if (*((char *)this + 79) >= 0)
      v5 = v2;
    else
      v5 = (const void *)*((_QWORD *)this + 7);
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, "/original/");
  v6 = (void **)((char *)this + 80);
  if (*((char *)this + 103) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v13;
  *((_QWORD *)this + 12) = v14;
  if (*((char *)this + 79) >= 0)
    v7 = *((unsigned __int8 *)this + 79);
  else
    v7 = *((_QWORD *)this + 8);
  v8 = &v13;
  v9 = std::string::basic_string[abi:ne180100]((uint64_t)&v13, v7 + 8);
  if (v14 < 0)
    v8 = (__int128 *)v13;
  if (v7)
  {
    if (*((char *)this + 79) >= 0)
      v10 = v2;
    else
      v10 = (const void *)*((_QWORD *)this + 7);
    v9 = (uint64_t)memmove(v8, v10, v7);
  }
  strcpy((char *)v8 + v7, "/online/");
  v11 = (void **)((char *)this + 104);
  if (*((char *)this + 127) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = v13;
  *((_QWORD *)this + 15) = v14;
  OUVizTool::CreateDirectory(v9, (uint64_t *)this + 10);
  OUVizTool::CreateDirectory(v12, (uint64_t *)this + 13);
}

void OUVizTool::CreateDirectory(uint64_t a1, uint64_t *a2)
{
  void *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  id v9;

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x24BDD17C8];
  v4 = *((char *)a2 + 23);
  v5 = (uint64_t *)*a2;
  v6 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v4 >= 0)
    v7 = a2;
  else
    v7 = v5;
  objc_msgSend(v3, "stringWithCString:encoding:", v7, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v8, 1, 0, 0);

}

void sub_229542B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void OUVizTool::SaveObjects(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  size_t v8;
  std::string *v9;
  const void *v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  void *v24;
  int v25;
  void **v26;
  uint64_t v27;
  void **v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  float v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  void *__p[2];
  std::string::size_type v61;
  const __CFString *v62;
  void *v63;
  const __CFString *v64;
  void *v65;
  const __CFString *v66;
  void *v67;
  _QWORD v68[4];
  _QWORD v69[4];
  _QWORD v70[3];
  _QWORD v71[5];

  v71[3] = *MEMORY[0x24BDAC8D0];
  v54 = a3;
  v7 = a4;
  if (*(_DWORD *)a1 == 1)
  {
    v53 = v7;
    OUVizTool::MaybeReset((OUVizTool *)a1);
    if (*(char *)(a1 + 79) >= 0)
      v8 = *(unsigned __int8 *)(a1 + 79);
    else
      v8 = *(_QWORD *)(a1 + 64);
    std::string::basic_string[abi:ne180100]((uint64_t)&v56, v8 + 1);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v56;
    else
      v9 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (*(char *)(a1 + 79) >= 0)
        v10 = (const void *)(a1 + 56);
      else
        v10 = *(const void **)(a1 + 56);
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 47;
    std::to_string(&v55, *(_DWORD *)(a1 + 4));
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v55;
    else
      v11 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    else
      size = v55.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v56, (const std::string::value_type *)v11, size);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v57, "/", 1uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = *(char *)(a2 + 23);
    if (v17 >= 0)
      v18 = (const std::string::value_type *)a2;
    else
      v18 = *(const std::string::value_type **)a2;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a2 + 23);
    else
      v19 = *(_QWORD *)(a2 + 8);
    v20 = std::string::append(&v58, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v59, ".json", 5uLL);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v61 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    v24 = (void *)MEMORY[0x24BDD17C8];
    v25 = SHIBYTE(v61);
    v26 = (void **)__p[0];
    v27 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
    if (v25 >= 0)
      v28 = __p;
    else
      v28 = v26;
    objc_msgSend(v24, "stringWithCString:encoding:", v28, v27);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v54, "count");
    v52 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", objc_msgSend(v54, "count"));
    if (v29 >= 1)
    {
      v30 = 0;
      v31 = v29;
      do
      {
        objc_msgSend(v54, "objectAtIndexedSubscript:", v30);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v32, "hasBoxesDict:", v53) & 1) != 0)
        {
          objc_msgSend(v32, "boxesDict");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "objectForKeyedSubscript:", v53);
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          v35 = (void *)MEMORY[0x24BDD17C8];
          objc_msgSend(v32, "confidence");
          objc_msgSend(v35, "stringWithFormat:", CFSTR("%.03f"), v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v70[0] = CFSTR("uuid");
          objc_msgSend(v32, "identifier");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "UUIDString");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v71[0] = v39;
          v71[1] = v37;
          v70[1] = CFSTR("confidence");
          v70[2] = CFSTR("parts");
          objc_msgSend(v32, "parts");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "allKeys");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v71[2] = v41;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v71, v70, 3);
          v42 = (void *)objc_claimAutoreleasedReturnValue();

          v68[0] = CFSTR("id");
          objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v30);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v69[0] = v43;
          v69[1] = v34;
          v68[1] = CFSTR("bbox");
          v68[2] = CFSTR("type");
          objc_msgSend(v54, "objectAtIndexedSubscript:", v30);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "type");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          v68[3] = CFSTR("attributes");
          v69[2] = v45;
          v69[3] = v42;
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v69, v68, 4);
          v46 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v52, "addObject:", v46);
        }

        ++v30;
      }
      while (v31 != v30);
    }
    v66 = CFSTR("bbox");
    v67 = v52;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v67, &v66, 1);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v64 = CFSTR("data");
    v65 = v47;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = CFSTR("data");
    v63 = v48;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v63, &v62, 1);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD1608], "dataWithJSONObject:options:error:", v49, 1, 0);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "writeToFile:atomically:", v51, 1);

    if (SHIBYTE(v61) < 0)
      operator delete(__p[0]);
    v7 = v53;
  }

}

void sub_229543088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v53;
  void *v54;
  void *v55;
  void *v56;

  if (a53 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void OUVizTool::SaveBoxes(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id v5;

  rawBoxesToObjects(a3, 1u);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  OUVizTool::SaveObjects(a1, a2, v5, CFSTR("rawdetection"));

}

void sub_22954328C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void OUVizTool::SaveARFrameImage(OUVizTool *this, __CVBuffer *a2)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  if (*(_DWORD *)this)
  {
    std::to_string(&v11, *((_DWORD *)this + 1));
    v4 = *((char *)this + 103);
    if (v4 >= 0)
      v5 = (char *)this + 80;
    else
      v5 = (const std::string::value_type *)*((_QWORD *)this + 10);
    if (v4 >= 0)
      v6 = *((unsigned __int8 *)this + 103);
    else
      v6 = *((_QWORD *)this + 11);
    v7 = std::string::insert(&v11, 0, v5, v6);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v12, ".png", 4uLL);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    OUVizTool::SaveCVPixelBufferInternal((void **)this, (uint64_t *)&v13, (uint64_t)a2);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)v13);
  }
}

void sub_22954338C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  _Unwind_Resume(exception_object);
}

void OUVizTool::SaveCVPixelBufferInternal(void **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  CGColorSpaceRef DeviceRGB;

  if (*(_DWORD *)a1)
  {
    OUVizTool::MaybeReset((OUVizTool *)a1);
    v6 = *MEMORY[0x24BDBF868];
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
    utils::WriteToTiff(a3, a2, v6, (uint64_t)DeviceRGB, a1[16]);
  }
}

void OUVizTool::SaveObjectImageCrop(OUVizTool *this, OU3DObject *a2, __CVBuffer *a3)
{
  OU3DObject *v5;
  OU3DObject *v6;
  void *v7;
  id v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  id v18;
  const char *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  size_t v24;
  std::string *v25;
  __int128 *v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string __p;
  std::string v34;
  std::string v35;
  std::string v36;
  __int128 v37;
  int64_t v38;
  std::string __str;

  v5 = a2;
  v6 = v5;
  if (*(_DWORD *)this)
  {
    -[OU3DObject identifier](v5, "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "UUIDString");
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v8, "UTF8String"));

    std::string::basic_string(&v34, &__str, 0, 8uLL, (std::allocator<char> *)&__p);
    v9 = *((char *)this + 127);
    if (v9 >= 0)
      v10 = (char *)this + 104;
    else
      v10 = (const std::string::value_type *)*((_QWORD *)this + 13);
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)this + 127);
    else
      v11 = *((_QWORD *)this + 14);
    v12 = std::string::insert(&v34, 0, v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "_");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v35, (const std::string::value_type *)p_p, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    -[OU3DObject type](v6, "type");
    v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v19 = (const char *)objc_msgSend(v18, "UTF8String");
    v20 = strlen(v19);
    v21 = std::string::append(&v36, v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v38 = v21->__r_.__value_.__r.__words[2];
    v37 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;

    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    OUVizTool::CreateDirectory(v23, (uint64_t *)&v37);
    if (v38 >= 0)
      v24 = HIBYTE(v38);
    else
      v24 = *((_QWORD *)&v37 + 1);
    v25 = &v34;
    std::string::basic_string[abi:ne180100]((uint64_t)&v34, v24 + 1);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if (v24)
    {
      if (v38 >= 0)
        v26 = &v37;
      else
        v26 = (__int128 *)v37;
      memmove(v25, v26, v24);
    }
    *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 47;
    std::to_string(&__p, *((_DWORD *)this + 1));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &__p;
    else
      v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v28 = __p.__r_.__value_.__l.__size_;
    v29 = std::string::append(&v34, (const std::string::value_type *)v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v35, "_cropped.png", 0xCuLL);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    OUVizTool::SaveCVPixelBufferInternal((void **)this, (uint64_t *)&v36, (uint64_t)a3);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38) < 0)
      operator delete((void *)v37);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }

}

void sub_229543748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  uint64_t v34;

  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  if (*(char *)(v34 - 49) < 0)
    operator delete(*(void **)(v34 - 72));

  _Unwind_Resume(a1);
}

void OUVizTool::SavePointCloudInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v4;
  FILE *v5;
  FILE *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  const char *v13;
  const char *v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  uint64_t v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  const char *p_p;
  float v34[6];
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int128 __p;
  int64_t v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  char v55;
  std::string v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  std::string v62;

  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  v5 = fopen(v4, "w");
  if (v5)
  {
    v6 = v5;
    v7 = *(const void **)a3;
    v8 = *(_QWORD *)(a3 + 8);
    v9 = v8 - *(_QWORD *)a3;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v59, v7, v8, v9 >> 4);
    v57 = 0uLL;
    v58 = 0;
    memset(&v56, 0, sizeof(v56));
    if ((unint64_t)v9 < 0xC3501)
    {
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8ne180100IPS1_S6_EEvT_T0_l((char *)&v57, v59, (uint64_t)v60, (v60 - v59) >> 4);
      std::to_string(&v62, v9 >> 4);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      v56 = v62;
    }
    else
    {
      utils::Resample((utils *)(v9 >> 4), 0xC350uLL, (void **)&v53);
      v52 = 0;
      v51 = 0uLL;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v51, (v54 - v53) >> 3);
      v10 = v53;
      v11 = v54;
      memset(&v62, 0, sizeof(v62));
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v62, v59, (uint64_t)v60, (v60 - v59) >> 4);
      v47[0] = &v51;
      while (v10 != v11)
      {
        *(_OWORD *)v49 = *(_OWORD *)(v62.__r_.__value_.__r.__words[0] + 16 * *v10);
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_((void ***)v47, v49);
        ++v10;
      }
      if (v62.__r_.__value_.__r.__words[0])
      {
        v62.__r_.__value_.__l.__size_ = v62.__r_.__value_.__r.__words[0];
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if ((_QWORD)v57)
      {
        *((_QWORD *)&v57 + 1) = v57;
        operator delete((void *)v57);
      }
      v57 = v51;
      v58 = v52;
      std::to_string(&v62, 0xC350uLL);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      v56 = v62;
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v62, "ply");
    std::string::basic_string[abi:ne180100]<0>(&v53, "format ascii 1.0");
    std::operator+<char>();
    std::string::basic_string[abi:ne180100]<0>(v49, "property float x");
    std::string::basic_string[abi:ne180100]<0>(v47, "property float y");
    std::string::basic_string[abi:ne180100]<0>(v45, "property float z");
    std::string::basic_string[abi:ne180100]<0>(v43, "end_header");
    v12 = &v62;
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)v62.__r_.__value_.__r.__words[0];
    fprintf(v6, "%s\n", (const char *)v12);
    v13 = (const char *)&v53;
    if (v55 < 0)
      v13 = v53;
    fprintf(v6, "%s\n", v13);
    v14 = (const char *)&v51;
    if (v52 < 0)
      v14 = (const char *)v51;
    fprintf(v6, "%s\n", v14);
    v15 = v49;
    if (v50 < 0)
      v15 = (void **)v49[0];
    fprintf(v6, "%s\n", (const char *)v15);
    v16 = v47;
    if (v48 < 0)
      v16 = (void **)v47[0];
    fprintf(v6, "%s\n", (const char *)v16);
    v17 = v45;
    if (v46 < 0)
      v17 = (void **)v45[0];
    fprintf(v6, "%s\n", (const char *)v17);
    if (v44 >= 0)
      v18 = v43;
    else
      v18 = (void **)v43[0];
    fprintf(v6, "%s\n", (const char *)v18);
    v19 = v57;
    if (*((_QWORD *)&v57 + 1) != (_QWORD)v57)
    {
      v20 = 0;
      do
      {
        *(_OWORD *)v34 = *(_OWORD *)(v19 + 16 * v20);
        std::to_string(&v37, v34[0]);
        v21 = std::string::append(&v37, " ", 1uLL);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v36, v34[1]);
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v36;
        else
          v23 = (std::string *)v36.__r_.__value_.__r.__words[0];
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        else
          size = v36.__r_.__value_.__l.__size_;
        v25 = std::string::append(&v38, (const std::string::value_type *)v23, size);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v27 = std::string::append(&v39, " ", 1uLL);
        v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v40.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v35, v34[2]);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v35;
        else
          v29 = (std::string *)v35.__r_.__value_.__r.__words[0];
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        else
          v30 = v35.__r_.__value_.__l.__size_;
        v31 = std::string::append(&v40, (const std::string::value_type *)v29, v30);
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v42 = v31->__r_.__value_.__r.__words[2];
        __p = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if (v42 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        fprintf(v6, "%s\n", p_p);
        if (SHIBYTE(v42) < 0)
          operator delete((void *)__p);
        ++v20;
        v19 = v57;
      }
      while (v20 < (uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 4);
    }
    fclose(v6);
    if (v44 < 0)
      operator delete(v43[0]);
    if (v46 < 0)
      operator delete(v45[0]);
    if (v48 < 0)
      operator delete(v47[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    if (SHIBYTE(v52) < 0)
      operator delete((void *)v51);
    if (v55 < 0)
      operator delete(v53);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if ((_QWORD)v57)
    {
      *((_QWORD *)&v57 + 1) = v57;
      operator delete((void *)v57);
    }
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
  }
}

void sub_229543E24(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(_QWORD *)(v1 - 208) = v3;
    operator delete(v3);
  }
  if (*(char *)(v1 - 169) < 0)
    operator delete(*(void **)(v1 - 192));
  v4 = *(void **)(v1 - 160);
  if (v4)
  {
    *(_QWORD *)(v1 - 152) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 128);
  if (v5)
  {
    *(_QWORD *)(v1 - 120) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void OUVizTool::SaveObjectPointCloud(OUVizTool *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  const std::string::value_type *v8;
  const std::string::value_type *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  id v20;
  const char *v21;
  std::string::size_type v22;
  std::string *v23;
  int v24;
  std::string::size_type size;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  void *__p[2];
  unsigned __int8 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string __str;

  v5 = a2;
  if (!*(_DWORD *)a1)
    goto LABEL_38;
  OUVizTool::MaybeReset(a1);
  objc_msgSend(v5, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v7, "UTF8String"));

  std::string::basic_string(&v32, &__str, 0, 8uLL, (std::allocator<char> *)__p);
  v10 = (const std::string::value_type *)*((_QWORD *)a1 + 13);
  v9 = (char *)a1 + 104;
  v8 = v10;
  v11 = v9[23];
  if (v11 >= 0)
    v12 = v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)v9 + 23);
  else
    v13 = *((_QWORD *)v9 + 1);
  v14 = std::string::insert(&v32, 0, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  if ((v31 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v31 & 0x80u) == 0)
    v17 = v31;
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append(&v33, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  objc_msgSend(v5, "type");
  v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v21 = (const char *)objc_msgSend(v20, "UTF8String");
  v22 = strlen(v21);
  v23 = std::string::append(&v34, v21, v22);
  v35 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;

  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if ((char)v31 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v24 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    size = v35.__r_.__value_.__l.__size_;
  v26 = &v33;
  std::string::basic_string[abi:ne180100]((uint64_t)&v33, size + 1);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if (size)
  {
    if (v24 >= 0)
      v27 = &v35;
    else
      v27 = (std::string *)v35.__r_.__value_.__r.__words[0];
    memmove(v26, v27, size);
  }
  *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + size) = 47;
  v28 = std::string::append(&v33, "obj.ply", 7uLL);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  OUVizTool::SavePointCloudInternal((uint64_t)v28, (uint64_t)&v34, a3);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_36;
  }
  else if ((v24 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
LABEL_36:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_38:

}

void sub_229544280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (a33 < 0)
    operator delete(__p);
  if (v34 < 0)
    operator delete(*(void **)(v35 - 96));
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));

  _Unwind_Resume(a1);
}

void OUVizTool::StartNewFrame(OUVizTool *this)
{
  size_t v2;
  std::string *v3;
  char *v4;
  std::string *p_p;
  std::string::size_type size;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string __p;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string::size_type v15;

  if (*(_DWORD *)this)
  {
    ++*((_DWORD *)this + 1);
    OUVizTool::MaybeReset(this);
    if (*(_DWORD *)this == 1)
    {
      if (*((char *)this + 79) >= 0)
        v2 = *((unsigned __int8 *)this + 79);
      else
        v2 = *((_QWORD *)this + 8);
      v3 = &v12;
      std::string::basic_string[abi:ne180100]((uint64_t)&v12, v2 + 1);
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v3 = (std::string *)v12.__r_.__value_.__r.__words[0];
      if (v2)
      {
        if (*((char *)this + 79) >= 0)
          v4 = (char *)this + 56;
        else
          v4 = (char *)*((_QWORD *)this + 7);
        memmove(v3, v4, v2);
      }
      *(_WORD *)((char *)&v3->__r_.__value_.__l.__data_ + v2) = 47;
      std::to_string(&__p, *((_DWORD *)this + 1));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v7 = std::string::append(&v12, (const std::string::value_type *)p_p, size);
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v13, "/", 1uLL);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v15 = v9->__r_.__value_.__r.__words[2];
      v14 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      OUVizTool::CreateDirectory((uint64_t)v9, (uint64_t *)&v14);
      if (SHIBYTE(v15) < 0)
        operator delete((void *)v14);
    }
  }
}

void sub_2295444DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(exception_object);
}

void sub_2295445F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229544B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_229544DBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void sub_2295450F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id OUPointCloudToDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  void *__p;
  _BYTE *v39;
  void *v40;
  _BYTE *v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;

  v1 = a1;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v1, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("count"));

  v4 = (const void *)objc_msgSend(v1, "points");
  v5 = objc_msgSend(v1, "points");
  v6 = objc_msgSend(v1, "count");
  v45 = 0;
  v46 = 0;
  v47 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPKS1_S7_EEvT_T0_m(&v45, v4, v5 + 16 * v6, (v5 + 16 * v6 - (uint64_t)v4) >> 4);
  std::vector<float>::vector(&v43, ((v46 - (_BYTE *)v45) >> 3) + ((v46 - (_BYTE *)v45) >> 4));
  v7 = (char *)v45;
  if (v46 != v45)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (char *)v43 + v8;
      v12 = &v7[v9];
      v13 = *(_QWORD *)v12;
      *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
      *(_QWORD *)v11 = v13;
      ++v10;
      v7 = (char *)v45;
      v9 += 16;
      v8 += 12;
    }
    while (v10 < (v46 - (_BYTE *)v45) >> 4);
  }
  if (v44 == v43)
  {
    v14 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v43, v44 - (_BYTE *)v43);
    v14 = (id)objc_claimAutoreleasedReturnValue();
  }
  v15 = v14;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, CFSTR("points"));

  v16 = objc_msgSend(v1, "semanticLabels");
  v17 = objc_msgSend(v1, "count");
  if (v16 && v17)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v16, 4 * v17);
    v18 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v18 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v19 = v18;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v18, CFSTR("semanticLabels"));

  v20 = objc_msgSend(v1, "semanticVotes");
  v21 = objc_msgSend(v1, "count");
  if (v20 && v21)
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v20, 8 * v21);
    v22 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v22 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  v23 = v22;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v22, CFSTR("semanticVotes"));

  v24 = (const void *)objc_msgSend(v1, "colors");
  v25 = objc_msgSend(v1, "colors");
  v26 = objc_msgSend(v1, "count");
  v40 = 0;
  v41 = 0;
  v42 = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(&v40, v24, v25 + 16 * v26, (v25 + 16 * v26 - (uint64_t)v24) >> 4);
  std::vector<float>::vector(&__p, ((v41 - (_BYTE *)v40) >> 3) + ((v41 - (_BYTE *)v40) >> 4));
  v27 = (char *)v40;
  if (v41 != v40)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    do
    {
      v31 = (char *)__p + v28;
      v32 = &v27[v29];
      v33 = *(_QWORD *)v32;
      *((_DWORD *)v31 + 2) = *((_DWORD *)v32 + 2);
      *(_QWORD *)v31 = v33;
      ++v30;
      v27 = (char *)v40;
      v29 += 16;
      v28 += 12;
    }
    while (v30 < (v41 - (_BYTE *)v40) >> 4);
  }
  if (v39 == __p)
  {
    v34 = objc_alloc_init(MEMORY[0x24BDBCE50]);
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", __p, v39 - (_BYTE *)__p);
    v34 = (id)objc_claimAutoreleasedReturnValue();
  }
  v35 = v34;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v34, CFSTR("colors"));

  v36 = v2;
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }

  return v36;
}

void sub_22954553C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v22 = v21;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);

  _Unwind_Resume(a1);
}

OUPointCloud *OUPointCloudFromDictionary(void *a1)
{
  id v1;
  OUPointCloud *v2;

  v1 = a1;
  v2 = -[OUPointCloud initWithDictionary:]([OUPointCloud alloc], "initWithDictionary:", v1);

  return v2;
}

void sub_229545638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv4_hNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 2);
    if (v9 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 1 > v9)
      v9 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v10];
    v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    v16 = &v14[4 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void sub_229545874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2295459DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_229545A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_229545B90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_229545C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_229545CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __CVBuffer *v3;
  size_t Width;
  size_t Height;
  NSObject *v6;
  unint64_t v7;
  __int16 *BaseAddress;
  _DWORD *v9;
  __int16 v10;
  __int128 v17;
  uint64_t v18;

  if (*(_BYTE *)(result + 232))
  {
    v3 = *(__CVBuffer **)(*(_QWORD *)(result + 160) + 40);
    Width = CVPixelBufferGetWidth(v3);
    Height = CVPixelBufferGetHeight(v3);
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();
    v7 = Height * Width;

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();

    CVPixelBufferLockBaseAddress(v3, 1uLL);
    BaseAddress = (__int16 *)CVPixelBufferGetBaseAddress(v3);
    std::vector<float>::vector(&v17, v7);
    if (v7)
    {
      v9 = (_DWORD *)v17;
      do
      {
        v10 = *BaseAddress++;
        _H0 = v10;
        __asm { FCVT            S0, H0 }
        *v9++ = _S0;
        --v7;
      }
      while (v7);
    }
    result = CVPixelBufferUnlockBaseAddress(v3, 1uLL);
    *(_OWORD *)a2 = v17;
    *(_QWORD *)(a2 + 16) = v18;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

{
  return __ZNK6ou3dor22OU3DOROnlineEspressoV217GetOutputInternalIDhEENSt3__18optionalINS2_6vectorIfNS2_9allocatorIfEEEEEEv(result, a2);
}

void sub_229545EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<float>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __CVBuffer *v3;
  size_t Width;
  size_t Height;
  NSObject *v6;
  unint64_t v7;
  int *BaseAddress;
  _DWORD *v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  if (*(_BYTE *)(result + 232))
  {
    v3 = *(__CVBuffer **)(*(_QWORD *)(result + 160) + 40);
    Width = CVPixelBufferGetWidth(v3);
    Height = CVPixelBufferGetHeight(v3);
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();
    v7 = Height * Width;

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>();

    CVPixelBufferLockBaseAddress(v3, 1uLL);
    BaseAddress = (int *)CVPixelBufferGetBaseAddress(v3);
    std::vector<float>::vector(&v11, v7);
    if (v7)
    {
      v9 = (_DWORD *)v11;
      do
      {
        v10 = *BaseAddress++;
        *v9++ = v10;
        --v7;
      }
      while (v7);
    }
    result = CVPixelBufferUnlockBaseAddress(v3, 1uLL);
    *(_OWORD *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

{
  return __ZNK6ou3dor22OU3DOROnlineEspressoV217GetOutputInternalIfEENSt3__18optionalINS2_6vectorIfNS2_9allocatorIfEEEEEEv(result, a2);
}

void sub_229546004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  size_t Width;
  size_t Height;
  NSObject *v6;
  __CVBuffer *v7;
  size_t v8;
  _BYTE *BaseAddress;
  char *v10;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  NSObject *v23;
  int v24;
  size_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 233))
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();

    return 0;
  }
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v24 = 134217984;
    v25 = Width;
    _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOR] input image shape w %lu", (uint8_t *)&v24, 0xCu);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v24 = 134217984;
    v25 = Height;
    _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOR] input image tensor shape h %lu", (uint8_t *)&v24, 0xCu);
  }

  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1111970369)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    goto LABEL_24;
  }
  if (Width != 224 || Height != 224)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    goto LABEL_24;
  }
  kdebug_trace();
  v7 = *(__CVBuffer **)(*(_QWORD *)(a1 + 120) + 40);
  v8 = CVPixelBufferGetHeight(v7);
  if (CVPixelBufferGetWidth(v7) * v8 - 150528 >= 3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
LABEL_24:

    return 0;
  }
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(v7, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  v10 = (char *)CVPixelBufferGetBaseAddress(v7);
  v14 = 0;
  v15 = v10 + 200704;
  v16 = v10 + 100352;
  do
  {
    v17 = 0;
    do
    {
      LOBYTE(_S7) = BaseAddress[2];
      _S7 = (float)((float)((float)LODWORD(_S7) * 0.0039216) + -0.485) * 4.3668;
      LOBYTE(_S16) = BaseAddress[1];
      _S16 = (float)((float)((float)LODWORD(_S16) * 0.0039216) + -0.456) * 4.4643;
      LOBYTE(_S17) = *BaseAddress;
      _S17 = (float)((float)((float)LODWORD(_S17) * 0.0039216) + -0.406) * 4.4444;
      __asm { FCVT            H7, S7 }
      *(_WORD *)&v10[v17] = LOWORD(_S7);
      __asm { FCVT            H7, S16 }
      *(_WORD *)&v16[v17] = LOWORD(_S7);
      __asm { FCVT            H7, S17 }
      *(_WORD *)&v15[v17] = LOWORD(_S7);
      BaseAddress += 4;
      v17 += 2;
    }
    while ((_DWORD)v17 != 448);
    ++v14;
    v15 += v17;
    v16 += v17;
    v10 += v17;
  }
  while (v14 != 224);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(v7, 0);
  *(_BYTE *)(a1 + 232) = 1;
  kdebug_trace();
  return *(_BYTE *)(a1 + 232) != 0;
}

{
  return __ZN6ou3dor22OU3DOROnlineEspressoV216SetInputInternalIDhEEbP10__CVBuffer(a1, pixelBuffer);
}

BOOL ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<float>(uint64_t a1, CVPixelBufferRef pixelBuffer)
{
  size_t Width;
  size_t Height;
  NSObject *v6;
  __CVBuffer *v7;
  size_t v8;
  _BYTE *BaseAddress;
  char *v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  NSObject *v19;
  int v20;
  size_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 233))
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();

    return 0;
  }
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  _OULoggingGetOSLogForCategoryObjectUnderstanding();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v20 = 134217984;
    v21 = Width;
    _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOR] input image shape w %lu", (uint8_t *)&v20, 0xCu);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v20 = 134217984;
    v21 = Height;
    _os_log_impl(&dword_2294C8000, v6, OS_LOG_TYPE_INFO, "[3DOR] input image tensor shape h %lu", (uint8_t *)&v20, 0xCu);
  }

  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1111970369)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    goto LABEL_24;
  }
  if (Width != 224 || Height != 224)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
    goto LABEL_24;
  }
  kdebug_trace();
  v7 = *(__CVBuffer **)(*(_QWORD *)(a1 + 120) + 40);
  v8 = CVPixelBufferGetHeight(v7);
  if (CVPixelBufferGetWidth(v7) * v8 - 150528 >= 3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>();
LABEL_24:

    return 0;
  }
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(v7, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  v10 = (char *)CVPixelBufferGetBaseAddress(v7);
  v14 = 0;
  v15 = v10 + 401408;
  v16 = v10 + 200704;
  do
  {
    v17 = 0;
    do
    {
      LOBYTE(v11) = BaseAddress[v17 + 2];
      v11 = (float)((float)((float)LODWORD(v11) * 0.0039216) + -0.485) * 4.3668;
      LOBYTE(v12) = BaseAddress[v17 + 1];
      v12 = (float)((float)((float)LODWORD(v12) * 0.0039216) + -0.456) * 4.4643;
      LOBYTE(v13) = BaseAddress[v17];
      v13 = (float)((float)((float)LODWORD(v13) * 0.0039216) + -0.406) * 4.4444;
      *(float *)&v10[v17] = v11;
      *(float *)&v16[v17] = v12;
      *(float *)&v15[v17] = v13;
      v17 += 4;
    }
    while ((_DWORD)v17 != 896);
    ++v14;
    v15 += v17;
    v16 += v17;
    v10 += v17;
    BaseAddress += v17;
  }
  while (v14 != 224);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(v7, 0);
  *(_BYTE *)(a1 + 232) = 1;
  kdebug_trace();
  return *(_BYTE *)(a1 + 232) != 0;
}

{
  return __ZN6ou3dor22OU3DOROnlineEspressoV216SetInputInternalIfEEbP10__CVBuffer(a1, pixelBuffer);
}

void ou3dor::OU3DOROnlineEspressoV2::~OU3DOROnlineEspressoV2(ou3dor::OU3DOROnlineEspressoV2 *this)
{
  ou3dor::OU3DOREspressoV2Interface::~OU3DOREspressoV2Interface(this);
  JUMPOUT(0x22E2CAAE8);
}

_QWORD *ou3dor::OU3DOROnlineEspressoV2::OU3DOROnlineEspressoV2(ou3dor::OU3DOROnlineEspressoV2 *this)
{
  _QWORD *result;
  __int128 v2[3];

  result = (_QWORD *)ou3dor::OU3DOREspressoV2Interface::OU3DOREspressoV2Interface((uint64_t)this, v2);
  *result = &off_24F243A20;
  return result;
}

{
  _QWORD *result;
  __int128 v2[3];

  result = (_QWORD *)ou3dor::OU3DOREspressoV2Interface::OU3DOREspressoV2Interface((uint64_t)this, v2);
  *result = &off_24F243A20;
  return result;
}

BOOL ou3dor::OU3DOROnlineEspressoV2::SetInput(ou3dor::OU3DOROnlineEspressoV2 *this, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(*((_QWORD *)this + 15) + 40)) == 1278226536)
    return ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<half>((uint64_t)this, a2);
  else
    return ou3dor::OU3DOROnlineEspressoV2::SetInputInternal<float>((uint64_t)this, a2);
}

uint64_t ou3dor::OU3DOROnlineEspressoV2::GetOutput@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;

  if (*(_BYTE *)(this + 232))
  {
    v3 = this;
    if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(*(_QWORD *)(this + 160) + 40)) == 1278226536)
      return ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<half>(v3, (uint64_t)a2);
    else
      return ou3dor::OU3DOROnlineEspressoV2::GetOutputInternal<float>(v3, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
  return this;
}

uint64_t _OULoggingGetOSLogForCategoryObjectUnderstanding()
{
  if (_OULoggingGetOSLogForCategoryObjectUnderstanding_onceToken != -1)
    dispatch_once(&_OULoggingGetOSLogForCategoryObjectUnderstanding_onceToken, &__block_literal_global);
  return _OULoggingGetOSLogForCategoryObjectUnderstanding_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryKeyframeAccumulation()
{
  if (_OULoggingGetOSLogForCategoryKeyframeAccumulation_onceToken != -1)
    dispatch_once(&_OULoggingGetOSLogForCategoryKeyframeAccumulation_onceToken, &__block_literal_global_4);
  return _OULoggingGetOSLogForCategoryKeyframeAccumulation_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryPointCloud()
{
  if (_OULoggingGetOSLogForCategoryPointCloud_onceToken != -1)
    dispatch_once(&_OULoggingGetOSLogForCategoryPointCloud_onceToken, &__block_literal_global_7);
  return _OULoggingGetOSLogForCategoryPointCloud_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryPostProcess()
{
  if (_OULoggingGetOSLogForCategoryPostProcess_onceToken != -1)
    dispatch_once(&_OULoggingGetOSLogForCategoryPostProcess_onceToken, &__block_literal_global_10);
  return _OULoggingGetOSLogForCategoryPostProcess_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryOnlineOD()
{
  if (_OULoggingGetOSLogForCategoryOnlineOD_onceToken != -1)
    dispatch_once(&_OULoggingGetOSLogForCategoryOnlineOD_onceToken, &__block_literal_global_13);
  return _OULoggingGetOSLogForCategoryOnlineOD_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryOfflineOD()
{
  if (_OULoggingGetOSLogForCategoryOfflineOD_onceToken != -1)
    dispatch_once(&_OULoggingGetOSLogForCategoryOfflineOD_onceToken, &__block_literal_global_16);
  return _OULoggingGetOSLogForCategoryOfflineOD_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryOUSession()
{
  if (_OULoggingGetOSLogForCategoryOUSession_onceToken != -1)
    dispatch_once(&_OULoggingGetOSLogForCategoryOUSession_onceToken, &__block_literal_global_19);
  return _OULoggingGetOSLogForCategoryOUSession_oslog;
}

uint64_t _OULoggingGetOSLogForCategoryRGBRefinement()
{
  if (_OULoggingGetOSLogForCategoryRGBRefinement_onceToken != -1)
    dispatch_once(&_OULoggingGetOSLogForCategoryRGBRefinement_onceToken, &__block_literal_global_22);
  return _OULoggingGetOSLogForCategoryRGBRefinement_oslog;
}

void OU3DObjectRGBSizeRefiner::OU3DObjectRGBSizeRefiner(OU3DObjectRGBSizeRefiner *this, const OU3DObjectRGBSizeRefinerParams *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  OUCannyEdgeDetectorSemantic *v22;
  uint64_t *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  OUSemanticSegmentation *v35;
  void *v36;
  std::logic_error *exception;
  id obj;
  _OWORD v40[2];
  std::string __p;
  id v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  id *v48;
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v3 = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 52) = *(_OWORD *)((char *)a2 + 12);
  *(_OWORD *)((char *)this + 40) = v3;
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 3, *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v4 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 6);
    *(_OWORD *)((char *)this + 72) = v4;
  }
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 108) = *(_OWORD *)((char *)a2 + 68);
  *((_OWORD *)this + 6) = v5;
  v6 = (std::string *)((char *)this + 128);
  v7 = (__int128 *)((char *)a2 + 88);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v8 = *v7;
    *((_QWORD *)this + 18) = *((_QWORD *)a2 + 13);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
  }
  v9 = *((id *)a2 + 14);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  *((_QWORD *)this + 19) = v9;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 22) = 0;
  v10 = (char *)this + 176;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 42) = 0;
  *((float32x2_t *)this + 43) = vdiv_f32(vcvt_f32_s32(*(int32x2_t *)((char *)a2 + 12)), vcvt_f32_s32(*(int32x2_t *)((char *)a2 + 20)));
  *((_DWORD *)this + 88) = 2139095039;
  v11 = operator new();
  OUCannyEdgeDetectorRGB::OUCannyEdgeDetectorRGB(v11, a2);
  v12 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  obj = *((id *)a2 + 14);
  v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v45;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v45 != v14)
          objc_enumerationMutation(obj);
        ObjectTypeConversion(*(NSString **)(*((_QWORD *)&v44 + 1) + 8 * i));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v43 = v16;
        v17 = *(_QWORD **)v10;
        if (!*(_QWORD *)v10)
          goto LABEL_25;
        v18 = (char *)this + 176;
        do
        {
          v19 = v17[4];
          v20 = v19 >= (unint64_t)v16;
          if (v19 >= (unint64_t)v16)
            v21 = v17;
          else
            v21 = v17 + 1;
          if (v20)
            v18 = (char *)v17;
          v17 = (_QWORD *)*v21;
        }
        while (*v21);
        if (v18 == v10 || (unint64_t)v16 < *((_QWORD *)v18 + 4))
        {
LABEL_25:
          v40[0] = *(_OWORD *)((char *)a2 + 56);
          *(_OWORD *)((char *)v40 + 12) = *(_OWORD *)((char *)a2 + 68);
          if (*((char *)a2 + 111) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
            v16 = v43;
          }
          else
          {
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v7;
            __p.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 13);
          }
          v42 = v16;
          v22 = (OUCannyEdgeDetectorSemantic *)operator new();
          OUCannyEdgeDetectorSemantic::OUCannyEdgeDetectorSemantic(v22, (const CannyEdgeDetectorSemanticParams *)v40);
          v48 = &v43;
          v23 = std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t **)this + 21, (unint64_t *)&v43, (uint64_t)&std::piecewise_construct, &v48);
          v24 = v23[5];
          v23[5] = (uint64_t)v22;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v16 = v43;
        }

      }
      v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
    }
    while (v13);
  }

  v25 = MTLCreateSystemDefaultDevice();
  v26 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v25;

  if (*((_DWORD *)a2 + 20) * *((_DWORD *)a2 + 19) != 49152)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "[3DOD] RGB refinement config size doesn't match with input.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24F242648, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v27 = *((_QWORD *)this + 28);
  v28 = *((_QWORD *)this + 29) - v27;
  if (v28 >> 14 > 2)
  {
    if (v28 != 49152)
      *((_QWORD *)this + 29) = v27 + 49152;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 28, 49152 - v28);
  }
  v29 = *((_QWORD *)this + 31);
  v30 = *((_QWORD *)this + 32) - v29;
  if (v30 >> 14 > 2)
  {
    if (v30 != 49152)
      *((_QWORD *)this + 32) = v29 + 49152;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 31, 49152 - v30);
  }
  v31 = *((_QWORD *)this + 34);
  v32 = *((_QWORD *)this + 35) - v31;
  if (v32 >> 14 > 2)
  {
    if (v32 != 49152)
      *((_QWORD *)this + 35) = v31 + 49152;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 34, 49152 - v32);
  }
  std::vector<float>::resize((uint64_t)this + 296, 0xC000uLL);
  v33 = *((_QWORD *)this + 40);
  v34 = *((_QWORD *)this + 41) - v33;
  if (v34 >> 14 > 2)
  {
    if (v34 != 49152)
      *((_QWORD *)this + 41) = v33 + 49152;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 40, 49152 - v34);
  }
  v35 = objc_alloc_init(OUSemanticSegmentation);
  v36 = *(void **)this;
  *(_QWORD *)this = v35;

}

void sub_2295470CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void **v16;
  void *v18;

  if (*(char *)(a16 + 95) < 0)
    operator delete(*v16);

  v18 = *(void **)(a16 + 8);
  if (v18)
  {
    *(_QWORD *)(a16 + 16) = v18;
    operator delete(v18);
  }

  _Unwind_Resume(a1);
}

void CannyEdgeDetectorSemanticParams::~CannyEdgeDetectorSemanticParams(id *this)
{

  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

float OU3DObjectRGBSizeRefiner::ComputeSemanticRatio(OU3DObjectRGBSizeRefiner *this, const box3d *a2, const simd_float3x3 *a3, const simd_float4x4 *a4)
{
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  __CVBuffer *v10;
  char *BaseAddress;
  const Polygon *v12;
  float v13;
  float v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  void *v28[3];
  void *v29;
  void *v30;
  simd_float4x4 v31;

  *(double *)v6.i64 = OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(this, a3, a4);
  v31.columns[0] = v6;
  v31.columns[1] = v7;
  v31.columns[2] = v8;
  v31.columns[3] = v9;
  OU3DObjectRGBSizeRefiner::ProjectToImage(this, &v31, a2, (uint64_t)v28);
  OU::ConvexHull((uint64_t *)v28, 0, &v21);
  if (!v24)
    std::__throw_bad_optional_access[abi:ne180100]();
  *(_OWORD *)__p = v21;
  v26 = v22;
  v27 = v23;
  *(_QWORD *)&v21 = (char *)a2 + 128;
  v10 = *(__CVBuffer **)(std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t **)this + 21, (unint64_t *)a2 + 16, (uint64_t)&std::piecewise_construct, (id **)&v21)[5]+ 144);
  CVPixelBufferLockBaseAddress(v10, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(v10);
  v13 = OU::area((OU *)__p, v12);
  v14 = 0.0;
  if (v13 >= 0.001)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = 0;
      v18 = BaseAddress;
      do
      {
        *(float *)&v19 = (float)(int)v15;
        *((float *)&v19 + 1) = (float)(int)v17;
        *(_QWORD *)&v21 = v19;
        if ((OU::Polygon::PointInsidePolygon((uint64_t)__p, (float32x2_t *)&v21) & 1) != 0 && *v18)
          ++v16;
        ++v17;
        v18 += 256;
      }
      while (v17 != 192);
      ++v15;
      ++BaseAddress;
    }
    while (v15 != 256);
    CVPixelBufferUnlockBaseAddress(v10, 0);
    v14 = (float)v16 / v13;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30)
    operator delete(v30);
  if (v29)
    operator delete(v29);
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  return v14;
}

void sub_229547484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
    operator delete(__p);
  OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult((OU3DObjectRGBSizeRefiner::ProjectionResult *)&a23);
  _Unwind_Resume(a1);
}

double OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(OU3DObjectRGBSizeRefiner *this, const simd_float3x3 *a2, const simd_float4x4 *a3)
{
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  simd_float4 v7;
  _OWORD v9[4];
  __int128 v10;

  v3 = 0;
  v4 = (float32x4_t)a2->columns[0];
  v5 = (float32x4_t)a2->columns[1];
  v4.i32[3] = 0;
  v5.i32[3] = 0;
  v6 = (float32x4_t)a2->columns[2];
  v6.i32[3] = 0;
  v7 = a3->columns[3];
  v9[2] = a3->columns[2];
  v9[3] = v7;
  do
  {
    *(__int128 *)((char *)&v10 + v3 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(v9[v3])), v5, *(float32x2_t *)&v9[v3], 1), v6, (float32x4_t)v9[v3], 2), (float32x4_t)xmmword_229560490, (float32x4_t)v9[v3], 3);
    ++v3;
  }
  while (v3 != 4);
  return *(double *)&v10;
}

void OU3DObjectRGBSizeRefiner::ProjectToImage(OU3DObjectRGBSizeRefiner *this@<X0>, const simd_float4x4 *a2@<X1>, const box3d *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  char v9;
  float32x4_t v10;
  int16x4_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  int32x4_t v25;
  uint64_t v26;
  BOOL v27;
  void *__p[3];
  void *v29;
  __int128 v30;
  void *v31;
  char *v32;
  char *v33;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  v29 = 0;
  v30 = 0uLL;
  v27 = 0;
  std::vector<BOOL>::vector(__p, 8uLL, (unsigned __int8 *)&v27);
  v24 = a4;
  _ZNSt3__16vectorIDv4_tNS_9allocatorIS1_EEE7reserveEm(&v31, 8uLL);
  std::vector<BOOL>::reserve((char **)&v29, 8uLL);
  v8 = 0;
  v9 = 0;
  do
  {
    v25 = (int32x4_t)vaddq_f32((float32x4_t)a2->columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a2->columns[0], COERCE_FLOAT(*((_OWORD *)a3 + v8))), (float32x4_t)a2->columns[1], *(float32x2_t *)((char *)a3 + 16 * v8), 1), (float32x4_t)a2->columns[2], *((float32x4_t *)a3 + v8), 2));
    v27 = *(float *)&v25.i32[2] <= 0.0;
    std::vector<BOOL>::push_back((uint64_t)&v29, &v27);
    *(float32x2_t *)v10.f32 = vdiv_f32(vdiv_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2)), *(float32x2_t *)((char *)this + 344));
    v26 = v10.i64[0];
    v10.i64[1] = v10.i64[0];
    v11.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_229562220, v10)).u32[0];
    v11.i32[1] = vmovn_s32(vcgeq_f32(v10, (float32x4_t)xmmword_229562220)).i32[1];
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v11, 0xFuLL))) & 1) != 0
      && ((*(_QWORD *)((char *)v29 + (((unint64_t)(v30 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v30 - 1)) & 1) == 0)
    {
      v9 = 1;
      *(_QWORD *)((char *)__p[0] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    }
    v12 = v32;
    if (v32 >= v33)
    {
      v14 = (v32 - (_BYTE *)v31) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v15 = (v33 - (_BYTE *)v31) >> 2;
      if (v15 <= v14 + 1)
        v15 = v14 + 1;
      if ((unint64_t)(v33 - (_BYTE *)v31) >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)_ZNSt3__119__allocate_at_leastB8ne180100INS_9allocatorIDv2_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v33, v16);
      else
        v17 = 0;
      v18 = (uint64_t *)&v17[8 * v14];
      *v18 = v26;
      v13 = (char *)(v18 + 1);
      v20 = (char *)v31;
      v19 = v32;
      if (v32 != v31)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v18 = v21;
        }
        while (v19 != v20);
        v19 = (char *)v31;
      }
      v31 = v18;
      v32 = v13;
      v33 = &v17[8 * v16];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v32 = v10.i64[0];
      v13 = v12 + 8;
    }
    v32 = v13;
    ++v8;
  }
  while (v8 != 8);
  v22 = v33;
  *(_QWORD *)v24 = v31;
  *(_QWORD *)(v24 + 8) = v13;
  v32 = 0;
  v33 = 0;
  v23 = v29;
  *(_QWORD *)(v24 + 16) = v22;
  *(_QWORD *)(v24 + 24) = v23;
  *(_OWORD *)(v24 + 32) = v30;
  v29 = 0;
  v30 = 0uLL;
  v31 = 0;
  *(_BYTE *)(v24 + 48) = v9 & 1;
  std::vector<BOOL>::vector((_QWORD *)(v24 + 56), (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
  if (v29)
    operator delete(v29);
  if (v31)
  {
    v32 = (char *)v31;
    operator delete(v31);
  }
}

void sub_2295477FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  v25 = *(void **)(v23 + 24);
  if (v25)
    operator delete(v25);
  v26 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v26;
    operator delete(v26);
  }
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult(OU3DObjectRGBSizeRefiner::ProjectionResult *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
    operator delete(v3);
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

OU3DObjectRGBSizeRefiner *OU3DObjectRGBSizeRefiner::ComputeWeightedRGBBuffer(OU3DObjectRGBSizeRefiner *this, double a2, double a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = *((_QWORD *)this + 28);
  v7 = *((_QWORD *)this + 34);
  v8 = *((_QWORD *)this + 37);
  do
  {
    LOBYTE(a4) = *(_BYTE *)(v6 + v5);
    LOBYTE(a5) = *(_BYTE *)(v7 + v5);
    a5 = (float)LODWORD(a5) * 7.0;
    a4 = a5 + (float)((float)LODWORD(a4) * 0.35);
    *(float *)(v8 + 4 * v5++) = a4;
  }
  while (v5 != 49152);
  return this;
}

void OU3DObjectRGBSizeRefiner::InsideFovSides(OU3DObjectRGBSizeRefiner *this@<X0>, const OU3DObjectRGBSizeRefiner::ProjectionResult *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  float32x2_t v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD **v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  _OWORD *v42;
  _OWORD *v43;
  _OWORD *v44;
  _OWORD *v45;
  _OWORD *v46;
  _OWORD *v47;
  _OWORD *v48;
  _OWORD *v49;
  _OWORD *v50;
  _OWORD *v51;
  _QWORD v52[2];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v5 = operator new(0x20uLL);
  *v5 = xmmword_229562428;
  v5[1] = unk_229562438;
  v36 = (_QWORD **)v5;
  v37 = v5 + 2;
  v38 = v5 + 2;
  v6 = operator new(0x20uLL);
  *v6 = xmmword_229562448;
  v6[1] = unk_229562458;
  v39 = v6;
  v40 = v6 + 2;
  v41 = v6 + 2;
  v7 = operator new(0x20uLL);
  *v7 = xmmword_229562468;
  v7[1] = unk_229562478;
  v42 = v7;
  v43 = v7 + 2;
  v44 = v7 + 2;
  v8 = operator new(0x20uLL);
  *v8 = xmmword_229562488;
  v8[1] = unk_229562498;
  v45 = v8;
  v46 = v8 + 2;
  v47 = v8 + 2;
  v9 = operator new(0x20uLL);
  *v9 = xmmword_2295624A8;
  v9[1] = unk_2295624B8;
  v48 = v9;
  v49 = v9 + 2;
  v50 = v9 + 2;
  v10 = operator new(0x20uLL);
  v52[0] = v10 + 2;
  v52[1] = v10 + 2;
  *v10 = xmmword_2295624C8;
  v10[1] = unk_2295624D8;
  v51 = v10;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v34 = (uint64_t)&v31;
  LOBYTE(v35) = 0;
  v31 = operator new(0x90uLL);
  v32 = v31;
  v33 = v31 + 18;
  v11 = 0;
  v32 = _ZNSt3__135__uninitialized_allocator_copy_implB8ne180100INS_9allocatorINS_6vectorIDv2_iNS1_IS3_EEEEEEPKS5_S8_PS5_EET2_RT_T0_T1_SA_((uint64_t)&v33, (uint64_t)&v36, (uint64_t)&v53, v31);
  do
  {
    v12 = (void *)v52[v11 - 1];
    if (v12)
    {
      v52[v11] = v12;
      operator delete(v12);
    }
    v11 -= 3;
  }
  while (v11 != -18);
  v13 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v30 = 0;
  do
  {
    v14 = (uint64_t **)&v31[3 * v13];
    v15 = *v14;
    v16 = v14[1];
    if (*v14 != v16)
    {
      v17 = 0;
      do
      {
        v18 = *v15;
        v19 = (int)*v15;
        v20 = *((_QWORD *)a2 + 3);
        v21 = 1 << *v15;
        if ((v21 & *(_QWORD *)(v20 + 8 * (v19 >> 6))) == 0
          || ((*(_QWORD *)(v20 + (((unint64_t)SHIDWORD(v18) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE4(v18)) & 1) == 0)
        {
          v22 = *((_QWORD *)a2 + 7);
          if ((*(_QWORD *)(v22 + 8 * (v19 >> 6)) & v21) != 0
            || ((*(_QWORD *)(v22 + (((unint64_t)SHIDWORD(v18) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SBYTE4(v18)) & 1) != 0)
          {
            goto LABEL_34;
          }
          v23 = *(_QWORD *)a2;
          v36 = 0;
          v37 = 0;
          v36 = *(_QWORD ***)(v23 + 8 * v19);
          v37 = *(_OWORD **)(v23 + 8 * SHIDWORD(v18));
          v29 = 0;
          v34 = 0;
          v35 = 1132462080;
          v24 = OU::intersect((int32x2_t *)&v36, (int32x2_t *)&v34, &v29);
          if (v29.f32[0] >= 0.0)
            v25 = v24;
          else
            v25 = 0;
          if (v25 == 1 && v29.f32[0] <= 256.0)
            v17 = 1;
          v34 = 0;
          v35 = 0x4340000000000000;
          if (OU::intersect((int32x2_t *)&v36, (int32x2_t *)&v34, &v29)
            && v29.f32[1] >= 0.0
            && v29.f32[1] <= 192.0)
          {
            v17 = 1;
          }
          v34 = 0x4340000000000000;
          v35 = 0x4340000043800000;
          v26 = OU::intersect((int32x2_t *)&v36, (int32x2_t *)&v34, &v29);
          if (v29.f32[0] >= 0.0)
            v27 = v26;
          else
            v27 = 0;
          if (v27 == 1 && v29.f32[0] <= 256.0)
            v17 = 1;
          v34 = 1132462080;
          v35 = 0x4340000043800000;
          if (OU::intersect((int32x2_t *)&v36, (int32x2_t *)&v34, &v29)
            && v29.f32[1] >= 0.0
            && v29.f32[1] <= 192.0)
          {
            v17 = 1;
          }
        }
        ++v15;
      }
      while (v15 != v16);
      if ((v17 & 1) == 0)
        goto LABEL_35;
LABEL_34:
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a3, &v30, &v30);
    }
LABEL_35:
    v28 = v30;
    v13 = ++v30;
  }
  while (v28 < 5);
  v36 = &v31;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_229547CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  void *v18;

  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v17 = 0;
  while (1)
  {
    v18 = *(void **)((char *)&a16 + v17 + 120);
    if (v18)
    {
      *(uint64_t *)((char *)&a16 + v17 + 128) = (uint64_t)v18;
      operator delete(v18);
    }
    v17 -= 24;
    if (v17 == -144)
      _Unwind_Resume(a1);
  }
}

void OU3DObjectRGBSizeRefiner::GetSidesEdgesOfInterest(OU3DObjectRGBSizeRefiner *this@<X0>, const box3d *a2@<X1>, uint64_t a3@<X8>)
{
  float v5;
  float v6;
  OU3DObjectRGBSizeRefiner *v7;
  _OWORD *v8;
  void **v9;
  _QWORD *v10;
  float *v11;
  __CFString *v12;
  _QWORD *v13;
  __CFString *v14;
  _OWORD *v15;
  _DWORD *v16;
  _OWORD *v17;
  char *v18;
  void *v19;
  void *v20;
  float *v21;
  _DWORD *v22;
  unint64_t v23;
  float v24;
  _BOOL4 v25;
  uint64_t i;
  _OWORD *v27;
  _DWORD *v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  float *v33;
  _DWORD *v34;
  unint64_t v35;
  _BOOL4 v36;
  uint64_t j;
  _OWORD *v38;
  _DWORD *v39;
  _OWORD *v40;
  char *v41;
  void *v42;
  void *v43;
  float *v44;
  _QWORD *v45;
  _BOOL4 v46;
  uint64_t k;
  _OWORD *v48;
  _DWORD *v49;
  _OWORD *v50;
  char *v51;
  void *v52;
  void *v53;
  float *v54;
  __CFString *v55;
  _QWORD *v56;
  __CFString *v57;
  _OWORD *v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  void *v62;
  void *v63;
  float *v64;
  __CFString *v65;
  _QWORD *v66;
  __CFString *v67;
  _OWORD *v68;
  _DWORD *v69;
  char *v70;
  char *v71;
  void *v72;
  void *v73;
  float *v74;
  _DWORD *v75;
  unint64_t v76;
  _BOOL4 v77;
  uint64_t m;
  _OWORD *v79;
  char *v80;
  char *v81;
  char *v82;
  void *v83;
  void *v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  _DWORD *v95;
  int v96;
  void *__p;
  _DWORD *v98;
  unint64_t v99;
  _QWORD v100[5];
  void *v101[3];
  void *v102;
  void *v103;
  void **p_p;
  char v105;
  _QWORD v106[4];
  __CFString *v107;
  __CFString *v108;
  _QWORD v109[3];
  _QWORD v110[6];

  v110[5] = *MEMORY[0x24BDAC8D0];
  v5 = *((float *)this + 88);
  v6 = *((float *)a2 + 2);
  OU3DObjectRGBSizeRefiner::ProjectToImage(this, (const simd_float4x4 *)((char *)this + 480), a2, (uint64_t)v101);
  OU3DObjectRGBSizeRefiner::InsideFovSides(v7, (const OU3DObjectRGBSizeRefiner::ProjectionResult *)v101, (uint64_t)v100);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = operator new(0xC0uLL);
  *(_QWORD *)(a3 + 16) = v8 + 12;
  *v8 = xmmword_229562230;
  v8[1] = xmmword_229562240;
  v8[2] = xmmword_229562250;
  v8[3] = xmmword_229562260;
  v8[4] = xmmword_229562270;
  v8[5] = xmmword_229562280;
  v8[6] = xmmword_229562290;
  v8[7] = xmmword_2295622A0;
  v8[8] = xmmword_2295622B0;
  v8[9] = xmmword_2295622C0;
  v8[10] = xmmword_2295622D0;
  v8[11] = xmmword_2295622E0;
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v8 + 12;
  *(_QWORD *)(a3 + 24) = 0;
  v9 = (void **)(a3 + 24);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v10 = operator new(0x18uLL);
  *(_QWORD *)(a3 + 32) = v10 + 3;
  *(_QWORD *)(a3 + 40) = v10 + 3;
  v10[2] = 0x500000004;
  *(_OWORD *)v10 = xmmword_2295624E8;
  *(_QWORD *)(a3 + 24) = v10;
  v11 = (float *)*((_QWORD *)a2 + 16);
  v12 = CFSTR("Table");
  v98 = 0;
  v99 = 0;
  __p = 0;
  p_p = &__p;
  v105 = 0;
  v13 = operator new(8uLL);
  __p = v13;
  v98 = v13;
  v99 = (unint64_t)(v13 + 1);
  v14 = v12;
  *v13 = v14;
  v98 = v13 + 1;
  LODWORD(v11) = IsObjectBelongType(v11, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);

  if ((_DWORD)v11)
  {
    v15 = operator new(0x20uLL);
    *v15 = xmmword_229562250;
    v15[1] = xmmword_229562260;
    v16 = operator new(0x14uLL);
    v17 = v15 + 2;
    v18 = (char *)(v16 + 5);
    v16[4] = 5;
    *(_OWORD *)v16 = xmmword_229562514;
    v19 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v19;
      operator delete(v19);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)a3 = v15;
    *(_QWORD *)(a3 + 8) = v17;
    *(_QWORD *)(a3 + 16) = v17;
    v20 = *(void **)(a3 + 24);
    if (v20)
    {
      *(_QWORD *)(a3 + 32) = v20;
      operator delete(v20);
      *v9 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 32) = v18;
    *(_QWORD *)(a3 + 40) = v18;
  }
  v21 = (float *)*((_QWORD *)a2 + 16);
  v110[0] = CFSTR("Cabinet");
  v110[1] = CFSTR("Refrigerator");
  v110[2] = CFSTR("Oven");
  v110[3] = CFSTR("Dishwasher");
  v110[4] = CFSTR("Washer");
  v98 = 0;
  v99 = 0;
  __p = 0;
  p_p = &__p;
  v105 = 0;
  v22 = operator new(0x28uLL);
  v23 = 0;
  v24 = vabds_f32(v6, v5);
  __p = v22;
  v98 = v22;
  v99 = (unint64_t)(v22 + 10);
  do
  {
    *(_QWORD *)&v22[v23 / 4] = (id)v110[v23 / 8];
    v23 += 8;
  }
  while (v23 != 40);
  v98 = v22 + 10;
  v25 = IsObjectBelongType(v21, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (i = 4; i != -1; --i)

  if (v25)
  {
    v27 = operator new(0x78uLL);
    *v27 = xmmword_229562250;
    v27[1] = xmmword_2295622F0;
    v27[2] = xmmword_229562300;
    v27[3] = xmmword_229562310;
    v27[4] = xmmword_229562320;
    v27[5] = xmmword_229562330;
    v27[6] = xmmword_229562340;
    *((_QWORD *)v27 + 14) = 0x200000006;
    v28 = operator new(0x14uLL);
    v29 = (char *)v27 + 120;
    v30 = (char *)(v28 + 5);
    v28[4] = 4;
    *(_OWORD *)v28 = xmmword_229562500;
    v31 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v31;
      operator delete(v31);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)a3 = v27;
    *(_QWORD *)(a3 + 8) = v29;
    *(_QWORD *)(a3 + 16) = v29;
    v32 = *(void **)(a3 + 24);
    if (v32)
    {
      *(_QWORD *)(a3 + 32) = v32;
      operator delete(v32);
      *v9 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    *(_QWORD *)(a3 + 24) = v28;
    *(_QWORD *)(a3 + 32) = v30;
    *(_QWORD *)(a3 + 40) = v30;
  }
  v33 = (float *)*((_QWORD *)a2 + 16);
  v109[0] = CFSTR("Shelf");
  v109[1] = CFSTR("Stove");
  v109[2] = CFSTR("Sink");
  v98 = 0;
  v99 = 0;
  __p = 0;
  p_p = &__p;
  v105 = 0;
  v34 = operator new(0x18uLL);
  v35 = 0;
  __p = v34;
  v98 = v34;
  v99 = (unint64_t)(v34 + 6);
  do
  {
    *(_QWORD *)&v34[v35 / 4] = (id)v109[v35 / 8];
    v35 += 8;
  }
  while (v35 != 24);
  v98 = v34 + 6;
  v36 = IsObjectBelongType(v33, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (j = 2; j != -1; --j)

  if (v36)
  {
    v38 = operator new(0x80uLL);
    *v38 = xmmword_229562250;
    v38[1] = xmmword_229562260;
    v38[2] = xmmword_229562270;
    v38[3] = xmmword_229562280;
    v38[4] = xmmword_229562290;
    v38[5] = xmmword_2295622A0;
    v38[6] = xmmword_2295622B0;
    v38[7] = xmmword_2295622C0;
    v39 = operator new(0x14uLL);
    v40 = v38 + 8;
    v41 = (char *)(v39 + 5);
    v39[4] = 4;
    *(_OWORD *)v39 = xmmword_229562500;
    v42 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v42;
      operator delete(v42);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)a3 = v38;
    *(_QWORD *)(a3 + 8) = v40;
    *(_QWORD *)(a3 + 16) = v40;
    v43 = *(void **)(a3 + 24);
    if (v43)
    {
      *(_QWORD *)(a3 + 32) = v43;
      operator delete(v43);
      *v9 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    *(_QWORD *)(a3 + 24) = v39;
    *(_QWORD *)(a3 + 32) = v41;
    *(_QWORD *)(a3 + 40) = v41;
  }
  v44 = (float *)*((_QWORD *)a2 + 16);
  v107 = CFSTR("Screen");
  v108 = CFSTR("Fireplace");
  v98 = 0;
  v99 = 0;
  __p = 0;
  p_p = &__p;
  v105 = 0;
  v45 = operator new(0x10uLL);
  __p = v45;
  v98 = v45;
  v99 = (unint64_t)(v45 + 2);
  *v45 = v107;
  v45[1] = v108;
  v98 = v45 + 2;
  v46 = IsObjectBelongType(v44, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (k = 8; k != -8; k -= 8)

  if (v46)
  {
    v48 = operator new(0x20uLL);
    *v48 = xmmword_229562290;
    v48[1] = xmmword_2295622A0;
    v49 = operator new(0x14uLL);
    v50 = v48 + 2;
    v51 = (char *)(v49 + 5);
    v49[4] = 4;
    *(_OWORD *)v49 = xmmword_229562500;
    v52 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v52;
      operator delete(v52);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)a3 = v48;
    *(_QWORD *)(a3 + 8) = v50;
    *(_QWORD *)(a3 + 16) = v50;
    v53 = *(void **)(a3 + 24);
    if (v53)
    {
      *(_QWORD *)(a3 + 32) = v53;
      operator delete(v53);
      *v9 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    *(_QWORD *)(a3 + 24) = v49;
    *(_QWORD *)(a3 + 32) = v51;
    *(_QWORD *)(a3 + 40) = v51;
  }
  v54 = (float *)*((_QWORD *)a2 + 16);
  v55 = CFSTR("Sofa");
  v98 = 0;
  v99 = 0;
  __p = 0;
  p_p = &__p;
  v105 = 0;
  v56 = operator new(8uLL);
  __p = v56;
  v98 = v56;
  v99 = (unint64_t)(v56 + 1);
  v57 = v55;
  *v56 = v57;
  v98 = v56 + 1;
  LODWORD(v54) = IsObjectBelongType(v54, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);

  if ((_DWORD)v54)
  {
    v58 = operator new(0x50uLL);
    *v58 = xmmword_229562230;
    v58[1] = xmmword_229562240;
    v58[2] = xmmword_229562270;
    v58[3] = xmmword_229562350;
    v58[4] = xmmword_229562360;
    v59 = operator new(0x10uLL);
    v60 = v58 + 5;
    *v59 = xmmword_229562370;
    v61 = v59 + 1;
    v62 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v62;
      operator delete(v62);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)a3 = v58;
    *(_QWORD *)(a3 + 8) = v60;
    *(_QWORD *)(a3 + 16) = v60;
    v63 = *(void **)(a3 + 24);
    if (v63)
    {
      *(_QWORD *)(a3 + 32) = v63;
      operator delete(v63);
      *v9 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    *(_QWORD *)(a3 + 24) = v59;
    *(_QWORD *)(a3 + 32) = v61;
    *(_QWORD *)(a3 + 40) = v61;
  }
  v64 = (float *)*((_QWORD *)a2 + 16);
  v65 = CFSTR("Bed");
  v98 = 0;
  v99 = 0;
  __p = 0;
  p_p = &__p;
  v105 = 0;
  v66 = operator new(8uLL);
  __p = v66;
  v98 = v66;
  v99 = (unint64_t)(v66 + 1);
  v67 = v65;
  *v66 = v67;
  v98 = v66 + 1;
  LODWORD(v64) = IsObjectBelongType(v64, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);

  if ((_DWORD)v64)
  {
    v68 = operator new(0x58uLL);
    *v68 = xmmword_229562230;
    v68[1] = xmmword_229562240;
    v68[2] = xmmword_229562380;
    v68[3] = xmmword_229562390;
    v68[4] = xmmword_2295622B0;
    *((_QWORD *)v68 + 10) = 0x200000006;
    v69 = operator new(0x14uLL);
    v70 = (char *)v68 + 88;
    v71 = (char *)(v69 + 5);
    v69[4] = 5;
    *(_OWORD *)v69 = xmmword_229562514;
    v72 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v72;
      operator delete(v72);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)a3 = v68;
    *(_QWORD *)(a3 + 8) = v70;
    *(_QWORD *)(a3 + 16) = v70;
    v73 = *(void **)(a3 + 24);
    if (v73)
    {
      *(_QWORD *)(a3 + 32) = v73;
      operator delete(v73);
      *v9 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    *(_QWORD *)(a3 + 24) = v69;
    *(_QWORD *)(a3 + 32) = v71;
    *(_QWORD *)(a3 + 40) = v71;
  }
  v74 = (float *)*((_QWORD *)a2 + 16);
  v106[0] = CFSTR("Toilet");
  v106[1] = CFSTR("Bathtub");
  v106[2] = CFSTR("Stool");
  v106[3] = CFSTR("Chair");
  v98 = 0;
  v99 = 0;
  __p = 0;
  p_p = &__p;
  v105 = 0;
  v75 = operator new(0x20uLL);
  v76 = 0;
  __p = v75;
  v98 = v75;
  v99 = (unint64_t)(v75 + 8);
  do
  {
    *(_QWORD *)&v75[v76 / 4] = (id)v106[v76 / 8];
    v76 += 8;
  }
  while (v76 != 32);
  v98 = v75 + 8;
  v77 = IsObjectBelongType(v74, &__p);
  p_p = &__p;
  std::vector<NSString * {__strong}>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (m = 3; m != -1; --m)

  if (v77)
  {
    v79 = operator new(0x38uLL);
    *v79 = xmmword_229562380;
    v79[1] = xmmword_229562390;
    v79[2] = xmmword_2295622B0;
    *((_QWORD *)v79 + 6) = 0x200000006;
    v80 = (char *)operator new(0x14uLL);
    v81 = (char *)v79 + 56;
    v82 = v80 + 20;
    *((_DWORD *)v80 + 4) = 5;
    *(_OWORD *)v80 = xmmword_229562514;
    v83 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v83;
      operator delete(v83);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)a3 = v79;
    *(_QWORD *)(a3 + 8) = v81;
    *(_QWORD *)(a3 + 16) = v81;
    v84 = *(void **)(a3 + 24);
    if (v84)
    {
      *(_QWORD *)(a3 + 32) = v84;
      operator delete(v84);
      *v9 = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
    }
    *(_QWORD *)(a3 + 24) = v80;
    *(_QWORD *)(a3 + 32) = v82;
    *(_QWORD *)(a3 + 40) = v82;
    __p = 0;
    v98 = 0;
    v99 = 0;
  }
  else
  {
    v80 = *(char **)(a3 + 24);
    v82 = *(char **)(a3 + 32);
    __p = 0;
    v98 = 0;
    v99 = 0;
    if (v80 == v82)
      goto LABEL_77;
  }
  do
  {
    LODWORD(p_p) = *(_DWORD *)v80;
    if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v100, (int *)&p_p))
    {
      v85 = v98;
      if ((unint64_t)v98 >= v99)
      {
        v87 = __p;
        v88 = ((char *)v98 - (_BYTE *)__p) >> 2;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v90 = v99 - (_QWORD)__p;
        if ((uint64_t)(v99 - (_QWORD)__p) >> 1 > v89)
          v89 = v90 >> 1;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
          v91 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v99, v91);
          v87 = __p;
          v85 = v98;
        }
        else
        {
          v92 = 0;
        }
        v93 = &v92[4 * v88];
        *(_DWORD *)v93 = (_DWORD)p_p;
        v86 = v93 + 4;
        while (v85 != v87)
        {
          v94 = *--v85;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        __p = v93;
        v98 = v86;
        v99 = (unint64_t)&v92[4 * v91];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *v98 = (_DWORD)p_p;
        v86 = v85 + 1;
      }
      v98 = v86;
    }
    v80 += 4;
  }
  while (v80 != v82);
LABEL_77:
  if (v9 != &__p)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a3 + 24), (char *)__p, (uint64_t)v98, ((char *)v98 - (_BYTE *)__p) >> 2);
  if (v24 < 0.3 && !*(_DWORD *)*v9)
  {
    v95 = *(_DWORD **)(a3 + 32);
    v96 = *--v95;
    *(_DWORD *)*v9 = v96;
    *v95 = 0;
    *(_QWORD *)(a3 + 32) = v95;
  }
  if (__p)
  {
    v98 = __p;
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v100);
  if (v103)
    operator delete(v103);
  if (v102)
    operator delete(v102);
  if (v101[0])
  {
    v101[1] = v101[0];
    operator delete(v101[0]);
  }
}

void sub_229548A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  void *v39;

  operator delete(v39);
  _ZNSt3__15tupleIJNS_6vectorIDv4_hNS_9allocatorIS2_EEEENS1_IDv4_tNS3_IS6_EEEEEED1Ev(v38);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a33);
  OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult((OU3DObjectRGBSizeRefiner::ProjectionResult *)&a38);
  _Unwind_Resume(a1);
}

void OU3DObjectRGBSizeRefiner::GenerateRgbFilterdBuffer(OU3DObjectRGBSizeRefiner *this, NSString *a2)
{
  __CVBuffer *v3;
  int Height;
  size_t BytesPerRow;
  char *BaseAddress;
  size_t v7;
  _BYTE *v8;
  char *v9;
  char v10;
  char v11;
  char v12;
  NSString *v13;
  NSString **v14;

  v13 = a2;
  v14 = &v13;
  v3 = *(__CVBuffer **)(std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t **)this + 21, (unint64_t *)&v13, (uint64_t)&std::piecewise_construct, (id **)&v14)[5]+ 144);
  CVPixelBufferLockBaseAddress(v3, 0);
  Height = CVPixelBufferGetHeight(v3);
  BytesPerRow = CVPixelBufferGetBytesPerRow(v3);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(v3);
  v7 = BytesPerRow * Height;
  if (v7)
  {
    v8 = (_BYTE *)*((_QWORD *)this + 34);
    v9 = (char *)*((_QWORD *)this + 28);
    do
    {
      v11 = *BaseAddress++;
      v10 = v11;
      v12 = *v9++;
      *v8++ = v12 * v10;
      --v7;
    }
    while (v7);
  }

}

void sub_229548CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void OU3DObjectRGBSizeRefiner::ShouldRefineObjects(uint64_t a1@<X0>, void *a2@<X1>, const simd_float3x3 *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  id v9;
  int v10;
  int *v11;
  uint64_t v12;
  int *v13;
  unint64_t ShouldRefineObject;
  int v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  int v20;
  int v21;
  void *v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  int v36;
  int *v37;
  char *v38;
  int *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v48;
  char *v49;
  id v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  void *__p;
  __int128 v56;
  uint64_t v57[3];
  char *v58;
  char *v59;
  uint64_t v60;

  v9 = a2;
  v48 = a5;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  boxesFromObjects(v9, CFSTR("rawdetection"), &v58, v57);
  v10 = -1227133513 * ((v57[1] - v57[0]) >> 5);
  LOBYTE(v52) = 0;
  std::vector<BOOL>::vector(&__p, v10, (unsigned __int8 *)&v52);
  v53 = 0;
  v54 = 0;
  v52 = (uint64_t *)&v53;
  if (v10 < 1)
  {
    v13 = 0;
  }
  else
  {
    v44 = a6;
    v49 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v45 = v9;
    v46 = v10;
    do
    {
      ShouldRefineObject = OU3DObjectRGBSizeRefiner::ShouldRefineObject(a1, v57[0] + 224 * v12, a3, a4, v48);
      v15 = ShouldRefineObject;
      if ((ShouldRefineObject & 0xFF00000000) != 0)
      {
        objc_msgSend(v9, "objectAtIndexedSubscript:", *(int *)&v58[4 * v12]);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "refined_box_history");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v17, "count"))
          v18 = 1;
        else
          v18 = 2;

        objc_msgSend(v9, "objectAtIndexedSubscript:", *(int *)&v58[4 * v12]);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "getFrameIndexOfLastRefine");

        if (v20 == -1)
        {
          if (v11 >= (int *)v49)
          {
            v32 = ((char *)v11 - (char *)v13) >> 4;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((v49 - (char *)v13) >> 3 > v33)
              v33 = (v49 - (char *)v13) >> 3;
            if ((unint64_t)(v49 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0)
              v34 = 0xFFFFFFFFFFFFFFFLL;
            else
              v34 = v33;
            if (v34 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v35 = (char *)operator new(16 * v34);
            v36 = *(_DWORD *)(a1 + 196);
            v37 = (int *)&v35[16 * v32];
            *v37 = v18;
            v37[1] = v36;
            v37[2] = v15;
            v37[3] = v12;
            if (v11 == v13)
            {
              v39 = (int *)&v35[16 * v32];
            }
            else
            {
              v38 = &v35[16 * v32];
              do
              {
                v39 = (int *)(v38 - 16);
                *((_OWORD *)v38 - 1) = *((_OWORD *)v11 - 1);
                v11 -= 4;
                v38 -= 16;
              }
              while (v11 != v13);
            }
            v49 = &v35[16 * v34];
            v11 = v37 + 4;
            if (v13)
              operator delete(v13);
            v13 = v39;
          }
          else
          {
            v24 = *(_DWORD *)(a1 + 196);
            *v11 = v18;
            v11[1] = v24;
            v11[2] = v15;
            v11[3] = v12;
            v11 += 4;
          }
        }
        else
        {
          v21 = *(_DWORD *)(a1 + 196);
          objc_msgSend(v9, "objectAtIndexedSubscript:", *(int *)&v58[4 * v12]);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = v21 - objc_msgSend(v22, "getFrameIndexOfLastRefine");
          if (v11 >= (int *)v49)
          {
            v25 = ((char *)v11 - (char *)v13) >> 4;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 60)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((v49 - (char *)v13) >> 3 > v26)
              v26 = (v49 - (char *)v13) >> 3;
            if ((unint64_t)(v49 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0)
              v27 = 0xFFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v28 = (char *)operator new(16 * v27);
            v29 = (int *)&v28[16 * v25];
            *v29 = v18;
            v29[1] = v23;
            v29[2] = v15;
            v29[3] = v12;
            if (v11 == v13)
            {
              v31 = (int *)&v28[16 * v25];
            }
            else
            {
              v30 = &v28[16 * v25];
              do
              {
                v31 = (int *)(v30 - 16);
                *((_OWORD *)v30 - 1) = *((_OWORD *)v11 - 1);
                v11 -= 4;
                v30 -= 16;
              }
              while (v11 != v13);
            }
            v49 = &v28[16 * v27];
            v11 = v29 + 4;
            v9 = v45;
            if (v13)
              operator delete(v13);
            v13 = v31;
          }
          else
          {
            *v11 = v18;
            v11[1] = v23;
            v11[2] = v15;
            v11[3] = v12;
            v11 += 4;
            v9 = v45;
          }

        }
      }
      ++v12;
    }
    while (v12 != v46);
    if (v13 == v11)
    {
      a6 = v44;
    }
    else
    {
      v40 = v13[3];
      *(_QWORD *)((char *)__p + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      ObjectTypeConversion(*(NSString **)(v57[0] + 224 * (int)v40 + 128));
      v51 = (id)objc_claimAutoreleasedReturnValue();
      std::__tree<NSString * {__strong}>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}>(&v52, (unint64_t *)&v51, (uint64_t *)&v51);
      a6 = v44;

    }
  }
  v41 = v54;
  *(_QWORD *)a6 = __p;
  *(_OWORD *)(a6 + 8) = v56;
  v56 = 0uLL;
  __p = 0;
  v42 = v53;
  *(_QWORD *)(a6 + 24) = v52;
  *(_QWORD *)(a6 + 32) = v42;
  v43 = a6 + 32;
  *(_QWORD *)(a6 + 40) = v41;
  if (v41)
  {
    v42[2] = v43;
    v52 = (uint64_t *)&v53;
    v53 = 0;
    v54 = 0;
    v42 = 0;
    if (!v13)
      goto LABEL_51;
    goto LABEL_50;
  }
  *(_QWORD *)(a6 + 24) = v43;
  if (v13)
  {
LABEL_50:
    operator delete(v13);
    v42 = v53;
  }
LABEL_51:
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&v52, v42);
  if (__p)
    operator delete(__p);
  __p = v57;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }

}

void sub_22954918C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, char a18, _QWORD *a19, uint64_t a20,char *__p,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  uint64_t v25;
  void *v27;

  if (v24)
    operator delete(v24);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&a18, a19);
  if (__p)
    operator delete(__p);
  __p = &a24;
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v27 = *(void **)(v25 - 112);
  if (v27)
  {
    *(_QWORD *)(v25 - 104) = v27;
    operator delete(v27);
  }

  _Unwind_Resume(a1);
}

unint64_t OU3DObjectRGBSizeRefiner::ShouldRefineObject(uint64_t a1, uint64_t a2, const simd_float3x3 *a3, uint64_t a4, void *a5)
{
  id v9;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  NSObject *v28;
  void *v29;
  uint64_t IsBoxInFOVLine;
  _QWORD v31[4];

  v31[3] = *MEMORY[0x24BDAC8D0];
  v9 = a5;
  ObjectTypeConversion(*(NSString **)(a2 + 128));
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  v12 = *(_QWORD **)(a1 + 176);
  if (!v12)
    goto LABEL_12;
  v13 = (_QWORD *)(a1 + 176);
  do
  {
    v14 = v12[4];
    v15 = v14 >= v10;
    if (v14 >= v10)
      v16 = v12;
    else
      v16 = v12 + 1;
    if (v15)
      v13 = v12;
    v12 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)(a1 + 176) || v10 < v13[4])
  {
LABEL_12:
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(*(id *)(a2 + 144), "UUIDString");
      objc_claimAutoreleasedReturnValue();
      objc_msgSend(objc_retainAutorelease(v11), "UTF8String");
      OU3DObjectRGBSizeRefiner::ShouldRefineObject();
    }
LABEL_14:

    goto LABEL_15;
  }
  if (v9 && (objc_msgSend(v9, "containsObject:", *(_QWORD *)(a2 + 144)) & 1) == 0)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(*(id *)(a2 + 144), "UUIDString");
      objc_claimAutoreleasedReturnValue();
      objc_msgSend(objc_retainAutorelease(v11), "UTF8String");
      OU3DObjectRGBSizeRefiner::ShouldRefineObject();
    }
    goto LABEL_14;
  }
  v23 = 0;
  v24 = 3.4028e38;
  do
  {
    v25 = vsubq_f32(*(float32x4_t *)(a4 + 48), *(float32x4_t *)(a2 + v23));
    v26 = vmulq_f32(v25, v25);
    v27 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
    if (v27 < v24)
      v24 = v27;
    v23 += 16;
  }
  while (v23 != 128);
  if (v24 > 5.0)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(*(id *)(a2 + 144), "UUIDString");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      OU3DObjectRGBSizeRefiner::ShouldRefineObject(v29, (uint64_t)v31, v28, v24);
    }

    goto LABEL_15;
  }
  IsBoxInFOVLine = OU3DObjectRGBSizeRefiner::IsBoxInFOVLine((OU3DObjectRGBSizeRefiner *)a1, a3, (const simd_float4x4 *)a4, (const box3d *)a2);
  v19 = IsBoxInFOVLine & 0xFF00000000;
  if ((IsBoxInFOVLine & 0xFF00000000) == 0)
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      objc_msgSend(*(id *)(a2 + 144), "UUIDString");
      objc_claimAutoreleasedReturnValue();
      objc_msgSend(objc_retainAutorelease(v11), "UTF8String");
      OU3DObjectRGBSizeRefiner::ShouldRefineObject();
    }
    goto LABEL_14;
  }
  if (!objc_msgSend(*(id *)(a2 + 128), "isEqualToString:", CFSTR("Screen"))
    || (OU3DObjectRGBSizeRefiner::IsBoxInFOVCorner((OU3DObjectRGBSizeRefiner *)a1, a3, (const simd_float4x4 *)a4, (const box3d *)a2) & 0xFF00000000) != 0)
  {
    v20 = IsBoxInFOVLine & 0xFFFFFF0000000000;
    v21 = IsBoxInFOVLine & 0xFFFFFF00;
    v18 = IsBoxInFOVLine;
    goto LABEL_16;
  }
LABEL_15:
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
LABEL_16:

  return v19 | v18 | v20 | v21;
}

void sub_229549538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t OU3DObjectRGBSizeRefiner::IsBoxInFOVCorner(OU3DObjectRGBSizeRefiner *this, const simd_float3x3 *a2, const simd_float4x4 *a3, const box3d *a4)
{
  OU3DObjectRGBSizeRefiner *v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  void *__p;
  void *v27;
  void *v28;
  void *v29[3];
  void *v30;
  simd_float4x4 v31;
  simd_float4x4 v32;
  float32x4_t v33;
  uint8_t buf[24];
  uint64_t v35;
  simd_float4x4 v36;

  v35 = *MEMORY[0x24BDAC8D0];
  v36.columns[2] = a3->columns[2];
  v33 = (float32x4_t)a3->columns[3];
  v36.columns[3] = (simd_float4)v33;
  v36.columns[0] = a3->columns[0];
  v36.columns[1] = a3->columns[1];
  v31 = __invert_f4(v36);
  *(double *)v8.i64 = OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(v7, a2, &v31);
  v32.columns[0] = v8;
  v32.columns[1] = v9;
  v32.columns[2] = v10;
  v32.columns[3] = v11;
  OU3DObjectRGBSizeRefiner::ProjectToImage(this, &v32, a4, (uint64_t)&v31);
  OU3DObjectRGBSizeRefiner::GetCornerVisibility((uint64_t)a4, &v33, v29);
  std::vector<BOOL>::vector(&v28, (uint64_t)v29);
  std::vector<BOOL>::vector(&v27, (uint64_t)&v30);
  buf[0] = 0;
  std::vector<BOOL>::vector(&__p, 8uLL, buf);
  v12 = 0;
  v13 = 0;
  v14 = v31.columns[1].i64[1];
  v15 = v31.columns[3].i64[1];
  v16 = (char *)__p;
  v17 = v28;
  do
  {
    v18 = v12 >> 6;
    v19 = 1 << v12;
    if ((*(_QWORD *)(v14 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      v20 = (uint64_t *)&v16[8 * v18];
LABEL_4:
      v21 = *v20 | v19;
      goto LABEL_7;
    }
    v20 = (uint64_t *)&v16[8 * v18];
    if ((v17[v18] & v19) == 0)
      goto LABEL_4;
    v21 = *v20 & ~v19;
LABEL_7:
    *v20 = v21;
    if ((*(_QWORD *)(v15 + 8 * v18) & v19) != 0)
      ++v13;
    ++v12;
  }
  while (v12 != 8);
  if (v13 >= 5)
  {
    v24 = v13 & 0x7FFFFF00;
    v13 = v13;
    v23 = 0x100000000;
  }
  else
  {
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      OU3DObjectRGBSizeRefiner::IsBoxInFOVCorner(objc_msgSend(*((id *)a4 + 16), "UTF8String"), buf, v13, v22);

    v23 = 0;
    v13 = 0;
    v24 = 0;
  }
  if (__p)
    operator delete(__p);
  if (v27)
    operator delete(v27);
  if (v28)
    operator delete(v28);
  if (v30)
    operator delete(v30);
  if (v29[0])
    operator delete(v29[0]);
  if (v31.columns[3].i64[1])
    operator delete((void *)v31.columns[3].i64[1]);
  if (v31.columns[1].i64[1])
    operator delete((void *)v31.columns[1].i64[1]);
  if (v31.columns[0].i64[0])
  {
    v31.columns[0].i64[1] = v31.columns[0].i64[0];
    operator delete((void *)v31.columns[0].i64[0]);
  }
  return v23 | v24 | v13;
}

void sub_2295497B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  OU3DObjectRGBSizeRefiner::CornerVisibilityInfo::~CornerVisibilityInfo((OU3DObjectRGBSizeRefiner::CornerVisibilityInfo *)&a19);
  OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult((OU3DObjectRGBSizeRefiner::ProjectionResult *)&a25);
  _Unwind_Resume(a1);
}

void OU3DObjectRGBSizeRefiner::GetCornerVisibility(uint64_t a1@<X1>, float32x4_t *a2@<X2>, _QWORD *a3@<X8>)
{
  void **v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  int **v14;
  int **v15;
  _QWORD *v16;
  int *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int **v42;
  int **v43;
  _QWORD *v44;
  void *__p[3];
  void *v46[4];
  char v47;
  void **v48[3];
  _OWORD *v49;
  _OWORD *v50;
  _OWORD *v51;
  _OWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  _OWORD *v62;
  _OWORD *v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v48[0]) = 0;
  std::vector<BOOL>::vector(v46, 8uLL, (unsigned __int8 *)v48);
  LOBYTE(v48[0]) = 0;
  std::vector<BOOL>::vector(__p, 8uLL, (unsigned __int8 *)v48);
  v6 = (void **)operator new(0x10uLL);
  v48[0] = v6;
  *(_OWORD *)v6 = xmmword_229560940;
  v48[1] = v6 + 2;
  v48[2] = v6 + 2;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v7 = operator new(0x10uLL);
  v49 = v7;
  *v7 = xmmword_229560950;
  v50 = v7 + 1;
  v51 = v7 + 1;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v8 = operator new(0x10uLL);
  v52 = v8;
  *v8 = xmmword_229560960;
  v53 = v8 + 1;
  v54 = v8 + 1;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v9 = operator new(0x10uLL);
  v55 = v9;
  *v9 = xmmword_229560970;
  v56 = v9 + 1;
  v57 = v9 + 1;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v10 = operator new(0x10uLL);
  v58 = v10;
  *v10 = xmmword_229560980;
  v59 = v10 + 1;
  v60 = v10 + 1;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v11 = operator new(0x10uLL);
  v61 = v11;
  *v11 = xmmword_229560930;
  v62 = v11 + 1;
  v63 = v11 + 1;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v46[3] = &v42;
  v47 = 0;
  v42 = (int **)operator new(0x90uLL);
  v43 = v42;
  v44 = v42 + 18;
  v12 = 0;
  v43 = (int **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&v44, (uint64_t)v48, (uint64_t)&v64, v42);
  do
  {
    v13 = *(_OWORD **)((char *)&v61 + v12);
    if (v13)
    {
      *(_OWORD **)((char *)&v62 + v12) = v13;
      operator delete(v13);
    }
    v12 -= 24;
  }
  while (v12 != -144);
  v14 = v42;
  v15 = v43;
  if (v42 != v43)
  {
    v16 = v46[0];
    __asm { FMOV            V0.4S, #-0.25 }
    do
    {
      v22 = *v14;
      v23 = *(float32x4_t *)(a1 + 16 * **v14);
      v24 = *(float32x4_t *)(a1 + 16 * (*v14)[1]);
      v25 = *(float32x4_t *)(a1 + 16 * (*v14)[2]);
      v26 = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v23, v24), v25), *(float32x4_t *)(a1 + 16 * (*v14)[3])), _Q0);
      v27 = vsubq_f32(v23, v24);
      v28 = vsubq_f32(v25, v24);
      v29 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), vnegq_f32(v27)), v28, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL));
      v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL);
      v31 = (int32x4_t)vmulq_f32(v29, v29);
      v31.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), *(float32x2_t *)v31.i8)).u32[0];
      *(float32x2_t *)v25.f32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
      *(float32x2_t *)v25.f32 = vmul_f32(*(float32x2_t *)v25.f32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32)));
      v31.i32[0] = vmul_f32(*(float32x2_t *)v25.f32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32))).u32[0];
      v32 = vaddq_f32(*a2, v26);
      v33 = (int32x4_t)vmulq_f32(v32, v32);
      v33.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v33, 2), vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1))).u32[0];
      v34 = vmulq_n_f32(v30, *(float *)v31.i32);
      *(float32x2_t *)v30.f32 = vrsqrte_f32((float32x2_t)v33.u32[0]);
      *(float32x2_t *)v30.f32 = vmul_f32(*(float32x2_t *)v30.f32, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32)));
      v35 = vmulq_f32(v34, vmulq_n_f32(v32, vmul_f32(*(float32x2_t *)v30.f32, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32))).f32[0]));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0] > 0.0)
      {
        v36 = v14[1];
        if (v22 != v36)
        {
          v37 = __p[0];
          do
          {
            v38 = *v22;
            v39 = v38 >> 6;
            v40 = 1 << v38;
            v41 = v16[v39];
            if ((v40 & v41) != 0)
            {
              v37[v39] |= v40;
              v41 = v16[v39];
            }
            v16[v39] = v41 | v40;
            ++v22;
          }
          while (v22 != v36);
        }
      }
      v14 += 3;
    }
    while (v14 != v15);
  }
  std::vector<BOOL>::vector(a3, (uint64_t)v46);
  std::vector<BOOL>::vector(a3 + 3, (uint64_t)__p);
  v48[0] = (void **)&v42;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v48);
  if (__p[0])
    operator delete(__p[0]);
  if (v46[0])
    operator delete(v46[0]);
}

void sub_229549BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t *a20)
{
  void **v20;

  if (*v20)
    operator delete(*v20);
  a20 = &a9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_229549C74()
{
  JUMPOUT(0x229549C54);
}

void sub_229549C7C()
{
  JUMPOUT(0x229549C60);
}

void sub_229549C84()
{
  JUMPOUT(0x229549C6CLL);
}

void OU3DObjectRGBSizeRefiner::CornerVisibilityInfo::~CornerVisibilityInfo(OU3DObjectRGBSizeRefiner::CornerVisibilityInfo *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
    operator delete(v2);
  if (*(_QWORD *)this)
    operator delete(*(void **)this);
}

uint64_t OU3DObjectRGBSizeRefiner::IsBoxInFOVLine(OU3DObjectRGBSizeRefiner *this, const simd_float3x3 *a2, const simd_float4x4 *a3, const box3d *a4)
{
  OU3DObjectRGBSizeRefiner *v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int v20;
  int v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  int v27;
  uint32x2_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  void *__p[5];
  char v34;
  void *v35;
  _BYTE *v36;
  uint64_t v37;
  simd_float4x4 v38;
  simd_float4x4 v39;

  v38 = __invert_f4(*a3);
  *(double *)v8.i64 = OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(v7, a2, &v38);
  v39.columns[0] = v8;
  v39.columns[1] = v9;
  v39.columns[2] = v10;
  v39.columns[3] = v11;
  OU3DObjectRGBSizeRefiner::ProjectToImage(this, &v39, a4, (uint64_t)&v38);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  OU::ConvexHull((uint64_t *)&v38, (uint64_t)&v35, __p);
  v12 = 0;
  v13 = 0;
  v14 = v35;
  v15 = (v36 - (_BYTE *)v35) >> 2;
  while (v12 != v15)
  {
    v16 = v12 + 1;
    v17 = *(float32x2_t *)(v38.columns[0].i64[0] + 8 * *((int *)v35 + v12));
    v18 = *(float32x2_t *)(v38.columns[0].i64[0] + 8 * *((int *)v35 + (v12 + 1) % v15));
    v19 = vsub_f32(v17, v18);
    v20 = (int)sqrtf(vaddv_f32(vmul_f32(v19, v19)));
    if ((v20 & 0x80000000) == 0)
    {
      v21 = 0;
      v22 = vsub_f32(v18, v17);
      v23 = vmul_f32(v22, v22);
      v23.i32[0] = vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1)).u32[0];
      v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
      v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
      v26 = vmul_n_f32(v22, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
      v27 = v20 + 1;
      do
      {
        v28 = vcgt_u32((uint32x2_t)0xC000000100, (uint32x2_t)vcvt_s32_f32(vmla_n_f32(v17, v26, (float)v21)));
        v13 -= v28.i32[0] & v28.i32[1];
        ++v21;
      }
      while (v27 != v21);
    }
    v12 = v16;
    if (v13 >= 101)
    {
      v29 = v13 & 0x7FFFFF00;
      v30 = v13;
      v31 = 0x100000000;
      goto LABEL_9;
    }
  }
  v30 = 0;
  v29 = 0;
  v31 = 0;
LABEL_9:
  if (v34 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    v14 = v35;
  }
  if (v14)
  {
    v36 = v14;
    operator delete(v14);
  }
  if (v38.columns[3].i64[1])
    operator delete((void *)v38.columns[3].i64[1]);
  if (v38.columns[1].i64[1])
    operator delete((void *)v38.columns[1].i64[1]);
  if (v38.columns[0].i64[0])
  {
    v38.columns[0].i64[1] = v38.columns[0].i64[0];
    operator delete((void *)v38.columns[0].i64[0]);
  }
  return v31 | v29 | v30;
}

void sub_229549EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult((OU3DObjectRGBSizeRefiner::ProjectionResult *)&a19);
  _Unwind_Resume(a1);
}

float OU3DObjectRGBSizeRefiner::ComputeSearchGranularity(OU3DObjectRGBSizeRefiner *this, const box3d *a2, const simd_float4x4 *a3)
{
  uint64_t v3;
  float v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float v8;

  v3 = 0;
  v4 = 3.4028e38;
  do
  {
    v5 = vsubq_f32((float32x4_t)a3->columns[3], *(float32x4_t *)((char *)a2 + v3));
    v6 = vmulq_f32(v5, v5);
    v7 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0]);
    if (v7 < v4)
      v4 = v7;
    v3 += 16;
  }
  while (v3 != 128);
  v8 = round(v4 + -1.0);
  return fminf(fmaxf(v8, 2.0), 4.0);
}

id OU3DObjectRGBSizeRefiner::RefineObjects(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  OU3DObjectRGBSizeRefiner *v13;
  _OUFrame *v14;
  NSObject *v15;
  int v16;
  void *v17;
  float v18;
  int v19;
  void *v20;
  void *v21;
  int v22;
  float *v23;
  void *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  _QWORD *v30;
  _QWORD **v31;
  OUVizTool *v32;
  void *v33;
  OUVizTool *v34;
  OUVizTool *v35;
  unint64_t v36;
  float v37;
  void *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  OU3DObjectRGBSizeRefiner *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  float32x4_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t *v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  void *v64;
  void *v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _BOOL4 v71;
  _QWORD *v72;
  unint64_t v73;
  OUBox3d *v74;
  OUBox3d *v75;
  float v76;
  float v77;
  OUBox3d *v78;
  OUBox3d *v79;
  OUBox3d *v80;
  uint64_t v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  float v85;
  uint64_t v86;
  int v87;
  float *v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  _BYTE *v93;
  _BYTE *v94;
  _QWORD *v95;
  float *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  unint64_t v104;
  uint64_t i;
  unsigned int *var1;
  _QWORD *v107;
  uint64_t j;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  int v117;
  _QWORD *v118;
  uint64_t v119;
  OUBox3d *v120;
  OUBox3d *v121;
  OUBox3d *v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  int **v127;
  double v128;
  float v129;
  float v130;
  int *v131;
  int *v132;
  int v133;
  float *v134;
  BOOL v135;
  float v136;
  float v137;
  double v138;
  float v139;
  float v140;
  OUBox3d *v141;
  OUBox3d *v142;
  id v143;
  OUVizTool *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  int v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t n;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *v160;
  id v162;
  id v163;
  id v164;
  NSObject *oslog;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  int **v171;
  uint64_t v172;
  OU3DObjectRGBSizeRefiner *v173;
  unint64_t obj;
  float obja;
  id objb;
  uint64_t v177;
  uint64_t k;
  NSString **v179;
  id v180;
  float *v181;
  uint64_t v182;
  float *v183;
  void *v184;
  float *v185;
  void *m;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  float32x4_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  _QWORD *v207;
  _QWORD *v208;
  unint64_t v209;
  void *v210[3];
  void *v211[3];
  void *v212;
  _BYTE *v213;
  float32x4_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  id v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  _QWORD **v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  OUBox3d *v230;
  unint64_t v231;
  uint64_t v232[3];
  float32x4_t *v233;
  uint64_t v234;
  __int8 *v235;
  float32x4_t **v236;
  __int128 *v237;
  _BYTE v238[128];
  _BYTE v239[128];
  _BYTE v240[128];
  OUBox3d v241;
  __int128 v242;
  __int128 v243;
  OUBox3d v244;
  __int128 v245;
  __int128 v246;
  OUBox3d buf;
  __int128 v248;
  __int128 v249;
  id v250;
  char *v251;
  id v252;
  id v253;
  void *v254;
  void *v255;
  void *__p;
  id v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;

  v261 = *MEMORY[0x24BDAC8D0];
  v170 = a2;
  v13 = a3;
  v162 = a6;
  v163 = a7;
  v164 = a8;
  v173 = v13;
  if ((OU3DObjectRGBSizeRefiner::IsOUFrameValid(v13, v14) & 1) != 0)
  {
    kdebug_trace();
    _OULoggingGetOSLogForCategoryObjectUnderstanding();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.var1) = 0;
      _os_log_impl(&dword_2294C8000, v15, OS_LOG_TYPE_INFO, "[3DOD RGB Refine] Edge Alignment Start", (uint8_t *)&buf, 2u);
    }
    oslog = v15;

    ++*(_DWORD *)(a1 + 196);
    rawBoxesFromObjects(v170, v232);
    v16 = -1227133513 * ((v232[1] - v232[0]) >> 5);
    v230 = 0;
    v229 = 0;
    v231 = 0;
    std::vector<OUBox3d>::reserve(&v229, v16);
    -[OU3DObjectRGBSizeRefiner camera](v13, "camera");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "intrinsics");
    buf.var2 = v18;
    LODWORD(buf.var4) = v19;
    buf.var1 = v20;
    buf.var3 = v21;
    LODWORD(buf.var5.var1) = v22;
    buf.var5.var0 = v23;
    OU3DObjectRGBSizeRefiner::ShouldRefineObjects(a1, v170, (const simd_float3x3 *)&buf, a4, v163, (uint64_t)&v225);

    kdebug_trace();
    if (v228)
    {
      kdebug_trace();
      -[OU3DObjectRGBSizeRefiner setSemanticLabelBufferOnWideCamera:](v13, "setSemanticLabelBufferOnWideCamera:", CVPixelBufferRetain((CVPixelBufferRef)objc_msgSend(*(id *)a1, "generateSemanticOnWideCameraWithFrame:", v13)));
      kdebug_trace();
      OUCannyEdgeDetectorInterface::DetectEdges(*(id **)(a1 + 160), v13);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = v226;
      if (v226 != &v227)
      {
        do
        {
          v214.i64[0] = (uint64_t)(v25 + 4);
          v26 = std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t **)(a1 + 168), v25 + 4, (uint64_t)&std::piecewise_construct, (id **)&v214);
          OUCannyEdgeDetectorInterface::DetectEdges((id *)v26[5], v13);
          v27 = objc_claimAutoreleasedReturnValue();
          v214.i64[0] = (uint64_t)(v25 + 4);
          v28 = std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t **)(a1 + 200), v25 + 4, (uint64_t)&std::piecewise_construct, (id **)&v214);
          v29 = (void *)v28[5];
          v28[5] = v27;

          v30 = (_QWORD *)v25[1];
          if (v30)
          {
            do
            {
              v31 = (_QWORD **)v30;
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v31 = (_QWORD **)v25[2];
              v135 = *v31 == v25;
              v25 = v31;
            }
            while (!v135);
          }
          v25 = v31;
        }
        while (v31 != &v227);
      }
      DownloadMTLTexture(v24, (uint64_t *)(a1 + 224));
      v33 = OUVizTool::Get(v32);
      std::string::basic_string[abi:ne180100]<0>(&buf, "pre_rgb_refine");
      OUVizTool::SaveBoxes((uint64_t)v33, (uint64_t)&buf, v232);
      if (SHIBYTE(buf.var3) < 0)
        operator delete(buf.var1);
      v35 = (OUVizTool *)OUVizTool::Get(v34);
      OUVizTool::SaveARFrameImage(v35, (__CVBuffer *)-[OU3DObjectRGBSizeRefiner sceneColorBuffer](v13, "sceneColorBuffer"));

      kdebug_trace();
      kdebug_trace();
      rawBoxesFromObjects(v162, &v223);
      if (v16 < 1)
        goto LABEL_148;
      v36 = 0;
      v167 = v16;
      v37 = 7.0;
      while (1)
      {
        v168 = v232[0];
        v179 = (NSString **)(v232[0] + 224 * v36);
        ObjectTypeConversion(v179[16]);
        v222 = (id)objc_claimAutoreleasedReturnValue();
        v177 = v36;
        if (((*(_QWORD *)((char *)v225 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36) & 1) != 0)
        {
          -[OU3DObjectRGBSizeRefiner camera](v13, "camera");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "intrinsics");
          *(_DWORD *)(a1 + 376) = v39;
          *(_DWORD *)(a1 + 392) = v40;
          *(_QWORD *)(a1 + 368) = v41;
          *(_QWORD *)(a1 + 384) = v42;
          *(_DWORD *)(a1 + 408) = v43;
          *(_QWORD *)(a1 + 400) = v44;

          *(simd_float4x4 *)(a1 + 416) = __invert_f4(*(simd_float4x4 *)a4);
          *(double *)&v46 = OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(v45, (const simd_float3x3 *)(a1 + 368), (const simd_float4x4 *)(a1 + 416));
          *(_OWORD *)(a1 + 480) = v46;
          *(_OWORD *)(a1 + 496) = v47;
          *(_OWORD *)(a1 + 512) = v48;
          *(_OWORD *)(a1 + 528) = v49;
          v50 = *(float32x4_t *)v179;
          v51 = *((_OWORD *)v179 + 1);
          v52 = *((_OWORD *)v179 + 3);
          v216 = *((_OWORD *)v179 + 2);
          v217 = v52;
          v214 = v50;
          v215 = v51;
          v53 = *((_OWORD *)v179 + 4);
          v54 = *((_OWORD *)v179 + 5);
          v55 = *((_OWORD *)v179 + 7);
          v220 = *((_OWORD *)v179 + 6);
          v221 = v55;
          v218 = v53;
          v219 = v54;
          OU3DObjectRGBSizeRefiner::GetSidesEdgesOfInterest((OU3DObjectRGBSizeRefiner *)a1, (const box3d *)v179, (uint64_t)v211);
          v244.var1 = &v222;
          v56 = std::__tree<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},std::unique_ptr<OUCannyEdgeDetectorSemantic>>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t **)(a1 + 200), (unint64_t *)&v222, (uint64_t)&std::piecewise_construct, (id **)&v244);
          DownloadMTLTexture((void *)v56[5], (uint64_t *)(a1 + 248));
          OU3DObjectRGBSizeRefiner::GenerateRgbFilterdBuffer((OU3DObjectRGBSizeRefiner *)a1, (NSString *)v222);
          v59 = 0;
          v60 = *(_QWORD *)(a1 + 224);
          v61 = *(_QWORD *)(a1 + 272);
          v62 = *(_QWORD *)(a1 + 296);
          do
          {
            LOBYTE(v57) = *(_BYTE *)(v60 + v59);
            LOBYTE(v58) = *(_BYTE *)(v61 + v59);
            v58 = (float)LODWORD(v58) * v37;
            v57 = v58 + (float)((float)LODWORD(v57) * 0.35);
            *(float *)(v62 + 4 * v59++) = v57;
          }
          while (v59 != 49152);
          if (OU3DObjectRGBSizeRefiner::ComputeSemanticRatio((OU3DObjectRGBSizeRefiner *)a1, (const box3d *)v179, (const simd_float3x3 *)(a1 + 368), (const simd_float4x4 *)(a1 + 416)) < 0.15)
          {
            v63 = oslog;
            if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
            {
              objc_msgSend(*(id *)(v168 + 224 * v177 + 144), "UUIDString");
              v125 = (id)objc_claimAutoreleasedReturnValue();
              v126 = objc_msgSend(objc_retainAutorelease(v222), "UTF8String");
              LODWORD(buf.var1) = 138412546;
              *(id *)((char *)&buf.var1 + 4) = v125;
              *((_WORD *)&buf.var2 + 2) = 2080;
              *(_QWORD *)((char *)&buf.var2 + 6) = v126;
              _os_log_debug_impl(&dword_2294C8000, oslog, OS_LOG_TYPE_DEBUG, "[3DOD RGB Refine Debug] Object uuid: %@ box type: %s does not meet semantic ratio ", (uint8_t *)&buf, 0x16u);

              v63 = oslog;
            }

            objc_msgSend(v170, "objectAtIndexedSubscript:", v177);
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v64, "refined_box_history");
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            v66 = objc_msgSend(v65, "count") == 0;

            if (!v66)
            {
              OUBox3d::OUBox3d(&buf, (const OUBox3d *)v179);
              v67 = v223;
              v68 = v224;
              if (v223 != v224)
              {
                while (!objc_msgSend(*(id *)(v67 + 144), "isEqual:", *(_QWORD *)(v168 + 224 * v177 + 144)))
                {
                  v67 += 224;
                  if (v67 == v68)
                    goto LABEL_92;
                }
                OUBox3d::operator=((uint64_t)&buf, (__int128 *)v67);
              }
LABEL_92:
              v121 = v230;
              if ((unint64_t)v230 >= v231)
              {
                v122 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v229, &buf);
              }
              else
              {
                OUBox3d::OUBox3d(v230, &buf);
                v122 = (OUBox3d *)((char *)v121 + 224);
              }
              v230 = v122;

              if (__p)
                operator delete(__p);
              if (v254)
              {
                v255 = v254;
                operator delete(v254);
              }

LABEL_102:
              if (v212)
              {
                v213 = v212;
                operator delete(v212);
              }
              if (v211[0])
              {
                v211[1] = v211[0];
                operator delete(v211[0]);
              }
              goto LABEL_106;
            }
            v78 = v230;
            if ((unint64_t)v230 < v231)
            {
LABEL_87:
              OUBox3d::OUBox3d(v230, (const OUBox3d *)v179);
              v120 = (OUBox3d *)((char *)v78 + 224);
LABEL_101:
              v230 = v120;
              goto LABEL_102;
            }
LABEL_100:
            v120 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v229, (const OUBox3d *)v179);
            goto LABEL_101;
          }
          OU3DObjectRGBSizeRefiner::DrawBoxImage(a1, (const box3d *)&v214, (uint64_t)v211, (const simd_float3x3 *)(a1 + 368), (simd_float4x4 *)(a1 + 416), 0);
          v76 = OU3DObjectRGBSizeRefiner::ComputeOverlapScore<float>(a1, (_QWORD *)(a1 + 296), (uint64_t *)(a1 + 320), (box3d *)&v214);
          OU3DObjectRGBSizeRefiner::DrawBoxImage(a1, (const box3d *)&v214, (uint64_t)v211, (const simd_float3x3 *)(a1 + 368), (simd_float4x4 *)(a1 + 416), 1);
          v77 = v76
              + (float)(OU3DObjectRGBSizeRefiner::ComputeOverlapScore<unsigned char>(a1, (_QWORD *)(a1 + 248), (uint64_t *)(a1 + 320), (box3d *)&v214)* 8.0);
          if (v77 == 0.0)
          {
            v78 = v230;
            if ((unint64_t)v230 < v231)
              goto LABEL_87;
            goto LABEL_100;
          }
          v81 = 0;
          v82 = 3.4028e38;
          do
          {
            v83 = vsubq_f32(*(float32x4_t *)(a4 + 48), *(float32x4_t *)((char *)&v214 + v81));
            v84 = vmulq_f32(v83, v83);
            v85 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2), vaddq_f32(v84, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1))).f32[0]);
            if (v85 < v82)
              v82 = v85;
            v81 += 16;
          }
          while (v81 != 128);
          box3dToCentroidSizeAngle(&v214, (uint64_t *)v210);
          *(_OWORD *)&v244.var6.var1 = v218;
          *(_OWORD *)&v244.var7 = v219;
          v245 = v220;
          v246 = v221;
          *(float32x4_t *)&v244.var1 = v214;
          *(_OWORD *)&v244.var3 = v215;
          *(_OWORD *)&v244.var5.var0 = v216;
          *(_OWORD *)&v244.var5.var2.var0 = v217;
          v86 = *(_QWORD *)((char *)v210[0] + 12);
          v87 = *((_DWORD *)v210[0] + 5);
          v88 = (float *)operator new(0xCuLL);
          v89 = 0;
          v90 = round(v82 + -1.0);
          v91 = fminf(fmaxf(v90, 2.0), 4.0);
          v181 = v88 + 1;
          v183 = v88;
          *(_QWORD *)v88 = v86;
          *((_DWORD *)v88 + 2) = v87;
          v185 = v88 + 2;
          v92 = 10.0;
          if (CFSTR("Screen") == v222)
            v92 = 15.0;
          do
          {
            v88[v89] = (float)(v88[v89] * v92) / v91;
            ++v89;
          }
          while (v89 != 3);
          v208 = 0;
          v207 = 0;
          v209 = 0;
          std::vector<std::vector<int>>::reserve((uint64_t *)&v207, 6uLL);
          memset(&v241, 0, 24);
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v241, v212, (uint64_t)v213, (v213 - (_BYTE *)v212) >> 2);
          v93 = v213;
          v94 = v212;
          v95 = operator new(0x18uLL);
          buf.var3 = v95 + 3;
          v95[2] = 0x500000003;
          *(_OWORD *)v95 = xmmword_229562528;
          buf.var1 = v95;
          *(_QWORD *)&buf.var2 = v95 + 3;
          memset(&buf.var4, 0, 24);
          v96 = (float *)operator new(0x18uLL);
          buf.var5.var1 = v96 + 6;
          *((_QWORD *)v96 + 2) = 0x400000002;
          *(_OWORD *)v96 = xmmword_229562540;
          buf.var4 = v96;
          buf.var5.var0 = v96 + 6;
          memset(&buf.var5.var2, 0, 24);
          v97 = operator new(0x18uLL);
          buf.var6.var1 = (unint64_t)(v97 + 3);
          v97[2] = 0x500000003;
          *(_OWORD *)v97 = xmmword_229562558;
          buf.var5.var2.var0 = (float *)v97;
          buf.var6.var0 = v97 + 3;
          memset(&buf.var6.var2, 0, 24);
          v98 = operator new(0x18uLL);
          *(_QWORD *)&buf.var8 = v98 + 3;
          v98[2] = 0x100000000;
          *(_OWORD *)v98 = xmmword_229562570;
          buf.var6.var2.var0 = (unint64_t)v98;
          buf.var7 = v98 + 3;
          *(_QWORD *)&v249 = 0;
          v248 = 0uLL;
          v99 = operator new(0x18uLL);
          *(_QWORD *)&v249 = v99 + 3;
          v99[2] = 0x400000002;
          *(_OWORD *)v99 = xmmword_229562588;
          *(_QWORD *)&v248 = v99;
          *((_QWORD *)&v248 + 1) = v99 + 3;
          v250 = 0;
          v251 = 0;
          *((_QWORD *)&v249 + 1) = 0;
          v100 = operator new(0x18uLL);
          v251 = (char *)(v100 + 3);
          v100[2] = 0x100000000;
          *(_OWORD *)v100 = xmmword_2295625A0;
          *((_QWORD *)&v249 + 1) = v100;
          v250 = v100 + 3;
          *(_QWORD *)&v200 = 0;
          v199 = 0uLL;
          v233 = &v199;
          LOBYTE(v234) = 0;
          v199.i64[0] = (uint64_t)operator new(0x90uLL);
          v199.i64[1] = v199.i64[0];
          *(_QWORD *)&v200 = v199.i64[0] + 144;
          v101 = 0;
          v102 = v93 - v94;
          v199.i64[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int> const*,std::vector<int> const*,std::vector<int>*>((uint64_t)&v200, (uint64_t)&buf, (uint64_t)&v252, v199.i64[0]);
          do
          {
            v103 = *(void **)((char *)&v249 + v101 + 8);
            if (v103)
            {
              *(id *)((char *)&v250 + v101) = v103;
              operator delete(v103);
            }
            v101 -= 24;
          }
          while (v101 != -144);
          v260 = xmmword_229562370;
          std::unordered_set<int>::unordered_set((uint64_t)&buf, (int *)&v260, 4);
          v259 = xmmword_2295623A0;
          std::unordered_set<int>::unordered_set((uint64_t)&buf.var5.var1, (int *)&v259, 4);
          v258 = xmmword_2295623B0;
          std::unordered_set<int>::unordered_set((uint64_t)&buf.var7, (int *)&v258, 4);
          obj = v102;
          v234 = 0;
          v233 = 0;
          v235 = 0;
          v236 = &v233;
          LOBYTE(v237) = 0;
          v104 = v102 >> 2;
          v233 = (float32x4_t *)operator new(0x78uLL);
          v234 = (uint64_t)v233;
          v235 = &v233[7].i8[8];
          v234 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<int>>,std::unordered_set<int> const*,std::unordered_set<int> const*,std::unordered_set<int>*>((uint64_t)&v235, (uint64_t)&buf, (uint64_t)&v249 + 8, (uint64_t)v233);
          for (i = 80; i != -40; i -= 40)
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&buf + i);
          LOBYTE(v236) = 0;
          std::vector<BOOL>::vector(&buf, 3uLL, (unsigned __int8 *)&v236);
          if ((int)v104 >= 1)
          {
            var1 = (unsigned int *)v241.var1;
            v107 = buf.var1;
            for (j = (obj >> 2); j; --j)
            {
              v110 = *var1++;
              v109 = v110;
              if (v110 <= 5)
              {
                if (((1 << v109) & 3) != 0)
                {
                  v111 = 1;
                }
                else
                {
                  if (((1 << v109) & 0x14) != 0)
                  {
                    *v107 |= 2uLL;
                    if (v109 != 3)
                      continue;
                  }
                  v111 = 4;
                }
                *v107 |= v111;
              }
            }
          }
          v112 = 0;
          LODWORD(v260) = 0;
          while (1)
          {
            if (((*(_QWORD *)((char *)buf.var1 + ((v112 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v112) & 1) != 0
              || !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v233->i64[5 * v112], (int *)&v260))
            {
              if (++v112 != 3)
                continue;
              v113 = 126 - 2 * __clz((uint64_t)(*(_QWORD *)&v241.var2 - (unint64_t)v241.var1) >> 2);
              v236 = (float32x4_t **)&v199;
              v237 = &v260;
              if (*(id *)&v241.var2 == v241.var1)
                v114 = 0;
              else
                v114 = v113;
              v115 = v208;
              if ((unint64_t)v208 >= v209)
              {
                v116 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v207, (uint64_t)&v241);
              }
              else
              {
                *v208 = 0;
                v115[1] = 0;
                v115[2] = 0;
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v115, v241.var1, *(uint64_t *)&v241.var2, (uint64_t)(*(_QWORD *)&v241.var2 - (unint64_t)v241.var1) >> 2);
                v116 = (uint64_t)(v115 + 3);
              }
              v208 = (_QWORD *)v116;
            }
            v112 = 0;
            v117 = v260;
            LODWORD(v260) = v260 + 1;
            if (v117 >= 5)
            {
              v118 = v207;
              if (v207 == v208 && v212 != v213)
              {
                if ((unint64_t)v207 >= v209)
                {
                  v119 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v207, (uint64_t)&v212);
                }
                else
                {
                  *v207 = 0;
                  v118[1] = 0;
                  v118[2] = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v118, v212, (uint64_t)v213, (v213 - (_BYTE *)v212) >> 2);
                  v119 = (uint64_t)(v118 + 3);
                }
                v208 = (_QWORD *)v119;
              }
              if (buf.var1)
                operator delete(buf.var1);
              obja = v77;
              buf.var1 = &v233;
              std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              buf.var1 = &v199;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              if (v241.var1)
              {
                *(_QWORD *)&v241.var2 = v241.var1;
                operator delete(v241.var1);
              }
              v127 = (int **)v207;
              v171 = (int **)v208;
              if (v207 != v208)
              {
                v128 = v91;
                v129 = obja;
                do
                {
                  *(_OWORD *)&buf.var6.var1 = v218;
                  *(_OWORD *)&buf.var7 = v219;
                  v248 = v220;
                  v249 = v221;
                  *(float32x4_t *)&buf.var1 = v214;
                  *(_OWORD *)&buf.var3 = v215;
                  *(_OWORD *)&buf.var5.var0 = v216;
                  *(_OWORD *)&buf.var5.var2.var0 = v217;
                  *(_OWORD *)&v241.var6.var1 = v218;
                  *(_OWORD *)&v241.var7 = v219;
                  v242 = v220;
                  v243 = v221;
                  *(float32x4_t *)&v241.var1 = v214;
                  *(_OWORD *)&v241.var3 = v215;
                  *(_OWORD *)&v241.var5.var0 = v216;
                  *(_OWORD *)&v241.var5.var2.var0 = v217;
                  v130 = obja;
                  v131 = *v127;
                  v132 = v127[1];
                  while (v131 != v132)
                  {
                    v133 = *v131;
                    v134 = v185;
                    if (*v131 >= 2)
                    {
                      v135 = v133 == 2 || v133 == 4;
                      v134 = v183;
                      if (!v135)
                        v134 = v181;
                    }
                    v136 = *v134;
                    if (*v134 > 0.0)
                    {
                      v137 = -v136;
                      do
                      {
                        v205 = 0u;
                        v206 = 0u;
                        v203 = 0u;
                        v204 = 0u;
                        v201 = 0u;
                        v202 = 0u;
                        v199 = 0u;
                        v200 = 0u;
                        v138 = v137 / 100.0 * v128;
                        *(float *)&v138 = v138;
                        Box3dEnlarge(*(int32x2_t *)&v138, (float32x4_t *)&buf, *v131, &v199);
                        OU3DObjectRGBSizeRefiner::DrawBoxImage(a1, (const box3d *)&v199, (uint64_t)v211, (const simd_float3x3 *)(a1 + 368), (simd_float4x4 *)(a1 + 416), 0);
                        v139 = OU3DObjectRGBSizeRefiner::ComputeOverlapScore<float>(a1, (_QWORD *)(a1 + 296), (uint64_t *)(a1 + 320), (box3d *)&v199);
                        OU3DObjectRGBSizeRefiner::DrawBoxImage(a1, (const box3d *)&v199, (uint64_t)v211, (const simd_float3x3 *)(a1 + 368), (simd_float4x4 *)(a1 + 416), 1);
                        v140 = v139
                             + (float)(OU3DObjectRGBSizeRefiner::ComputeOverlapScore<unsigned char>(a1, (_QWORD *)(a1 + 248), (uint64_t *)(a1 + 320), (box3d *)&v199)* 8.0);
                        if (v140 > v130)
                        {
                          *(_OWORD *)&v241.var6.var1 = v203;
                          *(_OWORD *)&v241.var7 = v204;
                          v242 = v205;
                          v243 = v206;
                          *(float32x4_t *)&v241.var1 = v199;
                          *(_OWORD *)&v241.var3 = v200;
                          v130 = v140;
                          *(_OWORD *)&v241.var5.var0 = v201;
                          *(_OWORD *)&v241.var5.var2.var0 = v202;
                        }
                        v137 = v137 + 1.0;
                      }
                      while (v137 < v136);
                    }
                    buf = v241;
                    v248 = v242;
                    v249 = v243;
                    ++v131;
                  }
                  if (v130 > v129)
                  {
                    v244 = v241;
                    v245 = v242;
                    v246 = v243;
                    v129 = v130;
                  }
                  v127 += 3;
                }
                while (v127 != v171);
              }
              OUBox3d::OUBox3d(&buf, (const OUBox3d *)v179);
              buf = v244;
              v248 = v245;
              v249 = v246;
              objc_msgSend(v164, "addObject:", *(_QWORD *)(v168 + 224 * v177 + 144));
              v37 = 7.0;
              v141 = v230;
              if ((unint64_t)v230 >= v231)
              {
                v142 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v229, &buf);
              }
              else
              {
                OUBox3d::OUBox3d(v230, &buf);
                v142 = (OUBox3d *)((char *)v141 + 224);
              }
              v230 = v142;

              if (__p)
                operator delete(__p);
              if (v254)
              {
                v255 = v254;
                operator delete(v254);
              }

              buf.var1 = &v207;
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              operator delete(v183);
              if (v210[0])
              {
                v210[1] = v210[0];
                operator delete(v210[0]);
              }
              goto LABEL_102;
            }
          }
        }
        objc_msgSend(v170, "objectAtIndexedSubscript:", v36);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v69, "refined_box_history");
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = objc_msgSend(v70, "count") == 0;

        if (v71)
        {
          v79 = v230;
          if ((unint64_t)v230 >= v231)
          {
            v80 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v229, (const OUBox3d *)v179);
          }
          else
          {
            OUBox3d::OUBox3d(v230, (const OUBox3d *)v179);
            v80 = (OUBox3d *)((char *)v79 + 224);
          }
          v230 = v80;
          goto LABEL_106;
        }
        OUBox3d::OUBox3d(&buf, (const OUBox3d *)v179);
        v72 = *(_QWORD **)(a1 + 176);
        if (!v72)
          goto LABEL_33;
        while (1)
        {
          v73 = v72[4];
          if ((unint64_t)v222 >= v73)
            break;
LABEL_32:
          v72 = (_QWORD *)*v72;
          if (!v72)
            goto LABEL_33;
        }
        if (v73 < (unint64_t)v222)
          break;
        v123 = v223;
        v124 = v224;
        if (v223 != v224)
        {
          while (!objc_msgSend(*(id *)(v123 + 144), "isEqual:", *(_QWORD *)(v168 + 224 * v177 + 144)))
          {
            v123 += 224;
            if (v123 == v124)
              goto LABEL_33;
          }
          OUBox3d::operator=((uint64_t)&buf, (__int128 *)v123);
        }
LABEL_33:
        v74 = v230;
        if ((unint64_t)v230 >= v231)
        {
          v75 = (OUBox3d *)std::vector<OUBox3d>::__push_back_slow_path<OUBox3d const&>(&v229, &buf);
        }
        else
        {
          OUBox3d::OUBox3d(v230, &buf);
          v75 = (OUBox3d *)((char *)v74 + 224);
        }
        v230 = v75;

        if (__p)
          operator delete(__p);
        if (v254)
        {
          v255 = v254;
          operator delete(v254);
        }

LABEL_106:
        v36 = v177 + 1;
        if (v177 + 1 == v167)
        {
LABEL_148:
          *(_DWORD *)(a1 + 192) = 0;
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_INFO))
          {
            LOWORD(buf.var1) = 0;
            _os_log_impl(&dword_2294C8000, oslog, OS_LOG_TYPE_INFO, "Refine Ends", (uint8_t *)&buf, 2u);
          }

          kdebug_trace();
          v144 = (OUVizTool *)kdebug_trace();
          if (v228)
          {
            v145 = OUVizTool::Get(v144);
            std::string::basic_string[abi:ne180100]<0>(&buf, "rgb_refine");
            OUVizTool::SaveBoxes((uint64_t)v145, (uint64_t)&buf, &v229);
            if (SHIBYTE(buf.var3) < 0)
              operator delete(buf.var1);
          }
          boxesToObjects(&v229, CFSTR("rawdetection"), 1u);
          v197 = 0u;
          v198 = 0u;
          v195 = 0u;
          v196 = 0u;
          objb = (id)objc_claimAutoreleasedReturnValue();
          v169 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v195, v240, 16);
          if (v169)
          {
            v172 = *(_QWORD *)v196;
            do
            {
              for (k = 0; k != v169; ++k)
              {
                if (*(_QWORD *)v196 != v172)
                  objc_enumerationMutation(objb);
                v146 = *(void **)(*((_QWORD *)&v195 + 1) + 8 * k);
                v191 = 0u;
                v192 = 0u;
                v193 = 0u;
                v194 = 0u;
                v180 = v170;
                v184 = (void *)objc_msgSend(v180, "countByEnumeratingWithState:objects:count:", &v191, v239, 16);
                if (v184)
                {
                  v182 = *(_QWORD *)v192;
                  do
                  {
                    for (m = 0; m != v184; m = (char *)m + 1)
                    {
                      if (*(_QWORD *)v192 != v182)
                        objc_enumerationMutation(v180);
                      v147 = *(void **)(*((_QWORD *)&v191 + 1) + 8 * (_QWORD)m);
                      objc_msgSend(v146, "identifier");
                      v148 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v147, "identifier");
                      v149 = (void *)objc_claimAutoreleasedReturnValue();
                      v150 = objc_msgSend(v148, "isEqual:", v149);

                      if (v150)
                      {
                        v189 = 0u;
                        v190 = 0u;
                        v187 = 0u;
                        v188 = 0u;
                        objc_msgSend(v147, "boxesDict");
                        v151 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v151, "allKeys");
                        v152 = (void *)objc_claimAutoreleasedReturnValue();

                        v153 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v187, v238, 16);
                        if (v153)
                        {
                          v154 = *(_QWORD *)v188;
                          do
                          {
                            for (n = 0; n != v153; ++n)
                            {
                              if (*(_QWORD *)v188 != v154)
                                objc_enumerationMutation(v152);
                              v156 = *(void **)(*((_QWORD *)&v187 + 1) + 8 * n);
                              if ((objc_msgSend(v156, "isEqualToString:", CFSTR("rawdetection")) & 1) == 0)
                              {
                                v249 = 0u;
                                v248 = 0u;
                                memset(&buf, 0, sizeof(buf));
                                objc_msgSend(v147, "boxesDict");
                                v157 = (void *)objc_claimAutoreleasedReturnValue();
                                objc_msgSend(v157, "objectForKey:", v156);
                                v158 = (void *)objc_claimAutoreleasedReturnValue();
                                box3dFromNSArray(v158, (uint64_t)&buf);

                                objc_msgSend(v146, "addBoxesDict:forDictKey:", &buf, v156);
                              }
                            }
                            v153 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v187, v238, 16);
                          }
                          while (v153);
                        }

                        objc_msgSend(v147, "refined_box_history");
                        v159 = (void *)objc_claimAutoreleasedReturnValue();
                        v160 = (void *)objc_msgSend(v159, "copy");
                        objc_msgSend(v146, "setRefined_box_history:", v160);

                      }
                    }
                    v184 = (void *)objc_msgSend(v180, "countByEnumeratingWithState:objects:count:", &v191, v239, 16);
                  }
                  while (v184);
                }

              }
              v169 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v195, v240, 16);
            }
            while (v169);
          }

          v143 = objb;
          buf.var1 = &v223;
          std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          goto LABEL_182;
        }
      }
      ++v72;
      goto LABEL_32;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      OU3DObjectRGBSizeRefiner::RefineObjects(v15);

    v143 = v170;
LABEL_182:
    std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy((uint64_t)&v226, v227);
    if (v225)
      operator delete(v225);
    buf.var1 = &v229;
    std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    buf.var1 = v232;
    std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  }
  else
  {
    v143 = v170;
  }

  return v143;
}

void sub_22954B74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44,void *a45)
{

  STACK[0x6A0] = (unint64_t)&STACK[0x380];
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x6A0]);
  std::__tree<std::__value_type<NSString * {__strong},float>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},float>,CompareNSString,true>,std::allocator<std::__value_type<NSString * {__strong},float>>>::destroy(a14, (_QWORD *)STACK[0x3B8]);
  if (STACK[0x398])
    operator delete((void *)STACK[0x398]);
  STACK[0x6A0] = (unint64_t)&STACK[0x3C8];
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x6A0]);
  STACK[0x6A0] = (unint64_t)&STACK[0x3E0];
  std::vector<OUBox3d>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x6A0]);

  _Unwind_Resume(a1);
}

uint64_t OU3DObjectRGBSizeRefiner::IsOUFrameValid(OU3DObjectRGBSizeRefiner *this, _OUFrame *a2)
{
  OU3DObjectRGBSizeRefiner *v2;
  __CVBuffer *v3;
  uint64_t v4;
  __CVBuffer *v5;
  size_t Width;
  size_t Height;
  size_t v8;
  size_t v9;
  BOOL v10;
  uint64_t v13;

  v2 = this;
  v3 = (__CVBuffer *)-[OU3DObjectRGBSizeRefiner sceneColorBuffer](v2, "sceneColorBuffer");
  if (CVPixelBufferGetDataSize((CVPixelBufferRef)-[OU3DObjectRGBSizeRefiner semanticLabelBufferOnWideCamera](v2, "semanticLabelBufferOnWideCamera")))v4 = -[OU3DObjectRGBSizeRefiner semanticLabelBufferOnWideCamera](v2, "semanticLabelBufferOnWideCamera");
  else
    v4 = -[OU3DObjectRGBSizeRefiner semanticLabelBuffer](v2, "semanticLabelBuffer");
  v5 = (__CVBuffer *)v4;
  Width = CVPixelBufferGetWidth(v3);
  Height = CVPixelBufferGetHeight(v3);
  v8 = CVPixelBufferGetWidth(v5);
  v9 = CVPixelBufferGetHeight(v5);
  if (Width)
    v10 = Height == 0;
  else
    v10 = 1;
  v13 = !v10 && v8 != 0 && v9 != 0;

  return v13;
}

void sub_22954BCB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL OU3DObjectRGBSizeRefiner::ShouldDrawEdge(uint64_t a1, int a2, int *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD **)a5;
  v6 = *(_QWORD **)(a5 + 8);
  if (*(_QWORD **)a5 == v6)
    return 0;
  v8 = *a3;
  v7 = a3[1];
  while (*v5 != __PAIR64__(v7, v8) && *v5 != __PAIR64__(v8, v7))
  {
    if (++v5 == v6)
      return 0;
  }
  return !a2
      || ((*(_QWORD *)(*a4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0
      || ((*(_QWORD *)(*a4 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0;
}

void OU3DObjectRGBSizeRefiner::DrawBoxImage(uint64_t a1, const box3d *a2, uint64_t a3, const simd_float3x3 *a4, simd_float4x4 *a5, int a6)
{
  OU3DObjectRGBSizeRefiner *v12;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ShouldDrawEdge;
  char *v28;
  uint64_t v29;
  int *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  void *__p;
  void *v35[3];
  void *v36;
  void *v37[3];
  void *v38;
  float32x4_t v39;
  void *v40[3];
  _QWORD *v41;
  char v42;
  void *v43;
  simd_float4x4 v44;
  simd_float4x4 v45;

  bzero(*(void **)(a1 + 320), 0xC000uLL);
  *(double *)v13.i64 = OU3DObjectRGBSizeRefiner::GenerateProjectionMatrix(v12, a4, a5);
  v44.columns[0] = v13;
  v44.columns[1] = v14;
  v44.columns[2] = v15;
  v44.columns[3] = v16;
  OU3DObjectRGBSizeRefiner::ProjectToImage((OU3DObjectRGBSizeRefiner *)a1, &v44, a2, (uint64_t)v40);
  if (!v42)
    goto LABEL_25;
  v45 = __invert_f4(*a5);
  v39 = (float32x4_t)v45.columns[3];
  OU3DObjectRGBSizeRefiner::GetCornerVisibility((uint64_t)a2, &v39, v37);
  std::vector<BOOL>::vector(&v36, (uint64_t)v37);
  std::vector<BOOL>::vector(v35, (uint64_t)&v38);
  v33 = 0;
  std::vector<BOOL>::vector(&__p, 8uLL, &v33);
  v17 = 0;
  v18 = (_QWORD *)(a1 + 320);
  v19 = v41;
  v20 = (char *)__p;
  v21 = v36;
  do
  {
    v22 = v17 >> 6;
    v23 = 1 << v17;
    if ((v19[v17 >> 6] & (1 << v17)) != 0)
    {
      v24 = (uint64_t *)&v20[8 * v22];
LABEL_5:
      v25 = *v24 | v23;
      goto LABEL_8;
    }
    v26 = v21[v22];
    v24 = (uint64_t *)&v20[8 * v22];
    if ((v26 & v23) == 0)
      goto LABEL_5;
    v25 = *v24 & ~v23;
LABEL_8:
    *v24 = v25;
    ++v17;
  }
  while (v17 != 8);
  ShouldDrawEdge = (uint64_t)operator new(0x60uLL);
  v28 = (char *)ShouldDrawEdge;
  v29 = 0;
  *(_OWORD *)ShouldDrawEdge = xmmword_2295623C0;
  *(_OWORD *)(ShouldDrawEdge + 16) = xmmword_2295623D0;
  *(_OWORD *)(ShouldDrawEdge + 32) = xmmword_2295623E0;
  *(_OWORD *)(ShouldDrawEdge + 48) = xmmword_2295623F0;
  *(_OWORD *)(ShouldDrawEdge + 64) = xmmword_229562250;
  *(_OWORD *)(ShouldDrawEdge + 80) = xmmword_229562260;
  do
  {
    v30 = (int *)&v28[v29];
    v31 = *(int *)&v28[v29];
    if (((*(_QWORD *)((char *)__p + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
    {
      v32 = v30[1];
      if (((*(_QWORD *)((char *)__p + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      {
        ShouldDrawEdge = OU3DObjectRGBSizeRefiner::ShouldDrawEdge(ShouldDrawEdge, a6, v30, v35, a3);
        if ((_DWORD)ShouldDrawEdge)
          OU3DObjectRGBSizeRefiner::DrawEdge(*(float32x2_t *)((char *)v40[0] + 8 * v31), *(float32x2_t *)((char *)v40[0] + 8 * v32), ShouldDrawEdge, v18);
      }
    }
    v29 += 8;
  }
  while (v29 != 96);
  operator delete(v28);
  if (__p)
    operator delete(__p);
  if (v35[0])
    operator delete(v35[0]);
  if (v36)
    operator delete(v36);
  if (v38)
    operator delete(v38);
  if (v37[0])
    operator delete(v37[0]);
LABEL_25:
  if (v43)
    operator delete(v43);
  if (v41)
    operator delete(v41);
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
}

void sub_22954BFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  OU3DObjectRGBSizeRefiner::CornerVisibilityInfo::~CornerVisibilityInfo((OU3DObjectRGBSizeRefiner::CornerVisibilityInfo *)&a19);
  OU3DObjectRGBSizeRefiner::ProjectionResult::~ProjectionResult((OU3DObjectRGBSizeRefiner::ProjectionResult *)&a27);
  _Unwind_Resume(a1);
}

void OU3DObjectRGBSizeRefiner::DrawEdge(float32x2_t a1, float32x2_t a2, uint64_t a3, _QWORD *a4)
{
  float32x2_t v4;
  int v5;
  unint64_t v6;
  int v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int v13;
  float32x2_t v14;
  unint64_t v15;

  if (a4)
  {
    v4 = vsub_f32(a1, a2);
    v5 = (int)sqrtf(vaddv_f32(vmul_f32(v4, v4)));
    if ((v5 & 0x80000000) == 0)
    {
      v6 = 0;
      v7 = 0;
      v8 = vsub_f32(a2, a1);
      v9 = vmul_f32(v8, v8);
      v9.i32[0] = vadd_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1)).u32[0];
      v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
      v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
      v12 = vmul_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
      v13 = v5 + 1;
      do
      {
        v14 = vmla_n_f32(a1, v12, (float)v7);
        if ((int)v14.f32[0] <= 0xFF)
        {
          v15 = ((int)v14.f32[1] << 8) + (unint64_t)(int)v14.f32[0];
          if ((int)v14.f32[1] <= 0xBF && v6 != v15)
          {
            *(_BYTE *)(*a4 + v15) = -1;
            v6 = ((int)v14.f32[1] << 8) + (unint64_t)(int)v14.f32[0];
          }
        }
        ++v7;
      }
      while (v13 != v7);
    }
  }
}

id OU3DObjectRGBSizeRefiner::GenerateEmptyMTLTexture(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *v10;
  IOSurfaceRef v11;
  void *v12;
  void *v13;
  _QWORD v15[5];
  _QWORD v16[6];

  v16[5] = *MEMORY[0x24BDAC8D0];
  v15[0] = *MEMORY[0x24BDD8FD0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", *a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = v6;
  v15[1] = *MEMORY[0x24BDD8EB0];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", a2[1]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *MEMORY[0x24BDD8E30];
  v16[1] = v7;
  v16[2] = &unk_24F24AC90;
  v9 = *MEMORY[0x24BDD8EF8];
  v15[2] = v8;
  v15[3] = v9;
  v15[4] = *MEMORY[0x24BDD8EE8];
  v16[3] = &unk_24F24ACA8;
  v16[4] = &unk_24F24ACC0;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v16, v15, 5);
  v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  v11 = IOSurfaceCreate(v10);
  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", a3, (int)*a2, (int)a2[1], 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setUsage:", 3);
  v13 = (void *)objc_msgSend(*(id *)(a1 + 32), "newTextureWithDescriptor:iosurface:plane:", v12, v11, 0);
  CFRelease(v11);

  return v13;
}

void sub_22954C270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *_ZNSt3__135__uninitialized_allocator_copy_implB8ne180100INS_9allocatorINS_6vectorIDv2_iNS1_IS3_EEEEEEPKS5_S8_PS5_EET2_RT_T0_T1_SA_(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      _ZNSt3__16vectorIDv2_iNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  _ZNSt3__128__exception_guard_exceptionsINS_29_AllocatorDestroyRangeReverseINS_9allocatorINS_6vectorIDv2_iNS2_IS4_EEEEEEPS6_EEED2B8ne180100Ev((uint64_t)v8);
  return v4;
}

void sub_22954C484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _ZNSt3__128__exception_guard_exceptionsINS_29_AllocatorDestroyRangeReverseINS_9allocatorINS_6vectorIDv2_iNS2_IS4_EEEEEEPS6_EEED2B8ne180100Ev((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__16vectorIDv2_iNS_9allocatorIS1_EEE16__init_with_sizeB8ne180100IPS1_S6_EEvT_T0_m(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22954C4F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__128__exception_guard_exceptionsINS_29_AllocatorDestroyRangeReverseINS_9allocatorINS_6vectorIDv2_iNS2_IS4_EEEEEEPS6_EEED2B8ne180100Ev(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::RefinePriority *,false>(int *a1, int *a2, uint64_t a3, char a4)
{
  int *i;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  unint64_t v23;
  int *k;
  BOOL v25;
  int v26;
  int v27;
  int *v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  int v44;
  int *j;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  int *v55;
  int v56;
  BOOL v57;
  int v58;
  int v59;
  int *v60;
  BOOL v62;
  uint64_t v63;
  int *v64;
  int *v65;
  int v66;
  int v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  _OWORD *v73;
  int v74;
  BOOL v75;
  int v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  BOOL v83;
  int *v84;
  int v85;
  int v86;
  int *v87;
  int v88;
  int v89;
  int *v90;
  int v91;
  BOOL v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  BOOL v98;
  int *v99;
  int v100;
  int v101;
  BOOL v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  BOOL v112;
  int *v113;
  int v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  int *v119;
  int v120;
  int v121;
  int v122;
  BOOL v123;
  uint64_t v124;
  int *v125;
  unint64_t v126;
  BOOL v127;
  int v128;
  int *v129;
  int v130;
  int v131;
  int v132;
  BOOL v133;
  uint64_t v134;
  int *v135;
  int v136;
  BOOL v137;
  int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::RefinePriority *,0>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  __n128 result;
  BOOL v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;

  v11 = *a5 <= *a4;
  if (*a5 == *a4)
  {
    v12 = a5[1];
    v13 = a4[1];
    v11 = v12 <= v13;
    if (v12 == v13)
      v11 = a5[2] <= a4[2];
  }
  if (!v11)
  {
    result = *(__n128 *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(__n128 *)a5 = result;
    v14 = *a4 <= *a3;
    if (*a4 == *a3)
    {
      v15 = a4[1];
      v16 = a3[1];
      v14 = v15 <= v16;
      if (v15 == v16)
        v14 = a4[2] <= a3[2];
    }
    if (!v14)
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(__n128 *)a4 = result;
      v17 = *a3 <= *a2;
      if (*a3 == *a2)
      {
        v18 = a3[1];
        v19 = a2[1];
        v17 = v18 <= v19;
        if (v18 == v19)
          v17 = a3[2] <= a2[2];
      }
      if (!v17)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        v20 = *a2 <= *a1;
        if (*a2 == *a1)
        {
          v21 = a2[1];
          v22 = a1[1];
          v20 = v21 <= v22;
          if (v21 == v22)
            v20 = a2[2] <= a1[2];
        }
        if (!v20)
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::RefinePriority *>(int *result, int *a2, int *a3)
{
  int v3;
  BOOL v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  __int128 v10;
  BOOL v11;
  int v12;
  int v13;
  __int128 v14;
  BOOL v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  BOOL v20;
  int v21;
  int v22;

  v3 = *a2;
  v4 = *a2 <= *result;
  if (*a2 == *result)
  {
    v5 = a2[1];
    v6 = result[1];
    v4 = v5 <= v6;
    if (v5 == v6)
      v4 = a2[2] <= result[2];
  }
  if (v4)
  {
    v11 = *a3 <= v3;
    if (*a3 == v3)
    {
      v12 = a3[1];
      v13 = a2[1];
      v11 = v12 <= v13;
      if (v12 == v13)
        v11 = a3[2] <= a2[2];
    }
    if (!v11)
    {
      v14 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v14;
      v15 = *a2 <= *result;
      if (*a2 == *result)
      {
        v16 = a2[1];
        v17 = result[1];
        v15 = v16 <= v17;
        if (v16 == v17)
          v15 = a2[2] <= result[2];
      }
      if (!v15)
      {
        v18 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v18;
      }
    }
  }
  else
  {
    v7 = *a3 <= v3;
    if (*a3 == v3)
    {
      v8 = a3[1];
      v9 = a2[1];
      v7 = v8 <= v9;
      if (v8 == v9)
        v7 = a3[2] <= a2[2];
    }
    if (!v7)
    {
      v10 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
LABEL_24:
      *(_OWORD *)a3 = v10;
      return result;
    }
    v19 = *(_OWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)a2 = v19;
    v20 = *a3 <= *a2;
    if (*a3 == *a2)
    {
      v21 = a3[1];
      v22 = a2[1];
      v20 = v21 <= v22;
      if (v21 == v22)
        v20 = a3[2] <= a2[2];
    }
    if (!v20)
    {
      v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_24;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::RefinePriority *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int *v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  __int128 v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = *(a2 - 4);
      v8 = v7 <= *a1;
      if (v7 == *a1)
      {
        v9 = *(a2 - 3);
        v10 = a1[1];
        v8 = v9 <= v10;
        if (v9 == v10)
          v8 = *(a2 - 2) <= a1[2];
      }
      if (!v8)
      {
        v11 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)v6 = v11;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v12 = a1 + 8;
      v13 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  do
  {
    v16 = *v13;
    if (*v13 == *v12)
    {
      v17 = v13[1];
      v18 = v12[1];
      if (v17 == v18)
      {
        if (v13[2] <= v12[2])
          goto LABEL_27;
      }
      else if (v17 <= v18)
      {
        goto LABEL_27;
      }
    }
    else
    {
      if (v16 <= *v12)
        goto LABEL_27;
      v17 = v13[1];
    }
    v19 = *((_QWORD *)v13 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v12;
    v20 = (uint64_t)a1;
    if (v12 == a1)
      goto LABEL_26;
    v21 = v14;
    while (1)
    {
      v22 = *(int *)((char *)a1 + v21 + 16);
      v23 = v16 <= v22;
      if (v16 == v22)
      {
        v24 = *(int *)((char *)a1 + v21 + 20);
        v23 = v17 <= v24;
        if (v17 == v24)
        {
          if ((int)v19 <= *(int *)((char *)a1 + v21 + 24))
          {
            v20 = (uint64_t)a1 + v21 + 32;
            goto LABEL_26;
          }
          goto LABEL_23;
        }
      }
      if (v23)
        break;
LABEL_23:
      v12 -= 4;
      *(_OWORD *)((char *)a1 + v21 + 32) = *(_OWORD *)((char *)a1 + v21 + 16);
      v21 -= 16;
      if (v21 == -32)
      {
        v20 = (uint64_t)a1;
        goto LABEL_26;
      }
    }
    v20 = (uint64_t)v12;
LABEL_26:
    *(_DWORD *)v20 = v16;
    *(_DWORD *)(v20 + 4) = v17;
    *(_QWORD *)(v20 + 8) = v19;
    if (++v15 == 8)
      return v13 + 4 == a2;
LABEL_27:
    v12 = v13;
    v14 += 16;
    v13 += 4;
  }
  while (v13 != a2);
  return 1;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,`anonymous namespace'::RefinePriority *>(int *a1, int *a2, int *a3, int *a4)
{
  __n128 result;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;

  v9 = *a4 <= *a3;
  if (*a4 == *a3)
  {
    v10 = a4[1];
    v11 = a3[1];
    v9 = v10 <= v11;
    if (v10 == v11)
      v9 = a4[2] <= a3[2];
  }
  if (!v9)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    v12 = *a3 <= *a2;
    if (*a3 == *a2)
    {
      v13 = a3[1];
      v14 = a2[1];
      v12 = v13 <= v14;
      if (v13 == v14)
        v12 = a3[2] <= a2[2];
    }
    if (!v12)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      v15 = *a2 <= *a1;
      if (*a2 == *a1)
      {
        v16 = a2[1];
        v17 = a1[1];
        v15 = v16 <= v17;
        if (v16 == v17)
          v15 = a2[2] <= a1[2];
      }
      if (!v15)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t std::vector<std::vector<int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_22954D5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<int>>,std::unordered_set<int> const*,std::unordered_set<int> const*,std::unordered_set<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::unordered_set<int>::unordered_set(a4 + v7, a2 + v7);
      v7 += 40;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_22954D654(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 40;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + v2);
      v2 -= 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, i + 4, i + 4);
  return a1;
}

void sub_22954D6D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::SidePermutation(std::vector<int> const&)::$_0 &,int *,false>(uint64_t result, int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int *v25;
  uint64_t v26;
  int v27;
  int v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int *v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int *v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int *v101;
  uint64_t *v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  int v106;
  int v107;
  int *v108;
  int v109;
  int v110;
  int v111;
  int *v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  int64_t v120;
  int64_t v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  int *v133;
  int v134;
  int v135;
  int v136;
  int *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t *v152;
  uint64_t *v153;
  int *v154;
  int *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  int *v165;
  int v166;
  int v167;
  uint64_t v168;
  int v169;
  int *v170;
  uint64_t v171;
  int v172;
  int v173;
  int *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int *v181;
  int v182;
  int v183;
  int *v184;
  uint64_t v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int *v190;

  v9 = (int *)result;
LABEL_2:
  v190 = a2 - 1;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v98 = *(a2 - 1);
        v99 = *v10;
        do
        {
          v100 = *(_DWORD *)(*(_QWORD *)(**a3 + 24 * *(int *)a3[1]) + 4 * v95);
          if (v100 == v98)
            v97 = v95;
          if (v100 == v99)
            v96 = v95;
          ++v95;
        }
        while (v95 != 6);
        if (v97 < v96)
        {
          *v10 = v98;
          *(a2 - 1) = v99;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v101 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v102 = a3[1];
                v103 = **a3;
                v104 = v10;
                do
                {
                  v105 = 0;
                  v106 = 0;
                  v107 = 0;
                  v108 = v104;
                  v104 = v101;
                  v110 = *v108;
                  v109 = v108[1];
                  result = *(_QWORD *)(v103 + 24 * *(int *)v102);
                  do
                  {
                    v111 = *(_DWORD *)(result + 4 * v105);
                    if (v111 == v109)
                      v107 = v105;
                    if (v111 == v110)
                      v106 = v105;
                    ++v105;
                  }
                  while (v105 != 6);
                  if (v107 < v106)
                  {
                    v112 = v104;
                    while (1)
                    {
                      *v112 = v110;
                      if (v108 == v10)
                        break;
                      v112 = v108;
                      result = 0;
                      v113 = 0;
                      v114 = 0;
                      v115 = *--v108;
                      v110 = v115;
                      do
                      {
                        v116 = *(_DWORD *)(*(_QWORD *)(v103 + 24 * *(int *)v102) + 4 * result);
                        if (v116 == v109)
                          v114 = result;
                        if (v116 == v110)
                          v113 = result;
                        ++result;
                      }
                      while (result != 6);
                      if (v114 >= v113)
                        goto LABEL_158;
                    }
                    v112 = v10;
LABEL_158:
                    *v112 = v109;
                  }
                  v101 = v104 + 1;
                }
                while (v104 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v175 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v176 = a3[1];
              v177 = **a3;
              do
              {
                v178 = 0;
                v179 = 0;
                v180 = 0;
                v181 = v9;
                v9 = v175;
                v183 = *v181;
                v182 = v181[1];
                do
                {
                  result = *(unsigned int *)(*(_QWORD *)(v177 + 24 * *(int *)v176) + 4 * v178);
                  if ((_DWORD)result == v182)
                    v180 = v178;
                  if ((_DWORD)result == v183)
                    v179 = v178;
                  ++v178;
                }
                while (v178 != 6);
                if (v180 < v179)
                {
                  v184 = v9;
                  do
                  {
                    v185 = 0;
                    v186 = 0;
                    v187 = 0;
                    *v184 = v183;
                    v184 = v181;
                    v188 = *--v181;
                    v183 = v188;
                    result = *(_QWORD *)(v177 + 24 * *(int *)v176);
                    do
                    {
                      v189 = *(_DWORD *)(result + 4 * v185);
                      if (v189 == v182)
                        v187 = v185;
                      if (v189 == v183)
                        v186 = v185;
                      ++v185;
                    }
                    while (v185 != 6);
                  }
                  while (v187 < v186);
                  *v184 = v182;
                }
                v175 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v117 = (v12 - 2) >> 1;
            v118 = *a3;
            v119 = a3[1];
            v120 = v117;
            do
            {
              v121 = v120;
              if (v117 >= v120)
              {
                v122 = (2 * v120) | 1;
                v123 = &v10[v122];
                if (2 * v121 + 2 >= (uint64_t)v12)
                {
                  v127 = *v118;
                  v128 = *(_QWORD *)(*v118 + 24 * *(int *)v119);
                }
                else
                {
                  v124 = 0;
                  v125 = 0;
                  v126 = 0;
                  v127 = *v118;
                  v128 = *(_QWORD *)(*v118 + 24 * *(int *)v119);
                  do
                  {
                    v129 = *(_DWORD *)(v128 + 4 * v124);
                    if (v129 == *v123)
                      v126 = v124;
                    if (v129 == v123[1])
                      v125 = v124;
                    ++v124;
                  }
                  while (v124 != 6);
                  if (v126 < v125)
                  {
                    ++v123;
                    v122 = 2 * v121 + 2;
                  }
                }
                v130 = 0;
                v131 = 0;
                v132 = 0;
                v133 = &v10[v121];
                v134 = *v123;
                v135 = *v133;
                do
                {
                  v136 = *(_DWORD *)(v128 + 4 * v130);
                  if (v136 == v134)
                    v132 = v130;
                  if (v136 == v135)
                    v131 = v130;
                  ++v130;
                }
                while (v130 != 6);
                if (v132 >= v131)
                {
                  do
                  {
                    v137 = v123;
                    *v133 = v134;
                    if (v117 < v122)
                      break;
                    v138 = (2 * v122) | 1;
                    v123 = &v10[v138];
                    v122 = 2 * v122 + 2;
                    v139 = *(_DWORD *)v119;
                    if (v122 >= (uint64_t)v12)
                    {
                      v143 = *(_QWORD *)(v127 + 24 * v139);
                      v122 = v138;
                    }
                    else
                    {
                      v140 = 0;
                      v141 = 0;
                      v142 = 0;
                      v143 = *(_QWORD *)(v127 + 24 * v139);
                      do
                      {
                        v144 = *(_DWORD *)(v143 + 4 * v140);
                        if (v144 == *v123)
                          v142 = v140;
                        if (v144 == v123[1])
                          v141 = v140;
                        ++v140;
                      }
                      while (v140 != 6);
                      if (v142 >= v141)
                        v122 = v138;
                      else
                        ++v123;
                    }
                    v145 = 0;
                    v146 = 0;
                    v147 = 0;
                    v134 = *v123;
                    do
                    {
                      v148 = *(_DWORD *)(v143 + 4 * v145);
                      if (v148 == v134)
                        v147 = v145;
                      if (v148 == v135)
                        v146 = v145;
                      ++v145;
                    }
                    while (v145 != 6);
                    v133 = v137;
                  }
                  while (v147 >= v146);
                  *v137 = v135;
                }
              }
              v120 = v121 - 1;
            }
            while (v121);
            v149 = (unint64_t)v11 >> 2;
            do
            {
              v150 = 0;
              v151 = *v10;
              v153 = *a3;
              v152 = a3[1];
              v154 = v10;
              do
              {
                v155 = &v154[v150 + 1];
                result = 2 * v150;
                v156 = (2 * v150) | 1;
                v157 = 2 * v150 + 2;
                if (v157 < v149)
                {
                  v158 = 0;
                  LODWORD(result) = 0;
                  v159 = 0;
                  do
                  {
                    v160 = *(_DWORD *)(*(_QWORD *)(*v153 + 24 * *(int *)v152) + 4 * v158);
                    if (v160 == *v155)
                      v159 = v158;
                    if (v160 == v155[1])
                      result = v158;
                    else
                      result = result;
                    ++v158;
                  }
                  while (v158 != 6);
                  if (v159 < (int)result)
                  {
                    ++v155;
                    v156 = v157;
                  }
                }
                *v154 = *v155;
                v154 = v155;
                v150 = v156;
              }
              while (v156 <= (uint64_t)((unint64_t)(v149 - 2) >> 1));
              if (v155 == --a2)
              {
                *v155 = v151;
              }
              else
              {
                *v155 = *a2;
                *a2 = v151;
                v161 = (char *)v155 - (char *)v10 + 4;
                if (v161 >= 5)
                {
                  v162 = 0;
                  v163 = 0;
                  LODWORD(result) = 0;
                  v164 = (((unint64_t)v161 >> 2) - 2) >> 1;
                  v165 = &v10[v164];
                  v166 = *v165;
                  v167 = *v155;
                  v168 = *v153;
                  do
                  {
                    v169 = *(_DWORD *)(*(_QWORD *)(v168 + 24 * *(int *)v152) + 4 * v162);
                    if (v169 == v166)
                      result = v162;
                    else
                      result = result;
                    if (v169 == v167)
                      v163 = v162;
                    ++v162;
                  }
                  while (v162 != 6);
                  if ((int)result < v163)
                  {
                    do
                    {
                      v170 = v165;
                      *v155 = v166;
                      if (!v164)
                        break;
                      v171 = 0;
                      LODWORD(result) = 0;
                      v172 = 0;
                      v164 = (v164 - 1) >> 1;
                      v165 = &v10[v164];
                      v166 = *v165;
                      do
                      {
                        v173 = *(_DWORD *)(*(_QWORD *)(v168 + 24 * *(int *)v152) + 4 * v171);
                        if (v173 == v166)
                          v172 = v171;
                        if (v173 == v167)
                          result = v171;
                        else
                          result = result;
                        ++v171;
                      }
                      while (v171 != 6);
                      v155 = v170;
                    }
                    while (v172 < (int)result);
                    *v170 = v167;
                  }
                }
              }
            }
            while (v149-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x201)
        {
        }
        else
        {
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = a3[1];
        v18 = *(_DWORD *)v17;
        v19 = **a3;
        if ((a5 & 1) == 0)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          v20 = *(_QWORD *)(v19 + 24 * v18);
          do
          {
            v24 = *(_DWORD *)(v20 + 4 * v21);
            if (v24 == *(v9 - 1))
              v23 = v21;
            if (v24 == v16)
              v22 = v21;
            ++v21;
          }
          while (v21 != 6);
          if (v23 < v22)
            goto LABEL_18;
          v61 = 0;
          v62 = 0;
          v63 = 0;
          do
          {
            v64 = *(_DWORD *)(v20 + 4 * v61);
            if (v64 == v16)
              v63 = v61;
            if (v64 == *v190)
              v62 = v61;
            ++v61;
          }
          while (v61 != 6);
          v10 = v9;
          if (v63 >= v62)
          {
            do
            {
              if (++v10 >= a2)
                break;
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v74 = *(_DWORD *)(v20 + 4 * v71);
                if (v74 == v16)
                  v73 = v71;
                if (v74 == *v10)
                  v72 = v71;
                ++v71;
              }
              while (v71 != 6);
            }
            while (v73 >= v72);
          }
          else
          {
            v10 = v9;
            do
            {
              v65 = 0;
              v66 = 0;
              v67 = 0;
              v69 = v10[1];
              ++v10;
              v68 = v69;
              do
              {
                v70 = *(_DWORD *)(v20 + 4 * v65);
                if (v70 == v16)
                  v67 = v65;
                if (v70 == v68)
                  v66 = v65;
                ++v65;
              }
              while (v65 != 6);
            }
            while (v67 >= v66);
          }
          v75 = a2;
          if (v10 < a2)
          {
            v75 = a2;
            do
            {
              v76 = 0;
              v77 = 0;
              v78 = 0;
              v80 = *--v75;
              v79 = v80;
              do
              {
                v81 = *(_DWORD *)(v20 + 4 * v76);
                if (v81 == v16)
                  v78 = v76;
                if (v81 == v79)
                  v77 = v76;
                ++v76;
              }
              while (v76 != 6);
            }
            while (v78 < v77);
          }
          if (v10 < v75)
          {
            v82 = *v10;
            v83 = *v75;
            do
            {
              *v10 = v83;
              *v75 = v82;
              v84 = *(_QWORD *)(v19 + 24 * *(int *)v17);
              do
              {
                v85 = 0;
                v86 = 0;
                v87 = 0;
                v88 = v10[1];
                ++v10;
                v82 = v88;
                do
                {
                  v89 = *(_DWORD *)(v84 + 4 * v85);
                  if (v89 == v16)
                    v87 = v85;
                  if (v89 == v82)
                    v86 = v85;
                  ++v85;
                }
                while (v85 != 6);
              }
              while (v87 >= v86);
              do
              {
                v90 = 0;
                v91 = 0;
                v92 = 0;
                v93 = *--v75;
                v83 = v93;
                do
                {
                  result = *(unsigned int *)(v84 + 4 * v90);
                  if ((_DWORD)result == v16)
                    v92 = v90;
                  if ((_DWORD)result == v83)
                    v91 = v90;
                  ++v90;
                }
                while (v90 != 6);
              }
              while (v92 < v91);
            }
            while (v10 < v75);
          }
          v94 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v94;
          a5 = 0;
          *v94 = v16;
          continue;
        }
        v20 = *(_QWORD *)(v19 + 24 * v18);
LABEL_18:
        v25 = v9;
        do
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          v29 = v25;
          v31 = v25[1];
          ++v25;
          v30 = v31;
          do
          {
            v32 = *(_DWORD *)(v20 + 4 * v26);
            if (v32 == v30)
              v28 = v26;
            if (v32 == v16)
              v27 = v26;
            ++v26;
          }
          while (v26 != 6);
        }
        while (v28 < v27);
        v33 = a2;
        if (v29 == v9)
        {
          v33 = a2;
          do
          {
            if (v25 >= v33)
              break;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v44 = *--v33;
            v43 = v44;
            do
            {
              v45 = *(_DWORD *)(v20 + 4 * v40);
              if (v45 == v43)
                v42 = v40;
              if (v45 == v16)
                v41 = v40;
              ++v40;
            }
            while (v40 != 6);
          }
          while (v42 >= v41);
        }
        else
        {
          do
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            v38 = *--v33;
            v37 = v38;
            do
            {
              v39 = *(_DWORD *)(v20 + 4 * v34);
              if (v39 == v37)
                v36 = v34;
              if (v39 == v16)
                v35 = v34;
              ++v34;
            }
            while (v34 != 6);
          }
          while (v36 >= v35);
        }
        if (v25 < v33)
        {
          v46 = *v33;
          v47 = v25;
          v48 = v33;
          do
          {
            *v47 = v46;
            *v48 = v30;
            v49 = *(_QWORD *)(v19 + 24 * *(int *)v17);
            do
            {
              v50 = 0;
              v51 = 0;
              v52 = 0;
              v29 = v47;
              v53 = v47[1];
              ++v47;
              v30 = v53;
              do
              {
                v54 = *(_DWORD *)(v49 + 4 * v50);
                if (v54 == v30)
                  v52 = v50;
                if (v54 == v16)
                  v51 = v50;
                ++v50;
              }
              while (v50 != 6);
            }
            while (v52 < v51);
            do
            {
              v55 = 0;
              v56 = 0;
              v57 = 0;
              v58 = *--v48;
              v46 = v58;
              do
              {
                v59 = *(_DWORD *)(v49 + 4 * v55);
                if (v59 == v46)
                  v57 = v55;
                if (v59 == v16)
                  v56 = v55;
                ++v55;
              }
              while (v55 != 6);
            }
            while (v57 >= v56);
          }
          while (v47 < v48);
        }
        if (v29 != v9)
          *v9 = *v29;
        *v29 = v16;
        if (v25 < v33)
        {
LABEL_67:
          a5 = 0;
          v10 = v29 + 1;
          continue;
        }
        v10 = v29 + 1;
        if (!(_DWORD)result)
        {
          if (v60)
            continue;
          goto LABEL_67;
        }
        a2 = v29;
        if (!v60)
          goto LABEL_2;
        return result;
    }
  }
}

