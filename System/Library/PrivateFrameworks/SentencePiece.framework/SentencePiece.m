_QWORD *sub_245CF1BE0()
{
  unsigned __int8 v0;
  pthread_key_t *v1;
  _QWORD *v2;
  pthread_key_t *v4;

  v0 = atomic_load((unsigned __int8 *)&qword_25751ABB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25751ABB8))
  {
    v4 = (pthread_key_t *)operator new();
    pthread_key_create(v4, (void (__cdecl *)(void *))sub_245CF1CD4);
    qword_25751ABB0 = (uint64_t)v4;
    __cxa_guard_release(&qword_25751ABB8);
  }
  v1 = (pthread_key_t *)qword_25751ABB0;
  v2 = pthread_getspecific(*(_QWORD *)qword_25751ABB0);
  if (!v2)
  {
    v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)v2 = xmmword_245D21BC0;
    v2[2] = 0;
    pthread_setspecific(*v1, v2);
  }
  return v2;
}

void sub_245CF1C9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x1000C4000313F17);
  __cxa_guard_abort(&qword_25751ABB8);
  _Unwind_Resume(a1);
}

uint64_t sub_245CF1CD4(uint64_t result)
{
  if (result)
    JUMPOUT(0x249546A68);
  return result;
}

void sub_245CF1CE4(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void *sub_245CF1CF4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  void *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 32);
  if (a2 != -1)
  {
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5 >= 2 * a2)
        v5 = 2 * a2;
      goto LABEL_8;
    }
    v8 = 2 * a2;
    if ((unint64_t)(2 * a2) >= 0x2000)
      v8 = 0x2000;
    if (v8 <= a3 + 24)
      v6 = a3 + 24;
    else
      v6 = v8;
LABEL_20:
    result = operator new(v6);
    goto LABEL_21;
  }
  if (!v4)
  {
    v9 = 232;
    if (a3 > 0xE8)
      v9 = a3;
    v6 = v9 + 24;
    goto LABEL_20;
  }
  v5 = *(_QWORD *)v4;
LABEL_8:
  if (v5 <= a3 + 24)
    v6 = a3 + 24;
  else
    v6 = v5;
  result = (void *)(*(uint64_t (**)(size_t))(v4 + 16))(v6);
LABEL_21:
  v10 = (unint64_t *)(a1 + 16);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + v6, v10));
  return result;
}

_QWORD *sub_245CF1DA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  result = (_QWORD *)a1[3];
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40)
        v7 = 64;
      else
        v7 = 2 * *result;
    }
    else
    {
      v7 = 8;
    }
    v8 = (16 * (_WORD)v7 + 23) & 0xFF0;
    v9 = (_QWORD *)a1[5];
    if (a1[6] - (uint64_t)v9 < v8)
    {
      result = sub_245CF1E68(a1, v8);
      v10 = (_QWORD *)a1[3];
    }
    else
    {
      a1[5] = (uint64_t)v9 + v8;
      v10 = result;
      result = v9;
    }
    *result = v7;
    result[1] = v10;
    a1[3] = (uint64_t)result;
    a1[7] = (uint64_t)(result + 2);
    a1[8] = (uint64_t)&result[2 * v7 + 2];
  }
  while (!(16 * v7));
  result[2] = a2;
  result[3] = a3;
  a1[7] = (uint64_t)(result + 4);
  return result;
}

_QWORD *sub_245CF1E68(uint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  char *v7;
  uint64_t *v8;
  _QWORD *v9;

  v4 = (_QWORD *)a1[2];
  v5 = v4[2];
  v8 = a1 + 5;
  result = (_QWORD *)a1[5];
  v7 = (char *)v8[1];
  do
  {
    v4[1] = (char *)result + v5 - (_QWORD)v7;
    v9 = sub_245CF1CF4(*a1, v5, a2);
    *v9 = v4;
    v9[1] = 24;
    v9[2] = v5;
    a1[2] = (uint64_t)v9;
    result = v9 + 3;
    v7 = (char *)v9 + v5;
    a1[5] = (uint64_t)(v9 + 3);
    a1[6] = (uint64_t)v9 + v5;
    v4 = v9;
  }
  while (v5 - 24 < a2);
  a1[5] = (uint64_t)result + a2;
  return result;
}

_QWORD *sub_245CF1EEC(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v9;

  v6 = sub_245CF1BE0();
  if (v6[1] == a1[3])
  {
    v7 = (uint64_t *)v6[2];
    return sub_245CF1F74(v7, a2, a3);
  }
  v9 = sub_245CF1BE0();
  v7 = (uint64_t *)atomic_load(a1 + 1);
  if (v7 && (_QWORD *)v7[1] == v9)
    return sub_245CF1F74(v7, a2, a3);
  return sub_245CF1FF0(a1, a2, a3);
}

_QWORD *sub_245CF1F74(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = (_QWORD *)a1[5];
  if (a1[6] - (uint64_t)v5 < a2)
    v5 = sub_245CF1E68(a1, a2);
  else
    a1[5] = (uint64_t)v5 + a2;
  v6 = (_QWORD *)a1[7];
  if (v6 == (_QWORD *)a1[8])
  {
    sub_245CF1DA8(a1, (uint64_t)v5, a3);
  }
  else
  {
    *v6 = v5;
    v6[1] = a3;
    a1[7] = (uint64_t)(v6 + 2);
  }
  return v5;
}

_QWORD *sub_245CF1FF0(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;

  v6 = sub_245CF1BE0();
  v7 = (uint64_t *)sub_245CF2034(a1, (uint64_t)v6);
  return sub_245CF1F74(v7, a2, a3);
}

unint64_t sub_245CF2034(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;

  v4 = atomic_load(a1);
  if (!v4)
  {
LABEL_4:
    v5 = sub_245CF1CF4((uint64_t)a1, -1, 0x48uLL);
    v5[2] = v6;
    v5[3] = a1;
    v4 = (unint64_t)(v5 + 3);
    *(_OWORD *)v5 = xmmword_245D21BD0;
    v5[4] = a2;
    v5[5] = v5;
    v5[8] = v5 + 12;
    v5[9] = (char *)v5 + v6;
    v5[6] = 0;
    v5[10] = 0;
    v5[11] = 0;
    v7 = *a1;
    v5[7] = *a1;
    v8 = __ldxr(a1);
    if (v8 == v7)
    {
      if (__stlxr(v4, a1))
        goto LABEL_8;
      goto LABEL_14;
    }
    __clrex();
LABEL_8:
    while (1)
    {
      v5[7] = v8;
      v9 = __ldxr(a1);
      if (v9 != v8)
        break;
      if (__stlxr(v4, a1))
        goto LABEL_12;
      v10 = 1;
LABEL_13:
      v8 = v9;
      if ((v10 & 1) != 0)
        goto LABEL_14;
    }
    __clrex();
LABEL_12:
    v10 = 0;
    goto LABEL_13;
  }
  while (*(_QWORD *)(v4 + 8) != a2)
  {
    v4 = *(_QWORD *)(v4 + 32);
    if (!v4)
      goto LABEL_4;
  }
LABEL_14:
  sub_245CF1BE0()[2] = v4;
  v11 = a1[3];
  sub_245CF1BE0()[1] = v11;
  atomic_store(v4, a1 + 1);
  return v4;
}

_QWORD *sub_245CF213C(unint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_245CF1BE0();
  v5 = (uint64_t *)sub_245CF2034(a1, (uint64_t)v4);
  v6 = v5[5];
  if (v5[6] - v6 < a2)
    return sub_245CF1E68(v5, a2);
  v5[5] = v6 + a2;
  return (_QWORD *)v6;
}

_QWORD *sub_245CF21A0(unint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v8;

  v4 = sub_245CF1BE0();
  if (v4[1] == a1[3])
  {
    v5 = (uint64_t *)v4[2];
  }
  else
  {
    v8 = sub_245CF1BE0();
    v5 = (uint64_t *)atomic_load(a1 + 1);
    if (!v5 || (_QWORD *)v5[1] != v8)
      return sub_245CF213C(a1, a2);
  }
  v6 = v5[5];
  if (v5[6] - v6 < a2)
    return sub_245CF1E68(v5, a2);
  v5[5] = v6 + a2;
  return (_QWORD *)v6;
}

unint64_t sub_245CF2238(_QWORD *a1)
{
  unsigned __int8 v2;
  unint64_t v3;

  v2 = atomic_load((unsigned __int8 *)&qword_25751ABC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25751ABC0))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_25751A090, &dword_245CF0000);
    __cxa_guard_release(&qword_25751ABC0);
  }
  std::mutex::lock(&stru_25751A090);
  v3 = atomic_load(a1 + 3);
  if (!v3)
  {
    sub_245CF22E8(a1, (void *)*a1, a1[1]);
    atomic_store((unint64_t)a1, a1 + 3);
    v3 = (unint64_t)a1;
  }
  std::mutex::unlock(&stru_25751A090);
  return v3;
}

_QWORD *sub_245CF22E8(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_245CF238C();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void sub_245CF238C()
{
  sub_245CF23A0("basic_string");
}

void sub_245CF23A0(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_245CF23F0(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2516F6778, MEMORY[0x24BEDAAF0]);
}

void sub_245CF23DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_245CF23F0(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

uint64_t sub_245CF2414(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  __int128 v9;

  if (*a1 != a2)
    JUMPOUT(0x249546864);
  if (!a4)
  {
    result = operator new();
    v8 = result;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)result = *a3;
      *(_QWORD *)(result + 16) = *((_QWORD *)a3 + 2);
      goto LABEL_10;
    }
LABEL_9:
    result = (uint64_t)sub_245CF2554((_BYTE *)result, *(void **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a4 + 24) & 1) != 0)
    (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 32), &unk_2516F6D58, 24);
  result = (uint64_t)sub_245CF1EEC((unint64_t *)a4, 0x18uLL, (uint64_t)sub_245CF25DC);
  v8 = result;
  if (*((char *)a3 + 23) < 0)
    goto LABEL_9;
  v9 = *a3;
  *(_QWORD *)(result + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)result = v9;
LABEL_10:
  *a1 = v8;
  return result;
}

void sub_245CF2530(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void *sub_245CF2554(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_245CF238C();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_245CF25DC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_245CF25F0(uint64_t **a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  if (*a1 == &qword_25751AE78)
  {
    if (a3)
    {
      if ((*(_BYTE *)(a3 + 24) & 1) != 0)
      {
        v9 = a3;
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a3 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 32), &unk_2516F6D58, 24);
        a3 = v9;
      }
      v7 = (uint64_t)sub_245CF1EEC((unint64_t *)a3, 0x18uLL, (uint64_t)sub_245CF25DC);
      v8 = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = *a2;
      *(_QWORD *)(v7 + 16) = v8;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
    }
    else
    {
      v7 = operator new();
      *(_OWORD *)v7 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
    }
    *a1 = (uint64_t *)v7;
  }
  else
  {
    if (*((char *)v4 + 23) < 0)
      operator delete((void *)*v4);
    v5 = *a2;
    v4[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
}

uint64_t *sub_245CF26F8(uint64_t **a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v4;

  result = *a1;
  if (result == &qword_25751AE78)
  {
    if (a2)
    {
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      {
        v4 = a2;
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32), &unk_2516F6D58, 24);
        a2 = v4;
      }
      result = sub_245CF1EEC((unint64_t *)a2, 0x18uLL, (uint64_t)sub_245CF25DC);
    }
    else
    {
      result = (uint64_t *)operator new();
    }
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    *a1 = result;
  }
  return result;
}

_BYTE *sub_245CF27A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _BYTE *v3;
  unint64_t v6;
  _BYTE *v7;
  __int128 v8;

  v3 = (_BYTE *)*a1;
  if (!*a1)
  {
    v6 = atomic_load(a2 + 3);
    if (v6)
    {
      if (a3)
        goto LABEL_4;
    }
    else
    {
      v6 = sub_245CF2238(a2);
      if (a3)
      {
LABEL_4:
        if ((*(_BYTE *)(a3 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a3 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 32), &unk_2516F6D58, 24);
        v7 = sub_245CF1EEC((unint64_t *)a3, 0x18uLL, (uint64_t)sub_245CF25DC);
        v3 = v7;
        if (*(char *)(v6 + 23) < 0)
          goto LABEL_7;
        goto LABEL_10;
      }
    }
    v7 = (_BYTE *)operator new();
    v3 = v7;
    if (*(char *)(v6 + 23) < 0)
    {
LABEL_7:
      sub_245CF2554(v7, *(void **)v6, *(_QWORD *)(v6 + 8));
LABEL_11:
      *a1 = v3;
      return v3;
    }
LABEL_10:
    v8 = *(_OWORD *)v6;
    *((_QWORD *)v3 + 2) = *(_QWORD *)(v6 + 16);
    *(_OWORD *)v3 = v8;
    goto LABEL_11;
  }
  return v3;
}

void sub_245CF28A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *sub_245CF28C4(std::string *this, _QWORD *a2)
{
  std::string *v2;
  const std::string *v3;

  if (this)
  {
    v2 = this;
    v3 = (const std::string *)atomic_load(a2 + 3);
    if (!v3)
      v3 = (const std::string *)sub_245CF2238(a2);
    return std::string::operator=(v2, v3);
  }
  return this;
}

void sub_245CF2910(uint64_t a1)
{
  sub_245CFF984(a1);
  JUMPOUT(0x249546A74);
}

uint64_t *sub_245CF2934@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_245CF8EAC(a2, (_DWORD **)(a1 + 112));
}

uint64_t sub_245CF2940(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_245CF2948(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_245CF2950(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 56))(a1, 0.0);
}

_BYTE *sub_245CF2960@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *result;
  char v9;

  v9 = 0;
  v2 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
  sub_245CF35A0(v2, (uint64_t)"(", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = sub_245CF35A0(v3, (uint64_t)") ", 2);
  v5 = sub_245CF35A0(v4, (uint64_t)"LOG(", 4);
  v6 = sub_245CF35A0(v5, (uint64_t)"ERROR", 5);
  v7 = sub_245CF35A0(v6, (uint64_t)") ", 2);
  sub_245CF35A0(v7, (uint64_t)"Not implemented.", 16);
  result = sub_245CF3834(&v9);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_245CF2A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_245CF3834(&a13);
  _Unwind_Resume(a1);
}

void sub_245CF2A2C(uint64_t a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  int v11;
  __n128 *v12;
  BOOL *v13;
  int v14;
  int v15;
  __n128 v16;
  __n128 v17;
  __n128 *v18;
  uint64_t v19;
  unint64_t v20;
  __n128 *v21;
  BOOL *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __n128 *v26;
  __n128 v27;
  char *v28;
  __n128 *v29;
  __n128 v30;
  unint64_t v31;
  int **v32;
  int **v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int **v38;
  int **v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  float v43;
  int **v44;
  int v45;
  uint64_t v46;
  __n128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  __n128 *v53;
  __n128 *v54;
  uint64_t v55;
  __n128 v56;
  _QWORD *v57;
  int v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  __n128 *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  __n128 *v67;
  uint64_t v68;
  uint64_t v69;
  char v71;
  _QWORD v72[5];
  uint64_t (**v73)();
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD v78[2];
  int v79;
  __n128 *v80;
  char *v81;
  __n128 *v82;
  int **v83;
  int **v84;
  uint64_t v85;
  __n128 v86;
  __n128 v87;
  uint64_t v88;

  v8 = a1;
  v88 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t (***__return_ptr)()))(*(_QWORD *)a1 + 16))(&v73);
  v9 = (uint64_t)v73;
  if (v73)
  {
    v73 = 0;
    sub_245CF8D4C(v9);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  if (!a3)
    goto LABEL_3;
  v84 = 0;
  v85 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  if (a3 >> 59)
    sub_245CF3B34();
  v10 = (__n128 *)operator new(32 * a3);
  v11 = 0;
  v80 = v10;
  v81 = (char *)v10;
  v82 = &v10[2 * a3];
  memset(v78, 0, sizeof(v78));
  v79 = 1065353216;
  v73 = &off_2516F7838;
  v74 = 0u;
  v75 = 0u;
  v76 = 0;
  v77 = 256;
  v72[0] = v8;
  v72[1] = &v73;
  v72[2] = &v80;
  v72[3] = &v83;
  v12 = &v87;
  v13 = (BOOL *)&v86.n128_i8[8];
  v72[4] = v78;
  v69 = v8;
  do
  {
    v12->n128_u64[0] = 0;
    v12->n128_u64[1] = 0;
    v14 = sub_245D020A8(**(_QWORD **)(v8 + 16), a2, a3, v13);
    v87.n128_u64[0] = (unint64_t)a2;
    v87.n128_u64[1] = v14;
    a3 -= v14;
    if (a3)
      v15 = v11 + 1;
    else
      v15 = -1;
    v86.n128_u32[0] = v11 - 1;
    v86.n128_u32[1] = v15;
    if (v10 < v82)
    {
      v16 = v86;
      v17 = v87;
      *v10 = v86;
      v10[1] = v17;
      v10 += 2;
      goto LABEL_31;
    }
    v18 = v80;
    v19 = ((char *)v10 - (char *)v80) >> 5;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 59)
      sub_245CF3B34();
    v21 = v12;
    v22 = v13;
    v23 = (char *)v82 - (char *)v80;
    if (v82 - v80 > v20)
      v20 = v23 >> 4;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
      v24 = 0x7FFFFFFFFFFFFFFLL;
    else
      v24 = v20;
    if (v24)
    {
      if (v24 >> 59)
        sub_245CF3B8C();
      v25 = (char *)operator new(32 * v24);
    }
    else
    {
      v25 = 0;
    }
    v26 = (__n128 *)&v25[32 * v19];
    v27 = v87;
    v28 = &v25[32 * v24];
    *v26 = v86;
    v26[1] = v27;
    v29 = v26 + 2;
    if (v10 == v18)
    {
      v80 = v26;
      v81 = (char *)&v26[2];
      v18 = v10;
      v82 = (__n128 *)&v25[32 * v24];
      v13 = v22;
      v12 = v21;
    }
    else
    {
      v13 = v22;
      do
      {
        v16 = v10[-2];
        v30 = v10[-1];
        v26[-2] = v16;
        v26[-1] = v30;
        v26 -= 2;
        v10 -= 2;
      }
      while (v10 != v18);
      v80 = v26;
      v81 = (char *)v29;
      v82 = (__n128 *)v28;
      v12 = v21;
      if (!v18)
        goto LABEL_30;
    }
    operator delete(v18);
LABEL_30:
    v10 = v29;
    v8 = v69;
LABEL_31:
    a2 += v14;
    ++v11;
    v81 = (char *)v10;
  }
  while (a3);
  if (v80 == v10)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if ((unint64_t)((char *)v10 - (char *)v80) >= 0x21)
    {
      v31 = 1;
      do
      {
        v16 = sub_245CF3BC8((uint64_t)v72, (int)v31 - 1, v31, v16);
        ++v31;
      }
      while (v31 < (v81 - (char *)v80) >> 5);
    }
    v32 = v83;
    v33 = v84;
    if (v83 != v84)
    {
      v34 = 0;
      do
      {
        v35 = *v32;
        if ((char *)v33 - (char *)v32 >= 9)
        {
          v36 = 0;
          v37 = v33 - v32;
          v38 = v32;
          do
          {
            v39 = v38;
            v38 += v36 + 1;
            v40 = 2 * v36;
            v36 = (2 * v36) | 1;
            v41 = v40 + 2;
            if (v41 < v37)
            {
              v42 = v38[1];
              v16.n128_u32[0] = (*v38)[2];
              v43 = *((float *)v42 + 2);
              if (v16.n128_f32[0] < v43 || v16.n128_f32[0] == v43 && **v38 > *v42)
              {
                ++v38;
                v36 = v41;
              }
            }
            *v39 = *v38;
          }
          while (v36 <= (uint64_t)((unint64_t)(v37 - 2) >> 1));
          v44 = v33 - 1;
          if (v38 == v44)
          {
            *v38 = v35;
          }
          else
          {
            *v38 = *v44;
            *v44 = v35;
            sub_245CF4318((uint64_t)v32, (uint64_t)(v38 + 1), v38 + 1 - v32);
          }
        }
        --v84;
        v45 = *v35;
        v46 = *v35;
        v47 = v80;
        v48 = v80[2 * v46 + 1].n128_i64[1];
        if (!v48)
          goto LABEL_61;
        v49 = v35[1];
        v50 = v80[2 * v49 + 1].n128_i64[1];
        if (!v50)
          goto LABEL_61;
        v51 = v50 + v48;
        if (v51 != *((_QWORD *)v35 + 2))
          goto LABEL_61;
        if (a5 > 0.0)
        {
          if (a5 >= 1.0)
            goto LABEL_61;
          if (!v34)
            v34 = sub_245D211CC();
          v52 = sub_245CF43B0(v34);
          v16.n128_f64[0] = ((double)v52 + (double)sub_245CF43B0(v34) * 4294967300.0) * 5.42101086e-20
                          + 0.0;
          if (v16.n128_f64[0] < a5)
            goto LABEL_61;
          v47 = v80;
          v45 = *v35;
          v49 = v35[1];
          v46 = *v35;
          v51 = v80[2 * v49 + 1].n128_u64[1] + v80[2 * v46 + 1].n128_u64[1];
        }
        v53 = &v47[2 * v46];
        v54 = &v47[2 * v49];
        v53[1].n128_u64[1] = v51;
        v53->n128_u32[1] = v54->n128_u32[1];
        v55 = v54->n128_u32[1];
        if ((v55 & 0x80000000) == 0)
          v47[2 * v55].n128_u32[0] = v45;
        v54[1].n128_u64[0] = (unint64_t)&unk_245D25DC9;
        v54[1].n128_u64[1] = 0;
        v56 = sub_245CF3BC8((uint64_t)v72, v80[2 * v46].n128_i32[0], v45, v16);
        v16 = sub_245CF3BC8((uint64_t)v72, *v35, v80[2 * *v35].n128_i32[1], v56);
LABEL_61:
        v32 = v83;
        v33 = v84;
      }
      while (v83 != v84);
    }
    v87.n128_u64[1] = 0;
    v57 = operator new(0x20uLL);
    v58 = 0;
    *v57 = &off_2516F7A98;
    v57[1] = v8;
    v57[2] = &v86;
    v57[3] = v78;
    v87.n128_u64[1] = (unint64_t)v57;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    v59 = (_QWORD *)MEMORY[0x24BEDB310];
    do
    {
      if (v58 < 0)
      {
        v71 = 1;
        sub_245CF35A0(v59, (uint64_t)"bpe_model.cc", 12);
        sub_245CF35A0(v59, (uint64_t)"(", 1);
        v60 = (_QWORD *)std::ostream::operator<<();
        v61 = sub_245CF35A0(v60, (uint64_t)") [", 3);
        v62 = sub_245CF35A0(v61, (uint64_t)"(index) >= (0)", 14);
        sub_245CF35A0(v62, (uint64_t)"] ", 2);
        sub_245CF3834(&v71);
      }
      v63 = v80;
      if (v58 >= (int)((unint64_t)(v81 - (char *)v80) >> 5))
      {
        v71 = 1;
        sub_245CF35A0(v59, (uint64_t)"bpe_model.cc", 12);
        sub_245CF35A0(v59, (uint64_t)"(", 1);
        v64 = (_QWORD *)std::ostream::operator<<();
        v65 = sub_245CF35A0(v64, (uint64_t)") [", 3);
        v66 = sub_245CF35A0(v65, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
        sub_245CF35A0(v66, (uint64_t)"] ", 2);
        sub_245CF3834(&v71);
        v63 = v80;
      }
      sub_245CF4450(v87.n128_i64[1], v63[2 * v58 + 1].n128_i64[0], v63[2 * v58 + 1].n128_i64[1], (uint64_t)a4);
      v58 = v80[2 * v58].n128_i32[1];
    }
    while (v58 != -1);
    v67 = (__n128 *)v87.n128_u64[1];
    if ((__n128 *)v87.n128_u64[1] == &v86)
    {
      v68 = 4;
      v67 = &v86;
LABEL_73:
      (*(void (**)(void))(v67->n128_u64[0] + 8 * v68))();
    }
    else if (v87.n128_u64[1])
    {
      v68 = 5;
      goto LABEL_73;
    }
  }
  sub_245CF448C(&v73);
  sub_245CF4508((uint64_t)v78);
  if (v80)
  {
    v81 = (char *)v80;
    operator delete(v80);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
}

void sub_245CF310C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,void *a34,void *a35)
{
  sub_245CF448C(&a18);
  sub_245CF4508((uint64_t)&a25);
  if (a31)
  {
    a32 = a31;
    operator delete(a31);
  }
  if (a34)
  {
    a35 = a34;
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void sub_245CF31E0(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  LOBYTE(__p) = 0;
  v2 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
  sub_245CF35A0(v2, (uint64_t)"(", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = sub_245CF35A0(v3, (uint64_t)") ", 2);
  v5 = sub_245CF35A0(v4, (uint64_t)"LOG(", 4);
  v6 = sub_245CF35A0(v5, (uint64_t)"ERROR", 5);
  v7 = sub_245CF35A0(v6, (uint64_t)") ", 2);
  sub_245CF35A0(v7, (uint64_t)"Not implemented.", 16);
  sub_245CF3834(&__p);
  __p = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v8 = (char *)operator new(0x20uLL);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v8 + 32;
  a1[1] = sub_245CF38EC((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v13, (uint64_t)v8);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_245CF3324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  *(_QWORD *)(v13 + 8) = v15;
  sub_245CF39B0(&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_245CF3368()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v7;

  v7 = 0;
  v0 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
  sub_245CF35A0(v0, (uint64_t)"(", 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = sub_245CF35A0(v1, (uint64_t)") ", 2);
  v3 = sub_245CF35A0(v2, (uint64_t)"LOG(", 4);
  v4 = sub_245CF35A0(v3, (uint64_t)"ERROR", 5);
  v5 = sub_245CF35A0(v4, (uint64_t)") ", 2);
  sub_245CF35A0(v5, (uint64_t)"Not implemented.", 16);
  sub_245CF3834(&v7);
  return 0.0;
}

void sub_245CF3418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_245CF3834(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_245CF342C()
{
  return 1;
}

uint64_t sub_245CF3434()
{
  return 0;
}

uint64_t sub_245CF343C()
{
  return 0;
}

uint64_t sub_245CF3444()
{
  return 0;
}

unint64_t sub_245CF344C(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2 + 8) + 48) & 0xFFFFFFFFFFFFFFFELL;
}

uint64_t sub_245CF3468(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return *(unsigned int *)(v1 + 56);
  else
    return 0;
}

float sub_245CF3480(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2 + 8) + 56);
}

BOOL sub_245CF3498(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2 + 8) + 60) == 2;
}

BOOL sub_245CF34B8(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2 + 8) + 60) == 3;
}

BOOL sub_245CF34D8(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2 + 8) + 60) == 5;
}

BOOL sub_245CF34F8(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2 + 8) + 60) == 4;
}

BOOL sub_245CF3518(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2 + 8) + 60) == 6;
}

BOOL sub_245CF3538(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(_BYTE **)(v1 + 72);
  if (!v2)
    v2 = &unk_25751AE90;
  return v2[240] != 0;
}

BOOL sub_245CF356C(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

_QWORD *sub_245CF35A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x24954690C](v23, a1);
  if (v23[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_29;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        sub_245CF238C();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v25 = v16;
        v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0)
        operator delete(__b.__locale_);
      if (v21 != v16)
        goto LABEL_29;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x249546918](v23);
  return a1;
}

void sub_245CF37C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x249546918](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x245CF3794);
}

void sub_245CF3820(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_BYTE *sub_245CF3834(_BYTE *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB310] + *(_QWORD *)(*MEMORY[0x24BEDB310] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1)
    sub_245CF8C8C();
  return a1;
}

void sub_245CF38D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  sub_245CF1CE4(a1);
}

uint64_t sub_245CF38EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_245CF3A2C((_QWORD *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_245CF3AD0((uint64_t)v8);
  return v4;
}

void sub_245CF399C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_245CF3AD0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_245CF39B0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 4);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 3) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_245CF3A2C(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_245CF3B34();
    result = sub_245CF3B48(a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[3 * v7];
    while (a2 != a3)
    {
      v8 = *a2;
      result[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)result = v8;
      result += 3;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    v4[1] = result;
  }
  return result;
}

void sub_245CF3AB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_245CF3AD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 32);
        v4 -= 32;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 24) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void sub_245CF3B34()
{
  sub_245CF23A0("vector");
}

void *sub_245CF3B48(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_245CF3B8C();
  return operator new(24 * a1);
}

void sub_245CF3B8C()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

__n128 sub_245CF3BC8(uint64_t a1, int a2, int a3, __n128 result)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  unint64_t v55;
  void **v56;
  void *i;
  unint64_t v58;
  float v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  int8x8_t prime;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t v71;
  uint8x8_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t **v83;
  unint64_t v84;
  __n128 v85;
  __int128 v86;

  if (a2 == -1)
    return result;
  if (a3 == -1)
    return result;
  v7 = a2;
  v8 = **(_QWORD **)(a1 + 16);
  if (*(_BYTE *)(v8 + 32 * a2 + 8))
    return result;
  v9 = a3;
  v10 = v8 + 32 * a3;
  if (*(_BYTE *)(v10 + 8))
    return result;
  v11 = *(_QWORD **)a1;
  v12 = v8 + 32 * a2;
  v13 = *(uint64_t **)(v12 + 16);
  v14 = *(_QWORD *)(v10 + 24) + *(_QWORD *)(v12 + 24);
  v15 = sub_245CF4DEC((_QWORD *)(*(_QWORD *)a1 + 24), v13, v14);
  if (!v15)
    return result;
  v16 = *(_QWORD **)(a1 + 8);
  v17 = v16[5];
  v18 = v16[6];
  v19 = v16[4];
  if (v19 >= v18)
  {
    v19 = 0;
    ++v17;
    v16[4] = 0;
    v16[5] = v17;
  }
  v83 = v15;
  v84 = v14;
  v20 = v16[1];
  if (v17 == (v16[2] - v20) >> 3)
  {
    v80 = v13;
    is_mul_ok(v18, 0x18uLL);
    v21 = (void *)operator new[]();
    bzero(v21, 24 * v16[6]);
    v23 = (_QWORD *)v16[2];
    v22 = v16[3];
    if ((unint64_t)v23 >= v22)
    {
      v81 = v11;
      v25 = (_QWORD *)v16[1];
      v26 = v23 - v25;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        goto LABEL_134;
      v28 = v22 - (_QWORD)v25;
      if (v28 >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 >> 61)
          goto LABEL_135;
        v30 = (char *)operator new(8 * v29);
        v26 = v23 - v25;
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[8 * v26];
      v32 = &v30[8 * v29];
      *(_QWORD *)v31 = v21;
      v24 = v31 + 8;
      if (v23 == v25)
      {
        v13 = v80;
      }
      else
      {
        v13 = v80;
        do
        {
          v33 = *--v23;
          *((_QWORD *)v31 - 1) = v33;
          v31 -= 8;
        }
        while (v23 != v25);
        v23 = (_QWORD *)v16[1];
      }
      v16[1] = v31;
      v16[2] = v24;
      v16[3] = v32;
      v11 = v81;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v23 = v21;
      v24 = v23 + 1;
      v13 = v80;
    }
    v15 = v83;
    v16[2] = v24;
    v20 = v16[1];
    v19 = v16[4];
    v17 = v16[5];
  }
  v34 = *(_QWORD *)(v20 + 8 * v17) + 24 * v19;
  v16[4] = v19 + 1;
  *(_DWORD *)v34 = a2;
  *(_DWORD *)(v34 + 4) = a3;
  *(float *)(v34 + 8) = (*(float (**)(_QWORD *, _QWORD))(*v11 + 136))(v11, *((unsigned int *)v15 + 8));
  *(_QWORD *)(v34 + 16) = v84;
  v35 = *(uint64_t **)(a1 + 24);
  v37 = (_QWORD *)v35[1];
  v36 = v35[2];
  if ((unint64_t)v37 < v36)
  {
    *v37 = v34;
    v38 = (uint64_t)(v37 + 1);
    v39 = v84;
    goto LABEL_49;
  }
  v82 = v11;
  v40 = *v35;
  v41 = ((uint64_t)v37 - *v35) >> 3;
  v42 = v41 + 1;
  if ((unint64_t)(v41 + 1) >> 61)
LABEL_134:
    sub_245CF3B34();
  v43 = v36 - v40;
  if (v43 >> 2 > v42)
    v42 = v43 >> 2;
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
    v44 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
  {
    if (!(v44 >> 61))
    {
      v45 = (char *)operator new(8 * v44);
      goto LABEL_42;
    }
LABEL_135:
    sub_245CF3B8C();
  }
  v45 = 0;
LABEL_42:
  v46 = (uint64_t *)&v45[8 * v41];
  v47 = &v45[8 * v44];
  *v46 = v34;
  v38 = (uint64_t)(v46 + 1);
  if (v37 == (_QWORD *)v40)
  {
    v39 = v84;
  }
  else
  {
    v39 = v84;
    do
    {
      v48 = *--v37;
      *--v46 = v48;
    }
    while (v37 != (_QWORD *)v40);
    v37 = (_QWORD *)*v35;
  }
  *v35 = (uint64_t)v46;
  v35[1] = v38;
  v35[2] = (uint64_t)v47;
  v11 = v82;
  if (v37)
    operator delete(v37);
LABEL_49:
  v35[1] = v38;
  sub_245CF4318(*v35, v38, (v38 - *v35) >> 3);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11[1] + 64) + 8 * *((int *)v83 + 8) + 8) + 60) != 5)
    return result;
  v49 = **(_QWORD **)(a1 + 16);
  v85 = *(__n128 *)(v49 + 32 * v7 + 16);
  v86 = *(_OWORD *)(v49 + 32 * v9 + 16);
  v50 = *(float **)(a1 + 32);
  v51 = sub_245CF49B8(v13, v39);
  v52 = v51;
  v53 = *((_QWORD *)v50 + 1);
  if (v53)
  {
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)v53);
    v54.i16[0] = vaddlv_u8(v54);
    v55 = v54.u32[0];
    if (v54.u32[0] > 1uLL)
    {
      v9 = v51;
      if (v51 >= v53)
        v9 = v51 % v53;
    }
    else
    {
      v9 = (v53 - 1) & v51;
    }
    v56 = *(void ***)(*(_QWORD *)v50 + 8 * v9);
    if (v56)
    {
      for (i = *v56; i; i = *(void **)i)
      {
        v58 = *((_QWORD *)i + 1);
        if (v58 == v52)
        {
          if (*((_QWORD *)i + 3) == v39 && !memcmp(*((const void **)i + 2), v13, v39))
            goto LABEL_124;
        }
        else
        {
          if (v55 > 1)
          {
            if (v58 >= v53)
              v58 %= v53;
          }
          else
          {
            v58 &= v53 - 1;
          }
          if (v58 != v9)
            break;
        }
      }
    }
  }
  i = operator new(0x40uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v52;
  *((_QWORD *)i + 2) = v13;
  *((_QWORD *)i + 3) = v39;
  *((_OWORD *)i + 2) = 0u;
  *((_OWORD *)i + 3) = 0u;
  v59 = (float)(unint64_t)(*((_QWORD *)v50 + 3) + 1);
  v60 = v50[8];
  if (!v53 || (float)(v60 * (float)v53) < v59)
  {
    v61 = 1;
    if (v53 >= 3)
      v61 = (v53 & (v53 - 1)) != 0;
    v62 = v61 | (2 * v53);
    v63 = vcvtps_u32_f32(v59 / v60);
    if (v62 <= v63)
      prime = (int8x8_t)v63;
    else
      prime = (int8x8_t)v62;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v53 = *((_QWORD *)v50 + 1);
    if (*(_QWORD *)&prime > v53)
      goto LABEL_80;
    if (*(_QWORD *)&prime < v53)
    {
      v71 = vcvtps_u32_f32((float)*((unint64_t *)v50 + 3) / v50[8]);
      if (v53 < 3 || (v72 = (uint8x8_t)vcnt_s8((int8x8_t)v53), v72.i16[0] = vaddlv_u8(v72), v72.u32[0] > 1uLL))
      {
        v71 = std::__next_prime(v71);
      }
      else
      {
        v73 = 1 << -(char)__clz(v71 - 1);
        if (v71 >= 2)
          v71 = v73;
      }
      if (*(_QWORD *)&prime <= v71)
        prime = (int8x8_t)v71;
      if (*(_QWORD *)&prime >= v53)
      {
        v53 = *((_QWORD *)v50 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_80:
          if (*(_QWORD *)&prime >> 61)
            sub_245CF3B8C();
          v65 = operator new(8 * *(_QWORD *)&prime);
          v66 = *(_QWORD **)v50;
          *(_QWORD *)v50 = v65;
          if (v66)
            operator delete(v66);
          v67 = 0;
          *((int8x8_t *)v50 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v50 + 8 * v67++) = 0;
          while (*(_QWORD *)&prime != v67);
          v68 = (_QWORD *)*((_QWORD *)v50 + 2);
          if (v68)
          {
            v69 = v68[1];
            v70 = (uint8x8_t)vcnt_s8(prime);
            v70.i16[0] = vaddlv_u8(v70);
            if (v70.u32[0] > 1uLL)
            {
              if (v69 >= *(_QWORD *)&prime)
                v69 %= *(_QWORD *)&prime;
            }
            else
            {
              v69 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v50 + 8 * v69) = v50 + 4;
            v74 = (_QWORD *)*v68;
            if (*v68)
            {
              do
              {
                v75 = v74[1];
                if (v70.u32[0] > 1uLL)
                {
                  if (v75 >= *(_QWORD *)&prime)
                    v75 %= *(_QWORD *)&prime;
                }
                else
                {
                  v75 &= *(_QWORD *)&prime - 1;
                }
                if (v75 != v69)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v50 + 8 * v75))
                  {
                    *(_QWORD *)(*(_QWORD *)v50 + 8 * v75) = v68;
                    goto LABEL_105;
                  }
                  *v68 = *v74;
                  *v74 = **(_QWORD **)(*(_QWORD *)v50 + 8 * v75);
                  **(_QWORD **)(*(_QWORD *)v50 + 8 * v75) = v74;
                  v74 = v68;
                }
                v75 = v69;
LABEL_105:
                v68 = v74;
                v74 = (_QWORD *)*v74;
                v69 = v75;
              }
              while (v74);
            }
          }
          v53 = (unint64_t)prime;
          goto LABEL_109;
        }
        v79 = *(_QWORD **)v50;
        *(_QWORD *)v50 = 0;
        if (v79)
          operator delete(v79);
        v53 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
    }
LABEL_109:
    if ((v53 & (v53 - 1)) != 0)
    {
      if (v52 >= v53)
        v9 = v52 % v53;
      else
        v9 = v52;
    }
    else
    {
      v9 = (v53 - 1) & v52;
    }
  }
  v76 = *(_QWORD **)v50;
  v77 = *(_QWORD **)(*(_QWORD *)v50 + 8 * v9);
  if (v77)
  {
    *(_QWORD *)i = *v77;
  }
  else
  {
    *(_QWORD *)i = *((_QWORD *)v50 + 2);
    *((_QWORD *)v50 + 2) = i;
    v76[v9] = v50 + 4;
    if (!*(_QWORD *)i)
      goto LABEL_123;
    v78 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v53 & (v53 - 1)) != 0)
    {
      if (v78 >= v53)
        v78 %= v53;
    }
    else
    {
      v78 &= v53 - 1;
    }
    v77 = (_QWORD *)(*(_QWORD *)v50 + 8 * v78);
  }
  *v77 = i;
LABEL_123:
  ++*((_QWORD *)v50 + 3);
LABEL_124:
  result = v85;
  *((__n128 *)i + 2) = v85;
  *((_OWORD *)i + 3) = v86;
  return result;
}

void sub_245CF4304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_245CF4318(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  float v13;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = result + 8 * (v3 >> 1);
    v6 = *(_DWORD **)v5;
    v7 = *(_QWORD *)(a2 - 8);
    v8 = *(float *)(*(_QWORD *)v5 + 8);
    v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(_QWORD *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          v11 = v4 - 1;
          v4 = (v4 - 1) >> 1;
          v10 = result + 8 * v4;
          v12 = *(_DWORD **)v10;
          v13 = *(float *)(*(_QWORD *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7))
            break;
          *(_QWORD *)v5 = v12;
          v5 = result + 8 * v4;
          if (v11 <= 1)
            goto LABEL_11;
        }
      }
      v10 = v5;
LABEL_11:
      *(_QWORD *)v10 = v7;
    }
  }
  return result;
}

uint64_t sub_245CF43B0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 2496);
  v2 = (v1 + 1) % 0x270uLL;
  v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(_QWORD *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)v1 << 15) & 0xEFC60000 ^ v1 ^ ((((_DWORD)v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_245CF4450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v5 = a4;
  if (!a1)
    sub_245CF4550();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, v6, &v5);
}

_QWORD *sub_245CF448C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_2516F7838;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x249546A50](*v2, 0x1000C801E56706BLL);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_245CF4508(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_245CF4550()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_2516F7AF0;
  __cxa_throw(exception, (struct type_info *)&unk_2516F6D68, (void (*)(void *))std::exception::~exception);
}

void sub_245CF4584(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x249546A74);
}

void sub_245CF45AC()
{
  JUMPOUT(0x249546A74);
}

__n128 sub_245CF45C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_2516F7A98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_245CF4600(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2516F7A98;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_245CF4628(_QWORD *a1, uint64_t **a2, void ***a3)
{
  unint64_t v4;
  uint64_t *v5;
  void **v6;
  _QWORD *v7;
  int v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t ***v31;
  uint64_t **i;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;

  v5 = *a2;
  v4 = (unint64_t)a2[1];
  v6 = *a3;
  v7 = (_QWORD *)a1[1];
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t *, unint64_t))(*v7 + 112))(v7, *a2, v4);
  v9 = v8;
  if (v8 != -1 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7[1] + 64) + 8 * v8 + 8) + 60) == 5)
  {
    v10 = (_QWORD *)a1[3];
    v11 = sub_245CF49B8(v5, v4);
    v12 = (int8x8_t)v10[1];
    if (v12)
    {
      v13 = v11;
      v14 = (uint8x8_t)vcnt_s8(v12);
      v14.i16[0] = vaddlv_u8(v14);
      v15 = v14.u32[0];
      if (v14.u32[0] > 1uLL)
      {
        v16 = v11;
        if (v11 >= *(_QWORD *)&v12)
          v16 = v11 % *(_QWORD *)&v12;
      }
      else
      {
        v16 = (*(_QWORD *)&v12 - 1) & v11;
      }
      v31 = *(uint64_t ****)(*v10 + 8 * v16);
      if (v31)
      {
        for (i = *v31; i; i = (uint64_t **)*i)
        {
          v33 = (unint64_t)i[1];
          if (v33 == v13)
          {
            if (i[3] == (uint64_t *)v4 && !memcmp(i[2], v5, v4))
            {
              sub_245CF4450(*(_QWORD *)(a1[2] + 24), (uint64_t)i[4], (uint64_t)i[5], (uint64_t)v6);
              sub_245CF4450(*(_QWORD *)(a1[2] + 24), (uint64_t)i[6], (uint64_t)i[7], (uint64_t)v6);
              return;
            }
          }
          else
          {
            if (v15 > 1)
            {
              if (v33 >= *(_QWORD *)&v12)
                v33 %= *(_QWORD *)&v12;
            }
            else
            {
              v33 &= *(_QWORD *)&v12 - 1;
            }
            if (v33 != v16)
              break;
          }
        }
      }
    }
    v18 = (char *)v6[1];
    v34 = (char *)v6[2];
    if (v18 < v34)
      goto LABEL_31;
    v35 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)*v6) >> 3);
    v36 = v35 + 1;
    if (v35 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v37 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (_BYTE *)*v6) >> 3);
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 >= 0x555555555555555)
        v38 = 0xAAAAAAAAAAAAAAALL;
      else
        v38 = v36;
      v39 = (char *)sub_245CF3B48(v38);
      v24 = &v39[24 * v35];
      v26 = &v39[24 * v40];
      *(_QWORD *)v24 = v5;
      *((_QWORD *)v24 + 1) = v4;
      *((_DWORD *)v24 + 4) = v9;
      v27 = v24 + 24;
      v41 = (char *)*v6;
      v28 = (char *)v6[1];
      if (v28 == *v6)
        goto LABEL_41;
      do
      {
        v42 = *(_OWORD *)(v28 - 24);
        *((_QWORD *)v24 - 1) = *((_QWORD *)v28 - 1);
        *(_OWORD *)(v24 - 24) = v42;
        v24 -= 24;
        v28 -= 24;
      }
      while (v28 != v41);
LABEL_40:
      v28 = (char *)*v6;
LABEL_41:
      *v6 = v24;
      v6[1] = v27;
      v6[2] = v26;
      if (v28)
        operator delete(v28);
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  v18 = (char *)v6[1];
  v17 = (char *)v6[2];
  if (v18 >= v17)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)*v6) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (_BYTE *)*v6) >> 3);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v20;
      v23 = (char *)sub_245CF3B48(v22);
      v24 = &v23[24 * v19];
      v26 = &v23[24 * v25];
      *(_QWORD *)v24 = v5;
      *((_QWORD *)v24 + 1) = v4;
      *((_DWORD *)v24 + 4) = v9;
      v27 = v24 + 24;
      v29 = (char *)*v6;
      v28 = (char *)v6[1];
      if (v28 == *v6)
        goto LABEL_41;
      do
      {
        v30 = *(_OWORD *)(v28 - 24);
        *((_QWORD *)v24 - 1) = *((_QWORD *)v28 - 1);
        *(_OWORD *)(v24 - 24) = v30;
        v24 -= 24;
        v28 -= 24;
      }
      while (v28 != v29);
      goto LABEL_40;
    }
LABEL_44:
    sub_245CF3B34();
  }
LABEL_31:
  *(_QWORD *)v18 = v5;
  *((_QWORD *)v18 + 1) = v4;
  v27 = v18 + 24;
  *((_DWORD *)v18 + 4) = v9;
LABEL_43:
  v6[1] = v27;
}

uint64_t sub_245CF4958(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK13sentencepiece3bpe5Model12SampleEncodeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEfE3$_2"
    || ((v3 & (unint64_t)"ZNK13sentencepiece3bpe5Model12SampleEncodeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEfE3$_2" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK13sentencepiece3bpe5Model12SampleEncodeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEfE3$_2")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK13sentencepiece3bpe5Model12SampleEncodeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEfE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_245CF49AC()
{
  return &unk_2516F6DD8;
}

unint64_t sub_245CF49B8(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v72;
  unint64_t v73;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      v8 = a1[2];
      v7 = a1[3];
      v9 = __ROR8__(v6 + v7, 52);
      v10 = v6 + a1[1];
      v11 = __ROR8__(v10, 7);
      v12 = v10 + v8;
      v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      v15 = __ROR8__(v14 + v13, 52);
      v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      v17 = __ROR8__(v13, 37);
      v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      v19 = __ROR8__(v18, 7);
      v20 = v16 + __ROR8__(v12, 31);
      v21 = v18 + v5;
      v22 = v21 + v14;
      v23 = 0x9AE16A3B2F90404FLL;
      v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    v4 = 0x9DDFEA08EB382D69;
    v32 = *(uint64_t *)((char *)a1 + a2 - 48);
    v33 = *(uint64_t *)((char *)a1 + a2 - 40);
    v34 = *(uint64_t *)((char *)a1 + a2 - 24);
    v36 = *(uint64_t *)((char *)a1 + a2 - 64);
    v35 = *(uint64_t *)((char *)a1 + a2 - 56);
    v37 = *(uint64_t *)((char *)a1 + a2 - 16);
    v38 = *(uint64_t *)((char *)a1 + a2 - 8);
    v39 = v35 + v37;
    v40 = 0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))));
    v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
    v42 = v36 + a2 + v35 + v32;
    v43 = v42 + v33;
    v44 = __ROR8__(v42, 44) + v36 + a2 + __ROR8__(v33 + v36 + a2 - 0x622015F714C7D297 * (v40 ^ (v40 >> 47)), 21);
    v45 = v35 + v37 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    v46 = v45 + v34 + v37;
    v47 = __ROR8__(v46, 44);
    v48 = v46 + v38;
    v49 = v47 + v45 + __ROR8__(v45 + v33 + v38, 21);
    v51 = *a1;
    v50 = a1 + 4;
    v52 = v51 - 0x4B6D499041670D8DLL * v33;
    v53 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v54 = *(v50 - 3);
      v55 = v52 + v43 + v39 + v54;
      v56 = v50[2];
      v57 = v50[3];
      v58 = v50[1];
      v39 = v58 + v43 - 0x4B6D499041670D8DLL * __ROR8__(v39 + v44 + v56, 42);
      v59 = v41 + v48;
      v60 = *(v50 - 2);
      v61 = *(v50 - 1);
      v62 = *(v50 - 4) - 0x4B6D499041670D8DLL * v44;
      v63 = v62 + v48 + v61;
      v64 = v62 + v54 + v60;
      v43 = v64 + v61;
      v65 = __ROR8__(v64, 44) + v62;
      v66 = (0xB492B66FBE98F273 * __ROR8__(v55, 37)) ^ v49;
      v52 = 0xB492B66FBE98F273 * __ROR8__(v59, 33);
      v44 = v65 + __ROR8__(v63 + v66, 21);
      v67 = v52 + v49 + *v50;
      v48 = v67 + v58 + v56 + v57;
      v49 = __ROR8__(v67 + v58 + v56, 44) + v67 + __ROR8__(v39 + v60 + v67 + v57, 21);
      v50 += 8;
      v41 = v66;
      v53 += 64;
    }
    while (v53);
    v68 = v52
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47));
    v69 = 0x9DDFEA08EB382D69
        * (v68 ^ (v66
                - 0x4B6D499041670D8DLL * (v39 ^ (v39 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) ^ ((0x9DDFEA08EB382D69 * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) >> 47))));
    v70 = 0x9DDFEA08EB382D69 * (v68 ^ (v69 >> 47) ^ v69);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    v26 = a1[1];
    v27 = 0xB492B66FBE98F273 * *a1;
    v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    v23 = 0x9DDFEA08EB382D69;
    v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)));
    v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 < 9)
  {
    if (a2 >= 4)
    {
      v72 = *(unsigned int *)((char *)a1 + a2 - 4);
      v23 = 0x9DDFEA08EB382D69;
      v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
      v31 = v72 ^ (v73 >> 47) ^ v73;
      goto LABEL_8;
    }
    v4 = 0x9AE16A3B2F90404FLL;
    if (!a2)
      return v4;
    v70 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v4 *= v70 ^ (v70 >> 47);
    return v4;
  }
  v2 = *(uint64_t *)((char *)a1 + a2 - 8);
  v3 = __ROR8__(v2 + a2, a2);
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
}

uint64_t **sub_245CF4DEC(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **i;
  unint64_t v14;

  v6 = sub_245CF49B8(a2, a3);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ****)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  for (i = *v12; i; i = (uint64_t **)*i)
  {
    v14 = (unint64_t)i[1];
    if (v8 == v14)
    {
      if (i[3] == (uint64_t *)a3 && !memcmp(i[2], a2, a3))
        return i;
    }
    else
    {
      if (v10 > 1)
      {
        if (v14 >= *(_QWORD *)&v7)
          v14 %= *(_QWORD *)&v7;
      }
      else
      {
        v14 &= *(_QWORD *)&v7 - 1;
      }
      if (v14 != v11)
        return 0;
    }
  }
  return i;
}

void sub_245CF4F10(_QWORD *a1)
{
  sub_245CF448C(a1);
  JUMPOUT(0x249546A74);
}

uint64_t **sub_245CF4F3C(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x249546A74);
  }
  return result;
}

uint64_t sub_245CF4F98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_245CF505C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x249546A20](v1);
  _Unwind_Resume(a1);
}

void sub_245CF5084(uint64_t a1, int *a2)
{
  int v3;
  void **v4;
  size_t v5;
  void *__p[2];
  unsigned __int8 v7;

  v3 = *a2;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (size_t)__p[1];
  sub_245CF8D8C(a1, v3, v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_245CF50F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_245CF5114(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 8) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 8 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249546A20](a1 + 120);
  return a1;
}

uint64_t sub_245CF519C(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  char v21;
  int j;
  unint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  int v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t k;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  unint64_t v75;
  char v76;
  int m;
  unint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  size_t v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  int *v89;
  _DWORD *v90;
  int v91;
  uint64_t v92;
  const char *v94;
  _QWORD *exception;
  unint64_t v97;
  unint64_t v98;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _QWORD v104[4];
  _QWORD v105[4];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _DWORD v119[3];

  v4 = a2;
  v105[0] = a2;
  v105[1] = a3;
  v105[2] = 0;
  v105[3] = a4;
  v103 = 0u;
  memset(v104, 0, 28);
  v101 = 0u;
  v102 = 0u;
  if (!a4)
  {
    v7 = 1;
    do
    {
      v8 = v7;
      v7 *= 2;
    }
    while (v8 < v4);
    if (v8)
      sub_245CF6208((uint64_t *)&v101 + 1, v8);
    v9 = operator new[]();
    v10 = v9;
    for (i = 0; i != 49152; i += 12)
    {
      v12 = v9 + i;
      *(_WORD *)(v12 + 8) = 0;
      *(_QWORD *)v12 = 0;
    }
    v13 = v103;
    *(_QWORD *)&v103 = v10;
    if (v13)
      MEMORY[0x249546A50](v13, 0x1000C80CBA68D63);
    if (!(_QWORD)v102)
    {
      sub_245CF6490((uint64_t)&v101);
      v10 = v103;
    }
    v14 = *(_DWORD *)(v10 + 4);
    if (!LODWORD(v104[3]))
    {
      LODWORD(v104[3]) = *(_DWORD *)(v10 + 4);
      if (!v14)
        LODWORD(v104[3]) = v102;
    }
    v15 = *(_DWORD *)v10;
    *(_DWORD *)(v10 + 12 * (*(_DWORD *)v10 & 0xFFF) + 4) = v14;
    *(_DWORD *)(v10 + 12 * (*(_DWORD *)(v10 + 4) & 0xFFF)) = v15;
    *(_WORD *)(v10 + 8) = 257;
    **((_DWORD **)&v101 + 1) = **((_DWORD **)&v101 + 1) & 0x80000100 | 0x400;
    if (v4)
    {
      sub_245CF66A0((uint64_t)&v101, v105, 0, v4, 0, 0);
      v10 = v103;
    }
    v16 = (unint64_t)v102 >> 8;
    if ((unint64_t)v102 >> 8 <= 0x10)
      v17 = 0;
    else
      v17 = ((unint64_t)v102 >> 8) - 16;
    if (v17 != (_DWORD)v16)
    {
      v18 = v17 << 8;
      do
      {
        v19 = 0;
        v20 = (v17 << 8);
        do
        {
          v21 = v18 + v19;
          if (!*(_BYTE *)(v10 + 12 * ((v18 + v19) & 0xFFF) + 9))
            goto LABEL_28;
          ++v19;
        }
        while (v19 != 256);
        v21 = 0;
LABEL_28:
        for (j = 0; j != 256; ++j)
        {
          if (!*(_BYTE *)(v10 + 12 * (v20 & 0xFFF) + 8))
          {
            if ((unint64_t)v102 <= v20)
            {
              sub_245CF6490((uint64_t)&v101);
              v10 = v103;
            }
            v23 = v10 + 12 * (v20 & 0xFFF);
            v26 = *(_DWORD *)(v23 + 4);
            v24 = (_DWORD *)(v23 + 4);
            v25 = v26;
            if (v20 == LODWORD(v104[3]))
            {
              LODWORD(v104[3]) = v25;
              if (v20 == v25)
                LODWORD(v104[3]) = v102;
            }
            v27 = v10 + 12 * (v20 & 0xFFF);
            v28 = *(_DWORD *)v27;
            *(_DWORD *)(v10 + 12 * (v28 & 0xFFF) + 4) = v25;
            *(_DWORD *)(v10 + 12 * (*v24 & 0xFFF)) = v28;
            *(_BYTE *)(v27 + 8) = 1;
            *(_BYTE *)(*((_QWORD *)&v101 + 1) + 4 * v20) = v21 ^ (v18 + j);
          }
          ++v20;
        }
        ++v17;
        v18 += 256;
      }
      while (v17 != (_DWORD)v16);
    }
    if (v10)
    {
      MEMORY[0x249546A50](v10, 0x1000C80CBA68D63);
      *(_QWORD *)&v103 = 0;
    }
    v29 = a1;
    if (*((_QWORD *)&v103 + 1))
    {
      MEMORY[0x249546A50](*((_QWORD *)&v103 + 1), 0x1000C8077774924);
      *((_QWORD *)&v103 + 1) = 0;
    }
    v104[0] = 0;
    v104[1] = 0;
    goto LABEL_150;
  }
  v118 = 0;
  v116 = 0uLL;
  v117 = 0uLL;
  v114 = 0uLL;
  v115 = 0uLL;
  v112 = 0uLL;
  v113 = 0uLL;
  v110 = 0uLL;
  v111 = 0uLL;
  v108 = 0uLL;
  v109 = 0uLL;
  v106 = 0uLL;
  v107 = 0uLL;
  v119[0] = 0;
  sub_245CF7758((uint64_t *)&v113 + 1, 0x400uLL, v119);
  if ((_QWORD)v117)
  {
    v5 = v117 - 1;
    v6 = v106 + 12 * *(unsigned int *)(*((_QWORD *)&v116 + 1) + 4 * (v117 - 1));
    *(_DWORD *)(v6 + 7) = 0;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)&v117 = v5;
  }
  else
  {
    sub_245CF75BC((uint64_t)&v106);
  }
  sub_245CF77DC((uint64_t *)&v110 + 1);
  sub_245CF7828((uint64_t)&v107 + 8);
  v30 = *((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1) == (_QWORD)v110)
  {
    sub_245CF604C((uint64_t *)&v109, *((_QWORD *)&v109 + 1) + 1);
    v30 = *((_QWORD *)&v109 + 1);
  }
  *((_QWORD *)&v109 + 1) = v30 + 1;
  v118 = 1;
  *(_BYTE *)(v106 + 8) = -1;
  v119[0] = 0;
  sub_245CF7708((uint64_t *)&v115, v119);
  if (!v4)
    goto LABEL_76;
  v31 = 0;
  v97 = v4 + 1;
  v98 = v4;
  do
  {
    v32 = 0;
    v33 = *(_QWORD *)(a3 + 8 * v31);
    do
      v34 = v32;
    while (*(unsigned __int8 *)(v33 + v32++));
    v36 = *(_DWORD *)(a4 + 4 * v31);
    if (v36 < 0)
    {
      v94 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/third"
            "_party/darts_clone/darts.h:1141: exception: failed to insert key: negative value";
      goto LABEL_160;
    }
    if (!v34)
    {
      v94 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/third"
            "_party/darts_clone/darts.h:1143: exception: failed to insert key: zero-length key";
LABEL_160:
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = &off_2516F7A48;
      exception[1] = v94;
      __cxa_throw(exception, (struct type_info *)&unk_2516F6BE8, (void (*)(void *))std::exception::~exception);
    }
    v37 = 0;
    v38 = 0;
    while (1)
    {
      v39 = *(_DWORD *)(v106 + 12 * v38);
      if (!v39)
        goto LABEL_61;
      v40 = *(unsigned __int8 *)(v33 + v37);
      if (v37 < v34 && !*(_BYTE *)(v33 + v37))
      {
        v94 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/thi"
              "rd_party/darts_clone/darts.h:1157: exception: failed to insert key: invalid null character";
        goto LABEL_160;
      }
      v41 = *(unsigned __int8 *)(v106 + 12 * v39 + 8);
      if (v40 < v41)
      {
        v94 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/thi"
              "rd_party/darts_clone/darts.h:1162: exception: failed to insert key: wrong key order";
        goto LABEL_160;
      }
      if (v40 > v41)
        break;
      ++v37;
      v38 = *(_DWORD *)(v106 + 12 * v38);
      if (v37 > v34)
        goto LABEL_73;
    }
    *(_BYTE *)(v106 + 12 * v39 + 10) = 1;
    sub_245CF713C((uint64_t)&v106, v39);
LABEL_61:
    if (v37 <= v34)
    {
      do
      {
        if (v37 >= v34)
          v43 = 0;
        else
          v43 = *(_BYTE *)(v33 + v37);
        if ((_QWORD)v117)
        {
          v44 = v117 - 1;
          v45 = v106;
          v42 = *(_DWORD *)(*((_QWORD *)&v116 + 1) + 4 * (v117 - 1));
          v46 = v106 + 12 * v42;
          *(_DWORD *)(v46 + 7) = 0;
          *(_QWORD *)v46 = 0;
          *(_QWORD *)&v117 = v44;
        }
        else
        {
          v42 = DWORD2(v106);
          sub_245CF75BC((uint64_t)&v106);
          v45 = v106;
        }
        v119[0] = v42;
        v47 = (unsigned int *)(v45 + 12 * v38);
        v48 = *v47;
        if (!*v47)
          *(_BYTE *)(v45 + 12 * v42 + 9) = 1;
        v49 = v45 + 12 * v42;
        *(_DWORD *)(v49 + 4) = v48;
        *(_BYTE *)(v49 + 8) = v43;
        *v47 = v42;
        sub_245CF7708((uint64_t *)&v115, v119);
        ++v37;
        v38 = v42;
      }
      while (v37 <= v34);
    }
    else
    {
      v42 = v38;
    }
    *(_DWORD *)(v106 + 12 * v42) = v36;
    v4 = v98;
LABEL_73:
    ++v31;
    if ((_QWORD)v101)
      ((void (*)(uint64_t, unint64_t))v101)(v31, v97);
  }
  while (v31 != v4);
LABEL_76:
  sub_245CF713C((uint64_t)&v106, 0);
  v50 = *(_BYTE *)(v106 + 8);
  v51 = *(_DWORD *)v106;
  if (v50)
    v52 = (2 * *(unsigned __int8 *)(v106 + 9)) | (4 * v51);
  else
    v52 = 2 * v51;
  **((_DWORD **)&v107 + 1) = v52 | *(unsigned __int8 *)(v106 + 10);
  *(_BYTE *)v109 = v50;
  if ((_QWORD)v106)
  {
    MEMORY[0x249546A50](v106, 0x1000C8077774924);
    *(_QWORD *)&v106 = 0;
  }
  *((_QWORD *)&v106 + 1) = 0;
  *(_QWORD *)&v107 = 0;
  if (*((_QWORD *)&v113 + 1))
  {
    MEMORY[0x249546A50](*((_QWORD *)&v113 + 1), 0x1000C8077774924);
    *((_QWORD *)&v113 + 1) = 0;
  }
  v114 = 0uLL;
  if ((_QWORD)v115)
  {
    MEMORY[0x249546A50](v115, 0x1000C8077774924);
    *(_QWORD *)&v115 = 0;
  }
  *((_QWORD *)&v115 + 1) = 0;
  *(_QWORD *)&v116 = 0;
  if (*((_QWORD *)&v116 + 1))
  {
    MEMORY[0x249546A50](*((_QWORD *)&v116 + 1), 0x1000C8077774924);
    *((_QWORD *)&v116 + 1) = 0;
  }
  v117 = 0uLL;
  v53 = (_DWORD *)operator new[]();
  v54 = v112;
  *(_QWORD *)&v112 = v53;
  if (v54)
    MEMORY[0x249546A50](v54, 0x1000C8052888210);
  *((_QWORD *)&v112 + 1) = 0;
  v55 = v111;
  if ((_QWORD)v111)
  {
    v56 = 0;
    v57 = (unsigned int *)*((_QWORD *)&v110 + 1);
    do
    {
      *v53++ = v56;
      v58 = *v57++;
      v59 = ((((((v58 >> 1) & 0x55555555) + (v58 & 0x55555555)) >> 2) & 0x33333333)
           + ((((v58 >> 1) & 0x55555555) + (v58 & 0x55555555)) & 0x33333333)
           + (((((((v58 >> 1) & 0x55555555) + (v58 & 0x55555555)) >> 2) & 0x33333333)
             + ((((v58 >> 1) & 0x55555555) + (v58 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v56 += ((_BYTE)v59 + BYTE1(v59) + ((v59 + (v59 >> 8)) >> 16)) & 0x3F;
      --v55;
    }
    while (v55);
    *((_QWORD *)&v112 + 1) = v56;
  }
  v60 = 1;
  do
  {
    v61 = v60;
    v60 *= 2;
  }
  while (v61 < (unint64_t)v108);
  if (*((_QWORD *)&v102 + 1) < v61)
    sub_245CF6208((uint64_t *)&v101 + 1, v61);
  v62 = (void *)operator new[]();
  v63 = v104[2];
  v104[2] = v62;
  if (v63)
    MEMORY[0x249546A50](v63, 0x1000C8052888210);
  if (*((_QWORD *)&v112 + 1))
    bzero(v62, 4 * *((_QWORD *)&v112 + 1));
  v64 = operator new[]();
  v65 = v64;
  for (k = 0; k != 49152; k += 12)
  {
    v67 = v64 + k;
    *(_WORD *)(v67 + 8) = 0;
    *(_QWORD *)v67 = 0;
  }
  v68 = v103;
  *(_QWORD *)&v103 = v65;
  if (v68)
    MEMORY[0x249546A50](v68, 0x1000C80CBA68D63);
  if (!(_QWORD)v102)
  {
    sub_245CF6490((uint64_t)&v101);
    v65 = v103;
  }
  v69 = *(_DWORD *)(v65 + 4);
  if (!LODWORD(v104[3]))
  {
    LODWORD(v104[3]) = *(_DWORD *)(v65 + 4);
    if (!v69)
      LODWORD(v104[3]) = v102;
  }
  v70 = *(_DWORD *)v65;
  *(_DWORD *)(v65 + 12 * (*(_DWORD *)v65 & 0xFFF) + 4) = v69;
  *(_DWORD *)(v65 + 12 * (*(_DWORD *)(v65 + 4) & 0xFFF)) = v70;
  *(_WORD *)(v65 + 8) = 257;
  **((_DWORD **)&v101 + 1) = **((_DWORD **)&v101 + 1) & 0x80000100 | 0x400;
  if (**((_DWORD **)&v107 + 1) >= 4u)
  {
    sub_245CF6D1C((uint64_t)&v101, &v106, 0, 0);
    v65 = v103;
  }
  v71 = (unint64_t)v102 >> 8;
  if ((unint64_t)v102 >> 8 <= 0x10)
    v72 = 0;
  else
    v72 = ((unint64_t)v102 >> 8) - 16;
  if (v72 != (_DWORD)v71)
  {
    v73 = v72 << 8;
    do
    {
      v74 = 0;
      v75 = (v72 << 8);
      while (1)
      {
        v76 = v73 + v74;
        if (!*(_BYTE *)(v65 + 12 * ((v73 + v74) & 0xFFF) + 9))
          break;
        if (++v74 == 256)
        {
          v76 = 0;
          break;
        }
      }
      for (m = 0; m != 256; ++m)
      {
        if (!*(_BYTE *)(v65 + 12 * (v75 & 0xFFF) + 8))
        {
          if ((unint64_t)v102 <= v75)
          {
            sub_245CF6490((uint64_t)&v101);
            v65 = v103;
          }
          v78 = v65 + 12 * (v75 & 0xFFF);
          v81 = *(_DWORD *)(v78 + 4);
          v79 = (_DWORD *)(v78 + 4);
          v80 = v81;
          if (v75 == LODWORD(v104[3]))
          {
            LODWORD(v104[3]) = v80;
            if (v75 == v80)
              LODWORD(v104[3]) = v102;
          }
          v82 = v65 + 12 * (v75 & 0xFFF);
          v83 = *(_DWORD *)v82;
          *(_DWORD *)(v65 + 12 * (v83 & 0xFFF) + 4) = v80;
          *(_DWORD *)(v65 + 12 * (*v79 & 0xFFF)) = v83;
          *(_BYTE *)(v82 + 8) = 1;
          *(_BYTE *)(*((_QWORD *)&v101 + 1) + 4 * v75) = v76 ^ (v73 + m);
        }
        ++v75;
      }
      ++v72;
      v73 += 256;
    }
    while (v72 != (_DWORD)v71);
  }
  if (v65)
  {
    MEMORY[0x249546A50](v65, 0x1000C80CBA68D63);
    *(_QWORD *)&v103 = 0;
  }
  v29 = a1;
  if (*((_QWORD *)&v103 + 1))
  {
    MEMORY[0x249546A50](*((_QWORD *)&v103 + 1), 0x1000C8077774924);
    *((_QWORD *)&v103 + 1) = 0;
  }
  v104[0] = 0;
  v104[1] = 0;
  if (v104[2])
  {
    MEMORY[0x249546A50](v104[2], 0x1000C8052888210);
    v104[2] = 0;
  }
  if ((_QWORD)v106)
  {
    MEMORY[0x249546A50](v106, 0x1000C8077774924);
    *(_QWORD *)&v106 = 0;
  }
  *((_QWORD *)&v106 + 1) = 0;
  *(_QWORD *)&v107 = 0;
  if (*((_QWORD *)&v107 + 1))
  {
    MEMORY[0x249546A50](*((_QWORD *)&v107 + 1), 0x1000C8077774924);
    *((_QWORD *)&v107 + 1) = 0;
  }
  v108 = 0uLL;
  if ((_QWORD)v109)
  {
    MEMORY[0x249546A50](v109, 0x1000C8077774924);
    *(_QWORD *)&v109 = 0;
  }
  *((_QWORD *)&v109 + 1) = 0;
  *(_QWORD *)&v110 = 0;
  sub_245CF6318((uint64_t *)&v110 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    MEMORY[0x249546A50](*((_QWORD *)&v113 + 1), 0x1000C8077774924);
    *((_QWORD *)&v113 + 1) = 0;
  }
  v114 = 0uLL;
  if ((_QWORD)v115)
  {
    MEMORY[0x249546A50](v115, 0x1000C8077774924);
    *(_QWORD *)&v115 = 0;
  }
  *((_QWORD *)&v115 + 1) = 0;
  *(_QWORD *)&v116 = 0;
  if (*((_QWORD *)&v116 + 1))
  {
    MEMORY[0x249546A50](*((_QWORD *)&v116 + 1), 0x1000C8077774924);
    *((_QWORD *)&v116 + 1) = 0;
  }
  v117 = 0uLL;
  v118 = 0;
  sub_245CF6368((uint64_t *)&v106);
LABEL_150:
  v84 = v102;
  v85 = 4 * v102;
  v86 = (_DWORD *)operator new[]();
  v87 = v86;
  if (v84)
    bzero(v86, v85);
  v88 = v102;
  if ((_QWORD)v102)
  {
    v89 = (int *)*((_QWORD *)&v101 + 1);
    v90 = v87;
    do
    {
      v91 = *v89++;
      *v90++ = v91;
      --v88;
    }
    while (v88);
  }
  v29[1] = 0;
  v29[2] = 0;
  v92 = v29[3];
  if (v92)
  {
    MEMORY[0x249546A50](v92, 0x1000C8052888210);
    v29[3] = 0;
  }
  v29[1] = v84;
  v29[2] = v87;
  v29[3] = v87;
  return sub_245CF5E94((uint64_t)&v101);
}

void sub_245CF5DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  __cxa_end_catch();
  sub_245CF6368(&a31);
  sub_245CF5E94((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_245CF5DF0(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_245CF3B34();
    v4 = 16 * a2;
    v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * a2];
    bzero(v5, 16 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_245CF5E64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_245CF5E94(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  sub_245CF5F70((uint64_t *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    MEMORY[0x249546A50](v3, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_245CF5FB8((uint64_t *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    MEMORY[0x249546A50](v4, 0x1000C8052888210);
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 72) = 0;
  sub_245CF6008((uint64_t *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    MEMORY[0x249546A50](v5, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_245CF5F70(v2);
  if (*v2)
  {
    MEMORY[0x249546A50](*v2, 0x1000C8077774924);
    *v2 = 0;
  }
  return a1;
}

uint64_t sub_245CF5F70(uint64_t *a1)
{
  uint64_t result;

  sub_245CF619C(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x249546A50](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_245CF5FB8(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = a1 + 1;
  if (a1[1])
    *v2 = 0;
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x249546A50]();
    *a1 = 0;
  }
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t *sub_245CF6008(uint64_t *a1)
{
  sub_245CF5FB8(a1);
  if (*a1)
  {
    MEMORY[0x249546A50](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_245CF604C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x249546A50);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void sub_245CF6160(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x249546A74);
}

void *sub_245CF6184(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(void **)(a1 + 8);
  else
    return &unk_245D25DC9;
}

void sub_245CF619C(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    sub_245CF6208(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t sub_245CF6208(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x249546A50);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t sub_245CF6318(uint64_t *a1)
{
  uint64_t result;

  sub_245CF5FB8(a1);
  result = a1[3];
  if (result)
  {
    result = MEMORY[0x249546A50](result, 0x1000C8052888210);
    a1[3] = 0;
  }
  return result;
}

uint64_t *sub_245CF6368(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;

  sub_245CF5FB8(a1);
  v2 = a1 + 3;
  sub_245CF5FB8(a1 + 3);
  sub_245CF5FB8(a1 + 6);
  sub_245CF6318(a1 + 9);
  sub_245CF5FB8(a1 + 15);
  sub_245CF5FB8(a1 + 18);
  sub_245CF5FB8(a1 + 21);
  a1[24] = 0;
  sub_245CF6BE4(a1 + 21);
  sub_245CF6BE4(a1 + 18);
  sub_245CF6008(a1 + 15);
  sub_245CF6318(a1 + 9);
  v3 = a1[12];
  if (v3)
  {
    MEMORY[0x249546A50](v3, 0x1000C8052888210);
    a1[12] = 0;
  }
  sub_245CF6008(a1 + 9);
  sub_245CF6008(a1 + 6);
  sub_245CF5FB8(a1 + 3);
  if (*v2)
  {
    MEMORY[0x249546A50](*v2, 0x1000C8077774924);
    *v2 = 0;
  }
  sub_245CF5FB8(a1);
  if (*a1)
  {
    MEMORY[0x249546A50](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

void sub_245CF6490(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (v3 + 256);
  v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    sub_245CF619C((uint64_t *)(a1 + 8), (v3 + 256));
  }
  else
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = *(_QWORD *)(a1 + 32);
    while (1)
    {
      v9 = v7 + v6;
      if (!*(_BYTE *)(v8 + 12 * (((_DWORD)v7 + v6) & 0xFFF) + 9))
        break;
      if (++v6 == 256)
      {
        v9 = 0;
        break;
      }
    }
    v10 = 0;
    v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v8 + v11 + v10 + 8))
      {
        if (*(_QWORD *)(a1 + 16) <= v7)
        {
          sub_245CF6490(a1);
          v8 = *(_QWORD *)(a1 + 32);
        }
        v12 = (int *)(v8 + v11 + v10);
        v13 = v12[1];
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 72) = v13;
          if (v7 == v13)
            *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
        }
        v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((_BYTE *)v12 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while ((_DWORD)v10 != 3072);
    sub_245CF619C(v2, (v3 + 256));
    v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      v16 = *(_QWORD *)(a1 + 32);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  v17 = *(_QWORD *)(a1 + 32);
  if ((int)v3 + 1 < v4)
  {
    for (i = 0; i != 255; ++i)
    {
      v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  v21 = *(_DWORD *)(a1 + 72);
  v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

void sub_245CF66A0(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t *v12;
  int v13;
  unint64_t j;
  uint64_t v15;
  void (*v16)(unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  _QWORD *exception;
  const char *v49;
  uint64_t *i;
  unsigned int v51;
  unsigned __int8 v52;

  v12 = (uint64_t *)(a1 + 40);
  for (i = (uint64_t *)(a1 + 40); ; v12 = i)
  {
    if (*(_QWORD *)(a1 + 48))
      *(_QWORD *)(a1 + 48) = 0;
    v13 = -1;
    if (a3 < a4)
    {
      for (j = a3; a4 != j; ++j)
      {
        v52 = 0;
        v15 = a2[2];
        if (v15)
        {
          if (*(_QWORD *)(v15 + 8 * j) > a5)
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * j) + a5);
            LODWORD(v16) = v52;
            if (!v52)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              v49 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepie"
                    "ce/third_party/darts_clone/darts.h:1726: exception: failed to build double-array: invalid null character";
              goto LABEL_81;
            }
            goto LABEL_21;
          }
        }
        else
        {
          v52 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * j) + a5);
          LODWORD(v16) = v52;
          if (v52)
            goto LABEL_21;
        }
        v17 = a2[3];
        if (v17)
        {
          if ((*(_DWORD *)(v17 + 4 * j) & 0x80000000) != 0)
            goto LABEL_80;
        }
        else if ((j & 0x80000000) != 0)
        {
LABEL_80:
          exception = __cxa_allocate_exception(0x10uLL);
          v49 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/t"
                "hird_party/darts_clone/darts.h:1728: exception: failed to build double-array: negative value";
LABEL_81:
          *exception = &off_2516F7A48;
          exception[1] = v49;
          __cxa_throw(exception, (struct type_info *)&unk_2516F6BE8, (void (*)(void *))std::exception::~exception);
        }
        if (v13 == -1)
        {
          if (v17)
            v13 = *(_DWORD *)(v17 + 4 * j);
          else
            v13 = j;
        }
        v16 = *(void (**)(unint64_t, uint64_t))a1;
        if (*(_QWORD *)a1)
        {
          v16(j + 1, *a2 + 1);
          LODWORD(v16) = 0;
        }
LABEL_21:
        v18 = *(_QWORD *)(a1 + 48);
        if (!v18)
          goto LABEL_25;
        v19 = *(unsigned __int8 *)(v18 + *v12 - 1);
        if ((_DWORD)v16 != v19)
        {
          if (v16 < v19)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v49 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece"
                  "/third_party/darts_clone/darts.h:1743: exception: failed to build double-array: wrong key order";
            goto LABEL_81;
          }
LABEL_25:
          sub_245CF6B94(v12, &v52);
        }
      }
    }
    v20 = *(unsigned int *)(a1 + 72);
    v21 = *(_QWORD *)(a1 + 16);
    if (v21 <= v20)
    {
LABEL_39:
      v26 = a6 | v21;
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 32);
      v22 = *(unsigned __int8 **)(a1 + 40);
      v24 = *v22;
      v25 = *(_DWORD *)(a1 + 72);
      while (1)
      {
        v26 = v25 ^ v24;
        v27 = (v25 ^ v24) & 0xFFF;
        if (!*(_BYTE *)(v23 + 12 * v27 + 9)
          && (v26 == a6 || ((v26 ^ a6) & 0x1FE00000) == 0))
        {
          v28 = *(_QWORD *)(a1 + 48);
          if (v28 < 2)
            goto LABEL_40;
          if (!*(_BYTE *)(v23 + 12 * (v27 ^ v22[1]) + 8))
            break;
        }
LABEL_38:
        v25 = *(_DWORD *)(v23 + 12 * (v25 & 0xFFF) + 4);
        if (v25 == (_DWORD)v20)
          goto LABEL_39;
      }
      v29 = 2;
      while (v28 != v29)
      {
        v30 = v29;
        if (*(unsigned __int8 *)(v23 + 12 * (v27 ^ v22[v29++]) + 8))
        {
          if (v30 >= v28)
            break;
          goto LABEL_38;
        }
      }
    }
LABEL_40:
    sub_245CF6B28((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v26 ^ a6);
    if (*(_QWORD *)(a1 + 48))
    {
      v32 = a6;
      v33 = 0;
      v34 = v32;
      v51 = v13 | 0x80000000;
      v35 = *i;
      do
      {
        v36 = v26 ^ *(unsigned __int8 *)(v35 + v33);
        if (*(_QWORD *)(a1 + 16) <= v36)
          sub_245CF6490(a1);
        if (*(_DWORD *)(a1 + 72) == (_DWORD)v36)
        {
          v37 = v36 & 0xFFF;
          v38 = *(_QWORD *)(a1 + 32);
          v39 = *(_DWORD *)(v38 + 12 * (v36 & 0xFFF) + 4);
          *(_DWORD *)(a1 + 72) = v39;
          if (v39 == (_DWORD)v36)
          {
            *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
            v39 = v36;
          }
        }
        else
        {
          v38 = *(_QWORD *)(a1 + 32);
          v37 = v36 & 0xFFF;
          v39 = *(_DWORD *)(v38 + 12 * (v36 & 0xFFF) + 4);
        }
        v40 = (int *)(v38 + 12 * v37);
        v41 = *v40;
        *(_DWORD *)(v38 + 12 * (*v40 & 0xFFF) + 4) = v39;
        *(_DWORD *)(v38 + 12 * (v40[1] & 0xFFF)) = v41;
        *((_BYTE *)v40 + 8) = 1;
        v35 = *(_QWORD *)(a1 + 40);
        v42 = *(_QWORD *)(a1 + 8);
        if (*(_BYTE *)(v35 + v33))
        {
          *(_BYTE *)(v42 + 4 * v36) = *(_BYTE *)(v35 + v33);
        }
        else
        {
          *(_DWORD *)(v42 + 4 * v34) |= 0x100u;
          *(_DWORD *)(v42 + 4 * v36) = v51;
        }
        ++v33;
      }
      while (v33 < *(_QWORD *)(a1 + 48));
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(v38 + 12 * (v26 & 0xFFF) + 9) = 1;
    if (a3 < a4)
    {
      v43 = a2[2];
      while (v43 && *(_QWORD *)(v43 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return;
      }
    }
    if (a3 == a4)
      break;
    v44 = a2[2];
    if (v44 && *(_QWORD *)(v44 + 8 * a3) <= a5)
      v45 = 0;
    else
      v45 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v46 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v44 && *(_QWORD *)(v44 + 8 * v46) <= a5)
          v47 = 0;
        else
          v47 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v46) + a5);
        if (v47 != v45)
        {
          sub_245CF66A0(a1, a2, a3, v46, a5 + 1, v26 ^ v45);
          v44 = a2[2];
          if (v44 && *(_QWORD *)(v44 + 8 * v46) <= a5)
            v45 = 0;
          else
            v45 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v46) + a5);
          a3 = v46;
        }
        ++v46;
      }
      while (a4 != v46);
    }
    a6 = v26 ^ v45;
    ++a5;
  }
}

unsigned int *sub_245CF6B28(unsigned int *result, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_2516F7A48;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiec"
                   "e/third_party/darts_clone/darts.h:1380: exception: failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_2516F6BE8, (void (*)(void *))std::exception::~exception);
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *result = *result & 0x800001FF | v2;
  return result;
}

uint64_t *sub_245CF6B94(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)sub_245CF604C(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_BYTE *)(*v3 + v4) = *a2;
  return result;
}

uint64_t *sub_245CF6BE4(uint64_t *a1)
{
  sub_245CF5FB8(a1);
  return sub_245CF6008(a1);
}

uint64_t sub_245CF6C0C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x249546A50);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

unsigned int *sub_245CF6D1C(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int *result;
  int v45;
  int v46;
  unint64_t v47;
  char v48;

  v8 = *(unsigned int *)(a2[3] + 4 * a3);
  v9 = v8 >> 2;
  v10 = v8 >> 7;
  v11 = a2[9];
  v12 = 1 << (v8 >> 2);
  if ((v12 & *(_DWORD *)(v11 + 4 * (v8 >> 7))) != 0
    && (v13 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * (sub_245CF70E0(v11, a2[12], v8 >> 2) - 1))) != 0
    && ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(a2[6] + v9))
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_245CF6B28((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    if (*(_QWORD *)(a1 + 48))
      *(_QWORD *)(a1 + 48) = 0;
    if (v8 >= 4)
    {
      v18 = v8 >> 2;
      do
      {
        v48 = *(_BYTE *)(a2[6] + v18);
        sub_245CF6B94((uint64_t *)(a1 + 40), &v48);
        v19 = *(_DWORD *)(a2[3] + 4 * v18);
        v20 = __CFADD__((_DWORD)v18, 1);
        LODWORD(v18) = v18 + 1;
        v21 = v20;
      }
      while ((v19 & 1) != 0 && !v21);
    }
    v22 = *(unsigned int *)(a1 + 72);
    v23 = *(_QWORD *)(a1 + 16);
    v46 = v12;
    if (v23 <= v22)
    {
LABEL_31:
      v28 = a4 | v23;
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 32);
      v24 = *(unsigned __int8 **)(a1 + 40);
      v26 = *v24;
      v27 = *(_DWORD *)(a1 + 72);
      while (1)
      {
        v28 = v27 ^ v26;
        v29 = (v27 ^ v26) & 0xFFF;
        if (!*(_BYTE *)(v25 + 12 * v29 + 9)
          && (v28 == a4 || ((v28 ^ a4) & 0x1FE00000) == 0))
        {
          v30 = *(_QWORD *)(a1 + 48);
          if (v30 < 2)
            goto LABEL_32;
          if (!*(_BYTE *)(v25 + 12 * (v29 ^ v24[1]) + 8))
            break;
        }
LABEL_30:
        v27 = *(_DWORD *)(v25 + 12 * (v27 & 0xFFF) + 4);
        if (v27 == (_DWORD)v22)
          goto LABEL_31;
      }
      v31 = 2;
      while (v30 != v31)
      {
        v32 = v31;
        if (*(unsigned __int8 *)(v25 + 12 * (v29 ^ v24[v31++]) + 8))
        {
          if (v32 >= v30)
            break;
          goto LABEL_30;
        }
      }
    }
LABEL_32:
    sub_245CF6B28((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a4), v28 ^ a4);
    v47 = v10;
    if (*(_QWORD *)(a1 + 48))
    {
      v34 = 0;
      v35 = *(_DWORD *)(a2[3] + 4 * a3) >> 2;
      do
      {
        v36 = v28 ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + v34);
        if (*(_QWORD *)(a1 + 16) <= v36)
          sub_245CF6490(a1);
        if (*(_DWORD *)(a1 + 72) == (_DWORD)v36)
        {
          v37 = v36 & 0xFFF;
          v38 = *(_QWORD *)(a1 + 32);
          v39 = *(_DWORD *)(v38 + 12 * (v36 & 0xFFF) + 4);
          *(_DWORD *)(a1 + 72) = v39;
          if (v39 == (_DWORD)v36)
          {
            *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
            v39 = v36;
          }
        }
        else
        {
          v38 = *(_QWORD *)(a1 + 32);
          v37 = v36 & 0xFFF;
          v39 = *(_DWORD *)(v38 + 12 * (v36 & 0xFFF) + 4);
        }
        v40 = (int *)(v38 + 12 * v37);
        v41 = *v40;
        *(_DWORD *)(v38 + 12 * (*v40 & 0xFFF) + 4) = v39;
        *(_DWORD *)(v38 + 12 * (v40[1] & 0xFFF)) = v41;
        *((_BYTE *)v40 + 8) = 1;
        v42 = *(_QWORD *)(a1 + 8);
        if (*(_BYTE *)(a2[6] + v35))
        {
          *(_BYTE *)(v42 + 4 * v36) = *(_BYTE *)(*(_QWORD *)(a1 + 40) + v34);
          v43 = *(_DWORD *)(a2[3] + 4 * v35);
        }
        else
        {
          *(_DWORD *)(v42 + 4 * a4) |= 0x100u;
          v43 = *(_DWORD *)(a2[3] + 4 * v35);
          *(_DWORD *)(v42 + 4 * v36) = (v43 >> 1) | 0x80000000;
        }
        v35 = ((int)(v43 << 31) >> 31) & (v35 + 1);
        ++v34;
      }
      while (v34 < *(_QWORD *)(a1 + 48));
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 32);
    }
    *(_BYTE *)(v38 + 12 * (v28 & 0xFFF) + 9) = 1;
    result = (unsigned int *)a2[9];
    if ((result[v47] & v46) != 0)
    {
      result = (unsigned int *)sub_245CF70E0((uint64_t)result, a2[12], v9);
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * ((_DWORD)result - 1)) = v28;
    }
    do
    {
      if (*(_BYTE *)(a2[6] + v9))
        result = (unsigned int *)sub_245CF6D1C(a1, a2, v9, v28 ^ *(unsigned __int8 *)(a2[6] + v9));
      if ((_DWORD)v9 == -1)
        break;
      v45 = *(_DWORD *)(a2[3] + 4 * v9);
      LODWORD(v9) = v9 + 1;
    }
    while ((v45 & 1) != 0);
  }
  return result;
}

uint64_t sub_245CF70E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = (a3 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v4 = *(_DWORD *)(a2 + v3);
  LODWORD(v3) = *(_DWORD *)(a1 + v3) & (0xFFFFFFFF >> ~(_BYTE)a3);
  LODWORD(v3) = ((((unint64_t)(((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v3 + BYTE1(v3) + ((v3 + (v3 >> 8)) >> 16)) & 0x3Fu) + v4;
}

uint64_t sub_245CF713C(uint64_t result, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  int v61;

  v2 = (uint64_t *)result;
  v3 = *(_QWORD *)(result + 152) - 1;
  v4 = *(unsigned int *)(*(_QWORD *)(result + 144) + 4 * v3);
  if (v4 != a2)
  {
    v5 = (uint64_t *)(result + 24);
    v6 = (uint64_t *)(result + 48);
    v57 = (uint64_t *)(result + 120);
    v58 = (uint64_t *)(result + 72);
    v59 = a2;
    while (1)
    {
      v2[19] = v3;
      v7 = v2[16];
      if (v2[24] >= v7 - (v7 >> 2))
      {
        v8 = 2 * v7;
        sub_245CF5FB8(v57);
        v60 = 0;
        result = (uint64_t)sub_245CF7758(v57, v8, &v60);
        v9 = v2[4];
        if (v9 >= 2)
        {
          v10 = *v6;
          for (i = 1; i != v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = v2[15];
              do
              {
                v19 = v12 % (unint64_t)v2[16];
                v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      if (!v4)
      {
        v43 = (unsigned int *)v2[15];
        v35 = *v43;
        if (*v43)
        {
          LODWORD(v34) = 0;
          v44 = v2[3];
          while (1)
          {
            v45 = v35;
            if (*(_DWORD *)(*v2 + 4))
            {
              v45 = v35;
              while ((*(_DWORD *)(v44 + 4 * v45) & 1) != 0)
              {
                ++v45;
                if (!*(_DWORD *)(*v2 + 12 * *(unsigned int *)(*v2 + 4) + 4))
                  goto LABEL_47;
              }
            }
            else
            {
LABEL_47:
              if ((*(_DWORD *)(v44 + 4 * v45) & 1) == 0)
              {
LABEL_51:
                *(_DWORD *)(*v58 + 4 * (v35 >> 5)) |= 1 << v35;
                if (!v4)
                  goto LABEL_66;
                goto LABEL_65;
              }
            }
            v34 = (v34 + 1) % (unint64_t)v2[16];
            v35 = v43[v34];
            if (!v35)
              goto LABEL_58;
          }
        }
        v34 = 0;
        v46 = 0;
        goto LABEL_64;
      }
      v20 = 0;
      v21 = *v2;
      v22 = v4;
      do
      {
        ++v20;
        LODWORD(v22) = *(_DWORD *)(v21 + 12 * v22 + 4);
      }
      while ((_DWORD)v22);
      LODWORD(v23) = 0;
      v24 = v4;
      do
      {
        v25 = (int *)(v21 + 12 * v24);
        v26 = *((unsigned __int8 *)v25 + 8);
        v27 = *v25;
        if (v26)
          v28 = (2 * *(unsigned __int8 *)(v21 + 12 * v24 + 9)) | (4 * v27);
        else
          v28 = 2 * v27;
        v29 = v21 + 12 * v24;
        v30 = ((v28 | *(unsigned __int8 *)(v29 + 10)) ^ ~(v26 << 24)) + ((v28 | *(unsigned __int8 *)(v29 + 10)) << 15);
        v31 = 2057 * ((5 * (v30 ^ (v30 >> 12))) ^ ((5 * (v30 ^ (v30 >> 12))) >> 4));
        v23 = v23 ^ HIWORD(v31) ^ v31;
        v24 = *(unsigned int *)(v29 + 4);
      }
      while ((_DWORD)v24);
      v33 = v2[15];
      v32 = v2[16];
      v34 = v23 % v32;
      v35 = *(_DWORD *)(v33 + 4 * (v23 % v32));
      if (v35)
      {
        v36 = *v5;
        do
        {
          v37 = v35;
          if (*(_DWORD *)(v21 + 12 * v4 + 4))
          {
            v37 = v35;
            while ((*(_DWORD *)(v36 + 4 * v37) & 1) != 0)
            {
              ++v37;
              if (!*(_DWORD *)(v21 + 12 * *(unsigned int *)(v21 + 12 * v4 + 4) + 4))
                goto LABEL_30;
            }
          }
          else
          {
LABEL_30:
            if ((*(_DWORD *)(v36 + 4 * v37) & 1) == 0)
            {
              v38 = v4;
              while (1)
              {
                v39 = (int *)(v21 + 12 * v38);
                v40 = *((unsigned __int8 *)v39 + 8);
                v41 = *v39;
                v42 = v40 ? (2 * *(unsigned __int8 *)(v21 + 12 * v38 + 9)) | (4 * v41) : 2 * v41;
                if ((v42 | *(unsigned __int8 *)(v21 + 12 * v38 + 10)) != *(_DWORD *)(v36 + 4 * v37)
                  || v40 != *(unsigned __int8 *)(*v6 + v37))
                {
                  break;
                }
                v38 = *(unsigned int *)(v21 + 12 * v38 + 4);
                --v37;
                if (!(_DWORD)v38)
                  goto LABEL_51;
              }
            }
          }
          v34 = (v34 + 1) % v32;
          v35 = *(_DWORD *)(v33 + 4 * v34);
        }
        while (v35);
      }
      if (v20)
        break;
LABEL_58:
      v46 = 0;
      if (v4)
        goto LABEL_59;
LABEL_64:
      v35 = v46 + 1;
      *(_DWORD *)(v2[15] + 4 * v34) = v46 + 1;
      ++v2[24];
      if (!v4)
        goto LABEL_66;
      do
      {
LABEL_65:
        v55 = *(unsigned int *)(*v2 + 12 * v4 + 4);
        v61 = v4;
        result = (uint64_t)sub_245CF7708(v2 + 21, &v61);
        v4 = v55;
      }
      while ((_DWORD)v55);
LABEL_66:
      v56 = v2[18];
      v3 = v2[19] - 1;
      *(_DWORD *)(*v2 + 12 * *(unsigned int *)(v56 + 4 * v3)) = v35;
      v4 = *(unsigned int *)(v56 + 4 * v3);
      if (v4 == v59)
        goto LABEL_67;
    }
    do
    {
      sub_245CF77DC(v58);
      result = sub_245CF7828((uint64_t)(v2 + 3));
      v47 = v2[7];
      if (v47 == v2[8])
      {
        result = sub_245CF604C(v2 + 6, v47 + 1);
        v47 = v2[7];
      }
      v2[7] = v47 + 1;
      --v20;
    }
    while (v20);
    v46 = *((_DWORD *)v2 + 28) - 1;
LABEL_59:
    v48 = *v2;
    v49 = v4;
    do
    {
      v50 = (int *)(v48 + 12 * v49);
      v51 = *((unsigned __int8 *)v50 + 8);
      v52 = *v50;
      if (v51)
        v53 = (2 * *(unsigned __int8 *)(v48 + 12 * v49 + 9)) | (4 * v52);
      else
        v53 = 2 * v52;
      v54 = 3 * v49;
      *(_DWORD *)(v2[3] + 4 * v46) = v53 | *(unsigned __int8 *)(v48 + 4 * v54 + 10);
      *(_BYTE *)(v2[6] + v46--) = v51;
      v48 = *v2;
      v49 = *(unsigned int *)(*v2 + 4 * v54 + 4);
    }
    while ((_DWORD)v49);
    goto LABEL_64;
  }
LABEL_67:
  v2[19] = v3;
  return result;
}

uint64_t sub_245CF75BC(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (uint64_t *)result;
  v2 = *(_QWORD *)(result + 8);
  if (v2 == *(_QWORD *)(result + 16))
  {
    v3 = v2 + 1;
    v4 = v2 + 1;
    if (v2 + 1 < (unint64_t)(2 * v2))
    {
      v5 = 1;
      do
      {
        v4 = v5;
        v5 *= 2;
      }
      while (v4 < v3);
    }
    v6 = operator new[]();
    result = *v1;
    v7 = v1[1];
    if (v7)
    {
      v8 = 0;
      do
      {
        v9 = v6 + v8;
        v10 = *(_QWORD *)(result + v8);
        *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8 + 8);
        *(_QWORD *)v9 = v10;
        v8 += 12;
        --v7;
      }
      while (v7);
      *v1 = v6;
      v1[2] = v4;
    }
    else
    {
      *v1 = v6;
      v1[2] = v4;
      if (!result)
      {
        v2 = 0;
        goto LABEL_11;
      }
    }
    result = MEMORY[0x249546A50]();
    v2 = v1[1];
  }
LABEL_11:
  v1[1] = v2 + 1;
  v11 = *v1 + 12 * v2;
  *(_DWORD *)(v11 + 7) = 0;
  *(_QWORD *)v11 = 0;
  return result;
}

uint64_t *sub_245CF7708(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)sub_245CF6C0C(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_DWORD *)(*v3 + 4 * v4) = *a2;
  return result;
}

uint64_t *sub_245CF7758(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[1];
  if (v6 > a2)
  {
    result[1] = a2;
    v6 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_245CF6C0C(result, a2);
    v6 = v5[1];
  }
  if (v6 < a2)
  {
    v7 = *v5;
    do
      *(_DWORD *)(v7 + 4 * v6++) = *a3;
    while (a2 != v6);
    v5[1] = a2;
  }
  return result;
}

uint64_t *sub_245CF77DC(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = result;
  v2 = result[5];
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    result = sub_245CF7708(result, &v3);
    v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return result;
}

uint64_t sub_245CF7828(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;

  v1 = (uint64_t *)result;
  v2 = *(_QWORD *)(result + 8);
  if (v2 == *(_QWORD *)(result + 16))
  {
    v3 = v2 + 1;
    v4 = v2 + 1;
    if (v2 + 1 < (unint64_t)(2 * v2))
    {
      v5 = 1;
      do
      {
        v4 = v5;
        v5 *= 2;
      }
      while (v4 < v3);
    }
    v6 = operator new[]();
    result = *v1;
    v7 = v1[1];
    if (v7)
    {
      for (i = 0; i != v7; ++i)
        *(_DWORD *)(v6 + 4 * i) = *(_DWORD *)(result + 4 * i);
      *v1 = v6;
      v1[2] = v4;
    }
    else
    {
      *v1 = v6;
      v1[2] = v4;
      if (!result)
      {
        v2 = 0;
        goto LABEL_11;
      }
    }
    result = MEMORY[0x249546A50]();
    v2 = v1[1];
  }
LABEL_11:
  v1[1] = v2 + 1;
  *(_DWORD *)(*v1 + 4 * v2) = 0;
  return result;
}

_QWORD *sub_245CF7954(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_2516F7A28;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x249546A50](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

void sub_245CF79A4(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_2516F7A28;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x249546A50](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x249546A74);
}

char *sub_245CF7A04(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_245CF3B34();
  result = (char *)sub_245CF7A54(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_245CF7A54(unint64_t a1)
{
  if (a1 >> 62)
    sub_245CF3B8C();
  return operator new(4 * a1);
}

void *sub_245CF7A9C(unint64_t a1)
{
  if (a1 >> 61)
    sub_245CF3B8C();
  return operator new(8 * a1);
}

uint64_t *sub_245CF7AD0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void **sub_245CF7C68(void **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 **v27;
  char *v28;
  char *v29;
  unsigned __int8 **v30;
  BOOL v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 **v41;
  unint64_t v42;
  char *v43;
  char *v44;

  v8 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v9 = 0;
  if (a5 && a3)
  {
    v8 = 0;
    v9 = 0;
    v12 = (unsigned __int8 *)(a2 + a3);
    while (2)
    {
      v13 = &v9[a2];
      v14 = &v9[a2];
LABEL_5:
      v15 = a5;
      v16 = a4;
      while (*v14 != *v16)
      {
        ++v16;
        if (!--v15)
        {
          if (++v14 != v12)
            goto LABEL_5;
          goto LABEL_34;
        }
      }
      if (v14 != v12)
      {
        v17 = &v14[-a2];
        if (&v14[-a2] != (unsigned __int8 *)-1)
        {
          v18 = (unsigned __int8 *)(v17 - v9);
          if (v17 > v9)
          {
            v19 = (unsigned __int8 *)(a3 - (_QWORD)v9);
            if (v19 >= v18)
              v20 = v18;
            else
              v20 = v19;
            v21 = (unint64_t)a1[2];
            if ((unint64_t)v8 >= v21)
            {
              v22 = ((char *)v8 - (_BYTE *)*a1) >> 4;
              if ((unint64_t)(v22 + 1) >> 60)
                sub_245CF3B34();
              v23 = v21 - (_QWORD)*a1;
              v24 = v23 >> 3;
              if (v23 >> 3 <= (unint64_t)(v22 + 1))
                v24 = v22 + 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
                v25 = 0xFFFFFFFFFFFFFFFLL;
              else
                v25 = v24;
              if (v25)
                v25 = (unint64_t)sub_245CF8184(v25);
              else
                v26 = 0;
              v27 = (unsigned __int8 **)(v25 + 16 * v22);
              *v27 = v13;
              v27[1] = v20;
              v29 = (char *)*a1;
              v28 = (char *)a1[1];
              v30 = v27;
              if (v28 != *a1)
              {
                do
                {
                  *((_OWORD *)v30 - 1) = *((_OWORD *)v28 - 1);
                  v30 -= 2;
                  v28 -= 16;
                }
                while (v28 != v29);
                v28 = (char *)*a1;
              }
              v8 = v27 + 2;
              *a1 = v30;
              a1[1] = v27 + 2;
              a1[2] = (void *)(v25 + 16 * v26);
              if (v28)
                operator delete(v28);
            }
            else
            {
              *v8 = v13;
              v8[1] = v20;
              v8 += 2;
            }
            a1[1] = v8;
          }
          v9 = v17 + 1;
          if (a3 > (unint64_t)(v17 + 1))
            continue;
        }
      }
      break;
    }
  }
LABEL_34:
  v31 = a3 > (unint64_t)v9;
  v32 = a3 - (_QWORD)v9;
  if (v31)
  {
    v33 = &v9[a2];
    v34 = (unint64_t)a1[2];
    if ((unint64_t)v8 >= v34)
    {
      v36 = ((char *)v8 - (_BYTE *)*a1) >> 4;
      if ((unint64_t)(v36 + 1) >> 60)
        sub_245CF3B34();
      v37 = v34 - (_QWORD)*a1;
      v38 = v37 >> 3;
      if (v37 >> 3 <= (unint64_t)(v36 + 1))
        v38 = v36 + 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
        v39 = 0xFFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      if (v39)
        v39 = (unint64_t)sub_245CF8184(v39);
      else
        v40 = 0;
      v41 = (unsigned __int8 **)(v39 + 16 * v36);
      v42 = v39 + 16 * v40;
      *v41 = v33;
      v41[1] = (unsigned __int8 *)v32;
      v35 = v41 + 2;
      v44 = (char *)*a1;
      v43 = (char *)a1[1];
      if (v43 != *a1)
      {
        do
        {
          *((_OWORD *)v41 - 1) = *((_OWORD *)v43 - 1);
          v41 -= 2;
          v43 -= 16;
        }
        while (v43 != v44);
        v43 = (char *)*a1;
      }
      *a1 = v41;
      a1[1] = v35;
      a1[2] = (void *)v42;
      if (v43)
        operator delete(v43);
    }
    else
    {
      *v8 = v33;
      v8[1] = (unsigned __int8 *)v32;
      v35 = v8 + 2;
    }
    a1[1] = v35;
  }
  return a1;
}

void sub_245CF7ECC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_245CF7EF0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_245CF80D8((uint64_t *)v2);
    operator delete(**a1);
  }
}

_QWORD *sub_245CF7F30(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_245CF238C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t *sub_245CF7FF4(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 24;
      v6 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v6;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v4 -= 24;
      v3 -= 24;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_245CF8078(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_245CF80D8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

char *sub_245CF8124(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_245CF3B34();
  result = (char *)sub_245CF3B48(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_245CF8184(unint64_t a1)
{
  if (a1 >> 60)
    sub_245CF3B8C();
  return operator new(16 * a1);
}

uint64_t sub_245CF81B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249546A20](a1 + 112);
  return a1;
}

void sub_245CF8240(uint64_t a1)
{
  sub_245CFF984(a1);
  JUMPOUT(0x249546A74);
}

void sub_245CF8264(uint64_t **a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;

  ((void (*)(uint64_t *__return_ptr))(*a1)[2])(&v23);
  v8 = v23;
  if (v23)
  {
    v23 = 0;
    sub_245CF8D4C(v8);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  if (!a3)
    goto LABEL_3;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    v12 = (int)sub_245D020A8(*a1[2], a2, a3, 0);
    v13 = ((uint64_t (*)(uint64_t **, _BYTE *, uint64_t))(*a1)[14])(a1, a2, v12);
    v14 = v13;
    if (v11 >= v10)
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v9) >> 3) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL)
        sub_245CF3B34();
      if (0x5555555555555556 * ((v10 - v9) >> 3) > v15)
        v15 = 0x5555555555555556 * ((v10 - v9) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3) >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v15;
      v17 = (char *)sub_245CF3B48(v16);
      v19 = &v17[8 * ((v11 - v9) >> 3)];
      *(_QWORD *)v19 = a2;
      *((_QWORD *)v19 + 1) = v12;
      *((_DWORD *)v19 + 4) = v14;
      if (v11 == v9)
      {
        v21 = &v17[8 * ((v11 - v9) >> 3)];
      }
      else
      {
        v20 = &v17[8 * ((v11 - v9) >> 3)];
        do
        {
          v21 = v20 - 24;
          v22 = *(_OWORD *)(v11 - 24);
          *((_QWORD *)v20 - 1) = *((_QWORD *)v11 - 1);
          *(_OWORD *)(v20 - 24) = v22;
          v11 -= 24;
          v20 -= 24;
        }
        while (v11 != v9);
      }
      v10 = &v17[24 * v18];
      v11 = v19 + 24;
      *a4 = v21;
      a4[1] = v19 + 24;
      a4[2] = v10;
      if (v9)
        operator delete(v9);
      v9 = v21;
    }
    else
    {
      *(_QWORD *)v11 = a2;
      *((_QWORD *)v11 + 1) = v12;
      *((_DWORD *)v11 + 4) = v13;
      v11 += 24;
    }
    a4[1] = v11;
    a2 += v12;
    a3 -= v12;
  }
  while (a3);
}

void sub_245CF8424(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_245CF8444@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *result;
  char v9;

  v9 = 0;
  v2 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
  sub_245CF35A0(v2, (uint64_t)"(", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = sub_245CF35A0(v3, (uint64_t)") ", 2);
  v5 = sub_245CF35A0(v4, (uint64_t)"LOG(", 4);
  v6 = sub_245CF35A0(v5, (uint64_t)"ERROR", 5);
  v7 = sub_245CF35A0(v6, (uint64_t)") ", 2);
  sub_245CF35A0(v7, (uint64_t)"Not implemented.", 16);
  result = sub_245CF3834(&v9);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_245CF84FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_245CF3834(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_245CF8510()
{
  return 0;
}

uint64_t sub_245CF8518()
{
  return 0;
}

_OWORD *sub_245CF8520(uint64_t a1, int a2)
{
  unint64_t v2;
  _OWORD *v4;
  unint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  _OWORD *v9;
  char *v10;
  unint64_t v11;
  _OWORD *v13;
  int v14;

  LODWORD(v2) = a2;
  v4 = (_OWORD *)(a1 + 16);
  v5 = a1 + 32;
  while (!*(_BYTE *)(a1 + 56))
  {
    v6 = *(char **)a1;
    if (*(_QWORD *)(a1 + 48))
    {
      v7 = *(void **)(a1 + 8);
      if (!v7)
      {
        *v4 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 8) = v6;
        goto LABEL_11;
      }
      memcpy(v7, v4, v6 - (char *)v4);
      v14 = 0;
      while (1)
      {
        v13 = 0;
        if (((*(uint64_t (**)(_QWORD, _OWORD **, int *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), &v13, &v14) & 1) == 0)break;
        v8 = v14;
        if (v14)
        {
          v9 = v13;
          v10 = *(char **)a1;
          if (v14 >= 17)
          {
            *v13 = *(_OWORD *)v10;
            v11 = (unint64_t)v9 + v8 - 16;
            *(_QWORD *)a1 = v11;
            *(_QWORD *)(a1 + 8) = 0;
            goto LABEL_13;
          }
          *v4 = *(_OWORD *)v10;
          v11 = (unint64_t)v4 + (int)v8;
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v9;
          goto LABEL_12;
        }
      }
    }
    *(_BYTE *)(a1 + 56) = 1;
LABEL_11:
    *(_QWORD *)a1 = v5;
    v11 = v5;
LABEL_12:
    v9 = v4;
LABEL_13:
    v2 = (unint64_t)v9 + (int)v2 - (int)v6;
    if (v2 < v11)
      return (_OWORD *)v2;
  }
  return v4;
}

uint64_t sub_245CF8630(_DWORD *a1, char *__src, int a3, _OWORD *__dst)
{
  _OWORD *v4;
  int v5;
  int v7;

  v4 = __dst;
  v5 = a3;
  v7 = *a1 - (_DWORD)__dst + 16;
  if (v7 < a3)
  {
    do
    {
      memcpy(v4, __src, v7);
      v5 -= v7;
      __src += v7;
      v4 = sub_245CF8520((uint64_t)a1, (int)v4 + v7);
      v7 = *a1 - (_DWORD)v4 + 16;
    }
    while (v5 > v7);
  }
  memcpy(v4, __src, v5);
  return (uint64_t)v4 + v5;
}

char *sub_245CF86CC(uint64_t a1, unsigned int a2, char *a3, _BYTE *a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  int v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  int v21;
  unint64_t v22;
  unsigned int v24;
  unsigned int v25;
  _OWORD *v26;
  int v27;

  if (*(_QWORD *)a1 <= (unint64_t)a4)
    a4 = sub_245CF8520(a1, (int)a4);
  if (a3[23] >= 0)
    v7 = a3[23];
  else
    v7 = *((_QWORD *)a3 + 1);
  v8 = (8 * a2) | 2;
  if (v8 >= 0x80)
  {
    LOBYTE(v8) = (8 * a2) | 0x82;
    a4[1] = a2 >> 4;
    v9 = 2;
  }
  else
  {
    v9 = 1;
  }
  v10 = &a4[v9];
  *a4 = v8;
  if (v7 >= 0x80)
  {
    v24 = v7;
    do
    {
      *v10++ = v24 | 0x80;
      v11 = v24 >> 7;
      v25 = v24 >> 14;
      v24 >>= 7;
    }
    while (v25);
  }
  else
  {
    LOBYTE(v11) = v7;
  }
  *v10 = v11;
  v12 = v10 + 1;
  if (a3[23] < 0)
    a3 = *(char **)a3;
  if (!*(_BYTE *)(a1 + 57))
  {
    if (*(_QWORD *)a1 - (_QWORD)v12 >= (int)v7)
      goto LABEL_16;
    return (char *)sub_245CF8630((_DWORD *)a1, a3, v7, v12);
  }
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)a1 - (_QWORD)v12;
  if (v14 + 16 <= (int)v7)
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v15 = v12;
      goto LABEL_39;
    }
    v15 = (char *)(a1 + 16);
    v16 = *(void **)(a1 + 8);
LABEL_22:
    if (v16)
    {
      v17 = (_DWORD)v12 - v13;
      if ((unint64_t)v12 > v13)
      {
        if (*(_QWORD *)(a1 + 48))
        {
          memcpy(v16, (const void *)(a1 + 16), v13 - (_QWORD)v15);
          v27 = 0;
          while (1)
          {
            v26 = 0;
            if (((*(uint64_t (**)(_QWORD, _OWORD **, int *))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), &v26, &v27) & 1) == 0)break;
            v18 = v27;
            if (v27)
            {
              v19 = v26;
              v20 = *(_OWORD **)a1;
              if (v27 < 17)
              {
                *(_OWORD *)v15 = *v20;
                v13 = (unint64_t)&v15[(int)v18];
                v16 = v19;
                v19 = (_OWORD *)(a1 + 16);
              }
              else
              {
                v16 = 0;
                *v26 = *v20;
                v13 = (unint64_t)v19 + v18 - 16;
              }
              *(_QWORD *)a1 = v13;
              *(_QWORD *)(a1 + 8) = v16;
              v12 = (char *)v19 + v17;
              if (!*(_BYTE *)(a1 + 56))
                goto LABEL_22;
              goto LABEL_38;
            }
          }
        }
        *(_BYTE *)(a1 + 56) = 1;
        goto LABEL_38;
      }
      memcpy(v16, (const void *)(a1 + 16), v12 - v15);
      v22 = *(_QWORD *)a1;
      *(_QWORD *)(a1 + 8) += v12 - v15;
      v21 = v22 - (_DWORD)v12;
    }
    else
    {
      v21 = v13 - (_DWORD)v12 + 16;
      *(_QWORD *)(a1 + 8) = v12;
    }
    if (v21)
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
LABEL_38:
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v15;
LABEL_39:
    if (((*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), a3, v7) & 1) == 0)
    {
      *(_BYTE *)(a1 + 56) = 1;
      v15 = (char *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 32;
    }
    return v15;
  }
  if (v14 >= (int)v7)
  {
LABEL_16:
    memcpy(v12, a3, (int)v7);
    return &v12[(int)v7];
  }
  return (char *)sub_245CF8630((_DWORD *)a1, a3, v7, v12);
}

uint64_t sub_245CF897C(_DWORD *a1, int a2, uint64_t a3, _BYTE *a4)
{
  _BYTE *v4;
  uint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _OWORD *v17;
  char *v18;
  uint64_t v19;
  unsigned int v21;
  unsigned int v22;

  v4 = a4;
  if (*(_QWORD *)a1 <= (unint64_t)a4)
    v4 = sub_245CF8520((uint64_t)a1, (int)a4);
  if (*(char *)(a3 + 23) >= 0)
    LODWORD(v8) = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = (8 * a2) | 2;
  if (v9 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v11 = (8 * a2) >> 7;
    if (v9 >> 14)
    {
      v12 = v4 + 1;
      do
      {
        v13 = v12;
        *v12++ = v11 | 0x80;
        v14 = v11 >> 7;
        v15 = v11 >> 14;
        v11 >>= 7;
      }
      while (v15);
      v10 = v13 + 2;
      *v12 = v14;
    }
    else
    {
      v4[1] = v11;
      v10 = v4 + 2;
    }
  }
  else
  {
    *v4 = v9;
    v10 = v4 + 1;
  }
  if (v8 >= 0x80)
  {
    v21 = v8;
    do
    {
      *v10++ = v21 | 0x80;
      v16 = v21 >> 7;
      v22 = v21 >> 14;
      v21 >>= 7;
    }
    while (v22);
  }
  else
  {
    LOBYTE(v16) = v8;
  }
  *v10 = v16;
  v17 = v10 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v18 = (char *)a3;
  else
    v18 = *(char **)a3;
  if (*(_QWORD *)a1 - (_QWORD)v17 < (int)v8)
    return sub_245CF8630(a1, v18, v8, v17);
  v19 = (int)v8;
  memcpy(v17, v18, (int)v8);
  return (uint64_t)v17 + v19;
}

void sub_245CF8AC4(std::exception *a1)
{
  sub_245CF8B04(a1);
  JUMPOUT(0x249546A74);
}

uint64_t sub_245CF8AE8(uint64_t a1)
{
  uint64_t result;

  result = a1 + 24;
  if (*(char *)(a1 + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_245CF8B04(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_2516F7A70;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

uint64_t sub_245CF8B40(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_2516F7A70;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = a1 + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_245CF2554((_BYTE *)v5, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v5 = v6;
  }
  return a1;
}

void sub_245CF8B98(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_245CF8BAC(uint64_t result)
{
  uint64_t v1;
  int v2;
  const char *v3;
  FILE **v4;
  const char *v5;
  void *exception;

  v1 = result;
  v2 = *(_DWORD *)result;
  if (*(_DWORD *)result == 3 || (v2 & 0x80000000) == 0)
  {
    v3 = *(const char **)(result + 24);
    v4 = (FILE **)MEMORY[0x24BDAC8D8];
    v5 = (&off_2516F7BB0)[v2];
    if (*(char *)(result + 47) >= 0)
      v3 = (const char *)(result + 24);
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[libprotobuf %s %s:%d] %s\n", v5, *(const char **)(result + 8), *(_DWORD *)(result + 16), v3);
    result = fflush(*v4);
    if (*(_DWORD *)v1 == 3)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      sub_245CF8B40((uint64_t)exception, *(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 16), (__int128 *)(v1 + 24));
      __cxa_throw(exception, (struct type_info *)&unk_2516F6C80, (void (*)(void *))sub_245CF8AC0);
    }
  }
  return result;
}

void sub_245CF8C78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_245CF8C8C()
{
  _QWORD *v0;

  v0 = sub_245CF8CA4();
  sub_245CF8CBC(v0);
  exit(-1);
}

_QWORD *sub_245CF8CA4()
{
  return sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"Program terminated with an unrecoverable error.", 47);
}

_QWORD *sub_245CF8CBC(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_245CF8D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_245CF8D4C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x249546A74);
}

uint64_t sub_245CF8D8C(uint64_t a1, int a2, const void *a3, size_t a4)
{
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 __dst;
  unint64_t v15;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)v8 = a2;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_245CF238C();
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v15 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v15) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  v12 = *(_QWORD *)a1 + 8;
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
    operator delete(*(void **)v12);
  *(_OWORD *)v12 = __dst;
  *(_QWORD *)(v12 + 16) = v15;
  return a1;
}

void sub_245CF8E90(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_245CF8D4C(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_245CF8EAC(uint64_t *a1, _DWORD **a2)
{
  uint64_t v4;
  _DWORD *v5;
  _BYTE *v6;
  __int128 v7;

  if (*a2)
  {
    v4 = operator new();
    v5 = *a2;
    *(_DWORD *)v4 = **a2;
    v6 = (_BYTE *)(v4 + 8);
    if (*((char *)v5 + 31) < 0)
    {
      sub_245CF2554(v6, *((void **)v5 + 1), *((_QWORD *)v5 + 2));
    }
    else
    {
      v7 = *(_OWORD *)(v5 + 2);
      *(_QWORD *)(v4 + 24) = *((_QWORD *)v5 + 3);
      *(_OWORD *)v6 = v7;
    }
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return a1;
}

void sub_245CF8F38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void sub_245CF8F5C(uint64_t *a1, _DWORD **a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _BYTE *v7;
  __int128 v8;

  v3 = *a1;
  if ((_DWORD *)v3 != *a2)
  {
    if (*a2)
    {
      v5 = operator new();
      v6 = *a2;
      *(_DWORD *)v5 = **a2;
      v7 = (_BYTE *)(v5 + 8);
      if (*((char *)v6 + 31) < 0)
      {
        sub_245CF2554(v7, *((void **)v6 + 1), *((_QWORD *)v6 + 2));
      }
      else
      {
        v8 = *(_OWORD *)(v6 + 2);
        *(_QWORD *)(v5 + 24) = *((_QWORD *)v6 + 3);
        *(_OWORD *)v7 = v8;
      }
      v3 = *a1;
    }
    else
    {
      v5 = 0;
    }
    *a1 = v5;
    if (v3)
      sub_245CF8D4C(v3);
  }
}

void sub_245CF9008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

uint64_t sub_245CF902C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      sub_245CF90F8(*(int **)v2, (int *)(v2 + 8));
    }
    else if (*(_WORD *)(a1 + 10))
    {
      v3 = 32 * *(unsigned __int16 *)(a1 + 10);
      v4 = (int *)(v2 + 8);
      do
      {
        sub_245CF9160(v4);
        v4 += 8;
        v3 -= 32;
      }
      while (v3);
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      if (v5)
      {
        sub_245CF9290(*(_QWORD **)(v5 + 8));
        MEMORY[0x249546A74](v5, 0x1020C4062D53EE8);
      }
    }
    else if (v5)
    {
      MEMORY[0x249546A50](*(_QWORD *)(a1 + 16), 0x1062C802AB6010CLL);
    }
  }
  return a1;
}

int *sub_245CF90F8(int *result, int *a2)
{
  int *v3;
  int *v4;
  int *v5;
  BOOL v6;

  if (result != a2)
  {
    v3 = result;
    do
    {
      result = sub_245CF9160(v3 + 10);
      v4 = (int *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(int **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (int *)*((_QWORD *)v3 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != a2);
  }
  return result;
}

int *sub_245CF9160(int *result)
{
  int v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int *v6;

  v1 = dword_245D228B0[*((unsigned __int8 *)result + 8)];
  if (*((_BYTE *)result + 9))
  {
    switch(*((_BYTE *)result + 8))
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        v2 = *(int **)result;
        if (!*(_QWORD *)result)
          return result;
        if (v2[1] >= 1)
        {
          v3 = (_QWORD *)*((_QWORD *)v2 + 1);
          v5 = *(v3 - 1);
          v4 = v3 - 1;
          if (!v5)
            operator delete(v4);
        }
        break;
      case 9:
      case 0xC:
        result = *(int **)result;
        if (!result)
          return result;
        sub_245D0360C(result);
        break;
      case 0xA:
      case 0xB:
        if (!*(_QWORD *)result)
          return result;
        sub_245CF92C8(*(_QWORD **)result);
        break;
      default:
        return result;
    }
    goto LABEL_21;
  }
  if (v1 == 10)
  {
    result = *(int **)result;
    if (result)
      return (int *)(*(uint64_t (**)(int *))(*(_QWORD *)result + 8))(result);
  }
  else if (v1 == 9)
  {
    v6 = *(int **)result;
    if (*(_QWORD *)result)
    {
      if (*((char *)v6 + 23) < 0)
        operator delete(*(void **)v6);
LABEL_21:
      JUMPOUT(0x249546A74);
    }
  }
  return result;
}

void sub_245CF9290(_QWORD *a1)
{
  if (a1)
  {
    sub_245CF9290(*a1);
    sub_245CF9290(a1[1]);
    operator delete(a1);
  }
}

void sub_245CF92C8(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_245CF9338(uint64_t *result)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v1 = result;
  if (*((_BYTE *)result + 9))
  {
    switch(*((_BYTE *)result + 8))
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
        *(_DWORD *)*result = 0;
        break;
      case 9:
      case 0xC:
        result = (uint64_t *)sub_245CF946C(*result);
        break;
      case 0xA:
      case 0xB:
        v6 = *result;
        v7 = *(unsigned int *)(*result + 8);
        if ((int)v7 >= 1)
        {
          v8 = (uint64_t *)(*(_QWORD *)(v6 + 16) + 8);
          do
          {
            v9 = *v8++;
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
            --v7;
          }
          while (v7);
          *(_DWORD *)(v6 + 8) = 0;
        }
        break;
      default:
        return result;
    }
  }
  else if ((*((_BYTE *)result + 10) & 1) == 0)
  {
    v2 = dword_245D228B0[*((unsigned __int8 *)result + 8)];
    if (v2 == 10)
    {
      v4 = *(_QWORD *)*result;
      if ((*((_BYTE *)result + 10) & 0x10) != 0)
        v5 = *(uint64_t (**)(void))(v4 + 112);
      else
        v5 = *(uint64_t (**)(void))(v4 + 40);
      result = (uint64_t *)v5();
    }
    else if (v2 == 9)
    {
      v3 = *result;
      if (*(char *)(*result + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
    }
    *((_BYTE *)v1 + 10) = *((_BYTE *)v1 + 10) & 0xF0 | 1;
  }
  return result;
}

uint64_t sub_245CF946C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t **sub_245CF94B8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t **v4;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t **v11;
  int v12;
  uint64_t **result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *(uint64_t ***)(a1 + 16);
  if (v3 >= 0x101)
  {
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    v16 = 0;
    LODWORD(v14) = a2;
    return sub_245CF9600(v4, a2, &v14) + 5;
  }
  v6 = *(unsigned __int16 *)(a1 + 10);
  v7 = &v4[4 * v6];
  if (!*(_WORD *)(a1 + 10))
  {
    if (!*(_WORD *)(a1 + 8))
      goto LABEL_18;
    LOWORD(v6) = 0;
LABEL_17:
    *(_WORD *)(a1 + 10) = v6 + 1;
    *(_DWORD *)v7 = a2;
    v7[1] = 0;
    result = v7 + 1;
    v7[2] = 0;
    v7[3] = 0;
    return result;
  }
  v8 = *(unsigned __int16 *)(a1 + 10);
  do
  {
    v9 = v8 >> 1;
    v10 = (int *)&v4[4 * (v8 >> 1)];
    v12 = *v10;
    v11 = (uint64_t **)(v10 + 8);
    v8 += ~(v8 >> 1);
    if (v12 < (int)a2)
      v4 = v11;
    else
      v8 = v9;
  }
  while (v8);
  if (v4 != v7)
  {
    if (*(_DWORD *)v4 == (_DWORD)a2)
      return v4 + 1;
    if (v6 < v3)
    {
      memmove(v4 + 4, v4, (char *)v7 - (char *)v4);
      LOWORD(v6) = *(_WORD *)(a1 + 10);
      v7 = v4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v6 < v3)
    goto LABEL_17;
LABEL_18:
  sub_245CF96B0((_QWORD *)a1, v6 + 1);
  return (uint64_t **)sub_245CF94B8(a1, a2);
}

uint64_t **sub_245CF9600(uint64_t **a1, int a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  __int128 v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x40uLL);
    v10 = a3[1];
    *((_OWORD *)v9 + 2) = *a3;
    *((_OWORD *)v9 + 3) = v10;
    sub_245CF9A6C(a1, (uint64_t)v7, v6, v9);
    return (uint64_t **)v9;
  }
  return v7;
}

_QWORD *sub_245CF96B0(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  _QWORD *v31;
  _BYTE v32[28];

  v2 = *((unsigned __int16 *)result + 4);
  if (v2 <= 0x100 && v2 < a2)
  {
    v4 = result;
    do
    {
      if ((_WORD)v2)
        LOWORD(v2) = 4 * v2;
      else
        LOWORD(v2) = 1;
    }
    while ((unsigned __int16)v2 < a2);
    v5 = (char *)result[2];
    v6 = *((unsigned __int16 *)result + 5);
    v7 = (uint64_t *)*result;
    if ((unsigned __int16)v2 < 0x101u)
    {
      v8 = 32 * (unsigned __int16)v2;
      if (v7)
      {
        if ((v7[3] & 1) != 0)
          (*(void (**)(_QWORD, void *, unint64_t))(**(_QWORD **)(v7[4] + 32) + 40))(*(_QWORD *)(v7[4] + 32), &unk_2516F6CE8, v8);
        result = sub_245CF21A0((unint64_t *)v7, v8);
      }
      else
      {
        result = operator new[](32 * (unsigned __int16)v2);
      }
      v9 = (uint64_t **)result;
      if ((_DWORD)v6)
        result = memmove(result, v5, 32 * v6);
    }
    else
    {
      if (v7)
      {
        if ((v7[3] & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(v7[4] + 32) + 40))(*(_QWORD *)(v7[4] + 32), &unk_2516F6DC8, 24);
        result = sub_245CF1EEC((unint64_t *)v7, 0x18uLL, (uint64_t)sub_245CF9A64);
      }
      else
      {
        result = (_QWORD *)operator new();
      }
      v9 = (uint64_t **)result;
      result[1] = 0;
      v10 = (uint64_t)(result + 1);
      result[2] = 0;
      *result = result + 1;
      if ((_DWORD)v6)
      {
        v30 = v5;
        v31 = v4;
        v11 = &v5[32 * v6];
        v12 = result + 1;
        v13 = v5;
        while (1)
        {
          v14 = *(_DWORD *)v13;
          *(_OWORD *)&v32[4] = *(_OWORD *)(v13 + 8);
          *(_QWORD *)&v32[20] = *((_QWORD *)v13 + 3);
          if (v12 == (uint64_t *)v10 || (v15 = *(_DWORD *)(v10 + 32), v14 < v15))
          {
            v16 = *(_QWORD *)v10;
            v17 = v10;
            if (*v9 == (uint64_t *)v10)
              goto LABEL_30;
            v18 = *(_QWORD *)v10;
            v19 = v10;
            if (v16)
            {
              do
              {
                v17 = v18;
                v18 = *(_QWORD *)(v18 + 8);
              }
              while (v18);
            }
            else
            {
              do
              {
                v17 = *(_QWORD *)(v19 + 16);
                v20 = *(_QWORD *)v17 == v19;
                v19 = v17;
              }
              while (v20);
            }
            if (*(_DWORD *)(v17 + 32) < v14)
            {
LABEL_30:
              if (v16)
                v21 = (uint64_t **)(v17 + 8);
              else
                v21 = (uint64_t **)v10;
              if (v16)
                v10 = v17;
            }
            else
            {
              v25 = *v12;
              v21 = v9 + 1;
              v10 = (uint64_t)(v9 + 1);
              if (!*v12)
                goto LABEL_61;
              v21 = v9 + 1;
              while (1)
              {
                while (1)
                {
                  v10 = v25;
                  v26 = *(_DWORD *)(v25 + 32);
                  if (v14 >= v26)
                    break;
                  v25 = *(_QWORD *)v10;
                  v21 = (uint64_t **)v10;
                  if (!*(_QWORD *)v10)
                    goto LABEL_61;
                }
                if (v26 >= v14)
                  break;
                v21 = (uint64_t **)(v10 + 8);
                v25 = *(_QWORD *)(v10 + 8);
                if (!v25)
                  goto LABEL_61;
              }
            }
          }
          else
          {
            if (v15 >= v14)
            {
              v22 = (uint64_t *)v10;
              goto LABEL_62;
            }
            v21 = (uint64_t **)(v10 + 8);
            v23 = *(uint64_t **)(v10 + 8);
            if (v23)
            {
              do
              {
                v21 = (uint64_t **)v23;
                v23 = (uint64_t *)*v23;
                v10 = (uint64_t)v21;
                v24 = (uint64_t)v21;
              }
              while (v23);
            }
            else
            {
              v24 = v10;
              do
              {
                v27 = v24;
                v24 = *(_QWORD *)(v24 + 16);
              }
              while (*(_QWORD *)v24 != v27);
            }
            if ((uint64_t *)v24 != v12 && v14 >= *(_DWORD *)(v24 + 32))
            {
              v28 = *v12;
              v21 = v9 + 1;
              v10 = (uint64_t)(v9 + 1);
              if (!*v12)
              {
LABEL_61:
                v22 = (uint64_t *)operator new(0x40uLL);
                *((_DWORD *)v22 + 8) = v14;
                *(_OWORD *)((char *)v22 + 36) = *(_OWORD *)v32;
                *((_OWORD *)v22 + 3) = *(_OWORD *)&v32[12];
                result = sub_245CF9A6C(v9, v10, v21, v22);
                goto LABEL_62;
              }
              v21 = v9 + 1;
              while (1)
              {
                while (1)
                {
                  v10 = v28;
                  v29 = *(_DWORD *)(v28 + 32);
                  if (v14 >= v29)
                    break;
                  v28 = *(_QWORD *)v10;
                  v21 = (uint64_t **)v10;
                  if (!*(_QWORD *)v10)
                    goto LABEL_61;
                }
                if (v29 >= v14)
                  break;
                v21 = (uint64_t **)(v10 + 8);
                v28 = *(_QWORD *)(v10 + 8);
                if (!v28)
                  goto LABEL_61;
              }
            }
          }
          v22 = *v21;
          if (!*v21)
            goto LABEL_61;
LABEL_62:
          v13 += 32;
          v10 = (uint64_t)v22;
          if (v13 == v11)
          {
            v5 = v30;
            v4 = v31;
            break;
          }
        }
      }
    }
    if (!*v4 && v5)
      result = (_QWORD *)MEMORY[0x249546A50](v5, 0x1062C802AB6010CLL);
    *((_WORD *)v4 + 4) = v2;
    v4[2] = v9;
    if ((unsigned __int16)v2 >= 0x101u)
      *((_WORD *)v4 + 5) = 0;
  }
  return result;
}

void sub_245CF9A64(uint64_t a1)
{
  sub_245CF9290(*(_QWORD **)(a1 + 8));
}

uint64_t *sub_245CF9A6C(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_245CF7AD0(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_245CF9AC0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  if (*(int *)(a1 + 4) >= 1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v1 - 8);
    v2 = (void *)(v1 - 8);
    if (!v3)
      operator delete(v2);
  }
}

void sub_245CF9AE0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  if (*(int *)(a1 + 4) >= 1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v1 - 8);
    v2 = (void *)(v1 - 8);
    if (!v3)
      operator delete(v2);
  }
}

void sub_245CF9B00(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  if (*(int *)(a1 + 4) >= 1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v1 - 8);
    v2 = (void *)(v1 - 8);
    if (!v3)
      operator delete(v2);
  }
}

void sub_245CF9B20(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  if (*(int *)(a1 + 4) >= 1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v1 - 8);
    v2 = (void *)(v1 - 8);
    if (!v3)
      operator delete(v2);
  }
}

void sub_245CF9B40(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  if (*(int *)(a1 + 4) >= 1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v1 - 8);
    v2 = (void *)(v1 - 8);
    if (!v3)
      operator delete(v2);
  }
}

void sub_245CF9B60(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  if (*(int *)(a1 + 4) >= 1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v1 - 8);
    v2 = (void *)(v1 - 8);
    if (!v3)
      operator delete(v2);
  }
}

void sub_245CF9B80(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  if (*(int *)(a1 + 4) >= 1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(v1 - 8);
    v2 = (void *)(v1 - 8);
    if (!v3)
      operator delete(v2);
  }
}

uint64_t *sub_245CF9BA8(uint64_t *a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t **v7;
  uint64_t **v8;
  char v9;
  uint64_t v10;
  uint64_t *result;

  v7 = sub_245CF94B8((uint64_t)a1, a2);
  v8 = v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    *((_BYTE *)v7 + 9) = 0;
    v10 = *a1;
    if (v10)
    {
      if ((*(_BYTE *)(v10 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v10 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 32), &unk_2516F6D58, 24);
      result = sub_245CF1EEC((unint64_t *)v10, 0x18uLL, (uint64_t)sub_245CF25DC);
    }
    else
    {
      result = (uint64_t *)operator new();
    }
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    *v8 = result;
  }
  else
  {
    result = *v7;
  }
  *((_BYTE *)v8 + 10) &= 0xF0u;
  return result;
}

uint64_t sub_245CF9C74(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;

  v3 = result;
  v4 = *(int **)(result + 16);
  if (!v4)
  {
    v10 = *(_DWORD *)(result + 8);
    v9 = *(_DWORD *)(result + 12);
    if (v10 > v9)
      goto LABEL_11;
    goto LABEL_9;
  }
  v5 = *v4;
  v6 = *(_DWORD *)(result + 12);
  if ((int)v5 >= v6)
  {
    v9 = *(_DWORD *)(result + 8);
    v10 = v9;
    if (v9 != v6)
    {
      if ((_DWORD)v5 == v6)
      {
        result = *(_QWORD *)&v4[2 * v9 + 2];
        if (result)
          v13 = *(_QWORD *)v3 == 0;
        else
          v13 = 0;
        if (v13)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          v4 = *(int **)(v3 + 16);
        }
        goto LABEL_13;
      }
      if (v9 >= (int)v5)
      {
        v11 = v5 + 1;
        goto LABEL_12;
      }
      *(_QWORD *)&v4[2 * v5 + 2] = *(_QWORD *)&v4[2 * v9 + 2];
      goto LABEL_10;
    }
LABEL_9:
    result = sub_245D034FC((uint64_t *)result, v9 - v10 + 1);
LABEL_10:
    v4 = *(int **)(v3 + 16);
LABEL_11:
    v11 = *v4 + 1;
LABEL_12:
    *v4 = v11;
LABEL_13:
    v12 = *(int *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = v12 + 1;
    *(_QWORD *)&v4[2 * v12 + 2] = a2;
    return result;
  }
  v7 = v4 + 2;
  v8 = *(int *)(result + 8);
  if ((int)v8 < (int)v5)
    *(_QWORD *)&v7[2 * v5] = *(_QWORD *)&v7[2 * v8];
  *(_QWORD *)&v7[2 * v8] = a2;
  *(_DWORD *)(result + 8) = v8 + 1;
  ++**(_DWORD **)(result + 16);
  return result;
}

uint64_t *sub_245CF9D90(uint64_t *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v1 = (_QWORD *)result[2];
  if (*((unsigned __int16 *)result + 4) >= 0x101u)
  {
    v6 = (_QWORD *)*v1;
    v4 = v1 + 1;
    v5 = v6;
    if (v6 != v4)
    {
      do
      {
        result = sub_245CF9338(v5 + 5);
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v4);
    }
  }
  else if (*((_WORD *)result + 5))
  {
    v2 = 32 * *((unsigned __int16 *)result + 5);
    v3 = v1 + 1;
    do
    {
      result = sub_245CF9338(v3);
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void sub_245CF9E2C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  unint64_t v14;
  int **v15;
  int *v16;
  int **v17;
  unsigned int v18;

  if (*(unsigned __int16 *)(a1 + 8) <= 0x100u)
  {
    v4 = *(unsigned __int16 *)(a2 + 8);
    v5 = *(char **)(a1 + 16);
    v6 = *(unsigned __int16 *)(a1 + 10);
    v7 = &v5[32 * v6];
    v8 = *(_QWORD *)(a2 + 16);
    if (v4 > 0x100)
    {
      v14 = sub_245CF9F48(v5, v7, *(_QWORD **)v8, (_QWORD *)(v8 + 8));
    }
    else
    {
      v9 = *(unsigned __int16 *)(a2 + 10);
      v10 = v8 + 32 * v9;
      v12 = (_DWORD)v6 == 0;
      v11 = 0;
      v12 = v12 || (_DWORD)v9 == 0;
      if (!v12)
      {
        do
        {
          if (*(_DWORD *)v5 == *(_DWORD *)v8)
            v13 = v5 + 32;
          else
            v13 = v5;
          if (*(_DWORD *)v5 < *(_DWORD *)v8)
          {
            v5 += 32;
          }
          else
          {
            v8 += 32;
            v5 = v13;
          }
          ++v11;
        }
        while (v5 != v7 && v8 != v10);
      }
      v14 = v11 + ((v10 - v8) >> 5) + ((v7 - v5) >> 5);
    }
    sub_245CF96B0((_QWORD *)a1, v14);
  }
  v15 = *(int ***)(a2 + 16);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x101u)
  {
    sub_245CFA050((int **)*v15, v15 + 1, (uint64_t *)a1);
  }
  else if (*(_WORD *)(a2 + 10))
  {
    v16 = (int *)&v15[4 * *(unsigned __int16 *)(a2 + 10)];
    do
    {
      v17 = v15 + 1;
      v18 = *(_DWORD *)v15;
      v15 += 4;
      sub_245CFA0D0((uint64_t *)a1, v18, v17);
    }
    while (v15 != (int **)v16);
  }
}

uint64_t sub_245CF9F48(char *a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v4 = 0;
  if (a1 != a2 && a3 != a4)
  {
    v4 = 0;
    do
    {
      v5 = *((_DWORD *)a3 + 8);
      if (*(_DWORD *)a1 >= v5)
      {
        if (*(_DWORD *)a1 == v5)
        {
          a1 += 32;
          v6 = (_QWORD *)a3[1];
          if (v6)
          {
            do
            {
              a3 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v7);
          }
        }
        else
        {
          v8 = (_QWORD *)a3[1];
          if (v8)
          {
            do
            {
              a3 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v9);
          }
        }
      }
      else
      {
        a1 += 32;
      }
      ++v4;
    }
    while (a1 != a2 && a3 != a4);
  }
  if (a3 == a4)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = (_QWORD *)a3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)a3[2];
          v13 = *v12 == (_QWORD)a3;
          a3 = v12;
        }
        while (!v13);
      }
      ++v10;
      a3 = v12;
    }
    while (v12 != a4);
  }
  return v4 + ((a2 - a1) >> 5) + v10;
}

uint64_t *sub_245CFA050(int **a1, int **a2, uint64_t *a3)
{
  int **v5;
  int *v6;
  int **v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_245CFA0D0(a3, *((unsigned int *)v5 + 8), v5 + 5);
      v6 = v5[1];
      if (v6)
      {
        do
        {
          v7 = (int **)v6;
          v6 = *(int **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (int **)v5[2];
          v8 = *v7 == (int *)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_245CFA0D0(uint64_t *a1, uint64_t a2, int **a3)
{
  uint64_t *v6;
  uint64_t **v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  int v13;
  uint64_t *v14;
  uint64_t **v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t **v35;
  char v36;
  int *v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t **v41;
  char v42;
  int v43;
  uint64_t *v44;
  uint64_t **v45;
  char v46;
  char v47;
  uint64_t *v48;
  uint64_t **v49;
  char v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  char v54;
  char v55;
  uint64_t v56;
  int *v57;
  int *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  uint64_t v83;
  const std::string **v84;
  std::string **v85;
  int v86;
  int *v87;
  uint64_t *v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *__p[2];
  uint64_t v94;

  if (!*((_BYTE *)a3 + 9))
  {
    if ((*((_BYTE *)a3 + 10) & 1) != 0)
      return;
    v12 = *((_BYTE *)a3 + 8);
    switch(v12)
    {
      case 1:
        v39 = (uint64_t *)*a3;
        v40 = (uint64_t *)a3[2];
        v41 = sub_245CF94B8((uint64_t)a1, a2);
        v41[2] = v40;
        if (v42)
        {
          *((_BYTE *)v41 + 8) = v12;
          *((_BYTE *)v41 + 9) = 0;
        }
        *((_BYTE *)v41 + 10) &= 0xF0u;
        *v41 = v39;
        return;
      case 2:
        v43 = *(_DWORD *)a3;
        v44 = (uint64_t *)a3[2];
        v45 = sub_245CF94B8((uint64_t)a1, a2);
        v45[2] = v44;
        if (v46)
        {
          *((_BYTE *)v45 + 8) = v12;
          *((_BYTE *)v45 + 9) = 0;
        }
        *((_BYTE *)v45 + 10) &= 0xF0u;
        *(_DWORD *)v45 = v43;
        return;
      case 3:
      case 4:
      case 6:
      case 16:
      case 18:
        v33 = (uint64_t *)*a3;
        v34 = (uint64_t *)a3[2];
        v35 = sub_245CF94B8((uint64_t)a1, a2);
        v35[2] = v34;
        if (v36)
        {
          *((_BYTE *)v35 + 8) = v12;
          *((_BYTE *)v35 + 9) = 0;
        }
        *((_BYTE *)v35 + 10) &= 0xF0u;
        *v35 = v33;
        return;
      case 5:
      case 7:
      case 13:
      case 14:
      case 15:
      case 17:
        v13 = *(_DWORD *)a3;
        v14 = (uint64_t *)a3[2];
        v15 = sub_245CF94B8((uint64_t)a1, a2);
        v15[2] = v14;
        if (v16)
        {
          *((_BYTE *)v15 + 8) = v12;
          *((_BYTE *)v15 + 9) = 0;
        }
        *((_BYTE *)v15 + 10) &= 0xF0u;
        *(_DWORD *)v15 = v13;
        return;
      case 8:
        v47 = *(_BYTE *)a3;
        v48 = (uint64_t *)a3[2];
        v49 = sub_245CF94B8((uint64_t)a1, a2);
        v49[2] = v48;
        if (v50)
        {
          *((_BYTE *)v49 + 8) = v12;
          *((_BYTE *)v49 + 9) = 0;
        }
        *((_BYTE *)v49 + 10) &= 0xF0u;
        *(_BYTE *)v49 = v47;
        return;
      case 9:
      case 12:
        v57 = *a3;
        if (*((char *)*a3 + 23) < 0)
        {
          sub_245CF2554(__p, *(void **)v57, *((_QWORD *)v57 + 1));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v57;
          v94 = *((_QWORD *)v57 + 2);
        }
        sub_245CFAC58(a1, a2, v12, (__n128 *)__p, (uint64_t *)a3[2]);
        if (SHIBYTE(v94) < 0)
          operator delete(__p[0]);
        return;
      case 10:
      case 11:
        v51 = (uint64_t *)a3[2];
        v52 = sub_245CF94B8((uint64_t)a1, a2);
        v53 = v52;
        v52[2] = v51;
        if (v54)
        {
          *((_BYTE *)v52 + 8) = *((_BYTE *)a3 + 8);
          *((_BYTE *)v52 + 11) = *((_BYTE *)a3 + 11);
          *((_BYTE *)v52 + 9) = 0;
          v55 = *((_BYTE *)v52 + 10) & 0xF;
          if ((*((_BYTE *)a3 + 10) & 0x10) == 0)
          {
            *((_BYTE *)v52 + 10) = v55;
            v56 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, *a1);
            *v53 = (uint64_t *)v56;
LABEL_126:
            (*(void (**)(uint64_t, int *))(*(_QWORD *)v56 + 64))(v56, *a3);
            goto LABEL_128;
          }
          *((_BYTE *)v52 + 10) = v55 | 0x10;
          v91 = (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, *a1);
          *v53 = (uint64_t *)v91;
          (*(void (**)(uint64_t, int *))(*(_QWORD *)v91 + 104))(v91, *a3);
        }
        else
        {
          v88 = *v52;
          v89 = *a3;
          if ((*((_BYTE *)a3 + 10) & 0x10) != 0)
          {
            if ((*((_BYTE *)v52 + 10) & 0x10) != 0)
            {
              (*(void (**)(uint64_t *, int *))(*v88 + 104))(v88, v89);
            }
            else
            {
              v92 = (*(uint64_t (**)(int *, uint64_t *))(*(_QWORD *)v89 + 24))(*a3, *v52);
              (*(void (**)(uint64_t *, uint64_t))(*v88 + 64))(v88, v92);
            }
            goto LABEL_128;
          }
          v90 = *v88;
          if ((*((_BYTE *)v52 + 10) & 0x10) != 0)
          {
            v56 = (*(uint64_t (**)(uint64_t *, int *))(v90 + 32))(*v52, v89);
            goto LABEL_126;
          }
          (*(void (**)(uint64_t *, int *))(v90 + 64))(v88, v89);
        }
LABEL_128:
        *((_BYTE *)v53 + 10) &= 0xF0u;
        return;
      default:
        return;
    }
  }
  v6 = (uint64_t *)a3[2];
  v7 = sub_245CF94B8((uint64_t)a1, a2);
  v9 = (uint64_t *)v7;
  v7[2] = v6;
  if (v8)
  {
    *((_BYTE *)v7 + 8) = *((_BYTE *)a3 + 8);
    *((_BYTE *)v7 + 11) = *((_BYTE *)a3 + 11);
    *((_BYTE *)v7 + 9) = 1;
  }
  switch(*((_BYTE *)a3 + 8))
  {
    case 1:
      if (v8)
      {
        v23 = *a1;
        if (v23)
        {
          if ((*(_BYTE *)(v23 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v23 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 32), &unk_2516F6C20, 16);
          v24 = sub_245CF1EEC((unint64_t *)v23, 0x10uLL, (uint64_t)sub_245CF9B60);
          *v24 = 0;
          v24[1] = v23;
        }
        else
        {
          v24 = (_QWORD *)operator new();
          *v24 = 0;
          v24[1] = 0;
        }
        *v9 = (uint64_t)v24;
      }
      v58 = *a3;
      v59 = **a3;
      if (v59)
        goto LABEL_91;
      break;
    case 2:
      if (v8)
      {
        v25 = *a1;
        if (v25)
        {
          if ((*(_BYTE *)(v25 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v25 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 32), &unk_2516F6C30, 16);
          v26 = sub_245CF1EEC((unint64_t *)v25, 0x10uLL, (uint64_t)sub_245CF9B40);
          *v26 = 0;
          v26[1] = v25;
        }
        else
        {
          v26 = (_QWORD *)operator new();
          *v26 = 0;
          v26[1] = 0;
        }
        *v9 = (uint64_t)v26;
      }
      v37 = *a3;
      v38 = **a3;
      if (v38)
        goto LABEL_95;
      break;
    case 3:
    case 0x10:
    case 0x12:
      if (v8)
      {
        v17 = *a1;
        if (v17)
        {
          if ((*(_BYTE *)(v17 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v17 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 32), &unk_2516F6C60, 16);
          v18 = sub_245CF1EEC((unint64_t *)v17, 0x10uLL, (uint64_t)sub_245CF9AE0);
          *v18 = 0;
          v18[1] = v17;
        }
        else
        {
          v18 = (_QWORD *)operator new();
          *v18 = 0;
          v18[1] = 0;
        }
        *v9 = (uint64_t)v18;
      }
      v58 = *a3;
      v59 = **a3;
      if (v59)
        goto LABEL_91;
      break;
    case 4:
    case 6:
      if (v8)
      {
        v21 = *a1;
        if (v21)
        {
          if ((*(_BYTE *)(v21 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v21 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v21 + 32) + 32), &unk_2516F6C70, 16);
          v22 = sub_245CF1EEC((unint64_t *)v21, 0x10uLL, (uint64_t)sub_245CF9B20);
          *v22 = 0;
          v22[1] = v21;
        }
        else
        {
          v22 = (_QWORD *)operator new();
          *v22 = 0;
          v22[1] = 0;
        }
        *v9 = (uint64_t)v22;
      }
      v58 = *a3;
      v59 = **a3;
      if (v59)
      {
LABEL_91:
        v60 = *v9;
        v61 = *(int *)*v9;
        sub_245D033BC((unsigned int *)v60, v61 + v59);
        v62 = *(_QWORD *)(v60 + 8);
        *(_DWORD *)v60 += *v58;
        v63 = (void *)(v62 + 8 * v61);
        v64 = (const void *)*((_QWORD *)v58 + 1);
        v65 = 8 * *v58;
        goto LABEL_100;
      }
      break;
    case 5:
    case 0xE:
    case 0xF:
    case 0x11:
      if (v8)
      {
        v10 = *a1;
        if (v10)
        {
          if ((*(_BYTE *)(v10 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v10 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 32), &unk_2516F6C40, 16);
          v11 = sub_245CF1EEC((unint64_t *)v10, 0x10uLL, (uint64_t)sub_245CF9AC0);
          *v11 = 0;
          v11[1] = v10;
        }
        else
        {
          v11 = (_QWORD *)operator new();
          *v11 = 0;
          v11[1] = 0;
        }
        *v9 = (uint64_t)v11;
      }
      v37 = *a3;
      v38 = **a3;
      if (v38)
        goto LABEL_95;
      break;
    case 7:
    case 0xD:
      if (v8)
      {
        v19 = *a1;
        if (v19)
        {
          if ((*(_BYTE *)(v19 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v19 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 32), &unk_2516F6C50, 16);
          v20 = sub_245CF1EEC((unint64_t *)v19, 0x10uLL, (uint64_t)sub_245CF9B00);
          *v20 = 0;
          v20[1] = v19;
        }
        else
        {
          v20 = (_QWORD *)operator new();
          *v20 = 0;
          v20[1] = 0;
        }
        *v9 = (uint64_t)v20;
      }
      v37 = *a3;
      v38 = **a3;
      if (v38)
      {
LABEL_95:
        v66 = *v9;
        v67 = *(int *)*v9;
        sub_245D0327C((unsigned int *)v66, v67 + v38);
        v68 = *(_QWORD *)(v66 + 8);
        *(_DWORD *)v66 += *v37;
        v63 = (void *)(v68 + 4 * v67);
        v64 = (const void *)*((_QWORD *)v37 + 1);
        v65 = 4 * *v37;
        goto LABEL_100;
      }
      break;
    case 8:
      if (v8)
      {
        v27 = *a1;
        if (v27)
        {
          if ((*(_BYTE *)(v27 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v27 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v27 + 32) + 32), &unk_2516F6C10, 16);
          v28 = sub_245CF1EEC((unint64_t *)v27, 0x10uLL, (uint64_t)sub_245CF9B80);
          *v28 = 0;
          v28[1] = v27;
        }
        else
        {
          v28 = (_QWORD *)operator new();
          *v28 = 0;
          v28[1] = 0;
        }
        *v9 = (uint64_t)v28;
      }
      v69 = *a3;
      v70 = **a3;
      if (v70)
      {
        v71 = *v9;
        v72 = *(int *)*v9;
        sub_245D03150((unsigned int *)v71, v72 + v70);
        v73 = *(_QWORD *)(v71 + 8);
        *(_DWORD *)v71 += *v69;
        v63 = (void *)(v73 + v72);
        v64 = (const void *)*((_QWORD *)v69 + 1);
        v65 = *v69;
LABEL_100:
        memcpy(v63, v64, v65);
      }
      break;
    case 9:
    case 0xC:
      if (v8)
      {
        v29 = *a1;
        if (v29)
        {
          if ((*(_BYTE *)(v29 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v29 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v29 + 32) + 32), &unk_2516F6CC0, 24);
          v30 = sub_245CF1EEC((unint64_t *)v29, 0x18uLL, (uint64_t)sub_245CF9BA0);
          v30[2] = 0;
          *v30 = v29;
        }
        else
        {
          v30 = (_QWORD *)operator new();
          v30[2] = 0;
          *v30 = 0;
        }
        v30[1] = 0;
        *v9 = (uint64_t)v30;
      }
      v81 = *a3;
      v82 = (*a3)[2];
      if (v82)
      {
        v83 = *v9;
        v84 = (const std::string **)(*((_QWORD *)v81 + 2) + 8);
        v85 = (std::string **)sub_245D034FC((uint64_t *)v83, v82);
        sub_245CFAB40((std::string *)v83, v85, v84, v82, **(_DWORD **)(v83 + 16) - *(_DWORD *)(v83 + 8));
        v86 = *(_DWORD *)(v83 + 8) + v82;
        *(_DWORD *)(v83 + 8) = v86;
        v87 = *(int **)(v83 + 16);
        if (*v87 < v86)
          *v87 = v86;
      }
      break;
    case 0xA:
    case 0xB:
      if (v8)
      {
        v31 = *a1;
        if (*a1)
        {
          if ((*(_BYTE *)(v31 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v31 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v31 + 32) + 32), &unk_2516F6C98, 24);
          v32 = sub_245CF1EEC((unint64_t *)v31, 0x18uLL, (uint64_t)sub_245CF9BA4);
          v32[2] = 0;
          *v32 = v31;
        }
        else
        {
          v32 = (_QWORD *)operator new();
          v32[2] = 0;
          *v32 = 0;
        }
        v32[1] = 0;
        *v9 = (uint64_t)v32;
      }
      v74 = *a3;
      if ((*a3)[2] >= 1)
      {
        v75 = 0;
        do
        {
          v76 = *(_QWORD *)(*((_QWORD *)v74 + 2) + 8 * v75 + 8);
          v77 = *v9;
          v78 = *(_DWORD **)(*v9 + 16);
          if (!v78
            || (v79 = *(int *)(v77 + 8), (int)v79 >= *v78)
            || (*(_DWORD *)(v77 + 8) = v79 + 1, (v80 = *(_QWORD *)&v78[2 * v79 + 2]) == 0))
          {
            v80 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 32))(v76, *a1);
            sub_245CF9C74(*v9, v80);
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 64))(v80, v76);
          ++v75;
        }
        while (v75 < v74[2]);
      }
      break;
    default:
      return;
  }
}

void sub_245CFAB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_245CFAB40(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  std::string::__raw *v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  std::string::size_type v17;
  std::string **v18;
  const std::string **v19;
  const std::string *v20;
  std::string *v21;
  std::string *v22;

  v9 = (std::string::__raw *)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = v9->__words[0];
    v18 = &a2[a5];
    v19 = &a3[a5];
    do
    {
      v20 = *v19;
      if (v17)
      {
        if ((*(_BYTE *)(v17 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v17 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 32), &unk_2516F6D58, 24);
        v21 = (std::string *)sub_245CF1EEC((unint64_t *)v17, 0x18uLL, (uint64_t)sub_245CF25DC);
      }
      else
      {
        v21 = (std::string *)operator new();
      }
      v22 = v21;
      v21->__r_.__value_.__r.__words[0] = 0;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      result = std::string::operator=(v21, v20);
      *v18++ = v22;
      ++v19;
      --v16;
    }
    while (v16);
  }
  return result;
}

__n128 sub_245CFAC58(uint64_t *a1, uint64_t a2, char a3, __n128 *a4, uint64_t *a5)
{
  uint64_t *v6;
  __n128 *v7;
  __n128 result;

  v6 = sub_245CF9BA8(a1, a2, a3, a5);
  v7 = (__n128 *)v6;
  if (*((char *)v6 + 23) < 0)
    operator delete((void *)*v6);
  result = *a4;
  v7[1].n128_u64[0] = a4[1].n128_u64[0];
  *v7 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

uint64_t sub_245CFACA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  BOOL v10;

  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    if (*(_WORD *)(a1 + 10))
    {
      v2 = *(_QWORD *)(a1 + 16);
      do
      {
        result = sub_245CFAD60((unsigned __int8 *)(v2 + 8));
        if ((result & 1) == 0)
          break;
        v2 += 32;
      }
      while (v2 != *(_QWORD *)(a1 + 16) + 32 * *(unsigned __int16 *)(a1 + 10));
      return result;
    }
    return 1;
  }
  v4 = *(_QWORD **)(a1 + 16);
  v7 = (unsigned __int8 *)*v4;
  v5 = (unsigned __int8 *)(v4 + 1);
  v6 = v7;
  if (v7 == v5)
    return 1;
  do
  {
    result = sub_245CFAD60(v6 + 40);
    if (!(_DWORD)result)
      break;
    v8 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = *(unsigned __int8 **)v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v10 = *(_QWORD *)v9 == (_QWORD)v6;
        v6 = v9;
      }
      while (!v10);
    }
    v6 = v9;
  }
  while (v9 != v5);
  return result;
}

uint64_t sub_245CFAD60(unsigned __int8 *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (dword_245D228B0[a1[8]] != 10)
    return 1;
  if (a1[9])
  {
    v2 = *(uint64_t **)a1;
    if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
    {
      v3 = 0;
      while (1)
      {
        v4 = *(_QWORD *)(v2[2] + 8 * v3 + 8);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4) & 1) == 0)
          break;
        ++v3;
        v2 = *(uint64_t **)a1;
        if (v3 >= *(int *)(*(_QWORD *)a1 + 8))
          return 1;
      }
      return 0;
    }
    return 1;
  }
  if ((a1[10] & 1) != 0)
    return 1;
  v5 = **(_QWORD **)a1;
  if ((a1[10] & 0x10) != 0)
    return ((*(uint64_t (**)(void))(v5 + 72))() & 1) != 0;
  result = (*(uint64_t (**)(void))(v5 + 48))();
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_245CFAE20(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, uint64_t *a5, int32x2_t *a6)
{
  std::string *v9;
  std::string *v11;

  if ((*a5 & 1) != 0)
    v9 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v9 = (std::string *)sub_245CFAE88(a5);
  v11 = v9;
  return sub_245D02B38(a2, &v11, a3, a6);
}

uint64_t sub_245CFAE88(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) != 0)
  {
    v2 = *(_QWORD *)v2;
    if (v2)
      goto LABEL_3;
LABEL_7:
    v3 = operator new();
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
    (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 32), &unk_2516F6D08, 32);
  v3 = (uint64_t)sub_245CF1EEC((unint64_t *)v2, 0x20uLL, (uint64_t)sub_245CFB074);
LABEL_8:
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(_QWORD *)v3 = v2;
  return v3 + 8;
}

const std::string::value_type *sub_245CFAF2C(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  const std::string::value_type *v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *result;
  uint64_t v10;
  std::string::size_type size;
  int v12;
  int v13;

  v5 = __s;
  v6 = a3;
  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 >= a3)
  {
    MEMORY[0x249546864](this, __s, a3);
    return &v5[v6];
  }
  else
  {
    v7 = a3;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (v10 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
    {
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        size = this->__r_.__value_.__l.__size_;
      else
        size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (a3 >= 50000000)
        v12 = 50000000;
      else
        v12 = a3;
      std::string::reserve(this, size + v12);
      v10 = *(_QWORD *)(a1 + 8);
    }
    v13 = v10 - (_DWORD)v5 + 16;
    while (*(_QWORD *)(a1 + 16))
    {
      std::string::append(this, v5, v13);
      if (*(int *)(a1 + 28) < 17)
        break;
      result = (const std::string::value_type *)sub_245D02468(a1);
      if (!result)
        return result;
      v7 -= v13;
      v5 = result + 16;
      v13 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
      if (v7 <= v13)
      {
        std::string::append(this, v5, v7);
        return &v5[v7];
      }
    }
    return 0;
  }
}

void sub_245CFB074(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t sub_245CFB088(uint64_t a1, char **a2, int a3)
{
  int v5;
  char v6;

  if ((unint64_t)*a2 < *(_QWORD *)a1)
    return 0;
  v5 = *a2 - *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 28) == v5)
  {
    if (v5 >= 1 && !*(_QWORD *)(a1 + 16))
      *a2 = 0;
    return 1;
  }
  else
  {
    *a2 = sub_245D025E4(a1, v5, a3);
    return v6 & 1;
  }
}

char *sub_245CFB0F8(uint64_t a1, char *a2, _DWORD *a3)
{
  _DWORD *v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  int *v9;
  _DWORD *v10;
  int v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  signed int v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;

  v5 = *(_DWORD **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    v15 = *((_QWORD *)v5 + 1);
    v14 = v5 + 2;
    v13 = v15;
    if (v15)
    {
      v16 = v14;
      do
      {
        v17 = *(_DWORD *)(v13 + 32);
        v18 = v17 < 200;
        if (v17 >= 200)
          v19 = (uint64_t *)v13;
        else
          v19 = (uint64_t *)(v13 + 8);
        if (!v18)
          v16 = (_QWORD *)v13;
        v13 = *v19;
      }
      while (*v19);
      if (v16 != v14)
      {
        do
        {
          v20 = *((_DWORD *)v16 + 8);
          if (v20 > 0x1FFFFFFF)
            break;
          a2 = sub_245CFB228((_BYTE *)v16 + 40, v20, a2, a3);
          v21 = (_QWORD *)v16[1];
          if (v21)
          {
            do
            {
              v22 = v21;
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              v22 = (_QWORD *)v16[2];
              v23 = *v22 == (_QWORD)v16;
              v16 = v22;
            }
            while (!v23);
          }
          v16 = v22;
        }
        while (v22 != v14);
      }
    }
  }
  else
  {
    v6 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      v7 = &v5[8 * v6];
      do
      {
        v8 = v6 >> 1;
        v9 = &v5[8 * (v6 >> 1)];
        v11 = *v9;
        v10 = v9 + 8;
        v6 += ~(v6 >> 1);
        if (v11 < 200)
          v5 = v10;
        else
          v6 = v8;
      }
      while (v6);
      for (; v5 != v7; v5 += 8)
      {
        if ((int)*v5 > 0x1FFFFFFF)
          break;
        a2 = sub_245CFB228((_BYTE *)v5 + 8, *v5, a2, a3);
      }
    }
  }
  return a2;
}

char *sub_245CFB228(_BYTE *a1, unsigned int a2, char *a3, _DWORD *a4)
{
  char *v5;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  int v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE *v53;
  _BYTE *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE *v64;
  _BYTE *v65;
  unsigned int v66;
  unsigned int v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  _BYTE *v118;
  char v119;
  int v120;
  _BYTE *v121;
  unsigned int v122;
  _BYTE *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  char v129;
  int v130;
  unint64_t v131;
  _BYTE *v132;
  unsigned int v133;
  _BYTE *v134;
  unsigned int v135;
  unsigned int v136;
  unint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  char v145;
  int v146;
  unint64_t v147;
  _BYTE *v148;
  unsigned int v149;
  _BYTE *v150;
  unsigned int v151;
  unsigned int v152;
  unint64_t v153;
  _BYTE *v154;
  _BYTE *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  char v161;
  int v162;
  unint64_t v163;
  _BYTE *v164;
  unsigned int v165;
  _BYTE *v166;
  unsigned int v167;
  unsigned int v168;
  unint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  char v177;
  int v178;
  unsigned int v179;
  _BYTE *v180;
  uint64_t v181;
  _BYTE *v182;
  unsigned int v183;
  _BYTE *v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  int v190;
  unsigned int v191;
  _BYTE *v192;
  char v193;
  int v194;
  _BYTE *v195;
  unsigned int v196;
  _BYTE *v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  char v203;
  int v204;
  unsigned int v205;
  _BYTE *v206;
  char v207;
  _BYTE *v208;
  unsigned int v209;
  _BYTE *v210;
  unsigned int v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  int64_t v221;
  _BYTE *v222;
  unsigned int v223;
  _BYTE *v224;
  unsigned int v225;
  unsigned int v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  char v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  char v235;
  uint64_t v236;
  _BYTE *v237;
  unsigned int v238;
  _BYTE *v239;
  unsigned int v240;
  unsigned int v241;
  _BYTE *v242;
  unsigned int v243;
  char *v244;
  unsigned int v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  int v250;
  unsigned int v251;
  char v252;
  uint64_t v253;
  _BYTE *v254;
  unsigned int v255;
  _BYTE *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _BYTE *v260;
  unsigned int v261;
  _BYTE *v262;
  _BYTE *v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  int64_t v274;
  _BYTE *v275;
  unsigned int v276;
  _BYTE *v277;
  unsigned int v278;
  unsigned int v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  char v284;
  int v285;
  unsigned int v286;
  _BYTE *v287;
  unsigned int v288;
  _BYTE *v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  _BYTE *v293;
  _BYTE *v294;
  unsigned int v295;
  unsigned int v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  char v300;
  int v301;
  unint64_t v302;
  _BYTE *v303;
  unsigned int v304;
  _BYTE *v305;
  unsigned int v306;
  unsigned int v307;
  unint64_t v308;
  _BYTE *v309;
  _BYTE *v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  _BYTE *v318;
  char v319;
  int v320;
  _BYTE *v321;
  unsigned int v322;
  _BYTE *v323;
  unsigned int v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  char v329;
  int v330;
  unsigned int v331;
  _BYTE *v332;
  uint64_t v333;
  _BYTE *v334;
  unsigned int v335;
  _BYTE *v336;
  unsigned int v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  char v342;
  int v343;
  int v344;
  _BYTE *v345;
  unsigned int v346;
  _BYTE *v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  _BYTE *v352;
  _BYTE *v353;
  unsigned int v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  char v359;
  int v360;
  uint64_t v361;
  _BYTE *v362;
  unsigned int v363;
  _BYTE *v364;
  unsigned int v365;
  unsigned int v366;
  unint64_t v367;
  unint64_t v368;
  _BYTE *v369;
  _BYTE *v370;
  unint64_t v371;
  unint64_t v372;
  int v373;
  unsigned int v374;
  unsigned int v375;
  _BYTE *v376;
  _BYTE *v377;
  unsigned int v378;
  unsigned int v379;
  unint64_t v380;
  unsigned int v381;
  _BYTE *v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  _QWORD *v389;
  int64_t v390;
  uint64_t v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  _BYTE *v395;
  uint64_t v396;
  unsigned int v397;
  _BYTE *v398;
  unsigned int v399;
  unsigned int v400;
  _DWORD *v401;
  _QWORD *v402;
  int v403;
  unsigned int v404;
  uint64_t v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unsigned int v421;
  unsigned int v422;
  _BYTE *v423;
  _BYTE *v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  _BYTE *v432;
  unsigned int v433;
  _BYTE *v434;
  _BYTE *v435;
  unsigned int v436;
  unsigned int v437;
  unint64_t v438;
  _BYTE *v439;
  _BYTE *v440;
  unint64_t v441;
  unint64_t v442;
  _BYTE *v443;
  _BYTE *v444;
  unsigned int v445;
  unsigned int v446;
  unint64_t v447;
  _BYTE *v448;
  _BYTE *v449;
  unsigned int v450;
  unsigned int v451;
  unint64_t v452;
  _BYTE *v453;
  _BYTE *v454;
  unsigned int v455;
  unsigned int v456;
  _BYTE *v457;
  unsigned int v458;
  _BYTE *v459;
  unsigned int v460;
  unsigned int v461;
  _BYTE *v462;
  _BYTE *v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int v466;
  _BYTE *v467;
  _BYTE *v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int v471;
  unsigned int v472;
  _BYTE *v473;
  _BYTE *v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  _BYTE *v479;
  _BYTE *v480;
  unsigned int v481;
  unsigned int v482;
  unint64_t v483;
  unint64_t v484;
  _BYTE *v485;
  _BYTE *v486;
  unsigned int v487;
  unsigned int v488;
  _BYTE *v489;
  _BYTE *v490;
  unsigned int v491;
  unsigned int v492;
  unint64_t v493;
  _BYTE *v494;
  _BYTE *v495;
  unsigned int v496;
  unsigned int v497;
  _BYTE *v498;
  _BYTE *v499;
  unint64_t v500;
  unint64_t v501;
  unsigned int v502;
  char *v503;
  _BYTE *v504;
  _BYTE *v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  _BYTE *v509;
  unsigned int v510;
  _BYTE *v511;
  _BYTE *v512;
  unsigned int v513;
  unsigned int v514;
  unsigned int v515;
  unsigned int v516;
  char v517;
  char v518;
  int v519;
  const char *v520;
  int v521;
  std::string __p;

  v5 = a3;
  if (a1[9])
  {
    if (a1[11])
    {
      if (*((_DWORD *)a1 + 3))
      {
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v8 = (8 * a2) | 2;
        if (v8 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          v30 = (8 * a2) >> 7;
          if (v8 >> 14)
          {
            v31 = v5 + 1;
            do
            {
              v32 = v31;
              *v31++ = v30 | 0x80;
              v33 = v30 >> 7;
              v34 = v30 >> 14;
              v30 >>= 7;
            }
            while (v34);
            v9 = v32 + 2;
            *v31 = v33;
          }
          else
          {
            v5[1] = v30;
            v9 = v5 + 2;
          }
        }
        else
        {
          *v5 = v8;
          v9 = v5 + 1;
        }
        v35 = *((int *)a1 + 3);
        if (v35 > 0x7F)
        {
          *v9 = v35 | 0x80;
          v36 = v35 >> 7;
          if (v35 >> 14)
          {
            v37 = v9 + 1;
            do
            {
              v38 = v37;
              *v37++ = v36 | 0x80;
              v39 = v36 >> 7;
              v40 = v36 >> 14;
              v36 >>= 7;
            }
            while (v40);
            v5 = v38 + 2;
            *v37 = v39;
          }
          else
          {
            v9[1] = v36;
            v5 = v9 + 2;
          }
        }
        else
        {
          *v9 = v35;
          v5 = v9 + 1;
        }
        switch(a1[8])
        {
          case 1:
            v68 = *(int **)a1;
            if (**(int **)a1 >= 1)
            {
              v69 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v68 = *(int **)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)(*((_QWORD *)v68 + 1) + 8 * v69);
                v5 += 8;
                ++v69;
                v68 = *(int **)a1;
              }
              while (v69 < **(int **)a1);
            }
            break;
          case 2:
            v70 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v71 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v70 = *(_QWORD *)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)(*(_QWORD *)(v70 + 8) + 4 * v71);
                v5 += 4;
                ++v71;
                v70 = *(_QWORD *)a1;
              }
              while (v71 < **(int **)a1);
            }
            break;
          case 3:
            v72 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v73 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v72 = *(_QWORD *)a1;
                }
                v74 = *(_QWORD *)(*(_QWORD *)(v72 + 8) + 8 * v73);
                if (v74 > 0x7F)
                {
                  *v5 = v74 | 0x80;
                  v75 = v74 >> 7;
                  if (v74 >> 14)
                  {
                    v76 = v5 + 1;
                    do
                    {
                      v77 = v76;
                      *v76++ = v75 | 0x80;
                      v78 = v75 >> 7;
                      v79 = v75 >> 14;
                      v75 >>= 7;
                    }
                    while (v79);
                    v5 = v77 + 2;
                    *v76 = v78;
                  }
                  else
                  {
                    v5[1] = v75;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v74;
                }
                ++v73;
                v72 = *(_QWORD *)a1;
              }
              while (v73 < **(int **)a1);
            }
            break;
          case 4:
            v80 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v81 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v80 = *(_QWORD *)a1;
                }
                v82 = *(_QWORD *)(*(_QWORD *)(v80 + 8) + 8 * v81);
                if (v82 > 0x7F)
                {
                  *v5 = v82 | 0x80;
                  v83 = v82 >> 7;
                  if (v82 >> 14)
                  {
                    v84 = v5 + 1;
                    do
                    {
                      v85 = v84;
                      *v84++ = v83 | 0x80;
                      v86 = v83 >> 7;
                      v87 = v83 >> 14;
                      v83 >>= 7;
                    }
                    while (v87);
                    v5 = v85 + 2;
                    *v84 = v86;
                  }
                  else
                  {
                    v5[1] = v83;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v82;
                }
                ++v81;
                v80 = *(_QWORD *)a1;
              }
              while (v81 < **(int **)a1);
            }
            break;
          case 5:
            v41 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v42 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v41 = *(_QWORD *)a1;
                }
                v43 = *(int *)(*(_QWORD *)(v41 + 8) + 4 * v42);
                if (v43 > 0x7F)
                {
                  *v5 = v43 | 0x80;
                  v44 = v43 >> 7;
                  if (v43 >> 14)
                  {
                    v45 = v5 + 1;
                    do
                    {
                      v46 = v45;
                      *v45++ = v44 | 0x80;
                      v47 = v44 >> 7;
                      v48 = v44 >> 14;
                      v44 >>= 7;
                    }
                    while (v48);
                    v5 = v46 + 2;
                    *v45 = v47;
                  }
                  else
                  {
                    v5[1] = v44;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v43;
                }
                ++v42;
                v41 = *(_QWORD *)a1;
              }
              while (v42 < **(int **)a1);
            }
            break;
          case 6:
            v88 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v89 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v88 = *(_QWORD *)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)(*(_QWORD *)(v88 + 8) + 8 * v89);
                v5 += 8;
                ++v89;
                v88 = *(_QWORD *)a1;
              }
              while (v89 < **(int **)a1);
            }
            break;
          case 7:
            v90 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v91 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v90 = *(_QWORD *)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)(*(_QWORD *)(v90 + 8) + 4 * v91);
                v5 += 4;
                ++v91;
                v90 = *(_QWORD *)a1;
              }
              while (v91 < **(int **)a1);
            }
            break;
          case 8:
            v92 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v93 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v92 = *(_QWORD *)a1;
                }
                *v5++ = *(_BYTE *)(*(_QWORD *)(v92 + 8) + v93++);
                v92 = *(_QWORD *)a1;
              }
              while (v93 < **(int **)a1);
            }
            break;
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            v519 = 3;
            v520 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiec"
                   "e/third_party/protobuf-lite/extension_set.cc";
            v521 = 1966;
            memset(&__p, 0, sizeof(__p));
            std::string::append(&__p, "Non-primitive types can't be packed.");
            sub_245CF8BAC((uint64_t)&v519);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            break;
          case 0xD:
            v49 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v50 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v49 = *(_QWORD *)a1;
                }
                v51 = *(_DWORD *)(*(_QWORD *)(v49 + 8) + 4 * v50);
                if (v51 > 0x7F)
                {
                  *v5 = v51 | 0x80;
                  v52 = v51 >> 7;
                  if (v51 >> 14)
                  {
                    v53 = v5 + 1;
                    do
                    {
                      v54 = v53;
                      *v53++ = v52 | 0x80;
                      v55 = v52 >> 7;
                      v56 = v52 >> 14;
                      v52 >>= 7;
                    }
                    while (v56);
                    v5 = v54 + 2;
                    *v53 = v55;
                  }
                  else
                  {
                    v5[1] = v52;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v51;
                }
                ++v50;
                v49 = *(_QWORD *)a1;
              }
              while (v50 < **(int **)a1);
            }
            break;
          case 0xE:
            v94 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v95 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v94 = *(_QWORD *)a1;
                }
                v96 = *(int *)(*(_QWORD *)(v94 + 8) + 4 * v95);
                if (v96 > 0x7F)
                {
                  *v5 = v96 | 0x80;
                  v97 = v96 >> 7;
                  if (v96 >> 14)
                  {
                    v98 = v5 + 1;
                    do
                    {
                      v99 = v98;
                      *v98++ = v97 | 0x80;
                      v100 = v97 >> 7;
                      v101 = v97 >> 14;
                      v97 >>= 7;
                    }
                    while (v101);
                    v5 = v99 + 2;
                    *v98 = v100;
                  }
                  else
                  {
                    v5[1] = v97;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v96;
                }
                ++v95;
                v94 = *(_QWORD *)a1;
              }
              while (v95 < **(int **)a1);
            }
            break;
          case 0xF:
            v57 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v58 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v57 = *(_QWORD *)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)(*(_QWORD *)(v57 + 8) + 4 * v58);
                v5 += 4;
                ++v58;
                v57 = *(_QWORD *)a1;
              }
              while (v58 < **(int **)a1);
            }
            break;
          case 0x10:
            v102 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v103 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v102 = *(_QWORD *)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)(*(_QWORD *)(v102 + 8) + 8 * v103);
                v5 += 8;
                ++v103;
                v102 = *(_QWORD *)a1;
              }
              while (v103 < **(int **)a1);
            }
            break;
          case 0x11:
            v59 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v60 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v59 = *(_QWORD *)a1;
                }
                v61 = *(_DWORD *)(*(_QWORD *)(v59 + 8) + 4 * v60);
                v62 = (2 * v61) ^ (v61 >> 31);
                if (v62 > 0x7F)
                {
                  *v5 = v62 | 0x80;
                  v63 = v62 >> 7;
                  if (v62 >> 14)
                  {
                    v64 = v5 + 1;
                    do
                    {
                      v65 = v64;
                      *v64++ = v63 | 0x80;
                      v66 = v63 >> 7;
                      v67 = v63 >> 14;
                      v63 >>= 7;
                    }
                    while (v67);
                    v5 = v65 + 2;
                    *v64 = v66;
                  }
                  else
                  {
                    v5[1] = v63;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v62;
                }
                ++v60;
                v59 = *(_QWORD *)a1;
              }
              while (v60 < **(int **)a1);
            }
            break;
          case 0x12:
            v104 = *(_QWORD *)a1;
            if (**(int **)a1 >= 1)
            {
              v105 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
                  v104 = *(_QWORD *)a1;
                }
                v106 = *(_QWORD *)(*(_QWORD *)(v104 + 8) + 8 * v105);
                v107 = (2 * v106) ^ (v106 >> 63);
                if (v107 > 0x7F)
                {
                  *v5 = v107 | 0x80;
                  v108 = v107 >> 7;
                  if (v107 >> 14)
                  {
                    v109 = v5 + 1;
                    do
                    {
                      v110 = v109;
                      *v109++ = v108 | 0x80;
                      v111 = v108 >> 7;
                      v112 = v108 >> 14;
                      v108 >>= 7;
                    }
                    while (v112);
                    v5 = v110 + 2;
                    *v109 = v111;
                  }
                  else
                  {
                    v5[1] = v108;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v107;
                }
                ++v105;
                v104 = *(_QWORD *)a1;
              }
              while (v105 < **(int **)a1);
            }
            break;
          default:
            return v5;
        }
      }
      return v5;
    }
    switch(a1[8])
    {
      case 1:
        v17 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v18 = 0;
          v19 = (8 * a2) | 1;
          v20 = (8 * a2) | 0x81;
          v21 = (a2 >> 4) & 0x1FFFFFF;
          v22 = (8 * a2) >> 7;
          v23 = a3;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v23)
            {
              v23 = sub_245CF8520((uint64_t)a4, (int)v23);
              v17 = *(_QWORD *)a1;
            }
            v24 = *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v18);
            v25 = v23 + 1;
            if (v19 > 0x7F)
            {
              *v23 = v20;
              v26 = v21;
              if (v19 >= 0x4000)
              {
                do
                {
                  v27 = v25;
                  *v25++ = v26 | 0x80;
                  v28 = v26 >> 7;
                  v29 = v26 >> 14;
                  v26 >>= 7;
                }
                while (v29);
                *v25 = v28;
                v25 = v27 + 2;
              }
              else
              {
                v23[1] = v22;
                v25 = v23 + 2;
              }
            }
            else
            {
              *v23 = v19;
            }
            *(_QWORD *)v25 = v24;
            v5 = v25 + 8;
            ++v18;
            v17 = *(_QWORD *)a1;
            v23 = v5;
          }
          while (v18 < **(int **)a1);
        }
        return v5;
      case 2:
        v113 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v114 = 0;
          v115 = (8 * a2) | 5;
          v116 = (a2 >> 4) & 0x1FFFFFF;
          v117 = (8 * a2) >> 7;
          v118 = a3;
          v119 = (8 * a2) | 0x85;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v118)
            {
              v118 = sub_245CF8520((uint64_t)a4, (int)v118);
              v113 = *(_QWORD *)a1;
            }
            v120 = *(_DWORD *)(*(_QWORD *)(v113 + 8) + 4 * v114);
            v121 = v118 + 1;
            if (v115 > 0x7F)
            {
              *v118 = v119;
              v122 = v116;
              if (v115 >= 0x4000)
              {
                do
                {
                  v123 = v121;
                  *v121++ = v122 | 0x80;
                  v124 = v122 >> 7;
                  v125 = v122 >> 14;
                  v122 >>= 7;
                }
                while (v125);
                *v121 = v124;
                v121 = v123 + 2;
              }
              else
              {
                v118[1] = v117;
                v121 = v118 + 2;
              }
            }
            else
            {
              *v118 = v115;
            }
            *(_DWORD *)v121 = v120;
            v5 = v121 + 4;
            ++v114;
            v113 = *(_QWORD *)a1;
            v118 = v5;
          }
          while (v114 < **(int **)a1);
        }
        return v5;
      case 3:
        v126 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v127 = 0;
          v128 = 8 * a2;
          v129 = (8 * a2) | 0x80;
          v130 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
              v126 = *(_QWORD *)a1;
            }
            v131 = *(_QWORD *)(*(_QWORD *)(v126 + 8) + 8 * v127);
            v132 = v5 + 1;
            if (v128 > 0x7F)
            {
              *v5 = v129;
              v133 = v130;
              if (v128 >= 0x4000)
              {
                do
                {
                  v134 = v132;
                  *v132++ = v133 | 0x80;
                  v135 = v133 >> 7;
                  v136 = v133 >> 14;
                  v133 >>= 7;
                }
                while (v136);
                *v132 = v135;
                v132 = v134 + 2;
              }
              else
              {
                v5[1] = v128 >> 7;
                v132 = v5 + 2;
              }
            }
            else
            {
              *v5 = v128;
            }
            if (v131 > 0x7F)
            {
              *v132 = v131 | 0x80;
              v137 = v131 >> 7;
              if (v131 >> 14)
              {
                v138 = v132 + 1;
                do
                {
                  v139 = v138;
                  *v138++ = v137 | 0x80;
                  v140 = v137 >> 7;
                  v141 = v137 >> 14;
                  v137 >>= 7;
                }
                while (v141);
                v5 = v139 + 2;
                *v138 = v140;
              }
              else
              {
                v132[1] = v137;
                v5 = v132 + 2;
              }
            }
            else
            {
              *v132 = v131;
              v5 = v132 + 1;
            }
            ++v127;
            v126 = *(_QWORD *)a1;
          }
          while (v127 < **(int **)a1);
        }
        return v5;
      case 4:
        v142 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v143 = 0;
          v144 = 8 * a2;
          v145 = (8 * a2) | 0x80;
          v146 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
              v142 = *(_QWORD *)a1;
            }
            v147 = *(_QWORD *)(*(_QWORD *)(v142 + 8) + 8 * v143);
            v148 = v5 + 1;
            if (v144 > 0x7F)
            {
              *v5 = v145;
              v149 = v146;
              if (v144 >= 0x4000)
              {
                do
                {
                  v150 = v148;
                  *v148++ = v149 | 0x80;
                  v151 = v149 >> 7;
                  v152 = v149 >> 14;
                  v149 >>= 7;
                }
                while (v152);
                *v148 = v151;
                v148 = v150 + 2;
              }
              else
              {
                v5[1] = v144 >> 7;
                v148 = v5 + 2;
              }
            }
            else
            {
              *v5 = v144;
            }
            if (v147 > 0x7F)
            {
              *v148 = v147 | 0x80;
              v153 = v147 >> 7;
              if (v147 >> 14)
              {
                v154 = v148 + 1;
                do
                {
                  v155 = v154;
                  *v154++ = v153 | 0x80;
                  v156 = v153 >> 7;
                  v157 = v153 >> 14;
                  v153 >>= 7;
                }
                while (v157);
                v5 = v155 + 2;
                *v154 = v156;
              }
              else
              {
                v148[1] = v153;
                v5 = v148 + 2;
              }
            }
            else
            {
              *v148 = v147;
              v5 = v148 + 1;
            }
            ++v143;
            v142 = *(_QWORD *)a1;
          }
          while (v143 < **(int **)a1);
        }
        return v5;
      case 5:
        v158 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v159 = 0;
          v160 = 8 * a2;
          v161 = (8 * a2) | 0x80;
          v162 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
              v158 = *(_QWORD *)a1;
            }
            v163 = *(int *)(*(_QWORD *)(v158 + 8) + 4 * v159);
            v164 = v5 + 1;
            if (v160 > 0x7F)
            {
              *v5 = v161;
              v165 = v162;
              if (v160 >= 0x4000)
              {
                do
                {
                  v166 = v164;
                  *v164++ = v165 | 0x80;
                  v167 = v165 >> 7;
                  v168 = v165 >> 14;
                  v165 >>= 7;
                }
                while (v168);
                *v164 = v167;
                v164 = v166 + 2;
              }
              else
              {
                v5[1] = v160 >> 7;
                v164 = v5 + 2;
              }
            }
            else
            {
              *v5 = v160;
            }
            if (v163 > 0x7F)
            {
              *v164 = v163 | 0x80;
              v169 = v163 >> 7;
              if (v163 >> 14)
              {
                v170 = v164 + 1;
                do
                {
                  v171 = v170;
                  *v170++ = v169 | 0x80;
                  v172 = v169 >> 7;
                  v173 = v169 >> 14;
                  v169 >>= 7;
                }
                while (v173);
                v5 = v171 + 2;
                *v170 = v172;
              }
              else
              {
                v164[1] = v169;
                v5 = v164 + 2;
              }
            }
            else
            {
              *v164 = v163;
              v5 = v164 + 1;
            }
            ++v159;
            v158 = *(_QWORD *)a1;
          }
          while (v159 < **(int **)a1);
        }
        return v5;
      case 6:
        v174 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v175 = 0;
          v176 = (8 * a2) | 1;
          v177 = (8 * a2) | 0x81;
          v178 = (a2 >> 4) & 0x1FFFFFF;
          v179 = (8 * a2) >> 7;
          v180 = a3;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v180)
            {
              v180 = sub_245CF8520((uint64_t)a4, (int)v180);
              v174 = *(_QWORD *)a1;
            }
            v181 = *(_QWORD *)(*(_QWORD *)(v174 + 8) + 8 * v175);
            v182 = v180 + 1;
            if (v176 > 0x7F)
            {
              *v180 = v177;
              v183 = v178;
              if (v176 >= 0x4000)
              {
                do
                {
                  v184 = v182;
                  *v182++ = v183 | 0x80;
                  v185 = v183 >> 7;
                  v186 = v183 >> 14;
                  v183 >>= 7;
                }
                while (v186);
                *v182 = v185;
                v182 = v184 + 2;
              }
              else
              {
                v180[1] = v179;
                v182 = v180 + 2;
              }
            }
            else
            {
              *v180 = v176;
            }
            *(_QWORD *)v182 = v181;
            v5 = v182 + 8;
            ++v175;
            v174 = *(_QWORD *)a1;
            v180 = v5;
          }
          while (v175 < **(int **)a1);
        }
        return v5;
      case 7:
        v187 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v188 = 0;
          v189 = (8 * a2) | 5;
          v190 = (a2 >> 4) & 0x1FFFFFF;
          v191 = (8 * a2) >> 7;
          v192 = a3;
          v193 = (8 * a2) | 0x85;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v192)
            {
              v192 = sub_245CF8520((uint64_t)a4, (int)v192);
              v187 = *(_QWORD *)a1;
            }
            v194 = *(_DWORD *)(*(_QWORD *)(v187 + 8) + 4 * v188);
            v195 = v192 + 1;
            if (v189 > 0x7F)
            {
              *v192 = v193;
              v196 = v190;
              if (v189 >= 0x4000)
              {
                do
                {
                  v197 = v195;
                  *v195++ = v196 | 0x80;
                  v198 = v196 >> 7;
                  v199 = v196 >> 14;
                  v196 >>= 7;
                }
                while (v199);
                *v195 = v198;
                v195 = v197 + 2;
              }
              else
              {
                v192[1] = v191;
                v195 = v192 + 2;
              }
            }
            else
            {
              *v192 = v189;
            }
            *(_DWORD *)v195 = v194;
            v5 = v195 + 4;
            ++v188;
            v187 = *(_QWORD *)a1;
            v192 = v5;
          }
          while (v188 < **(int **)a1);
        }
        return v5;
      case 8:
        v200 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v201 = 0;
          v202 = 8 * a2;
          v203 = (8 * a2) | 0x80;
          v204 = (a2 >> 4) & 0x1FFFFFF;
          v205 = (8 * a2) >> 7;
          v206 = a3;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v206)
            {
              v206 = sub_245CF8520((uint64_t)a4, (int)v206);
              v200 = *(_QWORD *)a1;
            }
            v207 = *(_BYTE *)(*(_QWORD *)(v200 + 8) + v201);
            v208 = v206 + 1;
            if (v202 > 0x7F)
            {
              *v206 = v203;
              v209 = v204;
              if (v202 >= 0x4000)
              {
                do
                {
                  v210 = v208;
                  *v208++ = v209 | 0x80;
                  v211 = v209 >> 7;
                  v212 = v209 >> 14;
                  v209 >>= 7;
                }
                while (v212);
                *v208 = v211;
                v208 = v210 + 2;
              }
              else
              {
                v206[1] = v205;
                v208 = v206 + 2;
              }
            }
            else
            {
              *v206 = v202;
            }
            *v208 = v207;
            v5 = v208 + 1;
            ++v201;
            v200 = *(_QWORD *)a1;
            v206 = v5;
          }
          while (v201 < **(int **)a1);
        }
        return v5;
      case 9:
        v213 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) < 1)
          return v5;
        v214 = 0;
        v215 = 8 * a2;
        v216 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v216 = 5;
        v217 = (8 * a2) | 2;
        v517 = (8 * a2) | 0x82;
        v218 = 1;
        if (v215 >= 0x80)
          v218 = 2;
        if (v215 < 0x200000)
          v216 = 3;
        if (v215 >= 0x4000)
          v219 = v216;
        else
          v219 = v218;
        v515 = v215 >> 7;
        while (1)
        {
          if (*(_QWORD *)a4 <= (unint64_t)v5)
          {
            v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
            v213 = *(_QWORD *)a1;
          }
          v220 = *(_QWORD **)(*(_QWORD *)(v213 + 16) + 8 * v214 + 8);
          if (*((char *)v220 + 23) < 0)
          {
            v221 = v220[1];
            if (v221 > 127)
              goto LABEL_311;
          }
          else
          {
            v221 = *((unsigned __int8 *)v220 + 23);
          }
          if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v219] + 16) >= v221)
          {
            v222 = v5 + 1;
            if (v217 > 0x7F)
            {
              *v5 = v517;
              v223 = (a2 >> 4) & 0x1FFFFFF;
              if (v217 >= 0x4000)
              {
                do
                {
                  v224 = v222;
                  *v222++ = v223 | 0x80;
                  v225 = v223 >> 7;
                  v226 = v223 >> 14;
                  v223 >>= 7;
                }
                while (v226);
                *v222 = v225;
                v222 = v224 + 2;
              }
              else
              {
                v5[1] = v515;
                v222 = v5 + 2;
              }
            }
            else
            {
              *v5 = v217;
            }
            *v222 = v221;
            v227 = v222 + 1;
            if (*((char *)v220 + 23) < 0)
              v220 = (_QWORD *)*v220;
            memcpy(v227, v220, v221);
            v5 = &v227[v221];
            goto LABEL_309;
          }
LABEL_311:
          v5 = (char *)sub_245CF897C(a4, a2, (uint64_t)v220, v5);
LABEL_309:
          ++v214;
          v213 = *(_QWORD *)a1;
          if (v214 >= *(int *)(*(_QWORD *)a1 + 8))
            return v5;
        }
      case 0xA:
        v228 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
        {
          v229 = 0;
          v230 = (8 * a2) | 3;
          v231 = (8 * a2) | 0x83;
          v232 = (a2 >> 4) & 0x1FFFFFF;
          v233 = (8 * a2) | 4;
          v234 = (8 * a2) >> 7;
          v235 = (8 * a2) | 0x84;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
              v228 = *(_QWORD *)a1;
            }
            v236 = *(_QWORD *)(*(_QWORD *)(v228 + 16) + 8 * v229 + 8);
            v237 = v5 + 1;
            if (v230 > 0x7F)
            {
              *v5 = v231;
              v238 = v232;
              if (v230 >= 0x4000)
              {
                do
                {
                  v239 = v237;
                  *v237++ = v238 | 0x80;
                  v240 = v238 >> 7;
                  v241 = v238 >> 14;
                  v238 >>= 7;
                }
                while (v241);
                *v237 = v240;
                v237 = v239 + 2;
              }
              else
              {
                v5[1] = v234;
                v237 = v5 + 2;
              }
            }
            else
            {
              *v5 = v230;
            }
            v242 = (_BYTE *)(*(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(*(_QWORD *)v236 + 96))(v236, v237, a4);
            if (*(_QWORD *)a4 <= (unint64_t)v242)
              v242 = sub_245CF8520((uint64_t)a4, (int)v242);
            v5 = v242 + 1;
            if (v233 > 0x7F)
            {
              *v242 = v235;
              v243 = v232;
              if (v233 >= 0x4000)
              {
                do
                {
                  v244 = v5;
                  *v5++ = v243 | 0x80;
                  v245 = v243 >> 7;
                  v246 = v243 >> 14;
                  v243 >>= 7;
                }
                while (v246);
                *v5 = v245;
                v5 = v244 + 2;
              }
              else
              {
                v242[1] = v234;
                v5 = v242 + 2;
              }
            }
            else
            {
              *v242 = v233;
            }
            ++v229;
            v228 = *(_QWORD *)a1;
          }
          while (v229 < *(int *)(*(_QWORD *)a1 + 8));
        }
        return v5;
      case 0xB:
        v247 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
        {
          v248 = 0;
          v249 = (8 * a2) | 2;
          v250 = (a2 >> 4) & 0x1FFFFFF;
          v251 = (8 * a2) >> 7;
          v252 = (8 * a2) | 0x82;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
              v247 = *(_QWORD *)a1;
            }
            v253 = *(_QWORD *)(*(_QWORD *)(v247 + 16) + 8 * v248 + 8);
            v254 = v5 + 1;
            if (v249 > 0x7F)
            {
              *v5 = v252;
              v255 = v250;
              if (v249 >= 0x4000)
              {
                do
                {
                  v256 = v254;
                  *v254++ = v255 | 0x80;
                  v257 = v255 >> 7;
                  v258 = v255 >> 14;
                  v255 >>= 7;
                }
                while (v258);
                *v254 = v257;
                v254 = v256 + 2;
              }
              else
              {
                v5[1] = v251;
                v254 = v5 + 2;
              }
            }
            else
            {
              *v5 = v249;
            }
            v259 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v253 + 80))(v253);
            if (v259 > 0x7F)
            {
              *v254 = v259 | 0x80;
              v261 = v259 >> 7;
              if (v259 >> 14)
              {
                v262 = v254 + 1;
                do
                {
                  v263 = v262;
                  *v262++ = v261 | 0x80;
                  v264 = v261 >> 7;
                  v265 = v261 >> 14;
                  v261 >>= 7;
                }
                while (v265);
                v260 = v263 + 2;
                *v262 = v264;
              }
              else
              {
                v254[1] = v261;
                v260 = v254 + 2;
              }
            }
            else
            {
              *v254 = v259;
              v260 = v254 + 1;
            }
            v5 = (char *)(*(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(*(_QWORD *)v253 + 96))(v253, v260, a4);
            ++v248;
            v247 = *(_QWORD *)a1;
          }
          while (v248 < *(int *)(*(_QWORD *)a1 + 8));
        }
        return v5;
      case 0xC:
        v266 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) < 1)
          return v5;
        v267 = 0;
        v268 = 8 * a2;
        v269 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v269 = 5;
        v270 = (8 * a2) | 2;
        v518 = (8 * a2) | 0x82;
        v271 = 1;
        if (v268 >= 0x80)
          v271 = 2;
        if (v268 < 0x200000)
          v269 = 3;
        if (v268 >= 0x4000)
          v272 = v269;
        else
          v272 = v271;
        v516 = v268 >> 7;
        break;
      case 0xD:
        v281 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v282 = 0;
          v283 = 8 * a2;
          v284 = (8 * a2) | 0x80;
          v285 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
              v281 = *(_QWORD *)a1;
            }
            v286 = *(_DWORD *)(*(_QWORD *)(v281 + 8) + 4 * v282);
            v287 = v5 + 1;
            if (v283 > 0x7F)
            {
              *v5 = v284;
              v288 = v285;
              if (v283 >= 0x4000)
              {
                do
                {
                  v289 = v287;
                  *v287++ = v288 | 0x80;
                  v290 = v288 >> 7;
                  v291 = v288 >> 14;
                  v288 >>= 7;
                }
                while (v291);
                *v287 = v290;
                v287 = v289 + 2;
              }
              else
              {
                v5[1] = v283 >> 7;
                v287 = v5 + 2;
              }
            }
            else
            {
              *v5 = v283;
            }
            if (v286 > 0x7F)
            {
              *v287 = v286 | 0x80;
              v292 = v286 >> 7;
              if (v286 >> 14)
              {
                v293 = v287 + 1;
                do
                {
                  v294 = v293;
                  *v293++ = v292 | 0x80;
                  v295 = v292 >> 7;
                  v296 = v292 >> 14;
                  v292 >>= 7;
                }
                while (v296);
                v5 = v294 + 2;
                *v293 = v295;
              }
              else
              {
                v287[1] = v292;
                v5 = v287 + 2;
              }
            }
            else
            {
              *v287 = v286;
              v5 = v287 + 1;
            }
            ++v282;
            v281 = *(_QWORD *)a1;
          }
          while (v282 < **(int **)a1);
        }
        return v5;
      case 0xE:
        v297 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v298 = 0;
          v299 = 8 * a2;
          v300 = (8 * a2) | 0x80;
          v301 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
              v297 = *(_QWORD *)a1;
            }
            v302 = *(int *)(*(_QWORD *)(v297 + 8) + 4 * v298);
            v303 = v5 + 1;
            if (v299 > 0x7F)
            {
              *v5 = v300;
              v304 = v301;
              if (v299 >= 0x4000)
              {
                do
                {
                  v305 = v303;
                  *v303++ = v304 | 0x80;
                  v306 = v304 >> 7;
                  v307 = v304 >> 14;
                  v304 >>= 7;
                }
                while (v307);
                *v303 = v306;
                v303 = v305 + 2;
              }
              else
              {
                v5[1] = v299 >> 7;
                v303 = v5 + 2;
              }
            }
            else
            {
              *v5 = v299;
            }
            if (v302 > 0x7F)
            {
              *v303 = v302 | 0x80;
              v308 = v302 >> 7;
              if (v302 >> 14)
              {
                v309 = v303 + 1;
                do
                {
                  v310 = v309;
                  *v309++ = v308 | 0x80;
                  v311 = v308 >> 7;
                  v312 = v308 >> 14;
                  v308 >>= 7;
                }
                while (v312);
                v5 = v310 + 2;
                *v309 = v311;
              }
              else
              {
                v303[1] = v308;
                v5 = v303 + 2;
              }
            }
            else
            {
              *v303 = v302;
              v5 = v303 + 1;
            }
            ++v298;
            v297 = *(_QWORD *)a1;
          }
          while (v298 < **(int **)a1);
        }
        return v5;
      case 0xF:
        v313 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v314 = 0;
          v315 = (8 * a2) | 5;
          v316 = (a2 >> 4) & 0x1FFFFFF;
          v317 = (8 * a2) >> 7;
          v318 = a3;
          v319 = (8 * a2) | 0x85;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v318)
            {
              v318 = sub_245CF8520((uint64_t)a4, (int)v318);
              v313 = *(_QWORD *)a1;
            }
            v320 = *(_DWORD *)(*(_QWORD *)(v313 + 8) + 4 * v314);
            v321 = v318 + 1;
            if (v315 > 0x7F)
            {
              *v318 = v319;
              v322 = v316;
              if (v315 >= 0x4000)
              {
                do
                {
                  v323 = v321;
                  *v321++ = v322 | 0x80;
                  v324 = v322 >> 7;
                  v325 = v322 >> 14;
                  v322 >>= 7;
                }
                while (v325);
                *v321 = v324;
                v321 = v323 + 2;
              }
              else
              {
                v318[1] = v317;
                v321 = v318 + 2;
              }
            }
            else
            {
              *v318 = v315;
            }
            *(_DWORD *)v321 = v320;
            v5 = v321 + 4;
            ++v314;
            v313 = *(_QWORD *)a1;
            v318 = v5;
          }
          while (v314 < **(int **)a1);
        }
        return v5;
      case 0x10:
        v326 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v327 = 0;
          v328 = (8 * a2) | 1;
          v329 = (8 * a2) | 0x81;
          v330 = (a2 >> 4) & 0x1FFFFFF;
          v331 = (8 * a2) >> 7;
          v332 = a3;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v332)
            {
              v332 = sub_245CF8520((uint64_t)a4, (int)v332);
              v326 = *(_QWORD *)a1;
            }
            v333 = *(_QWORD *)(*(_QWORD *)(v326 + 8) + 8 * v327);
            v334 = v332 + 1;
            if (v328 > 0x7F)
            {
              *v332 = v329;
              v335 = v330;
              if (v328 >= 0x4000)
              {
                do
                {
                  v336 = v334;
                  *v334++ = v335 | 0x80;
                  v337 = v335 >> 7;
                  v338 = v335 >> 14;
                  v335 >>= 7;
                }
                while (v338);
                *v334 = v337;
                v334 = v336 + 2;
              }
              else
              {
                v332[1] = v331;
                v334 = v332 + 2;
              }
            }
            else
            {
              *v332 = v328;
            }
            *(_QWORD *)v334 = v333;
            v5 = v334 + 8;
            ++v327;
            v326 = *(_QWORD *)a1;
            v332 = v5;
          }
          while (v327 < **(int **)a1);
        }
        return v5;
      case 0x11:
        v339 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v340 = 0;
          v341 = 8 * a2;
          v342 = (8 * a2) | 0x80;
          v343 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
              v339 = *(_QWORD *)a1;
            }
            v344 = *(_DWORD *)(*(_QWORD *)(v339 + 8) + 4 * v340);
            v345 = v5 + 1;
            if (v341 > 0x7F)
            {
              *v5 = v342;
              v346 = v343;
              if (v341 >= 0x4000)
              {
                do
                {
                  v347 = v345;
                  *v345++ = v346 | 0x80;
                  v348 = v346 >> 7;
                  v349 = v346 >> 14;
                  v346 >>= 7;
                }
                while (v349);
                *v345 = v348;
                v345 = v347 + 2;
              }
              else
              {
                v5[1] = v341 >> 7;
                v345 = v5 + 2;
              }
            }
            else
            {
              *v5 = v341;
            }
            v350 = (2 * v344) ^ (v344 >> 31);
            if (v350 > 0x7F)
            {
              *v345 = v350 | 0x80;
              v351 = v350 >> 7;
              if (v350 >> 14)
              {
                v352 = v345 + 1;
                do
                {
                  v353 = v352;
                  *v352++ = v351 | 0x80;
                  v354 = v351 >> 7;
                  v355 = v351 >> 14;
                  v351 >>= 7;
                }
                while (v355);
                v5 = v353 + 2;
                *v352 = v354;
              }
              else
              {
                v345[1] = v351;
                v5 = v345 + 2;
              }
            }
            else
            {
              *v345 = v350;
              v5 = v345 + 1;
            }
            ++v340;
            v339 = *(_QWORD *)a1;
          }
          while (v340 < **(int **)a1);
        }
        return v5;
      case 0x12:
        v356 = *(_QWORD *)a1;
        if (**(int **)a1 >= 1)
        {
          v357 = 0;
          v358 = 8 * a2;
          v359 = (8 * a2) | 0x80;
          v360 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
              v356 = *(_QWORD *)a1;
            }
            v361 = *(_QWORD *)(*(_QWORD *)(v356 + 8) + 8 * v357);
            v362 = v5 + 1;
            if (v358 > 0x7F)
            {
              *v5 = v359;
              v363 = v360;
              if (v358 >= 0x4000)
              {
                do
                {
                  v364 = v362;
                  *v362++ = v363 | 0x80;
                  v365 = v363 >> 7;
                  v366 = v363 >> 14;
                  v363 >>= 7;
                }
                while (v366);
                *v362 = v365;
                v362 = v364 + 2;
              }
              else
              {
                v5[1] = v358 >> 7;
                v362 = v5 + 2;
              }
            }
            else
            {
              *v5 = v358;
            }
            v367 = (2 * v361) ^ (v361 >> 63);
            if (v367 > 0x7F)
            {
              *v362 = v367 | 0x80;
              v368 = v367 >> 7;
              if (v367 >> 14)
              {
                v369 = v362 + 1;
                do
                {
                  v370 = v369;
                  *v369++ = v368 | 0x80;
                  v371 = v368 >> 7;
                  v372 = v368 >> 14;
                  v368 >>= 7;
                }
                while (v372);
                v5 = v370 + 2;
                *v369 = v371;
              }
              else
              {
                v362[1] = v368;
                v5 = v362 + 2;
              }
            }
            else
            {
              *v362 = v367;
              v5 = v362 + 1;
            }
            ++v357;
            v356 = *(_QWORD *)a1;
          }
          while (v357 < **(int **)a1);
        }
        return v5;
      default:
        return v5;
    }
    while (1)
    {
      if (*(_QWORD *)a4 <= (unint64_t)v5)
      {
        v5 = (char *)sub_245CF8520((uint64_t)a4, (int)v5);
        v266 = *(_QWORD *)a1;
      }
      v273 = *(_QWORD **)(*(_QWORD *)(v266 + 16) + 8 * v267 + 8);
      if (*((char *)v273 + 23) < 0)
      {
        v274 = v273[1];
        if (v274 > 127)
          goto LABEL_379;
      }
      else
      {
        v274 = *((unsigned __int8 *)v273 + 23);
      }
      if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v272] + 16) >= v274)
      {
        v275 = v5 + 1;
        if (v270 > 0x7F)
        {
          *v5 = v518;
          v276 = (a2 >> 4) & 0x1FFFFFF;
          if (v270 >= 0x4000)
          {
            do
            {
              v277 = v275;
              *v275++ = v276 | 0x80;
              v278 = v276 >> 7;
              v279 = v276 >> 14;
              v276 >>= 7;
            }
            while (v279);
            *v275 = v278;
            v275 = v277 + 2;
          }
          else
          {
            v5[1] = v516;
            v275 = v5 + 2;
          }
        }
        else
        {
          *v5 = v270;
        }
        *v275 = v274;
        v280 = v275 + 1;
        if (*((char *)v273 + 23) < 0)
          v273 = (_QWORD *)*v273;
        memcpy(v280, v273, v274);
        v5 = &v280[v274];
        goto LABEL_377;
      }
LABEL_379:
      v5 = (char *)sub_245CF897C(a4, a2, (uint64_t)v273, v5);
LABEL_377:
      ++v267;
      v266 = *(_QWORD *)a1;
      if (v267 >= *(int *)(*(_QWORD *)a1 + 8))
        return v5;
    }
  }
  if ((a1[10] & 1) == 0)
  {
    switch(a1[8])
    {
      case 1:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v10 = *(_QWORD *)a1;
        v11 = (8 * a2) | 1;
        if (v11 <= 0x7F)
          goto LABEL_549;
        *v5 = (8 * a2) | 0x81;
        v12 = (8 * a2) >> 7;
        if (!(v11 >> 14))
          goto LABEL_576;
        v13 = v5 + 1;
        do
        {
          v14 = v13;
          *v13++ = v12 | 0x80;
          v15 = v12 >> 7;
          v16 = v12 >> 14;
          v12 >>= 7;
        }
        while (v16);
        goto LABEL_667;
      case 2:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v373 = *(_DWORD *)a1;
        v374 = (8 * a2) | 5;
        if (v374 <= 0x7F)
          goto LABEL_545;
        *v5 = (8 * a2) | 0x85;
        v375 = (8 * a2) >> 7;
        if (!(v374 >> 14))
          goto LABEL_574;
        v376 = v5 + 1;
        do
        {
          v377 = v376;
          *v376++ = v375 | 0x80;
          v378 = v375 >> 7;
          v379 = v375 >> 14;
          v375 >>= 7;
        }
        while (v379);
        goto LABEL_663;
      case 3:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v380 = *(_QWORD *)a1;
        v381 = 8 * a2;
        if (8 * a2 > 0x7F)
        {
          *v5 = v381 | 0x80;
          v407 = v381 >> 7;
          if (v381 >> 14)
          {
            v434 = v5 + 1;
            do
            {
              v435 = v434;
              *v434++ = v407 | 0x80;
              v436 = v407 >> 7;
              v437 = v407 >> 14;
              v407 >>= 7;
            }
            while (v437);
            v382 = v435 + 2;
            *v434 = v436;
          }
          else
          {
            v5[1] = v407;
            v382 = v5 + 2;
          }
        }
        else
        {
          *v5 = v381;
          v382 = v5 + 1;
        }
        if (v380 <= 0x7F)
          goto LABEL_658;
        *v382 = v380 | 0x80;
        v438 = v380 >> 7;
        if (!(v380 >> 14))
          goto LABEL_660;
        v439 = v382 + 1;
        do
        {
          v440 = v439;
          *v439++ = v438 | 0x80;
          v441 = v438 >> 7;
          v442 = v438 >> 14;
          v438 >>= 7;
        }
        while (v442);
        goto LABEL_692;
      case 4:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v380 = *(_QWORD *)a1;
        v383 = 8 * a2;
        if (8 * a2 > 0x7F)
        {
          *v5 = v383 | 0x80;
          v408 = v383 >> 7;
          if (v383 >> 14)
          {
            v443 = v5 + 1;
            do
            {
              v444 = v443;
              *v443++ = v408 | 0x80;
              v445 = v408 >> 7;
              v446 = v408 >> 14;
              v408 >>= 7;
            }
            while (v446);
            v382 = v444 + 2;
            *v443 = v445;
          }
          else
          {
            v5[1] = v408;
            v382 = v5 + 2;
          }
        }
        else
        {
          *v5 = v383;
          v382 = v5 + 1;
        }
        if (v380 <= 0x7F)
          goto LABEL_658;
        *v382 = v380 | 0x80;
        v438 = v380 >> 7;
        if (!(v380 >> 14))
          goto LABEL_660;
        v439 = v382 + 1;
        do
        {
          v440 = v439;
          *v439++ = v438 | 0x80;
          v441 = v438 >> 7;
          v447 = v438 >> 14;
          v438 >>= 7;
        }
        while (v447);
        goto LABEL_692;
      case 5:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v380 = *(int *)a1;
        v384 = 8 * a2;
        if (8 * a2 > 0x7F)
        {
          *v5 = v384 | 0x80;
          v409 = v384 >> 7;
          if (v384 >> 14)
          {
            v448 = v5 + 1;
            do
            {
              v449 = v448;
              *v448++ = v409 | 0x80;
              v450 = v409 >> 7;
              v451 = v409 >> 14;
              v409 >>= 7;
            }
            while (v451);
            v382 = v449 + 2;
            *v448 = v450;
          }
          else
          {
            v5[1] = v409;
            v382 = v5 + 2;
          }
        }
        else
        {
          *v5 = v384;
          v382 = v5 + 1;
        }
        if (v380 <= 0x7F)
          goto LABEL_658;
        *v382 = v380 | 0x80;
        v438 = v380 >> 7;
        if (!(v380 >> 14))
          goto LABEL_660;
        v439 = v382 + 1;
        do
        {
          v440 = v439;
          *v439++ = v438 | 0x80;
          v441 = v438 >> 7;
          v452 = v438 >> 14;
          v438 >>= 7;
        }
        while (v452);
        goto LABEL_692;
      case 6:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v10 = *(_QWORD *)a1;
        v11 = (8 * a2) | 1;
        if (v11 <= 0x7F)
          goto LABEL_549;
        *v5 = (8 * a2) | 0x81;
        v12 = (8 * a2) >> 7;
        if (!(v11 >> 14))
          goto LABEL_576;
        v13 = v5 + 1;
        do
        {
          v14 = v13;
          *v13++ = v12 | 0x80;
          v15 = v12 >> 7;
          v385 = v12 >> 14;
          v12 >>= 7;
        }
        while (v385);
        goto LABEL_667;
      case 7:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v373 = *(_DWORD *)a1;
        v374 = (8 * a2) | 5;
        if (v374 <= 0x7F)
          goto LABEL_545;
        *v5 = (8 * a2) | 0x85;
        v375 = (8 * a2) >> 7;
        if (!(v374 >> 14))
          goto LABEL_574;
        v376 = v5 + 1;
        do
        {
          v377 = v376;
          *v376++ = v375 | 0x80;
          v378 = v375 >> 7;
          v386 = v375 >> 14;
          v375 >>= 7;
        }
        while (v386);
        goto LABEL_663;
      case 8:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        LOBYTE(v387) = *a1;
        v388 = 8 * a2;
        if (8 * a2 > 0x7F)
        {
          *v5 = v388 | 0x80;
          v410 = v388 >> 7;
          if (v388 >> 14)
          {
            v453 = v5 + 1;
            do
            {
              v454 = v453;
              *v453++ = v410 | 0x80;
              v455 = v410 >> 7;
              v456 = v410 >> 14;
              v410 >>= 7;
            }
            while (v456);
            v382 = v454 + 2;
            *v453 = v455;
          }
          else
          {
            v5[1] = v410;
            v382 = v5 + 2;
          }
        }
        else
        {
          *v5 = v388;
          v382 = v5 + 1;
        }
        goto LABEL_651;
      case 9:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v389 = *(_QWORD **)a1;
        if (*(char *)(*(_QWORD *)a1 + 23) < 0)
        {
          v390 = v389[1];
          if (v390 > 127)
            return (char *)sub_245CF897C(a4, a2, (uint64_t)v389, v5);
        }
        else
        {
          v390 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
        }
        v416 = 8 * a2;
        v417 = 1;
        v418 = 2;
        v419 = 3;
        v420 = 4;
        if ((8 * a2) >> 28)
          v420 = 5;
        if (v416 >= 0x200000)
          v419 = v420;
        if (v416 >= 0x4000)
          v418 = v419;
        if (v416 >= 0x80)
          v417 = v418;
        if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v417] + 16) < v390)
          return (char *)sub_245CF897C(a4, a2, (uint64_t)v389, v5);
        v421 = v416 | 2;
        if ((v416 | 2) <= 0x7F)
          goto LABEL_607;
        *v5 = v416 | 0x82;
        v422 = v416 >> 7;
        if (!(v421 >> 14))
          goto LABEL_609;
        v423 = v5 + 1;
        do
        {
          v424 = v423;
          *v423++ = v422 | 0x80;
          v425 = v422 >> 7;
          v426 = v422 >> 14;
          v422 >>= 7;
        }
        while (v426);
        goto LABEL_701;
      case 0xA:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v391 = *(_QWORD *)a1;
        v392 = 8 * a2;
        v393 = (8 * a2) | 3;
        v394 = (8 * a2) >> 7;
        if (v393 > 0x7F)
        {
          *v5 = (8 * a2) | 0x83;
          if (v393 >> 14)
          {
            v457 = v5 + 1;
            v458 = v392 >> 7;
            do
            {
              v459 = v457;
              *v457++ = v458 | 0x80;
              v460 = v458 >> 7;
              v461 = v458 >> 14;
              v458 >>= 7;
            }
            while (v461);
            v395 = v459 + 2;
            *v457 = v460;
          }
          else
          {
            v5[1] = v394;
            v395 = v5 + 2;
          }
        }
        else
        {
          *v5 = v393;
          v395 = v5 + 1;
        }
        v382 = (_BYTE *)(*(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(*(_QWORD *)v391 + 96))(v391, v395, a4);
        if (*(_QWORD *)a4 <= (unint64_t)v382)
          v382 = sub_245CF8520((uint64_t)a4, (int)v382);
        v387 = v392 | 4;
        if ((v392 | 4) <= 0x7F)
          goto LABEL_651;
        *v382 = v392 | 0x84;
        if (!(v387 >> 14))
        {
          v382[1] = v394;
          return v382 + 2;
        }
        v485 = v382 + 1;
        do
        {
          v486 = v485;
          *v485++ = v394 | 0x80;
          v487 = v394 >> 7;
          v488 = v394 >> 14;
          v394 >>= 7;
        }
        while (v488);
        v5 = v486 + 2;
        *v485 = v487;
        return v5;
      case 0xB:
        if ((a1[10] & 0x10) != 0)
          return (char *)(*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v396 = *(_QWORD *)a1;
        v397 = (8 * a2) | 2;
        if (v397 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          v433 = (8 * a2) >> 7;
          if (v397 >> 14)
          {
            v504 = v5 + 1;
            do
            {
              v505 = v504;
              *v504++ = v433 | 0x80;
              v506 = v433 >> 7;
              v507 = v433 >> 14;
              v433 >>= 7;
            }
            while (v507);
            v398 = v505 + 2;
            *v504 = v506;
          }
          else
          {
            v5[1] = v433;
            v398 = v5 + 2;
          }
        }
        else
        {
          *v5 = v397;
          v398 = v5 + 1;
        }
        v508 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v396 + 80))(v396);
        if (v508 > 0x7F)
        {
          *v398 = v508 | 0x80;
          v510 = v508 >> 7;
          if (v508 >> 14)
          {
            v511 = v398 + 1;
            do
            {
              v512 = v511;
              *v511++ = v510 | 0x80;
              v513 = v510 >> 7;
              v514 = v510 >> 14;
              v510 >>= 7;
            }
            while (v514);
            v509 = v512 + 2;
            *v511 = v513;
          }
          else
          {
            v398[1] = v510;
            v509 = v398 + 2;
          }
        }
        else
        {
          *v398 = v508;
          v509 = v398 + 1;
        }
        return (char *)(*(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(*(_QWORD *)v396 + 96))(v396, v509, a4);
      case 0xC:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v389 = *(_QWORD **)a1;
        if (*(char *)(*(_QWORD *)a1 + 23) < 0)
        {
          v390 = v389[1];
          if (v390 > 127)
            return (char *)sub_245CF897C(a4, a2, (uint64_t)v389, v5);
        }
        else
        {
          v390 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
        }
        v427 = 8 * a2;
        v428 = 1;
        v429 = 2;
        v430 = 3;
        v431 = 4;
        if ((8 * a2) >> 28)
          v431 = 5;
        if (v427 >= 0x200000)
          v430 = v431;
        if (v427 >= 0x4000)
          v429 = v430;
        if (v427 >= 0x80)
          v428 = v429;
        if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v428] + 16) >= v390)
        {
          v421 = v427 | 2;
          if ((v427 | 2) > 0x7F)
          {
            *v5 = v427 | 0x82;
            v422 = v427 >> 7;
            if (v421 >> 14)
            {
              v423 = v5 + 1;
              do
              {
                v424 = v423;
                *v423++ = v422 | 0x80;
                v425 = v422 >> 7;
                v502 = v422 >> 14;
                v422 >>= 7;
              }
              while (v502);
LABEL_701:
              v432 = v424 + 2;
              *v423 = v425;
            }
            else
            {
LABEL_609:
              v5[1] = v422;
              v432 = v5 + 2;
            }
          }
          else
          {
LABEL_607:
            *v5 = v421;
            v432 = v5 + 1;
          }
          *v432 = v390;
          v503 = v432 + 1;
          if (*((char *)v389 + 23) < 0)
            v389 = (_QWORD *)*v389;
          memcpy(v503, v389, v390);
          return &v503[v390];
        }
        return (char *)sub_245CF897C(a4, a2, (uint64_t)v389, v5);
      case 0xD:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v387 = *(_DWORD *)a1;
        v399 = 8 * a2;
        if (8 * a2 > 0x7F)
        {
          *v5 = v399 | 0x80;
          v412 = v399 >> 7;
          if (v399 >> 14)
          {
            v462 = v5 + 1;
            do
            {
              v463 = v462;
              *v462++ = v412 | 0x80;
              v464 = v412 >> 7;
              v465 = v412 >> 14;
              v412 >>= 7;
            }
            while (v465);
            v382 = v463 + 2;
            *v462 = v464;
          }
          else
          {
            v5[1] = v412;
            v382 = v5 + 2;
          }
        }
        else
        {
          *v5 = v399;
          v382 = v5 + 1;
        }
        if (v387 <= 0x7F)
        {
LABEL_651:
          *v382 = v387;
          return v382 + 1;
        }
        *v382 = v387 | 0x80;
        v466 = v387 >> 7;
        if (!(v387 >> 14))
        {
          v382[1] = v466;
          return v382 + 2;
        }
        v489 = v382 + 1;
        do
        {
          v490 = v489;
          *v489++ = v466 | 0x80;
          v491 = v466 >> 7;
          v492 = v466 >> 14;
          v466 >>= 7;
        }
        while (v492);
        v5 = v490 + 2;
        *v489 = v491;
        return v5;
      case 0xE:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v380 = *(int *)a1;
        v400 = 8 * a2;
        if (8 * a2 > 0x7F)
        {
          *v5 = v400 | 0x80;
          v413 = v400 >> 7;
          if (v400 >> 14)
          {
            v467 = v5 + 1;
            do
            {
              v468 = v467;
              *v467++ = v413 | 0x80;
              v469 = v413 >> 7;
              v470 = v413 >> 14;
              v413 >>= 7;
            }
            while (v470);
            v382 = v468 + 2;
            *v467 = v469;
          }
          else
          {
            v5[1] = v413;
            v382 = v5 + 2;
          }
        }
        else
        {
          *v5 = v400;
          v382 = v5 + 1;
        }
        if (v380 <= 0x7F)
        {
LABEL_658:
          *v382 = v380;
          return v382 + 1;
        }
        *v382 = v380 | 0x80;
        v438 = v380 >> 7;
        if (!(v380 >> 14))
        {
LABEL_660:
          v382[1] = v438;
          return v382 + 2;
        }
        v439 = v382 + 1;
        do
        {
          v440 = v439;
          *v439++ = v438 | 0x80;
          v441 = v438 >> 7;
          v493 = v438 >> 14;
          v438 >>= 7;
        }
        while (v493);
LABEL_692:
        v5 = v440 + 2;
        *v439 = v441;
        return v5;
      case 0xF:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v373 = *(_DWORD *)a1;
        v374 = (8 * a2) | 5;
        if (v374 > 0x7F)
        {
          *v5 = (8 * a2) | 0x85;
          v375 = (8 * a2) >> 7;
          if (v374 >> 14)
          {
            v376 = v5 + 1;
            do
            {
              v377 = v376;
              *v376++ = v375 | 0x80;
              v378 = v375 >> 7;
              v471 = v375 >> 14;
              v375 >>= 7;
            }
            while (v471);
LABEL_663:
            v401 = v377 + 2;
            *v376 = v378;
          }
          else
          {
LABEL_574:
            v5[1] = v375;
            v401 = v5 + 2;
          }
        }
        else
        {
LABEL_545:
          *v5 = v374;
          v401 = v5 + 1;
        }
        *v401 = v373;
        return (char *)(v401 + 1);
      case 0x10:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v10 = *(_QWORD *)a1;
        v11 = (8 * a2) | 1;
        if (v11 > 0x7F)
        {
          *v5 = (8 * a2) | 0x81;
          v12 = (8 * a2) >> 7;
          if (v11 >> 14)
          {
            v13 = v5 + 1;
            do
            {
              v14 = v13;
              *v13++ = v12 | 0x80;
              v15 = v12 >> 7;
              v472 = v12 >> 14;
              v12 >>= 7;
            }
            while (v472);
LABEL_667:
            v402 = v14 + 2;
            *v13 = v15;
          }
          else
          {
LABEL_576:
            v5[1] = v12;
            v402 = v5 + 2;
          }
        }
        else
        {
LABEL_549:
          *v5 = v11;
          v402 = v5 + 1;
        }
        *v402 = v10;
        return (char *)(v402 + 1);
      case 0x11:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v403 = *(_DWORD *)a1;
        v404 = 8 * a2;
        if (8 * a2 > 0x7F)
        {
          *v5 = v404 | 0x80;
          v414 = v404 >> 7;
          if (v404 >> 14)
          {
            v473 = v5 + 1;
            do
            {
              v474 = v473;
              *v473++ = v414 | 0x80;
              v475 = v414 >> 7;
              v476 = v414 >> 14;
              v414 >>= 7;
            }
            while (v476);
            v382 = v474 + 2;
            *v473 = v475;
          }
          else
          {
            v5[1] = v414;
            v382 = v5 + 2;
          }
        }
        else
        {
          *v5 = v404;
          v382 = v5 + 1;
        }
        v477 = (2 * v403) ^ (v403 >> 31);
        if (v477 <= 0x7F)
        {
          *v382 = v477;
          return v382 + 1;
        }
        *v382 = v477 | 0x80;
        v478 = v477 >> 7;
        if (!(v477 >> 14))
        {
          v382[1] = v478;
          return v382 + 2;
        }
        v494 = v382 + 1;
        do
        {
          v495 = v494;
          *v494++ = v478 | 0x80;
          v496 = v478 >> 7;
          v497 = v478 >> 14;
          v478 >>= 7;
        }
        while (v497);
        v5 = v495 + 2;
        *v494 = v496;
        return v5;
      case 0x12:
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = (char *)sub_245CF8520((uint64_t)a4, (int)a3);
        v405 = *(_QWORD *)a1;
        v406 = 8 * a2;
        if (8 * a2 > 0x7F)
        {
          *v5 = v406 | 0x80;
          v415 = v406 >> 7;
          if (v406 >> 14)
          {
            v479 = v5 + 1;
            do
            {
              v480 = v479;
              *v479++ = v415 | 0x80;
              v481 = v415 >> 7;
              v482 = v415 >> 14;
              v415 >>= 7;
            }
            while (v482);
            v382 = v480 + 2;
            *v479 = v481;
          }
          else
          {
            v5[1] = v415;
            v382 = v5 + 2;
          }
        }
        else
        {
          *v5 = v406;
          v382 = v5 + 1;
        }
        v483 = (2 * v405) ^ (v405 >> 63);
        if (v483 > 0x7F)
        {
          *v382 = v483 | 0x80;
          v484 = v483 >> 7;
          if (v483 >> 14)
          {
            v498 = v382 + 1;
            do
            {
              v499 = v498;
              *v498++ = v484 | 0x80;
              v500 = v484 >> 7;
              v501 = v484 >> 14;
              v484 >>= 7;
            }
            while (v501);
            v5 = v499 + 2;
            *v498 = v500;
          }
          else
          {
            v382[1] = v484;
            return v382 + 2;
          }
        }
        else
        {
          *v382 = v483;
          return v382 + 1;
        }
        return v5;
      default:
        return v5;
    }
  }
  return v5;
}

void sub_245CFDC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_245CFDC6C(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  int *v3;
  _BYTE *v4;
  int v5;
  int *v6;
  int *v7;
  int *v8;
  unint64_t v9;
  int *v10;
  int *v11;
  BOOL v12;

  v1 = *(int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    if (*(_WORD *)(a1 + 10))
    {
      v2 = 0;
      v3 = &v1[8 * *(unsigned __int16 *)(a1 + 10)];
      do
      {
        v4 = v1 + 2;
        v5 = *v1;
        v1 += 8;
        v2 += sub_245CFDD2C(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  v8 = *(int **)v1;
  v6 = v1 + 2;
  v7 = v8;
  if (v8 == v6)
    return 0;
  v2 = 0;
  do
  {
    v9 = sub_245CFDD2C((_BYTE *)v7 + 40, v7[8]);
    v10 = (int *)*((_QWORD *)v7 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (int *)*((_QWORD *)v7 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v7;
        v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

unint64_t sub_245CFDD2C(_BYTE *a1, int a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  int v70;
  uint64_t v71;
  int *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(void);
  int v84;
  uint64_t v85;
  int v86;
  const char *v87;
  int v88;
  std::string __p;

  if (a1[9])
  {
    if (a1[11])
    {
      switch(a1[8])
      {
        case 1:
        case 6:
        case 0x10:
          v6 = 8 * **(unsigned int **)a1;
          goto LABEL_51;
        case 2:
        case 7:
        case 0xF:
          v6 = 4 * **(unsigned int **)a1;
          goto LABEL_51;
        case 3:
          v13 = **(unsigned int **)a1;
          if ((int)v13 < 1)
            goto LABEL_54;
          v6 = 0;
          v14 = *(uint64_t **)(*(_QWORD *)a1 + 8);
          do
          {
            v15 = *v14++;
            v6 += (9 * (__clz(v15 | 1) ^ 0x3F) + 73) >> 6;
            --v13;
          }
          while (v13);
          goto LABEL_51;
        case 4:
          v16 = **(unsigned int **)a1;
          if ((int)v16 < 1)
            goto LABEL_54;
          v6 = 0;
          v17 = *(uint64_t **)(*(_QWORD *)a1 + 8);
          do
          {
            v18 = *v17++;
            v6 += (9 * (__clz(v18 | 1) ^ 0x3F) + 73) >> 6;
            --v16;
          }
          while (v16);
          goto LABEL_51;
        case 5:
          v19 = **(unsigned int **)a1;
          if ((int)v19 < 1)
            goto LABEL_54;
          v6 = 0;
          v20 = *(int **)(*(_QWORD *)a1 + 8);
          do
          {
            v22 = *v20++;
            v21 = v22;
            if (v22 < 0)
              v23 = 10;
            else
              v23 = (9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6;
            v6 += v23;
            --v19;
          }
          while (v19);
          goto LABEL_51;
        case 8:
          v6 = **(unsigned int **)a1;
          goto LABEL_51;
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          v86 = 3;
          v87 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/t"
                "hird_party/protobuf-lite/extension_set.cc";
          v88 = 1599;
          memset(&__p, 0, sizeof(__p));
          std::string::append(&__p, "Non-primitive types can't be packed.");
          sub_245CF8BAC((uint64_t)&v86);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_54;
        case 0xD:
          v7 = **(unsigned int **)a1;
          if ((int)v7 < 1)
            goto LABEL_54;
          v6 = 0;
          v8 = *(int **)(*(_QWORD *)a1 + 8);
          do
          {
            v9 = *v8++;
            v6 += (9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6;
            --v7;
          }
          while (v7);
          goto LABEL_51;
        case 0xE:
          v24 = **(unsigned int **)a1;
          if ((int)v24 < 1)
            goto LABEL_54;
          v6 = 0;
          v25 = *(int **)(*(_QWORD *)a1 + 8);
          do
          {
            v27 = *v25++;
            v26 = v27;
            if (v27 < 0)
              v28 = 10;
            else
              v28 = (9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6;
            v6 += v28;
            --v24;
          }
          while (v24);
          goto LABEL_51;
        case 0x11:
          v10 = **(unsigned int **)a1;
          if ((int)v10 < 1)
            goto LABEL_54;
          v6 = 0;
          v11 = *(int **)(*(_QWORD *)a1 + 8);
          do
          {
            v12 = *v11++;
            v6 += (9 * (__clz((2 * v12) ^ (v12 >> 31) | 1) ^ 0x1F) + 73) >> 6;
            --v10;
          }
          while (v10);
          goto LABEL_51;
        case 0x12:
          v29 = **(unsigned int **)a1;
          if ((int)v29 < 1)
            goto LABEL_54;
          v6 = 0;
          v30 = *(uint64_t **)(*(_QWORD *)a1 + 8);
          do
          {
            v31 = *v30++;
            v6 += (9 * (__clz((2 * v31) ^ (v31 >> 63) | 1) ^ 0x3F) + 73) >> 6;
            --v29;
          }
          while (v29);
LABEL_51:
          *((_DWORD *)a1 + 3) = v6;
          v32 = v6 + ((9 * (__clz((8 * a2) | 3) ^ 0x1F) + 73) >> 6) + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
          if (v6)
            v3 = v32;
          else
            v3 = 0;
          break;
        default:
LABEL_54:
          v3 = 0;
          *((_DWORD *)a1 + 3) = 0;
          break;
      }
    }
    else
    {
      v4 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << (a1[8] == 10);
      switch(a1[8])
      {
        case 1:
        case 6:
        case 0x10:
          v5 = v4 + 8;
          goto LABEL_15;
        case 2:
        case 7:
        case 0xF:
          v5 = v4 + 4;
LABEL_15:
          v3 = v5 * (unint64_t)**(unsigned int **)a1;
          break;
        case 3:
          v38 = **(unsigned int **)a1;
          v3 = v4 * (unint64_t)v38;
          if ((int)v38 >= 1)
          {
            v39 = *(uint64_t **)(*(_QWORD *)a1 + 8);
            do
            {
              v40 = *v39++;
              v3 += (9 * (__clz(v40 | 1) ^ 0x3F) + 73) >> 6;
              --v38;
            }
            while (v38);
          }
          break;
        case 4:
          v41 = **(unsigned int **)a1;
          v3 = v4 * (unint64_t)v41;
          if ((int)v41 >= 1)
          {
            v42 = *(uint64_t **)(*(_QWORD *)a1 + 8);
            do
            {
              v43 = *v42++;
              v3 += (9 * (__clz(v43 | 1) ^ 0x3F) + 73) >> 6;
              --v41;
            }
            while (v41);
          }
          break;
        case 5:
          v44 = **(unsigned int **)a1;
          v3 = v4 * (unint64_t)v44;
          if ((int)v44 >= 1)
          {
            v45 = *(int **)(*(_QWORD *)a1 + 8);
            do
            {
              v47 = *v45++;
              v46 = v47;
              if (v47 < 0)
                v48 = 10;
              else
                v48 = (9 * (__clz(v46 | 1) ^ 0x1F) + 73) >> 6;
              v3 += v48;
              --v44;
            }
            while (v44);
          }
          break;
        case 8:
          v3 = **(unsigned int **)a1 + **(unsigned int **)a1 * (unint64_t)v4;
          break;
        case 9:
          v49 = *(unsigned int *)(*(_QWORD *)a1 + 8);
          v3 = v4 * (unint64_t)v49;
          if ((int)v49 >= 1)
          {
            v50 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
            do
            {
              v51 = *v50++;
              v52 = *(unsigned __int8 *)(v51 + 23);
              v53 = *(_QWORD *)(v51 + 8);
              if ((v52 & 0x80u) == 0)
                v53 = v52;
              v3 += v53 + ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6);
              --v49;
            }
            while (v49);
          }
          break;
        case 0xA:
          v54 = *(_QWORD *)a1;
          v55 = *(_DWORD *)(*(_QWORD *)a1 + 8);
          v3 = v4 * (unint64_t)v55;
          if (v55 >= 1)
          {
            v56 = 0;
            do
            {
              v57 = *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * v56 + 8);
              v3 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 72))(v57);
              ++v56;
              v54 = *(_QWORD *)a1;
            }
            while (v56 < *(int *)(*(_QWORD *)a1 + 8));
          }
          break;
        case 0xB:
          v58 = *(_QWORD *)a1;
          v59 = *(_DWORD *)(*(_QWORD *)a1 + 8);
          v3 = v4 * (unint64_t)v59;
          if (v59 >= 1)
          {
            v60 = 0;
            do
            {
              v61 = *(_QWORD *)(*(_QWORD *)(v58 + 16) + 8 * v60 + 8);
              v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 72))(v61);
              v3 += v62 + ((9 * (__clz(v62 | 1) ^ 0x1F) + 73) >> 6);
              ++v60;
              v58 = *(_QWORD *)a1;
            }
            while (v60 < *(int *)(*(_QWORD *)a1 + 8));
          }
          break;
        case 0xC:
          v63 = *(unsigned int *)(*(_QWORD *)a1 + 8);
          v3 = v4 * (unint64_t)v63;
          if ((int)v63 >= 1)
          {
            v64 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8);
            do
            {
              v65 = *v64++;
              v66 = *(unsigned __int8 *)(v65 + 23);
              v67 = *(_QWORD *)(v65 + 8);
              if ((v66 & 0x80u) == 0)
                v67 = v66;
              v3 += v67 + ((9 * (__clz(v67 | 1) ^ 0x1F) + 73) >> 6);
              --v63;
            }
            while (v63);
          }
          break;
        case 0xD:
          v68 = **(unsigned int **)a1;
          v3 = v4 * (unint64_t)v68;
          if ((int)v68 >= 1)
          {
            v69 = *(int **)(*(_QWORD *)a1 + 8);
            do
            {
              v70 = *v69++;
              v3 += (9 * (__clz(v70 | 1) ^ 0x1F) + 73) >> 6;
              --v68;
            }
            while (v68);
          }
          break;
        case 0xE:
          v71 = **(unsigned int **)a1;
          v3 = v4 * (unint64_t)v71;
          if ((int)v71 >= 1)
          {
            v72 = *(int **)(*(_QWORD *)a1 + 8);
            do
            {
              v74 = *v72++;
              v73 = v74;
              if (v74 < 0)
                v75 = 10;
              else
                v75 = (9 * (__clz(v73 | 1) ^ 0x1F) + 73) >> 6;
              v3 += v75;
              --v71;
            }
            while (v71);
          }
          break;
        case 0x11:
          v76 = **(unsigned int **)a1;
          v3 = v4 * (unint64_t)v76;
          if ((int)v76 >= 1)
          {
            v77 = *(int **)(*(_QWORD *)a1 + 8);
            do
            {
              v78 = *v77++;
              v3 += (9 * (__clz((2 * v78) ^ (v78 >> 31) | 1) ^ 0x1F) + 73) >> 6;
              --v76;
            }
            while (v76);
          }
          break;
        case 0x12:
          v79 = **(unsigned int **)a1;
          v3 = v4 * (unint64_t)v79;
          if ((int)v79 >= 1)
          {
            v80 = *(uint64_t **)(*(_QWORD *)a1 + 8);
            do
            {
              v81 = *v80++;
              v3 += (9 * (__clz((2 * v81) ^ (v81 >> 63) | 1) ^ 0x3F) + 73) >> 6;
              --v79;
            }
            while (v79);
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if ((a1[10] & 1) != 0)
  {
    return 0;
  }
  else
  {
    v3 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << (a1[8] == 10);
    switch(a1[8])
    {
      case 1:
      case 6:
      case 0x10:
        v3 += 8;
        return v3;
      case 2:
      case 7:
      case 0xF:
        v3 += 4;
        return v3;
      case 3:
      case 4:
        v34 = *(_QWORD *)a1;
        goto LABEL_127;
      case 5:
      case 0xE:
        v35 = (9 * (__clz(*(_DWORD *)a1 | 1) ^ 0x1F) + 73) >> 6;
        if (*(int *)a1 >= 0)
          v36 = v35;
        else
          v36 = 10;
        v3 += v36;
        return v3;
      case 8:
        return ++v3;
      case 9:
      case 0xC:
        v37 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        if (*(char *)(*(_QWORD *)a1 + 23) >= 0)
          v37 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
        v3 += v37 + ((9 * (__clz(v37 | 1) ^ 0x1F) + 73) >> 6);
        return v3;
      case 0xA:
        v3 += (*(uint64_t (**)(void))(**(_QWORD **)a1 + 72))();
        return v3;
      case 0xB:
        v82 = **(_QWORD **)a1;
        if ((a1[10] & 0x10) != 0)
          v83 = *(uint64_t (**)(void))(v82 + 88);
        else
          v83 = *(uint64_t (**)(void))(v82 + 72);
        v85 = v83();
        v3 += v85 + ((9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6);
        return v3;
      case 0xD:
        v84 = *(_DWORD *)a1;
        goto LABEL_125;
      case 0x11:
        v84 = (2 * *(_DWORD *)a1) ^ (*(int *)a1 >> 31);
LABEL_125:
        v3 += (9 * (__clz(v84 | 1) ^ 0x1F) + 73) >> 6;
        break;
      case 0x12:
        v34 = (2 * *(_QWORD *)a1) ^ (*(uint64_t *)a1 >> 63);
LABEL_127:
        v3 += (9 * (__clz(v34 | 1) ^ 0x3F) + 73) >> 6;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_245CFE5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_245CFE600(_QWORD *a1, const char *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  size_t v14;
  int *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  _DWORD *v22;
  void *v23[2];
  unsigned __int8 v24;
  int v25;
  _QWORD v26[11];
  char v27;
  uint64_t v28;
  _DWORD *v29;
  _QWORD v30[11];
  char v31;
  uint64_t v32;
  char __strerrbuf[1024];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)operator new();
  *v6 = &off_2516F6E78;
  v6[1] = 0;
  if (a3)
  {
    v7 = a1;
    v8 = (_QWORD *)operator new();
    v9 = MEMORY[0x24BEDB838];
    v10 = MEMORY[0x24BEDB838] + 64;
    v8[53] = MEMORY[0x24BEDB838] + 64;
    v11 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
    v12 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
    *v8 = v11;
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v11 - 24)) = v12;
    v8[1] = 0;
    v13 = (std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24));
    std::ios_base::init(v13, v8 + 2);
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    *v8 = v9 + 24;
    v8[53] = v10;
    MEMORY[0x2495468B8](v8 + 2);
    a1 = v7;
    if (!std::filebuf::open())
      std::ios_base::clear((std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)), *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 32) | 4);
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x24BEDB1D0];
  }
  v6[2] = v8;
  if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
  {
    v25 = 5;
    sub_245CF4F98((uint64_t)v26);
    sub_245CF35A0(v26, (uint64_t)"\"", 1);
    v14 = strlen(a2);
    sub_245CF35A0(v26, (uint64_t)a2, v14);
    sub_245CF35A0(v26, (uint64_t)"\": ", 3);
    v15 = __error();
    strerror_r(*v15, __strerrbuf, 0x3FFuLL);
    sub_245CF4F98((uint64_t)v30);
    v16 = strlen(__strerrbuf);
    sub_245CF35A0(v30, (uint64_t)__strerrbuf, v16);
    sub_245CF35A0(v30, (uint64_t)" Error #", 8);
    std::ostream::operator<<();
    std::stringbuf::str();
    v17 = *MEMORY[0x24BEDB800];
    v30[0] = v17;
    v18 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    *(_QWORD *)((char *)v30 + *(_QWORD *)(v17 - 24)) = v18;
    v19 = MEMORY[0x24BEDB848];
    v30[1] = MEMORY[0x24BEDB848] + 16;
    if (v31 < 0)
      operator delete((void *)v30[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249546A20](&v32);
    if ((v24 & 0x80u) == 0)
      v20 = v23;
    else
      v20 = (void **)v23[0];
    if ((v24 & 0x80u) == 0)
      v21 = v24;
    else
      v21 = (uint64_t)v23[1];
    sub_245CF35A0(v26, (uint64_t)v20, v21);
    sub_245CF5084((uint64_t)&v29, &v25);
    sub_245CF8F5C(v6 + 1, &v29);
    v22 = v29;
    v29 = 0;
    if (v22)
      sub_245CF8D4C((uint64_t)v22);
    if ((char)v24 < 0)
      operator delete(v23[0]);
    v26[0] = v17;
    *(_QWORD *)((char *)v26 + *(_QWORD *)(v17 - 24)) = v18;
    v26[1] = v19 + 16;
    if (v27 < 0)
      operator delete((void *)v26[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249546A20](&v28);
  }
  *a1 = v6;
}

void sub_245CFE970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;

  v56 = a53;
  a53 = 0;
  if (v56)
    sub_245CF8D4C(v56);
  if (a15 < 0)
    operator delete(__p);
  *(_QWORD *)(v54 + *(_QWORD *)(*MEMORY[0x24BEDB800] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249546A20](&a34);
  v57 = *a9;
  *a9 = 0;
  if (v57)
    sub_245CF8D4C(v57);
  MEMORY[0x249546A74](v53, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void sub_245CFEB04(_QWORD *a1)
{
  sub_245CFEF20(a1);
  JUMPOUT(0x249546A74);
}

uint64_t *sub_245CFEB28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_245CF8EAC(a2, (_DWORD **)(a1 + 8));
}

BOOL sub_245CFEB34(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  std::locale v11;
  char v12;

  v3 = *(_QWORD **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v11, MEMORY[0x24BEDB350]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v11);
  MEMORY[0x2495468D0](&v12, v3, 1);
  if (!v12)
    return (*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) == 0;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v5 == v7)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | v9);
  return (*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) == 0;
}

void sub_245CFECB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_245CFECC8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x245CFEC68);
  }
  __cxa_rethrow();
}

void sub_245CFED0C()
{
  __cxa_end_catch();
  JUMPOUT(0x245CFECC0);
}

BOOL sub_245CFED1C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  std::string::value_type *v6;
  std::string::value_type v7;
  uint64_t v8;
  std::string *v9;
  std::string::size_type size;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string v18;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)MEMORY[0x24BEDB1D0];
  if (v2 == (_QWORD *)MEMORY[0x24BEDB1D0])
  {
    v18.__r_.__value_.__s.__data_[0] = 0;
    v11 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"filesystem.cc", 13);
    sub_245CF35A0(v11, (uint64_t)"(", 1);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = sub_245CF35A0(v12, (uint64_t)") ", 2);
    v14 = sub_245CF35A0(v13, (uint64_t)"LOG(", 4);
    v15 = sub_245CF35A0(v14, (uint64_t)"ERROR", 5);
    v16 = sub_245CF35A0(v15, (uint64_t)") ", 2);
    sub_245CF35A0(v16, (uint64_t)"ReadAll is not supported for stdin.", 35);
    sub_245CF3834(&v18);
  }
  else
  {
    v5 = *(_QWORD **)((char *)v2 + *(_QWORD *)(*v2 - 24) + 40);
    memset(&v18, 0, sizeof(v18));
    while (v5 && (v5[3] != v5[4] || (*(unsigned int (**)(_QWORD *))(*v5 + 72))(v5) != -1))
    {
      v6 = (std::string::value_type *)v5[3];
      if (v6 == (std::string::value_type *)v5[4])
        v7 = (*(uint64_t (**)(_QWORD *))(*v5 + 72))(v5);
      else
        v7 = *v6;
      std::string::push_back(&v18, v7);
      v8 = v5[3];
      if (v8 == v5[4])
        (*(void (**)(_QWORD *))(*v5 + 80))(v5);
      else
        v5[3] = v8 + 1;
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v18;
    else
      v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    MEMORY[0x249546864](a2, v9, size);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  return v2 != v3;
}

void sub_245CFEEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_245CFEF20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;

  *a1 = &off_2516F6E78;
  v2 = a1[2];
  if (v2 != MEMORY[0x24BEDB1D0] && v2 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    sub_245CF8D4C(v4);
  return a1;
}

uint64_t sub_245CFEF80(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void sub_245CFEF8C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_245CFEFA0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25751ABC8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25751ABC8))
    {
      qword_25751AE78 = 0;
      unk_25751AE80 = 0;
      qword_25751AE88 = 0;
      sub_245CFF754((uint64_t)sub_245CFEF8C, (uint64_t)&qword_25751AE78);
      atomic_store(1u, byte_25751ADA8);
      __cxa_guard_release(&qword_25751ABC8);
    }
  }
}

void sub_245CFF018(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25751ABC8);
  _Unwind_Resume(a1);
}

void sub_245CFF030(_DWORD *a1)
{
  unsigned __int8 v2;
  pthread_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  const char *v7;
  int v8;
  std::string __p;

  v2 = atomic_load((unsigned __int8 *)&qword_25751ABD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25751ABD0))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_25751A0D0, &dword_245CF0000);
    __cxa_guard_release(&qword_25751ABD0);
  }
  v3 = pthread_self();
  v4 = (uint64_t)v3;
  if (qword_25751ABD8)
  {
    if (v3 && v3 == (pthread_t)qword_25751ABD8)
    {
LABEL_5:
      if (*a1 != 1)
      {
        v6 = 3;
        v7 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/thir"
             "d_party/protobuf-lite/generated_message_util.cc";
        v8 = 785;
        memset(&__p, 0, sizeof(__p));
        std::string::append(&__p, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
        sub_245CF8BAC((uint64_t)&v6);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
    }
  }
  else if (!v3)
  {
    goto LABEL_5;
  }
  v5 = atomic_load(byte_25751ADA8);
  if ((v5 & 1) == 0)
    sub_245CFEFA0();
  std::mutex::lock(&stru_25751A0D0);
  qword_25751ABD8 = v4;
  sub_245CFF19C(a1);
  qword_25751ABD8 = 0;
  std::mutex::unlock(&stru_25751A0D0);
}

void sub_245CFF178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_245CFF19C(_DWORD *result)
{
  uint64_t (**v1)(void);
  _DWORD *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  if (*result == -1)
  {
    v1 = (uint64_t (**)(void))result;
    *result = 1;
    v2 = result + 6;
    v3 = result[1];
    if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        if (*(_QWORD *)&v2[2 * i])
        {
          sub_245CFF19C();
          v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    v5 = v3;
    v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = &v2[2 * v5];
      do
      {
        if (**(_QWORD **)&v8[2 * v7])
        {
          sub_245CFF19C();
          v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

uint64_t sub_245CFF248()
{
  return 0;
}

_QWORD *sub_245CFF250@<X0>(_QWORD *a1@<X8>)
{
  return sub_245CF7F30(a1, "(cannot determine missing fields for lite message)");
}

uint64_t sub_245CFF260(uint64_t a1, char *a2, int a3)
{
  size_t v6;
  uint64_t v7;
  uint64_t result;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type size;
  std::string v15;
  int v16;
  const char *v17;
  int v18;
  std::string v19;
  void *__p;
  std::string::size_type v21;
  unsigned __int8 v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  _OWORD v27[2];
  __int128 v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = a3;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v29 = 0;
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  v31 = 0x80000000;
  v32 = 0;
  v33 = 0;
  v30 = 0x6400000000;
  if (a3 < 17)
  {
    memcpy((char *)v27 + 8, a2, v6);
    v26 = 0;
    v23 = (char *)v27 + v6 + 8;
    v24 = (char *)v27 + v6 + 8;
    v25 = 0;
    if (*((_QWORD *)&v28 + 1) == 1)
      *((_QWORD *)&v28 + 1) = a2 - ((char *)v27 + 8);
    a2 = (char *)v27 + 8;
  }
  else
  {
    v26 = 16;
    v23 = &a2[v6 - 16];
    v24 = v23;
    v25 = (char *)v27 + 8;
  }
  v7 = (*(uint64_t (**)(uint64_t, char *, char **))(*(_QWORD *)a1 + 88))(a1, a2, &v23);
  result = 0;
  if (v7 && !v29)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    {
      return 1;
    }
    else
    {
      v16 = 2;
      v17 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/third"
            "_party/protobuf-lite/message_lite.cc";
      v18 = 133;
      memset(&v19, 0, sizeof(v19));
      memset(&v15, 0, sizeof(v15));
      std::string::append(&v15, "Can't ");
      std::string::append(&v15, "parse");
      std::string::append(&v15, " message of type \"");
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1);
      if ((v22 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v22 & 0x80u) == 0)
        v10 = v22;
      else
        v10 = v21;
      std::string::append(&v15, p_p, v10);
      if ((char)v22 < 0)
        operator delete(__p);
      std::string::append(&v15, "\" because it is missing required fields: ");
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(&__p, a1);
      if ((v22 & 0x80u) == 0)
        v11 = (const std::string::value_type *)&__p;
      else
        v11 = (const std::string::value_type *)__p;
      if ((v22 & 0x80u) == 0)
        v12 = v22;
      else
        v12 = v21;
      std::string::append(&v15, v11, v12);
      if ((char)v22 < 0)
        operator delete(__p);
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v15;
      else
        v13 = (std::string *)v15.__r_.__value_.__r.__words[0];
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
      else
        size = v15.__r_.__value_.__l.__size_;
      std::string::append(&v19, (const std::string::value_type *)v13, size);
      sub_245CF8BAC((uint64_t)&v16);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      return 0;
    }
  }
  return result;
}

void sub_245CFF50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_245CFF56C(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  std::string *v5;
  void **v6;
  std::string::size_type v7;
  void *__p[2];
  unsigned __int8 v9;
  int v10;
  const char *v11;
  int v12;
  std::string v13;
  char __str[8];
  uint64_t v15;
  _QWORD v16[9];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  if (v4 >> 31)
  {
    v10 = 2;
    v11 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/third_p"
          "arty/protobuf-lite/message_lite.cc";
    v12 = 457;
    memset(&v13, 0, sizeof(v13));
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
    if ((v9 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v7 = v9;
    else
      v7 = (std::string::size_type)__p[1];
    std::string::append(&v13, (const std::string::value_type *)v6, v7);
    std::string::append(&v13, " exceeded maximum protobuf size of 2GB: ");
    snprintf(__str, 0x80uLL, "%lu", v4);
    v17 = 0;
    std::string::append(&v13, __str);
    sub_245CF8BAC((uint64_t)&v10);
    if ((char)v9 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    a1->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&a1->__r_.__value_.__s + 23) = 0;
  }
  else
  {
    std::string::resize(a1, v4, 0);
    v5 = a1;
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
      v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
    *(_QWORD *)__str = (char *)v5 + v4;
    v15 = 0;
    v16[0] = 0;
    *(_DWORD *)((char *)v16 + 7) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  }
}

void sub_245CFF708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_245CFF754(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = atomic_load((unsigned __int8 *)&qword_25751ABE8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25751ABE8))
  {
    v16 = operator new();
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 850045863;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_QWORD *)(v16 + 80) = 0;
    qword_25751ABE0 = v16;
    __cxa_guard_release(&qword_25751ABE8);
  }
  v5 = qword_25751ABE0;
  std::mutex::lock((std::mutex *)(qword_25751ABE0 + 24));
  v7 = *(_QWORD **)(v5 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD **)v5;
    v10 = ((uint64_t)v7 - *(_QWORD *)v5) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_245CF3B34();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 60)
        sub_245CF3B8C();
      v14 = (char *)operator new(16 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[16 * v10];
    *(_QWORD *)v15 = a1;
    *((_QWORD *)v15 + 1) = a2;
    v8 = v15 + 16;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 2;
      }
      while (v7 != v9);
      v7 = *(_QWORD **)v5;
    }
    *(_QWORD *)v5 = v15;
    *(_QWORD *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 16) = &v14[16 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = a1;
    v7[1] = a2;
    v8 = v7 + 2;
  }
  *(_QWORD *)(v5 + 8) = v8;
  std::mutex::unlock((std::mutex *)(v5 + 24));
}

void sub_245CFF8DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25751ABE8);
  _Unwind_Resume(a1);
}

uint64_t sub_245CFF920(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t **v6;
  unsigned int *v7;
  uint64_t **v8;

  v6 = sub_245CF4DEC((_QWORD *)(a1 + 64), a2, a3);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 4);
  }
  else
  {
    v8 = sub_245CF4DEC((_QWORD *)(a1 + 24), a2, a3);
    v7 = (unsigned int *)(v8 + 4);
    if (!v8)
      v7 = (unsigned int *)(a1 + 104);
  }
  return *v7;
}

uint64_t sub_245CFF984(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_2516F6FF0;
  v2 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v2)
    sub_245CF8D4C(v2);
  sub_245CF4508(a1 + 64);
  sub_245CF4508(a1 + 24);
  sub_245CF4F3C((uint64_t **)(a1 + 16), 0);
  return a1;
}

char *sub_245CFF9DC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *result;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 72);
  if (!v2)
    v2 = &unk_25751AE90;
  v3 = v2[23];
  if (v3)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v4 = atomic_load(&qword_25751A128);
    if (!v4)
      v4 = sub_245CF2238(&off_25751A110);
  }
  if (*(char *)(v4 + 23) < 0)
  {
    if (*(_QWORD *)(v4 + 8))
      goto LABEL_9;
    return "<unk>";
  }
  if (!*(_BYTE *)(v4 + 23))
    return "<unk>";
LABEL_9:
  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 72);
  if (!v5)
    v5 = &unk_25751AE90;
  v6 = v5[23];
  if (v6)
  {
    result = (char *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_25751A128);
    if (!result)
      result = (char *)sub_245CF2238(&off_25751A110);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_245CFFABC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *result;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 72);
  if (!v2)
    v2 = &unk_25751AE90;
  v3 = v2[24];
  if (v3)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v4 = atomic_load(&qword_25751A148);
    if (!v4)
      v4 = sub_245CF2238(&off_25751A130);
  }
  if (*(char *)(v4 + 23) < 0)
  {
    if (*(_QWORD *)(v4 + 8))
      goto LABEL_9;
    return "<s>";
  }
  if (!*(_BYTE *)(v4 + 23))
    return "<s>";
LABEL_9:
  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 72);
  if (!v5)
    v5 = &unk_25751AE90;
  v6 = v5[24];
  if (v6)
  {
    result = (char *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_25751A148);
    if (!result)
      result = (char *)sub_245CF2238(&off_25751A130);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_245CFFB9C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *result;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 72);
  if (!v2)
    v2 = &unk_25751AE90;
  v3 = v2[25];
  if (v3)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v4 = atomic_load(&qword_25751A168);
    if (!v4)
      v4 = sub_245CF2238(&off_25751A150);
  }
  if (*(char *)(v4 + 23) < 0)
  {
    if (*(_QWORD *)(v4 + 8))
      goto LABEL_9;
    return "</s>";
  }
  if (!*(_BYTE *)(v4 + 23))
    return "</s>";
LABEL_9:
  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 72);
  if (!v5)
    v5 = &unk_25751AE90;
  v6 = v5[25];
  if (v6)
  {
    result = (char *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_25751A168);
    if (!result)
      result = (char *)sub_245CF2238(&off_25751A150);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

void sub_245CFFC7C(uint64_t a1)
{
  size_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  float *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint64_t ***v20;
  uint64_t **v21;
  unint64_t v22;
  _QWORD *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  int8x8_t prime;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  void *v47;
  uint64_t **v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  size_t v54;
  void *v55;
  unsigned int v56;
  _QWORD *v57;
  char v58;
  size_t v59;
  unint64_t v60;
  char *v61;
  _BYTE *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  const char *v69;
  size_t v70;
  uint64_t v71;
  void *v72;
  std::string *v73;
  __int128 v74;
  const char *v75;
  std::string *v76;
  __int128 v77;
  size_t v78;
  _DWORD *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t **v94;
  _QWORD *v95;
  uint64_t v96;
  void *v97;
  _OWORD *v98;
  uint64_t v99;
  size_t v100;
  float *v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  std::string v105;
  _DWORD *v106;
  uint64_t **v107;
  uint64_t *v108;
  unint64_t v109;
  __int128 v110;
  int64_t v111;

  v2 = a1;
  v102 = (float *)(a1 + 24);
  sub_245D00940((_QWORD *)(a1 + 24));
  v101 = (float *)(v2 + 64);
  sub_245D00940((_QWORD *)(v2 + 64));
  *(_DWORD *)(v2 + 104) = -1;
  v108 = 0;
  v109 = 0;
  v107 = &v108;
  v3 = operator new(0x20uLL);
  *v3 = 0u;
  v3[1] = 0u;
  v4 = *(_QWORD *)(v2 + 8);
  v98 = v3;
  if (*(int *)(v4 + 56) < 1)
    goto LABEL_141;
  v5 = 0;
  v99 = v2;
  while (1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 8 * v5 + 8);
    v7 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
      {
LABEL_132:
        sub_245CF8D8C((uint64_t)&v110, 13, "piece must not be empty.", 0x18uLL);
        sub_245CF8F5C((uint64_t *)(v2 + 112), (_DWORD **)&v110);
        goto LABEL_142;
      }
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_132;
    }
    v8 = *(_DWORD *)(v6 + 60);
    v9 = v8 > 5;
    v10 = (1 << v8) & 0x32;
    v11 = v9 || v10 == 0;
    if (v11)
      v12 = v101;
    else
      v12 = v102;
    v104 = v6;
    v100 = *(unsigned __int8 *)(v7 + 23);
    if ((*(_BYTE *)(v7 + 23) & 0x80) != 0)
    {
      v13 = *(uint64_t **)v7;
      v14 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v13 = (uint64_t *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      v14 = *(unsigned __int8 *)(v7 + 23);
    }
    v15 = sub_245CF49B8(v13, v14);
    v16 = v15;
    v17 = *((_QWORD *)v12 + 1);
    if (v17)
    {
      v103 = v5;
      v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v18.i16[0] = vaddlv_u8(v18);
      v19 = v18.u32[0];
      if (v18.u32[0] > 1uLL)
      {
        v1 = v15;
        if (v15 >= v17)
          v1 = v15 % v17;
      }
      else
      {
        v1 = (v17 - 1) & v15;
      }
      v20 = *(uint64_t ****)(*(_QWORD *)v12 + 8 * v1);
      if (v20)
      {
        v21 = *v20;
        if (*v20)
        {
          while (1)
          {
            v22 = (unint64_t)v21[1];
            if (v22 == v16)
            {
              if (v21[3] == (uint64_t *)v14 && !memcmp(v21[2], v13, v14))
              {
                v58 = v100;
                if ((v100 & 0x80u) == 0)
                  v59 = v100;
                else
                  v59 = *(_QWORD *)(v7 + 8);
                v60 = v59 + 20;
                if (v59 + 20 >= 0x7FFFFFFFFFFFFFF8)
                  sub_245CF238C();
                v3 = v98;
                if (v60 >= 0x17)
                {
                  v66 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v60 | 7) != 0x17)
                    v66 = v60 | 7;
                  v67 = v66 + 1;
                  v61 = (char *)operator new(v66 + 1);
                  *((_QWORD *)&v110 + 1) = v59 + 20;
                  v111 = v67 | 0x8000000000000000;
                  *(_QWORD *)&v110 = v61;
                  v58 = v100;
                }
                else
                {
                  v111 = 0;
                  v110 = 0uLL;
                  HIBYTE(v111) = v59 + 20;
                  if ((v60 & 0x80u) == 0)
                    v61 = (char *)&v110;
                  else
                    v61 = 0;
                  if (!v59)
                  {
LABEL_151:
                    strcpy(&v61[v59], " is already defined.");
                    if (v111 >= 0)
                      v69 = (const char *)&v110;
                    else
                      v69 = (const char *)v110;
                    v70 = strlen(v69);
                    sub_245CF8D8C((uint64_t)&v105, 13, v69, v70);
                    sub_245CF8F5C((uint64_t *)(v99 + 112), &v105);
                    v71 = v105.__r_.__value_.__r.__words[0];
                    v105.__r_.__value_.__r.__words[0] = 0;
                    if (v71)
                      sub_245CF8D4C(v71);
                    if (SHIBYTE(v111) < 0)
                    {
                      v72 = (void *)v110;
                      goto LABEL_171;
                    }
                    goto LABEL_207;
                  }
                }
                if (v58 >= 0)
                  v68 = (uint64_t *)v7;
                else
                  v68 = *(uint64_t **)v7;
                memmove(v61, v68, v59);
                goto LABEL_151;
              }
            }
            else
            {
              if (v19 > 1)
              {
                if (v22 >= v17)
                  v22 %= v17;
              }
              else
              {
                v22 &= v17 - 1;
              }
              if (v22 != v1)
              {
LABEL_33:
                v3 = v98;
                break;
              }
            }
            v21 = (uint64_t **)*v21;
            if (!v21)
              goto LABEL_33;
          }
        }
      }
      v2 = v99;
      v5 = v103;
    }
    v23 = operator new(0x28uLL);
    *v23 = 0;
    v23[1] = v16;
    v23[2] = v13;
    v23[3] = v14;
    *((_DWORD *)v23 + 8) = v5;
    v24 = (float)(unint64_t)(*((_QWORD *)v12 + 3) + 1);
    v25 = v12[8];
    if (!v17 || (float)(v25 * (float)v17) < v24)
    {
      v26 = (v17 & (v17 - 1)) != 0;
      if (v17 < 3)
        v26 = 1;
      v27 = v26 | (2 * v17);
      v28 = vcvtps_u32_f32(v24 / v25);
      if (v27 <= v28)
        prime = (int8x8_t)v28;
      else
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v17 = *((_QWORD *)v12 + 1);
      if (*(_QWORD *)&prime > v17)
        goto LABEL_47;
      if (*(_QWORD *)&prime < v17)
      {
        v36 = vcvtps_u32_f32((float)*((unint64_t *)v12 + 3) / v12[8]);
        if (v17 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
        {
          v36 = std::__next_prime(v36);
        }
        else
        {
          v38 = 1 << -(char)__clz(v36 - 1);
          if (v36 >= 2)
            v36 = v38;
        }
        if (*(_QWORD *)&prime <= v36)
          prime = (int8x8_t)v36;
        if (*(_QWORD *)&prime >= v17)
        {
          v17 = *((_QWORD *)v12 + 1);
        }
        else
        {
          if (prime)
          {
LABEL_47:
            if (*(_QWORD *)&prime >> 61)
              sub_245CF3B8C();
            v30 = operator new(8 * *(_QWORD *)&prime);
            v31 = *(_QWORD **)v12;
            *(_QWORD *)v12 = v30;
            if (v31)
              operator delete(v31);
            v32 = 0;
            *((int8x8_t *)v12 + 1) = prime;
            do
              *(_QWORD *)(*(_QWORD *)v12 + 8 * v32++) = 0;
            while (*(_QWORD *)&prime != v32);
            v33 = (_QWORD *)*((_QWORD *)v12 + 2);
            if (v33)
            {
              v34 = v33[1];
              v35 = (uint8x8_t)vcnt_s8(prime);
              v35.i16[0] = vaddlv_u8(v35);
              if (v35.u32[0] > 1uLL)
              {
                if (v34 >= *(_QWORD *)&prime)
                  v34 %= *(_QWORD *)&prime;
              }
              else
              {
                v34 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)v12 + 8 * v34) = v12 + 4;
              v39 = (_QWORD *)*v33;
              if (*v33)
              {
                do
                {
                  v40 = v39[1];
                  if (v35.u32[0] > 1uLL)
                  {
                    if (v40 >= *(_QWORD *)&prime)
                      v40 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v40 &= *(_QWORD *)&prime - 1;
                  }
                  if (v40 != v34)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)v12 + 8 * v40))
                    {
                      *(_QWORD *)(*(_QWORD *)v12 + 8 * v40) = v33;
                      goto LABEL_72;
                    }
                    *v33 = *v39;
                    *v39 = **(_QWORD **)(*(_QWORD *)v12 + 8 * v40);
                    **(_QWORD **)(*(_QWORD *)v12 + 8 * v40) = v39;
                    v39 = v33;
                  }
                  v40 = v34;
LABEL_72:
                  v33 = v39;
                  v39 = (_QWORD *)*v39;
                  v34 = v40;
                }
                while (v39);
              }
            }
            v17 = (unint64_t)prime;
            goto LABEL_76;
          }
          v57 = *(_QWORD **)v12;
          *(_QWORD *)v12 = 0;
          if (v57)
            operator delete(v57);
          v17 = 0;
          *((_QWORD *)v12 + 1) = 0;
        }
      }
LABEL_76:
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v16 >= v17)
          v1 = v16 % v17;
        else
          v1 = v16;
      }
      else
      {
        v1 = (v17 - 1) & v16;
      }
    }
    v41 = *(_QWORD **)v12;
    v42 = *(_QWORD **)(*(_QWORD *)v12 + 8 * v1);
    if (v42)
    {
      *v23 = *v42;
      v43 = v104;
    }
    else
    {
      *v23 = *((_QWORD *)v12 + 2);
      *((_QWORD *)v12 + 2) = v23;
      v41[v1] = v12 + 4;
      v43 = v104;
      if (!*v23)
        goto LABEL_90;
      v44 = *(_QWORD *)(*v23 + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v44 >= v17)
          v44 %= v17;
      }
      else
      {
        v44 &= v17 - 1;
      }
      v42 = (_QWORD *)(*(_QWORD *)v12 + 8 * v44);
    }
    *v42 = v23;
LABEL_90:
    ++*((_QWORD *)v12 + 3);
    v45 = *(_DWORD *)(v43 + 60);
    if (v45 == 4)
    {
      v46 = *(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v46 + 23) < 0)
      {
        v47 = *(void **)v46;
        v1 = *(_QWORD *)(v46 + 8);
      }
      else
      {
        v1 = *(unsigned __int8 *)(v46 + 23);
        v47 = (void *)(*(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v48 = (uint64_t **)sub_245D01204((uint64_t)&v107, &v110, v47, v1);
      if (!*v48)
      {
        v49 = v48;
        v50 = (uint64_t *)operator new(0x30uLL);
        v50[4] = (uint64_t)v47;
        v50[5] = v1;
        v51 = v110;
        *v50 = 0;
        v50[1] = 0;
        v50[2] = v51;
        *v49 = v50;
        if (*v107)
        {
          v107 = (uint64_t **)*v107;
          v50 = *v49;
        }
        sub_245CF7AD0(v108, v50);
        ++v109;
      }
      v45 = *(_DWORD *)(v43 + 60);
    }
    if (v45 != 6)
    {
      if (v45 == 2)
      {
        if ((*(_DWORD *)(v2 + 104) & 0x80000000) == 0)
        {
          sub_245CF8D8C((uint64_t)&v110, 13, "unk is already defined.", 0x17uLL);
          sub_245CF8F5C((uint64_t *)(v2 + 112), (_DWORD **)&v110);
          goto LABEL_142;
        }
        *(_DWORD *)(v2 + 104) = v5;
      }
      goto LABEL_111;
    }
    v52 = *(_BYTE **)(*(_QWORD *)(v2 + 8) + 72);
    if (!v52)
      v52 = &unk_25751AE90;
    if (!v52[240])
      break;
    v53 = *(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v53 + 23) < 0)
    {
      v55 = *(void **)v53;
      v54 = *(_QWORD *)(v53 + 8);
    }
    else
    {
      v54 = *(unsigned __int8 *)(v53 + 23);
      v55 = (void *)(*(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFFFFELL);
    }
    v56 = sub_245D009A4(v55, v54);
    if ((v56 & 0x80000000) != 0)
    {
      std::operator+<char>();
      v76 = std::string::append(&v105, " is invalid.");
      v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v111 = v76->__r_.__value_.__r.__words[2];
      v110 = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      if (v111 >= 0)
        v75 = (const char *)&v110;
      else
        v75 = (const char *)v110;
      goto LABEL_165;
    }
    *(_QWORD *)((char *)v3 + (((unint64_t)v56 >> 3) & 0x1FFFFFF8)) |= 1 << v56;
LABEL_111:
    ++v5;
    v4 = *(_QWORD *)(v2 + 8);
    if (v5 >= *(int *)(v4 + 56))
    {
      if (*(_DWORD *)(v2 + 104) != -1)
      {
        v62 = *(_BYTE **)(v4 + 72);
        if (!v62)
          v62 = &unk_25751AE90;
        if (!v62[240])
          goto LABEL_175;
        v63 = -256;
        v64 = v3;
        while (*v64 == -1)
        {
          ++v64;
          v63 += 64;
          if (!v63)
          {
            v64 = v3 + 2;
            goto LABEL_173;
          }
        }
        LODWORD(v63) = __clz(__rbit64(~*v64));
LABEL_173:
        if (v64 == (_QWORD *)(v3 + 2) && !(_DWORD)v63)
        {
LABEL_175:
          v80 = (uint64_t *)operator new();
          *v80 = 0;
          if (v109)
          {
            v110 = 0uLL;
            v111 = 0;
            sub_245D023D4((void **)&v110, v109);
            v81 = (uint64_t *)v107;
            if (v107 != &v108)
            {
              v82 = (uint64_t *)*((_QWORD *)&v110 + 1);
              do
              {
                v83 = v81[4];
                if ((unint64_t)v82 >= v111)
                {
                  v84 = (uint64_t *)v110;
                  v85 = (uint64_t)((uint64_t)v82 - v110) >> 3;
                  v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 61)
                    sub_245CF3B34();
                  v87 = v111 - v110;
                  if ((v111 - (uint64_t)v110) >> 2 > v86)
                    v86 = v87 >> 2;
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
                    v88 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v88 = v86;
                  if (v88)
                    v88 = (unint64_t)sub_245CF7A9C(v88);
                  else
                    v89 = 0;
                  v90 = (uint64_t *)(v88 + 8 * v85);
                  *v90 = v83;
                  v91 = v90 + 1;
                  if (v82 != v84)
                  {
                    do
                    {
                      v92 = *--v82;
                      *--v90 = v92;
                    }
                    while (v82 != v84);
                    v82 = (uint64_t *)v110;
                  }
                  *(_QWORD *)&v110 = v90;
                  *((_QWORD *)&v110 + 1) = v91;
                  v111 = v88 + 8 * v89;
                  if (v82)
                    operator delete(v82);
                  v82 = v91;
                }
                else
                {
                  *v82++ = v83;
                }
                *((_QWORD *)&v110 + 1) = v82;
                v93 = (uint64_t *)v81[1];
                if (v93)
                {
                  do
                  {
                    v94 = (uint64_t **)v93;
                    v93 = (uint64_t *)*v93;
                  }
                  while (v93);
                }
                else
                {
                  do
                  {
                    v94 = (uint64_t **)v81[2];
                    v11 = *v94 == v81;
                    v81 = (uint64_t *)v94;
                  }
                  while (!v11);
                }
                v81 = (uint64_t *)v94;
              }
              while (v94 != &v108);
            }
            v95 = (_QWORD *)operator new();
            *v95 = &off_2516F7A28;
            v95[1] = 0;
            v95[2] = 0;
            v95[3] = 0;
            v96 = *v80;
            *v80 = (uint64_t)v95;
            if (v96)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
              v95 = (_QWORD *)*v80;
            }
            v97 = (void *)v110;
            sub_245CF519C(v95, (uint64_t)(*((_QWORD *)&v110 + 1) - v110) >> 3, v110, 0);
            if (v97)
              operator delete(v97);
            v3 = v98;
          }
          v105.__r_.__value_.__r.__words[0] = 0;
          sub_245CF4F3C((uint64_t **)(v2 + 16), v80);
          sub_245CF4F3C((uint64_t **)&v105, 0);
          goto LABEL_207;
        }
        sub_245CF8F5C((uint64_t *)(v2 + 112), (_DWORD **)&v110);
LABEL_142:
        v65 = v110;
        *(_QWORD *)&v110 = 0;
        if (v65)
          sub_245CF8D4C(v65);
        goto LABEL_207;
      }
LABEL_141:
      sub_245CF8D8C((uint64_t)&v110, 13, "unk is not defined.", 0x13uLL);
      sub_245CF8F5C((uint64_t *)(v2 + 112), (_DWORD **)&v110);
      goto LABEL_142;
    }
  }
  std::operator+<char>();
  v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v111 = v73->__r_.__value_.__r.__words[2];
  v110 = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  if (v111 >= 0)
    v75 = (const char *)&v110;
  else
    v75 = (const char *)v110;
LABEL_165:
  v78 = strlen(v75);
  sub_245CF8D8C((uint64_t)&v106, 13, v75, v78);
  sub_245CF8F5C((uint64_t *)(v2 + 112), &v106);
  v79 = v106;
  v106 = 0;
  if (v79)
    sub_245CF8D4C((uint64_t)v79);
  if (SHIBYTE(v111) < 0)
    operator delete((void *)v110);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
  {
    v72 = (void *)v105.__r_.__value_.__r.__words[0];
LABEL_171:
    operator delete(v72);
  }
LABEL_207:
  operator delete(v3);
  sub_245CF9290(v108);
}

void sub_245D007F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,_QWORD *a26)
{
  uint64_t v26;
  uint64_t v28;

  v28 = *(_QWORD *)(v26 - 112);
  *(_QWORD *)(v26 - 112) = 0;
  if (v28)
    sub_245CF8D4C(v28);
  operator delete(__p);
  sub_245CF9290(a26);
  _Unwind_Resume(a1);
}

_QWORD *sub_245D00940(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t sub_245D009A4(void *__src, size_t __len)
{
  unsigned __int8 v4;
  _QWORD *v5;
  _QWORD *p_dst;
  size_t v7;
  size_t v8;
  int v9;
  void *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int8x8_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 *i;
  unint64_t v21;
  _QWORD *__dst;
  size_t v24;
  int64_t v25;

  v4 = atomic_load((unsigned __int8 *)&qword_25751ABF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25751ABF8))
  {
    qword_25751ABF0 = sub_245D00BB4();
    __cxa_guard_release(&qword_25751ABF8);
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_245CF238C();
  v5 = (_QWORD *)qword_25751ABF0;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = operator new(v7 + 1);
    v24 = __len;
    v25 = v8 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v25) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_10;
  }
  memmove(p_dst, __src, __len);
LABEL_10:
  *((_BYTE *)p_dst + __len) = 0;
  v9 = SHIBYTE(v25);
  v10 = __dst;
  if (v25 >= 0)
    v11 = (uint64_t *)&__dst;
  else
    v11 = __dst;
  if (v25 >= 0)
    v12 = HIBYTE(v25);
  else
    v12 = v24;
  v13 = sub_245CF49B8(v11, v12);
  v14 = (int8x8_t)v5[1];
  if (!*(_QWORD *)&v14)
    goto LABEL_33;
  v15 = v13;
  v16 = (uint8x8_t)vcnt_s8(v14);
  v16.i16[0] = vaddlv_u8(v16);
  v17 = v16.u32[0];
  if (v16.u32[0] > 1uLL)
  {
    v18 = v13;
    if (v13 >= *(_QWORD *)&v14)
      v18 = v13 % *(_QWORD *)&v14;
  }
  else
  {
    v18 = (*(_QWORD *)&v14 - 1) & v13;
  }
  v19 = *(unsigned __int8 ***)(*v5 + 8 * v18);
  if (v19)
  {
    for (i = *v19; i; i = *(unsigned __int8 **)i)
    {
      v21 = *((_QWORD *)i + 1);
      if (v15 == v21)
      {
        if (sub_245D01070(i + 16, (unsigned __int8 *)&__dst))
          break;
      }
      else
      {
        if (v17 > 1)
        {
          if (v21 >= *(_QWORD *)&v14)
            v21 %= *(_QWORD *)&v14;
        }
        else
        {
          v21 &= *(_QWORD *)&v14 - 1;
        }
        if (v21 != v18)
          goto LABEL_33;
      }
    }
  }
  else
  {
LABEL_33:
    i = 0;
  }
  if (v9 < 0)
  {
    operator delete(v10);
    if (i)
      return i[40];
  }
  else if (i)
  {
    return i[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_245D00B84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25751ABF8);
  _Unwind_Resume(a1);
}

uint64_t sub_245D00BB4()
{
  unint64_t v0;
  uint64_t v1;
  int v2;
  _QWORD *v3;
  char v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  void *__p[2];
  uint64_t v38;
  unsigned __int8 v39;

  v1 = operator new();
  v2 = 0;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  v3 = (_QWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 32) = 1065353216;
  do
  {
    v39 = v2;
    sub_245D01110((uint64_t)__p, &v39);
    v4 = HIBYTE(v38);
    if (v38 >= 0)
      v5 = (uint64_t *)__p;
    else
      v5 = (uint64_t *)__p[0];
    if (v38 >= 0)
      v6 = HIBYTE(v38);
    else
      v6 = (unint64_t)__p[1];
    v7 = sub_245CF49B8(v5, v6);
    v8 = v7;
    v9 = *(_QWORD *)(v1 + 8);
    if (v9)
    {
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = v10.u32[0];
      if (v10.u32[0] > 1uLL)
      {
        v0 = v7;
        if (v7 >= v9)
          v0 = v7 % v9;
      }
      else
      {
        v0 = (v9 - 1) & v7;
      }
      v12 = *(void ***)(*(_QWORD *)v1 + 8 * v0);
      if (v12)
      {
        for (i = *v12; i; i = *(void **)i)
        {
          v14 = *((_QWORD *)i + 1);
          if (v14 == v8)
          {
            if (sub_245D01070((unsigned __int8 *)i + 16, (unsigned __int8 *)__p))
              goto LABEL_80;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v0)
              break;
          }
        }
      }
    }
    i = operator new(0x30uLL);
    *(_QWORD *)i = 0;
    *((_QWORD *)i + 1) = v8;
    *((_OWORD *)i + 1) = *(_OWORD *)__p;
    *((_QWORD *)i + 4) = v38;
    __p[0] = 0;
    __p[1] = 0;
    v38 = 0;
    *((_BYTE *)i + 40) = 0;
    v15 = (float)(unint64_t)(*(_QWORD *)(v1 + 24) + 1);
    v16 = *(float *)(v1 + 32);
    if (!v9 || (float)(v16 * (float)v9) < v15)
    {
      v17 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v17 = 1;
      v18 = v17 | (2 * v9);
      v19 = vcvtps_u32_f32(v15 / v16);
      if (v18 <= v19)
        prime = (int8x8_t)v19;
      else
        prime = (int8x8_t)v18;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v9 = *(_QWORD *)(v1 + 8);
      }
      if (*(_QWORD *)&prime > v9)
        goto LABEL_36;
      if (*(_QWORD *)&prime < v9)
      {
        v27 = vcvtps_u32_f32((float)*(unint64_t *)(v1 + 24) / *(float *)(v1 + 32));
        if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
        {
          v27 = std::__next_prime(v27);
        }
        else
        {
          v29 = 1 << -(char)__clz(v27 - 1);
          if (v27 >= 2)
            v27 = v29;
        }
        if (*(_QWORD *)&prime <= v27)
          prime = (int8x8_t)v27;
        if (*(_QWORD *)&prime >= v9)
        {
          v9 = *(_QWORD *)(v1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_36:
            if (*(_QWORD *)&prime >> 61)
              sub_245CF3B8C();
            v21 = operator new(8 * *(_QWORD *)&prime);
            v22 = *(_QWORD **)v1;
            *(_QWORD *)v1 = v21;
            if (v22)
              operator delete(v22);
            v23 = 0;
            *(int8x8_t *)(v1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)v1 + 8 * v23++) = 0;
            while (*(_QWORD *)&prime != v23);
            v24 = (_QWORD *)*v3;
            if (*v3)
            {
              v25 = v24[1];
              v26 = (uint8x8_t)vcnt_s8(prime);
              v26.i16[0] = vaddlv_u8(v26);
              if (v26.u32[0] > 1uLL)
              {
                if (v25 >= *(_QWORD *)&prime)
                  v25 %= *(_QWORD *)&prime;
              }
              else
              {
                v25 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)v1 + 8 * v25) = v3;
              v30 = (_QWORD *)*v24;
              if (*v24)
              {
                do
                {
                  v31 = v30[1];
                  if (v26.u32[0] > 1uLL)
                  {
                    if (v31 >= *(_QWORD *)&prime)
                      v31 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v31 &= *(_QWORD *)&prime - 1;
                  }
                  if (v31 != v25)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)v1 + 8 * v31))
                    {
                      *(_QWORD *)(*(_QWORD *)v1 + 8 * v31) = v24;
                      goto LABEL_61;
                    }
                    *v24 = *v30;
                    *v30 = **(_QWORD **)(*(_QWORD *)v1 + 8 * v31);
                    **(_QWORD **)(*(_QWORD *)v1 + 8 * v31) = v30;
                    v30 = v24;
                  }
                  v31 = v25;
LABEL_61:
                  v24 = v30;
                  v30 = (_QWORD *)*v30;
                  v25 = v31;
                }
                while (v30);
              }
            }
            v9 = (unint64_t)prime;
            goto LABEL_65;
          }
          v35 = *(_QWORD **)v1;
          *(_QWORD *)v1 = 0;
          if (v35)
            operator delete(v35);
          v9 = 0;
          *(_QWORD *)(v1 + 8) = 0;
        }
      }
LABEL_65:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9)
          v0 = v8 % v9;
        else
          v0 = v8;
      }
      else
      {
        v0 = (v9 - 1) & v8;
      }
    }
    v32 = *(_QWORD **)v1;
    v33 = *(_QWORD **)(*(_QWORD *)v1 + 8 * v0);
    if (v33)
    {
      *(_QWORD *)i = *v33;
LABEL_78:
      *v33 = i;
      goto LABEL_79;
    }
    *(_QWORD *)i = *v3;
    *v3 = i;
    v32[v0] = v3;
    if (*(_QWORD *)i)
    {
      v34 = *(_QWORD *)(*(_QWORD *)i + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v34 >= v9)
          v34 %= v9;
      }
      else
      {
        v34 &= v9 - 1;
      }
      v33 = (_QWORD *)(*(_QWORD *)v1 + 8 * v34);
      goto LABEL_78;
    }
LABEL_79:
    ++*(_QWORD *)(v1 + 24);
    v4 = HIBYTE(v38);
LABEL_80:
    *((_BYTE *)i + 40) = v2;
    if (v4 < 0)
      operator delete(__p[0]);
    ++v2;
  }
  while (v2 != 256);
  return v1;
}

void sub_245D0103C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void **v14;

  sub_245D011B8(1, v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_245D01070(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_245D01110(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;
  char *v6;

  v4 = snprintf(0, 0, "<0x%02X>", *a2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  std::string::resize((std::string *)a1, v4, 0);
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  return snprintf(v6, v5 + 1, "<0x%02X>", *a2);
}

void sub_245D0119C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_245D011B8(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *sub_245D01204(uint64_t a1, _QWORD *a2, void *a3, size_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v9;
  void *v10;
  size_t v11;

  v6 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    do
    {
      while (1)
      {
        v9 = v5;
        v10 = (void *)v5[4];
        v11 = v5[5];
        if (!sub_245D012B0(a3, a4, v10, v11))
          break;
        v5 = (_QWORD *)*v9;
        v6 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (!sub_245D012B0(v10, v11, a3, a4))
        break;
      v6 = v9 + 1;
      v5 = (_QWORD *)v9[1];
    }
    while (v5);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v9;
  return v6;
}

uint64_t sub_245D012B0(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;
  unsigned int v9;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (a2 < a4)
    v9 = -1;
  else
    v9 = 1;
  if (a2 == a4)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

_QWORD *sub_245D01314(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_2516F6EB0;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    sub_245CF8D4C(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_245D01368(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_2516F6EB0;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    sub_245CF8D4C(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x249546A74);
}

uint64_t sub_245D013CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t *sub_245D013D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_245CF8EAC(a2, (_DWORD **)(a1 + 48));
}

void sub_245D013E0(_QWORD *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v6;
  int v10;
  char **v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _BYTE *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  std::string::size_type i;
  char **v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  const char *v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type size;
  BOOL v62;
  std::string::size_type v63;
  std::string::size_type v64;
  char **v65;
  char *v66;
  char *v67;
  unint64_t v68;
  std::string::size_type v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char **v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  std::string::size_type v97;
  _QWORD *v98;
  _QWORD *v99;
  char *v100;
  unint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  void *__p;
  char v106;
  uint64_t v107;
  _QWORD v108[5];
  const std::string::value_type *v109;
  std::string::size_type v110;
  int v111;
  char **v112;
  std::string *v113;

  v6 = a3;
  v112 = a5;
  v113 = (std::string *)a4;
  a5[1] = *a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (!a3)
    {
LABEL_10:
      *a6 = 0;
      return;
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
    if (!a3)
      goto LABEL_10;
  }
  (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  if (*a6)
    return;
  *a6 = 0;
  v10 = *(unsigned __int8 *)(a1[3] + 73);
  v111 = 0;
  if (v10)
  {
    while (1)
    {
      sub_245D01CBC((size_t)&v102, a1, a2, v6);
      if (v103 != 1 || *v102 != 32)
        break;
      a2 += (int)v104;
      v111 += v104;
      v6 -= (int)v104;
      if (!v6)
        goto LABEL_10;
    }
  }
  v99 = a6;
  std::string::reserve(v113, 3 * v6);
  v11 = v112;
  if (3 * v6 > (v11[2] - *v11) >> 3)
  {
    if ((3 * v6) >> 61)
      goto LABEL_136;
    v12 = v112[1] - *v112;
    v13 = (char *)sub_245CF7A9C(3 * v6);
    v14 = &v13[v12 & 0xFFFFFFFFFFFFFFF8];
    v16 = &v13[8 * v15];
    v17 = *v11;
    v18 = v11[1];
    v19 = v14;
    if (v18 != *v11)
    {
      v19 = v14;
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v19 - 1) = v20;
        v19 -= 8;
      }
      while (v18 != v17);
    }
    *v11 = v19;
    v11[1] = v14;
    v11[2] = v16;
    if (v17)
      operator delete(v17);
  }
  v109 = (const std::string::value_type *)&unk_245D22386;
  v110 = 3;
  v108[0] = a1;
  v108[1] = &v111;
  v108[2] = &v113;
  v108[3] = &v112;
  v108[4] = &v109;
  v21 = a1[3];
  if (!*((_BYTE *)a1 + 40) && *(_BYTE *)(v21 + 72))
  {
    sub_245D01E9C((uint64_t)v108);
    v21 = a1[3];
  }
  v22 = *(_BYTE *)(v21 + 73) != 0;
  do
  {
    sub_245D01CBC((size_t)&v102, a1, a2, v6);
    v23 = v102;
    v24 = v103;
    if (v22)
    {
      if (!v103)
      {
LABEL_26:
        v25 = 1;
        goto LABEL_71;
      }
      while (*v23 == 32)
      {
        ++v23;
        if (!--v24)
          goto LABEL_26;
      }
    }
    else if (!v103)
    {
      v25 = 0;
      goto LABEL_71;
    }
    v100 = a2;
    v101 = v6;
    v26 = 0;
    do
    {
      v27 = v23[v26];
      if (*(_BYTE *)(a1[3] + 74) && v27 == 32)
      {
        std::string::append(v113, v109, v110);
        if (v110)
        {
          for (i = 0; i < v110; ++i)
          {
            v29 = v112;
            v30 = v111;
            v32 = v112[1];
            v31 = (unint64_t)v112[2];
            if ((unint64_t)v32 >= v31)
            {
              v34 = *v112;
              v35 = (v32 - *v112) >> 3;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 61)
                goto LABEL_136;
              v37 = v31 - (_QWORD)v34;
              if (v37 >> 2 > v36)
                v36 = v37 >> 2;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
                v38 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v38 = (unint64_t)sub_245CF7A9C(v38);
                v34 = *v29;
                v32 = v29[1];
              }
              else
              {
                v39 = 0;
              }
              v40 = (char *)(v38 + 8 * v35);
              *(_QWORD *)v40 = v30;
              v33 = v40 + 8;
              while (v32 != v34)
              {
                v41 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v40 - 1) = v41;
                v40 -= 8;
              }
              *v29 = v40;
              v29[1] = v33;
              v29[2] = (char *)(v38 + 8 * v39);
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_QWORD *)v32 = v111;
              v33 = v32 + 8;
            }
            v29[1] = v33;
          }
        }
      }
      else
      {
        std::string::push_back(v113, v27);
        v42 = v112;
        v43 = v111;
        v45 = v112[1];
        v44 = (unint64_t)v112[2];
        if ((unint64_t)v45 >= v44)
        {
          v47 = *v112;
          v48 = (v45 - *v112) >> 3;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 61)
            goto LABEL_136;
          v50 = v44 - (_QWORD)v47;
          if (v50 >> 2 > v49)
            v49 = v50 >> 2;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v51 = (unint64_t)sub_245CF7A9C(v51);
            v47 = *v42;
            v45 = v42[1];
          }
          else
          {
            v52 = 0;
          }
          v53 = (char *)(v51 + 8 * v48);
          *(_QWORD *)v53 = v43;
          v46 = v53 + 8;
          while (v45 != v47)
          {
            v54 = *((_QWORD *)v45 - 1);
            v45 -= 8;
            *((_QWORD *)v53 - 1) = v54;
            v53 -= 8;
          }
          *v42 = v53;
          v42[1] = v46;
          v42[2] = (char *)(v51 + 8 * v52);
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_QWORD *)v45 = v111;
          v46 = v45 + 8;
        }
        v42[1] = v46;
      }
      ++v26;
    }
    while (v26 != v24);
    v25 = v23[v24 - 1] == 32;
    a2 = v100;
    v6 = v101;
LABEL_71:
    v111 += v104;
    a2 += (int)v104;
    v55 = a1[3];
    if (*(_BYTE *)(v55 + 73))
      v22 = v25;
    else
      v22 = 0;
    v6 -= (int)v104;
  }
  while (v6);
  if (*(_BYTE *)(v55 + 73))
  {
    if (*(_BYTE *)(v55 + 74))
      v56 = v110;
    else
      v56 = 1;
    if (*(_BYTE *)(v55 + 74))
      v57 = v109;
    else
      v57 = " ";
    while (1)
    {
      v58 = v113;
      LODWORD(v59) = HIBYTE(v113->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v113->__r_.__value_.__r.__words[2]) < 0)
      {
        v60 = (std::string *)v113->__r_.__value_.__r.__words[0];
        size = v113->__r_.__value_.__l.__size_;
        if (!v56)
          goto LABEL_89;
      }
      else
      {
        v60 = v113;
        size = HIBYTE(v113->__r_.__value_.__r.__words[2]);
        if (!v56)
          goto LABEL_89;
      }
      v62 = size >= v56;
      v63 = size - v56;
      if (!v62 || memcmp((char *)v60 + v63, v57, v56))
        break;
LABEL_89:
      if ((v59 & 0x80) != 0)
        v59 = v58->__r_.__value_.__l.__size_;
      if ((_DWORD)v59 - (_DWORD)v56 < 0)
      {
        LODWORD(v102) = 13;
        v93 = (_QWORD *)sub_245CF4F98((uint64_t)&v103);
        sub_245CF35A0(v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/normalizer.cc", 120);
        sub_245CF35A0(&v103, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_245CF35A0(&v103, (uint64_t)") [", 3);
        sub_245CF35A0(&v103, (uint64_t)"(length) >= (0)", 15);
        sub_245CF35A0(&v103, (uint64_t)"] ", 2);
        sub_245CF5084((uint64_t)v99, (int *)&v102);
        goto LABEL_132;
      }
      v64 = (v59 - v56);
      v111 = *(_QWORD *)&(*v112)[8 * v64];
      std::string::resize(v58, v64, 0);
      v65 = v112;
      v66 = *v112;
      v67 = v112[1];
      v68 = (v67 - *v112) >> 3;
      if (v64 <= v68)
      {
        if (v64 < v68)
          v112[1] = &v66[8 * v64];
      }
      else
      {
        v69 = v64 - v68;
        v70 = v112[2];
        if (v64 - v68 <= (v70 - v67) >> 3)
        {
          bzero(v112[1], 8 * v69);
          v65[1] = &v67[8 * v69];
        }
        else
        {
          v71 = v70 - v66;
          v72 = v71 >> 2;
          if (v71 >> 2 <= v64)
            v72 = v64;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
            v73 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v73 = v72;
          v74 = (char *)sub_245CF7A9C(v73);
          v76 = v75;
          v77 = *v65;
          v78 = v65[1];
          v79 = &v74[8 * v68];
          bzero(v79, 8 * v69);
          v80 = v79;
          while (v78 != v77)
          {
            v81 = *((_QWORD *)v78 - 1);
            v78 -= 8;
            *((_QWORD *)v80 - 1) = v81;
            v80 -= 8;
          }
          *v65 = v80;
          v65[1] = &v79[8 * v69];
          v65[2] = &v74[8 * v76];
          if (v77)
            operator delete(v77);
        }
      }
    }
  }
  if (*((_BYTE *)a1 + 40) && *(_BYTE *)(a1[3] + 72))
    sub_245D01E9C((uint64_t)v108);
  v82 = v112;
  v83 = v111;
  v85 = v112[1];
  v84 = (unint64_t)v112[2];
  if ((unint64_t)v85 >= v84)
  {
    v87 = *v112;
    v88 = (v85 - *v112) >> 3;
    v89 = v88 + 1;
    if (!((unint64_t)(v88 + 1) >> 61))
    {
      v90 = v84 - (_QWORD)v87;
      if (v90 >> 2 > v89)
        v89 = v90 >> 2;
      v62 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8;
      v91 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v62)
        v91 = v89;
      if (v91)
      {
        v91 = (unint64_t)sub_245CF7A9C(v91);
        v87 = *v82;
        v85 = v82[1];
      }
      else
      {
        v92 = 0;
      }
      v94 = (char *)(v91 + 8 * v88);
      v95 = v91 + 8 * v92;
      *(_QWORD *)v94 = v83;
      v86 = v94 + 8;
      while (v85 != v87)
      {
        v96 = *((_QWORD *)v85 - 1);
        v85 -= 8;
        *((_QWORD *)v94 - 1) = v96;
        v94 -= 8;
      }
      *v82 = v94;
      v82[1] = v86;
      v82[2] = (char *)v95;
      if (v87)
        operator delete(v87);
      goto LABEL_126;
    }
LABEL_136:
    sub_245CF3B34();
  }
  *(_QWORD *)v85 = v111;
  v86 = v85 + 8;
LABEL_126:
  v82[1] = v86;
  if (SHIBYTE(v113->__r_.__value_.__r.__words[2]) < 0)
    v97 = v113->__r_.__value_.__l.__size_;
  else
    v97 = HIBYTE(v113->__r_.__value_.__r.__words[2]);
  if ((v112[1] - *v112) >> 3 == v97 + 1)
  {
    *v99 = 0;
  }
  else
  {
    LODWORD(v102) = 13;
    v98 = (_QWORD *)sub_245CF4F98((uint64_t)&v103);
    sub_245CF35A0(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/normalizer.cc", 120);
    sub_245CF35A0(&v103, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_245CF35A0(&v103, (uint64_t)") [", 3);
    sub_245CF35A0(&v103, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
    sub_245CF35A0(&v103, (uint64_t)"] ", 2);
    sub_245CF5084((uint64_t)v99, (int *)&v102);
LABEL_132:
    v103 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v103 + *(_QWORD *)(v103 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v104 = MEMORY[0x24BEDB848] + 16;
    if (v106 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249546A20](&v107);
  }
}

void sub_245D01C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_245CF5114((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_245D01C24(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_245D01C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t sub_245D01CBC(size_t result, _QWORD *a2, char *a3, unint64_t a4)
{
  size_t v4;
  char *v6;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[64];

  v4 = result;
  v24[63] = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v6 = a3;
    v8 = (uint64_t *)a2[4];
    if (v8 && (LOBYTE(v23) = 0, result = sub_245D020A8(*v8, a3, a4, (BOOL *)&v23), (_BYTE)v23))
    {
      v9 = (int)result;
      if (a4 < (int)result)
        v9 = a4;
      *(_QWORD *)v4 = v6;
      *(_QWORD *)(v4 + 8) = v9;
      *(_DWORD *)(v4 + 16) = result;
    }
    else
    {
      v10 = a2[1];
      if (!v10)
        goto LABEL_24;
      v11 = 0;
      v12 = 0;
      v13 = *(_DWORD **)(v10 + 16);
      v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
      do
      {
        v15 = v6[v11];
        v16 = v14 ^ v15;
        v17 = v13[v16];
        if ((v17 & 0x800000FF) != (_DWORD)v15)
          break;
        v14 = v16 ^ (v17 >> 10 << ((v17 >> 6) & 8));
        if ((v17 & 0x100) != 0)
        {
          if (v12 <= 0x1F)
          {
            v18 = &v24[2 * v12 - 1];
            *(_DWORD *)v18 = v13[v14] & 0x7FFFFFFF;
            v18[1] = v11 + 1;
          }
          ++v12;
        }
        ++v11;
      }
      while (a4 != v11);
      if (!v12)
        goto LABEL_24;
      v19 = 0;
      v20 = 0;
      v21 = v24;
      do
      {
        if (!v19 || *v21 > v19)
        {
          v20 = *((_DWORD *)v21 - 2);
          v19 = *v21;
        }
        v21 += 2;
        --v12;
      }
      while (v12);
      if (v19)
      {
        v6 = (char *)(a2[2] + v20);
        result = strlen(v6);
      }
      else
      {
LABEL_24:
        v23 = 0;
        v22 = sub_245D21084((unsigned __int8 *)v6, (uint64_t)&v6[a4], &v23) != 65533 || v23 == 3;
        if (v22)
          LODWORD(v19) = v23;
        else
          LODWORD(v19) = 1;
        if (v22)
          result = (int)v23;
        else
          result = 3;
        if (!v22)
          v6 = (char *)&unk_245D2238A;
      }
      *(_QWORD *)v4 = v6;
      *(_QWORD *)(v4 + 8) = result;
      *(_DWORD *)(v4 + 16) = v19;
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

void sub_245D01E9C(uint64_t a1)
{
  int v2;
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 74);
  v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v4 = 0;
      do
      {
        v5 = **(_QWORD **)(a1 + 24);
        v6 = **(int **)(a1 + 8);
        v8 = *(_QWORD **)(v5 + 8);
        v7 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v8 >= v7)
        {
          v10 = *(_QWORD **)v5;
          v11 = ((uint64_t)v8 - *(_QWORD *)v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_39;
          v13 = v7 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v14 = (unint64_t)sub_245CF7A9C(v14);
            v10 = *(_QWORD **)v5;
            v8 = *(_QWORD **)(v5 + 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = (_QWORD *)(v14 + 8 * v11);
          *v16 = v6;
          v9 = v16 + 1;
          while (v8 != v10)
          {
            v17 = *--v8;
            *--v16 = v17;
          }
          *(_QWORD *)v5 = v16;
          *(_QWORD *)(v5 + 8) = v9;
          *(_QWORD *)(v5 + 16) = v14 + 8 * v15;
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v8 = v6;
          v9 = v8 + 1;
        }
        *(_QWORD *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    v18 = **(_QWORD **)(a1 + 24);
    v19 = **(int **)(a1 + 8);
    v21 = *(_QWORD **)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v21 >= v20)
    {
      v23 = *(_QWORD **)v18;
      v24 = ((uint64_t)v21 - *(_QWORD *)v18) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
LABEL_39:
        sub_245CF3B34();
      v26 = v20 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8;
      v28 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v27)
        v28 = v25;
      if (v28)
      {
        v28 = (unint64_t)sub_245CF7A9C(v28);
        v23 = *(_QWORD **)v18;
        v21 = *(_QWORD **)(v18 + 8);
      }
      else
      {
        v29 = 0;
      }
      v30 = (_QWORD *)(v28 + 8 * v24);
      v31 = v28 + 8 * v29;
      *v30 = v19;
      v22 = v30 + 1;
      while (v21 != v23)
      {
        v32 = *--v21;
        *--v30 = v32;
      }
      *(_QWORD *)v18 = v30;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v31;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v21 = v19;
      v22 = v21 + 1;
    }
    *(_QWORD *)(v18 + 8) = v22;
  }
}

uint64_t sub_245D020A8(uint64_t a1, _BYTE *a2, uint64_t a3, BOOL *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t result;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  _QWORD v23[128];

  v23[127] = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (a4)
      *a4 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD **)(a1 + 16);
  v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v5 ^ v8;
      v10 = v4[v9];
      if ((v10 & 0x800000FF) != (_DWORD)v8)
        break;
      v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          v11 = &v22[16 * v7];
          *(_DWORD *)v11 = v4[v5] & 0x7FFFFFFF;
          *((_QWORD *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v7 = 0;
      v13 = 1;
      do
      {
        v14 = v5 ^ v12;
        v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12)
          break;
        v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            v16 = &v22[16 * v7];
            *(_DWORD *)v16 = v4[v5] & 0x7FFFFFFF;
            *((_QWORD *)v16 + 1) = v13;
          }
          ++v7;
        }
        v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4)
    *a4 = (int)v7 > 0;
  if (!(_DWORD)v7)
  {
LABEL_33:
    v21 = asc_245D25FED[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3)
      return a3;
    else
      return v21;
  }
  if ((int)v7 < 1)
    return 0;
  LODWORD(result) = 0;
  v7 = v7;
  v18 = (int *)v23;
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    if ((int)result <= v20)
      result = v19;
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

void sub_245D02270(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned int *v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  v2 = *(_QWORD *)(a1[3] + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v2 + 23) < 0)
  {
    v4 = *(unsigned int **)v2;
    v3 = *(_QWORD *)(v2 + 8);
    if (!v3)
      return;
  }
  else
  {
    v3 = *(unsigned __int8 *)(v2 + 23);
    v4 = (unsigned int *)(*(_QWORD *)(a1[3] + 56) & 0xFFFFFFFFFFFFFFFELL);
    if (!*(_BYTE *)(v2 + 23))
      return;
  }
  if (v3 < 5 || (v5 = *v4, v3 <= v5))
  {
    sub_245CF8D8C((uint64_t)&v13, 13, "Blob for normalization rule is broken.", 0x26uLL);
    v6 = 0;
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v6 = v4 + 1;
    v7 = (char *)v4 + v5 + 4;
    v13 = 0;
    v8 = v5 >> 2;
  }
  sub_245CF8F5C(a1 + 6, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    sub_245CF8D4C((uint64_t)v9);
  if (!a1[6])
  {
    v10 = (_QWORD *)operator new();
    *v10 = &off_2516F7A28;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = 0;
    v11 = a1[1];
    a1[1] = v10;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v10 = (_QWORD *)a1[1];
    }
    v10[1] = 0;
    v10[2] = 0;
    v12 = v10[3];
    if (v12)
    {
      MEMORY[0x249546A50](v12, 0x1000C8052888210);
      v10[3] = 0;
    }
    v10[1] = v8;
    v10[2] = v6;
    a1[2] = v7;
  }
}

void sub_245D023B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_245CF8D4C(a10);
  _Unwind_Resume(exception_object);
}

void sub_245D023D4(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_245CF3B34();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)sub_245CF7A9C(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

_OWORD *sub_245D02468(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  int v9;
  void *__src;

  v2 = *(_OWORD **)(a1 + 16);
  if (v2)
  {
    if (v2 == (_OWORD *)(a1 + 40))
    {
      *v2 = *(_OWORD *)*(_QWORD *)(a1 + 8);
      if (*(int *)(a1 + 84) < 1)
      {
LABEL_14:
        if (*(_QWORD *)(a1 + 72) == 2)
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 8) - (_QWORD)v2;
        v3 = a1 + 56;
        *(_QWORD *)(a1 + 8) = a1 + 56;
        *(_QWORD *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 24) = 0;
      }
      else
      {
        __src = 0;
        while (1)
        {
          if (!(*(unsigned int (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &__src, a1 + 24))
          {
            *(_DWORD *)(a1 + 84) = 0;
            goto LABEL_14;
          }
          v4 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)(a1 + 84) -= v4;
          if ((int)v4 >= 17)
            break;
          if ((int)v4 >= 1)
          {
            memcpy((void *)(a1 + 56), __src, v4);
            v5 = (_QWORD *)(a1 + 72);
            v6 = *(_QWORD *)(a1 + 72);
            v3 = (uint64_t)v2 + v4;
            *(_QWORD *)(a1 + 8) = (char *)v2 + v4;
            *(_QWORD *)(a1 + 16) = v2;
            if (v6 < 2)
              goto LABEL_19;
            goto LABEL_18;
          }
        }
        v5 = (_QWORD *)(a1 + 72);
        v7 = *(_QWORD *)(a1 + 72);
        v3 = a1 + 56;
        v8 = __src;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)__src;
        *(_QWORD *)(a1 + 8) = a1 + 56;
        *(_QWORD *)(a1 + 16) = v8;
        if (v7 <= 1)
          goto LABEL_19;
LABEL_18:
        *v5 = 1;
      }
    }
    else
    {
      v3 = (uint64_t)v2 + *(int *)(a1 + 24) - 16;
      *(_QWORD *)(a1 + 8) = v3;
      *(_QWORD *)(a1 + 16) = a1 + 40;
      if (*(_QWORD *)(a1 + 72) == 1)
        *(_QWORD *)(a1 + 72) = 2;
    }
LABEL_19:
    v9 = *(_DWORD *)(a1 + 28) + (_DWORD)v2 - v3;
    *(_DWORD *)(a1 + 28) = v9;
    *(_QWORD *)a1 = v3 + (v9 & (v9 >> 31));
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 80) = 1;
  }
  return v2;
}

char *sub_245D025E4(uint64_t a1, int a2, int a3)
{
  int v3;
  int v5;
  _OWORD *v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  size_t v23;
  char *result;
  void *__src;

  v3 = *(_DWORD *)(a1 + 28);
  if (v3 < a2)
    return 0;
  v5 = a2;
  v7 = (_OWORD *)(a1 + 40);
  v8 = a1 + 24;
  v9 = (char *)(a1 + 56);
  v10 = *(_OWORD **)(a1 + 16);
  while (v10)
  {
    if (v10 == v7)
    {
      *v7 = *(_OWORD *)*(_QWORD *)(a1 + 8);
      if (*(int *)(a1 + 84) < 1)
      {
LABEL_44:
        if (*(_QWORD *)(a1 + 72) == 2)
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 8) - (_QWORD)v7;
        v12 = 0;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a1 + 16) = 0;
        v11 = (uint64_t)v9;
        *(_DWORD *)(a1 + 24) = 0;
      }
      else
      {
        if ((a3 & 0x80000000) == 0 && v5 <= 15)
        {
          v13 = (char *)v7 + v5;
          v14 = a3;
          v15 = v13;
          while (2)
          {
            v16 = *v15++;
            v17 = v16;
            if (v16 < 0)
            {
              v17 = v17 + (*v15 << 7) - 128;
              if (*v15 < 0)
              {
                v18 = 14;
                v19 = 2;
                while (1)
                {
                  v17 += (v13[v19] - 1) << v18;
                  if ((v13[v19] & 0x80000000) == 0)
                    break;
                  ++v19;
                  v18 += 7;
                  if (v19 == 5)
                    goto LABEL_37;
                }
                v15 = &v13[v19 + 1];
              }
              else
              {
                v15 = v13 + 2;
              }
            }
            if (v15 <= v9)
            {
              if (!v17)
                goto LABEL_44;
              switch(v17 & 7)
              {
                case 0:
                  __src = 0;
                  v15 = (char *)sub_245D028DC(v15, &__src);
                  if (!v15)
                    break;
                  goto LABEL_36;
                case 1:
                  v15 += 8;
                  goto LABEL_36;
                case 2:
                  v20 = *v15;
                  if (*v15 < 0)
                  {
                    v21 = sub_245D0295C((uint64_t)v15, v20);
                    if (!v21)
                      break;
                  }
                  else
                  {
                    v21 = (uint64_t)(v15 + 1);
                  }
                  if ((uint64_t)&v9[-v21] < v20)
                    break;
                  v15 = (char *)(v21 + v20);
LABEL_36:
                  v13 = v15;
                  if (v15 >= v9)
                    break;
                  continue;
                case 3:
                  ++v14;
                  goto LABEL_36;
                case 4:
                  v22 = __OFSUB__(v14--, 1);
                  if (v14 < 0 != v22)
                    goto LABEL_44;
                  goto LABEL_36;
                case 5:
                  v15 += 4;
                  goto LABEL_36;
                default:
                  goto LABEL_37;
              }
            }
            break;
          }
        }
LABEL_37:
        __src = 0;
        while (1)
        {
          if (!(*(unsigned int (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &__src, v8))
          {
            *(_DWORD *)(a1 + 84) = 0;
            goto LABEL_44;
          }
          v23 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)(a1 + 84) -= v23;
          if ((int)v23 >= 17)
            break;
          if ((int)v23 >= 1)
          {
            memcpy(v9, __src, v23);
            v11 = (uint64_t)v7 + v23;
            *(_QWORD *)(a1 + 8) = (char *)v7 + v23;
            *(_QWORD *)(a1 + 16) = v7;
            v12 = v7;
            if (*(_QWORD *)(a1 + 72) < 2uLL)
              goto LABEL_49;
            goto LABEL_48;
          }
        }
        v12 = __src;
        *(_OWORD *)v9 = *(_OWORD *)__src;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a1 + 16) = v12;
        v11 = (uint64_t)v9;
        if (*(_QWORD *)(a1 + 72) <= 1uLL)
          goto LABEL_49;
LABEL_48:
        *(_QWORD *)(a1 + 72) = 1;
      }
LABEL_49:
      v3 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v11 = (uint64_t)v10 + *(int *)(a1 + 24) - 16;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v7;
      if (*(_QWORD *)(a1 + 72) == 1)
        *(_QWORD *)(a1 + 72) = 2;
      v12 = v7;
    }
    v3 += (_DWORD)v10 - v11;
    *(_DWORD *)(a1 + 28) = v3;
    result = (char *)v10 + v5;
    v10 = v12;
    v5 = (_DWORD)result - v11;
    if ((int)result - (int)v11 < 0)
    {
      *(_QWORD *)a1 = v11 + (v3 & (v3 >> 31));
      return result;
    }
  }
  if (v5)
    return 0;
  result = *(char **)(a1 + 8);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 80) = 1;
  return result;
}

uint64_t sub_245D028DC(char *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *a1;
  if (*a1 < 0)
  {
    v4 = a1[1];
    v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      v6 = 2;
      v7 = 14;
      while (1)
      {
        v5 += (a1[v6] - 1) << v7;
        if ((a1[v6] & 0x80000000) == 0)
          break;
        ++v6;
        v7 += 7;
        if (v6 == 10)
        {
          result = 0;
          v5 = 0;
          goto LABEL_10;
        }
      }
      result = (uint64_t)&a1[v6 + 1];
LABEL_10:
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (uint64_t)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (uint64_t)(a1 + 1);
  }
  return result;
}

uint64_t sub_245D0295C(uint64_t a1, int a2)
{
  char v2;
  uint64_t i;
  unsigned int v4;
  uint64_t v5;

  v2 = 7;
  for (i = 1; i != 4; ++i)
  {
    a2 += (*(unsigned __int8 *)(a1 + i) - 1) << v2;
    if ((*(char *)(a1 + i) & 0x80000000) == 0)
      return a1 + i + 1;
    v2 += 7;
  }
  v4 = *(unsigned __int8 *)(a1 + 4);
  v5 = a1 + 5;
  if (a2 + (v4 << 28) - 0x10000000 > 0x7FFFFFEF)
    v5 = 0;
  if (v4 <= 7)
    return v5;
  else
    return 0;
}

void sub_245D029D4(int a1, unint64_t a2, std::string *this)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = (8 * a1);
  if (v5 < 0x80)
  {
    LOBYTE(v6) = 8 * a1;
  }
  else
  {
    do
    {
      std::string::push_back(this, v5 | 0x80);
      v6 = v5 >> 7;
      v7 = v5 >> 14;
      v5 >>= 7;
    }
    while (v7);
  }
  std::string::push_back(this, v6);
  if (a2 < 0x80)
  {
    LOBYTE(v8) = a2;
  }
  else
  {
    do
    {
      std::string::push_back(this, a2 | 0x80);
      v8 = a2 >> 7;
      v9 = a2 >> 14;
      a2 >>= 7;
    }
    while (v9);
  }
  std::string::push_back(this, v8);
}

uint64_t sub_245D02A6C(uint64_t a1, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 14;
  v3 = 2;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(a1 + v3) - 1) << v2;
    if ((*(char *)(a1 + v3) & 0x80000000) == 0)
      break;
    ++v3;
    v2 += 7;
    if (v3 == 5)
    {
      while (*(char *)(a1 + v3) < 0)
      {
        v4 = 0;
        if (++v3 == 10)
          return v4;
      }
      return a1 + v3 + 1;
    }
  }
  return a1 + v3 + 1;
}

const std::string::value_type *sub_245D02AD4(std::string *this, char *a2, uint64_t a3)
{
  int v5;
  std::string::value_type *v6;
  const std::string::value_type *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (const std::string::value_type *)sub_245D0295C((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = (std::string::value_type *)result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_245CFAF2C(a3, v6, v5, this);
}

uint64_t sub_245D02B38(unint64_t a1, std::string **a2, char *a3, int32x2_t *a4)
{
  unint64_t v4;
  int v5;
  const std::string::value_type *v7;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  std::string *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  std::string *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  std::string *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  std::string *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::string *v48;
  int32x2_t v49;
  std::string::size_type size;
  __int32 v51;
  std::string *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  int v60;
  _OWORD *v61;
  std::string::value_type __s[8];
  const char *v63;
  int v64;
  std::string __p;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = a1 >> 3;
  if ((a1 >> 3))
  {
    v5 = a1;
    v7 = a3;
    switch(a1 & 7)
    {
      case 0uLL:
        *(_QWORD *)__s = 0;
        v7 = (const std::string::value_type *)sub_245D028DC(a3, __s);
        if (!v7)
          return (uint64_t)v7;
        v9 = *a2;
        if (!*a2)
          return (uint64_t)v7;
        v10 = *(_QWORD *)__s;
        v11 = v5 & 0xFFFFFFF8;
        if (v4 < 0x10)
        {
          LOBYTE(v12) = v11;
        }
        else
        {
          do
          {
            std::string::push_back(v9, v11 | 0x80);
            v12 = v11 >> 7;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
        }
        std::string::push_back(v9, v12);
        v54 = *a2;
        if (v10 < 0x80)
        {
          LOBYTE(v55) = v10;
        }
        else
        {
          do
          {
            std::string::push_back(v54, v10 | 0x80);
            v55 = v10 >> 7;
            v58 = v10 >> 14;
            v10 >>= 7;
          }
          while (v58);
        }
        goto LABEL_86;
      case 1uLL:
        v7 = a3 + 8;
        v14 = *(_QWORD *)a3;
        v15 = *a2;
        if (*a2)
        {
          v16 = (8 * (_DWORD)v4) | 1u;
          if (v16 < 0x80)
          {
            LOBYTE(v17) = (8 * v4) | 1;
          }
          else
          {
            do
            {
              std::string::push_back(v15, v16 | 0x80);
              v17 = v16 >> 7;
              v18 = v16 >> 14;
              v16 >>= 7;
            }
            while (v18);
          }
          std::string::push_back(v15, v17);
          *(_QWORD *)__s = v14;
          std::string::append(*a2, __s, 8uLL);
        }
        return (uint64_t)v7;
      case 2uLL:
        v19 = *a3;
        if (*a3 < 0)
        {
          v7 = (const std::string::value_type *)sub_245D0295C((uint64_t)a3, *a3);
          if (!v7)
            return (uint64_t)v7;
          v19 = v30;
        }
        else
        {
          v7 = a3 + 1;
        }
        v31 = *a2;
        if (*a2)
        {
          v32 = (8 * (_DWORD)v4) | 2u;
          if (v32 < 0x80)
          {
            LOBYTE(v33) = v32;
          }
          else
          {
            do
            {
              std::string::push_back(v31, v32 | 0x80);
              v33 = v32 >> 7;
              v34 = v32 >> 14;
              v32 >>= 7;
            }
            while (v34);
          }
          std::string::push_back(v31, v33);
          v43 = v19;
          v44 = *a2;
          LOBYTE(v45) = v19;
          if (v19 >= 0x80)
          {
            v46 = v19;
            do
            {
              std::string::push_back(v44, v46 | 0x80);
              v45 = v46 >> 7;
              v47 = v46 >> 14;
              v46 >>= 7;
            }
            while (v47);
          }
          std::string::push_back(v44, v45);
          v48 = *a2;
          v49 = a4[1];
          if (*(_QWORD *)&v49 - (_QWORD)v7 + 16 < v19)
          {
            if (*(_QWORD *)&v49 - (_QWORD)v7 + a4[3].i32[1] >= v19)
            {
              if (SHIBYTE(v48->__r_.__value_.__r.__words[2]) < 0)
                size = v48->__r_.__value_.__l.__size_;
              else
                size = HIBYTE(v48->__r_.__value_.__r.__words[2]);
              if (v19 >= 50000000)
                v59 = 50000000;
              else
                v59 = v19;
              std::string::reserve(v48, size + v59);
              v49 = a4[1];
            }
            v60 = v49.i32[0] - (_DWORD)v7 + 16;
            while (a4[2])
            {
              std::string::append(v48, v7, v60);
              if (a4[3].i32[1] < 17)
                break;
              v61 = sub_245D02468((uint64_t)a4);
              if (!v61)
                break;
              v19 -= v60;
              v7 = (const std::string::value_type *)(v61 + 1);
              v60 = a4[1].i32[0] - (_DWORD)v61;
              if (v19 <= v60)
              {
                std::string::append(v48, v7, v19);
                v7 += v19;
                return (uint64_t)v7;
              }
            }
            return 0;
          }
          std::string::append(v48, v7, v19);
LABEL_89:
          if (v7)
            v7 += v43;
          return (uint64_t)v7;
        }
        v35 = *(_QWORD *)&a4[1] - (_QWORD)v7 + 16;
        if (v35 >= v19)
        {
          v43 = v19;
          goto LABEL_89;
        }
        while (a4[2])
        {
          if (a4[3].i32[1] < 17)
            break;
          v36 = sub_245D02468((uint64_t)a4);
          if (!v36)
            break;
          v19 -= v35;
          LODWORD(v35) = a4[1].i32[0] - (_DWORD)v36;
          if (v19 <= (int)v35)
            return (uint64_t)v36 + v19 + 16;
        }
        break;
      case 3uLL:
        v20 = *a2;
        v21 = 8 * v4;
        if (*a2)
        {
          v22 = v21 | 3u;
          if (v22 < 0x80)
          {
            LOBYTE(v23) = v21 | 3;
          }
          else
          {
            do
            {
              std::string::push_back(v20, v22 | 0x80);
              v23 = v22 >> 7;
              v24 = v22 >> 14;
              v22 >>= 7;
            }
            while (v24);
          }
          std::string::push_back(v20, v23);
        }
        v37 = a4[11].i32[0];
        v38 = __OFSUB__(v37--, 1);
        a4[11].i32[0] = v37;
        if (v37 < 0 != v38)
          return 0;
        ++a4[11].i32[1];
        *(_QWORD *)__s = v7;
        while (2)
        {
          if ((sub_245CFB088((uint64_t)a4, (char **)__s, a4[11].i32[1]) & 1) != 0)
          {
            v7 = *(const std::string::value_type **)__s;
          }
          else
          {
            v7 = (const std::string::value_type *)(*(_QWORD *)__s + 1);
            v39 = **(_BYTE **)__s;
            if ((char)**(_BYTE **)__s < 0)
            {
              v39 = v39 + (*(unsigned __int8 *)v7 << 7) - 128;
              if (*v7 < 0)
              {
                v40 = 14;
                v41 = 2;
                while (1)
                {
                  v39 += (*(unsigned __int8 *)(*(_QWORD *)__s + v41) - 1) << v40;
                  if ((*(char *)(*(_QWORD *)__s + v41) & 0x80000000) == 0)
                    break;
                  ++v41;
                  v40 += 7;
                  if (v41 == 5)
                    goto LABEL_56;
                }
                v7 = (const std::string::value_type *)(*(_QWORD *)__s + v41 + 1);
              }
              else
              {
                v7 = (const std::string::value_type *)(*(_QWORD *)__s + 2);
              }
            }
            if (v39)
              v42 = (v39 & 7) == 4;
            else
              v42 = 1;
            if (!v42)
            {
              *(_QWORD *)__s = sub_245D02B38(v39, a2, v7, a4);
              if (!*(_QWORD *)__s)
              {
LABEL_56:
                v7 = 0;
                break;
              }
              continue;
            }
            a4[10].i32[0] = v39 - 1;
          }
          break;
        }
        a4[11] = vadd_s32(a4[11], (int32x2_t)0xFFFFFFFF00000001);
        v51 = a4[10].i32[0];
        a4[10].i32[0] = 0;
        if (v51 != (v21 | 3) || v7 == 0)
          return 0;
        v54 = *a2;
        if (v54)
        {
          v55 = v21 | 4u;
          if (v55 < 0x80)
          {
LABEL_86:
            LOBYTE(v57) = v55;
          }
          else
          {
            do
            {
              v56 = v55;
              std::string::push_back(v54, v55 | 0x80);
              v55 = v56 >> 7;
            }
            while (v56 >> 14);
            v57 = (int)((_DWORD)v56 << 17) >> 24;
          }
          std::string::push_back(v54, v57);
        }
        return (uint64_t)v7;
      case 4uLL:
        *(_DWORD *)__s = 3;
        v63 = "/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/thi"
              "rd_party/protobuf-lite/google/protobuf/parse_context.h";
        v64 = 758;
        memset(&__p, 0, sizeof(__p));
        std::string::append(&__p, "Can't happen");
        sub_245CF8BAC((uint64_t)__s);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return (uint64_t)v7;
      case 5uLL:
        v7 = a3 + 4;
        v25 = *(_DWORD *)a3;
        v26 = *a2;
        if (*a2)
        {
          v27 = (8 * (_DWORD)v4) | 5u;
          if (v27 < 0x80)
          {
            LOBYTE(v28) = (8 * v4) | 5;
          }
          else
          {
            do
            {
              std::string::push_back(v26, v27 | 0x80);
              v28 = v27 >> 7;
              v29 = v27 >> 14;
              v27 >>= 7;
            }
            while (v29);
          }
          std::string::push_back(v26, v28);
          *(_DWORD *)__s = v25;
          std::string::append(*a2, __s, 4uLL);
        }
        return (uint64_t)v7;
      default:
        return 0;
    }
  }
  return 0;
}

void sub_245D03128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_245D03150(unsigned int *a1, int a2)
{
  int v2;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  size_t v11;

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v4 = *((_QWORD *)a1 + 1);
    v5 = 0;
    if (!v2)
    {
      if (a2 < 4)
        goto LABEL_6;
LABEL_10:
      v7 = 2 * v2;
      if (v7 <= a2)
        v6 = a2;
      else
        v6 = v7;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = *((_QWORD *)a1 + 1);
    v5 = (_QWORD *)(v4 - 8);
  }
  v4 = *(_QWORD *)(v4 - 8);
  if (a2 >= 4)
  {
    if (v2 > 0x3FFFFFFF)
    {
      v6 = 0x7FFFFFFF;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
LABEL_6:
  v6 = 4;
LABEL_13:
  if (v4)
  {
    v8 = (v6 + 15) & 0x1FFFFFFF8;
    if ((*(_BYTE *)(v4 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 32), MEMORY[0x24BEDB778], v8);
    v9 = sub_245CF21A0((unint64_t *)v4, v8);
  }
  else
  {
    v9 = operator new(v6 + 8);
  }
  *v9 = v4;
  v10 = v9 + 1;
  a1[1] = v6;
  *((_QWORD *)a1 + 1) = v10;
  v11 = *a1;
  if ((int)v11 >= 1)
    memcpy(v10, v5 + 1, v11);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_245D0327C(unsigned int *a1, int a2)
{
  int v2;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v4 = *((_QWORD *)a1 + 1);
    v5 = 0;
    if (!v2)
    {
      if (a2 < 4)
        goto LABEL_6;
LABEL_10:
      v7 = 2 * v2;
      if (v7 <= a2)
        v6 = a2;
      else
        v6 = v7;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = *((_QWORD *)a1 + 1);
    v5 = (_QWORD *)(v4 - 8);
  }
  v4 = *(_QWORD *)(v4 - 8);
  if (a2 >= 4)
  {
    if (v2 > 0x3FFFFFFF)
    {
      v6 = 0x7FFFFFFF;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
LABEL_6:
  v6 = 4;
LABEL_13:
  v8 = 4 * v6;
  if (v4)
  {
    v9 = (v8 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v4 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 32), MEMORY[0x24BEDB778], v9);
    v10 = sub_245CF21A0((unint64_t *)v4, v9);
  }
  else
  {
    v10 = operator new(v8 + 8);
  }
  *v10 = v4;
  v11 = v10 + 1;
  a1[1] = v6;
  *((_QWORD *)a1 + 1) = v11;
  v12 = *a1;
  if ((int)v12 >= 1)
    memcpy(v11, v5 + 1, 4 * v12);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_245D033BC(unsigned int *a1, int a2)
{
  int v2;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v4 = *((_QWORD *)a1 + 1);
    v5 = 0;
    if (!v2)
    {
      if (a2 < 4)
        goto LABEL_6;
LABEL_10:
      v7 = 2 * v2;
      if (v7 <= a2)
        v6 = a2;
      else
        v6 = v7;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = *((_QWORD *)a1 + 1);
    v5 = (_QWORD *)(v4 - 8);
  }
  v4 = *(_QWORD *)(v4 - 8);
  if (a2 >= 4)
  {
    if (v2 > 0x3FFFFFFF)
    {
      v6 = 0x7FFFFFFF;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
LABEL_6:
  v6 = 4;
LABEL_13:
  v8 = 8 * v6;
  if (v4)
  {
    v9 = (v8 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v4 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 32), MEMORY[0x24BEDB778], v9);
    v10 = sub_245CF21A0((unint64_t *)v4, v9);
  }
  else
  {
    v10 = operator new(v8 + 8);
  }
  *v10 = v4;
  v11 = v10 + 1;
  a1[1] = v6;
  *((_QWORD *)a1 + 1) = v11;
  v12 = *a1;
  if ((int)v12 >= 1)
    memcpy(v11, v5 + 1, 8 * v12);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

uint64_t sub_245D034FC(uint64_t *a1, int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v2 = *((_DWORD *)a1 + 2);
  v3 = *((_DWORD *)a1 + 3);
  v4 = v2 + a2;
  v5 = (unsigned int *)a1[2];
  if (v3 < v2 + a2)
  {
    v7 = *a1;
    v8 = 2 * v3;
    if (2 * v3 <= v4)
      v8 = v4;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 8 * v9;
    if (v7)
    {
      v11 = (v10 + 15) & 0x7FFFFFFF8;
      if ((*(_BYTE *)(v7 + 24) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 32), MEMORY[0x24BEDB778], v11);
      v12 = (unsigned int *)sub_245CF21A0((unint64_t *)v7, v11);
    }
    else
    {
      v12 = (unsigned int *)operator new(v10 + 8);
    }
    a1[2] = (uint64_t)v12;
    *((_DWORD *)a1 + 3) = v9;
    if (v5 && (v13 = *v5, (int)v13 >= 1))
    {
      memcpy(v12 + 2, v5 + 2, 8 * v13);
      v12 = (unsigned int *)a1[2];
      *v12 = *v5;
      if (!v7)
        goto LABEL_17;
    }
    else
    {
      *v12 = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        v12 = (unsigned int *)a1[2];
      }
    }
    v2 = *((_DWORD *)a1 + 2);
    v5 = v12;
  }
  return (uint64_t)&v5[2 * v2 + 2];
}

_QWORD *sub_245D0360C(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x249546A74](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
  return a1;
}

void sub_245D0369C()
{
  sub_245D04FD0((uint64_t)&unk_25751ACA8, 0);
  sub_245CFF754((uint64_t)sub_245CFEF80, (uint64_t)&unk_25751ACA8);
}

void sub_245D036D4()
{
  sub_245D04408((uint64_t)&unk_25751AC50, 0);
  sub_245CFF754((uint64_t)sub_245CFEF80, (uint64_t)&unk_25751AC50);
}

void sub_245D0370C()
{
  sub_245D03744((uint64_t)&unk_25751AC00, 0);
  sub_245CFF754((uint64_t)sub_245CFEF80, (uint64_t)&unk_25751AC00);
}

uint64_t sub_245D03744(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516F75C8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_254419BB8))
    sub_245CFF030(dword_254419BB8);
  *(_QWORD *)(a1 + 48) = &qword_25751AE78;
  *(_QWORD *)(a1 + 56) = &qword_25751AE78;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_245D037B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_245CF902C(v1);
  _Unwind_Resume(a1);
}

void sub_245D037CC(uint64_t *a1)
{
  sub_245D04300(a1);
  JUMPOUT(0x249546A74);
}

_QWORD *sub_245D037F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_245CF7F30(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sub_245D03800()
{
  return sub_245D0424C(0);
}

uint64_t sub_245D03808(uint64_t a1, uint64_t a2)
{
  return sub_245D0424C(a2);
}

uint64_t *sub_245D03810(uint64_t a1)
{
  uint64_t *result;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = sub_245CF9D90((uint64_t *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v3 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v5 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x1C) != 0)
  {
    *(_DWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(_BYTE **)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_245D038DC(uint64_t a1)
{
  return sub_245CFACA8(a1 + 16);
}

uint64_t sub_245D038E8(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = sub_245CFDC6C(a1 + 16);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x1F) == 0)
    goto LABEL_8;
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0)
        goto LABEL_5;
LABEL_16:
      result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  v8 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0)
    goto LABEL_16;
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_17:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0)
LABEL_7:
    result += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    result += v12;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

uint64_t sub_245D03A58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

char *sub_245D03A60(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t **v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  std::string *v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  int v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  std::string *v31;
  char *v32;
  int v33;
  char *v34;
  int v35;
  char *v36;
  int v37;
  char *v39;
  std::string *v40;

  v5 = 0;
  v39 = a2;
  v6 = (uint64_t *)(a1 + 8);
  v7 = (uint64_t **)(a1 + 56);
  v8 = (uint64_t **)(a1 + 48);
  v9 = a1 + 16;
  while ((sub_245CFB088((uint64_t)a3, &v39, a3[11].i32[1]) & 1) == 0)
  {
    v10 = v39 + 1;
    v11 = *v39;
    if (*v39 < 0)
    {
      v11 = v11 + (*v10 << 7) - 128;
      if (*v10 < 0)
      {
        v12 = 14;
        v13 = 2;
        while (1)
        {
          v11 += (v39[v13] - 1) << v12;
          if ((v39[v13] & 0x80000000) == 0)
            break;
          ++v13;
          v12 += 7;
          if (v13 == 5)
            goto LABEL_57;
        }
        v10 = &v39[v13 + 1];
      }
      else
      {
        v10 = v39 + 2;
      }
    }
    v39 = v10;
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_38;
        *(_DWORD *)(a1 + 40) |= 1u;
        v14 = *(_QWORD *)(a1 + 8);
        v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL);
        if ((v14 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v16 = v8;
        goto LABEL_25;
      case 2u:
        if (v11 != 16)
          goto LABEL_38;
        v5 |= 4u;
        v17 = v10 + 1;
        v18 = *v10;
        if ((*v10 & 0x80000000) == 0)
          goto LABEL_20;
        v19 = *v17;
        v18 = v18 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          v32 = (char *)sub_245D02A6C((uint64_t)v10, v18);
          v39 = v32;
          *(_DWORD *)(a1 + 64) = v33;
          if (!v32)
            goto LABEL_57;
        }
        else
        {
          v17 = v10 + 2;
LABEL_20:
          v39 = v17;
          *(_DWORD *)(a1 + 64) = v18;
        }
        continue;
      case 3u:
        if (v11 != 26)
          goto LABEL_38;
        *(_DWORD *)(a1 + 40) |= 2u;
        v20 = *(_QWORD *)(a1 + 8);
        v15 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFFELL);
        if ((v20 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v16 = v7;
LABEL_25:
        v21 = (std::string *)sub_245CF26F8(v16, (uint64_t)v15);
        v22 = (char *)sub_245D02AD4(v21, v10, (uint64_t)a3);
        goto LABEL_26;
      case 4u:
        if (v11 != 32)
          goto LABEL_38;
        v5 |= 8u;
        v23 = v10 + 1;
        v24 = *v10;
        if ((*v10 & 0x80000000) == 0)
          goto LABEL_32;
        v25 = *v23;
        v24 = v24 + (v25 << 7) - 128;
        if (v25 < 0)
        {
          v34 = (char *)sub_245D02A6C((uint64_t)v10, v24);
          v39 = v34;
          *(_DWORD *)(a1 + 68) = v35;
          if (!v34)
            goto LABEL_57;
        }
        else
        {
          v23 = v10 + 2;
LABEL_32:
          v39 = v23;
          *(_DWORD *)(a1 + 68) = v24;
        }
        continue;
      case 5u:
        if (v11 != 40)
          goto LABEL_38;
        v5 |= 0x10u;
        v26 = v10 + 1;
        v27 = *v10;
        if ((*v10 & 0x80000000) == 0)
          goto LABEL_37;
        v28 = *v26;
        v27 = v27 + (v28 << 7) - 128;
        if (v28 < 0)
        {
          v36 = (char *)sub_245D02A6C((uint64_t)v10, v27);
          v39 = v36;
          *(_DWORD *)(a1 + 72) = v37;
          if (!v36)
            goto LABEL_57;
        }
        else
        {
          v26 = v10 + 2;
LABEL_37:
          v39 = v26;
          *(_DWORD *)(a1 + 72) = v27;
        }
        continue;
      default:
LABEL_38:
        if (v11)
          v29 = (v11 & 7) == 4;
        else
          v29 = 1;
        if (v29)
        {
          a3[10].i32[0] = v11 - 1;
          goto LABEL_55;
        }
        v30 = v11;
        if (v11 < 0x640)
        {
          if ((*v6 & 1) != 0)
            v31 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v31 = (std::string *)sub_245CFAE88(v6);
          v40 = v31;
          v22 = (char *)sub_245D02B38(v30, &v40, v10, a3);
        }
        else
        {
          v22 = (char *)sub_245CFAE20(v9, v11, v10, (uint64_t)&unk_25751AC00, v6, a3);
        }
LABEL_26:
        v39 = v22;
        if (!v22)
        {
LABEL_57:
          v10 = 0;
          goto LABEL_55;
        }
        break;
    }
  }
  v10 = v39;
LABEL_55:
  *(_DWORD *)(a1 + 40) |= v5;
  return v10;
}

char *sub_245D03DA0(uint64_t a1, char *a2, _QWORD *a3)
{
  char *v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0)
      goto LABEL_3;
LABEL_11:
    if (*a3 <= (unint64_t)v4)
      v4 = (char *)sub_245CF8520((uint64_t)a3, (int)v4);
    v8 = *(_DWORD *)(a1 + 64);
    *v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v15 = v4 + 2;
        do
        {
          v16 = v15;
          *v15++ = v10 | 0x80;
          v17 = v10 >> 7;
          v18 = v10 >> 14;
          v10 >>= 7;
        }
        while (v18);
        v4 = v16 + 2;
        *v15 = v17;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0)
        goto LABEL_27;
    }
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
  v4 = sub_245D0404C(a3, 1u, *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_3:
  if ((v6 & 2) == 0)
    goto LABEL_4;
LABEL_27:
  v4 = sub_245D0404C(a3, 3u, *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
    goto LABEL_6;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4)
    v4 = (char *)sub_245CF8520((uint64_t)a3, (int)v4);
  v19 = *(_DWORD *)(a1 + 68);
  *v4 = 32;
  if (v19 > 0x7F)
  {
    v4[1] = v19 | 0x80;
    v20 = v19 >> 7;
    if (v19 >> 14)
    {
      v21 = v4 + 2;
      do
      {
        v22 = v21;
        *v21++ = v20 | 0x80;
        v23 = v20 >> 7;
        v24 = v20 >> 14;
        v20 >>= 7;
      }
      while (v24);
      v4 = v22 + 2;
      *v21 = v23;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
    else
    {
      v4[2] = v20;
      v4 += 3;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
  }
  else
  {
    v4[1] = v19;
    v4 += 2;
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
  }
LABEL_6:
  if (*a3 <= (unint64_t)v4)
    v4 = (char *)sub_245CF8520((uint64_t)a3, (int)v4);
  v7 = *(_DWORD *)(a1 + 72);
  *v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v11 = v4 + 2;
      do
      {
        v12 = v11;
        *v11++ = v9 | 0x80;
        v13 = v9 >> 7;
        v14 = v9 >> 14;
        v9 >>= 7;
      }
      while (v14);
      v4 = v12 + 2;
      *v11 = v13;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  v25 = sub_245CFB0F8(a1 + 16, v4, a3);
  v26 = v25;
  v27 = *(_QWORD *)(a1 + 8);
  if ((v27 & 1) == 0)
    return v26;
  v29 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 31) < 0)
  {
    v30 = *(void **)(v29 + 8);
    v31 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v30 = (void *)(v29 + 8);
    LODWORD(v31) = *(unsigned __int8 *)(v29 + 31);
  }
  if (*a3 - (_QWORD)v25 >= (int)v31)
  {
    v32 = (int)v31;
    memcpy(v25, v30, (int)v31);
    v26 += v32;
    return v26;
  }
  return (char *)sub_245CF8630(a3, (char *)v30, v31, v25);
}

char *sub_245D0404C(_QWORD *a1, unsigned int a2, uint64_t a3, _BYTE *a4)
{
  int64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4 > 127)
      return sub_245CF86CC((uint64_t)a1, a2, (char *)a3, a4);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a3 + 23);
  }
  v5 = 1;
  if (a2 >= 0x10)
    v5 = 2;
  if ((uint64_t)(*a1 + ~(unint64_t)&a4[v5] + 16) < v4)
    return sub_245CF86CC((uint64_t)a1, a2, (char *)a3, a4);
  v6 = (8 * a2) | 2;
  if (v6 >= 0x80)
  {
    LOBYTE(v6) = (8 * a2) | 0x82;
    a4[1] = a2 >> 4;
    v7 = 2;
  }
  else
  {
    v7 = 1;
  }
  *a4 = v6;
  a4[v7] = v4;
  v8 = (uint64_t)&a4[v7 + 1];
  if (*(char *)(a3 + 23) >= 0)
    v9 = (const void *)a3;
  else
    v9 = *(const void **)a3;
  memcpy(&a4[v7 + 1], v9, v4);
  return (char *)(v8 + v4);
}

void sub_245D04108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::string *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  int v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  uint64_t v17;
  _QWORD *v18;

  sub_245CF9E2C(a1 + 16, a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & 1) != 0)
      v8 = (std::string *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (std::string *)sub_245CFAE88((uint64_t *)(a1 + 8));
    v9 = *(char *)(v5 + 31);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)v6;
    else
      v10 = *(const std::string::value_type **)(v5 + 8);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v5 + 31);
    else
      v11 = *(_QWORD *)(v5 + 16);
    std::string::append(v8, v10, v11);
  }
  v12 = *(_DWORD *)(a2 + 40);
  if ((v12 & 0x1F) != 0)
  {
    if ((v12 & 1) != 0)
    {
      v13 = (__int128 *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      if ((v14 & 1) != 0)
        v15 = (_QWORD *)*v15;
      sub_245CF2414((uint64_t *)(a1 + 48), (uint64_t)&qword_25751AE78, v13, (uint64_t)v15);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 4) == 0)
          goto LABEL_15;
        goto LABEL_26;
      }
    }
    else if ((v12 & 2) == 0)
    {
      goto LABEL_14;
    }
    v16 = (__int128 *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    v17 = *(_QWORD *)(a1 + 8);
    v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)*v18;
    sub_245CF2414((uint64_t *)(a1 + 56), (uint64_t)&qword_25751AE78, v16, (uint64_t)v18);
    if ((v12 & 4) == 0)
    {
LABEL_15:
      if ((v12 & 8) == 0)
        goto LABEL_16;
      goto LABEL_27;
    }
LABEL_26:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v12 & 8) == 0)
    {
LABEL_16:
      if ((v12 & 0x10) == 0)
      {
LABEL_18:
        *(_DWORD *)(a1 + 40) |= v12;
        return;
      }
LABEL_17:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_18;
    }
LABEL_27:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v12 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
}

uint64_t sub_245D0424C(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_2516F6B20, 80);
    v2 = (uint64_t)sub_245CF21A0((unint64_t *)a1, 0x50uLL);
    sub_245D03744(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_245D03744(v2, 0);
  }
  return v2;
}

void sub_245D042DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t *sub_245D04300(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[6];
  if ((uint64_t *)v2 != &qword_25751AE78)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x249546A74](v2, 0x1012C40EC159624);
  }
  v3 = a1[7];
  if ((uint64_t *)v3 != &qword_25751AE78)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    MEMORY[0x249546A74](v3, 0x1012C40EC159624);
  }
  sub_245D043A8(a1[1]);
  sub_245CF902C((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_245D043A8(uint64_t result)
{
  unint64_t v1;

  if ((result & 1) != 0)
  {
    v1 = result & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)(result & 0xFFFFFFFFFFFFFFFELL) && v1 != 0)
    {
      if (*(char *)(v1 + 31) < 0)
        operator delete(*(void **)(v1 + 8));
      JUMPOUT(0x249546A74);
    }
  }
  return result;
}

uint64_t sub_245D04408(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = &off_2516F7148;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  *(_QWORD *)(a1 + 72) = &qword_25751AE78;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_245D04488(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_245D044A4(v2);
  sub_245CF902C(v1);
  _Unwind_Resume(a1);
}

void sub_245D044A4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = (uint64_t **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_245D04300(*v3);
          MEMORY[0x249546A74](v5, 0x10A1C40E4A317A1);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_245D04524(uint64_t *a1)
{
  sub_245D04F5C(a1);
  JUMPOUT(0x249546A74);
}

_QWORD *sub_245D04548@<X0>(_QWORD *a1@<X8>)
{
  return sub_245CF7F30(a1, "sentencepiece.SentencePieceText");
}

uint64_t sub_245D04558()
{
  return sub_245D04EA8(0);
}

uint64_t sub_245D04560(uint64_t a1, uint64_t a2)
{
  return sub_245D04EA8(a2);
}

uint64_t *sub_245D04568(uint64_t a1)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = sub_245CF9D90((uint64_t *)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 56);
  if ((int)v3 >= 1)
  {
    v4 = (uint64_t *)(*(_QWORD *)(a1 + 64) + 8);
    do
    {
      v5 = *v4++;
      result = sub_245D03810(v5);
      --v3;
    }
    while (v3);
    *(_DWORD *)(a1 + 56) = 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(_BYTE **)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_245D04620(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  result = sub_245CFACA8(a1 + 16);
  if ((_DWORD)result)
  {
    v3 = *(unsigned int *)(a1 + 56);
    while (1)
    {
      result = (int)v3 < 1;
      if ((int)v3 < 1)
        break;
      v4 = v3 - 1;
      v5 = sub_245CFACA8(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v3) + 16);
      v3 = v4;
      if ((v5 & 1) == 0)
        return 0;
    }
  }
  return result;
}

uint64_t sub_245D0467C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v2 = sub_245CFDC6C(a1 + 16);
  v3 = *(int *)(a1 + 56);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_245D038E8(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 3) != 0)
  {
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v13 = v12;
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0)
      v4 += 5;
  }
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) != 0)
  {
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0)
      v17 = *(_QWORD *)(v16 + 16);
    else
      v17 = *(unsigned __int8 *)(v16 + 31);
    v4 += v17;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

uint64_t sub_245D04784(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

char *sub_245D0478C(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  char *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  int32x2_t v28;
  int v29;
  __int32 v30;
  BOOL v31;
  char *v32;
  int v33;
  int32x2_t v34;
  uint64_t v35;
  _QWORD *v36;
  std::string *v37;
  std::string *v38;
  uint64_t v40;
  char *v41;
  std::string *v42;

  v5 = 0;
  v6 = (uint64_t *)(a1 + 48);
  v7 = (uint64_t *)(a1 + 8);
  v8 = (uint64_t **)(a1 + 72);
  v40 = a1 + 16;
  v41 = a2;
  do
  {
    while (1)
    {
LABEL_2:
      if ((sub_245CFB088((uint64_t)a3, &v41, a3[11].i32[1]) & 1) != 0)
      {
        v9 = v41;
        goto LABEL_57;
      }
      v9 = v41 + 1;
      v10 = *v41;
      if (*v41 < 0)
      {
        v10 = v10 + (*v9 << 7) - 128;
        if (*v9 < 0)
        {
          v11 = 14;
          v12 = 2;
          while (1)
          {
            v10 += (v41[v12] - 1) << v11;
            if ((v41[v12] & 0x80000000) == 0)
              break;
            v9 = 0;
            ++v12;
            v11 += 7;
            if (v12 == 5)
              goto LABEL_57;
          }
          v9 = &v41[v12 + 1];
        }
        else
        {
          v9 = v41 + 2;
        }
      }
      v41 = v9;
      v13 = v10 >> 3;
      if (v10 >> 3 != 3)
        break;
      if (v10 != 29)
        goto LABEL_17;
      *(_DWORD *)(a1 + 80) = *(_DWORD *)v9;
      v41 = v9 + 4;
      v5 = 2;
    }
    if (v13 == 2)
    {
      if (v10 != 18)
        goto LABEL_17;
      --v9;
      while (1)
      {
        v18 = v9 + 1;
        v41 = v9 + 1;
        v19 = *(int **)(a1 + 64);
        if (!v19)
          break;
        v20 = *(_DWORD *)(a1 + 56);
        v21 = *v19;
        if (v20 >= *v19)
        {
          if (v21 == *(_DWORD *)(a1 + 60))
          {
LABEL_32:
            if (v20 <= v21)
            {
              sub_245D034FC(v6, v21 - v20 + 1);
              v19 = *(int **)(a1 + 64);
            }
            v21 = *v19;
          }
          *v19 = v21 + 1;
          v22 = sub_245D0424C(*(_QWORD *)(a1 + 48));
          v23 = *(_QWORD *)(a1 + 64);
          v24 = *(int *)(a1 + 56);
          *(_DWORD *)(a1 + 56) = v24 + 1;
          *(_QWORD *)(v23 + 8 * v24 + 8) = v22;
          goto LABEL_36;
        }
        *(_DWORD *)(a1 + 56) = v20 + 1;
        v22 = *(_QWORD *)&v19[2 * v20 + 2];
LABEL_36:
        v25 = *v18;
        if (*v18 < 0)
        {
          v27 = sub_245D0295C((uint64_t)(v9 + 1), v25);
          if (!v27)
            goto LABEL_55;
          v26 = (char *)v27;
        }
        else
        {
          v26 = v9 + 2;
        }
        v28 = a3[1];
        v29 = v25 + (_DWORD)v26 - v28.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v28 + (v29 & (v29 >> 31)));
        v30 = a3[3].i32[1];
        a3[3].i32[1] = v29;
        v28.i32[0] = a3[11].i32[0];
        v31 = __OFSUB__(v28.i32[0]--, 1);
        a3[11].i32[0] = v28.i32[0];
        if (v28.i32[0] < 0 != v31)
          goto LABEL_55;
        v32 = sub_245D03A60(v22, v26, a3);
        v9 = v32;
        if (!v32)
          goto LABEL_57;
        ++a3[11].i32[0];
        if (a3[10].i32[0])
          goto LABEL_55;
        v33 = a3[3].i32[1] + v30 - v29;
        a3[3].i32[1] = v33;
        v34 = (int32x2_t)(*(_QWORD *)&a3[1] + (v33 & (v33 >> 31)));
        *a3 = v34;
        v41 = v32;
        if (*(_QWORD *)&v34 <= (unint64_t)v32 || *v32 != 18)
          goto LABEL_2;
      }
      v20 = *(_DWORD *)(a1 + 56);
      v21 = *(_DWORD *)(a1 + 60);
      goto LABEL_32;
    }
    if (v13 == 1 && v10 == 10)
    {
      *(_DWORD *)(a1 + 40) |= 1u;
      v35 = *(_QWORD *)(a1 + 8);
      v36 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFFELL);
      if ((v35 & 1) != 0)
        v36 = (_QWORD *)*v36;
      v37 = (std::string *)sub_245CF26F8(v8, (uint64_t)v36);
      v17 = (char *)sub_245D02AD4(v37, v9, (uint64_t)a3);
      goto LABEL_52;
    }
LABEL_17:
    if (v10)
      v15 = (v10 & 7) == 4;
    else
      v15 = 1;
    if (v15)
    {
      a3[10].i32[0] = v10 - 1;
      goto LABEL_57;
    }
    v16 = v10;
    if (v10 < 0x640)
    {
      if ((*v7 & 1) != 0)
        v38 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v38 = (std::string *)sub_245CFAE88(v7);
      v42 = v38;
      v17 = (char *)sub_245D02B38(v16, &v42, v9, a3);
    }
    else
    {
      v17 = (char *)sub_245CFAE20(v40, v10, v9, (uint64_t)&unk_25751AC50, v7, a3);
    }
LABEL_52:
    v41 = v17;
  }
  while (v17);
LABEL_55:
  v9 = 0;
LABEL_57:
  *(_DWORD *)(a1 + 40) |= v5;
  return v9;
}

char *sub_245D04AFC(uint64_t a1, char *a2, _QWORD *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
    v4 = sub_245D0404C(a3, 1u, *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL, a2);
  v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4)
        v4 = (char *)sub_245CF8520((uint64_t)a3, (int)v4);
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * i + 8);
      *v4 = 18;
      v10 = *(_DWORD *)(v9 + 44);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v13 = v4 + 2;
          do
          {
            v14 = v13;
            *v13++ = v12 | 0x80;
            v15 = v12 >> 7;
            v16 = v12 >> 14;
            v12 >>= 7;
          }
          while (v16);
          v11 = v14 + 2;
          *v13 = v15;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = sub_245D03DA0(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4)
      v4 = (char *)sub_245CF8520((uint64_t)a3, (int)v4);
    v17 = *(_DWORD *)(a1 + 80);
    *v4 = 29;
    *(_DWORD *)(v4 + 1) = v17;
    v4 += 5;
  }
  v18 = sub_245CFB0F8(a1 + 16, v4, a3);
  v19 = v18;
  v20 = *(_QWORD *)(a1 + 8);
  if ((v20 & 1) == 0)
    return v19;
  v22 = v20 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v22 + 31) < 0)
  {
    v23 = *(void **)(v22 + 8);
    v24 = *(_QWORD *)(v22 + 16);
  }
  else
  {
    v23 = (void *)(v22 + 8);
    LODWORD(v24) = *(unsigned __int8 *)(v22 + 31);
  }
  if (*a3 - (_QWORD)v18 >= (int)v24)
  {
    v25 = (int)v24;
    memcpy(v18, v23, (int)v24);
    v19 += v25;
    return v19;
  }
  return (char *)sub_245CF8630(a3, (char *)v23, v24, v18);
}

void sub_245D04CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::string *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  __int128 *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  sub_245CF9E2C(a1 + 16, a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & 1) != 0)
      v8 = (std::string *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (std::string *)sub_245CFAE88((uint64_t *)(a1 + 8));
    v9 = *(char *)(v5 + 31);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)v6;
    else
      v10 = *(const std::string::value_type **)(v5 + 8);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v5 + 31);
    else
      v11 = *(_QWORD *)(v5 + 16);
    std::string::append(v8, v10, v11);
  }
  v12 = *(_DWORD *)(a2 + 56);
  if (v12)
  {
    v36 = *(_QWORD *)(a2 + 64);
    v35 = sub_245D034FC((uint64_t *)(a1 + 48), v12);
    v13 = **(int **)(a1 + 64);
    v14 = *(int *)(a1 + 56);
    v15 = v13 - v14;
    if ((int)v13 - (int)v14 >= v12)
      v16 = v12;
    else
      v16 = v15;
    if ((int)v16 >= 1)
    {
      v17 = (uint64_t *)v35;
      v18 = (uint64_t *)(v36 + 8);
      do
      {
        v20 = *v18++;
        v19 = v20;
        v21 = *v17++;
        sub_245D04E98(v19, v21);
        --v16;
      }
      while (v16);
    }
    if (v15 < v12)
    {
      v22 = *(_QWORD *)(a1 + 48);
      v23 = v14 + v12 - v13;
      v24 = 8 * v13 - 8 * v14;
      v25 = (uint64_t *)(v35 + v24);
      v26 = (uint64_t *)(v24 + v36 + 8);
      do
      {
        v27 = *v26++;
        v28 = sub_245D0424C(v22);
        sub_245D04E98(v27, v28);
        *v25++ = v28;
        --v23;
      }
      while (v23);
    }
    v29 = *(_DWORD *)(a1 + 56) + v12;
    *(_DWORD *)(a1 + 56) = v29;
    v30 = *(int **)(a1 + 64);
    if (*v30 < v29)
      *v30 = v29;
  }
  v31 = *(_DWORD *)(a2 + 40);
  if ((v31 & 3) != 0)
  {
    if ((v31 & 1) != 0)
    {
      v32 = (__int128 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v33 = *(_QWORD *)(a1 + 8);
      v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFFELL);
      if ((v33 & 1) != 0)
        v34 = (_QWORD *)*v34;
      sub_245CF2414((uint64_t *)(a1 + 72), (uint64_t)&qword_25751AE78, v32, (uint64_t)v34);
    }
    if ((v31 & 2) != 0)
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 40) |= v31;
  }
}

void sub_245D04E98(uint64_t a1, uint64_t a2)
{
  sub_245D04108(a2, a1);
}

uint64_t sub_245D04EA8(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_2516F6A90, 88);
    v2 = (uint64_t)sub_245CF21A0((unint64_t *)a1, 0x58uLL);
    sub_245D04408(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_245D04408(v2, 0);
  }
  return v2;
}

void sub_245D04F38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t *sub_245D04F5C(uint64_t *a1)
{
  uint64_t v2;

  v2 = a1[9];
  if ((uint64_t *)v2 != &qword_25751AE78)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x249546A74](v2, 0x1012C40EC159624);
  }
  sub_245D043A8(a1[1]);
  sub_245D044A4(a1 + 6);
  sub_245CF902C((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_245D04FD0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516F7248;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_254419B48))
    sub_245CFF030(dword_254419B48);
  return a1;
}

void sub_245D0502C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_245D05040(v1);
  _Unwind_Resume(a1);
}

void sub_245D05040(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = (uint64_t **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_245D04F5C(*v3);
          MEMORY[0x249546A74](v5, 0x10A1C40431D3885);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t sub_245D050BC(uint64_t a1)
{
  sub_245D043A8(*(_QWORD *)(a1 + 8));
  sub_245D05040((_QWORD *)(a1 + 16));
  return a1;
}

void sub_245D050EC(uint64_t a1)
{
  sub_245D043A8(*(_QWORD *)(a1 + 8));
  sub_245D05040((_QWORD *)(a1 + 16));
  JUMPOUT(0x249546A74);
}

_QWORD *sub_245D0512C@<X0>(_QWORD *a1@<X8>)
{
  return sub_245CF7F30(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t sub_245D0513C()
{
  return sub_245D0583C(0);
}

uint64_t sub_245D05144(uint64_t a1, uint64_t a2)
{
  return sub_245D0583C(a2);
}

uint64_t *sub_245D0514C(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = result;
  v2 = *((unsigned int *)result + 6);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(result[4] + 8);
    do
    {
      v4 = *v3++;
      result = sub_245D04568(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)v1 + 6) = 0;
  }
  v5 = v1[1];
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(_BYTE **)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 31) = 0;
    }
  }
  return result;
}

BOOL sub_245D051C4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;

  v2 = *(unsigned int *)(a1 + 24);
  do
  {
    v3 = v2;
    if ((int)v2 < 1)
      break;
    v4 = v2 - 1;
    v5 = sub_245D04620(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v2));
    v2 = v4;
  }
  while ((v5 & 1) != 0);
  return v3 < 1;
}

void sub_245D05218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int *v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)(a1 + 8);
    v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_245CFAE88(v5);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 24);
  if (v13)
  {
    v34 = *(_QWORD *)(a2 + 32);
    v14 = sub_245D034FC((uint64_t *)(a1 + 16), v13);
    v15 = v14;
    v16 = **(int **)(a1 + 32);
    v17 = *(int *)(a1 + 24);
    v18 = v16 - v17;
    if ((int)v16 - (int)v17 >= v13)
      v19 = v13;
    else
      v19 = v18;
    if ((int)v19 >= 1)
    {
      v20 = (uint64_t *)(v34 + 8);
      v21 = (uint64_t *)v14;
      do
      {
        v23 = *v20++;
        v22 = v23;
        v24 = *v21++;
        sub_245D0582C(v22, v24);
        --v19;
      }
      while (v19);
    }
    if (v18 < v13)
    {
      v25 = *(_QWORD *)(a1 + 16);
      v26 = v17 + v13 - v16;
      v27 = 8 * v16 - 8 * v17;
      v28 = (uint64_t *)(v15 + v27);
      v29 = (uint64_t *)(v27 + v34 + 8);
      do
      {
        v30 = *v29++;
        v31 = sub_245D04EA8(v25);
        sub_245D0582C(v30, v31);
        *v28++ = v31;
        --v26;
      }
      while (v26);
    }
    v32 = *(_DWORD *)(a1 + 24) + v13;
    *(_DWORD *)(a1 + 24) = v32;
    v33 = *(int **)(a1 + 32);
    if (*v33 < v32)
      *v33 = v32;
  }
}

uint64_t sub_245D05380(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *(int *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = (uint64_t *)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = sub_245D0467C(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    v2 += v11;
  }
  *(_DWORD *)(a1 + 40) = v2;
  return v2;
}

uint64_t sub_245D05428(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

char *sub_245D05430(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  std::string *v12;
  char *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  int32x2_t v23;
  int v24;
  __int32 v25;
  BOOL v26;
  char *v27;
  int v28;
  int32x2_t v29;
  char *v31;
  std::string *v32;

  v31 = a2;
  v5 = (uint64_t *)(a1 + 8);
  v6 = (uint64_t *)(a1 + 16);
  do
  {
LABEL_2:
    if ((sub_245CFB088((uint64_t)a3, &v31, a3[11].i32[1]) & 1) != 0)
      return v31;
    v7 = v31 + 1;
    v8 = *v31;
    if (*v31 < 0)
    {
      v8 = v8 + (*v7 << 7) - 128;
      if (*v7 < 0)
      {
        v9 = 14;
        v10 = 2;
        while (1)
        {
          v8 += (v31[v10] - 1) << v9;
          if ((v31[v10] & 0x80000000) == 0)
            break;
          v7 = 0;
          ++v10;
          v9 += 7;
          if (v10 == 5)
            return v7;
        }
        v7 = &v31[v10 + 1];
      }
      else
      {
        v7 = v31 + 2;
      }
    }
    v31 = v7;
    if (v8 == 10)
    {
      --v7;
      while (1)
      {
        v13 = v7 + 1;
        v31 = v7 + 1;
        v14 = *(int **)(a1 + 32);
        if (!v14)
          break;
        v15 = *(_DWORD *)(a1 + 24);
        v16 = *v14;
        if (v15 >= *v14)
        {
          if (v16 == *(_DWORD *)(a1 + 28))
          {
LABEL_26:
            if (v15 <= v16)
            {
              sub_245D034FC(v6, v16 - v15 + 1);
              v14 = *(int **)(a1 + 32);
            }
            v16 = *v14;
          }
          *v14 = v16 + 1;
          v17 = sub_245D04EA8(*(_QWORD *)(a1 + 16));
          v18 = *(_QWORD *)(a1 + 32);
          v19 = *(int *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = v19 + 1;
          *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
          goto LABEL_30;
        }
        *(_DWORD *)(a1 + 24) = v15 + 1;
        v17 = *(_QWORD *)&v14[2 * v15 + 2];
LABEL_30:
        v20 = *v13;
        if (*v13 < 0)
        {
          v22 = sub_245D0295C((uint64_t)(v7 + 1), v20);
          if (!v22)
            return 0;
          v21 = (char *)v22;
        }
        else
        {
          v21 = v7 + 2;
        }
        v23 = a3[1];
        v24 = v20 + (_DWORD)v21 - v23.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v23 + (v24 & (v24 >> 31)));
        v25 = a3[3].i32[1];
        a3[3].i32[1] = v24;
        v23.i32[0] = a3[11].i32[0];
        v26 = __OFSUB__(v23.i32[0]--, 1);
        a3[11].i32[0] = v23.i32[0];
        if (v23.i32[0] < 0 != v26)
          return 0;
        v27 = sub_245D0478C(v17, v21, a3);
        v7 = v27;
        if (!v27)
          return v7;
        ++a3[11].i32[0];
        if (a3[10].i32[0])
          return 0;
        v28 = a3[3].i32[1] + v25 - v24;
        a3[3].i32[1] = v28;
        v29 = (int32x2_t)(*(_QWORD *)&a3[1] + (v28 & (v28 >> 31)));
        *a3 = v29;
        v31 = v27;
        if (*(_QWORD *)&v29 <= (unint64_t)v27 || *v27 != 10)
          goto LABEL_2;
      }
      v15 = *(_DWORD *)(a1 + 24);
      v16 = *(_DWORD *)(a1 + 28);
      goto LABEL_26;
    }
    if (v8)
      v11 = (v8 & 7) == 4;
    else
      v11 = 1;
    if (v11)
    {
      a3[10].i32[0] = v8 - 1;
      return v7;
    }
    if ((*v5 & 1) != 0)
      v12 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v12 = (std::string *)sub_245CFAE88(v5);
    v32 = v12;
    v31 = (char *)sub_245D02B38(v8, &v32, v7, a3);
  }
  while (v31);
  return 0;
}

char *sub_245D056D0(uint64_t a1, char *__dst, _QWORD *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst)
        __dst = (char *)sub_245CF8520((uint64_t)a3, (int)__dst);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i + 8);
      *__dst = 10;
      v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        __dst[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v12 = __dst + 2;
          do
          {
            v13 = v12;
            *v12++ = v11 | 0x80;
            v14 = v11 >> 7;
            v15 = v11 >> 14;
            v11 >>= 7;
          }
          while (v15);
          v10 = v13 + 2;
          *v12 = v14;
        }
        else
        {
          __dst[2] = v11;
          v10 = __dst + 3;
        }
      }
      else
      {
        __dst[1] = v9;
        v10 = __dst + 2;
      }
      __dst = sub_245D04AFC(v8, v10, a3);
    }
  }
  v16 = *(_QWORD *)(a1 + 8);
  if ((v16 & 1) == 0)
    return __dst;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    v19 = *(void **)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
  }
  else
  {
    v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*a3 - (_QWORD)__dst >= (int)v20)
  {
    v21 = (int)v20;
    memcpy(__dst, v19, (int)v20);
    __dst += v21;
    return __dst;
  }
  return (char *)sub_245CF8630(a3, (char *)v19, v20, __dst);
}

void sub_245D0582C(uint64_t a1, uint64_t a2)
{
  sub_245D04CC4(a2, a1);
}

uint64_t sub_245D0583C(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_2516F6AC0, 48);
    v2 = (uint64_t)sub_245CF21A0((unint64_t *)a1, 0x30uLL);
    sub_245D04FD0(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_245D04FD0(v2, 0);
  }
  return v2;
}

void sub_245D058CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

void sub_245D058F0()
{
  sub_245D0C0C8((uint64_t)&unk_25751AD40, 0);
  sub_245CFF754((uint64_t)sub_245CFEF80, (uint64_t)&unk_25751AD40);
}

void sub_245D05928()
{
  sub_245D060E4((uint64_t)&unk_25751AE30, 0);
  sub_245CFF754((uint64_t)sub_245CFEF80, (uint64_t)&unk_25751AE30);
}

void sub_245D05960()
{
  qword_25751ACD8 = (uint64_t)&off_2516F71C8;
  unk_25751ACE0 = 0;
  qword_25751ACE8 = 0;
  if (atomic_load(dword_254419B80))
    sub_245CFF030(dword_254419B80);
  qword_25751ACF0 = (uint64_t)&qword_25751AE78;
  unk_25751ACF8 = &qword_25751AE78;
  sub_245CFF754((uint64_t)sub_245CFEF80, (uint64_t)&qword_25751ACD8);
}

void sub_245D059CC(uint64_t *a1)
{
  sub_245D06044(a1);
  JUMPOUT(0x249546A74);
}

_QWORD *sub_245D059F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_245CF7F30(a1, "sentencepiece.SelfTestData.Sample");
}

_QWORD *sub_245D05A00()
{
  return sub_245D05F38(0);
}

_QWORD *sub_245D05A08(uint64_t a1, uint64_t a2)
{
  return sub_245D05F38(a2);
}

uint64_t sub_245D05A10(uint64_t result)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_DWORD *)(result + 16);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        if ((v1 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v3 = *(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(result + 16) = 0;
  v4 = *(_QWORD *)(result + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_245D05AAC()
{
  return 1;
}

uint64_t sub_245D05AB8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_245D05B90(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

char *sub_245D05B98(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  char *v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  BOOL v13;
  std::string *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t **v18;
  uint64_t v19;
  std::string *v20;
  char *v22;
  std::string *v23;

  v22 = a2;
  v5 = (uint64_t *)(a1 + 8);
  v6 = (uint64_t **)(a1 + 32);
  v7 = (uint64_t **)(a1 + 24);
  do
  {
    if ((sub_245CFB088((uint64_t)a3, &v22, a3[11].i32[1]) & 1) != 0)
      return v22;
    v8 = v22 + 1;
    v9 = *v22;
    if (*v22 < 0)
    {
      v9 = v9 + (*v8 << 7) - 128;
      if (*v8 < 0)
      {
        v10 = 14;
        v11 = 2;
        while (1)
        {
          v9 += (v22[v11] - 1) << v10;
          if ((v22[v11] & 0x80000000) == 0)
            break;
          ++v11;
          v10 += 7;
          if (v11 == 5)
            return 0;
        }
        v8 = &v22[v11 + 1];
      }
      else
      {
        v8 = v22 + 2;
      }
    }
    v22 = v8;
    if (v9 >> 3 != 2)
    {
      if (v9 >> 3 != 1 || v9 != 10)
        goto LABEL_16;
      *(_DWORD *)(a1 + 16) |= 1u;
      v19 = *(_QWORD *)(a1 + 8);
      v17 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
      if ((v19 & 1) != 0)
        v17 = (_QWORD *)*v17;
      v18 = v7;
LABEL_30:
      v20 = (std::string *)sub_245CF26F8(v18, (uint64_t)v17);
      v15 = (char *)sub_245D02AD4(v20, v8, (uint64_t)a3);
      goto LABEL_31;
    }
    if (v9 == 18)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      v16 = *(_QWORD *)(a1 + 8);
      v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if ((v16 & 1) != 0)
        v17 = (_QWORD *)*v17;
      v18 = v6;
      goto LABEL_30;
    }
LABEL_16:
    if (v9)
      v13 = (v9 & 7) == 4;
    else
      v13 = 1;
    if (v13)
    {
      a3[10].i32[0] = v9 - 1;
      return v8;
    }
    if ((*v5 & 1) != 0)
      v14 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v14 = (std::string *)sub_245CFAE88(v5);
    v23 = v14;
    v15 = (char *)sub_245D02B38(v9, &v23, v8, a3);
LABEL_31:
    v22 = v15;
  }
  while (v15);
  return 0;
}

char *sub_245D05D60(uint64_t a1, char *__dst, _QWORD *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __dst;
  v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 1) != 0)
    v4 = sub_245D0404C(a3, 1u, *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL, __dst);
  if ((v6 & 2) != 0)
    v4 = sub_245D0404C(a3, 2u, *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL, v4);
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    v10 = *(void **)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (_QWORD)v4 >= (int)v11)
  {
    v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }
  return (char *)sub_245CF8630(a3, (char *)v10, v11, v4);
}

uint64_t sub_245D05E38(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)(result + 8);
    v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(v3 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_245CFAE88(v5);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    result = (uint64_t)std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 16);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 1u;
      v15 = *(_QWORD *)(v3 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      result = sub_245CF2414((uint64_t *)(v3 + 24), (uint64_t)&qword_25751AE78, v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      v17 = (__int128 *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 2u;
      v18 = *(_QWORD *)(v3 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      return sub_245CF2414((uint64_t *)(v3 + 32), (uint64_t)&qword_25751AE78, v17, (uint64_t)v19);
    }
  }
  return result;
}

_QWORD *sub_245D05F38(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_2516F6AA8, 40);
    v2 = sub_245CF21A0((unint64_t *)a1, 0x28uLL);
    *v2 = &off_2516F71C8;
    v2[1] = a1;
    v2[2] = 0;
    if (atomic_load(dword_254419B80))
      goto LABEL_7;
  }
  else
  {
    v2 = (_QWORD *)operator new();
    *v2 = &off_2516F71C8;
    v2[1] = 0;
    v2[2] = 0;
    if (atomic_load(dword_254419B80))
LABEL_7:
      sub_245CFF030(dword_254419B80);
  }
  v2[3] = &qword_25751AE78;
  v2[4] = &qword_25751AE78;
  return v2;
}

void sub_245D06020(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t *sub_245D06044(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[3];
  if ((uint64_t *)v2 != &qword_25751AE78)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x249546A74](v2, 0x1012C40EC159624);
  }
  v3 = a1[4];
  if ((uint64_t *)v3 != &qword_25751AE78)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    MEMORY[0x249546A74](v3, 0x1012C40EC159624);
  }
  sub_245D043A8(a1[1]);
  return a1;
}

uint64_t sub_245D060E4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = &off_2516F6F70;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load(dword_254419B98))
    sub_245CFF030(dword_254419B98);
  return a1;
}

void sub_245D06158(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_245D06174(v2);
  sub_245CF902C(v1);
  _Unwind_Resume(a1);
}

void sub_245D06174(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = (uint64_t **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_245D06044(*v3);
          MEMORY[0x249546A74](v5, 0x1081C400F7E8713);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t sub_245D061F0(uint64_t a1)
{
  sub_245D043A8(*(_QWORD *)(a1 + 8));
  sub_245D06174((_QWORD *)(a1 + 40));
  sub_245CF902C(a1 + 16);
  return a1;
}

void sub_245D06228(uint64_t a1)
{
  sub_245D043A8(*(_QWORD *)(a1 + 8));
  sub_245D06174((_QWORD *)(a1 + 40));
  sub_245CF902C(a1 + 16);
  JUMPOUT(0x249546A74);
}

_QWORD *sub_245D06270@<X0>(_QWORD *a1@<X8>)
{
  return sub_245CF7F30(a1, "sentencepiece.SelfTestData");
}

uint64_t sub_245D06280()
{
  return sub_245D06994(0);
}

uint64_t sub_245D06288(uint64_t a1, uint64_t a2)
{
  return sub_245D06994(a2);
}

uint64_t sub_245D06290(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = (uint64_t)sub_245CF9D90((uint64_t *)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 48);
  if ((int)v3 >= 1)
  {
    v4 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 8);
    do
    {
      v5 = *v4++;
      result = sub_245D05A10(v5);
      --v3;
    }
    while (v3);
    *(_DWORD *)(a1 + 48) = 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(_BYTE **)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_245D06310(uint64_t a1)
{
  return sub_245CFACA8(a1 + 16);
}

uint64_t sub_245D0631C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v2 = sub_245CFDC6C(a1 + 16);
  v3 = *(int *)(a1 + 48);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_245D05AB8(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_QWORD *)(a1 + 8);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
      v13 = *(_QWORD *)(v12 + 16);
    else
      v13 = *(unsigned __int8 *)(v12 + 31);
    v4 += v13;
  }
  *(_DWORD *)(a1 + 64) = v4;
  return v4;
}

uint64_t sub_245D063C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

char *sub_245D063D0(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  char *v14;
  int *v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  int32x2_t v24;
  int v25;
  __int32 v26;
  BOOL v27;
  char *v28;
  int v29;
  int32x2_t v30;
  std::string *v31;
  char *v33;
  std::string *v34;

  v33 = a2;
  v5 = (uint64_t *)(a1 + 8);
  v6 = a1 + 16;
  v7 = (uint64_t *)(a1 + 40);
  do
  {
LABEL_2:
    if ((sub_245CFB088((uint64_t)a3, &v33, a3[11].i32[1]) & 1) != 0)
      return v33;
    v8 = v33 + 1;
    v9 = *v33;
    if (*v33 < 0)
    {
      v9 = v9 + (*v8 << 7) - 128;
      if (*v8 < 0)
      {
        v10 = 14;
        v11 = 2;
        while (1)
        {
          v9 += (v33[v11] - 1) << v10;
          if ((v33[v11] & 0x80000000) == 0)
            break;
          v8 = 0;
          ++v11;
          v10 += 7;
          if (v11 == 5)
            return v8;
        }
        v8 = &v33[v11 + 1];
      }
      else
      {
        v8 = v33 + 2;
      }
    }
    v33 = v8;
    if (v9 == 10)
    {
      --v8;
      while (1)
      {
        v14 = v8 + 1;
        v33 = v8 + 1;
        v15 = *(int **)(a1 + 56);
        if (!v15)
          break;
        v16 = *(_DWORD *)(a1 + 48);
        v17 = *v15;
        if (v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(a1 + 52))
          {
LABEL_24:
            if (v16 <= v17)
            {
              sub_245D034FC(v7, v17 - v16 + 1);
              v15 = *(int **)(a1 + 56);
            }
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v18 = sub_245D05F38(*(_QWORD *)(a1 + 40));
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(int *)(a1 + 48);
          *(_DWORD *)(a1 + 48) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 48) = v16 + 1;
        v18 = *(_QWORD **)&v15[2 * v16 + 2];
LABEL_28:
        v21 = *v14;
        if (*v14 < 0)
        {
          v23 = sub_245D0295C((uint64_t)(v8 + 1), v21);
          if (!v23)
            return 0;
          v22 = (char *)v23;
        }
        else
        {
          v22 = v8 + 2;
        }
        v24 = a3[1];
        v25 = v21 + (_DWORD)v22 - v24.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v24 + (v25 & (v25 >> 31)));
        v26 = a3[3].i32[1];
        a3[3].i32[1] = v25;
        v24.i32[0] = a3[11].i32[0];
        v27 = __OFSUB__(v24.i32[0]--, 1);
        a3[11].i32[0] = v24.i32[0];
        if (v24.i32[0] < 0 != v27)
          return 0;
        v28 = sub_245D05B98((uint64_t)v18, v22, a3);
        v8 = v28;
        if (!v28)
          return v8;
        ++a3[11].i32[0];
        if (a3[10].i32[0])
          return 0;
        v29 = a3[3].i32[1] + v26 - v25;
        a3[3].i32[1] = v29;
        v30 = (int32x2_t)(*(_QWORD *)&a3[1] + (v29 & (v29 >> 31)));
        *a3 = v30;
        v33 = v28;
        if (*(_QWORD *)&v30 <= (unint64_t)v28 || *v28 != 10)
          goto LABEL_2;
      }
      v16 = *(_DWORD *)(a1 + 48);
      v17 = *(_DWORD *)(a1 + 52);
      goto LABEL_24;
    }
    if (v9)
      v12 = (v9 & 7) == 4;
    else
      v12 = 1;
    if (v12)
    {
      a3[10].i32[0] = v9 - 1;
      return v8;
    }
    if (v9 < 0x640)
    {
      if ((*v5 & 1) != 0)
        v31 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v31 = (std::string *)sub_245CFAE88(v5);
      v34 = v31;
      v13 = (char *)sub_245D02B38(v9, &v34, v8, a3);
    }
    else
    {
      v13 = (char *)sub_245CFAE20(v6, v9, v8, (uint64_t)&unk_25751AE30, v5, a3);
    }
    v33 = v13;
  }
  while (v13);
  return 0;
}

char *sub_245D066AC(uint64_t a1, char *a2, _QWORD *a3)
{
  int v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(a1 + 48);
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      if (*a3 <= (unint64_t)a2)
        a2 = (char *)sub_245CF8520((uint64_t)a3, (int)a2);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i + 8);
      *a2 = 10;
      v8 = *(_DWORD *)(v7 + 20);
      if (v8 > 0x7F)
      {
        a2[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = a2 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = v12 + 2;
          *v11 = v13;
        }
        else
        {
          a2[2] = v10;
          v9 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v8;
        v9 = a2 + 2;
      }
      a2 = sub_245D05D60(v7, v9, a3);
    }
  }
  v15 = sub_245CFB0F8(a1 + 16, a2, a3);
  v16 = v15;
  v17 = *(_QWORD *)(a1 + 8);
  if ((v17 & 1) == 0)
    return v16;
  v19 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v19 + 31) < 0)
  {
    v20 = *(void **)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 16);
  }
  else
  {
    v20 = (void *)(v19 + 8);
    LODWORD(v21) = *(unsigned __int8 *)(v19 + 31);
  }
  if (*a3 - (_QWORD)v15 >= (int)v21)
  {
    v22 = (int)v21;
    memcpy(v15, v20, (int)v21);
    v16 += v22;
    return v16;
  }
  return (char *)sub_245CF8630(a3, (char *)v20, v21, v15);
}

void sub_245D06810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::string *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  int *v32;
  uint64_t v33;

  sub_245CF9E2C(a1 + 16, a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & 1) != 0)
      v8 = (std::string *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (std::string *)sub_245CFAE88((uint64_t *)(a1 + 8));
    v9 = *(char *)(v5 + 31);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)v6;
    else
      v10 = *(const std::string::value_type **)(v5 + 8);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v5 + 31);
    else
      v11 = *(_QWORD *)(v5 + 16);
    std::string::append(v8, v10, v11);
  }
  v12 = *(_DWORD *)(a2 + 48);
  if (v12)
  {
    v33 = *(_QWORD *)(a2 + 56);
    v13 = sub_245D034FC((uint64_t *)(a1 + 40), v12);
    v14 = v13;
    v15 = **(int **)(a1 + 56);
    v16 = *(int *)(a1 + 48);
    v17 = v15 - v16;
    if ((int)v15 - (int)v16 >= v12)
      v18 = v12;
    else
      v18 = v17;
    if ((int)v18 >= 1)
    {
      v19 = (uint64_t *)(v33 + 8);
      v20 = (uint64_t *)v13;
      do
      {
        v22 = *v19++;
        v21 = v22;
        v23 = *v20++;
        sub_245D06984(v21, v23);
        --v18;
      }
      while (v18);
    }
    if (v17 < v12)
    {
      v24 = *(_QWORD *)(a1 + 40);
      v25 = v16 + v12 - v15;
      v26 = 8 * v15 - 8 * v16;
      v27 = (_QWORD *)(v14 + v26);
      v28 = (uint64_t *)(v26 + v33 + 8);
      do
      {
        v29 = *v28++;
        v30 = sub_245D05F38(v24);
        sub_245D06984(v29, (uint64_t)v30);
        *v27++ = v30;
        --v25;
      }
      while (v25);
    }
    v31 = *(_DWORD *)(a1 + 48) + v12;
    *(_DWORD *)(a1 + 48) = v31;
    v32 = *(int **)(a1 + 56);
    if (*v32 < v31)
      *v32 = v31;
  }
}

uint64_t sub_245D06984(uint64_t a1, uint64_t a2)
{
  return sub_245D05E38(a2, a1);
}

uint64_t sub_245D06994(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_2516F6A50, 72);
    v2 = (uint64_t)sub_245CF21A0((unint64_t *)a1, 0x48uLL);
    sub_245D060E4(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_245D060E4(v2, 0);
  }
  return v2;
}

void sub_245D06A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

void sub_245D06A48()
{
  sub_245D06A80((uint64_t)&unk_25751ADE0, 0);
  sub_245CFF754((uint64_t)sub_245CFEF80, (uint64_t)&unk_25751ADE0);
}

uint64_t sub_245D06A80(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516F70C8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_254419B68))
    sub_245CFF030(dword_254419B68);
  *(_QWORD *)(a1 + 48) = &qword_25751AE78;
  *(_QWORD *)(a1 + 56) = &qword_25751AE78;
  *(_QWORD *)(a1 + 64) = &qword_25751AE78;
  *(_WORD *)(a1 + 72) = 257;
  *(_BYTE *)(a1 + 74) = 1;
  return a1;
}

void sub_245D06AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_245CF902C(v1);
  _Unwind_Resume(a1);
}

void sub_245D06B14(uint64_t *a1)
{
  sub_245D075E0(a1);
  JUMPOUT(0x249546A74);
}

_QWORD *sub_245D06B38@<X0>(_QWORD *a1@<X8>)
{
  return sub_245CF7F30(a1, "sentencepiece.NormalizerSpec");
}

uint64_t sub_245D06B48()
{
  return sub_245D0752C(0);
}

uint64_t sub_245D06B50(uint64_t a1, uint64_t a2)
{
  return sub_245D0752C(a2);
}

uint64_t *sub_245D06B58(uint64_t a1)
{
  uint64_t *result;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = sub_245CF9D90((uint64_t *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x3F) != 0)
  {
    if ((v3 & 1) == 0)
    {
      if ((v3 & 2) == 0)
        goto LABEL_4;
LABEL_10:
      v5 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(_BYTE **)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        if ((v3 & 4) == 0)
        {
LABEL_17:
          *(_WORD *)(a1 + 72) = 257;
          *(_BYTE *)(a1 + 74) = 1;
          goto LABEL_18;
        }
      }
      else
      {
        *(_BYTE *)v5 = 0;
        *(_BYTE *)(v5 + 23) = 0;
        if ((v3 & 4) == 0)
          goto LABEL_17;
      }
LABEL_14:
      v6 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v6 + 23) < 0)
      {
        **(_BYTE **)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v6 = 0;
        *(_BYTE *)(v6 + 23) = 0;
      }
      goto LABEL_17;
    }
    v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v3 & 4) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
LABEL_18:
  *(_DWORD *)(a1 + 40) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(_BYTE **)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_245D06C60(uint64_t a1)
{
  return sub_245CFACA8(a1 + 16);
}

uint64_t sub_245D06C6C(uint64_t a1)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  result = sub_245CFDC6C(a1 + 16);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x3F) == 0)
    goto LABEL_15;
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0)
      goto LABEL_4;
LABEL_20:
    v12 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0)
      goto LABEL_8;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0)
    goto LABEL_20;
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v6 = v5;
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  v7 = result + 2;
  if ((v3 & 8) == 0)
    v7 = result;
  if ((v3 & 0x10) != 0)
    v7 += 2;
  if ((v3 & 0x20) != 0)
    result = v7 + 2;
  else
    result = v7;
LABEL_15:
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0)
      v16 = *(_QWORD *)(v15 + 16);
    else
      v16 = *(unsigned __int8 *)(v15 + 31);
    result += v16;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

uint64_t sub_245D06DC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

char *sub_245D06DCC(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  char *v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t **v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::string *v28;
  char *v29;
  BOOL v30;
  std::string *v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  std::string *v41;

  v5 = 0;
  v6 = (uint64_t *)(a1 + 8);
  v7 = (uint64_t **)(a1 + 64);
  v8 = (uint64_t **)(a1 + 56);
  v9 = (uint64_t **)(a1 + 48);
  v39 = a1 + 16;
  v40 = a2;
LABEL_2:
  while (2)
  {
    if ((sub_245CFB088((uint64_t)a3, &v40, a3[11].i32[1]) & 1) != 0)
    {
      v10 = v40;
      goto LABEL_68;
    }
    v10 = v40 + 1;
    v11 = *v40;
    if (*v40 < 0)
    {
      v11 = v11 + (*v10 << 7) - 128;
      if (*v10 < 0)
      {
        v12 = 14;
        v13 = 2;
        while (1)
        {
          v11 += (v40[v13] - 1) << v12;
          if ((v40[v13] & 0x80000000) == 0)
            break;
          ++v13;
          v12 += 7;
          if (v13 == 5)
          {
LABEL_70:
            v10 = 0;
            goto LABEL_68;
          }
        }
        v10 = &v40[v13 + 1];
      }
      else
      {
        v10 = v40 + 2;
      }
    }
    v40 = v10;
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_39;
        *(_DWORD *)(a1 + 40) |= 1u;
        v14 = *(_QWORD *)(a1 + 8);
        v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL);
        if ((v14 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v16 = v9;
        goto LABEL_36;
      case 2u:
        if (v11 != 18)
          goto LABEL_39;
        *(_DWORD *)(a1 + 40) |= 2u;
        v17 = *(_QWORD *)(a1 + 8);
        v15 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v16 = v8;
        goto LABEL_36;
      case 3u:
        if (v11 != 24)
          goto LABEL_39;
        v5 |= 8u;
        v18 = v10 + 1;
        v19 = *v10;
        if ((*v10 & 0x80000000) == 0)
          goto LABEL_61;
        v20 = *v18;
        v19 = (v19 + (v20 << 7) - 128);
        if ((v20 & 0x80) == 0)
        {
          v18 = v10 + 2;
          goto LABEL_61;
        }
        v32 = 14;
        v33 = 2;
        break;
      case 4u:
        if (v11 != 32)
          goto LABEL_39;
        v5 |= 0x10u;
        v21 = v10 + 1;
        v22 = *v10;
        if ((*v10 & 0x80000000) == 0)
          goto LABEL_63;
        v23 = *v21;
        v22 = (v22 + (v23 << 7) - 128);
        if ((v23 & 0x80) != 0)
        {
          v34 = 14;
          v35 = 2;
          while (1)
          {
            v22 += (v10[v35] - 1) << v34;
            if ((v10[v35] & 0x80000000) == 0)
              break;
            ++v35;
            v34 += 7;
            if (v35 == 10)
            {
              v10 = 0;
              *(_BYTE *)(a1 + 73) = 0;
              goto LABEL_68;
            }
          }
          v21 = &v10[v35 + 1];
        }
        else
        {
          v21 = v10 + 2;
        }
LABEL_63:
        v40 = v21;
        *(_BYTE *)(a1 + 73) = v22 != 0;
        continue;
      case 5u:
        if (v11 != 40)
          goto LABEL_39;
        v5 |= 0x20u;
        v24 = v10 + 1;
        v25 = *v10;
        if ((*v10 & 0x80000000) == 0)
          goto LABEL_65;
        v26 = *v24;
        v25 = (v25 + (v26 << 7) - 128);
        if ((v26 & 0x80) != 0)
        {
          v36 = 14;
          v37 = 2;
          while (1)
          {
            v25 += (v10[v37] - 1) << v36;
            if ((v10[v37] & 0x80000000) == 0)
              break;
            ++v37;
            v36 += 7;
            if (v37 == 10)
            {
              v10 = 0;
              *(_BYTE *)(a1 + 74) = 0;
              goto LABEL_68;
            }
          }
          v24 = &v10[v37 + 1];
        }
        else
        {
          v24 = v10 + 2;
        }
LABEL_65:
        v40 = v24;
        *(_BYTE *)(a1 + 74) = v25 != 0;
        continue;
      case 6u:
        if (v11 != 50)
          goto LABEL_39;
        *(_DWORD *)(a1 + 40) |= 4u;
        v27 = *(_QWORD *)(a1 + 8);
        v15 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFFFFELL);
        if ((v27 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v16 = v7;
LABEL_36:
        v28 = (std::string *)sub_245CF26F8(v16, (uint64_t)v15);
        v29 = (char *)sub_245D02AD4(v28, v10, (uint64_t)a3);
        goto LABEL_37;
      default:
LABEL_39:
        if (v11)
          v30 = (v11 & 7) == 4;
        else
          v30 = 1;
        if (v30)
        {
          a3[10].i32[0] = v11 - 1;
          goto LABEL_68;
        }
        if (v11 < 0x640)
        {
          if ((*v6 & 1) != 0)
            v31 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v31 = (std::string *)sub_245CFAE88(v6);
          v41 = v31;
          v29 = (char *)sub_245D02B38(v11, &v41, v10, a3);
        }
        else
        {
          v29 = (char *)sub_245CFAE20(v39, v11, v10, (uint64_t)&unk_25751ADE0, v6, a3);
        }
LABEL_37:
        v40 = v29;
        if (!v29)
          goto LABEL_70;
        continue;
    }
    break;
  }
  do
  {
    v19 += (v10[v33] - 1) << v32;
    if ((v10[v33] & 0x80000000) == 0)
    {
      v18 = &v10[v33 + 1];
LABEL_61:
      v40 = v18;
      *(_BYTE *)(a1 + 72) = v19 != 0;
      goto LABEL_2;
    }
    ++v33;
    v32 += 7;
  }
  while (v33 != 10);
  v10 = 0;
  *(_BYTE *)(a1 + 72) = 0;
LABEL_68:
  *(_DWORD *)(a1 + 40) |= v5;
  return v10;
}

char *sub_245D071E8(uint64_t a1, char *a2, _QWORD *a3)
{
  char *v4;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char v11;
  char v12;
  char v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
  {
    v4 = sub_245D0404C(a3, 1u, *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = sub_245D0404C(a3, 2u, *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
  {
LABEL_4:
    if ((v6 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_12:
  if (*a3 <= (unint64_t)v4)
    v4 = (char *)sub_245CF8520((uint64_t)a3, (int)v4);
  v11 = *(_BYTE *)(a1 + 72);
  *v4 = 24;
  v4[1] = v11;
  v4 += 2;
  if ((v6 & 0x10) == 0)
  {
LABEL_5:
    if ((v6 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_15:
  if (*a3 <= (unint64_t)v4)
    v4 = (char *)sub_245CF8520((uint64_t)a3, (int)v4);
  v12 = *(_BYTE *)(a1 + 73);
  *v4 = 32;
  v4[1] = v12;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_18:
  if (*a3 <= (unint64_t)v4)
    v4 = (char *)sub_245CF8520((uint64_t)a3, (int)v4);
  v13 = *(_BYTE *)(a1 + 74);
  *v4 = 40;
  v4[1] = v13;
  v4 += 2;
  if ((v6 & 4) != 0)
LABEL_7:
    v4 = sub_245D0404C(a3, 6u, *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL, v4);
LABEL_8:
  v7 = sub_245CFB0F8(a1 + 16, v4, a3);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & 1) == 0)
    return v8;
  v14 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v14 + 31) < 0)
  {
    v15 = *(void **)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 16);
  }
  else
  {
    v15 = (void *)(v14 + 8);
    LODWORD(v16) = *(unsigned __int8 *)(v14 + 31);
  }
  if (*a3 - (_QWORD)v7 >= (int)v16)
  {
    v17 = (int)v16;
    memcpy(v7, v15, (int)v16);
    v8 += v17;
    return v8;
  }
  return (char *)sub_245CF8630(a3, (char *)v15, v16, v7);
}

void sub_245D073A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::string *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  int v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;

  sub_245CF9E2C(a1 + 16, a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & 1) != 0)
      v8 = (std::string *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (std::string *)sub_245CFAE88((uint64_t *)(a1 + 8));
    v9 = *(char *)(v5 + 31);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)v6;
    else
      v10 = *(const std::string::value_type **)(v5 + 8);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v5 + 31);
    else
      v11 = *(_QWORD *)(v5 + 16);
    std::string::append(v8, v10, v11);
  }
  v12 = *(_DWORD *)(a2 + 40);
  if ((v12 & 0x3F) != 0)
  {
    if ((v12 & 1) != 0)
    {
      v13 = (__int128 *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      if ((v14 & 1) != 0)
        v15 = (_QWORD *)*v15;
      sub_245CF2414((uint64_t *)(a1 + 48), (uint64_t)&qword_25751AE78, v13, (uint64_t)v15);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 4) == 0)
          goto LABEL_15;
        goto LABEL_27;
      }
    }
    else if ((v12 & 2) == 0)
    {
      goto LABEL_14;
    }
    v16 = (__int128 *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    v17 = *(_QWORD *)(a1 + 8);
    v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)*v18;
    sub_245CF2414((uint64_t *)(a1 + 56), (uint64_t)&qword_25751AE78, v16, (uint64_t)v18);
    if ((v12 & 4) == 0)
    {
LABEL_15:
      if ((v12 & 8) == 0)
        goto LABEL_16;
      goto LABEL_30;
    }
LABEL_27:
    v19 = (__int128 *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 4u;
    v20 = *(_QWORD *)(a1 + 8);
    v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFFELL);
    if ((v20 & 1) != 0)
      v21 = (_QWORD *)*v21;
    sub_245CF2414((uint64_t *)(a1 + 64), (uint64_t)&qword_25751AE78, v19, (uint64_t)v21);
    if ((v12 & 8) == 0)
    {
LABEL_16:
      if ((v12 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_31;
    }
LABEL_30:
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    if ((v12 & 0x10) == 0)
    {
LABEL_17:
      if ((v12 & 0x20) == 0)
      {
LABEL_19:
        *(_DWORD *)(a1 + 40) |= v12;
        return;
      }
LABEL_18:
      *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
      goto LABEL_19;
    }
LABEL_31:
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
    if ((v12 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
}

uint64_t sub_245D0752C(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_2516F6A78, 80);
    v2 = (uint64_t)sub_245CF21A0((unint64_t *)a1, 0x50uLL);
    sub_245D06A80(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_245D06A80(v2, 0);
  }
  return v2;
}

void sub_245D075BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x10A1C406853ED09);
  _Unwind_Resume(a1);
}

uint64_t *sub_245D075E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[6];
  if ((uint64_t *)v2 != &qword_25751AE78)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x249546A74](v2, 0x1012C40EC159624);
  }
  v3 = a1[7];
  if ((uint64_t *)v3 != &qword_25751AE78)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    MEMORY[0x249546A74](v3, 0x1012C40EC159624);
  }
  v4 = a1[8];
  if ((uint64_t *)v4 != &qword_25751AE78)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x249546A74](v4, 0x1012C40EC159624);
  }
  sub_245D043A8(a1[1]);
  sub_245CF902C((uint64_t)(a1 + 2));
  return a1;
}

void sub_245D076BC()
{
  sub_245D076F4((uint64_t)&unk_25751AE90, 0);
  sub_245CFF754((uint64_t)sub_245CFEF80, (uint64_t)&unk_25751AE90);
}

uint64_t sub_245D076F4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516F6EF0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (atomic_load(dword_254419BF0))
    sub_245CFF030(dword_254419BF0);
  *(_QWORD *)(a1 + 152) = &qword_25751AE78;
  *(_QWORD *)(a1 + 160) = &qword_25751AE78;
  *(_QWORD *)(a1 + 168) = &qword_25751AE78;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0x1F4000000001;
  *(_QWORD *)(a1 + 272) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 280) = 1061158912;
  *(_OWORD *)(a1 + 284) = xmmword_245D21BE0;
  *(_DWORD *)(a1 + 300) = 16843009;
  *(_WORD *)(a1 + 304) = 257;
  *(_DWORD *)(a1 + 308) = 1;
  *(_QWORD *)(a1 + 312) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_245D07810(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  sub_245D0360C(v5);
  sub_245D0360C(v4);
  sub_245D0360C(v3);
  sub_245D0360C(v2);
  sub_245CF902C(v1);
  _Unwind_Resume(a1);
}

void sub_245D07848(uint64_t *a1)
{
  sub_245D0B5D8(a1);
  JUMPOUT(0x249546A74);
}

_QWORD *sub_245D0786C@<X0>(_QWORD *a1@<X8>)
{
  return sub_245CF7F30(a1, "sentencepiece.TrainerSpec");
}

uint64_t sub_245D0787C()
{
  return sub_245D0B524(0);
}

uint64_t sub_245D07884(uint64_t a1, uint64_t a2)
{
  return sub_245D0B524(a2);
}

uint64_t sub_245D0788C(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  sub_245CF9D90((uint64_t *)(a1 + 16));
  sub_245CF946C(a1 + 56);
  sub_245CF946C(a1 + 80);
  sub_245CF946C(a1 + 104);
  result = sub_245CF946C(a1 + 128);
  v3 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v3)
    goto LABEL_11;
  if ((v3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_28;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_28;
    }
LABEL_4:
    if ((v3 & 4) == 0)
      goto LABEL_5;
LABEL_32:
    v8 = *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      if ((v3 & 8) != 0)
        goto LABEL_36;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
      if ((v3 & 8) != 0)
        goto LABEL_36;
    }
LABEL_6:
    if ((v3 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
  if ((v3 & 2) == 0)
    goto LABEL_4;
LABEL_28:
  v7 = *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(_BYTE **)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    if ((v3 & 4) != 0)
      goto LABEL_32;
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 23) = 0;
    if ((v3 & 4) != 0)
      goto LABEL_32;
  }
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_36:
  result = (uint64_t)sub_245CF28C4(*(std::string **)(a1 + 176), &off_25751A190);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
LABEL_38:
    result = (uint64_t)sub_245CF28C4(*(std::string **)(a1 + 192), &off_25751A130);
    if ((v3 & 0x40) == 0)
    {
LABEL_9:
      if ((v3 & 0x80) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_37:
  result = (uint64_t)sub_245CF28C4(*(std::string **)(a1 + 184), &off_25751A110);
  if ((v3 & 0x20) != 0)
    goto LABEL_38;
LABEL_8:
  if ((v3 & 0x40) == 0)
    goto LABEL_9;
LABEL_39:
  result = (uint64_t)sub_245CF28C4(*(std::string **)(a1 + 200), &off_25751A150);
  if ((v3 & 0x80) != 0)
LABEL_10:
    result = (uint64_t)sub_245CF28C4(*(std::string **)(a1 + 208), &off_25751A170);
LABEL_11:
  if ((v3 & 0xFF00) != 0)
  {
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0x1F4000000001;
  }
  if (HIBYTE(v3))
  {
    *(_QWORD *)(a1 + 272) = 0xF42403F7FDF3BLL;
    *(_DWORD *)(a1 + 280) = 1061158912;
    *(_OWORD *)(a1 + 284) = xmmword_245D21BE0;
    *(_BYTE *)(a1 + 300) = 1;
  }
  if (*(_BYTE *)(a1 + 44))
  {
    *(_BYTE *)(a1 + 305) = 1;
    *(_DWORD *)(a1 + 301) = 16843009;
    *(_DWORD *)(a1 + 308) = 1;
    *(_QWORD *)(a1 + 312) = 0xFFFFFFFF00000002;
  }
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_245D07AB4(uint64_t a1)
{
  return sub_245CFACA8(a1 + 16);
}

uint64_t sub_245D07AC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;

  v2 = sub_245CFDC6C(a1 + 16);
  v3 = *(unsigned int *)(a1 + 64);
  v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    v5 = (uint64_t *)(*(_QWORD *)(a1 + 72) + 8);
    do
    {
      v6 = *v5++;
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = *(_QWORD *)(v6 + 8);
      if ((v7 & 0x80u) == 0)
        v8 = v7;
      v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      --v3;
    }
    while (v3);
  }
  v9 = *(unsigned int *)(a1 + 88);
  v10 = v4 + v9;
  if ((int)v9 >= 1)
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 96) + 8);
    do
    {
      v12 = *v11++;
      v13 = *(unsigned __int8 *)(v12 + 23);
      v14 = *(_QWORD *)(v12 + 8);
      if ((v13 & 0x80u) == 0)
        v14 = v13;
      v10 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      --v9;
    }
    while (v9);
  }
  v15 = *(unsigned int *)(a1 + 112);
  v16 = v10 + 2 * v15;
  if ((int)v15 >= 1)
  {
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 8);
    do
    {
      v18 = *v17++;
      v19 = *(unsigned __int8 *)(v18 + 23);
      v20 = *(_QWORD *)(v18 + 8);
      if ((v19 & 0x80u) == 0)
        v20 = v19;
      v16 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6);
      --v15;
    }
    while (v15);
  }
  v21 = *(unsigned int *)(a1 + 136);
  result = v16 + 2 * v21;
  if ((int)v21 >= 1)
  {
    v23 = (uint64_t *)(*(_QWORD *)(a1 + 144) + 8);
    do
    {
      v24 = *v23++;
      v25 = *(unsigned __int8 *)(v24 + 23);
      v26 = *(_QWORD *)(v24 + 8);
      if ((v25 & 0x80u) == 0)
        v26 = v25;
      result += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6);
      --v21;
    }
    while (v21);
  }
  v27 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v27)
    goto LABEL_33;
  if ((v27 & 1) != 0)
  {
    v54 = *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    v55 = *(unsigned __int8 *)(v54 + 23);
    v56 = *(_QWORD *)(v54 + 8);
    if ((v55 & 0x80u) == 0)
      v56 = v55;
    result += v56 + ((9 * (__clz(v56 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v27 & 2) == 0)
    {
LABEL_24:
      if ((v27 & 4) == 0)
        goto LABEL_25;
      goto LABEL_121;
    }
  }
  else if ((v27 & 2) == 0)
  {
    goto LABEL_24;
  }
  v57 = *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  v58 = *(unsigned __int8 *)(v57 + 23);
  v59 = *(_QWORD *)(v57 + 8);
  if ((v58 & 0x80u) == 0)
    v59 = v58;
  result += v59 + ((9 * (__clz(v59 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v27 & 4) == 0)
  {
LABEL_25:
    if ((v27 & 8) == 0)
      goto LABEL_26;
    goto LABEL_124;
  }
LABEL_121:
  v60 = *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
  v61 = *(unsigned __int8 *)(v60 + 23);
  v62 = *(_QWORD *)(v60 + 8);
  if ((v61 & 0x80u) == 0)
    v62 = v61;
  result += v62 + ((9 * (__clz(v62 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v27 & 8) == 0)
  {
LABEL_26:
    if ((v27 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_127;
  }
LABEL_124:
  v63 = *(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  v64 = *(unsigned __int8 *)(v63 + 23);
  v65 = *(_QWORD *)(v63 + 8);
  if ((v64 & 0x80u) == 0)
    v65 = v64;
  result += v65 + ((9 * (__clz(v65 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v27 & 0x10) == 0)
  {
LABEL_27:
    if ((v27 & 0x20) == 0)
      goto LABEL_28;
LABEL_130:
    v69 = *(_QWORD *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
    v70 = *(unsigned __int8 *)(v69 + 23);
    v71 = *(_QWORD *)(v69 + 8);
    if ((v70 & 0x80u) == 0)
      v71 = v70;
    result += v71 + ((9 * (__clz(v71 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v27 & 0x40) == 0)
    {
LABEL_29:
      if ((v27 & 0x80) == 0)
        goto LABEL_33;
      goto LABEL_30;
    }
    goto LABEL_133;
  }
LABEL_127:
  v66 = *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
  v67 = *(unsigned __int8 *)(v66 + 23);
  v68 = *(_QWORD *)(v66 + 8);
  if ((v67 & 0x80u) == 0)
    v68 = v67;
  result += v68 + ((9 * (__clz(v68 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v27 & 0x20) != 0)
    goto LABEL_130;
LABEL_28:
  if ((v27 & 0x40) == 0)
    goto LABEL_29;
LABEL_133:
  v72 = *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
  v73 = *(unsigned __int8 *)(v72 + 23);
  v74 = *(_QWORD *)(v72 + 8);
  if ((v73 & 0x80u) == 0)
    v74 = v73;
  result += v74 + ((9 * (__clz(v74 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v27 & 0x80) != 0)
  {
LABEL_30:
    v28 = *(_QWORD *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
    v29 = *(unsigned __int8 *)(v28 + 23);
    v30 = *(_QWORD *)(v28 + 8);
    if ((v29 & 0x80u) == 0)
      v30 = v29;
    result += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v27 & 0xFF00) == 0)
    goto LABEL_51;
  if ((v27 & 0x100) != 0)
  {
    v75 = *(_DWORD *)(a1 + 216);
    v76 = (9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6;
    if (v75 >= 0)
      v77 = v76;
    else
      v77 = 10;
    result += v77 + 1;
    if ((v27 & 0x200) == 0)
    {
LABEL_36:
      if ((v27 & 0x400) == 0)
        goto LABEL_37;
LABEL_145:
      result += ((9 * (__clz(*(_QWORD *)(a1 + 224) | 1) ^ 0x3F) + 73) >> 6) + 1;
      if ((v27 & 0x800) != 0)
        goto LABEL_38;
      goto LABEL_42;
    }
  }
  else if ((v27 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  v78 = *(_DWORD *)(a1 + 220);
  v79 = (9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6;
  if (v78 >= 0)
    v80 = v79;
  else
    v80 = 10;
  result += v80 + 1;
  if ((v27 & 0x400) != 0)
    goto LABEL_145;
LABEL_37:
  if ((v27 & 0x800) != 0)
  {
LABEL_38:
    v31 = *(_DWORD *)(a1 + 232);
    v32 = (9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6;
    if (v31 >= 0)
      v33 = v32;
    else
      v33 = 10;
    result += v33 + 1;
  }
LABEL_42:
  v34 = result + 3;
  if ((v27 & 0x1000) == 0)
    v34 = result;
  if ((v27 & 0x2000) != 0)
    v34 += 3;
  if ((v27 & 0x4000) != 0)
    v34 += 3;
  if ((v27 & 0x8000) != 0)
    result = v34 + 3;
  else
    result = v34;
LABEL_51:
  if ((v27 & 0xFF0000) == 0)
    goto LABEL_73;
  v35 = result + 3;
  if ((v27 & 0x10000) == 0)
    v35 = result;
  if ((v27 & 0x20000) != 0)
    v35 += 3;
  if ((v27 & 0x40000) != 0)
    v35 += 3;
  if ((v27 & 0x80000) != 0)
  {
    v36 = *(_DWORD *)(a1 + 244);
    v37 = (9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6;
    if (v36 >= 0)
      v38 = v37;
    else
      v38 = 10;
    v35 += v38 + 2;
  }
  if ((v27 & 0x100000) != 0)
    result = v35 + 6;
  else
    result = v35;
  if ((v27 & 0x200000) != 0)
  {
    result += ((9 * (__clz(*(_QWORD *)(a1 + 256) | 1) ^ 0x3F) + 73) >> 6) + 2;
    if ((v27 & 0x400000) == 0)
    {
LABEL_68:
      if ((v27 & 0x800000) == 0)
        goto LABEL_73;
      goto LABEL_69;
    }
  }
  else if ((v27 & 0x400000) == 0)
  {
    goto LABEL_68;
  }
  v81 = *(_DWORD *)(a1 + 264);
  v82 = (9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6;
  if (v81 >= 0)
    v83 = v82;
  else
    v83 = 10;
  result += v83 + 1;
  if ((v27 & 0x800000) != 0)
  {
LABEL_69:
    v39 = *(_DWORD *)(a1 + 268);
    v40 = (9 * (__clz(v39 | 1) ^ 0x1F) + 73) >> 6;
    if (v39 >= 0)
      v41 = v40;
    else
      v41 = 10;
    result += v41 + 1;
  }
LABEL_73:
  if (!HIBYTE(v27))
    goto LABEL_94;
  v42 = result + 5;
  if ((v27 & 0x1000000) == 0)
    v42 = result;
  if ((v27 & 0x2000000) != 0)
  {
    v43 = *(_DWORD *)(a1 + 276);
    v44 = (9 * (__clz(v43 | 1) ^ 0x1F) + 73) >> 6;
    if (v43 >= 0)
      v45 = v44;
    else
      v45 = 10;
    v42 += v45 + 1;
  }
  if ((v27 & 0x4000000) != 0)
    v42 += 5;
  if ((v27 & 0x8000000) != 0)
  {
    v90 = *(_DWORD *)(a1 + 284);
    v91 = (9 * (__clz(v90 | 1) ^ 0x1F) + 73) >> 6;
    if (v90 >= 0)
      v92 = v91;
    else
      v92 = 10;
    v42 += v92 + 2;
    if ((v27 & 0x10000000) == 0)
    {
LABEL_85:
      if ((v27 & 0x20000000) == 0)
        goto LABEL_86;
LABEL_170:
      v96 = *(_DWORD *)(a1 + 292);
      v97 = ((9 * (__clz(v96 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v96 >= 0)
        v98 = v97;
      else
        v98 = 12;
      v42 += v98;
      if ((v27 & 0x40000000) == 0)
        goto LABEL_91;
      goto LABEL_87;
    }
  }
  else if ((v27 & 0x10000000) == 0)
  {
    goto LABEL_85;
  }
  v93 = *(_DWORD *)(a1 + 288);
  v94 = ((9 * (__clz(v93 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v93 >= 0)
    v95 = v94;
  else
    v95 = 12;
  v42 += v95;
  if ((v27 & 0x20000000) != 0)
    goto LABEL_170;
LABEL_86:
  if ((v27 & 0x40000000) != 0)
  {
LABEL_87:
    v46 = *(_DWORD *)(a1 + 296);
    v47 = ((9 * (__clz(v46 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v46 >= 0)
      v48 = v47;
    else
      v48 = 12;
    v42 += v48;
  }
LABEL_91:
  if (v27 >= 0)
    result = v42;
  else
    result = v42 + 3;
LABEL_94:
  if (!*(_BYTE *)(a1 + 44))
    goto LABEL_113;
  v49 = result + 3;
  if ((*(_BYTE *)(a1 + 44) & 1) == 0)
    v49 = result;
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
    v49 += 3;
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
    v49 += 3;
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
    v49 += 3;
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
    result = v49 + 3;
  else
    result = v49;
  if ((*(_BYTE *)(a1 + 44) & 0x20) != 0)
  {
    v84 = *(_DWORD *)(a1 + 308);
    v85 = ((9 * (__clz(v84 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v84 >= 0)
      v86 = v85;
    else
      v86 = 12;
    result += v86;
    if ((*(_BYTE *)(a1 + 44) & 0x40) == 0)
    {
LABEL_108:
      if ((*(_BYTE *)(a1 + 44) & 0x80) == 0)
        goto LABEL_113;
      goto LABEL_109;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 0x40) == 0)
  {
    goto LABEL_108;
  }
  v87 = *(_DWORD *)(a1 + 312);
  v88 = ((9 * (__clz(v87 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v87 >= 0)
    v89 = v88;
  else
    v89 = 12;
  result += v89;
  if ((*(_BYTE *)(a1 + 44) & 0x80) != 0)
  {
LABEL_109:
    v50 = *(_DWORD *)(a1 + 316);
    v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v50 >= 0)
      v52 = v51;
    else
      v52 = 12;
    result += v52;
  }
LABEL_113:
  v53 = *(_QWORD *)(a1 + 8);
  if ((v53 & 1) != 0)
  {
    v99 = v53 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v99 + 31) < 0)
      v100 = *(_QWORD *)(v99 + 16);
    else
      v100 = *(unsigned __int8 *)(v99 + 31);
    result += v100;
  }
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

uint64_t sub_245D082F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

char *sub_245D082FC(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  char v10;
  char *result;
  char *v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  char *v16;
  int *v17;
  int v18;
  int v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t **v26;
  char *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  char *v59;
  int v60;
  uint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  char *v65;
  int v66;
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char *v71;
  int v72;
  char *v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  int v81;
  char *v82;
  uint64_t v83;
  int v84;
  char *v85;
  uint64_t v86;
  int v87;
  char *v88;
  uint64_t v89;
  int v90;
  int *v91;
  int v92;
  int v93;
  std::string *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  int v99;
  int v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  int v107;
  char *v108;
  uint64_t v109;
  int v110;
  char *v111;
  uint64_t v112;
  int v113;
  char *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  std::string *v118;
  uint64_t v119;
  char *v120;
  int v121;
  uint64_t v122;
  char *v123;
  int v124;
  uint64_t v125;
  char *v126;
  int v127;
  uint64_t v128;
  char *v129;
  int v130;
  uint64_t v131;
  _QWORD *v132;
  char **v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  int v141;
  char *v142;
  uint64_t v143;
  int v144;
  int v145;
  char *v146;
  uint64_t v147;
  int v148;
  BOOL v149;
  std::string *v150;
  uint64_t v151;
  char i;
  uint64_t v153;
  char j;
  uint64_t v155;
  char k;
  uint64_t v157;
  char m;
  uint64_t v159;
  char n;
  uint64_t v161;
  char ii;
  uint64_t v163;
  char jj;
  uint64_t v165;
  char kk;
  uint64_t v167;
  char mm;
  uint64_t v169;
  char nn;
  uint64_t v171;
  char i1;
  uint64_t v173;
  char i2;
  uint64_t v175;
  char i3;
  uint64_t v177;
  char i4;
  uint64_t v179;
  char i5;
  uint64_t v181;
  char i6;
  uint64_t v183;
  char i7;
  uint64_t v185;
  char i8;
  uint64_t v187;
  char i9;
  uint64_t v189;
  char i10;
  uint64_t v191;
  char i11;
  uint64_t v193;
  char i12;
  uint64_t v195;
  char i13;
  uint64_t v197;
  char i14;
  uint64_t v199;
  char i15;
  uint64_t v201;
  char i16;
  uint64_t v203;
  char i17;
  uint64_t v205;
  char i18;
  uint64_t v207;
  char i19;
  std::string *v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t **v212;
  uint64_t **v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  char *v219;
  std::string *v220;

  v218 = (_QWORD *)(a1 + 208);
  v219 = a2;
  v216 = (_QWORD *)(a1 + 192);
  v217 = (_QWORD *)(a1 + 200);
  v214 = (_QWORD *)(a1 + 176);
  v215 = (_QWORD *)(a1 + 184);
  v213 = (uint64_t **)(a1 + 168);
  v5 = (uint64_t *)(a1 + 128);
  v6 = (uint64_t *)(a1 + 104);
  v211 = (uint64_t *)(a1 + 8);
  v212 = (uint64_t **)(a1 + 160);
  v7 = (uint64_t *)(a1 + 80);
  v8 = (uint64_t **)(a1 + 152);
  v9 = (uint64_t *)(a1 + 56);
  v210 = a1 + 16;
LABEL_2:
  while (2)
  {
    v10 = sub_245CFB088((uint64_t)a3, &v219, a3[11].i32[1]);
    result = v219;
    if ((v10 & 1) != 0)
      return result;
    v12 = v219 + 1;
    v13 = *v219;
    if (*v219 < 0)
    {
      v13 = v13 + (*v12 << 7) - 128;
      if (*v12 < 0)
      {
        v14 = 14;
        v15 = 2;
        while (1)
        {
          v13 += (v219[v15] - 1) << v14;
          if ((v219[v15] & 0x80000000) == 0)
            break;
          ++v15;
          v14 += 7;
          if (v15 == 5)
            return 0;
        }
        v12 = &v219[v15 + 1];
      }
      else
      {
        v12 = v219 + 2;
      }
    }
    v219 = v12;
    switch(v13 >> 3)
    {
      case 1u:
        if (v13 != 10)
          goto LABEL_252;
        v16 = v12 - 1;
        while (1)
        {
          v17 = *(int **)(a1 + 72);
          if (!v17)
            break;
          v18 = *(_DWORD *)(a1 + 64);
          v19 = *v17;
          if (v18 >= *v17)
          {
            if (v19 == *(_DWORD *)(a1 + 68))
            {
LABEL_19:
              if (v18 <= v19)
              {
                sub_245D034FC(v9, v19 - v18 + 1);
                v17 = *(int **)(a1 + 72);
              }
              v19 = *v17;
            }
            *v17 = v19 + 1;
            v21 = *v9;
            if (*v9)
            {
              if ((*(_BYTE *)(v21 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v21 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v21 + 32) + 32), &unk_2516F6D58, 24);
              v20 = (std::string *)sub_245CF1EEC((unint64_t *)v21, 0x18uLL, (uint64_t)sub_245CF25DC);
            }
            else
            {
              v20 = (std::string *)operator new();
            }
            v20->__r_.__value_.__r.__words[0] = 0;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v22 = *(_QWORD *)(a1 + 72);
            v23 = *(int *)(a1 + 64);
            *(_DWORD *)(a1 + 64) = v23 + 1;
            *(_QWORD *)(v22 + 8 * v23 + 8) = v20;
            goto LABEL_28;
          }
          *(_DWORD *)(a1 + 64) = v18 + 1;
          v20 = *(std::string **)&v17[2 * v18 + 2];
LABEL_28:
          result = (char *)sub_245D02AD4(v20, v16 + 1, (uint64_t)a3);
          v16 = result;
          if (!result)
            goto LABEL_441;
          if (*(_QWORD *)a3 <= (unint64_t)result || *result != 10)
            goto LABEL_247;
        }
        v18 = *(_DWORD *)(a1 + 64);
        v19 = *(_DWORD *)(a1 + 68);
        goto LABEL_19;
      case 2u:
        if (v13 != 18)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 1u;
        v24 = *(_QWORD *)(a1 + 8);
        v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFFELL);
        if ((v24 & 1) != 0)
          v25 = (_QWORD *)*v25;
        v26 = v8;
        goto LABEL_196;
      case 3u:
        if (v13 != 24)
          goto LABEL_252;
        v27 = v12 + 1;
        v28 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_378;
        v29 = *v27;
        v28 = (v28 + (v29 << 7) - 128);
        if ((v29 & 0x80) != 0)
        {
          v151 = 2;
          for (i = 14; ; i += 7)
          {
            v28 += (v12[v151] - 1) << i;
            if ((v12[v151] & 0x80000000) == 0)
              break;
            result = 0;
            if (++v151 == 10)
              return result;
          }
          v27 = &v12[v151 + 1];
        }
        else
        {
          v27 = v12 + 2;
        }
LABEL_378:
        v219 = v27;
        if ((v28 - 1) > 3)
        {
          if ((*v211 & 1) != 0)
            v209 = (std::string *)((*v211 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v209 = (std::string *)sub_245CFAE88(v211);
          sub_245D029D4(3, v28, v209);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x400000u;
          *(_DWORD *)(a1 + 264) = v28;
        }
        continue;
      case 4u:
        if (v13 != 32)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x800000u;
        v31 = v12 + 1;
        LODWORD(v30) = *v12;
        if ((v30 & 0x80) == 0)
          goto LABEL_381;
        v32 = *v31;
        v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          v153 = 2;
          for (j = 14; ; j += 7)
          {
            v30 += (v12[v153] - 1) << j;
            if ((v12[v153] & 0x80000000) == 0)
              break;
            if (++v153 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 268) = 0;
              return result;
            }
          }
          v31 = &v12[v153 + 1];
        }
        else
        {
          v31 = v12 + 2;
        }
LABEL_381:
        v219 = v31;
        *(_DWORD *)(a1 + 268) = v30;
        continue;
      case 5u:
        if (v13 != 42)
          goto LABEL_252;
        v16 = v12 - 1;
        while (1)
        {
          v33 = *(int **)(a1 + 96);
          if (!v33)
            break;
          v34 = *(_DWORD *)(a1 + 88);
          v35 = *v33;
          if (v34 >= *v33)
          {
            if (v35 == *(_DWORD *)(a1 + 92))
            {
LABEL_51:
              if (v34 <= v35)
              {
                sub_245D034FC(v7, v35 - v34 + 1);
                v33 = *(int **)(a1 + 96);
              }
              v35 = *v33;
            }
            *v33 = v35 + 1;
            v37 = *v7;
            if (*v7)
            {
              if ((*(_BYTE *)(v37 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v37 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v37 + 32) + 32), &unk_2516F6D58, 24);
              v36 = (std::string *)sub_245CF1EEC((unint64_t *)v37, 0x18uLL, (uint64_t)sub_245CF25DC);
            }
            else
            {
              v36 = (std::string *)operator new();
            }
            v36->__r_.__value_.__r.__words[0] = 0;
            v36->__r_.__value_.__l.__size_ = 0;
            v36->__r_.__value_.__r.__words[2] = 0;
            v38 = *(_QWORD *)(a1 + 96);
            v39 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v39 + 1;
            *(_QWORD *)(v38 + 8 * v39 + 8) = v36;
            goto LABEL_60;
          }
          *(_DWORD *)(a1 + 88) = v34 + 1;
          v36 = *(std::string **)&v33[2 * v34 + 2];
LABEL_60:
          result = (char *)sub_245D02AD4(v36, v16 + 1, (uint64_t)a3);
          v16 = result;
          if (!result)
            goto LABEL_441;
          if (*(_QWORD *)a3 <= (unint64_t)result || *result != 42)
            goto LABEL_247;
        }
        v34 = *(_DWORD *)(a1 + 88);
        v35 = *(_DWORD *)(a1 + 92);
        goto LABEL_51;
      case 6u:
        if (v13 != 48)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x100u;
        v41 = v12 + 1;
        LODWORD(v40) = *v12;
        if ((v40 & 0x80) == 0)
          goto LABEL_383;
        v42 = *v41;
        v40 = v40 + (v42 << 7) - 128;
        if (v42 < 0)
        {
          v155 = 2;
          for (k = 14; ; k += 7)
          {
            v40 += (v12[v155] - 1) << k;
            if ((v12[v155] & 0x80000000) == 0)
              break;
            if (++v155 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 216) = 0;
              return result;
            }
          }
          v41 = &v12[v155 + 1];
        }
        else
        {
          v41 = v12 + 2;
        }
LABEL_383:
        v219 = v41;
        *(_DWORD *)(a1 + 216) = v40;
        continue;
      case 7u:
        if (v13 != 58)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 2u;
        v43 = *(_QWORD *)(a1 + 8);
        v25 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL);
        if ((v43 & 1) != 0)
          v25 = (_QWORD *)*v25;
        v26 = v212;
        goto LABEL_196;
      case 0xAu:
        if (v13 != 85)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x1000000u;
        v44 = *(_DWORD *)v12;
        v16 = v12 + 4;
        *(_DWORD *)(a1 + 272) = v44;
        goto LABEL_247;
      case 0xBu:
        if (v13 != 88)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x400u;
        v45 = v12 + 1;
        v46 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_385;
        v47 = *v45;
        v46 = (v46 + (v47 << 7) - 128);
        if ((v47 & 0x80) != 0)
        {
          v157 = 2;
          for (m = 14; ; m += 7)
          {
            v46 += (v12[v157] - 1) << m;
            if ((v12[v157] & 0x80000000) == 0)
              break;
            if (++v157 == 10)
            {
              result = 0;
              *(_QWORD *)(a1 + 224) = 0;
              return result;
            }
          }
          v45 = &v12[v157 + 1];
        }
        else
        {
          v45 = v12 + 2;
        }
LABEL_385:
        v219 = v45;
        *(_QWORD *)(a1 + 224) = v46;
        continue;
      case 0xCu:
        if (v13 != 96)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x200u;
        v49 = v12 + 1;
        LODWORD(v48) = *v12;
        if ((v48 & 0x80) == 0)
          goto LABEL_387;
        v50 = *v49;
        v48 = v48 + (v50 << 7) - 128;
        if (v50 < 0)
        {
          v159 = 2;
          for (n = 14; ; n += 7)
          {
            v48 += (v12[v159] - 1) << n;
            if ((v12[v159] & 0x80000000) == 0)
              break;
            if (++v159 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 220) = 0;
              return result;
            }
          }
          v49 = &v12[v159 + 1];
        }
        else
        {
          v49 = v12 + 2;
        }
LABEL_387:
        v219 = v49;
        *(_DWORD *)(a1 + 220) = v48;
        continue;
      case 0xDu:
        if (v13 != 104)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x800u;
        v52 = v12 + 1;
        LODWORD(v51) = *v12;
        if ((v51 & 0x80) == 0)
          goto LABEL_389;
        v53 = *v52;
        v51 = v51 + (v53 << 7) - 128;
        if (v53 < 0)
        {
          v161 = 2;
          for (ii = 14; ; ii += 7)
          {
            v51 += (v12[v161] - 1) << ii;
            if ((v12[v161] & 0x80000000) == 0)
              break;
            if (++v161 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 232) = 0;
              return result;
            }
          }
          v52 = &v12[v161 + 1];
        }
        else
        {
          v52 = v12 + 2;
        }
LABEL_389:
        v219 = v52;
        *(_DWORD *)(a1 + 232) = v51;
        continue;
      case 0xEu:
        if (v13 != 112)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x2000000u;
        v55 = v12 + 1;
        LODWORD(v54) = *v12;
        if ((v54 & 0x80) == 0)
          goto LABEL_391;
        v56 = *v55;
        v54 = v54 + (v56 << 7) - 128;
        if (v56 < 0)
        {
          v163 = 2;
          for (jj = 14; ; jj += 7)
          {
            v54 += (v12[v163] - 1) << jj;
            if ((v12[v163] & 0x80000000) == 0)
              break;
            if (++v163 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 276) = 0;
              return result;
            }
          }
          v55 = &v12[v163 + 1];
        }
        else
        {
          v55 = v12 + 2;
        }
LABEL_391:
        v219 = v55;
        *(_DWORD *)(a1 + 276) = v54;
        continue;
      case 0xFu:
        if (v13 != 125)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x4000000u;
        v57 = *(_DWORD *)v12;
        v16 = v12 + 4;
        *(_DWORD *)(a1 + 280) = v57;
        goto LABEL_247;
      case 0x10u:
        if (v13 != 128)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x8000000u;
        v59 = v12 + 1;
        LODWORD(v58) = *v12;
        if ((v58 & 0x80) == 0)
          goto LABEL_393;
        v60 = *v59;
        v58 = v58 + (v60 << 7) - 128;
        if (v60 < 0)
        {
          v165 = 2;
          for (kk = 14; ; kk += 7)
          {
            v58 += (v12[v165] - 1) << kk;
            if ((v12[v165] & 0x80000000) == 0)
              break;
            if (++v165 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 284) = 0;
              return result;
            }
          }
          v59 = &v12[v165 + 1];
        }
        else
        {
          v59 = v12 + 2;
        }
LABEL_393:
        v219 = v59;
        *(_DWORD *)(a1 + 284) = v58;
        continue;
      case 0x11u:
        if (v13 != 136)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x10000000u;
        v62 = v12 + 1;
        LODWORD(v61) = *v12;
        if ((v61 & 0x80) == 0)
          goto LABEL_395;
        v63 = *v62;
        v61 = v61 + (v63 << 7) - 128;
        if (v63 < 0)
        {
          v167 = 2;
          for (mm = 14; ; mm += 7)
          {
            v61 += (v12[v167] - 1) << mm;
            if ((v12[v167] & 0x80000000) == 0)
              break;
            if (++v167 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 288) = 0;
              return result;
            }
          }
          v62 = &v12[v167 + 1];
        }
        else
        {
          v62 = v12 + 2;
        }
LABEL_395:
        v219 = v62;
        *(_DWORD *)(a1 + 288) = v61;
        continue;
      case 0x12u:
        if (v13 != 144)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
        v65 = v12 + 1;
        LODWORD(v64) = *v12;
        if ((v64 & 0x80) == 0)
          goto LABEL_397;
        v66 = *v65;
        v64 = v64 + (v66 << 7) - 128;
        if (v66 < 0)
        {
          v169 = 2;
          for (nn = 14; ; nn += 7)
          {
            v64 += (v12[v169] - 1) << nn;
            if ((v12[v169] & 0x80000000) == 0)
              break;
            if (++v169 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 292) = 0;
              return result;
            }
          }
          v65 = &v12[v169 + 1];
        }
        else
        {
          v65 = v12 + 2;
        }
LABEL_397:
        v219 = v65;
        *(_DWORD *)(a1 + 292) = v64;
        continue;
      case 0x13u:
        if (v13 != 152)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x80000000;
        v67 = v12 + 1;
        v68 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_399;
        v69 = *v67;
        v68 = (v68 + (v69 << 7) - 128);
        if ((v69 & 0x80) != 0)
        {
          v171 = 2;
          for (i1 = 14; ; i1 += 7)
          {
            v68 += (v12[v171] - 1) << i1;
            if ((v12[v171] & 0x80000000) == 0)
              break;
            if (++v171 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 300) = 0;
              return result;
            }
          }
          v67 = &v12[v171 + 1];
        }
        else
        {
          v67 = v12 + 2;
        }
LABEL_399:
        v219 = v67;
        *(_BYTE *)(a1 + 300) = v68 != 0;
        continue;
      case 0x14u:
        if (v13 != 160)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x40000000u;
        v71 = v12 + 1;
        LODWORD(v70) = *v12;
        if ((v70 & 0x80) == 0)
          goto LABEL_401;
        v72 = *v71;
        v70 = v70 + (v72 << 7) - 128;
        if (v72 < 0)
        {
          v173 = 2;
          for (i2 = 14; ; i2 += 7)
          {
            v70 += (v12[v173] - 1) << i2;
            if ((v12[v173] & 0x80000000) == 0)
              break;
            if (++v173 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 296) = 0;
              return result;
            }
          }
          v71 = &v12[v173 + 1];
        }
        else
        {
          v71 = v12 + 2;
        }
LABEL_401:
        v219 = v71;
        *(_DWORD *)(a1 + 296) = v70;
        continue;
      case 0x15u:
        if (v13 != 168)
          goto LABEL_252;
        *(_DWORD *)(a1 + 44) |= 1u;
        v73 = v12 + 1;
        v74 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_403;
        v75 = *v73;
        v74 = (v74 + (v75 << 7) - 128);
        if ((v75 & 0x80) != 0)
        {
          v175 = 2;
          for (i3 = 14; ; i3 += 7)
          {
            v74 += (v12[v175] - 1) << i3;
            if ((v12[v175] & 0x80000000) == 0)
              break;
            if (++v175 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 301) = 0;
              return result;
            }
          }
          v73 = &v12[v175 + 1];
        }
        else
        {
          v73 = v12 + 2;
        }
LABEL_403:
        v219 = v73;
        *(_BYTE *)(a1 + 301) = v74 != 0;
        continue;
      case 0x16u:
        if (v13 != 176)
          goto LABEL_252;
        *(_DWORD *)(a1 + 44) |= 4u;
        v76 = v12 + 1;
        v77 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_405;
        v78 = *v76;
        v77 = (v77 + (v78 << 7) - 128);
        if ((v78 & 0x80) != 0)
        {
          v177 = 2;
          for (i4 = 14; ; i4 += 7)
          {
            v77 += (v12[v177] - 1) << i4;
            if ((v12[v177] & 0x80000000) == 0)
              break;
            if (++v177 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 303) = 0;
              return result;
            }
          }
          v76 = &v12[v177 + 1];
        }
        else
        {
          v76 = v12 + 2;
        }
LABEL_405:
        v219 = v76;
        *(_BYTE *)(a1 + 303) = v77 != 0;
        continue;
      case 0x17u:
        if (v13 != 184)
          goto LABEL_252;
        *(_DWORD *)(a1 + 44) |= 2u;
        v79 = v12 + 1;
        v80 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_407;
        v81 = *v79;
        v80 = (v80 + (v81 << 7) - 128);
        if ((v81 & 0x80) != 0)
        {
          v179 = 2;
          for (i5 = 14; ; i5 += 7)
          {
            v80 += (v12[v179] - 1) << i5;
            if ((v12[v179] & 0x80000000) == 0)
              break;
            if (++v179 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 302) = 0;
              return result;
            }
          }
          v79 = &v12[v179 + 1];
        }
        else
        {
          v79 = v12 + 2;
        }
LABEL_407:
        v219 = v79;
        *(_BYTE *)(a1 + 302) = v80 != 0;
        continue;
      case 0x18u:
        if (v13 != 192)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x2000u;
        v82 = v12 + 1;
        v83 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_409;
        v84 = *v82;
        v83 = (v83 + (v84 << 7) - 128);
        if ((v84 & 0x80) != 0)
        {
          v181 = 2;
          for (i6 = 14; ; i6 += 7)
          {
            v83 += (v12[v181] - 1) << i6;
            if ((v12[v181] & 0x80000000) == 0)
              break;
            if (++v181 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 237) = 0;
              return result;
            }
          }
          v82 = &v12[v181 + 1];
        }
        else
        {
          v82 = v12 + 2;
        }
LABEL_409:
        v219 = v82;
        *(_BYTE *)(a1 + 237) = v83 != 0;
        continue;
      case 0x19u:
        if (v13 != 200)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x8000u;
        v85 = v12 + 1;
        v86 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_411;
        v87 = *v85;
        v86 = (v86 + (v87 << 7) - 128);
        if ((v87 & 0x80) != 0)
        {
          v183 = 2;
          for (i7 = 14; ; i7 += 7)
          {
            v86 += (v12[v183] - 1) << i7;
            if ((v12[v183] & 0x80000000) == 0)
              break;
            if (++v183 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 239) = 0;
              return result;
            }
          }
          v85 = &v12[v183 + 1];
        }
        else
        {
          v85 = v12 + 2;
        }
LABEL_411:
        v219 = v85;
        *(_BYTE *)(a1 + 239) = v86 != 0;
        continue;
      case 0x1Au:
        if (v13 != 208)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x4000u;
        v88 = v12 + 1;
        v89 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_413;
        v90 = *v88;
        v89 = (v89 + (v90 << 7) - 128);
        if ((v90 & 0x80) != 0)
        {
          v185 = 2;
          for (i8 = 14; ; i8 += 7)
          {
            v89 += (v12[v185] - 1) << i8;
            if ((v12[v185] & 0x80000000) == 0)
              break;
            if (++v185 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 238) = 0;
              return result;
            }
          }
          v88 = &v12[v185 + 1];
        }
        else
        {
          v88 = v12 + 2;
        }
LABEL_413:
        v219 = v88;
        *(_BYTE *)(a1 + 238) = v89 != 0;
        continue;
      case 0x1Eu:
        if (v13 != 242)
          goto LABEL_252;
        v16 = v12 - 2;
        while (1)
        {
          v91 = *(int **)(a1 + 120);
          if (!v91)
            break;
          v92 = *(_DWORD *)(a1 + 112);
          v93 = *v91;
          if (v92 >= *v91)
          {
            if (v93 == *(_DWORD *)(a1 + 116))
            {
LABEL_143:
              if (v92 <= v93)
              {
                sub_245D034FC(v6, v93 - v92 + 1);
                v91 = *(int **)(a1 + 120);
              }
              v93 = *v91;
            }
            *v91 = v93 + 1;
            v95 = *v6;
            if (*v6)
            {
              if ((*(_BYTE *)(v95 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v95 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v95 + 32) + 32), &unk_2516F6D58, 24);
              v94 = (std::string *)sub_245CF1EEC((unint64_t *)v95, 0x18uLL, (uint64_t)sub_245CF25DC);
            }
            else
            {
              v94 = (std::string *)operator new();
            }
            v94->__r_.__value_.__r.__words[0] = 0;
            v94->__r_.__value_.__l.__size_ = 0;
            v94->__r_.__value_.__r.__words[2] = 0;
            v96 = *(_QWORD *)(a1 + 120);
            v97 = *(int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v97 + 1;
            *(_QWORD *)(v96 + 8 * v97 + 8) = v94;
            goto LABEL_152;
          }
          *(_DWORD *)(a1 + 112) = v92 + 1;
          v94 = *(std::string **)&v91[2 * v92 + 2];
LABEL_152:
          result = (char *)sub_245D02AD4(v94, v16 + 2, (uint64_t)a3);
          v16 = result;
          if (!result)
            goto LABEL_441;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 498)
            goto LABEL_247;
        }
        v92 = *(_DWORD *)(a1 + 112);
        v93 = *(_DWORD *)(a1 + 116);
        goto LABEL_143;
      case 0x1Fu:
        if (v13 != 250)
          goto LABEL_252;
        v16 = v12 - 2;
        break;
      case 0x20u:
        if ((_BYTE)v13)
          goto LABEL_252;
        *(_DWORD *)(a1 + 44) |= 8u;
        v105 = v12 + 1;
        v106 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_415;
        v107 = *v105;
        v106 = (v106 + (v107 << 7) - 128);
        if ((v107 & 0x80) != 0)
        {
          v187 = 2;
          for (i9 = 14; ; i9 += 7)
          {
            v106 += (v12[v187] - 1) << i9;
            if ((v12[v187] & 0x80000000) == 0)
              break;
            if (++v187 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 304) = 0;
              return result;
            }
          }
          v105 = &v12[v187 + 1];
        }
        else
        {
          v105 = v12 + 2;
        }
LABEL_415:
        v219 = v105;
        *(_BYTE *)(a1 + 304) = v106 != 0;
        continue;
      case 0x21u:
        if (v13 != 8)
          goto LABEL_252;
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v108 = v12 + 1;
        v109 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_417;
        v110 = *v108;
        v109 = (v109 + (v110 << 7) - 128);
        if ((v110 & 0x80) != 0)
        {
          v189 = 2;
          for (i10 = 14; ; i10 += 7)
          {
            v109 += (v12[v189] - 1) << i10;
            if ((v12[v189] & 0x80000000) == 0)
              break;
            if (++v189 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 305) = 0;
              return result;
            }
          }
          v108 = &v12[v189 + 1];
        }
        else
        {
          v108 = v12 + 2;
        }
LABEL_417:
        v219 = v108;
        *(_BYTE *)(a1 + 305) = v109 != 0;
        continue;
      case 0x22u:
        if (v13 != 16)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x20000u;
        v111 = v12 + 1;
        v112 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_419;
        v113 = *v111;
        v112 = (v112 + (v113 << 7) - 128);
        if ((v113 & 0x80) != 0)
        {
          v191 = 2;
          for (i11 = 14; ; i11 += 7)
          {
            v112 += (v12[v191] - 1) << i11;
            if ((v12[v191] & 0x80000000) == 0)
              break;
            if (++v191 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 241) = 0;
              return result;
            }
          }
          v111 = &v12[v191 + 1];
        }
        else
        {
          v111 = v12 + 2;
        }
LABEL_419:
        v219 = v111;
        *(_BYTE *)(a1 + 241) = v112 != 0;
        continue;
      case 0x23u:
        if (v13 != 24)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x10000u;
        v114 = v12 + 1;
        v115 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_421;
        v116 = *v114;
        v115 = (v115 + (v116 << 7) - 128);
        if ((v116 & 0x80) != 0)
        {
          v193 = 2;
          for (i12 = 14; ; i12 += 7)
          {
            v115 += (v12[v193] - 1) << i12;
            if ((v12[v193] & 0x80000000) == 0)
              break;
            if (++v193 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 240) = 0;
              return result;
            }
          }
          v114 = &v12[v193 + 1];
        }
        else
        {
          v114 = v12 + 2;
        }
LABEL_421:
        v219 = v114;
        *(_BYTE *)(a1 + 240) = v115 != 0;
        continue;
      case 0x24u:
        if (v13 != 34)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 4u;
        v117 = *(_QWORD *)(a1 + 8);
        v25 = (_QWORD *)(v117 & 0xFFFFFFFFFFFFFFFELL);
        if ((v117 & 1) != 0)
          v25 = (_QWORD *)*v25;
        v26 = v213;
LABEL_196:
        v118 = (std::string *)sub_245CF26F8(v26, (uint64_t)v25);
        goto LABEL_234;
      case 0x28u:
        if (v13 != 64)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x80000u;
        v120 = v12 + 1;
        LODWORD(v119) = *v12;
        if ((v119 & 0x80) == 0)
          goto LABEL_423;
        v121 = *v120;
        v119 = v119 + (v121 << 7) - 128;
        if (v121 < 0)
        {
          v195 = 2;
          for (i13 = 14; ; i13 += 7)
          {
            v119 += (v12[v195] - 1) << i13;
            if ((v12[v195] & 0x80000000) == 0)
              break;
            if (++v195 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 244) = 0;
              return result;
            }
          }
          v120 = &v12[v195 + 1];
        }
        else
        {
          v120 = v12 + 2;
        }
LABEL_423:
        v219 = v120;
        *(_DWORD *)(a1 + 244) = v119;
        continue;
      case 0x29u:
        if (v13 != 72)
          goto LABEL_252;
        *(_DWORD *)(a1 + 44) |= 0x20u;
        v123 = v12 + 1;
        LODWORD(v122) = *v12;
        if ((v122 & 0x80) == 0)
          goto LABEL_425;
        v124 = *v123;
        v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          v197 = 2;
          for (i14 = 14; ; i14 += 7)
          {
            v122 += (v12[v197] - 1) << i14;
            if ((v12[v197] & 0x80000000) == 0)
              break;
            if (++v197 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 308) = 0;
              return result;
            }
          }
          v123 = &v12[v197 + 1];
        }
        else
        {
          v123 = v12 + 2;
        }
LABEL_425:
        v219 = v123;
        *(_DWORD *)(a1 + 308) = v122;
        continue;
      case 0x2Au:
        if (v13 != 80)
          goto LABEL_252;
        *(_DWORD *)(a1 + 44) |= 0x40u;
        v126 = v12 + 1;
        LODWORD(v125) = *v12;
        if ((v125 & 0x80) == 0)
          goto LABEL_427;
        v127 = *v126;
        v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          v199 = 2;
          for (i15 = 14; ; i15 += 7)
          {
            v125 += (v12[v199] - 1) << i15;
            if ((v12[v199] & 0x80000000) == 0)
              break;
            if (++v199 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 312) = 0;
              return result;
            }
          }
          v126 = &v12[v199 + 1];
        }
        else
        {
          v126 = v12 + 2;
        }
LABEL_427:
        v219 = v126;
        *(_DWORD *)(a1 + 312) = v125;
        continue;
      case 0x2Bu:
        if (v13 != 88)
          goto LABEL_252;
        *(_DWORD *)(a1 + 44) |= 0x80u;
        v129 = v12 + 1;
        LODWORD(v128) = *v12;
        if ((v128 & 0x80) == 0)
          goto LABEL_429;
        v130 = *v129;
        v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          v201 = 2;
          for (i16 = 14; ; i16 += 7)
          {
            v128 += (v12[v201] - 1) << i16;
            if ((v12[v201] & 0x80000000) == 0)
              break;
            if (++v201 == 10)
            {
              result = 0;
              *(_DWORD *)(a1 + 316) = 0;
              return result;
            }
          }
          v129 = &v12[v201 + 1];
        }
        else
        {
          v129 = v12 + 2;
        }
LABEL_429:
        v219 = v129;
        *(_DWORD *)(a1 + 316) = v128;
        continue;
      case 0x2Cu:
        if (v13 != 98)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 8u;
        v131 = *(_QWORD *)(a1 + 8);
        v132 = (_QWORD *)(v131 & 0xFFFFFFFFFFFFFFFELL);
        if ((v131 & 1) != 0)
          v132 = (_QWORD *)*v132;
        v133 = (char **)&off_25751A190;
        v134 = v214;
        goto LABEL_233;
      case 0x2Du:
        if (v13 != 106)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x10u;
        v135 = *(_QWORD *)(a1 + 8);
        v132 = (_QWORD *)(v135 & 0xFFFFFFFFFFFFFFFELL);
        if ((v135 & 1) != 0)
          v132 = (_QWORD *)*v132;
        v133 = &off_25751A110;
        v134 = v215;
        goto LABEL_233;
      case 0x2Eu:
        if (v13 != 114)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x20u;
        v136 = *(_QWORD *)(a1 + 8);
        v132 = (_QWORD *)(v136 & 0xFFFFFFFFFFFFFFFELL);
        if ((v136 & 1) != 0)
          v132 = (_QWORD *)*v132;
        v133 = &off_25751A130;
        v134 = v216;
        goto LABEL_233;
      case 0x2Fu:
        if (v13 != 122)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x40u;
        v137 = *(_QWORD *)(a1 + 8);
        v132 = (_QWORD *)(v137 & 0xFFFFFFFFFFFFFFFELL);
        if ((v137 & 1) != 0)
          v132 = (_QWORD *)*v132;
        v133 = &off_25751A150;
        v134 = v217;
        goto LABEL_233;
      case 0x30u:
        if (v13 != 130)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x80u;
        v138 = *(_QWORD *)(a1 + 8);
        v132 = (_QWORD *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if ((v138 & 1) != 0)
          v132 = (_QWORD *)*v132;
        v133 = &off_25751A170;
        v134 = v218;
LABEL_233:
        v118 = (std::string *)sub_245CF27A8(v134, v133, (uint64_t)v132);
LABEL_234:
        result = (char *)sub_245D02AD4(v118, v12, (uint64_t)a3);
        goto LABEL_235;
      case 0x31u:
        if (v13 != 136)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x40000u;
        v139 = v12 + 1;
        v140 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_431;
        v141 = *v139;
        v140 = (v140 + (v141 << 7) - 128);
        if ((v141 & 0x80) != 0)
        {
          v203 = 2;
          for (i17 = 14; ; i17 += 7)
          {
            v140 += (v12[v203] - 1) << i17;
            if ((v12[v203] & 0x80000000) == 0)
              break;
            if (++v203 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 242) = 0;
              return result;
            }
          }
          v139 = &v12[v203 + 1];
        }
        else
        {
          v139 = v12 + 2;
        }
LABEL_431:
        v219 = v139;
        *(_BYTE *)(a1 + 242) = v140 != 0;
        continue;
      case 0x32u:
        if (v13 != 144)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x1000u;
        v142 = v12 + 1;
        v143 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_433;
        v144 = *v142;
        v143 = (v143 + (v144 << 7) - 128);
        if ((v144 & 0x80) != 0)
        {
          v205 = 2;
          for (i18 = 14; ; i18 += 7)
          {
            v143 += (v12[v205] - 1) << i18;
            if ((v12[v205] & 0x80000000) == 0)
              break;
            if (++v205 == 10)
            {
              result = 0;
              *(_BYTE *)(a1 + 236) = 0;
              return result;
            }
          }
          v142 = &v12[v205 + 1];
        }
        else
        {
          v142 = v12 + 2;
        }
LABEL_433:
        v219 = v142;
        *(_BYTE *)(a1 + 236) = v143 != 0;
        continue;
      case 0x33u:
        if (v13 != 157)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x100000u;
        v145 = *(_DWORD *)v12;
        v16 = v12 + 4;
        *(_DWORD *)(a1 + 248) = v145;
        goto LABEL_247;
      case 0x34u:
        if (v13 != 160)
          goto LABEL_252;
        *(_DWORD *)(a1 + 40) |= 0x200000u;
        v146 = v12 + 1;
        v147 = *v12;
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_435;
        v148 = *v146;
        v147 = (v147 + (v148 << 7) - 128);
        if ((v148 & 0x80) != 0)
        {
          v207 = 2;
          for (i19 = 14; ; i19 += 7)
          {
            v147 += (v12[v207] - 1) << i19;
            if ((v12[v207] & 0x80000000) == 0)
              break;
            if (++v207 == 10)
            {
              result = 0;
              *(_QWORD *)(a1 + 256) = 0;
              return result;
            }
          }
          v146 = &v12[v207 + 1];
        }
        else
        {
          v146 = v12 + 2;
        }
LABEL_435:
        v219 = v146;
        *(_QWORD *)(a1 + 256) = v147;
        continue;
      default:
LABEL_252:
        if (v13)
          v149 = (v13 & 7) == 4;
        else
          v149 = 1;
        if (v149)
        {
          a3[10].i32[0] = v13 - 1;
          return v12;
        }
        else
        {
          if (v13 < 0x640)
          {
            if ((*v211 & 1) != 0)
              v150 = (std::string *)((*v211 & 0xFFFFFFFFFFFFFFFELL) + 8);
            else
              v150 = (std::string *)sub_245CFAE88(v211);
            v220 = v150;
            result = (char *)sub_245D02B38(v13, &v220, v12, a3);
          }
          else
          {
            result = (char *)sub_245CFAE20(v210, v13, v12, (uint64_t)&unk_25751AE90, v211, a3);
          }
LABEL_235:
          v219 = result;
          if (result)
            continue;
        }
        return result;
    }
    break;
  }
  while (1)
  {
    v98 = *(int **)(a1 + 144);
    if (!v98)
    {
      v99 = *(_DWORD *)(a1 + 136);
      v100 = *(_DWORD *)(a1 + 140);
LABEL_163:
      if (v99 <= v100)
      {
        sub_245D034FC(v5, v100 - v99 + 1);
        v98 = *(int **)(a1 + 144);
      }
      v100 = *v98;
      goto LABEL_166;
    }
    v99 = *(_DWORD *)(a1 + 136);
    v100 = *v98;
    if (v99 < *v98)
    {
      *(_DWORD *)(a1 + 136) = v99 + 1;
      v101 = *(std::string **)&v98[2 * v99 + 2];
      goto LABEL_172;
    }
    if (v100 == *(_DWORD *)(a1 + 140))
      goto LABEL_163;
LABEL_166:
    *v98 = v100 + 1;
    v102 = *v5;
    if (*v5)
    {
      if ((*(_BYTE *)(v102 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v102 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v102 + 32) + 32), &unk_2516F6D58, 24);
      v101 = (std::string *)sub_245CF1EEC((unint64_t *)v102, 0x18uLL, (uint64_t)sub_245CF25DC);
    }
    else
    {
      v101 = (std::string *)operator new();
    }
    v101->__r_.__value_.__r.__words[0] = 0;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v103 = *(_QWORD *)(a1 + 144);
    v104 = *(int *)(a1 + 136);
    *(_DWORD *)(a1 + 136) = v104 + 1;
    *(_QWORD *)(v103 + 8 * v104 + 8) = v101;
LABEL_172:
    result = (char *)sub_245D02AD4(v101, v16 + 2, (uint64_t)a3);
    v16 = result;
    if (!result)
      break;
    if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 506)
    {
LABEL_247:
      v219 = v16;
      goto LABEL_2;
    }
  }
LABEL_441:
  v219 = v16;
  return result;
}

char *sub_245D09D48(uint64_t a1, _BYTE *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  _BYTE *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  char v89;
  char v90;
  char v91;
  int v92;
  char v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  int64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  int64_t v106;
  _BYTE *v107;
  int v108;
  char v109;
  char v110;
  int v111;
  char v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  unint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _BYTE *v135;
  _BYTE *v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  char v140;
  char v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  _BYTE *v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;

  v6 = *(unsigned int *)(a1 + 64);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = 8 * v6;
    do
    {
      v9 = *(_QWORD **)(*(_QWORD *)(a1 + 72) + v7 + 8);
      if (*((char *)v9 + 23) < 0)
      {
        v10 = v9[1];
        if (v10 > 127)
          goto LABEL_12;
      }
      else
      {
        v10 = *((unsigned __int8 *)v9 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v10)
      {
        *a2 = 10;
        a2[1] = v10;
        if (*((char *)v9 + 23) < 0)
          v9 = (_QWORD *)*v9;
        v11 = a2 + 2;
        memcpy(a2 + 2, v9, v10);
        a2 = &v11[v10];
        goto LABEL_10;
      }
LABEL_12:
      a2 = (_BYTE *)sub_245CF897C(a3, 1, (uint64_t)v9, a2);
LABEL_10:
      v7 += 8;
    }
    while (v8 != v7);
  }
  v12 = *(_DWORD *)(a1 + 40);
  if ((v12 & 1) != 0)
  {
    a2 = sub_245D0404C(a3, 2u, *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v12 & 0x400000) == 0)
    {
LABEL_15:
      if ((v12 & 0x800000) == 0)
        goto LABEL_37;
      goto LABEL_16;
    }
  }
  else if ((v12 & 0x400000) == 0)
  {
    goto LABEL_15;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v14 = *(int *)(a1 + 264);
  *a2 = 24;
  if (v14 > 0x7F)
  {
    a2[1] = v14 | 0x80;
    v16 = v14 >> 7;
    if (v14 >> 14)
    {
      v21 = a2 + 2;
      do
      {
        v22 = v21;
        *v21++ = v16 | 0x80;
        v23 = v16 >> 7;
        v24 = v16 >> 14;
        v16 >>= 7;
      }
      while (v24);
      a2 = v22 + 2;
      *v21 = v23;
      if ((v12 & 0x800000) == 0)
        goto LABEL_37;
    }
    else
    {
      a2[2] = v16;
      a2 += 3;
      if ((v12 & 0x800000) == 0)
        goto LABEL_37;
    }
  }
  else
  {
    a2[1] = v14;
    a2 += 2;
    if ((v12 & 0x800000) == 0)
      goto LABEL_37;
  }
LABEL_16:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v13 = *(int *)(a1 + 268);
  *a2 = 32;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    v15 = v13 >> 7;
    if (v13 >> 14)
    {
      v17 = a2 + 2;
      do
      {
        v18 = v17;
        *v17++ = v15 | 0x80;
        v19 = v15 >> 7;
        v20 = v15 >> 14;
        v15 >>= 7;
      }
      while (v20);
      a2 = v18 + 2;
      *v17 = v19;
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
  }
LABEL_37:
  v25 = *(unsigned int *)(a1 + 88);
  if ((int)v25 >= 1)
  {
    v26 = 0;
    v27 = 8 * v25;
    do
    {
      v28 = *(_QWORD **)(*(_QWORD *)(a1 + 96) + v26 + 8);
      if (*((char *)v28 + 23) < 0)
      {
        v29 = v28[1];
        if (v29 > 127)
          goto LABEL_48;
      }
      else
      {
        v29 = *((unsigned __int8 *)v28 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v29)
      {
        *a2 = 42;
        a2[1] = v29;
        if (*((char *)v28 + 23) < 0)
          v28 = (_QWORD *)*v28;
        v30 = a2 + 2;
        memcpy(a2 + 2, v28, v29);
        a2 = &v30[v29];
        goto LABEL_46;
      }
LABEL_48:
      a2 = (_BYTE *)sub_245CF897C(a3, 5, (uint64_t)v28, a2);
LABEL_46:
      v26 += 8;
    }
    while (v27 != v26);
  }
  if ((v12 & 0x100) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v31 = *(int *)(a1 + 216);
    *a2 = 48;
    if (v31 > 0x7F)
    {
      a2[1] = v31 | 0x80;
      v32 = v31 >> 7;
      if (v31 >> 14)
      {
        v33 = a2 + 2;
        do
        {
          v34 = v33;
          *v33++ = v32 | 0x80;
          v35 = v32 >> 7;
          v36 = v32 >> 14;
          v32 >>= 7;
        }
        while (v36);
        a2 = v34 + 2;
        *v33 = v35;
        if ((v12 & 2) != 0)
          goto LABEL_74;
      }
      else
      {
        a2[2] = v32;
        a2 += 3;
        if ((v12 & 2) != 0)
          goto LABEL_74;
      }
    }
    else
    {
      a2[1] = v31;
      a2 += 2;
      if ((v12 & 2) != 0)
        goto LABEL_74;
    }
LABEL_51:
    if ((v12 & 0x1000000) == 0)
      goto LABEL_52;
    goto LABEL_75;
  }
  if ((v12 & 2) == 0)
    goto LABEL_51;
LABEL_74:
  a2 = sub_245D0404C(a3, 7u, *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v12 & 0x1000000) == 0)
  {
LABEL_52:
    if ((v12 & 0x400) == 0)
      goto LABEL_53;
    goto LABEL_78;
  }
LABEL_75:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v37 = *(_DWORD *)(a1 + 272);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v37;
  a2 += 5;
  if ((v12 & 0x400) == 0)
  {
LABEL_53:
    if ((v12 & 0x200) == 0)
      goto LABEL_54;
LABEL_89:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v44 = *(int *)(a1 + 220);
    *a2 = 96;
    if (v44 > 0x7F)
    {
      a2[1] = v44 | 0x80;
      v45 = v44 >> 7;
      if (v44 >> 14)
      {
        v46 = a2 + 2;
        do
        {
          v47 = v46;
          *v46++ = v45 | 0x80;
          v48 = v45 >> 7;
          v49 = v45 >> 14;
          v45 >>= 7;
        }
        while (v49);
        a2 = v47 + 2;
        *v46 = v48;
        if ((v12 & 0x800) != 0)
          goto LABEL_100;
      }
      else
      {
        a2[2] = v45;
        a2 += 3;
        if ((v12 & 0x800) != 0)
          goto LABEL_100;
      }
    }
    else
    {
      a2[1] = v44;
      a2 += 2;
      if ((v12 & 0x800) != 0)
        goto LABEL_100;
    }
LABEL_55:
    if ((v12 & 0x2000000) == 0)
      goto LABEL_56;
LABEL_111:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v56 = *(int *)(a1 + 276);
    *a2 = 112;
    if (v56 > 0x7F)
    {
      a2[1] = v56 | 0x80;
      v57 = v56 >> 7;
      if (v56 >> 14)
      {
        v58 = a2 + 2;
        do
        {
          v59 = v58;
          *v58++ = v57 | 0x80;
          v60 = v57 >> 7;
          v61 = v57 >> 14;
          v57 >>= 7;
        }
        while (v61);
        a2 = v59 + 2;
        *v58 = v60;
        if ((v12 & 0x4000000) != 0)
          goto LABEL_122;
      }
      else
      {
        a2[2] = v57;
        a2 += 3;
        if ((v12 & 0x4000000) != 0)
          goto LABEL_122;
      }
    }
    else
    {
      a2[1] = v56;
      a2 += 2;
      if ((v12 & 0x4000000) != 0)
        goto LABEL_122;
    }
LABEL_57:
    if ((v12 & 0x8000000) == 0)
      goto LABEL_58;
LABEL_125:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v63 = *(int *)(a1 + 284);
    *(_WORD *)a2 = 384;
    if (v63 > 0x7F)
    {
      a2[2] = v63 | 0x80;
      v64 = v63 >> 7;
      if (v63 >> 14)
      {
        v65 = a2 + 3;
        do
        {
          v66 = v65;
          *v65++ = v64 | 0x80;
          v67 = v64 >> 7;
          v68 = v64 >> 14;
          v64 >>= 7;
        }
        while (v68);
        a2 = v66 + 2;
        *v65 = v67;
        if ((v12 & 0x10000000) != 0)
          goto LABEL_136;
      }
      else
      {
        a2[3] = v64;
        a2 += 4;
        if ((v12 & 0x10000000) != 0)
          goto LABEL_136;
      }
    }
    else
    {
      a2[2] = v63;
      a2 += 3;
      if ((v12 & 0x10000000) != 0)
        goto LABEL_136;
    }
LABEL_59:
    if ((v12 & 0x20000000) == 0)
      goto LABEL_60;
LABEL_147:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v75 = *(int *)(a1 + 292);
    *(_WORD *)a2 = 400;
    if (v75 > 0x7F)
    {
      a2[2] = v75 | 0x80;
      v76 = v75 >> 7;
      if (v75 >> 14)
      {
        v77 = a2 + 3;
        do
        {
          v78 = v77;
          *v77++ = v76 | 0x80;
          v79 = v76 >> 7;
          v80 = v76 >> 14;
          v76 >>= 7;
        }
        while (v80);
        a2 = v78 + 2;
        *v77 = v79;
        if (v12 < 0)
          goto LABEL_158;
      }
      else
      {
        a2[3] = v76;
        a2 += 4;
        if (v12 < 0)
          goto LABEL_158;
      }
    }
    else
    {
      a2[2] = v75;
      a2 += 3;
      if (v12 < 0)
        goto LABEL_158;
    }
LABEL_61:
    if ((v12 & 0x40000000) == 0)
      goto LABEL_170;
    goto LABEL_161;
  }
LABEL_78:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v38 = *(_QWORD *)(a1 + 224);
  *a2 = 88;
  if (v38 > 0x7F)
  {
    a2[1] = v38 | 0x80;
    v39 = v38 >> 7;
    if (v38 >> 14)
    {
      v40 = a2 + 2;
      do
      {
        v41 = v40;
        *v40++ = v39 | 0x80;
        v42 = v39 >> 7;
        v43 = v39 >> 14;
        v39 >>= 7;
      }
      while (v43);
      a2 = v41 + 2;
      *v40 = v42;
      if ((v12 & 0x200) != 0)
        goto LABEL_89;
    }
    else
    {
      a2[2] = v39;
      a2 += 3;
      if ((v12 & 0x200) != 0)
        goto LABEL_89;
    }
  }
  else
  {
    a2[1] = v38;
    a2 += 2;
    if ((v12 & 0x200) != 0)
      goto LABEL_89;
  }
LABEL_54:
  if ((v12 & 0x800) == 0)
    goto LABEL_55;
LABEL_100:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v50 = *(int *)(a1 + 232);
  *a2 = 104;
  if (v50 > 0x7F)
  {
    a2[1] = v50 | 0x80;
    v51 = v50 >> 7;
    if (v50 >> 14)
    {
      v52 = a2 + 2;
      do
      {
        v53 = v52;
        *v52++ = v51 | 0x80;
        v54 = v51 >> 7;
        v55 = v51 >> 14;
        v51 >>= 7;
      }
      while (v55);
      a2 = v53 + 2;
      *v52 = v54;
      if ((v12 & 0x2000000) != 0)
        goto LABEL_111;
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v12 & 0x2000000) != 0)
        goto LABEL_111;
    }
  }
  else
  {
    a2[1] = v50;
    a2 += 2;
    if ((v12 & 0x2000000) != 0)
      goto LABEL_111;
  }
LABEL_56:
  if ((v12 & 0x4000000) == 0)
    goto LABEL_57;
LABEL_122:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v62 = *(_DWORD *)(a1 + 280);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v62;
  a2 += 5;
  if ((v12 & 0x8000000) != 0)
    goto LABEL_125;
LABEL_58:
  if ((v12 & 0x10000000) == 0)
    goto LABEL_59;
LABEL_136:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v69 = *(int *)(a1 + 288);
  *(_WORD *)a2 = 392;
  if (v69 > 0x7F)
  {
    a2[2] = v69 | 0x80;
    v70 = v69 >> 7;
    if (v69 >> 14)
    {
      v71 = a2 + 3;
      do
      {
        v72 = v71;
        *v71++ = v70 | 0x80;
        v73 = v70 >> 7;
        v74 = v70 >> 14;
        v70 >>= 7;
      }
      while (v74);
      a2 = v72 + 2;
      *v71 = v73;
      if ((v12 & 0x20000000) != 0)
        goto LABEL_147;
    }
    else
    {
      a2[3] = v70;
      a2 += 4;
      if ((v12 & 0x20000000) != 0)
        goto LABEL_147;
    }
  }
  else
  {
    a2[2] = v69;
    a2 += 3;
    if ((v12 & 0x20000000) != 0)
      goto LABEL_147;
  }
LABEL_60:
  if ((v12 & 0x80000000) == 0)
    goto LABEL_61;
LABEL_158:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v81 = *(_BYTE *)(a1 + 300);
  *(_WORD *)a2 = 408;
  a2[2] = v81;
  a2 += 3;
  if ((v12 & 0x40000000) != 0)
  {
LABEL_161:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v82 = *(int *)(a1 + 296);
    *(_WORD *)a2 = 416;
    if (v82 > 0x7F)
    {
      a2[2] = v82 | 0x80;
      v83 = v82 >> 7;
      if (v82 >> 14)
      {
        v84 = a2 + 3;
        do
        {
          v85 = v84;
          *v84++ = v83 | 0x80;
          v86 = v83 >> 7;
          v87 = v83 >> 14;
          v83 >>= 7;
        }
        while (v87);
        a2 = v85 + 2;
        *v84 = v86;
      }
      else
      {
        a2[3] = v83;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v82;
      a2 += 3;
    }
  }
LABEL_170:
  v88 = *(_DWORD *)(a1 + 44);
  if ((v88 & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v89 = *(_BYTE *)(a1 + 301);
    *(_WORD *)a2 = 424;
    a2[2] = v89;
    a2 += 3;
    if ((v88 & 4) == 0)
    {
LABEL_172:
      if ((v88 & 2) == 0)
        goto LABEL_183;
      goto LABEL_180;
    }
  }
  else if ((v88 & 4) == 0)
  {
    goto LABEL_172;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v90 = *(_BYTE *)(a1 + 303);
  *(_WORD *)a2 = 432;
  a2[2] = v90;
  a2 += 3;
  if ((v88 & 2) != 0)
  {
LABEL_180:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v91 = *(_BYTE *)(a1 + 302);
    *(_WORD *)a2 = 440;
    a2[2] = v91;
    a2 += 3;
  }
LABEL_183:
  v92 = *(_DWORD *)(a1 + 40);
  if ((v92 & 0x2000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v93 = *(_BYTE *)(a1 + 237);
    *(_WORD *)a2 = 448;
    a2[2] = v93;
    a2 += 3;
    if ((v92 & 0x8000) == 0)
    {
LABEL_185:
      if ((v92 & 0x4000) == 0)
        goto LABEL_196;
      goto LABEL_193;
    }
  }
  else if ((v92 & 0x8000) == 0)
  {
    goto LABEL_185;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v94 = *(_BYTE *)(a1 + 239);
  *(_WORD *)a2 = 456;
  a2[2] = v94;
  a2 += 3;
  if ((v92 & 0x4000) != 0)
  {
LABEL_193:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v95 = *(_BYTE *)(a1 + 238);
    *(_WORD *)a2 = 464;
    a2[2] = v95;
    a2 += 3;
  }
LABEL_196:
  v96 = *(unsigned int *)(a1 + 112);
  if ((int)v96 >= 1)
  {
    v97 = 0;
    v98 = 8 * v96;
    do
    {
      v99 = *(_QWORD **)(*(_QWORD *)(a1 + 120) + v97 + 8);
      if (*((char *)v99 + 23) < 0)
      {
        v100 = v99[1];
        if (v100 > 127)
          goto LABEL_207;
      }
      else
      {
        v100 = *((unsigned __int8 *)v99 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 13 >= v100)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v100;
        if (*((char *)v99 + 23) < 0)
          v99 = (_QWORD *)*v99;
        v101 = a2 + 3;
        memcpy(a2 + 3, v99, v100);
        a2 = &v101[v100];
        goto LABEL_205;
      }
LABEL_207:
      a2 = (_BYTE *)sub_245CF897C(a3, 30, (uint64_t)v99, a2);
LABEL_205:
      v97 += 8;
    }
    while (v98 != v97);
  }
  v102 = *(unsigned int *)(a1 + 136);
  if ((int)v102 >= 1)
  {
    v103 = 0;
    v104 = 8 * v102;
    do
    {
      v105 = *(_QWORD **)(*(_QWORD *)(a1 + 144) + v103 + 8);
      if (*((char *)v105 + 23) < 0)
      {
        v106 = v105[1];
        if (v106 > 127)
          goto LABEL_219;
      }
      else
      {
        v106 = *((unsigned __int8 *)v105 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 13 >= v106)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v106;
        if (*((char *)v105 + 23) < 0)
          v105 = (_QWORD *)*v105;
        v107 = a2 + 3;
        memcpy(a2 + 3, v105, v106);
        a2 = &v107[v106];
        goto LABEL_217;
      }
LABEL_219:
      a2 = (_BYTE *)sub_245CF897C(a3, 31, (uint64_t)v105, a2);
LABEL_217:
      v103 += 8;
    }
    while (v104 != v103);
  }
  v108 = *(_DWORD *)(a1 + 44);
  if ((v108 & 8) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v109 = *(_BYTE *)(a1 + 304);
    *(_WORD *)a2 = 640;
    a2[2] = v109;
    a2 += 3;
  }
  if ((v108 & 0x10) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v110 = *(_BYTE *)(a1 + 305);
    *(_WORD *)a2 = 648;
    a2[2] = v110;
    a2 += 3;
  }
  v111 = *(_DWORD *)(a1 + 40);
  if ((v111 & 0x20000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v112 = *(_BYTE *)(a1 + 241);
    *(_WORD *)a2 = 656;
    a2[2] = v112;
    a2 += 3;
    if ((v111 & 0x10000) == 0)
    {
LABEL_230:
      if ((v111 & 4) == 0)
        goto LABEL_231;
      goto LABEL_239;
    }
  }
  else if ((v111 & 0x10000) == 0)
  {
    goto LABEL_230;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v113 = *(_BYTE *)(a1 + 240);
  *(_WORD *)a2 = 664;
  a2[2] = v113;
  a2 += 3;
  if ((v111 & 4) == 0)
  {
LABEL_231:
    if ((v111 & 0x80000) == 0)
      goto LABEL_249;
    goto LABEL_240;
  }
LABEL_239:
  a2 = sub_245D0404C(a3, 0x24u, *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v111 & 0x80000) == 0)
    goto LABEL_249;
LABEL_240:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v114 = *(int *)(a1 + 244);
  *(_WORD *)a2 = 704;
  if (v114 > 0x7F)
  {
    a2[2] = v114 | 0x80;
    v115 = v114 >> 7;
    if (v114 >> 14)
    {
      v116 = a2 + 3;
      do
      {
        v117 = v116;
        *v116++ = v115 | 0x80;
        v118 = v115 >> 7;
        v119 = v115 >> 14;
        v115 >>= 7;
      }
      while (v119);
      a2 = v117 + 2;
      *v116 = v118;
    }
    else
    {
      a2[3] = v115;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v114;
    a2 += 3;
  }
LABEL_249:
  v120 = *(_DWORD *)(a1 + 44);
  if ((v120 & 0x20) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v122 = *(int *)(a1 + 308);
    *(_WORD *)a2 = 712;
    if (v122 > 0x7F)
    {
      a2[2] = v122 | 0x80;
      v124 = v122 >> 7;
      if (v122 >> 14)
      {
        v129 = a2 + 3;
        do
        {
          v130 = v129;
          *v129++ = v124 | 0x80;
          v131 = v124 >> 7;
          v132 = v124 >> 14;
          v124 >>= 7;
        }
        while (v132);
        a2 = v130 + 2;
        *v129 = v131;
        if ((v120 & 0x40) != 0)
          goto LABEL_272;
      }
      else
      {
        a2[3] = v124;
        a2 += 4;
        if ((v120 & 0x40) != 0)
          goto LABEL_272;
      }
    }
    else
    {
      a2[2] = v122;
      a2 += 3;
      if ((v120 & 0x40) != 0)
        goto LABEL_272;
    }
LABEL_251:
    if ((v120 & 0x80) == 0)
      goto LABEL_283;
    goto LABEL_252;
  }
  if ((v120 & 0x40) == 0)
    goto LABEL_251;
LABEL_272:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v133 = *(int *)(a1 + 312);
  *(_WORD *)a2 = 720;
  if (v133 > 0x7F)
  {
    a2[2] = v133 | 0x80;
    v134 = v133 >> 7;
    if (v133 >> 14)
    {
      v135 = a2 + 3;
      do
      {
        v136 = v135;
        *v135++ = v134 | 0x80;
        v137 = v134 >> 7;
        v138 = v134 >> 14;
        v134 >>= 7;
      }
      while (v138);
      a2 = v136 + 2;
      *v135 = v137;
      if ((v120 & 0x80) == 0)
        goto LABEL_283;
    }
    else
    {
      a2[3] = v134;
      a2 += 4;
      if ((v120 & 0x80) == 0)
        goto LABEL_283;
    }
  }
  else
  {
    a2[2] = v133;
    a2 += 3;
    if ((v120 & 0x80) == 0)
      goto LABEL_283;
  }
LABEL_252:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v121 = *(int *)(a1 + 316);
  *(_WORD *)a2 = 728;
  if (v121 > 0x7F)
  {
    a2[2] = v121 | 0x80;
    v123 = v121 >> 7;
    if (v121 >> 14)
    {
      v125 = a2 + 3;
      do
      {
        v126 = v125;
        *v125++ = v123 | 0x80;
        v127 = v123 >> 7;
        v128 = v123 >> 14;
        v123 >>= 7;
      }
      while (v128);
      a2 = v126 + 2;
      *v125 = v127;
    }
    else
    {
      a2[3] = v123;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v121;
    a2 += 3;
  }
LABEL_283:
  v139 = *(_DWORD *)(a1 + 40);
  if ((v139 & 8) != 0)
  {
    a2 = sub_245D0404C(a3, 0x2Cu, *(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v139 & 0x10) == 0)
    {
LABEL_285:
      if ((v139 & 0x20) == 0)
        goto LABEL_286;
      goto LABEL_295;
    }
  }
  else if ((v139 & 0x10) == 0)
  {
    goto LABEL_285;
  }
  a2 = sub_245D0404C(a3, 0x2Du, *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v139 & 0x20) == 0)
  {
LABEL_286:
    if ((v139 & 0x40) == 0)
      goto LABEL_287;
    goto LABEL_296;
  }
LABEL_295:
  a2 = sub_245D0404C(a3, 0x2Eu, *(_QWORD *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v139 & 0x40) == 0)
  {
LABEL_287:
    if ((v139 & 0x80) == 0)
      goto LABEL_288;
    goto LABEL_297;
  }
LABEL_296:
  a2 = sub_245D0404C(a3, 0x2Fu, *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v139 & 0x80) == 0)
  {
LABEL_288:
    if ((v139 & 0x40000) == 0)
      goto LABEL_289;
    goto LABEL_298;
  }
LABEL_297:
  a2 = sub_245D0404C(a3, 0x30u, *(_QWORD *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v139 & 0x40000) == 0)
  {
LABEL_289:
    if ((v139 & 0x1000) == 0)
      goto LABEL_290;
    goto LABEL_301;
  }
LABEL_298:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v140 = *(_BYTE *)(a1 + 242);
  *(_WORD *)a2 = 904;
  a2[2] = v140;
  a2 += 3;
  if ((v139 & 0x1000) == 0)
  {
LABEL_290:
    if ((v139 & 0x100000) == 0)
      goto LABEL_291;
    goto LABEL_304;
  }
LABEL_301:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v141 = *(_BYTE *)(a1 + 236);
  *(_WORD *)a2 = 912;
  a2[2] = v141;
  a2 += 3;
  if ((v139 & 0x100000) == 0)
  {
LABEL_291:
    if ((v139 & 0x200000) == 0)
      goto LABEL_316;
    goto LABEL_307;
  }
LABEL_304:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = sub_245CF8520((uint64_t)a3, (int)a2);
  v142 = *(_DWORD *)(a1 + 248);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v142;
  a2 += 6;
  if ((v139 & 0x200000) != 0)
  {
LABEL_307:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = sub_245CF8520((uint64_t)a3, (int)a2);
    v143 = *(_QWORD *)(a1 + 256);
    *(_WORD *)a2 = 928;
    if (v143 > 0x7F)
    {
      a2[2] = v143 | 0x80;
      v144 = v143 >> 7;
      if (v143 >> 14)
      {
        v145 = a2 + 3;
        do
        {
          v146 = v145;
          *v145++ = v144 | 0x80;
          v147 = v144 >> 7;
          v148 = v144 >> 14;
          v144 >>= 7;
        }
        while (v148);
        a2 = v146 + 2;
        *v145 = v147;
      }
      else
      {
        a2[3] = v144;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v143;
      a2 += 3;
    }
  }
LABEL_316:
  v149 = sub_245CFB0F8(a1 + 16, a2, a3);
  v150 = v149;
  v151 = *(_QWORD *)(a1 + 8);
  if ((v151 & 1) == 0)
    return v150;
  v153 = v151 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v153 + 31) < 0)
  {
    v154 = *(void **)(v153 + 8);
    v155 = *(_QWORD *)(v153 + 16);
  }
  else
  {
    v154 = (void *)(v153 + 8);
    LODWORD(v155) = *(unsigned __int8 *)(v153 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v149 >= (int)v155)
  {
    v156 = (int)v155;
    memcpy(v149, v154, (int)v155);
    v150 += v156;
    return v150;
  }
  return (char *)sub_245CF8630(a3, (char *)v154, v155, v149);
}

void sub_245D0AEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::string *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  signed int v12;
  const std::string **v13;
  std::string **v14;
  int v15;
  int *v16;
  signed int v17;
  const std::string **v18;
  std::string **v19;
  int v20;
  int *v21;
  signed int v22;
  const std::string **v23;
  std::string **v24;
  int v25;
  int *v26;
  signed int v27;
  const std::string **v28;
  std::string **v29;
  int v30;
  int *v31;
  unsigned int v32;
  __int128 *v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 *v36;
  uint64_t v37;
  _QWORD *v38;
  __int128 *v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 *v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 *v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 *v48;
  uint64_t v49;
  _QWORD *v50;
  __int128 *v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;

  sub_245CF9E2C(a1 + 16, a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & 1) != 0)
      v8 = (std::string *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (std::string *)sub_245CFAE88((uint64_t *)(a1 + 8));
    v9 = *(char *)(v5 + 31);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)v6;
    else
      v10 = *(const std::string::value_type **)(v5 + 8);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v5 + 31);
    else
      v11 = *(_QWORD *)(v5 + 16);
    std::string::append(v8, v10, v11);
  }
  v12 = *(_DWORD *)(a2 + 64);
  if (v12)
  {
    v13 = (const std::string **)(*(_QWORD *)(a2 + 72) + 8);
    v14 = (std::string **)sub_245D034FC((uint64_t *)(a1 + 56), *(_DWORD *)(a2 + 64));
    sub_245CFAB40((std::string *)(a1 + 56), v14, v13, v12, **(_DWORD **)(a1 + 72) - *(_DWORD *)(a1 + 64));
    v15 = *(_DWORD *)(a1 + 64) + v12;
    *(_DWORD *)(a1 + 64) = v15;
    v16 = *(int **)(a1 + 72);
    if (*v16 < v15)
      *v16 = v15;
  }
  v17 = *(_DWORD *)(a2 + 88);
  if (v17)
  {
    v18 = (const std::string **)(*(_QWORD *)(a2 + 96) + 8);
    v19 = (std::string **)sub_245D034FC((uint64_t *)(a1 + 80), *(_DWORD *)(a2 + 88));
    sub_245CFAB40((std::string *)(a1 + 80), v19, v18, v17, **(_DWORD **)(a1 + 96) - *(_DWORD *)(a1 + 88));
    v20 = *(_DWORD *)(a1 + 88) + v17;
    *(_DWORD *)(a1 + 88) = v20;
    v21 = *(int **)(a1 + 96);
    if (*v21 < v20)
      *v21 = v20;
  }
  v22 = *(_DWORD *)(a2 + 112);
  if (v22)
  {
    v23 = (const std::string **)(*(_QWORD *)(a2 + 120) + 8);
    v24 = (std::string **)sub_245D034FC((uint64_t *)(a1 + 104), *(_DWORD *)(a2 + 112));
    sub_245CFAB40((std::string *)(a1 + 104), v24, v23, v22, **(_DWORD **)(a1 + 120) - *(_DWORD *)(a1 + 112));
    v25 = *(_DWORD *)(a1 + 112) + v22;
    *(_DWORD *)(a1 + 112) = v25;
    v26 = *(int **)(a1 + 120);
    if (*v26 < v25)
      *v26 = v25;
  }
  v27 = *(_DWORD *)(a2 + 136);
  if (v27)
  {
    v28 = (const std::string **)(*(_QWORD *)(a2 + 144) + 8);
    v29 = (std::string **)sub_245D034FC((uint64_t *)(a1 + 128), *(_DWORD *)(a2 + 136));
    sub_245CFAB40((std::string *)(a1 + 128), v29, v28, v27, **(_DWORD **)(a1 + 144) - *(_DWORD *)(a1 + 136));
    v30 = *(_DWORD *)(a1 + 136) + v27;
    *(_DWORD *)(a1 + 136) = v30;
    v31 = *(int **)(a1 + 144);
    if (*v31 < v30)
      *v31 = v30;
  }
  v32 = *(_DWORD *)(a2 + 40);
  if (!(_BYTE)v32)
    goto LABEL_57;
  if ((v32 & 1) != 0)
  {
    v33 = (__int128 *)(*(_QWORD *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 1u;
    v34 = *(_QWORD *)(a1 + 8);
    v35 = (_QWORD *)(v34 & 0xFFFFFFFFFFFFFFFELL);
    if ((v34 & 1) != 0)
      v35 = (_QWORD *)*v35;
    sub_245CF2414((uint64_t *)(a1 + 152), (uint64_t)&qword_25751AE78, v33, (uint64_t)v35);
    if ((v32 & 2) == 0)
    {
LABEL_26:
      if ((v32 & 4) == 0)
        goto LABEL_27;
      goto LABEL_39;
    }
  }
  else if ((v32 & 2) == 0)
  {
    goto LABEL_26;
  }
  v36 = (__int128 *)(*(_QWORD *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 2u;
  v37 = *(_QWORD *)(a1 + 8);
  v38 = (_QWORD *)(v37 & 0xFFFFFFFFFFFFFFFELL);
  if ((v37 & 1) != 0)
    v38 = (_QWORD *)*v38;
  sub_245CF2414((uint64_t *)(a1 + 160), (uint64_t)&qword_25751AE78, v36, (uint64_t)v38);
  if ((v32 & 4) == 0)
  {
LABEL_27:
    if ((v32 & 8) == 0)
      goto LABEL_28;
    goto LABEL_42;
  }
LABEL_39:
  v39 = (__int128 *)(*(_QWORD *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 4u;
  v40 = *(_QWORD *)(a1 + 8);
  v41 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFFELL);
  if ((v40 & 1) != 0)
    v41 = (_QWORD *)*v41;
  sub_245CF2414((uint64_t *)(a1 + 168), (uint64_t)&qword_25751AE78, v39, (uint64_t)v41);
  if ((v32 & 8) == 0)
  {
LABEL_28:
    if ((v32 & 0x10) == 0)
      goto LABEL_29;
    goto LABEL_45;
  }
LABEL_42:
  v42 = (__int128 *)(*(_QWORD *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 8u;
  v43 = *(_QWORD *)(a1 + 8);
  v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL);
  if ((v43 & 1) != 0)
    v44 = (_QWORD *)*v44;
  sub_245CF2414((uint64_t *)(a1 + 176), 0, v42, (uint64_t)v44);
  if ((v32 & 0x10) == 0)
  {
LABEL_29:
    if ((v32 & 0x20) == 0)
      goto LABEL_30;
LABEL_48:
    v48 = (__int128 *)(*(_QWORD *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    v49 = *(_QWORD *)(a1 + 8);
    v50 = (_QWORD *)(v49 & 0xFFFFFFFFFFFFFFFELL);
    if ((v49 & 1) != 0)
      v50 = (_QWORD *)*v50;
    sub_245CF2414((uint64_t *)(a1 + 192), 0, v48, (uint64_t)v50);
    if ((v32 & 0x40) == 0)
    {
LABEL_31:
      if ((v32 & 0x80) == 0)
        goto LABEL_57;
      goto LABEL_54;
    }
    goto LABEL_51;
  }
LABEL_45:
  v45 = (__int128 *)(*(_QWORD *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x10u;
  v46 = *(_QWORD *)(a1 + 8);
  v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
  if ((v46 & 1) != 0)
    v47 = (_QWORD *)*v47;
  sub_245CF2414((uint64_t *)(a1 + 184), 0, v45, (uint64_t)v47);
  if ((v32 & 0x20) != 0)
    goto LABEL_48;
LABEL_30:
  if ((v32 & 0x40) == 0)
    goto LABEL_31;
LABEL_51:
  v51 = (__int128 *)(*(_QWORD *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x40u;
  v52 = *(_QWORD *)(a1 + 8);
  v53 = (_QWORD *)(v52 & 0xFFFFFFFFFFFFFFFELL);
  if ((v52 & 1) != 0)
    v53 = (_QWORD *)*v53;
  sub_245CF2414((uint64_t *)(a1 + 200), 0, v51, (uint64_t)v53);
  if ((v32 & 0x80) != 0)
  {
LABEL_54:
    v54 = (__int128 *)(*(_QWORD *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x80u;
    v55 = *(_QWORD *)(a1 + 8);
    v56 = (_QWORD *)(v55 & 0xFFFFFFFFFFFFFFFELL);
    if ((v55 & 1) != 0)
      v56 = (_QWORD *)*v56;
    sub_245CF2414((uint64_t *)(a1 + 208), 0, v54, (uint64_t)v56);
  }
LABEL_57:
  if ((v32 & 0xFF00) == 0)
    goto LABEL_68;
  if ((v32 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
    if ((v32 & 0x200) == 0)
    {
LABEL_60:
      if ((v32 & 0x400) == 0)
        goto LABEL_61;
      goto LABEL_103;
    }
  }
  else if ((v32 & 0x200) == 0)
  {
    goto LABEL_60;
  }
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  if ((v32 & 0x400) == 0)
  {
LABEL_61:
    if ((v32 & 0x800) == 0)
      goto LABEL_62;
    goto LABEL_104;
  }
LABEL_103:
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  if ((v32 & 0x800) == 0)
  {
LABEL_62:
    if ((v32 & 0x1000) == 0)
      goto LABEL_63;
    goto LABEL_105;
  }
LABEL_104:
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  if ((v32 & 0x1000) == 0)
  {
LABEL_63:
    if ((v32 & 0x2000) == 0)
      goto LABEL_64;
    goto LABEL_106;
  }
LABEL_105:
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  if ((v32 & 0x2000) == 0)
  {
LABEL_64:
    if ((v32 & 0x4000) == 0)
      goto LABEL_65;
LABEL_107:
    *(_BYTE *)(a1 + 238) = *(_BYTE *)(a2 + 238);
    if ((v32 & 0x8000) == 0)
      goto LABEL_67;
    goto LABEL_66;
  }
LABEL_106:
  *(_BYTE *)(a1 + 237) = *(_BYTE *)(a2 + 237);
  if ((v32 & 0x4000) != 0)
    goto LABEL_107;
LABEL_65:
  if ((v32 & 0x8000) != 0)
LABEL_66:
    *(_BYTE *)(a1 + 239) = *(_BYTE *)(a2 + 239);
LABEL_67:
  *(_DWORD *)(a1 + 40) |= v32;
LABEL_68:
  if ((v32 & 0xFF0000) == 0)
    goto LABEL_79;
  if ((v32 & 0x10000) != 0)
  {
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    if ((v32 & 0x20000) == 0)
    {
LABEL_71:
      if ((v32 & 0x40000) == 0)
        goto LABEL_72;
      goto LABEL_111;
    }
  }
  else if ((v32 & 0x20000) == 0)
  {
    goto LABEL_71;
  }
  *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
  if ((v32 & 0x40000) == 0)
  {
LABEL_72:
    if ((v32 & 0x80000) == 0)
      goto LABEL_73;
    goto LABEL_112;
  }
LABEL_111:
  *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
  if ((v32 & 0x80000) == 0)
  {
LABEL_73:
    if ((v32 & 0x100000) == 0)
      goto LABEL_74;
    goto LABEL_113;
  }
LABEL_112:
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  if ((v32 & 0x100000) == 0)
  {
LABEL_74:
    if ((v32 & 0x200000) == 0)
      goto LABEL_75;
    goto LABEL_114;
  }
LABEL_113:
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  if ((v32 & 0x200000) == 0)
  {
LABEL_75:
    if ((v32 & 0x400000) == 0)
      goto LABEL_76;
LABEL_115:
    *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
    if ((v32 & 0x800000) == 0)
      goto LABEL_78;
    goto LABEL_77;
  }
LABEL_114:
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  if ((v32 & 0x400000) != 0)
    goto LABEL_115;
LABEL_76:
  if ((v32 & 0x800000) != 0)
LABEL_77:
    *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
LABEL_78:
  *(_DWORD *)(a1 + 40) |= v32;
LABEL_79:
  if (!HIBYTE(v32))
    goto LABEL_89;
  if ((v32 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
    if ((v32 & 0x2000000) == 0)
    {
LABEL_82:
      if ((v32 & 0x4000000) == 0)
        goto LABEL_83;
      goto LABEL_127;
    }
  }
  else if ((v32 & 0x2000000) == 0)
  {
    goto LABEL_82;
  }
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  if ((v32 & 0x4000000) == 0)
  {
LABEL_83:
    if ((v32 & 0x8000000) == 0)
      goto LABEL_84;
    goto LABEL_128;
  }
LABEL_127:
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  if ((v32 & 0x8000000) == 0)
  {
LABEL_84:
    if ((v32 & 0x10000000) == 0)
      goto LABEL_85;
    goto LABEL_129;
  }
LABEL_128:
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  if ((v32 & 0x10000000) == 0)
  {
LABEL_85:
    if ((v32 & 0x20000000) == 0)
      goto LABEL_86;
    goto LABEL_130;
  }
LABEL_129:
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  if ((v32 & 0x20000000) == 0)
  {
LABEL_86:
    if ((v32 & 0x40000000) == 0)
      goto LABEL_87;
LABEL_131:
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
    if ((v32 & 0x80000000) == 0)
      goto LABEL_88;
LABEL_132:
    *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
    goto LABEL_88;
  }
LABEL_130:
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  if ((v32 & 0x40000000) != 0)
    goto LABEL_131;
LABEL_87:
  if ((v32 & 0x80000000) != 0)
    goto LABEL_132;
LABEL_88:
  *(_DWORD *)(a1 + 40) |= v32;
LABEL_89:
  v57 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v57)
    return;
  if ((v57 & 1) != 0)
  {
    *(_BYTE *)(a1 + 301) = *(_BYTE *)(a2 + 301);
    if ((v57 & 2) == 0)
    {
LABEL_92:
      if ((v57 & 4) == 0)
        goto LABEL_93;
      goto LABEL_119;
    }
  }
  else if ((v57 & 2) == 0)
  {
    goto LABEL_92;
  }
  *(_BYTE *)(a1 + 302) = *(_BYTE *)(a2 + 302);
  if ((v57 & 4) == 0)
  {
LABEL_93:
    if ((v57 & 8) == 0)
      goto LABEL_94;
    goto LABEL_120;
  }
LABEL_119:
  *(_BYTE *)(a1 + 303) = *(_BYTE *)(a2 + 303);
  if ((v57 & 8) == 0)
  {
LABEL_94:
    if ((v57 & 0x10) == 0)
      goto LABEL_95;
    goto LABEL_121;
  }
LABEL_120:
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  if ((v57 & 0x10) == 0)
  {
LABEL_95:
    if ((v57 & 0x20) == 0)
      goto LABEL_96;
    goto LABEL_122;
  }
LABEL_121:
  *(_BYTE *)(a1 + 305) = *(_BYTE *)(a2 + 305);
  if ((v57 & 0x20) == 0)
  {
LABEL_96:
    if ((v57 & 0x40) == 0)
      goto LABEL_97;
LABEL_123:
    *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
    if ((v57 & 0x80) == 0)
      goto LABEL_99;
    goto LABEL_98;
  }
LABEL_122:
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  if ((v57 & 0x40) != 0)
    goto LABEL_123;
LABEL_97:
  if ((v57 & 0x80) != 0)
LABEL_98:
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
LABEL_99:
  *(_DWORD *)(a1 + 44) |= v57;
}

uint64_t sub_245D0B524(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_2516F6A38, 320);
    v2 = (uint64_t)sub_245CF21A0((unint64_t *)a1, 0x140uLL);
    sub_245D076F4(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_245D076F4(v2, 0);
  }
  return v2;
}

void sub_245D0B5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x10A1C40DFE95DFBLL);
  _Unwind_Resume(a1);
}

uint64_t *sub_245D0B5D8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[19];
  if ((uint64_t *)v2 != &qword_25751AE78)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x249546A74](v2, 0x1012C40EC159624);
  }
  v3 = a1[20];
  if ((uint64_t *)v3 != &qword_25751AE78)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    MEMORY[0x249546A74](v3, 0x1012C40EC159624);
  }
  v4 = a1[21];
  if ((uint64_t *)v4 != &qword_25751AE78)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x249546A74](v4, 0x1012C40EC159624);
  }
  v5 = a1[22];
  if (v5)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x249546A74](v5, 0x1012C40EC159624);
  }
  v6 = a1[23];
  if (v6)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x249546A74](v6, 0x1012C40EC159624);
  }
  v7 = a1[24];
  if (v7)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x249546A74](v7, 0x1012C40EC159624);
  }
  v8 = a1[25];
  if (v8)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x249546A74](v8, 0x1012C40EC159624);
  }
  v9 = a1[26];
  if (v9)
  {
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x249546A74](v9, 0x1012C40EC159624);
  }
  sub_245D043A8(a1[1]);
  sub_245D0360C(a1 + 16);
  sub_245D0360C(a1 + 13);
  sub_245D0360C(a1 + 10);
  sub_245D0360C(a1 + 7);
  sub_245CF902C((uint64_t)(a1 + 2));
  return a1;
}

void sub_245D0B7C4()
{
  sub_245D0B7FC((uint64_t)&unk_25751AD00, 0);
  sub_245CFF754((uint64_t)sub_245CFEF80, (uint64_t)&unk_25751AD00);
}

uint64_t sub_245D0B7FC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516F7508;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_254419AF8))
    sub_245CFF030(dword_254419AF8);
  *(_QWORD *)(a1 + 48) = &qword_25751AE78;
  *(_QWORD *)(a1 + 56) = 0x100000000;
  return a1;
}

void sub_245D0B868(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_245CF902C(v1);
  _Unwind_Resume(a1);
}

void sub_245D0B880(uint64_t a1)
{
  sub_245D0C05C(a1);
  JUMPOUT(0x249546A74);
}

_QWORD *sub_245D0B8A4@<X0>(_QWORD *a1@<X8>)
{
  return sub_245CF7F30(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sub_245D0B8B4()
{
  return sub_245D0BFA8(0);
}

uint64_t sub_245D0B8BC(uint64_t a1, uint64_t a2)
{
  return sub_245D0BFA8(a2);
}

uint64_t *sub_245D0B8C4(uint64_t a1)
{
  uint64_t *result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  result = sub_245CF9D90((uint64_t *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  if ((v3 & 6) != 0)
    *(_QWORD *)(a1 + 56) = 0x100000000;
  *(_DWORD *)(a1 + 40) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(_BYTE **)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_245D0B958(uint64_t a1)
{
  return sub_245CFACA8(a1 + 16);
}

uint64_t sub_245D0B964(uint64_t a1)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = sub_245CFDC6C(a1 + 16);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0)
      result += 5;
    if ((v3 & 4) != 0)
    {
      v7 = *(_DWORD *)(a1 + 60);
      if (v7 < 0)
        v8 = 11;
      else
        v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      result += v8;
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    result += v11;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

uint64_t sub_245D0BA44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

char *sub_245D0BA4C(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  char v9;
  char *result;
  char *v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  std::string *v24;
  std::string *v25;
  char v26;
  uint64_t v27;
  std::string *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  std::string *v32;

  v5 = 0;
  v31 = a2;
  v6 = (uint64_t *)(a1 + 8);
  v7 = (uint64_t **)(a1 + 48);
  v8 = a1 + 16;
  while (1)
  {
    v9 = sub_245CFB088((uint64_t)a3, &v31, a3[11].i32[1]);
    result = v31;
    if ((v9 & 1) != 0)
      break;
    v11 = v31 + 1;
    v12 = *v31;
    if (*v31 < 0)
    {
      v12 = v12 + (*v11 << 7) - 128;
      if (*v11 < 0)
      {
        v13 = 14;
        v14 = 2;
        while (1)
        {
          v12 += (v31[v14] - 1) << v13;
          if ((v31[v14] & 0x80000000) == 0)
            break;
          ++v14;
          v13 += 7;
          if (v14 == 5)
          {
            result = 0;
            goto LABEL_50;
          }
        }
        v11 = &v31[v14 + 1];
      }
      else
      {
        v11 = v31 + 2;
      }
    }
    v31 = v11;
    v15 = v12 >> 3;
    if (v12 >> 3 == 3)
    {
      if (v12 != 24)
        goto LABEL_17;
      v19 = v11 + 1;
      v20 = *v11;
      if (*v11 < 0)
      {
        v21 = *v19;
        v20 = (v20 + (v21 << 7) - 128);
        if ((v21 & 0x80) != 0)
        {
          v26 = 14;
          v27 = 2;
          while (1)
          {
            v20 += (v11[v27] - 1) << v26;
            if ((v11[v27] & 0x80000000) == 0)
              break;
            result = 0;
            ++v27;
            v26 += 7;
            if (v27 == 10)
              goto LABEL_50;
          }
          v19 = &v11[v27 + 1];
        }
        else
        {
          v19 = v11 + 2;
        }
      }
      v31 = v19;
      if ((v20 - 1) > 5)
      {
        if ((*v6 & 1) != 0)
        {
          v28 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v29 = v20;
          v30 = sub_245CFAE88(v6);
          v20 = v29;
          v28 = (std::string *)v30;
        }
        sub_245D029D4(3, v20, v28);
      }
      else
      {
        *(_DWORD *)(a1 + 40) |= 4u;
        *(_DWORD *)(a1 + 60) = v20;
      }
    }
    else if (v15 == 2)
    {
      if (v12 != 21)
        goto LABEL_17;
      *(_DWORD *)(a1 + 56) = *(_DWORD *)v11;
      v31 = v11 + 4;
      v5 = 2;
    }
    else
    {
      if (v15 == 1 && v12 == 10)
      {
        *(_DWORD *)(a1 + 40) |= 1u;
        v22 = *(_QWORD *)(a1 + 8);
        v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL);
        if ((v22 & 1) != 0)
          v23 = (_QWORD *)*v23;
        v24 = (std::string *)sub_245CF26F8(v7, (uint64_t)v23);
        result = (char *)sub_245D02AD4(v24, v11, (uint64_t)a3);
        goto LABEL_35;
      }
LABEL_17:
      if (v12)
        v17 = (v12 & 7) == 4;
      else
        v17 = 1;
      if (v17)
      {
        a3[10].i32[0] = v12 - 1;
        result = v11;
        break;
      }
      v18 = v12;
      if (v12 < 0x640)
      {
        if ((*v6 & 1) != 0)
          v25 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v25 = (std::string *)sub_245CFAE88(v6);
        v32 = v25;
        result = (char *)sub_245D02B38(v18, &v32, v11, a3);
      }
      else
      {
        result = (char *)sub_245CFAE20(v8, v12, v11, (uint64_t)&unk_25751AD00, v6, a3);
      }
LABEL_35:
      v31 = result;
      if (!result)
        break;
    }
  }
LABEL_50:
  *(_DWORD *)(a1 + 40) |= v5;
  return result;
}

char *sub_245D0BD1C(uint64_t a1, char *a2, _QWORD *a3)
{
  char *v4;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
  {
    v4 = sub_245D0404C(a3, 1u, *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_18;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4)
    v4 = (char *)sub_245CF8520((uint64_t)a3, (int)v4);
  v7 = *(_DWORD *)(a1 + 56);
  *v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*a3 <= (unint64_t)v4)
      v4 = (char *)sub_245CF8520((uint64_t)a3, (int)v4);
    v8 = *(int *)(a1 + 60);
    *v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v10 = v4 + 2;
        do
        {
          v11 = v10;
          *v10++ = v9 | 0x80;
          v12 = v9 >> 7;
          v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
        v4 = v11 + 2;
        *v10 = v12;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  v14 = sub_245CFB0F8(a1 + 16, v4, a3);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if ((v16 & 1) == 0)
    return v15;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    v19 = *(void **)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
  }
  else
  {
    v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*a3 - (_QWORD)v14 >= (int)v20)
  {
    v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }
  return (char *)sub_245CF8630(a3, (char *)v19, v20, v14);
}

void sub_245D0BEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::string *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  int v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;

  sub_245CF9E2C(a1 + 16, a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & 1) != 0)
      v8 = (std::string *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (std::string *)sub_245CFAE88((uint64_t *)(a1 + 8));
    v9 = *(char *)(v5 + 31);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)v6;
    else
      v10 = *(const std::string::value_type **)(v5 + 8);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v5 + 31);
    else
      v11 = *(_QWORD *)(v5 + 16);
    std::string::append(v8, v10, v11);
  }
  v12 = *(_DWORD *)(a2 + 40);
  if ((v12 & 7) != 0)
  {
    if ((v12 & 1) != 0)
    {
      v13 = (__int128 *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      if ((v14 & 1) != 0)
        v15 = (_QWORD *)*v15;
      sub_245CF2414((uint64_t *)(a1 + 48), (uint64_t)&qword_25751AE78, v13, (uint64_t)v15);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 4) == 0)
        {
LABEL_16:
          *(_DWORD *)(a1 + 40) |= v12;
          return;
        }
LABEL_15:
        *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
        goto LABEL_16;
      }
    }
    else if ((v12 & 2) == 0)
    {
      goto LABEL_14;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    if ((v12 & 4) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
}

uint64_t sub_245D0BFA8(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_2516F6AE8, 64);
    v2 = (uint64_t)sub_245CF21A0((unint64_t *)a1, 0x40uLL);
    sub_245D0B7FC(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_245D0B7FC(v2, 0);
  }
  return v2;
}

void sub_245D0C038(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t sub_245D0C05C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if ((uint64_t *)v2 != &qword_25751AE78)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x249546A74](v2, 0x1012C40EC159624);
  }
  sub_245D043A8(*(_QWORD *)(a1 + 8));
  sub_245CF902C(a1 + 16);
  return a1;
}

uint64_t sub_245D0C0C8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = &off_2516F6DF8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (atomic_load(dword_254419B10))
    sub_245CFF030(dword_254419B10);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void sub_245D0C144(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_245D0C160(v2);
  sub_245CF902C(v1);
  _Unwind_Resume(a1);
}

void sub_245D0C160(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_245D0C05C(*v3);
          MEMORY[0x249546A74](v5, 0x10A1C40F497E4DALL);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_245D0C1E0(uint64_t a1)
{
  sub_245D0D2AC(a1);
  JUMPOUT(0x249546A74);
}

_QWORD *sub_245D0C204@<X0>(_QWORD *a1@<X8>)
{
  return sub_245CF7F30(a1, "sentencepiece.ModelProto");
}

uint64_t sub_245D0C214()
{
  return sub_245D0D1F8(0);
}

uint64_t sub_245D0C21C(uint64_t a1, uint64_t a2)
{
  return sub_245D0D1F8(a2);
}

uint64_t sub_245D0C224(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;

  result = (uint64_t)sub_245CF9D90((uint64_t *)(a1 + 16));
  v3 = *(unsigned int *)(a1 + 56);
  if ((int)v3 >= 1)
  {
    v4 = (uint64_t *)(*(_QWORD *)(a1 + 64) + 8);
    do
    {
      v5 = *v4++;
      result = (uint64_t)sub_245D0B8C4(v5);
      --v3;
    }
    while (v3);
    *(_DWORD *)(a1 + 56) = 0;
  }
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 0xF) == 0)
    goto LABEL_11;
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_8;
LABEL_15:
    result = (uint64_t)sub_245D06B58(*(_QWORD *)(a1 + 80));
    if ((v6 & 4) == 0)
    {
LABEL_9:
      if ((v6 & 8) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
    goto LABEL_16;
  }
  result = sub_245D0788C(*(_QWORD *)(a1 + 72));
  if ((v6 & 2) != 0)
    goto LABEL_15;
LABEL_8:
  if ((v6 & 4) == 0)
    goto LABEL_9;
LABEL_16:
  result = sub_245D06290(*(_QWORD *)(a1 + 88));
  if ((v6 & 8) != 0)
LABEL_10:
    result = (uint64_t)sub_245D06B58(*(_QWORD *)(a1 + 96));
LABEL_11:
  *(_DWORD *)(a1 + 40) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(_BYTE **)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_245D0C2F4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;

  result = sub_245CFACA8(a1 + 16);
  if ((_DWORD)result)
  {
    v3 = *(unsigned int *)(a1 + 56);
    while ((int)v3 >= 1)
    {
      v4 = v3 - 1;
      v5 = sub_245CFACA8(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v3) + 16);
      v3 = v4;
      if ((v5 & 1) == 0)
        return 0;
    }
    v6 = *(_DWORD *)(a1 + 40);
    if ((v6 & 1) != 0)
    {
      result = sub_245CFACA8(*(_QWORD *)(a1 + 72) + 16);
      if (!(_DWORD)result)
        return result;
      v6 = *(_DWORD *)(a1 + 40);
    }
    if ((v6 & 2) != 0)
    {
      result = sub_245CFACA8(*(_QWORD *)(a1 + 80) + 16);
      if (!(_DWORD)result)
        return result;
      v6 = *(_DWORD *)(a1 + 40);
    }
    if ((v6 & 4) != 0)
    {
      result = sub_245CFACA8(*(_QWORD *)(a1 + 88) + 16);
      if (!(_DWORD)result)
        return result;
      v6 = *(_DWORD *)(a1 + 40);
    }
    if ((v6 & 8) == 0)
      return 1;
    result = sub_245CFACA8(*(_QWORD *)(a1 + 96) + 16);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_245D0C3B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = sub_245CFDC6C(a1 + 16);
  v3 = *(int *)(a1 + 56);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_245D0B964(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 0xF) == 0)
    goto LABEL_13;
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_10;
LABEL_16:
    v15 = sub_245D06C6C(*(_QWORD *)(a1 + 80));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  v14 = sub_245D07AC0(*(_QWORD *)(a1 + 72));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v10 & 4) == 0)
    goto LABEL_11;
LABEL_17:
  v16 = sub_245D0631C(*(_QWORD *)(a1 + 88));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    v11 = sub_245D06C6C(*(_QWORD *)(a1 + 96));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  v12 = *(_QWORD *)(a1 + 8);
  if ((v12 & 1) != 0)
  {
    v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0)
      v18 = *(_QWORD *)(v17 + 16);
    else
      v18 = *(unsigned __int8 *)(v17 + 31);
    v4 += v18;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

uint64_t sub_245D0C53C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

char *sub_245D0C544(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  char *v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  int32x2_t v22;
  int v23;
  __int32 v24;
  BOOL v25;
  char *v26;
  int v27;
  int32x2_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  BOOL v41;
  unint64_t v42;
  std::string *v43;
  uint64_t v44;
  int32x2_t v45;
  int v46;
  __int32 v47;
  char *v48;
  uint64_t v49;
  int32x2_t v50;
  int v51;
  char *v53;
  std::string *v54;

  v53 = a2;
  v5 = (uint64_t *)(a1 + 8);
  v6 = (uint64_t *)(a1 + 48);
  v7 = a1 + 16;
  while (2)
  {
    if ((sub_245CFB088((uint64_t)a3, &v53, a3[11].i32[1]) & 1) != 0)
      return v53;
    v8 = v53 + 1;
    v9 = *v53;
    if (*v53 < 0)
    {
      v9 = v9 + (*v8 << 7) - 128;
      if (*v8 < 0)
      {
        v10 = 14;
        v11 = 2;
        while (1)
        {
          v9 += (v53[v11] - 1) << v10;
          if ((v53[v11] & 0x80000000) == 0)
            break;
          ++v11;
          v10 += 7;
          if (v11 == 5)
            return 0;
        }
        v8 = &v53[v11 + 1];
      }
      else
      {
        v8 = v53 + 2;
      }
    }
    v53 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_60;
        --v8;
LABEL_14:
        v12 = v8 + 1;
        v53 = v8 + 1;
        v13 = *(int **)(a1 + 64);
        if (!v13)
        {
          v14 = *(_DWORD *)(a1 + 56);
          v15 = *(_DWORD *)(a1 + 60);
LABEL_19:
          if (v14 <= v15)
          {
            sub_245D034FC(v6, v15 - v14 + 1);
            v13 = *(int **)(a1 + 64);
          }
          v15 = *v13;
          goto LABEL_22;
        }
        v14 = *(_DWORD *)(a1 + 56);
        v15 = *v13;
        if (v14 < *v13)
        {
          *(_DWORD *)(a1 + 56) = v14 + 1;
          v16 = *(_QWORD *)&v13[2 * v14 + 2];
          goto LABEL_23;
        }
        if (v15 == *(_DWORD *)(a1 + 60))
          goto LABEL_19;
LABEL_22:
        *v13 = v15 + 1;
        v16 = sub_245D0BFA8(*(_QWORD *)(a1 + 48));
        v17 = *(_QWORD *)(a1 + 64);
        v18 = *(int *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = v18 + 1;
        *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
LABEL_23:
        v19 = *v12;
        if (*v12 < 0)
        {
          v21 = sub_245D0295C((uint64_t)(v8 + 1), v19);
          if (!v21)
            return 0;
          v20 = (char *)v21;
        }
        else
        {
          v20 = v8 + 2;
        }
        v22 = a3[1];
        v23 = v19 + (_DWORD)v20 - v22.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v22 + (v23 & (v23 >> 31)));
        v24 = a3[3].i32[1];
        a3[3].i32[1] = v23;
        v22.i32[0] = a3[11].i32[0];
        v25 = __OFSUB__(v22.i32[0]--, 1);
        a3[11].i32[0] = v22.i32[0];
        if (v22.i32[0] < 0 != v25)
          return 0;
        v26 = sub_245D0BA4C(v16, v20, a3);
        v8 = v26;
        if (v26)
        {
          ++a3[11].i32[0];
          if (a3[10].i32[0])
            return 0;
          v27 = a3[3].i32[1] + v24 - v23;
          a3[3].i32[1] = v27;
          v28 = (int32x2_t)(*(_QWORD *)&a3[1] + (v27 & (v27 >> 31)));
          *a3 = v28;
          v53 = v26;
          if (*(_QWORD *)&v28 <= (unint64_t)v26 || *v26 != 10)
            continue;
          goto LABEL_14;
        }
        break;
      case 2u:
        if (v9 != 18)
          goto LABEL_60;
        *(_DWORD *)(a1 + 40) |= 1u;
        v29 = *(_QWORD *)(a1 + 72);
        if (!v29)
        {
          v30 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v5 & 1) != 0)
            v30 = (_QWORD *)*v30;
          v29 = sub_245D0B524((uint64_t)v30);
          *(_QWORD *)(a1 + 72) = v29;
        }
        v31 = *v8;
        if (*v8 < 0)
        {
          v44 = sub_245D0295C((uint64_t)v8, v31);
          if (!v44)
            return 0;
          v32 = (char *)v44;
        }
        else
        {
          v32 = v8 + 1;
        }
        v45 = a3[1];
        v46 = v31 + (_DWORD)v32 - v45.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v45 + (v46 & (v46 >> 31)));
        v47 = a3[3].i32[1];
        a3[3].i32[1] = v46;
        v45.i32[0] = a3[11].i32[0];
        v25 = __OFSUB__(v45.i32[0]--, 1);
        a3[11].i32[0] = v45.i32[0];
        if (v45.i32[0] < 0 != v25)
          return 0;
        v48 = sub_245D082FC(v29, v32, a3);
        if (!v48)
          return 0;
        goto LABEL_78;
      case 3u:
        if (v9 != 26)
          goto LABEL_60;
        *(_DWORD *)(a1 + 40) |= 2u;
        v33 = *(_QWORD *)(a1 + 80);
        if (!v33)
        {
          v34 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v5 & 1) != 0)
            v34 = (_QWORD *)*v34;
          v33 = sub_245D0752C((uint64_t)v34);
          *(_QWORD *)(a1 + 80) = v33;
        }
        goto LABEL_57;
      case 4u:
        if (v9 != 34)
          goto LABEL_60;
        *(_DWORD *)(a1 + 40) |= 4u;
        v35 = *(_QWORD *)(a1 + 88);
        if (!v35)
        {
          v36 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v5 & 1) != 0)
            v36 = (_QWORD *)*v36;
          v35 = sub_245D06994((uint64_t)v36);
          *(_QWORD *)(a1 + 88) = v35;
        }
        v37 = *v8;
        if (*v8 < 0)
        {
          v49 = sub_245D0295C((uint64_t)v8, v37);
          if (!v49)
            return 0;
          v38 = (char *)v49;
        }
        else
        {
          v38 = v8 + 1;
        }
        v50 = a3[1];
        v46 = v37 + (_DWORD)v38 - v50.i32[0];
        *a3 = (int32x2_t)(*(_QWORD *)&v50 + (v46 & (v46 >> 31)));
        v47 = a3[3].i32[1];
        a3[3].i32[1] = v46;
        v50.i32[0] = a3[11].i32[0];
        v25 = __OFSUB__(v50.i32[0]--, 1);
        a3[11].i32[0] = v50.i32[0];
        if (v50.i32[0] < 0 != v25)
          return 0;
        v48 = sub_245D063D0(v35, v38, a3);
        if (!v48)
          return 0;
LABEL_78:
        ++a3[11].i32[0];
        if (a3[10].i32[0])
          return 0;
        v51 = a3[3].i32[1] + v47 - v46;
        a3[3].i32[1] = v51;
        *a3 = (int32x2_t)(*(_QWORD *)&a3[1] + (v51 & (v51 >> 31)));
        v53 = v48;
        continue;
      case 5u:
        if (v9 != 42)
          goto LABEL_60;
        *(_DWORD *)(a1 + 40) |= 8u;
        v33 = *(_QWORD *)(a1 + 96);
        if (!v33)
        {
          v39 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v5 & 1) != 0)
            v39 = (_QWORD *)*v39;
          v33 = sub_245D0752C((uint64_t)v39);
          *(_QWORD *)(a1 + 96) = v33;
        }
LABEL_57:
        v40 = (char *)sub_245D0CE44(a3, v33, v8);
        goto LABEL_58;
      default:
LABEL_60:
        if (v9)
          v41 = (v9 & 7) == 4;
        else
          v41 = 1;
        if (v41)
        {
          a3[10].i32[0] = v9 - 1;
          return v8;
        }
        v42 = v9;
        if (v9 < 0x640)
        {
          if ((*v5 & 1) != 0)
            v43 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v43 = (std::string *)sub_245CFAE88(v5);
          v54 = v43;
          v40 = (char *)sub_245D02B38(v42, &v54, v8, a3);
        }
        else
        {
          v40 = (char *)sub_245CFAE20(v7, v9, v8, (uint64_t)&unk_25751AD40, v5, a3);
        }
LABEL_58:
        v53 = v40;
        if (v40)
          continue;
        return 0;
    }
    return v8;
  }
}

char *sub_245D0CA6C(uint64_t a1, char *a2, _QWORD *a3)
{
  int v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  char *v34;
  unsigned int v35;
  _BYTE *v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;

  v5 = *(_DWORD *)(a1 + 56);
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      if (*a3 <= (unint64_t)a2)
        a2 = (char *)sub_245CF8520((uint64_t)a3, (int)a2);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * i + 8);
      *a2 = 10;
      v8 = *(_DWORD *)(v7 + 44);
      if (v8 > 0x7F)
      {
        a2[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = a2 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = v12 + 2;
          *v11 = v13;
        }
        else
        {
          a2[2] = v10;
          v9 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v8;
        v9 = a2 + 2;
      }
      a2 = sub_245D0BD1C(v7, v9, a3);
    }
  }
  v15 = *(_DWORD *)(a1 + 40);
  if ((v15 & 1) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = (char *)sub_245CF8520((uint64_t)a3, (int)a2);
    v16 = *(_QWORD *)(a1 + 72);
    *a2 = 18;
    v17 = *(_DWORD *)(v16 + 48);
    if (v17 > 0x7F)
    {
      a2[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = a2 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = v21 + 2;
        *v20 = v22;
      }
      else
      {
        a2[2] = v19;
        v18 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v17;
      v18 = a2 + 2;
    }
    a2 = sub_245D09D48(v16, v18, a3);
    if ((v15 & 2) == 0)
    {
LABEL_15:
      if ((v15 & 4) == 0)
        goto LABEL_16;
      goto LABEL_38;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = (char *)sub_245CF8520((uint64_t)a3, (int)a2);
  v24 = *(_QWORD *)(a1 + 80);
  *a2 = 26;
  v25 = *(_DWORD *)(v24 + 44);
  if (v25 > 0x7F)
  {
    a2[1] = v25 | 0x80;
    v27 = v25 >> 7;
    if (v25 >> 14)
    {
      v28 = a2 + 2;
      do
      {
        v29 = v28;
        *v28++ = v27 | 0x80;
        v30 = v27 >> 7;
        v31 = v27 >> 14;
        v27 >>= 7;
      }
      while (v31);
      v26 = v29 + 2;
      *v28 = v30;
    }
    else
    {
      a2[2] = v27;
      v26 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v25;
    v26 = a2 + 2;
  }
  a2 = sub_245D071E8(v24, v26, a3);
  if ((v15 & 4) == 0)
  {
LABEL_16:
    if ((v15 & 8) == 0)
      goto LABEL_58;
    goto LABEL_48;
  }
LABEL_38:
  if (*a3 <= (unint64_t)a2)
    a2 = (char *)sub_245CF8520((uint64_t)a3, (int)a2);
  v32 = *(_QWORD *)(a1 + 88);
  *a2 = 34;
  v33 = *(_DWORD *)(v32 + 64);
  if (v33 > 0x7F)
  {
    a2[1] = v33 | 0x80;
    v35 = v33 >> 7;
    if (v33 >> 14)
    {
      v36 = a2 + 2;
      do
      {
        v37 = v36;
        *v36++ = v35 | 0x80;
        v38 = v35 >> 7;
        v39 = v35 >> 14;
        v35 >>= 7;
      }
      while (v39);
      v34 = v37 + 2;
      *v36 = v38;
    }
    else
    {
      a2[2] = v35;
      v34 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v33;
    v34 = a2 + 2;
  }
  a2 = sub_245D066AC(v32, v34, a3);
  if ((v15 & 8) != 0)
  {
LABEL_48:
    if (*a3 <= (unint64_t)a2)
      a2 = (char *)sub_245CF8520((uint64_t)a3, (int)a2);
    v40 = *(_QWORD *)(a1 + 96);
    *a2 = 42;
    v41 = *(_DWORD *)(v40 + 44);
    if (v41 > 0x7F)
    {
      a2[1] = v41 | 0x80;
      v43 = v41 >> 7;
      if (v41 >> 14)
      {
        v44 = a2 + 2;
        do
        {
          v45 = v44;
          *v44++ = v43 | 0x80;
          v46 = v43 >> 7;
          v47 = v43 >> 14;
          v43 >>= 7;
        }
        while (v47);
        v42 = v45 + 2;
        *v44 = v46;
      }
      else
      {
        a2[2] = v43;
        v42 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v41;
      v42 = a2 + 2;
    }
    a2 = sub_245D071E8(v40, v42, a3);
  }
LABEL_58:
  v48 = sub_245CFB0F8(a1 + 16, a2, a3);
  v49 = v48;
  v50 = *(_QWORD *)(a1 + 8);
  if ((v50 & 1) == 0)
    return v49;
  v52 = v50 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v52 + 31) < 0)
  {
    v53 = *(void **)(v52 + 8);
    v54 = *(_QWORD *)(v52 + 16);
  }
  else
  {
    v53 = (void *)(v52 + 8);
    LODWORD(v54) = *(unsigned __int8 *)(v52 + 31);
  }
  if (*a3 - (_QWORD)v48 >= (int)v54)
  {
    v55 = (int)v54;
    memcpy(v48, v53, (int)v54);
    v49 += v55;
    return v49;
  }
  return (char *)sub_245CF8630(a3, (char *)v53, v54, v48);
}

uint64_t sub_245D0CE44(int32x2_t *a1, uint64_t a2, char *a3)
{
  int v5;
  char *v6;
  uint64_t result;
  int32x2_t v8;
  int v9;
  __int32 v10;
  BOOL v11;
  int v12;

  v5 = *a3;
  if (*a3 < 0)
  {
    result = sub_245D0295C((uint64_t)a3, v5);
    if (!result)
      return result;
    v6 = (char *)result;
  }
  else
  {
    v6 = a3 + 1;
  }
  v8 = a1[1];
  v9 = v5 + (_DWORD)v6 - v8.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v8 + (v9 & (v9 >> 31)));
  v10 = a1[3].i32[1];
  a1[3].i32[1] = v9;
  v8.i32[0] = a1[11].i32[0];
  v11 = __OFSUB__(v8.i32[0]--, 1);
  a1[11].i32[0] = v8.i32[0];
  if (v8.i32[0] < 0 != v11)
    return 0;
  result = (uint64_t)sub_245D06DCC(a2, v6, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v12 = a1[3].i32[1] + v10 - v9;
  a1[3].i32[1] = v12;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
  return result;
}

void sub_245D0CF10(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;

  sub_245CF9E2C(a1 + 16, a2 + 16);
  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if ((*v4 & 1) != 0)
      v8 = (std::string *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v8 = (std::string *)sub_245CFAE88((uint64_t *)(a1 + 8));
    v9 = *(char *)(v6 + 31);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)v7;
    else
      v10 = *(const std::string::value_type **)(v6 + 8);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v6 + 31);
    else
      v11 = *(_QWORD *)(v6 + 16);
    std::string::append(v8, v10, v11);
  }
  v12 = *(_DWORD *)(a2 + 56);
  if (v12)
  {
    v45 = *(_QWORD *)(a2 + 64);
    v44 = sub_245D034FC((uint64_t *)(a1 + 48), v12);
    v13 = **(int **)(a1 + 64);
    v14 = *(int *)(a1 + 56);
    v15 = v13 - v14;
    if ((int)v13 - (int)v14 >= v12)
      v16 = v12;
    else
      v16 = v15;
    if ((int)v16 >= 1)
    {
      v17 = (uint64_t *)v44;
      v18 = (uint64_t *)(v45 + 8);
      do
      {
        v20 = *v18++;
        v19 = v20;
        v21 = *v17++;
        sub_245D0D1E8(v19, v21);
        --v16;
      }
      while (v16);
    }
    if (v15 < v12)
    {
      v22 = *(_QWORD *)(a1 + 48);
      v23 = v14 + v12 - v13;
      v24 = 8 * v13 - 8 * v14;
      v25 = (uint64_t *)(v44 + v24);
      v26 = (uint64_t *)(v24 + v45 + 8);
      do
      {
        v27 = *v26++;
        v28 = sub_245D0BFA8(v22);
        sub_245D0D1E8(v27, v28);
        *v25++ = v28;
        --v23;
      }
      while (v23);
    }
    v29 = *(_DWORD *)(a1 + 56) + v12;
    *(_DWORD *)(a1 + 56) = v29;
    v30 = *(int **)(a1 + 64);
    v4 = (_QWORD *)(a1 + 8);
    if (*v30 < v29)
      *v30 = v29;
  }
  v31 = *(_DWORD *)(a2 + 40);
  if ((v31 & 0xF) != 0)
  {
    if ((v31 & 1) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 1u;
      v32 = *(_QWORD *)(a1 + 72);
      if (!v32)
      {
        v33 = (_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v4 & 1) != 0)
          v33 = (_QWORD *)*v33;
        v32 = sub_245D0B524((uint64_t)v33);
        *(_QWORD *)(a1 + 72) = v32;
      }
      if (*(_QWORD *)(a2 + 72))
        v34 = *(void **)(a2 + 72);
      else
        v34 = &unk_25751AE90;
      sub_245D0AEC4(v32, (uint64_t)v34);
    }
    if ((v31 & 2) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 2u;
      v35 = *(_QWORD *)(a1 + 80);
      if (!v35)
      {
        v36 = (_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v4 & 1) != 0)
          v36 = (_QWORD *)*v36;
        v35 = sub_245D0752C((uint64_t)v36);
        *(_QWORD *)(a1 + 80) = v35;
      }
      if (*(_QWORD *)(a2 + 80))
        v37 = *(void **)(a2 + 80);
      else
        v37 = &unk_25751ADE0;
      sub_245D073A8(v35, (uint64_t)v37);
      if ((v31 & 4) == 0)
      {
LABEL_35:
        if ((v31 & 8) == 0)
          return;
        goto LABEL_53;
      }
    }
    else if ((v31 & 4) == 0)
    {
      goto LABEL_35;
    }
    *(_DWORD *)(a1 + 40) |= 4u;
    v38 = *(_QWORD *)(a1 + 88);
    if (!v38)
    {
      v39 = (_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v4 & 1) != 0)
        v39 = (_QWORD *)*v39;
      v38 = sub_245D06994((uint64_t)v39);
      *(_QWORD *)(a1 + 88) = v38;
    }
    if (*(_QWORD *)(a2 + 88))
      v40 = *(void **)(a2 + 88);
    else
      v40 = &unk_25751AE30;
    sub_245D06810(v38, (uint64_t)v40);
    if ((v31 & 8) != 0)
    {
LABEL_53:
      *(_DWORD *)(a1 + 40) |= 8u;
      v41 = *(_QWORD *)(a1 + 96);
      if (!v41)
      {
        v42 = (_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v4 & 1) != 0)
          v42 = (_QWORD *)*v42;
        v41 = sub_245D0752C((uint64_t)v42);
        *(_QWORD *)(a1 + 96) = v41;
      }
      if (*(_QWORD *)(a2 + 96))
        v43 = *(void **)(a2 + 96);
      else
        v43 = &unk_25751ADE0;
      sub_245D073A8(v41, (uint64_t)v43);
    }
  }
}

void sub_245D0D1E8(uint64_t a1, uint64_t a2)
{
  sub_245D0BEB4(a2, a1);
}

uint64_t sub_245D0D1F8(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_2516F69E8, 104);
    v2 = (uint64_t)sub_245CF21A0((unint64_t *)a1, 0x68uLL);
    sub_245D0C0C8(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_245D0C0C8(v2, 0);
  }
  return v2;
}

void sub_245D0D288(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x10A1C401E679671);
  _Unwind_Resume(a1);
}

uint64_t sub_245D0D2AC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;

  if ((_UNKNOWN *)a1 != &unk_25751AD40)
  {
    v2 = *(uint64_t **)(a1 + 72);
    if (v2)
    {
      v3 = sub_245D0B5D8(v2);
      MEMORY[0x249546A74](v3, 0x10A1C40DFE95DFBLL);
    }
    v4 = *(uint64_t **)(a1 + 80);
    if (v4)
    {
      v5 = sub_245D075E0(v4);
      MEMORY[0x249546A74](v5, 0x10A1C406853ED09);
    }
    v6 = *(_QWORD *)(a1 + 88);
    if (v6)
    {
      sub_245D043A8(*(_QWORD *)(v6 + 8));
      sub_245D06174((_QWORD *)(v6 + 40));
      sub_245CF902C(v6 + 16);
      MEMORY[0x249546A74](v6, 0x10A1C4075D007F8);
    }
    v7 = *(uint64_t **)(a1 + 96);
    if (v7)
    {
      v8 = sub_245D075E0(v7);
      MEMORY[0x249546A74](v8, 0x10A1C406853ED09);
    }
  }
  sub_245D043A8(*(_QWORD *)(a1 + 8));
  sub_245D0C160((_QWORD *)(a1 + 48));
  sub_245CF902C(a1 + 16);
  return a1;
}

_QWORD *sub_245D0D38C(_QWORD *a1)
{
  *a1 = &off_2516F7588;
  sub_245D0D3FC((uint64_t)(a1 + 2));
  return a1;
}

void sub_245D0D3BC(_QWORD *a1)
{
  *a1 = &off_2516F7588;
  sub_245D0D3FC((uint64_t)(a1 + 2));
  JUMPOUT(0x249546A74);
}

uint64_t sub_245D0D3FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *sub_245D0D454(_QWORD *a1)
{
  *a1 = &off_2516F75A8;
  sub_245D0D3FC((uint64_t)(a1 + 1));
  return a1;
}

void sub_245D0D484(_QWORD *a1)
{
  *a1 = &off_2516F75A8;
  sub_245D0D3FC((uint64_t)(a1 + 1));
  JUMPOUT(0x249546A74);
}

void sub_245D0D4E0(_QWORD *a1)
{
  sub_245D19CE8(a1);
  JUMPOUT(0x249546A74);
}

uint64_t sub_245D0D504@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t result;
  uint64_t (*v13)(uint64_t, uint64_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_245D19C44(&v16);
  v8 = v16;
  if (!a3)
  {
    result = sub_245CF8D8C((uint64_t)a4, 5, "model file path should not be empty.", 0x24uLL);
    goto LABEL_21;
  }
  sub_245CFE600(&v24, a2, a3);
  v9 = v24;
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  if (!*a4)
  {
    *a4 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v9 + 32))(v9, &v21) & 1) != 0)
    {
      if (v23 >= 0)
        v10 = (char *)&v21;
      else
        v10 = v21;
      if (v23 >= 0)
        v11 = HIBYTE(v23);
      else
        v11 = v22;
      if ((sub_245CFF260(v8, v10, v11) & 1) != 0)
      {
        *a4 = 0;
LABEL_18:
        if (SHIBYTE(v23) < 0)
          operator delete(v21);
        goto LABEL_20;
      }
      v17 = 13;
      sub_245CF4F98((uint64_t)v18);
      sub_245CF35A0(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(v18, (uint64_t)") [", 3);
      sub_245CF35A0(v18, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
      sub_245CF35A0(v18, (uint64_t)"] ", 2);
      sub_245CF5084((uint64_t)a4, &v17);
    }
    else
    {
      v17 = 13;
      sub_245CF4F98((uint64_t)v18);
      sub_245CF35A0(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(v18, (uint64_t)") [", 3);
      sub_245CF35A0(v18, (uint64_t)"input->ReadAll(&serialized)", 27);
      sub_245CF35A0(v18, (uint64_t)"] ", 2);
      sub_245CF5084((uint64_t)a4, &v17);
    }
    v18[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v18[1] = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete((void *)v18[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249546A20](&v20);
    goto LABEL_18;
  }
LABEL_20:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_21:
  if (!*a4)
  {
    *a4 = 0;
    v13 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40);
    v15 = v8;
    v16 = 0;
    result = v13(a1, &v15);
    v8 = v15;
    v15 = 0;
  }
  if (v8)
  {
    v14 = sub_245D0D2AC(v8);
    return MEMORY[0x249546A74](v14, 0x10A1C401E679671);
  }
  return result;
}

void sub_245D0D808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v3 - 73) < 0)
    operator delete(*(void **)(v3 - 96));
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_245D19CAC((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_245D0D888(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unsigned int v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type size;
  uint64_t v9;
  std::string v10;
  char v11;
  uint64_t v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v12);
  if (v12)
  {
    v11 = 1;
    v1 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_245CF35A0(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    sub_245CF35A0(v2, (uint64_t)") [", 3);
    sub_245CF35A0(v2, (uint64_t)"_status.ok()", 12);
    sub_245CF35A0(v2, (uint64_t)"] ", 2);
    if (v12)
    {
      memset(&v10, 0, sizeof(v10));
      v3 = *(_DWORD *)v12 - 1;
      if (v3 < 0x10)
        MEMORY[0x249546858](&v10, (&off_2516F7BD0)[v3]);
      std::string::append(&v10, ": ");
      v4 = *(char *)(v12 + 31);
      if (v4 >= 0)
        v5 = (const std::string::value_type *)(v12 + 8);
      else
        v5 = *(const std::string::value_type **)(v12 + 8);
      if (v4 >= 0)
        v6 = *(unsigned __int8 *)(v12 + 31);
      else
        v6 = *(_QWORD *)(v12 + 16);
      std::string::append(&v10, v5, v6);
    }
    else
    {
      sub_245CF7F30(&v10, "OK");
    }
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v10;
    else
      v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    else
      size = v10.__r_.__value_.__l.__size_;
    sub_245CF35A0(v2, (uint64_t)v7, size);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    sub_245CF3834(&v11);
    v9 = v12;
    v12 = 0;
    if (v9)
      sub_245CF8D4C(v9);
  }
}

void sub_245D0DA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  sub_245CF3834((_BYTE *)(v15 - 25));
  v17 = *(_QWORD *)(v15 - 24);
  *(_QWORD *)(v15 - 24) = 0;
  if (v17)
    sub_245CF8D4C(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_245D0DA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_245D19C44(&v8);
  v4 = v8;
  if (v8 != a2)
  {
    sub_245D0C224(v8);
    sub_245D0CF10(v4, a2);
  }
  v7 = v4;
  v8 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    v6 = sub_245D0D2AC(result);
    return MEMORY[0x249546A74](v6, 0x10A1C401E679671);
  }
  return result;
}

void sub_245D0DAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_245D19CAC(&a9, 0);
  sub_245D19CAC(&a10, 0);
  _Unwind_Resume(a1);
}

void sub_245D0DB0C(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __n128 *v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  std::string *v71;
  std::string::size_type size;
  unint64_t v73;
  size_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  void *v79;
  size_t v80;
  std::string *v81;
  std::string::size_type v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  void **v91;
  std::string::size_type v92;
  std::string *v93;
  __int128 v94;
  void **v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  char v99;
  std::string::size_type *v100;
  std::string::size_type v101;
  std::string::size_type *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  std::string::size_type v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  std::string::size_type *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  __n128 *v132;
  unsigned __int32 v133;
  _QWORD *v134;
  uint64_t v135;
  std::string::size_type v136;
  unint64_t v137;
  _DWORD *v138;
  __n128 *v139;
  _BYTE *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  std::string::size_type v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  std::string::size_type v153;
  int v154;
  _DWORD *v155;
  uint64_t *v156;
  _QWORD *v158;
  std::string v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  std::string::size_type *v163;
  std::string::size_type *v164;
  unint64_t v165;
  std::string v166;
  unint64_t v167;
  unint64_t *v168;
  void *v169[2];
  int64_t v170;
  std::string __dst;
  void *__p[2];
  int64_t v173;
  std::string v174;
  __int128 v175;
  int64_t v176;
  std::string v177;
  _DWORD *v178[2];
  unsigned __int8 v179;
  _QWORD v180[5];

  v180[2] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 4;
  v5 = *a2;
  *a2 = 0;
  sub_245D19CAC(a1 + 4, v5);
  v158 = a1;
  v6 = a1[4];
  v7 = &unk_25751AE90;
  if (*(_QWORD *)(v6 + 72))
    v8 = *(_DWORD **)(v6 + 72);
  else
    v8 = &unk_25751AE90;
  switch(v8[66])
  {
    case 1:
      v9 = operator new();
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_QWORD *)(v9 + 48) = 0;
      *(_DWORD *)(v9 + 56) = 1065353216;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_DWORD *)(v9 + 96) = 1065353216;
      *(_QWORD *)(v9 + 112) = 0;
      *(_DWORD *)(v9 + 104) = 0;
      *(_DWORD *)(v9 + 140) = 0;
      *(_QWORD *)(v9 + 120) = 0;
      *(_QWORD *)(v9 + 128) = 0;
      *(_QWORD *)v9 = &off_2516F7858;
      *(_QWORD *)(v9 + 8) = v6;
      sub_245CFFC7C(v9);
      *(_QWORD *)(v9 + 120) = 0x8000007F7FFFFFLL;
      v10 = *(_QWORD *)(v9 + 8);
      v11 = *(_QWORD *)(v10 + 64);
      if (v11)
        v12 = (uint64_t *)(v11 + 8);
      else
        v12 = 0;
      v13 = *(int *)(v10 + 56);
      if ((_DWORD)v13)
      {
        v14 = 8 * v13;
        v15 = 3.4028e38;
        v16 = 1.1755e-38;
        do
        {
          if (*(_DWORD *)(*v12 + 60) == 1)
          {
            v17 = *v12;
            v18 = *(float *)(*v12 + 56);
            if (v18 < v15)
              v15 = *(float *)(v17 + 56);
            if (v16 < v18)
              v16 = *(float *)(v17 + 56);
            *(float *)(v9 + 120) = v15;
            *(float *)(v9 + 124) = v16;
          }
          ++v12;
          v14 -= 8;
        }
        while (v14);
      }
      v156 = (uint64_t *)(v9 + 112);
      v19 = *(__n128 **)(v9 + 40);
      if (v19)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        do
        {
          v23 = v19 + 1;
          if (v21 >= v22)
          {
            v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3) + 1;
            if (v24 > 0xAAAAAAAAAAAAAAALL)
              sub_245CF3B34();
            if (0x5555555555555556 * (((char *)v22 - (char *)v20) >> 3) > v24)
              v24 = 0x5555555555555556 * (((char *)v22 - (char *)v20) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v20) >> 3) >= 0x555555555555555)
              v25 = 0xAAAAAAAAAAAAAAALL;
            else
              v25 = v24;
            v26 = (char *)sub_245CF3B48(v25);
            v28 = &v26[8 * (((char *)v21 - (char *)v20) >> 3)];
            *(__n128 *)v28 = *v23;
            *((_DWORD *)v28 + 4) = v19[2].n128_u32[0];
            if (v21 == v20)
            {
              v30 = (__n128 *)&v26[8 * (((char *)v21 - (char *)v20) >> 3)];
            }
            else
            {
              v29 = &v26[8 * (((char *)v21 - (char *)v20) >> 3)];
              do
              {
                v30 = (__n128 *)(v29 - 24);
                v31 = *(__int128 *)((char *)&v21[-2] + 8);
                *((_QWORD *)v29 - 1) = v21[-1].n128_u64[1];
                *(_OWORD *)(v29 - 24) = v31;
                v21 = (__n128 *)((char *)v21 - 24);
                v29 -= 24;
              }
              while (v21 != v20);
            }
            v22 = (__n128 *)&v26[24 * v27];
            v21 = (__n128 *)(v28 + 24);
            if (v20)
              operator delete(v20);
            v20 = v30;
          }
          else
          {
            *v21 = *v23;
            v21[1].n128_u32[0] = v19[2].n128_u32[0];
            v21 = (__n128 *)((char *)v21 + 24);
          }
          v19 = (__n128 *)v19->n128_u64[0];
        }
        while (v19);
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&v166, v9);
      v38 = v166.__r_.__value_.__r.__words[0];
      v166.__r_.__value_.__r.__words[0] = 0;
      if (v38)
        goto LABEL_43;
      if (v20 == v21)
      {
        sub_245CF8D8C((uint64_t)&v166, 13, "no pieces are loaded.", 0x15uLL);
        sub_245CF8F5C(v156, &v166);
        v38 = v166.__r_.__value_.__r.__words[0];
        v166.__r_.__value_.__r.__words[0] = 0;
        if (v38)
LABEL_43:
          sub_245CF8D4C(v38);
      }
      else
      {
        v127 = ((char *)v21 - (char *)v20) / 24;
        sub_245D20210(v20, v21, 126 - 2 * __clz(v127), 1);
        if (v127 >> 61)
          sub_245CF3B34();
        v128 = sub_245CF7A9C(((char *)v21 - (char *)v20) / 24);
        bzero(v128, 8 * v127);
        v129 = sub_245CF7A54(((char *)v21 - (char *)v20) / 24);
        bzero(v129, 4 * v127);
        v130 = 0;
        if (v127 <= 1)
          v131 = 1;
        else
          v131 = ((char *)v21 - (char *)v20) / 24;
        v132 = v20 + 1;
        do
        {
          *((_QWORD *)v128 + v130) = v132[-1].n128_u64[0];
          v133 = v132->n128_u32[0];
          v132 = (__n128 *)((char *)v132 + 24);
          *((_DWORD *)v129 + v130++) = v133;
        }
        while (v131 != v130);
        v134 = (_QWORD *)operator new();
        *v134 = &off_2516F7A28;
        v134[1] = 0;
        v134[2] = 0;
        v134[3] = 0;
        v135 = *(_QWORD *)(v9 + 128);
        *(_QWORD *)(v9 + 128) = v134;
        if (v135)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
          v134 = *(_QWORD **)(v9 + 128);
        }
        sub_245CF519C(v134, (uint64_t)(8 * v127) >> 3, (uint64_t)v128, (uint64_t)v129);
        sub_245CF5DF0(&v166, 0x400uLL);
        *(_DWORD *)(v9 + 136) = 0;
        v136 = v166.__r_.__value_.__r.__words[0];
        v137 = (uint64_t)(v166.__r_.__value_.__l.__size_ - v166.__r_.__value_.__r.__words[0]) >> 4;
        v138 = *(_DWORD **)(*(_QWORD *)(v9 + 128) + 16);
        v139 = v20;
        do
        {
          v140 = (_BYTE *)v139->n128_u64[0];
          v141 = v139->n128_u64[1];
          v142 = (*v138 >> 10 << ((*v138 >> 6) & 8));
          if (v141)
          {
            v143 = 0;
            v144 = 0;
            do
            {
              v145 = v140[v143];
              v146 = v142 ^ v145;
              v147 = v138[v146];
              if ((v147 & 0x800000FF) != (_DWORD)v145)
                break;
              v142 = v146 ^ (v147 >> 10 << ((v147 >> 6) & 8));
              if ((v147 & 0x100) != 0)
              {
                if (v144 < v137)
                {
                  v148 = v136 + 16 * v144;
                  *(_DWORD *)v148 = v138[v142] & 0x7FFFFFFF;
                  *(_QWORD *)(v148 + 8) = v143 + 1;
                }
                ++v144;
              }
              ++v143;
            }
            while (v141 != v143);
          }
          else
          {
            v149 = *v140;
            if (*v140)
            {
              v144 = 0;
              v150 = 1;
              do
              {
                v151 = v142 ^ v149;
                v152 = v138[v151];
                if ((v152 & 0x800000FF) != v149)
                  break;
                v142 = v151 ^ (v152 >> 10 << ((v152 >> 6) & 8));
                if ((v152 & 0x100) != 0)
                {
                  if (v144 < v137)
                  {
                    v153 = v136 + 16 * v144;
                    *(_DWORD *)v153 = v138[v142] & 0x7FFFFFFF;
                    *(_QWORD *)(v153 + 8) = v150;
                  }
                  ++v144;
                }
                v149 = v140[v150++];
              }
              while (v149);
            }
            else
            {
              LODWORD(v144) = 0;
            }
          }
          v154 = *(_DWORD *)(v9 + 136);
          if (v154 <= (int)v144)
            v154 = v144;
          *(_DWORD *)(v9 + 136) = v154;
          v139 = (__n128 *)((char *)v139 + 24);
        }
        while (v139 != v21);
        sub_245D00940((_QWORD *)(v9 + 24));
        if (!*(_DWORD *)(v9 + 136))
        {
          sub_245CF8D8C((uint64_t)v178, 13, "no entry is found in the trie.", 0x1EuLL);
          sub_245CF8F5C(v156, v178);
          v155 = v178[0];
          v178[0] = 0;
          if (v155)
            sub_245CF8D4C((uint64_t)v155);
        }
        if (v166.__r_.__value_.__r.__words[0])
        {
          v166.__r_.__value_.__l.__size_ = v166.__r_.__value_.__r.__words[0];
          operator delete(v166.__r_.__value_.__l.__data_);
        }
        if (v129)
          operator delete(v129);
        if (v128)
          operator delete(v128);
      }
      if (v20)
        operator delete(v20);
      v7 = &unk_25751AE90;
LABEL_47:
      v39 = v158[1];
      v158[1] = v9;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      if (*(_QWORD *)(*v4 + 80))
        v40 = *(void **)(*v4 + 80);
      else
        v40 = &unk_25751ADE0;
      if (*(_QWORD *)(*v4 + 72))
        v7 = *(_BYTE **)(*v4 + 72);
      v41 = operator new();
      *(_QWORD *)v41 = &off_2516F6EB0;
      *(_QWORD *)(v41 + 8) = 0;
      *(_QWORD *)(v41 + 16) = 0;
      *(_QWORD *)(v41 + 24) = v40;
      *(_QWORD *)(v41 + 32) = 0;
      *(_BYTE *)(v41 + 40) = v7[237];
      *(_QWORD *)(v41 + 48) = 0;
      sub_245D02270((_QWORD *)v41);
      v42 = v158[2];
      v158[2] = v41;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      if ((*(_BYTE *)(*v4 + 40) & 8) != 0)
      {
        v43 = *(_QWORD *)(*v4 + 96);
        v44 = *(_QWORD *)(v43 + 56) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v44 + 23) < 0)
        {
          if (!*(_QWORD *)(v44 + 8))
            goto LABEL_63;
        }
        else if (!*(_BYTE *)(v44 + 23))
        {
          goto LABEL_63;
        }
        v45 = operator new();
        *(_QWORD *)(v45 + 8) = 0;
        *(_QWORD *)v45 = &off_2516F6EB0;
        *(_QWORD *)(v45 + 16) = 0;
        *(_QWORD *)(v45 + 24) = v43;
        *(_QWORD *)(v45 + 32) = 0;
        *(_BYTE *)(v45 + 40) = 0;
        *(_QWORD *)(v45 + 48) = 0;
        sub_245D02270((_QWORD *)v45);
        v46 = v158[3];
        v158[3] = v45;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      }
LABEL_63:
      v47 = v158[2];
      v48 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v158[1] + 32))(v158[1]);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, v48);
      (*(void (**)(_QWORD *))(*v158 + 56))(v158);
      if (!*a3)
      {
        *a3 = 0;
        v49 = *(int **)(*v4 + 88);
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v160 = 0;
        v161 = 0;
        v162 = 0;
        if (!v49)
          v49 = (int *)&unk_25751AE30;
        v50 = *((_QWORD *)v49 + 7);
        if (v50)
          v51 = (uint64_t *)(v50 + 8);
        else
          v51 = 0;
        v52 = v49[12];
        if ((_DWORD)v52)
        {
          v53 = &v51[v52];
          while (1)
          {
            v54 = *v51;
            v55 = *(_QWORD *)(*v51 + 24) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v55 + 23) < 0)
            {
              v57 = *(_QWORD *)v55;
              v56 = *(_QWORD *)(v55 + 8);
            }
            else
            {
              v56 = *(unsigned __int8 *)(v55 + 23);
              v57 = *(_QWORD *)(*v51 + 24) & 0xFFFFFFFFFFFFFFFELL;
            }
            (*(void (**)(_QWORD *, unint64_t, uint64_t, uint64_t *))(*v158 + 104))(v158, v57, v56, &v160);
            if (*a3)
              break;
            *a3 = 0;
            v58 = v161;
            memset(&v159, 0, sizeof(v159));
            if (v160 == v161)
            {
              v62 = v161;
            }
            else
            {
              v59 = *(char *)(v160 + 23);
              if (v59 >= 0)
                v60 = (const std::string::value_type *)v160;
              else
                v60 = *(const std::string::value_type **)v160;
              if (v59 >= 0)
                v61 = *(unsigned __int8 *)(v160 + 23);
              else
                v61 = *(_QWORD *)(v160 + 8);
              std::string::append(&v159, v60, v61);
              v58 = v160;
              v62 = v161;
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v62 - v58) >> 3) >= 2)
            {
              v63 = 0;
              v64 = 1;
              do
              {
                std::string::append(&v159, " ", 1uLL);
                v65 = *(char *)(v160 + v63 + 47);
                if (v65 >= 0)
                  v66 = (const std::string::value_type *)(v160 + v63 + 24);
                else
                  v66 = *(const std::string::value_type **)(v160 + v63 + 24);
                if (v65 >= 0)
                  v67 = *(unsigned __int8 *)(v160 + v63 + 47);
                else
                  v67 = *(_QWORD *)(v160 + v63 + 32);
                std::string::append(&v159, v66, v67);
                ++v64;
                v63 += 24;
              }
              while (v64 < 0xAAAAAAAAAAAAAAABLL * ((v161 - v160) >> 3));
            }
            v68 = *(_QWORD *)(v54 + 32) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v68 + 23) < 0)
            {
              v70 = *(_QWORD *)v68;
              v69 = *(_QWORD *)(v68 + 8);
            }
            else
            {
              v69 = *(unsigned __int8 *)(v68 + 23);
              v70 = *(_QWORD *)(v54 + 32) & 0xFFFFFFFFFFFFFFFELL;
            }
            if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v71 = &v159;
            else
              v71 = (std::string *)v159.__r_.__value_.__r.__words[0];
            if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v159.__r_.__value_.__r.__words[2]);
            else
              size = v159.__r_.__value_.__l.__size_;
            if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v158[1] + 192))(v158[1], v70, v69, v71, size) & 1) == 0)
            {
              v73 = *(_QWORD *)(v54 + 24) & 0xFFFFFFFFFFFFFFFELL;
              if (*(char *)(v73 + 23) < 0)
              {
                v75 = *(void **)v73;
                v74 = *(_QWORD *)(v73 + 8);
              }
              else
              {
                v74 = *(unsigned __int8 *)(v73 + 23);
                v75 = (void *)(*(_QWORD *)(v54 + 24) & 0xFFFFFFFFFFFFFFFELL);
              }
              v76 = *(_QWORD *)(v54 + 32);
              sub_245CF22E8(&__dst, v75, v74);
              v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
              *((_BYTE *)&v174.__r_.__value_.__s + 23) = 1;
              LOWORD(v174.__r_.__value_.__l.__data_) = 9;
              v78 = *(char *)((v76 & 0xFFFFFFFFFFFFFFFELL) + 23);
              if (v78 >= 0)
                v79 = (void *)(v76 & 0xFFFFFFFFFFFFFFFELL);
              else
                v79 = *(void **)v77;
              if (v78 >= 0)
                v80 = *(unsigned __int8 *)(v77 + 23);
              else
                v80 = *(_QWORD *)(v77 + 8);
              sub_245CF22E8(&v177, v79, v80);
              *((_BYTE *)&v166.__r_.__value_.__s + 23) = 1;
              LOWORD(v166.__r_.__value_.__l.__data_) = 9;
              if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v81 = &v159;
              else
                v81 = (std::string *)v159.__r_.__value_.__r.__words[0];
              if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v82 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
              else
                v82 = v159.__r_.__value_.__l.__size_;
              sub_245CF22E8(v178, v81, v82);
              if ((v179 & 0x80u) == 0)
                v83 = (const std::string::value_type *)v178;
              else
                v83 = (const std::string::value_type *)v178[0];
              if ((v179 & 0x80u) == 0)
                v84 = v179;
              else
                v84 = (std::string::size_type)v178[1];
              v85 = std::string::append(&v166, v83, v84);
              v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
              v176 = v85->__r_.__value_.__r.__words[2];
              v175 = v86;
              v85->__r_.__value_.__l.__size_ = 0;
              v85->__r_.__value_.__r.__words[2] = 0;
              v85->__r_.__value_.__r.__words[0] = 0;
              if ((char)v179 < 0)
                operator delete(v178[0]);
              if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v166.__r_.__value_.__l.__data_);
              if (v176 >= 0)
                v87 = (const std::string::value_type *)&v175;
              else
                v87 = (const std::string::value_type *)v175;
              if (v176 >= 0)
                v88 = HIBYTE(v176);
              else
                v88 = *((_QWORD *)&v175 + 1);
              v89 = std::string::append(&v177, v87, v88);
              v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
              v173 = v89->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v90;
              v89->__r_.__value_.__l.__size_ = 0;
              v89->__r_.__value_.__r.__words[2] = 0;
              v89->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v176) < 0)
                operator delete((void *)v175);
              if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v177.__r_.__value_.__l.__data_);
              if (v173 >= 0)
                v91 = __p;
              else
                v91 = (void **)__p[0];
              if (v173 >= 0)
                v92 = HIBYTE(v173);
              else
                v92 = (std::string::size_type)__p[1];
              v93 = std::string::append(&v174, (const std::string::value_type *)v91, v92);
              v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
              v170 = v93->__r_.__value_.__r.__words[2];
              *(_OWORD *)v169 = v94;
              v93->__r_.__value_.__l.__size_ = 0;
              v93->__r_.__value_.__r.__words[2] = 0;
              v93->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v173) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v174.__r_.__value_.__l.__data_);
              if (v170 >= 0)
                v95 = v169;
              else
                v95 = (void **)v169[0];
              if (v170 >= 0)
                v96 = HIBYTE(v170);
              else
                v96 = (std::string::size_type)v169[1];
              v97 = std::string::append(&__dst, (const std::string::value_type *)v95, v96);
              v98 = v97->__r_.__value_.__r.__words[0];
              v180[0] = v97->__r_.__value_.__l.__size_;
              *(_QWORD *)((char *)v180 + 7) = *(std::string::size_type *)((char *)&v97->__r_.__value_.__r.__words[1] + 7);
              v99 = HIBYTE(v97->__r_.__value_.__r.__words[2]);
              v97->__r_.__value_.__l.__size_ = 0;
              v97->__r_.__value_.__r.__words[2] = 0;
              v97->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v170) < 0)
                operator delete(v169[0]);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              v100 = v164;
              if ((unint64_t)v164 >= v165)
              {
                v103 = 0xAAAAAAAAAAAAAAABLL * (v164 - v163);
                v104 = v103 + 1;
                if (v103 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_245CF3B34();
                if (0x5555555555555556 * ((uint64_t)(v165 - (_QWORD)v163) >> 3) > v104)
                  v104 = 0x5555555555555556 * ((uint64_t)(v165 - (_QWORD)v163) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v165 - (_QWORD)v163) >> 3) >= 0x555555555555555)
                  v105 = 0xAAAAAAAAAAAAAAALL;
                else
                  v105 = v104;
                v168 = &v165;
                if (v105)
                  v105 = (unint64_t)sub_245CF3B48(v105);
                else
                  v106 = 0;
                v107 = v105 + 24 * v103;
                v166.__r_.__value_.__r.__words[0] = v105;
                v166.__r_.__value_.__l.__size_ = v107;
                v167 = v105 + 24 * v106;
                v108 = v180[0];
                *(_QWORD *)v107 = v98;
                *(_QWORD *)(v107 + 8) = v108;
                *(_QWORD *)(v107 + 15) = *(_QWORD *)((char *)v180 + 7);
                *(_BYTE *)(v107 + 23) = v99;
                v166.__r_.__value_.__r.__words[2] = v107 + 24;
                sub_245CF7FF4((uint64_t *)&v163, &v166);
                v102 = v164;
                sub_245CF8078((uint64_t)&v166);
              }
              else
              {
                v101 = v180[0];
                *v164 = v98;
                v100[1] = v101;
                *(std::string::size_type *)((char *)v100 + 15) = *(_QWORD *)((char *)v180 + 7);
                *((_BYTE *)v100 + 23) = v99;
                v102 = v100 + 3;
              }
              v164 = v102;
            }
            if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v159.__r_.__value_.__l.__data_);
            if (++v51 == v53)
            {
              if (v163 == v164)
                goto LABEL_185;
              v166.__r_.__value_.__s.__data_[0] = 0;
              v109 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
              sub_245CF35A0(v109, (uint64_t)"(", 1);
              v110 = (_QWORD *)std::ostream::operator<<();
              v111 = sub_245CF35A0(v110, (uint64_t)") ", 2);
              v112 = sub_245CF35A0(v111, (uint64_t)"LOG(", 4);
              v113 = sub_245CF35A0(v112, (uint64_t)"INFO", 4);
              sub_245CF35A0(v113, (uint64_t)") ", 2);
              v114 = (_QWORD *)std::ostream::operator<<();
              sub_245CF35A0(v114, (uint64_t)"/", 1);
              v115 = (_QWORD *)std::ostream::operator<<();
              sub_245CF35A0(v115, (uint64_t)" samples did not pass the test.", 31);
              sub_245CF3834(&v166);
              v116 = (uint64_t)v163;
              v117 = v164;
              if (v163 != v164)
              {
                v118 = (_QWORD *)MEMORY[0x24BEDB310];
                do
                {
                  v166.__r_.__value_.__s.__data_[0] = 0;
                  sub_245CF35A0(v118, (uint64_t)"sentencepiece_processor.cc", 26);
                  sub_245CF35A0(v118, (uint64_t)"(", 1);
                  v119 = (_QWORD *)std::ostream::operator<<();
                  v120 = sub_245CF35A0(v119, (uint64_t)") ", 2);
                  v121 = sub_245CF35A0(v120, (uint64_t)"LOG(", 4);
                  v122 = sub_245CF35A0(v121, (uint64_t)"INFO", 4);
                  v123 = sub_245CF35A0(v122, (uint64_t)") ", 2);
                  v124 = *(char *)(v116 + 23);
                  if (v124 >= 0)
                    v125 = v116;
                  else
                    v125 = *(_QWORD *)v116;
                  if (v124 >= 0)
                    v126 = *(unsigned __int8 *)(v116 + 23);
                  else
                    v126 = *(_QWORD *)(v116 + 8);
                  sub_245CF35A0(v123, v125, v126);
                  sub_245CF3834(&v166);
                  v116 += 24;
                }
                while ((std::string::size_type *)v116 != v117);
              }
              sub_245CF8D8C((uint64_t)a3, 13, "Self-test failures. See LOG(INFO).", 0x22uLL);
              break;
            }
          }
        }
        else
        {
LABEL_185:
          *a3 = 0;
        }
        v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
        sub_245CF7EF0((void ***)&v166);
        v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
        sub_245CF7EF0((void ***)&v166);
      }
      return;
    case 2:
      v9 = operator new();
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_QWORD *)(v9 + 48) = 0;
      *(_DWORD *)(v9 + 56) = 1065353216;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_DWORD *)(v9 + 96) = 1065353216;
      *(_DWORD *)(v9 + 104) = 0;
      *(_QWORD *)(v9 + 112) = 0;
      *(_QWORD *)v9 = &off_2516F7648;
      *(_QWORD *)(v9 + 8) = v6;
      sub_245CFFC7C(v9);
      goto LABEL_47;
    case 3:
      v9 = operator new();
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_QWORD *)(v9 + 48) = 0;
      *(_DWORD *)(v9 + 56) = 1065353216;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_DWORD *)(v9 + 96) = 1065353216;
      *(_DWORD *)(v9 + 104) = 0;
      *(_QWORD *)(v9 + 112) = 0;
      *(_QWORD *)v9 = &off_2516F7720;
      *(_QWORD *)(v9 + 8) = v6;
      sub_245CFFC7C(v9);
      goto LABEL_47;
    case 4:
      v9 = operator new();
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_QWORD *)(v9 + 48) = 0;
      *(_DWORD *)(v9 + 56) = 1065353216;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_DWORD *)(v9 + 96) = 1065353216;
      *(_DWORD *)(v9 + 104) = 0;
      *(_QWORD *)(v9 + 112) = 0;
      *(_QWORD *)v9 = &off_2516F7950;
      *(_QWORD *)(v9 + 8) = v6;
      sub_245CFFC7C(v9);
      goto LABEL_47;
    default:
      v166.__r_.__value_.__s.__data_[0] = 0;
      v32 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
      sub_245CF35A0(v32, (uint64_t)"(", 1);
      v33 = (_QWORD *)std::ostream::operator<<();
      v34 = sub_245CF35A0(v33, (uint64_t)") ", 2);
      v35 = sub_245CF35A0(v34, (uint64_t)"LOG(", 4);
      v36 = sub_245CF35A0(v35, (uint64_t)"ERROR", 5);
      v37 = sub_245CF35A0(v36, (uint64_t)") ", 2);
      sub_245CF35A0(v37, (uint64_t)"Unknown model_type: ", 20);
      std::ostream::operator<<();
      sub_245CF3834(&v166);
      v9 = 0;
      goto LABEL_47;
  }
}

void sub_245D0EAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v62 = *(_QWORD *)(v60 - 144);
  *(_QWORD *)(v60 - 144) = 0;
  if (v62)
    sub_245CF8D4C(v62);
  if (__p)
  {
    operator delete(__p);
    if (!v59)
    {
LABEL_5:
      if (!v58)
      {
LABEL_10:
        if (v57)
          operator delete(v57);
        v63 = *(_QWORD *)(v56 + 128);
        *(_QWORD *)(v56 + 128) = 0;
        if (v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
        v64 = sub_245CFF984(v56);
        MEMORY[0x249546A74](v64, 0x10E1C40AECB0B9ELL);
        _Unwind_Resume(a1);
      }
LABEL_9:
      operator delete(v58);
      goto LABEL_10;
    }
  }
  else if (!v59)
  {
    goto LABEL_5;
  }
  operator delete(v59);
  if (!v58)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_245D0ED30@<X0>(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  uint64_t v16;

  sub_245D19C44(&v16);
  v8 = v16;
  if ((sub_245CFF260(v16, a2, a3) & 1) != 0)
  {
    v16 = 0;
    v11 = v8;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v11);
    v8 = v11;
    v11 = 0;
    if (!v8)
      return result;
    goto LABEL_3;
  }
  v12 = 13;
  sub_245CF4F98((uint64_t)v13);
  sub_245CF35A0(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
  sub_245CF35A0(v13, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_245CF35A0(v13, (uint64_t)") [", 3);
  sub_245CF35A0(v13, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
  sub_245CF35A0(v13, (uint64_t)"] ", 2);
  sub_245CF5084(a4, &v12);
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  result = MEMORY[0x249546A20](&v15);
  if (v8)
  {
LABEL_3:
    v10 = sub_245D0D2AC(v8);
    return MEMORY[0x249546A74](v10, 0x10A1C401E679671);
  }
  return result;
}

void sub_245D0EED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_245D19CAC((uint64_t *)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_245D0EF1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*a2)
      {
        *a2 = 0;
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
        if (!*a2)
          *a2 = 0;
      }
      return result;
    }
    v8 = 13;
    v7 = (_QWORD *)sub_245CF4F98((uint64_t)v9);
    sub_245CF35A0(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
    sub_245CF35A0(v9, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_245CF35A0(v9, (uint64_t)") [", 3);
    sub_245CF35A0(v9, (uint64_t)"normalizer_", 11);
    sub_245CF35A0(v9, (uint64_t)"] ", 2);
    sub_245CF35A0(v9, (uint64_t)"Normalizer is not initialized.", 30);
    sub_245CF5084((uint64_t)a2, &v8);
  }
  else
  {
    v8 = 13;
    v6 = (_QWORD *)sub_245CF4F98((uint64_t)v9);
    sub_245CF35A0(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
    sub_245CF35A0(v9, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_245CF35A0(v9, (uint64_t)") [", 3);
    sub_245CF35A0(v9, (uint64_t)"model_", 6);
    sub_245CF35A0(v9, (uint64_t)"] ", 2);
    sub_245CF35A0(v9, (uint64_t)"Model is not initialized.", 25);
    sub_245CF5084((uint64_t)a2, &v8);
  }
  v9[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v9[1] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249546A20](&v11);
}

void sub_245D0F158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_245CF5114((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_245D0F178(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sub_245D19330(a4, (uint64_t *)a1, a2, a3, (char **)(a1 + 40));
}

void sub_245D0F190(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sub_245D19330(a4, (uint64_t *)a1, a2, a3, (char **)(a1 + 64));
}

void sub_245D0F1A8(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  BOOL v14;
  void *v15;
  size_t v16;
  uint64_t **v17;
  _OWORD *v18;
  uint64_t **v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  size_t v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t **v32;
  int v33;
  uint64_t **v34;
  uint64_t **v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;
  void *__p;
  char v46;
  uint64_t v47;
  uint64_t **v48;

  (*(void (**)(_QWORD *__return_ptr))(*a1 + 56))(a3);
  if (!*a3)
  {
    *a3 = 0;
    v6 = a1[4];
    v7 = &unk_25751AE90;
    if (*(_QWORD *)(v6 + 72))
      v7 = *(_DWORD **)(v6 + 72);
    if ((v7[66] - 1) >= 2)
    {
      LODWORD(v42) = 13;
      v20 = (_QWORD *)sub_245CF4F98((uint64_t)&v43);
      sub_245CF35A0(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&v43, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&v43, (uint64_t)") [", 3);
      sub_245CF35A0(&v43, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
      sub_245CF35A0(&v43, (uint64_t)"] ", 2);
      sub_245CF35A0(&v43, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
      sub_245CF5084((uint64_t)a3, (int *)&v42);
      v43 = (uint64_t *)*MEMORY[0x24BEDB800];
      *(uint64_t **)((char *)&v43 + *(v43 - 3)) = *(uint64_t **)(MEMORY[0x24BEDB800] + 24);
      v44 = MEMORY[0x24BEDB848] + 16;
      if (v46 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249546A20](&v47);
    }
    else
    {
      v8 = *a2;
      v9 = a2[1];
      v43 = 0;
      v44 = 0;
      v42 = &v43;
      v39 = a3;
      if (v8 != v9)
      {
        for (i = 0; ; i = v43)
        {
          v11 = &v43;
          if (v42 != &v43)
          {
            v12 = i;
            v13 = &v43;
            if (i)
            {
              do
              {
                v11 = (uint64_t **)v12;
                v12 = (uint64_t *)v12[1];
              }
              while (v12);
            }
            else
            {
              do
              {
                v11 = (uint64_t **)v13[2];
                v14 = *v11 == (uint64_t *)v13;
                v13 = v11;
              }
              while (v14);
            }
            v15 = *(void **)v8;
            v16 = *(_QWORD *)(v8 + 8);
            if (!sub_245D012B0(v11[4], (size_t)v11[5], *(void **)v8, v16))
              break;
          }
          if (i)
          {
            v48 = v11;
            v17 = v11 + 1;
            goto LABEL_16;
          }
          v48 = &v43;
          v17 = &v43;
LABEL_19:
          v18 = operator new(0x30uLL);
          v18[2] = *(_OWORD *)v8;
          v19 = v48;
          *(_QWORD *)v18 = 0;
          *((_QWORD *)v18 + 1) = 0;
          *((_QWORD *)v18 + 2) = v19;
          *v17 = (uint64_t *)v18;
          if (*v42)
          {
            v42 = (uint64_t **)*v42;
            v18 = *v17;
          }
          sub_245CF7AD0(v43, (uint64_t *)v18);
          ++v44;
LABEL_22:
          v8 += 16;
          if (v8 == v9)
          {
            v6 = a1[4];
            v41 = v43;
            goto LABEL_29;
          }
        }
        v17 = (uint64_t **)sub_245D01204((uint64_t)&v42, &v48, v15, v16);
LABEL_16:
        if (*v17)
          goto LABEL_22;
        goto LABEL_19;
      }
      v41 = 0;
LABEL_29:
      v21 = *(_DWORD *)(v6 + 56);
      if (v21 >= 1)
      {
        v22 = 0;
        v23 = *(_QWORD *)(v6 + 64);
        v40 = v6;
        do
        {
          v24 = *(_QWORD *)(v23 + 8 * v22 + 8);
          if ((*(_DWORD *)(v24 + 60) - 2) >= 3)
          {
            v25 = *(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFFELL;
            v26 = *(unsigned __int8 *)(v25 + 23);
            if (*(char *)(v25 + 23) < 0)
            {
              v27 = *(unsigned __int8 **)v25;
              v28 = *(_QWORD *)(v25 + 8);
            }
            else
            {
              v27 = (unsigned __int8 *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFFELL);
              v28 = *(unsigned __int8 *)(v25 + 23);
            }
            if (!v41)
              goto LABEL_49;
            v29 = &v43;
            v30 = v41;
            do
            {
              v31 = v30;
              v32 = v29;
              v33 = sub_245D012B0((const void *)v30[4], v30[5], v27, v28);
              if (v33)
                v34 = (uint64_t **)(v31 + 1);
              else
                v34 = (uint64_t **)v31;
              if (v33)
                v29 = v32;
              else
                v29 = (uint64_t **)v31;
              v30 = *v34;
            }
            while (v30);
            if (v29 == &v43
              || (!v33 ? (v35 = (uint64_t **)v31) : (v35 = v32),
                  sub_245D012B0(v27, v28, v35[4], (size_t)v35[5])))
            {
LABEL_49:
              if ((v26 & 0x80) != 0)
              {
                v36 = *(unsigned __int8 **)v25;
                v26 = *(_QWORD *)(v25 + 8);
              }
              else
              {
                v36 = (unsigned __int8 *)v25;
              }
              v37 = v40;
              if (v26 == asc_245D25FED[(unint64_t)*v36 >> 4])
                v38 = 1;
              else
                v38 = 5;
            }
            else
            {
              v38 = 1;
              v37 = v40;
            }
            *(_DWORD *)(v24 + 40) |= 4u;
            *(_DWORD *)(v24 + 60) = v38;
            v21 = *(_DWORD *)(v37 + 56);
          }
          ++v22;
        }
        while (v22 < v21);
      }
      *v39 = 0;
      sub_245CF9290(v41);
    }
  }
}

void sub_245D0F59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_245CF5114((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_245D0F5C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*a1 + 56))(a2);
  if (!*a2)
  {
    *a2 = 0;
    v5 = a1[4];
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(int *)(v5 + 56);
    v8 = (uint64_t *)(v6 + 8);
    if (!v6)
      v8 = 0;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        if (*(_DWORD *)(*v8 + 60) == 5)
        {
          *(_DWORD *)(v10 + 40) |= 4u;
          *(_DWORD *)(v10 + 60) = 1;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    *a2 = 0;
  }
  return result;
}

void sub_245D0F654(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::ios_base *v27;
  size_t v28;
  _BOOL4 v29;
  _QWORD *v30;
  __int128 *v31;
  __int128 v32;
  __int128 *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  __int128 *v45;
  __int128 *v46;
  char *v47;
  uint64_t v48;
  __int128 *v49;
  unint64_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 **v55;
  char v56;
  void *__p;
  _BYTE *v58;
  uint64_t v59;
  _QWORD v60[8];
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64[20];

  sub_245CFE600(&v54, a2, a3);
  v8 = v54;
  (*(void (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
  if (*a5)
    goto LABEL_55;
  v34 = a1;
  *a5 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v43 = *(void **)(MEMORY[0x24BEDB7F0] + 24);
  v44 = *(void **)(MEMORY[0x24BEDB7F0] + 16);
  v41 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 40);
  v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 32);
  v39 = *(void **)(MEMORY[0x24BEDB7F0] + 8);
  v40 = *(void **)(MEMORY[0x24BEDB7F0] + 48);
  v35 = (void *)*MEMORY[0x24BEDB7F0];
  v38 = MEMORY[0x24BEDB848] + 16;
  v36 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v37 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  while ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v8 + 24))(v8, &v51))
  {
    if (v53 >= 0)
      v9 = &v51;
    else
      v9 = v51;
    if (v53 >= 0)
      v10 = HIBYTE(v53);
    else
      v10 = v52;
    sub_245CF7C68(&__p, (uint64_t)v9, v10, "\t", 1);
    v46 = 0;
    v47 = 0;
    v45 = 0;
    v55 = &v45;
    v56 = 0;
    v11 = v58 - (_BYTE *)__p;
    if (v58 == __p)
    {
      v19 = 0;
    }
    else
    {
      if (v11 < 0)
        sub_245CF3B34();
      v12 = v11 >> 4;
      v13 = (__int128 *)sub_245CF3B48(v11 >> 4);
      v45 = v13;
      v47 = (char *)v13 + 24 * v14;
      v15 = 24 * ((24 * v12 - 24) / 0x18uLL) + 24;
      bzero(v13, v15);
      v46 = (__int128 *)((char *)v13 + v15);
      v11 = (uint64_t)v45;
      if ((__int128 *)((char *)v13 + v15) == v45)
      {
        v19 = v45;
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        do
        {
          MEMORY[0x249546864](v11 + v16, *(_QWORD *)((char *)__p + v17), *(_QWORD *)((char *)__p + v17 + 8));
          ++v18;
          v11 = (uint64_t)v45;
          v19 = v46;
          v16 += 24;
          v17 += 16;
        }
        while (v18 < 0xAAAAAAAAAAAAAAABLL * (((char *)v46 - (char *)v45) >> 3));
      }
    }
    if (__p)
    {
      v58 = __p;
      operator delete(__p);
      v11 = (uint64_t)v45;
      v19 = v46;
    }
    v20 = (uint64_t)v19 - v11;
    if (!v20)
    {
      LODWORD(__p) = 13;
      sub_245CF4F98((uint64_t)&v58);
      sub_245CF35A0(&v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&v58, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&v58, (uint64_t)") [", 3);
      sub_245CF35A0(&v58, (uint64_t)"(v.size()) >= (1)", 17);
      sub_245CF35A0(&v58, (uint64_t)"] ", 2);
      sub_245CF5084((uint64_t)a5, (int *)&__p);
LABEL_49:
      v58 = (_BYTE *)*MEMORY[0x24BEDB800];
      *(_BYTE **)((char *)&v58 + *((_QWORD *)v58 - 3)) = *(_BYTE **)(MEMORY[0x24BEDB800] + 24);
      v59 = MEMORY[0x24BEDB848] + 16;
      if (SHIBYTE(v61) < 0)
        operator delete((void *)v60[7]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249546A20](&v63);
      __p = &v45;
      sub_245CF7EF0((void ***)&__p);
      goto LABEL_52;
    }
    if (*(char *)(v11 + 23) < 0)
    {
      if (!*(_QWORD *)(v11 + 8))
      {
LABEL_47:
        LODWORD(__p) = 13;
        sub_245CF4F98((uint64_t)&v58);
        sub_245CF35A0(&v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
        sub_245CF35A0(&v58, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_245CF35A0(&v58, (uint64_t)") [", 3);
        sub_245CF35A0(&v58, (uint64_t)"!v[0].empty()", 13);
        sub_245CF35A0(&v58, (uint64_t)"] ", 2);
        sub_245CF5084((uint64_t)a5, (int *)&__p);
        goto LABEL_49;
      }
    }
    else if (!*(_BYTE *)(v11 + 23))
    {
      goto LABEL_47;
    }
    v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
    v22 = 1;
    LODWORD(v55) = 1;
    if (v21 >= 2)
    {
      v23 = (const char *)(v11 + 24);
      if (*(char *)(v11 + 47) < 0)
        v23 = *(const char **)v23;
      v24 = MEMORY[0x24BEDB858];
      v25 = MEMORY[0x24BEDB858] + 104;
      v64[0] = MEMORY[0x24BEDB858] + 104;
      v26 = MEMORY[0x24BEDB858] + 64;
      v59 = MEMORY[0x24BEDB858] + 64;
      __p = v44;
      *(void **)((char *)&__p + *((_QWORD *)v44 - 3)) = v43;
      v58 = 0;
      v27 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
      std::ios_base::init(v27, v60);
      v27[1].__vftable = 0;
      v27[1].__fmtflags_ = -1;
      v59 = v42;
      *(_QWORD *)((char *)&v60[-1] + *(_QWORD *)(v42 - 24)) = v41;
      __p = v39;
      *(void **)((char *)&__p + *((_QWORD *)v39 - 3)) = v40;
      v64[0] = v25;
      __p = (void *)(v24 + 24);
      v59 = v26;
      std::streambuf::basic_streambuf();
      v60[0] = v38;
      v61 = 0u;
      v62 = 0u;
      v63 = 24;
      v28 = strlen(v23);
      sub_245CF35A0(&v59, (uint64_t)v23, v28);
      if ((*((_BYTE *)&v60[3] + *(_QWORD *)(v59 - 24)) & 5) != 0)
      {
        v29 = 0;
      }
      else
      {
        v30 = (_QWORD *)MEMORY[0x2495468E8](&__p, &v55);
        v29 = (*((_BYTE *)v30 + *(_QWORD *)(*v30 - 24) + 32) & 5) == 0;
      }
      __p = v35;
      *(void **)((char *)&__p + *((_QWORD *)v35 - 3)) = v37;
      v59 = v36;
      v60[0] = MEMORY[0x24BEDB848] + 16;
      if (SBYTE7(v62) < 0)
        operator delete((void *)v61);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x249546A20](v64);
      if (!v29)
      {
        LODWORD(__p) = 13;
        sub_245CF4F98((uint64_t)&v58);
        sub_245CF35A0(&v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
        sub_245CF35A0(&v58, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_245CF35A0(&v58, (uint64_t)") [", 3);
        sub_245CF35A0(&v58, (uint64_t)"absl::SimpleAtoi(v[1], &freq)", 29);
        sub_245CF35A0(&v58, (uint64_t)"] ", 2);
        sub_245CF35A0(&v58, (uint64_t)"Could not parse the frequency", 29);
        sub_245CF5084((uint64_t)a5, (int *)&__p);
        goto LABEL_49;
      }
      v22 = (int)v55;
    }
    if (v22 >= a4)
    {
      v31 = v49;
      if ((unint64_t)v49 >= v50)
      {
        v33 = (__int128 *)sub_245D16D48(&v48, v45);
      }
      else
      {
        if (*((char *)v45 + 23) < 0)
        {
          sub_245CF2554(v49, *(void **)v45, *((_QWORD *)v45 + 1));
        }
        else
        {
          v32 = *v45;
          *((_QWORD *)v49 + 2) = *((_QWORD *)v45 + 2);
          *v31 = v32;
        }
        v33 = (__int128 *)((char *)v31 + 24);
      }
      v49 = v33;
    }
    __p = &v45;
    sub_245CF7EF0((void ***)&__p);
    v8 = v54;
  }
  sub_245D17BD0(&__p, &v48);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v34 + 80))(v34, &__p);
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
LABEL_52:
  __p = &v48;
  sub_245CF7EF0((void ***)&__p);
  if (SHIBYTE(v53) < 0)
    operator delete(v51);
  v8 = v54;
  if (v54)
LABEL_55:
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

void sub_245D0FD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t *a38,uint64_t a39,void *a40,uint64_t a41)
{
  a38 = (uint64_t *)&a25;
  sub_245CF7EF0((void ***)&a38);
  a25 = &a28;
  sub_245CF7EF0((void ***)&a25);
  if (a36 < 0)
    operator delete(__p);
  if (a37)
    (*(void (**)(uint64_t))(*(_QWORD *)a37 + 8))(a37);
  _Unwind_Resume(a1);
}

uint64_t *sub_245D0FEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[6];
  int v18;
  uint64_t v19;
  void *__p;
  char v21;
  uint64_t v22;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))(a5);
  if (!*a5)
  {
    *a5 = 0;
    if (a4)
    {
      sub_245CF80D8(a4);
      sub_245D04408((uint64_t)&v16, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 200))(a1, a2, a3, &v16);
      if (!*a5)
      {
        *a5 = 0;
        if (v19)
          v11 = v19 + 8;
        else
          v11 = 0;
        if (v18)
        {
          v12 = a4[1];
          v13 = 8 * v18;
          do
          {
            v14 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v11 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v12 >= a4[2])
            {
              v12 = sub_245D16D48(a4, v14);
            }
            else
            {
              sub_245D19168(a4, v14);
              v12 += 24;
            }
            a4[1] = v12;
            v11 += 8;
            v13 -= 8;
          }
          while (v13);
        }
        *a5 = 0;
      }
      return sub_245D04F5C(&v16);
    }
    else
    {
      LODWORD(v16) = 13;
      v15 = (_QWORD *)sub_245CF4F98((uint64_t)v17);
      sub_245CF35A0(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(v17, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(v17, (uint64_t)") [", 3);
      sub_245CF35A0(v17, (uint64_t)"pieces", 6);
      sub_245CF35A0(v17, (uint64_t)"] ", 2);
      sub_245CF35A0(v17, (uint64_t)"output container is null", 24);
      sub_245CF5084((uint64_t)a5, (int *)&v16);
      v17[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v17[1] = MEMORY[0x24BEDB848] + 16;
      if (v21 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (uint64_t *)MEMORY[0x249546A20](&v22);
    }
  }
  return result;
}

void sub_245D100C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_245D04F5C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_245D100F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[6];
  int v28;
  uint64_t v29;
  void *__p;
  char v31;
  uint64_t v32;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))(a5);
  if (!*a5)
  {
    *a5 = 0;
    if (a4)
    {
      a4[1] = *a4;
      sub_245D04408((uint64_t)&v26, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 200))(a1, a2, a3, &v26);
      if (!*a5)
      {
        *a5 = 0;
        if (v29)
          v11 = v29 + 8;
        else
          v11 = 0;
        if (v28)
        {
          v12 = v11 + 8 * v28;
          v13 = (_DWORD *)a4[1];
          do
          {
            v14 = *(_DWORD *)(*(_QWORD *)v11 + 64);
            v15 = a4[2];
            if ((unint64_t)v13 >= v15)
            {
              v17 = (_DWORD *)*a4;
              v18 = ((uint64_t)v13 - *a4) >> 2;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62)
                sub_245CF3B34();
              v20 = v15 - (_QWORD)v17;
              if (v20 >> 1 > v19)
                v19 = v20 >> 1;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
                v21 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v21 = v19;
              if (v21)
              {
                v21 = (unint64_t)sub_245CF7A54(v21);
                v17 = (_DWORD *)*a4;
                v13 = (_DWORD *)a4[1];
              }
              else
              {
                v22 = 0;
              }
              v23 = (_DWORD *)(v21 + 4 * v18);
              *v23 = v14;
              v16 = v23 + 1;
              while (v13 != v17)
              {
                v24 = *--v13;
                *--v23 = v24;
              }
              *a4 = v23;
              a4[1] = v16;
              a4[2] = v21 + 4 * v22;
              if (v17)
                operator delete(v17);
            }
            else
            {
              *v13 = v14;
              v16 = v13 + 1;
            }
            a4[1] = v16;
            v11 += 8;
            v13 = v16;
          }
          while (v11 != v12);
        }
        *a5 = 0;
      }
      return sub_245D04F5C(&v26);
    }
    else
    {
      LODWORD(v26) = 13;
      v25 = (_QWORD *)sub_245CF4F98((uint64_t)v27);
      sub_245CF35A0(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(v27, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(v27, (uint64_t)") [", 3);
      sub_245CF35A0(v27, (uint64_t)"ids", 3);
      sub_245CF35A0(v27, (uint64_t)"] ", 2);
      sub_245CF35A0(v27, (uint64_t)"output container is null", 24);
      sub_245CF5084((uint64_t)a5, (int *)&v26);
      v27[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v27[1] = MEMORY[0x24BEDB848] + 16;
      if (v31 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (uint64_t *)MEMORY[0x249546A20](&v32);
    }
  }
  return result;
}

void sub_245D103A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_245D04F5C(&a9);
  _Unwind_Resume(a1);
}

void sub_245D103D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  sub_245D17BD0(__p, a2);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 128))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_245D1043C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_245D10458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *result;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))(a4);
  if (!*a4)
  {
    *a4 = 0;
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sub_245D04408((uint64_t)&v10, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 240))(a1, a2, &v10);
      if (!*a4)
      {
        *a4 = 0;
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        *a4 = 0;
      }
      return sub_245D04F5C(&v10);
    }
    else
    {
      LODWORD(v10) = 13;
      v9 = (_QWORD *)sub_245CF4F98((uint64_t)v11);
      sub_245CF35A0(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(v11, (uint64_t)") [", 3);
      sub_245CF35A0(v11, (uint64_t)"detokenized", 11);
      sub_245CF35A0(v11, (uint64_t)"] ", 2);
      sub_245CF35A0(v11, (uint64_t)"output container is null", 24);
      sub_245CF5084((uint64_t)a4, (int *)&v10);
      v11[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v11[1] = MEMORY[0x24BEDB848] + 16;
      if (v12 < 0)
        operator delete((void *)v11[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (uint64_t *)MEMORY[0x249546A20](&v13);
    }
  }
  return result;
}

void sub_245D10634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_245CF5114((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_245D1065C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *result;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))(a4);
  if (!*a4)
  {
    *a4 = 0;
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sub_245D04408((uint64_t)&v10, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 248))(a1, a2, &v10);
      if (!*a4)
      {
        *a4 = 0;
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        *a4 = 0;
      }
      return sub_245D04F5C(&v10);
    }
    else
    {
      LODWORD(v10) = 13;
      v9 = (_QWORD *)sub_245CF4F98((uint64_t)v11);
      sub_245CF35A0(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(v11, (uint64_t)") [", 3);
      sub_245CF35A0(v11, (uint64_t)"detokenized", 11);
      sub_245CF35A0(v11, (uint64_t)"] ", 2);
      sub_245CF35A0(v11, (uint64_t)"output container is null", 24);
      sub_245CF5084((uint64_t)a4, (int *)&v10);
      v11[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v11[1] = MEMORY[0x24BEDB848] + 16;
      if (v12 < 0)
        operator delete((void *)v11[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (uint64_t *)MEMORY[0x249546A20](&v13);
    }
  }
  return result;
}

void sub_245D10838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_245CF5114((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_245D10860(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void ***a5@<X4>, _QWORD *a6@<X8>)
{
  void **v12;
  void **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  void **v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  void **v32;
  uint64_t v33;
  void **v34;
  void **v35;
  __int128 v36;
  int64x2_t v37;
  void **v38;
  _QWORD *v39;
  __int128 *v40;
  __int128 *v41;
  unint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *__p;
  char v49;
  uint64_t v50;
  __int128 **v51;
  int64x2_t v52;
  void **v53;
  _QWORD *v54;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))(a6);
  if (!*a6)
  {
    *a6 = 0;
    if (a5)
    {
      v12 = *a5;
      v13 = a5[1];
      while (v13 != v12)
      {
        v13 -= 3;
        v43 = v13;
        sub_245CF7EF0(&v43);
      }
      a5[1] = v12;
      sub_245D04FD0((uint64_t)&v43, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)a1 + 208))(a1, a2, a3, a4, &v43);
      if (!*a6)
      {
        *a6 = 0;
        if (v47)
          v14 = (uint64_t *)(v47 + 8);
        else
          v14 = 0;
        if (v46)
        {
          v15 = &v14[v46];
          do
          {
            v16 = *v14;
            v40 = 0;
            v41 = 0;
            v42 = 0;
            v17 = *(_QWORD *)(v16 + 64);
            if (v17)
              v18 = v17 + 8;
            else
              v18 = 0;
            v19 = *(int *)(v16 + 56);
            if ((_DWORD)v19)
            {
              v20 = 0;
              v21 = 8 * v19;
              do
              {
                v22 = *(_QWORD *)(*(_QWORD *)v18 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v20 >= v42)
                {
                  v20 = sub_245D16D48((uint64_t *)&v40, (__int128 *)v22);
                }
                else
                {
                  if (*(char *)(v22 + 23) < 0)
                  {
                    sub_245CF2554((_BYTE *)v20, *(void **)v22, *(_QWORD *)(v22 + 8));
                  }
                  else
                  {
                    v23 = *(_OWORD *)v22;
                    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v22 + 16);
                    *(_OWORD *)v20 = v23;
                  }
                  v20 += 24;
                }
                v41 = (__int128 *)v20;
                v18 += 8;
                v21 -= 8;
              }
              while (v21);
            }
            else
            {
              v20 = 0;
            }
            v25 = a5[1];
            v24 = (unint64_t)a5[2];
            if ((unint64_t)v25 >= v24)
            {
              v27 = 0xAAAAAAAAAAAAAAABLL * (v25 - *a5);
              v28 = v27 + 1;
              if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_245CF3B34();
              v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)*a5) >> 3);
              if (2 * v29 > v28)
                v28 = 2 * v29;
              if (v29 >= 0x555555555555555)
                v30 = 0xAAAAAAAAAAAAAAALL;
              else
                v30 = v28;
              v54 = a5 + 2;
              if (v30)
              {
                if (v30 > 0xAAAAAAAAAAAAAAALL)
                  sub_245CF3B8C();
                v31 = (void **)operator new(24 * v30);
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[3 * v27];
              v51 = (__int128 **)v31;
              v52.i64[0] = (uint64_t)v32;
              v52.i64[1] = (uint64_t)v32;
              v53 = &v31[3 * v30];
              v32[1] = 0;
              v32[2] = 0;
              *v32 = 0;
              sub_245D18F9C(v32, v40, (__int128 *)v20, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v40) >> 3));
              v33 = v52.i64[0];
              v26 = v52.i64[1] + 24;
              v52.i64[1] += 24;
              v35 = *a5;
              v34 = a5[1];
              if (v34 == *a5)
              {
                v37 = vdupq_n_s64((unint64_t)v34);
              }
              else
              {
                do
                {
                  *(_QWORD *)(v33 - 24) = 0;
                  *(_QWORD *)(v33 - 16) = 0;
                  v33 -= 24;
                  *(_QWORD *)(v33 + 16) = 0;
                  v36 = *(_OWORD *)(v34 - 3);
                  v34 -= 3;
                  *(_OWORD *)v33 = v36;
                  *(_QWORD *)(v33 + 16) = v34[2];
                  *v34 = 0;
                  v34[1] = 0;
                  v34[2] = 0;
                }
                while (v34 != v35);
                v37 = *(int64x2_t *)a5;
                v26 = v52.i64[1];
              }
              *a5 = (void **)v33;
              a5[1] = (void **)v26;
              v52 = v37;
              v38 = a5[2];
              a5[2] = v53;
              v53 = v38;
              v51 = (__int128 **)v37.i64[0];
              sub_245D1924C((uint64_t)&v51);
            }
            else
            {
              *v25 = 0;
              v25[1] = 0;
              v25[2] = 0;
              sub_245D18F9C(v25, v40, v41, 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
              v26 = (uint64_t)(v25 + 3);
              a5[1] = v25 + 3;
            }
            a5[1] = (void **)v26;
            v51 = &v40;
            sub_245CF7EF0((void ***)&v51);
            ++v14;
          }
          while (v14 != v15);
        }
        *a6 = 0;
      }
      sub_245D043A8(v44);
      sub_245D05040(&v45);
    }
    else
    {
      LODWORD(v43) = 13;
      v39 = (_QWORD *)sub_245CF4F98((uint64_t)&v44);
      sub_245CF35A0(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&v44, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&v44, (uint64_t)") [", 3);
      sub_245CF35A0(&v44, (uint64_t)"pieces", 6);
      sub_245CF35A0(&v44, (uint64_t)"] ", 2);
      sub_245CF35A0(&v44, (uint64_t)"output container is null", 24);
      sub_245CF5084((uint64_t)a6, (int *)&v43);
      v44 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v44 + *(_QWORD *)(v44 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v45 = MEMORY[0x24BEDB848] + 16;
      if (v49 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249546A20](&v50);
    }
  }
}

void sub_245D10CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_245D043A8(a6);
  sub_245D05040((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_245D10D20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  int64x2_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  void *__p;
  char v52;
  uint64_t v53;
  char *v54;
  int64x2_t v55;
  char *v56;
  uint64_t *v57;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))(a6);
  if (!*a6)
  {
    *a6 = 0;
    if (a5)
    {
      sub_245D16BD4(a5);
      sub_245D04FD0((uint64_t)&v46, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 208))(a1, a2, a3, a4, &v46);
      if (!*a6)
      {
        v44 = a6;
        *a6 = 0;
        if (v50)
          v12 = v50 + 8;
        else
          v12 = 0;
        if (v49)
        {
          v45 = v12 + 8 * v49;
          do
          {
            v13 = *(_QWORD *)(*(_QWORD *)v12 + 64);
            if (v13)
              v14 = v13 + 8;
            else
              v14 = 0;
            v15 = *(int *)(*(_QWORD *)v12 + 56);
            if ((_DWORD)v15)
            {
              v16 = 0;
              v17 = 0;
              v18 = 0;
              v19 = v14 + 8 * v15;
              do
              {
                v20 = *(_DWORD *)(*(_QWORD *)v14 + 64);
                if ((unint64_t)v17 >= v18)
                {
                  v22 = (v17 - v16) >> 2;
                  v23 = v22 + 1;
                  if ((unint64_t)(v22 + 1) >> 62)
                    sub_245CF3B34();
                  if ((uint64_t)(v18 - (_QWORD)v16) >> 1 > v23)
                    v23 = (uint64_t)(v18 - (_QWORD)v16) >> 1;
                  if (v18 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
                    v24 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v24 = v23;
                  if (v24)
                    v24 = (unint64_t)sub_245CF7A54(v24);
                  else
                    v25 = 0;
                  v26 = (char *)(v24 + 4 * v22);
                  *(_DWORD *)v26 = v20;
                  v21 = (uint64_t)(v26 + 4);
                  while (v17 != v16)
                  {
                    v27 = *((_DWORD *)v17 - 1);
                    v17 -= 4;
                    *((_DWORD *)v26 - 1) = v27;
                    v26 -= 4;
                  }
                  v18 = v24 + 4 * v25;
                  if (v16)
                    operator delete(v16);
                  v16 = v26;
                }
                else
                {
                  *(_DWORD *)v17 = v20;
                  v21 = (uint64_t)(v17 + 4);
                }
                v14 += 8;
                v17 = (char *)v21;
              }
              while (v14 != v19);
            }
            else
            {
              v16 = 0;
              v21 = 0;
            }
            v29 = (_QWORD *)a5[1];
            v28 = a5[2];
            if ((unint64_t)v29 >= v28)
            {
              v31 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v29 - *a5) >> 3);
              v32 = v31 + 1;
              if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_245CF3B34();
              v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a5) >> 3);
              if (2 * v33 > v32)
                v32 = 2 * v33;
              if (v33 >= 0x555555555555555)
                v34 = 0xAAAAAAAAAAAAAAALL;
              else
                v34 = v32;
              v57 = a5 + 2;
              if (v34)
              {
                if (v34 > 0xAAAAAAAAAAAAAAALL)
                  sub_245CF3B8C();
                v35 = (char *)operator new(24 * v34);
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[24 * v31];
              v54 = v35;
              v55.i64[0] = (uint64_t)v36;
              v55.i64[1] = (uint64_t)v36;
              v56 = &v35[24 * v34];
              *((_QWORD *)v36 + 1) = 0;
              *((_QWORD *)v36 + 2) = 0;
              *(_QWORD *)v36 = 0;
              sub_245D18E28(v36, v16, v21, (v21 - (uint64_t)v16) >> 2);
              v37 = v55.i64[0];
              v30 = v55.i64[1] + 24;
              v55.i64[1] += 24;
              v39 = *a5;
              v38 = (_QWORD *)a5[1];
              if (v38 == (_QWORD *)*a5)
              {
                v41 = vdupq_n_s64((unint64_t)v38);
              }
              else
              {
                do
                {
                  *(_QWORD *)(v37 - 24) = 0;
                  *(_QWORD *)(v37 - 16) = 0;
                  v37 -= 24;
                  *(_QWORD *)(v37 + 16) = 0;
                  v40 = *(_OWORD *)(v38 - 3);
                  v38 -= 3;
                  *(_OWORD *)v37 = v40;
                  *(_QWORD *)(v37 + 16) = v38[2];
                  *v38 = 0;
                  v38[1] = 0;
                  v38[2] = 0;
                }
                while (v38 != (_QWORD *)v39);
                v41 = *(int64x2_t *)a5;
                v30 = v55.i64[1];
              }
              *a5 = v37;
              a5[1] = v30;
              v55 = v41;
              v42 = a5[2];
              a5[2] = (uint64_t)v56;
              v56 = (char *)v42;
              v54 = (char *)v41.i64[0];
              sub_245D191D8((uint64_t)&v54);
            }
            else
            {
              *v29 = 0;
              v29[1] = 0;
              v29[2] = 0;
              sub_245D18E28(v29, v16, v21, (v21 - (uint64_t)v16) >> 2);
              v30 = (uint64_t)(v29 + 3);
              a5[1] = (uint64_t)(v29 + 3);
            }
            a5[1] = v30;
            if (v16)
              operator delete(v16);
            v12 += 8;
          }
          while (v12 != v45);
        }
        *v44 = 0;
      }
      sub_245D043A8(v47);
      sub_245D05040(&v48);
    }
    else
    {
      v46 = 13;
      v43 = (_QWORD *)sub_245CF4F98((uint64_t)&v47);
      sub_245CF35A0(v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&v47, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&v47, (uint64_t)") [", 3);
      sub_245CF35A0(&v47, (uint64_t)"ids", 3);
      sub_245CF35A0(&v47, (uint64_t)"] ", 2);
      sub_245CF35A0(&v47, (uint64_t)"output container is null", 24);
      sub_245CF5084((uint64_t)a6, &v46);
      v47 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v47 + *(_QWORD *)(v47 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v48 = MEMORY[0x24BEDB848] + 16;
      if (v52 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249546A20](&v53);
    }
  }
}

void sub_245D1119C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_245D043A8(a7);
  sub_245D05040((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_245D1120C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>, float a7@<S0>)
{
  uint64_t *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[6];
  int v22;
  uint64_t v23;
  void *__p;
  char v25;
  uint64_t v26;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))(a6);
  if (!*a6)
  {
    *a6 = 0;
    if (a5)
    {
      sub_245CF80D8(a5);
      sub_245D04408((uint64_t)&v20, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, float))(*(_QWORD *)a1 + 216))(a1, a2, a3, a4, &v20, a7);
      if (!*a6)
      {
        *a6 = 0;
        if (v23)
          v15 = v23 + 8;
        else
          v15 = 0;
        if (v22)
        {
          v16 = a5[1];
          v17 = 8 * v22;
          do
          {
            v18 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v15 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v16 >= a5[2])
            {
              v16 = sub_245D16D48(a5, v18);
            }
            else
            {
              sub_245D19168(a5, v18);
              v16 += 24;
            }
            a5[1] = v16;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
        *a6 = 0;
      }
      return sub_245D04F5C(&v20);
    }
    else
    {
      LODWORD(v20) = 13;
      v19 = (_QWORD *)sub_245CF4F98((uint64_t)v21);
      sub_245CF35A0(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(v21, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(v21, (uint64_t)") [", 3);
      sub_245CF35A0(v21, (uint64_t)"pieces", 6);
      sub_245CF35A0(v21, (uint64_t)"] ", 2);
      sub_245CF35A0(v21, (uint64_t)"output container is null", 24);
      sub_245CF5084((uint64_t)a6, (int *)&v20);
      v21[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v21[1] = MEMORY[0x24BEDB848] + 16;
      if (v25 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (uint64_t *)MEMORY[0x249546A20](&v26);
    }
  }
  return result;
}

void sub_245D1144C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_245D04F5C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_245D11478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X8>, float a7@<S0>)
{
  uint64_t *result;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[6];
  int v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))(a6);
  if (!*a6)
  {
    *a6 = 0;
    if (a5)
    {
      a5[1] = *a5;
      sub_245D04408((uint64_t)&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, float))(*(_QWORD *)a1 + 216))(a1, a2, a3, a4, &v30, a7);
      if (!*a6)
      {
        *a6 = 0;
        if (v33)
          v15 = v33 + 8;
        else
          v15 = 0;
        if (v32)
        {
          v16 = v15 + 8 * v32;
          v17 = (_DWORD *)a5[1];
          do
          {
            v18 = *(_DWORD *)(*(_QWORD *)v15 + 64);
            v19 = a5[2];
            if ((unint64_t)v17 >= v19)
            {
              v21 = (_DWORD *)*a5;
              v22 = ((uint64_t)v17 - *a5) >> 2;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62)
                sub_245CF3B34();
              v24 = v19 - (_QWORD)v21;
              if (v24 >> 1 > v23)
                v23 = v24 >> 1;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                v25 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              if (v25)
              {
                v25 = (unint64_t)sub_245CF7A54(v25);
                v21 = (_DWORD *)*a5;
                v17 = (_DWORD *)a5[1];
              }
              else
              {
                v26 = 0;
              }
              v27 = (_DWORD *)(v25 + 4 * v22);
              *v27 = v18;
              v20 = v27 + 1;
              while (v17 != v21)
              {
                v28 = *--v17;
                *--v27 = v28;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = v25 + 4 * v26;
              if (v21)
                operator delete(v21);
            }
            else
            {
              *v17 = v18;
              v20 = v17 + 1;
            }
            a5[1] = v20;
            v15 += 8;
            v17 = v20;
          }
          while (v15 != v16);
        }
        *a6 = 0;
      }
      return sub_245D04F5C(&v30);
    }
    else
    {
      LODWORD(v30) = 13;
      v29 = (_QWORD *)sub_245CF4F98((uint64_t)v31);
      sub_245CF35A0(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(v31, (uint64_t)") [", 3);
      sub_245CF35A0(v31, (uint64_t)"ids", 3);
      sub_245CF35A0(v31, (uint64_t)"] ", 2);
      sub_245CF35A0(v31, (uint64_t)"output container is null", 24);
      sub_245CF5084((uint64_t)a6, (int *)&v30);
      v31[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v31[1] = MEMORY[0x24BEDB848] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (uint64_t *)MEMORY[0x249546A20](&v36);
    }
  }
  return result;
}

void sub_245D11740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_245D04F5C(&a9);
  _Unwind_Resume(a1);
}

void sub_245D11770(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X8>, float a9@<S0>)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  __int128 *v48;
  void *__dst;
  unint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void *__p;
  char v57;
  uint64_t v58;
  __int128 **v59;
  char *v60;
  char *v61;
  void **v62;
  uint64_t *v63;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))(a8);
  if (!*a8)
  {
    *a8 = 0;
    if (a7)
    {
      v18 = *a7;
      v19 = (void **)a7[1];
      while (v19 != (void **)v18)
      {
        v19 -= 4;
        v51 = v19;
        sub_245CF7EF0(&v51);
      }
      a7[1] = v18;
      sub_245D04FD0((uint64_t)&v51, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(_QWORD *)a1 + 224))(a1, a2, a3, a4, a5, a6, &v51, a9);
      if (!*a8)
      {
        *a8 = 0;
        v20 = (void **)*a7;
        v21 = (void **)a7[1];
        v22 = *a7;
        if (v21 != (void **)*a7)
        {
          do
          {
            v21 -= 4;
            v59 = (__int128 **)v21;
            sub_245CF7EF0((void ***)&v59);
          }
          while (v21 != v20);
          v22 = *a7;
        }
        v23 = a7[2];
        a7[1] = (uint64_t)v20;
        v24 = v54;
        v25 = v54;
        if (v54 > (unint64_t)((v23 - v22) >> 5))
        {
          if (v54 < 0)
            sub_245CF3B34();
          v63 = a7 + 2;
          v59 = (__int128 **)sub_245D18DF4(v54);
          v60 = (char *)v20 + (_QWORD)v59 - v22;
          v61 = v60;
          v62 = (void **)&v59[4 * v26];
          sub_245D18EA0(a7, &v59);
          sub_245D190B0((uint64_t)&v59);
          v24 = v54;
          v25 = v54;
        }
        if (v55)
          v27 = (uint64_t *)(v55 + 8);
        else
          v27 = 0;
        if (v24)
        {
          v28 = &v27[v25];
          do
          {
            v29 = *v27;
            v48 = 0;
            __dst = 0;
            v50 = 0;
            sub_245D16CA8((uint64_t *)&v48, *(int *)(v29 + 56));
            v30 = *(_QWORD *)(v29 + 64);
            if (v30)
              v31 = v30 + 8;
            else
              v31 = 0;
            v32 = *(int *)(v29 + 56);
            if ((_DWORD)v32)
            {
              v33 = (unint64_t)__dst;
              v34 = 8 * v32;
              do
              {
                v35 = *(_QWORD *)(*(_QWORD *)v31 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v33 >= v50)
                {
                  v33 = sub_245D16D48((uint64_t *)&v48, (__int128 *)v35);
                }
                else
                {
                  if (*(char *)(v35 + 23) < 0)
                  {
                    sub_245CF2554((_BYTE *)v33, *(void **)v35, *(_QWORD *)(v35 + 8));
                  }
                  else
                  {
                    v36 = *(_OWORD *)v35;
                    *(_QWORD *)(v33 + 16) = *(_QWORD *)(v35 + 16);
                    *(_OWORD *)v33 = v36;
                  }
                  v33 += 24;
                }
                __dst = (void *)v33;
                v31 += 8;
                v34 -= 8;
              }
              while (v34);
            }
            v37 = *(_DWORD *)(v29 + 80);
            v39 = a7[1];
            v38 = a7[2];
            if (v39 >= v38)
            {
              v41 = (uint64_t)(v39 - *a7) >> 5;
              if ((unint64_t)(v41 + 1) >> 59)
                sub_245CF3B34();
              v42 = v38 - *a7;
              v43 = v42 >> 4;
              if (v42 >> 4 <= (unint64_t)(v41 + 1))
                v43 = v41 + 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0)
                v44 = 0x7FFFFFFFFFFFFFFLL;
              else
                v44 = v43;
              v63 = a7 + 2;
              if (v44)
                v44 = (unint64_t)sub_245D18DF4(v44);
              else
                v45 = 0;
              v46 = (char *)(v44 + 32 * v41);
              v59 = (__int128 **)v44;
              v60 = v46;
              v61 = v46;
              v62 = (void **)(v44 + 32 * v45);
              *(_QWORD *)v46 = 0;
              *((_QWORD *)v46 + 1) = 0;
              *((_QWORD *)v46 + 2) = 0;
              sub_245D18F9C(v46, v48, (__int128 *)__dst, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - (_BYTE *)v48) >> 3));
              *((_DWORD *)v46 + 6) = v37;
              v61 += 32;
              sub_245D18EA0(a7, &v59);
              v40 = a7[1];
              sub_245D190B0((uint64_t)&v59);
            }
            else
            {
              *(_QWORD *)v39 = 0;
              *(_QWORD *)(v39 + 8) = 0;
              *(_QWORD *)(v39 + 16) = 0;
              sub_245D18F9C((_QWORD *)v39, v48, (__int128 *)__dst, 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__dst - (_BYTE *)v48) >> 3));
              *(_DWORD *)(v39 + 24) = v37;
              v40 = v39 + 32;
              a7[1] = v40;
            }
            a7[1] = v40;
            v59 = &v48;
            sub_245CF7EF0((void ***)&v59);
            ++v27;
          }
          while (v27 != v28);
        }
        *a8 = 0;
      }
      sub_245D043A8(v52);
      sub_245D05040(&v53);
    }
    else
    {
      LODWORD(v51) = 13;
      v47 = (_QWORD *)sub_245CF4F98((uint64_t)&v52);
      sub_245CF35A0(v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&v52, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&v52, (uint64_t)") [", 3);
      sub_245CF35A0(&v52, (uint64_t)"pieces", 6);
      sub_245CF35A0(&v52, (uint64_t)"] ", 2);
      sub_245CF35A0(&v52, (uint64_t)"output container is null", 24);
      sub_245CF5084((uint64_t)a8, (int *)&v51);
      v52 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v52 + *(_QWORD *)(v52 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v53 = MEMORY[0x24BEDB848] + 16;
      if (v57 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249546A20](&v58);
    }
  }
}

void sub_245D11BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_245CF5114((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_245D11C68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X8>, float a9@<S0>)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  void *__p;
  char v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t *v70;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 56))(a8);
  if (!*a8)
  {
    *a8 = 0;
    if (a7)
    {
      sub_245D16AC0(a7);
      sub_245D04FD0((uint64_t)&v58, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, float))(*(_QWORD *)a1 + 224))(a1, a2, a3, a4, a5, a6, &v58, a9);
      if (!*a8)
      {
        *a8 = 0;
        sub_245D16AC0(a7);
        v18 = v61;
        v19 = v61;
        v54 = a8;
        v55 = a7 + 2;
        v20 = *a7;
        if (v61 > (unint64_t)((a7[2] - *a7) >> 5))
        {
          if (v61 < 0)
            sub_245CF3B34();
          v21 = a7[1];
          v70 = a7 + 2;
          v66 = (char *)sub_245D18DF4(v61);
          v67 = &v66[v21 - v20];
          v68 = v67;
          v69 = &v66[32 * v22];
          sub_245D18EA0(a7, &v66);
          sub_245D18F34((uint64_t)&v66);
          v18 = v61;
          v19 = v61;
        }
        if (v62)
          v23 = (uint64_t *)(v62 + 8);
        else
          v23 = 0;
        if (v18)
        {
          v56 = &v23[v19];
          v57 = a7;
          do
          {
            v24 = *v23;
            v25 = *(int *)(*v23 + 56);
            if ((_DWORD)v25)
            {
              if ((v25 & 0x80000000) != 0)
                sub_245CF3B34();
              v26 = (char *)sub_245CF7A54(v25);
              v28 = (uint64_t)v26;
              v29 = *(int *)(v24 + 56);
              v30 = *(_QWORD *)(v24 + 64);
              if (v30)
                v31 = v30 + 8;
              else
                v31 = 0;
              if ((_DWORD)v29)
              {
                v32 = &v26[4 * v27];
                v33 = v26;
                v34 = v26;
                v35 = v31 + 8 * v29;
                do
                {
                  v36 = *(_DWORD *)(*(_QWORD *)v31 + 64);
                  if (v33 >= v32)
                  {
                    v37 = (v33 - v34) >> 2;
                    v38 = v37 + 1;
                    if ((unint64_t)(v37 + 1) >> 62)
                      sub_245CF3B34();
                    if ((v32 - v34) >> 1 > v38)
                      v38 = (v32 - v34) >> 1;
                    if ((unint64_t)(v32 - v34) >= 0x7FFFFFFFFFFFFFFCLL)
                      v39 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v39 = v38;
                    if (v39)
                      v39 = (unint64_t)sub_245CF7A54(v39);
                    else
                      v40 = 0;
                    v41 = (char *)(v39 + 4 * v37);
                    *(_DWORD *)v41 = v36;
                    v28 = (uint64_t)(v41 + 4);
                    while (v33 != v34)
                    {
                      v42 = *((_DWORD *)v33 - 1);
                      v33 -= 4;
                      *((_DWORD *)v41 - 1) = v42;
                      v41 -= 4;
                    }
                    v32 = (char *)(v39 + 4 * v40);
                    if (v34)
                      operator delete(v34);
                    v34 = v41;
                  }
                  else
                  {
                    *(_DWORD *)v33 = v36;
                    v28 = (uint64_t)(v33 + 4);
                  }
                  v31 += 8;
                  v33 = (char *)v28;
                }
                while (v31 != v35);
              }
              else
              {
                v34 = v26;
              }
            }
            else
            {
              v28 = 0;
              v34 = 0;
            }
            v43 = *(_DWORD *)(v24 + 80);
            v45 = v57[1];
            v44 = v57[2];
            if (v45 >= v44)
            {
              v47 = (uint64_t)(v45 - *v57) >> 5;
              if ((unint64_t)(v47 + 1) >> 59)
                sub_245CF3B34();
              v48 = v44 - *v57;
              v49 = v48 >> 4;
              if (v48 >> 4 <= (unint64_t)(v47 + 1))
                v49 = v47 + 1;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFE0)
                v50 = 0x7FFFFFFFFFFFFFFLL;
              else
                v50 = v49;
              v70 = v55;
              if (v50)
                v50 = (unint64_t)sub_245D18DF4(v50);
              else
                v51 = 0;
              v52 = v50 + 32 * v47;
              v66 = (char *)v50;
              v67 = (char *)v52;
              v68 = (char *)v52;
              v69 = (char *)(v50 + 32 * v51);
              *(_QWORD *)v52 = 0;
              *(_QWORD *)(v52 + 8) = 0;
              *(_QWORD *)(v52 + 16) = 0;
              sub_245D18E28((_QWORD *)v52, v34, v28, (v28 - (uint64_t)v34) >> 2);
              *(_DWORD *)(v52 + 24) = v43;
              v68 += 32;
              sub_245D18EA0(v57, &v66);
              v46 = v57[1];
              sub_245D18F34((uint64_t)&v66);
            }
            else
            {
              *(_QWORD *)v45 = 0;
              *(_QWORD *)(v45 + 8) = 0;
              *(_QWORD *)(v45 + 16) = 0;
              sub_245D18E28((_QWORD *)v45, v34, v28, (v28 - (uint64_t)v34) >> 2);
              *(_DWORD *)(v45 + 24) = v43;
              v46 = v45 + 32;
              v57[1] = v45 + 32;
            }
            v57[1] = v46;
            if (v34)
              operator delete(v34);
            ++v23;
          }
          while (v23 != v56);
        }
        *v54 = 0;
      }
      sub_245D043A8(v59);
      sub_245D05040(&v60);
    }
    else
    {
      v58 = 13;
      v53 = (_QWORD *)sub_245CF4F98((uint64_t)&v59);
      sub_245CF35A0(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&v59, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&v59, (uint64_t)") [", 3);
      sub_245CF35A0(&v59, (uint64_t)"ids", 3);
      sub_245CF35A0(&v59, (uint64_t)"] ", 2);
      sub_245CF35A0(&v59, (uint64_t)"output container is null", 24);
      sub_245CF5084((uint64_t)a8, &v58);
      v59 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v59 + *(_QWORD *)(v59 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v60 = MEMORY[0x24BEDB848] + 16;
      if (v64 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249546A20](&v65);
    }
  }
}

void sub_245D12124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_245CF5114((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_245D1219C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, _QWORD *a5@<X8>, float a6@<S0>)
{
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*a5)
    {
      *a5 = 0;
      if (v20 >= 0)
        v12 = &v18;
      else
        v12 = v18;
      if (v20 >= 0)
        v13 = HIBYTE(v20);
      else
        v13 = v19;
      *a4 = (*(float (**)(_QWORD, void *, uint64_t, float))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v12, v13, a6);
      *a5 = 0;
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    LODWORD(v18) = 13;
    v14 = (_QWORD *)sub_245CF4F98((uint64_t)&v19);
    sub_245CF35A0(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
    sub_245CF35A0(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_245CF35A0(&v19, (uint64_t)") [", 3);
    sub_245CF35A0(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    sub_245CF35A0(&v19, (uint64_t)"] ", 2);
    sub_245CF35A0(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sub_245CF5084((uint64_t)a5, (int *)&v18);
    v19 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v20 = MEMORY[0x24BEDB848] + 16;
    if (v22 < 0)
      operator delete(v21);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249546A20](&v23);
  }
}

void sub_245D123A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_245D123E4(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  void *__p;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  (*(void (**)(_QWORD *__return_ptr))(*a1 + 56))(a5);
  if (!*a5)
  {
    *a5 = 0;
    if (a4)
    {
      sub_245D04568(a4);
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v18, &v15);
      if (!*a5)
      {
        *a5 = 0;
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(&__p);
        if (v20 >= 0)
          v10 = &v18;
        else
          v10 = v18;
        if (v20 >= 0)
          v11 = HIBYTE(v20);
        else
          v11 = v19;
        sub_245D17CFC(a5, a1, a2, a3, (uint64_t)v10, v11, (uint64_t *)&v15, (uint64_t)__p, (uint64_t)v14, a4);
        if (!*a5)
          *a5 = 0;
        if (__p)
        {
          v14 = __p;
          operator delete(__p);
        }
      }
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (SHIBYTE(v20) < 0)
        operator delete(v18);
    }
    else
    {
      LODWORD(v18) = 13;
      v12 = (_QWORD *)sub_245CF4F98((uint64_t)&v19);
      sub_245CF35A0(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&v19, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&v19, (uint64_t)") [", 3);
      sub_245CF35A0(&v19, (uint64_t)"spt", 3);
      sub_245CF35A0(&v19, (uint64_t)"] ", 2);
      sub_245CF35A0(&v19, (uint64_t)"output proto is null", 20);
      sub_245CF5084((uint64_t)a5, (int *)&v18);
      v19 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v20 = MEMORY[0x24BEDB848] + 16;
      if (v22 < 0)
        operator delete(v21);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249546A20](&v23);
    }
  }
}

void sub_245D1264C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_245D126A8(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  char v34;
  _BYTE v35[152];

  (*(void (**)(_QWORD *__return_ptr))(*a1 + 56))(a5);
  if (*a5)
    return;
  *a5 = 0;
  if (a4)
  {
    sub_245D0514C((uint64_t *)a4);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v27, &v24);
    if (!*a5)
    {
      *a5 = 0;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 88))(a1[1]) & 1) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v22);
        v10 = v22;
        v11 = v23;
        if (v22 != v23)
        {
          while (1)
          {
            v12 = *(int **)(a4 + 32);
            if (!v12)
              break;
            v13 = *(_DWORD *)(a4 + 24);
            v14 = *v12;
            if (v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                if (v13 <= v14)
                {
                  sub_245D034FC((uint64_t *)(a4 + 16), v14 - v13 + 1);
                  v12 = *(int **)(a4 + 32);
                }
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = sub_245D04EA8(*(_QWORD *)(a4 + 16));
              v16 = *(_QWORD *)(a4 + 32);
              v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_16;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            v15 = *(_QWORD *)&v12[2 * v13 + 2];
LABEL_16:
            v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 80) = v18;
            if (v29 >= 0)
              v19 = &v27;
            else
              v19 = v27;
            if (v29 >= 0)
              v20 = HIBYTE(v29);
            else
              v20 = v28;
            sub_245D17CFC(a5, a1, a2, a3, (uint64_t)v19, v20, (uint64_t *)&v24, *(_QWORD *)v10, *(_QWORD *)(v10 + 8), v15);
            if (*a5)
              goto LABEL_34;
            *a5 = 0;
            v10 += 32;
            if (v10 == v11)
            {
              *a5 = 0;
              goto LABEL_34;
            }
          }
          v13 = *(_DWORD *)(a4 + 24);
          v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v30) = 13;
        sub_245CF4F98((uint64_t)&v31);
        sub_245CF35A0(&v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
        sub_245CF35A0(&v31, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_245CF35A0(&v31, (uint64_t)") [", 3);
        sub_245CF35A0(&v31, (uint64_t)"!nbests.empty()", 15);
        sub_245CF35A0(&v31, (uint64_t)"] ", 2);
        sub_245CF35A0(&v31, (uint64_t)"NBestEncode returns empty result.", 33);
        sub_245CF5084((uint64_t)a5, (int *)&v30);
        v31 = *MEMORY[0x24BEDB800];
        *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v32 = MEMORY[0x24BEDB848] + 16;
        if (v34 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x249546A20](v35);
LABEL_34:
        v30 = (void **)&v22;
        sub_245CF39B0(&v30);
      }
      else
      {
        LODWORD(v30) = 13;
        sub_245CF4F98((uint64_t)&v31);
        sub_245CF35A0(&v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
        sub_245CF35A0(&v31, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_245CF35A0(&v31, (uint64_t)") [", 3);
        sub_245CF35A0(&v31, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        sub_245CF35A0(&v31, (uint64_t)"] ", 2);
        sub_245CF35A0(&v31, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sub_245CF5084((uint64_t)a5, (int *)&v30);
        v31 = *MEMORY[0x24BEDB800];
        *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v32 = MEMORY[0x24BEDB848] + 16;
        if (v34 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x249546A20](v35);
      }
    }
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
    if (SHIBYTE(v29) < 0)
      operator delete(v27);
  }
  else
  {
    LODWORD(v30) = 13;
    v21 = (_QWORD *)sub_245CF4F98((uint64_t)&v31);
    sub_245CF35A0(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
    sub_245CF35A0(&v31, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_245CF35A0(&v31, (uint64_t)") [", 3);
    sub_245CF35A0(&v31, (uint64_t)"nbest_spt", 9);
    sub_245CF35A0(&v31, (uint64_t)"] ", 2);
    sub_245CF35A0(&v31, (uint64_t)"output proto is null", 20);
    sub_245CF5084((uint64_t)a5, (int *)&v30);
    v31 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v32 = MEMORY[0x24BEDB848] + 16;
    if (v34 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249546A20](v35);
  }
}

void sub_245D12C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24)
{
  a24 = &a12;
  sub_245CF39B0((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_245D12CA4(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  char v17;
  void *v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  float *v22;
  float v23;
  uint64_t v24;
  int v25;
  void **v26;
  uint64_t v27;
  int v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *v32[3];
  uint64_t v33;
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  float *v42[11];
  char v43;
  uint64_t v44;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 56))(a6);
  if (*a6)
    return;
  *a6 = 0;
  if (a5)
  {
    sub_245D04568(a5);
    if (a4 < 513)
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      __p = 0;
      v36 = 0;
      v37 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v38, &__p);
      if (*a6)
      {
LABEL_5:
        if (__p)
        {
          v36 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v40) < 0)
          operator delete(v38);
        return;
      }
      *a6 = 0;
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 88))(a1[1]);
      if (a4 >= 0)
        v17 = v16;
      else
        v17 = 0;
      if ((v17 & 1) != 0)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v33);
          if (v33 == v34)
          {
            LODWORD(v41) = 13;
            sub_245CF4F98((uint64_t)v42);
            sub_245CF35A0(v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
            sub_245CF35A0(v42, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_245CF35A0(v42, (uint64_t)") [", 3);
            sub_245CF35A0(v42, (uint64_t)"!nbests.empty()", 15);
            sub_245CF35A0(v42, (uint64_t)"] ", 2);
            sub_245CF35A0(v42, (uint64_t)"NBestEncode returns empty result.", 33);
            sub_245CF5084((uint64_t)a6, (int *)&v41);
            sub_245CF5114((uint64_t)&v41);
            v41 = &v33;
            sub_245CF39B0((void ***)&v41);
            goto LABEL_5;
          }
          LODWORD(v32[0]) = 0;
          sub_245D18A7C(&v41, (v34 - v33) >> 5, v32);
          if (v34 != v33)
          {
            v20 = (float *)v41;
            if ((unint64_t)((v34 - v33) >> 5) <= 1)
              v21 = 1;
            else
              v21 = (v34 - v33) >> 5;
            v22 = (float *)(v33 + 24);
            do
            {
              v23 = *v22;
              v22 += 8;
              *v20++ = expf(v23 * a7);
              --v21;
            }
            while (v21);
          }
          v24 = sub_245D211CC();
          sub_245D18B14((double **)v32, (float *)v41, v42[0]);
          v25 = SHIBYTE(v40);
          v26 = (void **)v38;
          v27 = v39;
          v28 = sub_245D18D40(v24, (double **)v32);
          if (v25 >= 0)
            v29 = &v38;
          else
            v29 = v26;
          if (v25 >= 0)
            v30 = v25;
          else
            v30 = v27;
          sub_245D17CFC(a6, a1, a2, a3, (uint64_t)v29, v30, (uint64_t *)&__p, *(_QWORD *)(v33 + 32 * v28), *(_QWORD *)(v33 + 32 * v28 + 8), a5);
          v31 = *a6;
          if (!*a6)
            *a6 = 0;
          if (v32[0])
          {
            v32[1] = v32[0];
            operator delete(v32[0]);
          }
          if (v41)
          {
            v42[0] = (float *)v41;
            operator delete(v41);
          }
          v41 = &v33;
          sub_245CF39B0((void ***)&v41);
          if (v31)
            goto LABEL_5;
          goto LABEL_60;
        }
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(&v41);
        if (v40 >= 0)
          v18 = &v38;
        else
          v18 = v38;
        if (v40 >= 0)
          v19 = HIBYTE(v40);
        else
          v19 = v39;
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v41) = 13;
          sub_245CF4F98((uint64_t)v42);
          sub_245CF35A0(v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
          sub_245CF35A0(v42, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_245CF35A0(v42, (uint64_t)") [", 3);
          sub_245CF35A0(v42, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          sub_245CF35A0(v42, (uint64_t)"] ", 2);
          sub_245CF35A0(v42, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sub_245CF5084((uint64_t)a6, (int *)&v41);
          sub_245CF5114((uint64_t)&v41);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(_QWORD *)a1[1] + 56))(&v41, a7);
        if (v40 >= 0)
          v18 = &v38;
        else
          v18 = v38;
        if (v40 >= 0)
          v19 = HIBYTE(v40);
        else
          v19 = v39;
      }
      sub_245D17CFC(a6, a1, a2, a3, (uint64_t)v18, v19, (uint64_t *)&__p, (uint64_t)v41, (uint64_t)v42[0], a5);
      if (*a6)
      {
        if (v41)
        {
          v42[0] = (float *)v41;
          operator delete(v41);
        }
        goto LABEL_5;
      }
      *a6 = 0;
      if (v41)
      {
        v42[0] = (float *)v41;
        operator delete(v41);
      }
LABEL_60:
      *a6 = 0;
      goto LABEL_5;
    }
    LODWORD(v41) = 13;
    v15 = (_QWORD *)sub_245CF4F98((uint64_t)v42);
    sub_245CF35A0(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
    sub_245CF35A0(v42, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_245CF35A0(v42, (uint64_t)") [", 3);
    sub_245CF35A0(v42, (uint64_t)"(nbest_size) <= (512)", 21);
    sub_245CF35A0(v42, (uint64_t)"] ", 2);
    sub_245CF35A0(v42, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sub_245CF5084((uint64_t)a6, (int *)&v41);
  }
  else
  {
    LODWORD(v41) = 13;
    v14 = (_QWORD *)sub_245CF4F98((uint64_t)v42);
    sub_245CF35A0(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
    sub_245CF35A0(v42, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_245CF35A0(v42, (uint64_t)") [", 3);
    sub_245CF35A0(v42, (uint64_t)"spt", 3);
    sub_245CF35A0(v42, (uint64_t)"] ", 2);
    sub_245CF35A0(v42, (uint64_t)"output proto is null", 20);
    sub_245CF5084((uint64_t)a6, (int *)&v41);
  }
  v42[0] = *(float **)MEMORY[0x24BEDB800];
  *(float **)((char *)v42 + *((_QWORD *)v42[0] - 3)) = *(float **)(MEMORY[0x24BEDB800] + 24);
  v42[1] = (float *)(MEMORY[0x24BEDB848] + 16);
  if (v43 < 0)
    operator delete(v42[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249546A20](&v44);
}

void sub_245D1334C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,uint64_t a27)
{
  a26 = &a14;
  sub_245CF39B0((void ***)&a26);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

void sub_245D13438(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, _QWORD *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void *__p;
  char v36;
  _BYTE v37[152];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    (*(void (**)(_QWORD, char *, size_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v29, &v26);
    if (!*a5)
    {
      *a5 = 0;
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(a1 + 8) + 64))(&v24, a6);
      v12 = v24;
      v13 = v25;
      if (v24 != v25)
      {
        while (1)
        {
          v14 = *(int **)(a4 + 32);
          if (!v14)
            break;
          v15 = *(_DWORD *)(a4 + 24);
          v16 = *v14;
          if (v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              if (v15 <= v16)
              {
                sub_245D034FC((uint64_t *)(a4 + 16), v16 - v15 + 1);
                v14 = *(int **)(a4 + 32);
              }
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v17 = sub_245D04EA8(*(_QWORD *)(a4 + 16));
            v18 = *(_QWORD *)(a4 + 32);
            v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_13;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          v17 = *(_QWORD *)&v14[2 * v15 + 2];
LABEL_13:
          v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 80) = v20;
          if (v31 >= 0)
            v21 = &v29;
          else
            v21 = v29;
          if (v31 >= 0)
            v22 = HIBYTE(v31);
          else
            v22 = v30;
          sub_245D17CFC(a5, (uint64_t *)a1, a2, a3, (uint64_t)v21, v22, (uint64_t *)&v26, *(_QWORD *)v12, *(_QWORD *)(v12 + 8), v17);
          if (*a5)
            goto LABEL_28;
          *a5 = 0;
          v12 += 32;
          if (v12 == v13)
          {
            *a5 = 0;
            goto LABEL_28;
          }
        }
        v15 = *(_DWORD *)(a4 + 24);
        v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v32) = 13;
      sub_245CF4F98((uint64_t)&v33);
      sub_245CF35A0(&v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&v33, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&v33, (uint64_t)") [", 3);
      sub_245CF35A0(&v33, (uint64_t)"!results.empty()", 16);
      sub_245CF35A0(&v33, (uint64_t)"] ", 2);
      sub_245CF35A0(&v33, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sub_245CF5084((uint64_t)a5, (int *)&v32);
      v33 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v34 = MEMORY[0x24BEDB848] + 16;
      if (v36 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249546A20](v37);
LABEL_28:
      v32 = (void **)&v24;
      sub_245CF39B0(&v32);
    }
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
    if (SHIBYTE(v31) < 0)
      operator delete(v29);
  }
  else
  {
    LODWORD(v32) = 13;
    v23 = (_QWORD *)sub_245CF4F98((uint64_t)&v33);
    sub_245CF35A0(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
    sub_245CF35A0(&v33, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_245CF35A0(&v33, (uint64_t)") [", 3);
    sub_245CF35A0(&v33, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    sub_245CF35A0(&v33, (uint64_t)"] ", 2);
    sub_245CF35A0(&v33, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sub_245CF5084((uint64_t)a5, (int *)&v32);
    v33 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v34 = MEMORY[0x24BEDB848] + 16;
    if (v36 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249546A20](v37);
  }
}

void sub_245D1388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24)
{
  a24 = &a12;
  sub_245CF39B0((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_245D13900(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  sub_245D17BD0(__p, a2);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 240))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_245D13968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_245D13984(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  size_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  std::string *v44;
  uint64_t v45;
  _BYTE *v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v51;
  _BYTE *v52;
  char **v53;
  std::string::size_type v54;
  std::string *p_dst;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int64_t v67;
  std::string::size_type v68;
  std::string *v69;
  std::string::size_type size;
  uint64_t v71;
  uint64_t *v72;
  __int128 v73;
  std::string::size_type v74;
  std::string::size_type v75;
  const std::string::value_type *v76;
  _QWORD *v77;
  char *v78;
  BOOL v79;
  std::string::size_type v80;
  std::string *v81;
  char v82;
  std::string v83;
  _QWORD **v84[2];
  _QWORD *v85[2];
  uint64_t *v86;
  std::string v87;
  BOOL v88;
  void *__p;
  char v90;
  uint64_t v91;
  uint64_t v92;
  std::string __str;
  std::string __dst;

  v7 = a4;
  v92 = a3;
  (*(void (**)(_QWORD *__return_ptr))(*a1 + 56))(a4);
  if (*v7)
    return;
  *v7 = 0;
  if (a3)
  {
    sub_245D04568(a3);
    v8 = a1[4];
    if (!v8)
      goto LABEL_8;
    v9 = *(_QWORD **)(v8 + 72);
    if (!v9)
      v9 = &unk_25751AE90;
    if ((v9[5] & 8) != 0)
    {
      v12 = v9[22];
      if (v12)
      {
        v10 = (char *)(v12 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = (char *)atomic_load(&qword_25751A1A8);
        if (!v10)
          v10 = (char *)sub_245CF2238(&off_25751A190);
      }
      if (v10[23] < 0)
        v10 = *(char **)v10;
    }
    else
    {
LABEL_8:
      v10 = (char *)&unk_245D2243A;
    }
    v13 = *a2;
    v14 = a2[1];
    while (v13 != v14)
    {
      v15 = *v13;
      v16 = v13[1];
      v17 = v92;
      v18 = *(int **)(v92 + 64);
      if (!v18)
      {
        v19 = *(_DWORD *)(v92 + 56);
        v20 = *(_DWORD *)(v92 + 60);
LABEL_25:
        if (v19 <= v20)
        {
          sub_245D034FC((uint64_t *)(v92 + 48), v20 - v19 + 1);
          v18 = *(int **)(v92 + 64);
        }
        v20 = *v18;
        goto LABEL_28;
      }
      v19 = *(_DWORD *)(v92 + 56);
      v20 = *v18;
      if (v19 < *v18)
      {
        *(_DWORD *)(v92 + 56) = v19 + 1;
        v21 = *(_QWORD *)&v18[2 * v19 + 2];
        goto LABEL_29;
      }
      if (v20 == *(_DWORD *)(v92 + 60))
        goto LABEL_25;
LABEL_28:
      *v18 = v20 + 1;
      v21 = sub_245D0424C(*(_QWORD *)(v17 + 48));
      v22 = *(_QWORD *)(v17 + 64);
      v23 = *(int *)(v17 + 56);
      *(_DWORD *)(v17 + 56) = v23 + 1;
      *(_QWORD *)(v22 + 8 * v23 + 8) = v21;
LABEL_29:
      *(_DWORD *)(v21 + 40) |= 1u;
      v24 = *(_QWORD *)(v21 + 8);
      v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFFELL);
      if ((v24 & 1) != 0)
        v25 = (_QWORD *)*v25;
      v26 = sub_245CF26F8((uint64_t **)(v21 + 48), (uint64_t)v25);
      MEMORY[0x249546864](v26, v15, v16);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 472))(a1, v15, v16);
      *(_DWORD *)(v21 + 40) |= 4u;
      *(_DWORD *)(v21 + 64) = v27;
      v13 += 2;
    }
    v28 = v92;
    sub_245D16E68(v7, a1, (_DWORD *)a1[8], (_DWORD *)a1[9], v92);
    if (*v7)
      return;
    *v7 = 0;
    v29 = *(_DWORD *)(v28 + 40);
    v30 = *(_QWORD *)(v28 + 8);
    v86 = 0;
    *(_DWORD *)(v28 + 40) = v29 | 1;
    v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
    if ((v30 & 1) != 0)
      v31 = (_QWORD *)*v31;
    v85[1] = &v86;
    v86 = sub_245CF26F8((uint64_t **)(v28 + 72), (uint64_t)v31);
    v84[0] = (_QWORD **)&v92;
    v84[1] = v85;
    v85[0] = &v92;
    memset(&v83, 0, sizeof(v83));
    LODWORD(v32) = *(_DWORD *)(v28 + 56);
    if ((int)v32 >= 1)
    {
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v82 = 1;
      v77 = v7;
      v78 = v10;
      while (1)
      {
        v36 = *(_QWORD *)(*(_QWORD *)(v28 + 64) + 8 * v34 + 8);
        if (!(*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 520))(a1, *(unsigned int *)(v36 + 64)))
          break;
        ++v34;
LABEL_124:
        v28 = v92;
        v32 = *(int *)(v92 + 56);
        if (v34 >= v32)
          goto LABEL_128;
      }
      sub_245D174F0(v7, v84, v35, v34);
      if (*v7)
        goto LABEL_134;
      *v7 = 0;
      if (!v33)
      {
        if (*((char *)v86 + 23) < 0)
        {
          if (!v86[1])
          {
LABEL_44:
            v37 = *(_QWORD *)(v36 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v37 + 23) < 0)
            {
              v39 = *(unsigned __int8 **)v37;
              v38 = *(_QWORD *)(v37 + 8);
            }
            else
            {
              v38 = *(unsigned __int8 *)(v37 + 23);
              v39 = (unsigned __int8 *)(*(_QWORD *)(v36 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            v40 = *(unsigned int *)(v36 + 64);
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 504))(a1, v40))
            {
              sub_245CF7F30(&v87, (char *)&unk_245D25DC9);
LABEL_76:
              v88 = 0;
LABEL_115:
              if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v83.__r_.__value_.__l.__data_);
              v83 = v87;
              v33 = v88;
              if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v69 = &v83;
              else
                v69 = (std::string *)v87.__r_.__value_.__r.__words[0];
              if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
              else
                size = v87.__r_.__value_.__l.__size_;
              sub_245D179F0(v85, v34++, v69, size);
              v35 = v34;
              goto LABEL_124;
            }
            if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 496))(a1, v40))
            {
              if ((v82 & 1) == 0)
                goto LABEL_70;
              v45 = a1[4];
              if (!v45)
                goto LABEL_66;
              v46 = *(_BYTE **)(v45 + 80);
              if (!v46)
                v46 = &unk_25751ADE0;
              if (v46[72] || v46[73])
              {
LABEL_66:
                if (v38 >= 3)
                {
                  v51 = *(unsigned __int16 *)v39 != 38626 || v39[2] != 129;
                  if (!v51)
                  {
                    v39 += 3;
                    v38 -= 3;
                  }
                  v47 = !v51;
                }
                else
                {
                  v47 = 0;
                }
                if (v45)
                {
                  v52 = *(_BYTE **)(v45 + 80);
                  if (!v52)
                    v52 = &unk_25751ADE0;
                  if (v52[73])
                    v47 = 0;
                }
              }
              else
              {
LABEL_70:
                v47 = 0;
              }
              v53 = (char **)operator new(0x20uLL);
              *v53 = (char *)&unk_245D22386;
              v53[1] = (char *)3;
              v53[2] = " ";
              v53[3] = (char *)1;
              sub_245CF22E8(&__dst, v39, v38);
              memset(&__str, 0, sizeof(__str));
              __str.__r_.__value_.__s.__data_[0] = 0;
              v54 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_dst = &__dst;
              else
                p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v54 = __dst.__r_.__value_.__l.__size_;
              v56 = (int64_t)v53[1];
              if (v56)
              {
                v79 = v47;
                v57 = 0;
                v75 = (std::string::size_type)v53[3];
                v76 = v53[2];
                v81 = p_dst;
                v58 = (char *)p_dst + v54;
                v59 = *v53;
                v74 = v54;
LABEL_98:
                v60 = v57;
                v80 = v54 - v57;
                if (v54 >= v57)
                {
                  p_dst = (std::string *)((char *)v81 + v57);
                  v61 = v58 - ((char *)v81 + v57);
                  if (v61 >= v56)
                  {
                    v62 = *v59;
                    v63 = (char *)v81 + v57;
                    do
                    {
                      v64 = v61 - v56;
                      if (v64 == -1)
                        break;
                      v65 = (char *)memchr(v63, v62, v64 + 1);
                      if (!v65)
                        break;
                      v66 = v65;
                      if (!memcmp(v65, v59, v56))
                      {
                        if (v66 == v58)
                          break;
                        v67 = v66 - (char *)v81;
                        if (v66 - (char *)v81 != -1)
                        {
                          std::string::append(&__str, (const std::string::value_type *)p_dst, v67 - v60);
                          std::string::append(&__str, v76, v75);
                          v57 = v67 + v56;
                          v54 = v74;
                          goto LABEL_98;
                        }
                        goto LABEL_110;
                      }
                      v63 = v66 + 1;
                      v61 = v58 - (v66 + 1);
                    }
                    while (v61 >= v56);
                  }
                }
                p_dst = (std::string *)((char *)v81 + v60);
LABEL_110:
                v7 = v77;
                v10 = v78;
                v47 = v79;
                v68 = v80;
              }
              else
              {
                v68 = v54;
              }
              std::string::append(&__str, (const std::string::value_type *)p_dst, v68);
              std::string::operator=(&__dst, &__str);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              v87 = __str;
              memset(&__str, 0, sizeof(__str));
              v88 = v47;
              operator delete(v53);
              goto LABEL_115;
            }
            v41 = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 480))(a1, v40);
            v42 = *((unsigned __int8 *)v41 + 23);
            v43 = (char)v42;
            if ((v42 & 0x80u) != 0)
              v42 = v41[1];
            if (v42 == v38)
            {
              if (v43 < 0)
                v41 = (_QWORD *)*v41;
              if (!memcmp(v41, v39, v38))
              {
                sub_245CF7F30(&v87, v10);
                goto LABEL_76;
              }
            }
            if (v38 >= 0x7FFFFFFFFFFFFFF8)
              sub_245CF238C();
            if (v38 >= 0x17)
            {
              v48 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v38 | 7) != 0x17)
                v48 = v38 | 7;
              v49 = v48 + 1;
              v44 = (std::string *)operator new(v48 + 1);
              __dst.__r_.__value_.__l.__size_ = v38;
              __dst.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v38;
              v44 = &__dst;
              if (!v38)
                goto LABEL_75;
            }
            memmove(v44, v39, v38);
LABEL_75:
            v44->__r_.__value_.__s.__data_[v38] = 0;
            v87 = __dst;
            goto LABEL_76;
          }
        }
        else if (!*((_BYTE *)v86 + 23))
        {
          goto LABEL_44;
        }
      }
      v82 = 0;
      goto LABEL_44;
    }
    v35 = 0;
LABEL_128:
    sub_245D174F0(v7, v84, v35, v32);
    if (!*v7)
    {
      *v7 = 0;
      v71 = a1[3];
      if (v71)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v71 + 40))(&v87);
        v72 = v86;
        if (*((char *)v86 + 23) < 0)
          operator delete((void *)*v86);
        v73 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
        v72[2] = v87.__r_.__value_.__r.__words[2];
        *(_OWORD *)v72 = v73;
      }
      *v7 = 0;
    }
LABEL_134:
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
  }
  else
  {
    LODWORD(v87.__r_.__value_.__l.__data_) = 13;
    v11 = (_QWORD *)sub_245CF4F98((uint64_t)&v87.__r_.__value_.__l.__size_);
    sub_245CF35A0(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
    sub_245CF35A0(&v87.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_245CF35A0(&v87.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_245CF35A0(&v87.__r_.__value_.__l.__size_, (uint64_t)"spt", 3);
    sub_245CF35A0(&v87.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_245CF35A0(&v87.__r_.__value_.__l.__size_, (uint64_t)"output proto is null", 20);
    sub_245CF5084((uint64_t)v7, (int *)&v87);
    v87.__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)&v87.__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(v87.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v87.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
    if (v90 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249546A20](&v91);
  }
}

void sub_245D1422C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_245D142A8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 *v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  size_t v20;
  void *v21[2];
  int64_t v22;
  uint64_t v23;
  __int128 *v24;
  unint64_t v25;
  void *v26[2];
  unsigned __int8 v27;
  std::string v28;
  void **v29[11];
  char v30;
  uint64_t v31;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 464))(a1);
  sub_245D16CA8(&v23, (uint64_t)(a2[1] - *a2) >> 2);
  v9 = (_DWORD *)*a2;
  v10 = (_DWORD *)a2[1];
  while (1)
  {
    if (v9 == v10)
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 232))(a1, &v23, a3);
      goto LABEL_33;
    }
    if ((*v9 & 0x80000000) != 0 || *v9 >= v8)
      break;
    v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, *v9);
    v12 = v24;
    if ((unint64_t)v24 >= v25)
    {
      v14 = (__int128 *)sub_245D16D48(&v23, (__int128 *)v11);
    }
    else
    {
      if (*(char *)(v11 + 23) < 0)
      {
        sub_245CF2554(v24, *(void **)v11, *(_QWORD *)(v11 + 8));
      }
      else
      {
        v13 = *(_OWORD *)v11;
        *((_QWORD *)v24 + 2) = *(_QWORD *)(v11 + 16);
        *v12 = v13;
      }
      v14 = (__int128 *)((char *)v12 + 24);
    }
    v24 = v14;
    ++v9;
  }
  *((_BYTE *)&v28.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v28, "Invalid id: ");
  sub_245CF4F98((uint64_t)v29);
  std::ostream::operator<<();
  std::stringbuf::str();
  v29[0] = *(void ***)MEMORY[0x24BEDB800];
  *(void ***)((char *)v29 + (unint64_t)*(v29[0] - 3)) = *(void ***)(MEMORY[0x24BEDB800] + 24);
  v29[1] = (void **)(MEMORY[0x24BEDB848] + 16);
  if (v30 < 0)
    operator delete(v29[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249546A20](&v31);
  if ((v27 & 0x80u) == 0)
    v15 = v26;
  else
    v15 = (void **)v26[0];
  if ((v27 & 0x80u) == 0)
    v16 = v27;
  else
    v16 = (std::string::size_type)v26[1];
  v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v22 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)v21 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v22 >= 0)
    v19 = v21;
  else
    v19 = (void **)v21[0];
  if (v22 >= 0)
    v20 = HIBYTE(v22);
  else
    v20 = (size_t)v21[1];
  sub_245CF8D8C(a4, 11, v19, v20);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
LABEL_33:
  v29[0] = (void **)&v23;
  sub_245CF7EF0(v29);
}

void sub_245D14514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a14 < 0)
    operator delete(__p);
  a25 = &a16;
  sub_245CF7EF0((void ***)&a25);
  _Unwind_Resume(a1);
}

void sub_245D14594(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 104))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D145E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_245CF7EF0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_245D145FC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 112))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D1464C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_245D14668(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D146B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_245D16C28((void ***)va);
  _Unwind_Resume(a1);
}

void sub_245D146D0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 152))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D14720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_245D16B94((void ***)va);
  _Unwind_Resume(a1);
}

void sub_245D14738(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D14788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_245CF7EF0((void ***)va);
  _Unwind_Resume(a1);
}

void sub_245D147A0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 168))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D147F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_245D1480C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 176))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D1485C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_245D16B14((void ***)va);
  _Unwind_Resume(a1);
}

void sub_245D14874(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 184))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D148C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_245D16A80((void ***)va);
  _Unwind_Resume(a1);
}

void sub_245D148DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 120))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D1492C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_245D14948(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 128))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D14998(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_245D149B4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    sub_245CF8D4C(v2);
}

void sub_245D14A04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sub_245D14A20(uint64_t a1)
{
  float v1;
  uint64_t v2;
  uint64_t v4;
  float v5;

  v5 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 192))(&v4);
  v1 = v5;
  v2 = v4;
  v4 = 0;
  if (v2)
    sub_245CF8D4C(v2);
  return v1;
}

void sub_245D14A70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v15 = &off_2516F7588;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  v17 = 0;
  v18 = 0;
  v16 = &unk_25751AC50;
  v9 = sub_245D16860(&v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(&v14, a1, a2, a3, v9);
  sub_245CFF56C(a4, (uint64_t)v16);
  v10 = v14;
  v14 = 0;
  if (v10)
    sub_245CF8D4C(v10);
  v15 = &off_2516F7588;
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_245D14B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    sub_245CF8D4C(a10);
  sub_245D0D3FC(v10 + 16);
  _Unwind_Resume(a1);
}

void sub_245D14BA0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>, float a6@<S0>)
{
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t (**v19)();
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v19 = &off_2516F7588;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  v21 = 0;
  v22 = 0;
  v20 = &unk_25751AC50;
  v13 = sub_245D16860(&v19);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 216))(&v18, a1, a2, a3, a4, v13, a6);
  sub_245CFF56C(a5, (uint64_t)v20);
  v14 = v18;
  v18 = 0;
  if (v14)
    sub_245CF8D4C(v14);
  v19 = &off_2516F7588;
  v15 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_245D14CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    sub_245CF8D4C(a10);
  sub_245D0D3FC(v10 + 16);
  _Unwind_Resume(a1);
}

void sub_245D14CF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t v17;
  std::__shared_weak_count *v18;

  v17 = 0;
  v18 = 0;
  v16 = &off_2516F75A8;
  v10 = sub_245D16958((uint64_t)&v16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(&v15, a1, a2, a3, a4, v10);
  sub_245D16A6C(a5, v17);
  v11 = v15;
  v15 = 0;
  if (v11)
    sub_245CF8D4C(v11);
  v16 = &off_2516F75A8;
  v12 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_245D14DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (a9)
    sub_245CF8D4C(a9);
  sub_245D0D3FC(v9 + 8);
  _Unwind_Resume(a1);
}

void sub_245D14E04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X8>, float a8@<S0>)
{
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  std::__shared_weak_count *v24;

  v23 = 0;
  v24 = 0;
  v22 = &off_2516F75A8;
  v16 = sub_245D16958((uint64_t)&v22);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 224))(&v21, a1, a2, a3, a4, a5, a6, v16, a8);
  sub_245D16A6C(a7, v23);
  v17 = v21;
  v21 = 0;
  if (v17)
    sub_245CF8D4C(v17);
  v22 = &off_2516F75A8;
  v18 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_245D14F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (a9)
    sub_245CF8D4C(a9);
  sub_245D0D3FC(v9 + 8);
  _Unwind_Resume(a1);
}

void sub_245D14F40(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_2516F7588;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  v15 = 0;
  v16 = 0;
  v14 = &unk_25751AC50;
  v7 = sub_245D16860(&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v12, a1, a2, v7);
  sub_245CFF56C(a3, (uint64_t)v14);
  v8 = v12;
  v12 = 0;
  if (v8)
    sub_245CF8D4C(v8);
  v13 = &off_2516F7588;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_245D15038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    sub_245CF8D4C(a10);
  sub_245D0D3FC(v10 + 16);
  _Unwind_Resume(a1);
}

void sub_245D15068(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_2516F7588;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  v15 = 0;
  v16 = 0;
  v14 = &unk_25751AC50;
  v7 = sub_245D16860(&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v12, a1, a2, v7);
  sub_245CFF56C(a3, (uint64_t)v14);
  v8 = v12;
  v12 = 0;
  if (v8)
    sub_245CF8D4C(v8);
  v13 = &off_2516F7588;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_245D15160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    sub_245CF8D4C(a10);
  sub_245D0D3FC(v10 + 16);
  _Unwind_Resume(a1);
}

void sub_245D15190(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_2516F7588;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  v15 = 0;
  v16 = 0;
  v14 = &unk_25751AC50;
  v7 = sub_245D16860(&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(&v12, a1, a2, v7);
  sub_245CFF56C(a3, (uint64_t)v14);
  v8 = v12;
  v12 = 0;
  if (v8)
    sub_245CF8D4C(v8);
  v13 = &off_2516F7588;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_245D15288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    sub_245CF8D4C(a10);
  sub_245D0D3FC(v10 + 16);
  _Unwind_Resume(a1);
}

void sub_245D152B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a4 = &off_2516F7588;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  a4[1] = &unk_25751AC50;
  a4[2] = 0;
  a4[3] = 0;
  v9 = sub_245D16860(a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(&v11, a1, a2, a3, v9);
  v10 = v11;
  v11 = 0;
  if (v10)
    sub_245CF8D4C(v10);
}

void sub_245D15374(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_245D0D3FC(v2);
  _Unwind_Resume(a1);
}

void sub_245D1538C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, float a6@<S0>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a5 = &off_2516F7588;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  a5[1] = &unk_25751AC50;
  a5[2] = 0;
  a5[3] = 0;
  v13 = sub_245D16860(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 216))(&v15, a1, a2, a3, a4, v13, a6);
  v14 = v15;
  v15 = 0;
  if (v14)
    sub_245CF8D4C(v14);
}

void sub_245D15468(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_245D0D3FC(v2);
  _Unwind_Resume(a1);
}

void sub_245D15480(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a5 = &off_2516F75A8;
  a5[1] = 0;
  a5[2] = 0;
  v9 = sub_245D16958((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(&v11, a1, a2, a3, a4, v9);
  v10 = v11;
  v11 = 0;
  if (v10)
    sub_245CF8D4C(v10);
}

void sub_245D15520(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  sub_245D0D3FC(v1);
  _Unwind_Resume(a1);
}

void sub_245D15538(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a7 = &off_2516F75A8;
  a7[1] = 0;
  a7[2] = 0;
  v15 = sub_245D16958((uint64_t)a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 224))(&v17, a1, a2, a3, a4, a5, a6, v15, a8);
  v16 = v17;
  v17 = 0;
  if (v16)
    sub_245CF8D4C(v16);
}

void sub_245D15600(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_245D0D3FC(v2);
  _Unwind_Resume(a1);
}

void sub_245D15618(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a3 = &off_2516F7588;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  a3[1] = &unk_25751AC50;
  a3[2] = 0;
  a3[3] = 0;
  v7 = sub_245D16860(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v9, a1, a2, v7);
  v8 = v9;
  v9 = 0;
  if (v8)
    sub_245CF8D4C(v8);
}

void sub_245D156CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_245D0D3FC(v2);
  _Unwind_Resume(a1);
}

void sub_245D156E4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a3 = &off_2516F7588;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  a3[1] = &unk_25751AC50;
  a3[2] = 0;
  a3[3] = 0;
  v7 = sub_245D16860(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v9, a1, a2, v7);
  v8 = v9;
  v9 = 0;
  if (v8)
    sub_245CF8D4C(v8);
}

void sub_245D15798(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_245D0D3FC(v2);
  _Unwind_Resume(a1);
}

void sub_245D157B0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a3 = &off_2516F7588;
  if (atomic_load(dword_254419BD0))
    sub_245CFF030(dword_254419BD0);
  a3[1] = &unk_25751AC50;
  a3[2] = 0;
  a3[3] = 0;
  v7 = sub_245D16860(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(&v9, a1, a2, v7);
  v8 = v9;
  v9 = 0;
  if (v8)
    sub_245CF8D4C(v8);
}

void sub_245D15864(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_245D0D3FC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_245D1587C(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  size_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  ((void (*)(uint64_t *__return_ptr))(*a1)[7])(&v10);
  v2 = v10;
  v10 = 0;
  if (!v2)
    return (*(uint64_t (**)(_QWORD *))(*a1[1] + 128))(a1[1]);
  sub_245CF8D4C(v2);
  v9 = 0;
  v3 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
  sub_245CF35A0(v3, (uint64_t)"(", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  sub_245CF35A0(v4, (uint64_t)") ", 2);
  sub_245CF35A0(v4, (uint64_t)"LOG(", 4);
  sub_245CF35A0(v4, (uint64_t)"ERROR", 5);
  sub_245CF35A0(v4, (uint64_t)") ", 2);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[7])(&v10, a1);
  if (v10)
  {
    v5 = (const char *)(v10 + 8);
    if (*(char *)(v10 + 31) < 0)
      v5 = *(const char **)v5;
  }
  else
  {
    v5 = (const char *)&unk_245D25DC9;
  }
  v7 = strlen(v5);
  sub_245CF35A0(v4, (uint64_t)v5, v7);
  sub_245CF35A0(v4, (uint64_t)"\nReturns default value ", 23);
  std::ostream::operator<<();
  v8 = v10;
  v10 = 0;
  if (v8)
    sub_245CF8D4C(v8);
  sub_245CF3834(&v9);
  return 0;
}

void sub_245D159E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_245CF3834(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_245D15A14(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  ((void (*)(uint64_t *__return_ptr))(*a1)[7])(&v14);
  v6 = v14;
  v14 = 0;
  if (!v6)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  sub_245CF8D4C(v6);
  v13 = 0;
  v7 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
  sub_245CF35A0(v7, (uint64_t)"(", 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_245CF35A0(v8, (uint64_t)") ", 2);
  sub_245CF35A0(v8, (uint64_t)"LOG(", 4);
  sub_245CF35A0(v8, (uint64_t)"ERROR", 5);
  sub_245CF35A0(v8, (uint64_t)") ", 2);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[7])(&v14, a1);
  if (v14)
  {
    v9 = (const char *)(v14 + 8);
    if (*(char *)(v14 + 31) < 0)
      v9 = *(const char **)v9;
  }
  else
  {
    v9 = (const char *)&unk_245D25DC9;
  }
  v11 = strlen(v9);
  sub_245CF35A0(v8, (uint64_t)v9, v11);
  sub_245CF35A0(v8, (uint64_t)"\nReturns default value ", 23);
  std::ostream::operator<<();
  v12 = v14;
  v14 = 0;
  if (v12)
    sub_245CF8D4C(v12);
  sub_245CF3834(&v13);
  return 0;
}

void sub_245D15B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_245CF3834(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_245D15BC4(_QWORD **a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;

  v4 = atomic_load((unsigned __int8 *)&qword_25751ADB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25751ADB8))
  {
    v15 = (_QWORD *)operator new();
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
    qword_25751ADB0 = (uint64_t)v15;
    __cxa_guard_release(&qword_25751ADB8);
  }
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[7])(&v17, a1);
  v5 = v17;
  v17 = 0;
  if (!v5)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 120))(a1[1], a2);
  sub_245CF8D4C(v5);
  v16 = 0;
  v6 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
  sub_245CF35A0(v6, (uint64_t)"(", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_245CF35A0(v7, (uint64_t)") ", 2);
  sub_245CF35A0(v7, (uint64_t)"LOG(", 4);
  sub_245CF35A0(v7, (uint64_t)"ERROR", 5);
  sub_245CF35A0(v7, (uint64_t)") ", 2);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[7])(&v17, a1);
  if (v17)
  {
    v8 = (const char *)(v17 + 8);
    if (*(char *)(v17 + 31) < 0)
      v8 = *(const char **)v8;
  }
  else
  {
    v8 = (const char *)&unk_245D25DC9;
  }
  v10 = strlen(v8);
  sub_245CF35A0(v7, (uint64_t)v8, v10);
  sub_245CF35A0(v7, (uint64_t)"\nReturns default value ", 23);
  v11 = *(char *)(qword_25751ADB0 + 23);
  if (v11 >= 0)
    v12 = qword_25751ADB0;
  else
    v12 = *(_QWORD *)qword_25751ADB0;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(qword_25751ADB0 + 23);
  else
    v13 = *(_QWORD *)(qword_25751ADB0 + 8);
  sub_245CF35A0(v7, v12, v13);
  v14 = v17;
  v17 = 0;
  if (v14)
    sub_245CF8D4C(v14);
  sub_245CF3834(&v16);
  return qword_25751ADB0;
}

void sub_245D15DAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25751ADB8);
  _Unwind_Resume(a1);
}

float sub_245D15DF0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  float result;
  size_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  ((void (*)(uint64_t *__return_ptr))(*a1)[7])(&v12);
  v4 = v12;
  v12 = 0;
  if (v4)
  {
    sub_245CF8D4C(v4);
    v11 = 0;
    v5 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_245CF35A0(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    sub_245CF35A0(v6, (uint64_t)") ", 2);
    sub_245CF35A0(v6, (uint64_t)"LOG(", 4);
    sub_245CF35A0(v6, (uint64_t)"ERROR", 5);
    sub_245CF35A0(v6, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[7])(&v12, a1);
    if (v12)
    {
      v7 = (const char *)(v12 + 8);
      if (*(char *)(v12 + 31) < 0)
        v7 = *(const char **)v7;
    }
    else
    {
      v7 = (const char *)&unk_245D25DC9;
    }
    v9 = strlen(v7);
    sub_245CF35A0(v6, (uint64_t)v7, v9);
    sub_245CF35A0(v6, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    v10 = v12;
    v12 = 0;
    if (v10)
      sub_245CF8D4C(v10);
    sub_245CF3834(&v11);
    return 0.0;
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t))(*a1[1] + 136))(a1[1], a2);
  }
  return result;
}

void sub_245D15F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_245CF3834(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_245D15F90(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  size_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  ((void (*)(uint64_t *__return_ptr))(*a1)[7])(&v12);
  v4 = v12;
  v12 = 0;
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 144))(a1[1], a2);
  sub_245CF8D4C(v4);
  v11 = 0;
  v5 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
  sub_245CF35A0(v5, (uint64_t)"(", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_245CF35A0(v6, (uint64_t)") ", 2);
  sub_245CF35A0(v6, (uint64_t)"LOG(", 4);
  sub_245CF35A0(v6, (uint64_t)"ERROR", 5);
  sub_245CF35A0(v6, (uint64_t)") ", 2);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[7])(&v12, a1);
  if (v12)
  {
    v7 = (const char *)(v12 + 8);
    if (*(char *)(v12 + 31) < 0)
      v7 = *(const char **)v7;
  }
  else
  {
    v7 = (const char *)&unk_245D25DC9;
  }
  v9 = strlen(v7);
  sub_245CF35A0(v6, (uint64_t)v7, v9);
  sub_245CF35A0(v6, (uint64_t)"\nReturns default value ", 23);
  std::ostream::operator<<();
  v10 = v12;
  v12 = 0;
  if (v10)
    sub_245CF8D4C(v10);
  sub_245CF3834(&v11);
  return 0;
}

void sub_245D16100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_245CF3834(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_245D16130(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  size_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  ((void (*)(uint64_t *__return_ptr))(*a1)[7])(&v12);
  v4 = v12;
  v12 = 0;
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 152))(a1[1], a2);
  sub_245CF8D4C(v4);
  v11 = 0;
  v5 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
  sub_245CF35A0(v5, (uint64_t)"(", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_245CF35A0(v6, (uint64_t)") ", 2);
  sub_245CF35A0(v6, (uint64_t)"LOG(", 4);
  sub_245CF35A0(v6, (uint64_t)"ERROR", 5);
  sub_245CF35A0(v6, (uint64_t)") ", 2);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[7])(&v12, a1);
  if (v12)
  {
    v7 = (const char *)(v12 + 8);
    if (*(char *)(v12 + 31) < 0)
      v7 = *(const char **)v7;
  }
  else
  {
    v7 = (const char *)&unk_245D25DC9;
  }
  v9 = strlen(v7);
  sub_245CF35A0(v6, (uint64_t)v7, v9);
  sub_245CF35A0(v6, (uint64_t)"\nReturns default value ", 23);
  std::ostream::operator<<();
  v10 = v12;
  v12 = 0;
  if (v10)
    sub_245CF8D4C(v10);
  sub_245CF3834(&v11);
  return 0;
}

void sub_245D162A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_245CF3834(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_245D162D0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  size_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  ((void (*)(uint64_t *__return_ptr))(*a1)[7])(&v12);
  v4 = v12;
  v12 = 0;
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 160))(a1[1], a2);
  sub_245CF8D4C(v4);
  v11 = 0;
  v5 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
  sub_245CF35A0(v5, (uint64_t)"(", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_245CF35A0(v6, (uint64_t)") ", 2);
  sub_245CF35A0(v6, (uint64_t)"LOG(", 4);
  sub_245CF35A0(v6, (uint64_t)"ERROR", 5);
  sub_245CF35A0(v6, (uint64_t)") ", 2);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[7])(&v12, a1);
  if (v12)
  {
    v7 = (const char *)(v12 + 8);
    if (*(char *)(v12 + 31) < 0)
      v7 = *(const char **)v7;
  }
  else
  {
    v7 = (const char *)&unk_245D25DC9;
  }
  v9 = strlen(v7);
  sub_245CF35A0(v6, (uint64_t)v7, v9);
  sub_245CF35A0(v6, (uint64_t)"\nReturns default value ", 23);
  std::ostream::operator<<();
  v10 = v12;
  v12 = 0;
  if (v10)
    sub_245CF8D4C(v10);
  sub_245CF3834(&v11);
  return 0;
}

void sub_245D16440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_245CF3834(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_245D16470(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  size_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  ((void (*)(uint64_t *__return_ptr))(*a1)[7])(&v12);
  v4 = v12;
  v12 = 0;
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 176))(a1[1], a2);
  sub_245CF8D4C(v4);
  v11 = 0;
  v5 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
  sub_245CF35A0(v5, (uint64_t)"(", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_245CF35A0(v6, (uint64_t)") ", 2);
  sub_245CF35A0(v6, (uint64_t)"LOG(", 4);
  sub_245CF35A0(v6, (uint64_t)"ERROR", 5);
  sub_245CF35A0(v6, (uint64_t)") ", 2);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[7])(&v12, a1);
  if (v12)
  {
    v7 = (const char *)(v12 + 8);
    if (*(char *)(v12 + 31) < 0)
      v7 = *(const char **)v7;
  }
  else
  {
    v7 = (const char *)&unk_245D25DC9;
  }
  v9 = strlen(v7);
  sub_245CF35A0(v6, (uint64_t)v7, v9);
  sub_245CF35A0(v6, (uint64_t)"\nReturns default value ", 23);
  std::ostream::operator<<();
  v10 = v12;
  v12 = 0;
  if (v10)
    sub_245CF8D4C(v10);
  sub_245CF3834(&v11);
  return 0;
}

void sub_245D165E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_245CF3834(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_245D16610(uint64_t *a1)
{
  char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_245CFF9DC(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, char *, size_t))(*a1 + 472))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 496))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_245D16674(uint64_t *a1)
{
  char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_245CFFABC(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, char *, size_t))(*a1 + 472))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 504))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_245D166D8(uint64_t *a1)
{
  char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_245CFFB9C(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, char *, size_t))(*a1 + 472))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 504))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_245D1673C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 72);
  if (!v3)
    v3 = &unk_25751AE90;
  v4 = v3[26];
  if (v4)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v5 = atomic_load(&qword_25751A188);
    if (!v5)
      v5 = sub_245CF2238(&off_25751A170);
  }
  if (*(char *)(v5 + 23) < 0)
  {
    if (*(_QWORD *)(v5 + 8))
      goto LABEL_9;
LABEL_14:
    v8 = "<pad>";
    goto LABEL_19;
  }
  if (!*(_BYTE *)(v5 + 23))
    goto LABEL_14;
LABEL_9:
  v6 = *(_QWORD **)(*(_QWORD *)(v2 + 8) + 72);
  if (!v6)
    v6 = &unk_25751AE90;
  v7 = v6[26];
  if (v7)
  {
    v8 = (const char *)(v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    v8 = (const char *)atomic_load(&qword_25751A188);
    if (!v8)
      v8 = (const char *)sub_245CF2238(&off_25751A170);
  }
  if (v8[23] < 0)
    v8 = *(const char **)v8;
LABEL_19:
  v9 = strlen(v8);
  v10 = (*(uint64_t (**)(_QWORD *, const char *, size_t))(*a1 + 472))(a1, v8, v9);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a1 + 504))(a1, v10))
    return v10;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_245D16860(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  result = a1[2];
  if (!result)
  {
    v3 = operator new(0x70uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = &off_2516F7B18;
    *(_QWORD *)&v4 = sub_245D04408((uint64_t)(v3 + 3), 0);
    *((_QWORD *)&v4 + 1) = v3;
    v5 = (std::__shared_weak_count *)a1[3];
    *((_OWORD *)a1 + 1) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    result = a1[2];
    a1[1] = result;
  }
  return result;
}

void sub_245D168F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_245D1690C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_2516F7B18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_245D1691C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_2516F7B18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249546A74);
}

uint64_t *sub_245D1694C(uint64_t a1)
{
  return sub_245D04F5C((uint64_t *)(a1 + 24));
}

uint64_t sub_245D16958(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    v3 = operator new(0x48uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = &off_2516F7B50;
    *(_QWORD *)&v4 = sub_245D04FD0((uint64_t)(v3 + 3), 0);
    *((_QWORD *)&v4 + 1) = v3;
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    return *(_QWORD *)(a1 + 8);
  }
  return result;
}

void sub_245D169E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_245D16A00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_2516F7B50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_245D16A10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_2516F7B50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249546A74);
}

void sub_245D16A40(uint64_t a1)
{
  sub_245D043A8(*(_QWORD *)(a1 + 32));
  sub_245D05040((_QWORD *)(a1 + 40));
}

void sub_245D16A6C(std::string *a1, uint64_t a2)
{
  if (a2)
    sub_245CFF56C(a1, a2);
  else
    sub_245CF7F30(a1, (char *)&unk_245D25DC9);
}

void sub_245D16A80(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_245D16AC0((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_245D16AC0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_245D16B14(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        sub_245CF7EF0(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_245D16B94(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_245D16BD4((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_245D16BD4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_245D16C28(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_245CF7EF0(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_245D16CA8(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_245CF3B34();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = sub_245CF3B48(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    sub_245CF7FF4(v2, v5);
    return (uint64_t *)sub_245CF8078((uint64_t)v5);
  }
  return result;
}

uint64_t sub_245D16D48(uint64_t *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_245CF3B34();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v17 = v6;
  if (v7)
  {
    v9 = (char *)sub_245CF3B48(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = &v9[24 * v2];
  v14[0] = v9;
  v14[1] = v10;
  v15 = v10;
  v16 = &v9[24 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    sub_245CF2554(v10, *(void **)a2, *((_QWORD *)a2 + 1));
    v10 = v15;
  }
  else
  {
    v11 = *a2;
    *((_QWORD *)v10 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v10 = v11;
  }
  v15 = v10 + 24;
  sub_245CF7FF4(a1, v14);
  v12 = a1[1];
  sub_245CF8078((uint64_t)v14);
  return v12;
}

void sub_245D16E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_245CF8078((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_245D16E68(_QWORD *a1, uint64_t *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int *v37;
  int v38;
  int v39;
  unint64_t v40;
  int *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  size_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  int v59;
  char *v60;
  size_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  size_t v67;
  int v68;
  char *v69;
  size_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v74;
  _DWORD *v76;
  __int128 __p;
  uint64_t v78;

  if (a3 != a4)
  {
    v6 = a3;
    v74 = (uint64_t *)(a5 + 48);
    while (2)
    {
      v76 = v6;
      switch(*v6)
      {
        case 0:
          v8 = *(_QWORD *)(a5 + 64);
          if (v8)
            v9 = v8 + 8;
          else
            v9 = 0;
          v10 = *(int *)(a5 + 56);
          v11 = (uint64_t *)(v9 + 8 * v10 - 8);
          if ((_DWORD)v10)
            v12 = (unint64_t)v11 > v9;
          else
            v12 = 0;
          if (!v12)
            goto LABEL_74;
          v13 = v9 + 8;
          break;
        case 1:
          v37 = *(int **)(a5 + 64);
          if (!v37)
          {
            v38 = *(_DWORD *)(a5 + 56);
            v39 = *(_DWORD *)(a5 + 60);
LABEL_54:
            if (v38 <= v39)
            {
              sub_245D034FC(v74, v39 - v38 + 1);
              v37 = *(int **)(a5 + 64);
            }
            v39 = *v37;
            goto LABEL_57;
          }
          v38 = *(_DWORD *)(a5 + 56);
          v39 = *v37;
          if (v38 < *v37)
          {
            LODWORD(v40) = v38 + 1;
            *(_DWORD *)(a5 + 56) = v38 + 1;
            goto LABEL_58;
          }
          if (v39 == *(_DWORD *)(a5 + 60))
            goto LABEL_54;
LABEL_57:
          *v37 = v39 + 1;
          v51 = sub_245D0424C(*(_QWORD *)(a5 + 48));
          v52 = *(_QWORD *)(a5 + 64);
          v53 = *(int *)(a5 + 56);
          LODWORD(v40) = v53 + 1;
          *(_DWORD *)(a5 + 56) = v53 + 1;
          *(_QWORD *)(v52 + 8 * v53 + 8) = v51;
LABEL_58:
          if ((int)v40 >= 2)
          {
            v40 = v40;
            do
            {
              v54 = *(_QWORD *)(a5 + 64) + 8;
              v55 = *(_QWORD *)(v54 + 8 * (v40 - 2));
              *(_QWORD *)(v54 + 8 * (v40 - 2)) = *(_QWORD *)(v54 + 8 * (v40 - 1));
              *(_QWORD *)(v54 + 8 * (v40 - 1)) = v55;
              v12 = v40-- > 2;
            }
            while (v12);
          }
          v56 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8);
          v57 = sub_245CFFABC(a2[1]);
          v58 = strlen(v57);
          v59 = (*(uint64_t (**)(uint64_t *, char *, size_t))(*a2 + 472))(a2, v57, v58);
          *(_DWORD *)(v56 + 40) |= 4u;
          *(_DWORD *)(v56 + 64) = v59;
          v60 = sub_245CFFABC(a2[1]);
          sub_245CFFABC(a2[1]);
          *(_DWORD *)(v56 + 40) |= 1u;
          sub_245CF22E8(&__p, v60, v61);
          v62 = *(_QWORD *)(v56 + 8);
          v63 = (_QWORD *)(v62 & 0xFFFFFFFFFFFFFFFELL);
          if ((v62 & 1) != 0)
            v63 = (_QWORD *)*v63;
          sub_245CF25F0((uint64_t **)(v56 + 48), &__p, (uint64_t)v63);
          goto LABEL_72;
        case 2:
          v41 = *(int **)(a5 + 64);
          if (!v41)
          {
            v42 = *(_DWORD *)(a5 + 56);
            v43 = *(_DWORD *)(a5 + 60);
LABEL_65:
            if (v42 <= v43)
            {
              sub_245D034FC(v74, v43 - v42 + 1);
              v41 = *(int **)(a5 + 64);
            }
            v43 = *v41;
            goto LABEL_68;
          }
          v42 = *(_DWORD *)(a5 + 56);
          v43 = *v41;
          if (v42 < *v41)
          {
            *(_DWORD *)(a5 + 56) = v42 + 1;
            v44 = *(_QWORD *)&v41[2 * v42 + 2];
            goto LABEL_69;
          }
          if (v43 == *(_DWORD *)(a5 + 60))
            goto LABEL_65;
LABEL_68:
          *v41 = v43 + 1;
          v44 = sub_245D0424C(*(_QWORD *)(a5 + 48));
          v64 = *(_QWORD *)(a5 + 64);
          v65 = *(int *)(a5 + 56);
          *(_DWORD *)(a5 + 56) = v65 + 1;
          *(_QWORD *)(v64 + 8 * v65 + 8) = v44;
LABEL_69:
          v66 = sub_245CFFB9C(a2[1]);
          v67 = strlen(v66);
          v68 = (*(uint64_t (**)(uint64_t *, char *, size_t))(*a2 + 472))(a2, v66, v67);
          *(_DWORD *)(v44 + 40) |= 4u;
          *(_DWORD *)(v44 + 64) = v68;
          v69 = sub_245CFFB9C(a2[1]);
          sub_245CFFB9C(a2[1]);
          *(_DWORD *)(v44 + 40) |= 1u;
          sub_245CF22E8(&__p, v69, v70);
          v71 = *(_QWORD *)(v44 + 8);
          v72 = (_QWORD *)(v71 & 0xFFFFFFFFFFFFFFFELL);
          if ((v71 & 1) != 0)
            v72 = (_QWORD *)*v72;
          sub_245CF25F0((uint64_t **)(v44 + 48), &__p, (uint64_t)v72);
LABEL_72:
          if (SHIBYTE(v78) < 0)
            operator delete((void *)__p);
LABEL_74:
          v6 = v76 + 1;
          if (v76 + 1 == a4)
            goto LABEL_75;
          continue;
        case 3:
          if (*(int *)(a5 + 56) >= 1)
          {
            v45 = 0;
            do
            {
              v46 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 8 * v45 + 8);
              if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a2 + 496))(a2, *(unsigned int *)(v46 + 64)))
              {
                v47 = sub_245CFF9DC(a2[1]);
                sub_245CFF9DC(a2[1]);
                *(_DWORD *)(v46 + 40) |= 1u;
                sub_245CF22E8(&__p, v47, v48);
                v49 = *(_QWORD *)(v46 + 8);
                v50 = (_QWORD *)(v49 & 0xFFFFFFFFFFFFFFFELL);
                if ((v49 & 1) != 0)
                  v50 = (_QWORD *)*v50;
                sub_245CF25F0((uint64_t **)(v46 + 48), &__p, (uint64_t)v50);
                if (SHIBYTE(v78) < 0)
                  operator delete((void *)__p);
              }
              ++v45;
            }
            while (v45 < *(int *)(a5 + 56));
          }
          goto LABEL_74;
        default:
          sub_245CF8D8C((uint64_t)a1, 13, "unknown extra_option type.", 0x1AuLL);
          return;
      }
      break;
    }
    while (1)
    {
      v14 = *(_QWORD *)(v13 - 8);
      v15 = *v11;
      if (*v11 != v14)
      {
        v17 = (uint64_t *)(v14 + 8);
        v16 = *(_QWORD *)(v14 + 8);
        v18 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
        if ((v16 & 1) != 0)
          v18 = (_QWORD *)*v18;
        v19 = *(_QWORD *)(v15 + 8);
        v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if ((v19 & 1) != 0)
          v20 = (_QWORD *)*v20;
        if (v18 == v20)
        {
          if (*(_QWORD *)(v14 + 16) == *(_QWORD *)(v15 + 16))
          {
            v22 = *(_WORD *)(v14 + 24);
            *(_WORD *)(v14 + 24) = *(_WORD *)(v15 + 24);
            *(_WORD *)(v15 + 24) = v22;
            v23 = *(_WORD *)(v14 + 26);
            *(_WORD *)(v14 + 26) = *(_WORD *)(v15 + 26);
            *(_WORD *)(v15 + 26) = v23;
            v24 = *(_QWORD *)(v14 + 32);
            *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
            *(_QWORD *)(v15 + 32) = v24;
          }
          else
          {
            *(_QWORD *)&__p = 0;
            DWORD2(__p) = 0;
            v78 = 0;
            sub_245CF9E2C((uint64_t)&__p, v15 + 16);
            sub_245CF9D90((uint64_t *)(v15 + 16));
            sub_245CF9E2C(v15 + 16, v14 + 16);
            sub_245CF9D90((uint64_t *)(v14 + 16));
            sub_245CF9E2C(v14 + 16, (uint64_t)&__p);
            sub_245CF902C((uint64_t)&__p);
          }
          v25 = *v17;
          v26 = *(_QWORD *)(v15 + 8);
          if ((*v17 & 1) != 0)
          {
            if ((v26 & 1) != 0)
              goto LABEL_27;
            v27 = sub_245CFAE88((uint64_t *)(v15 + 8));
            v25 = *v17;
            if ((*v17 & 1) == 0)
              goto LABEL_35;
LABEL_28:
            v28 = (v25 & 0xFFFFFFFFFFFFFFFELL) + 8;
          }
          else
          {
            if ((v26 & 1) == 0)
              goto LABEL_30;
LABEL_27:
            v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + 8;
            if ((v25 & 1) != 0)
              goto LABEL_28;
LABEL_35:
            v28 = sub_245CFAE88((uint64_t *)(v14 + 8));
          }
          v29 = *(_QWORD *)(v28 + 16);
          v30 = *(_OWORD *)v28;
          v31 = *(_QWORD *)(v27 + 16);
          *(_OWORD *)v28 = *(_OWORD *)v27;
          *(_QWORD *)(v28 + 16) = v31;
          *(_OWORD *)v27 = v30;
          *(_QWORD *)(v27 + 16) = v29;
LABEL_30:
          v32 = *(_DWORD *)(v14 + 40);
          *(_DWORD *)(v14 + 40) = *(_DWORD *)(v15 + 40);
          *(_DWORD *)(v15 + 40) = v32;
          v33 = *(_QWORD *)(v14 + 48);
          *(_QWORD *)(v14 + 48) = *(_QWORD *)(v15 + 48);
          *(_QWORD *)(v15 + 48) = v33;
          v34 = *(_QWORD *)(v14 + 56);
          *(_QWORD *)(v14 + 56) = *(_QWORD *)(v15 + 56);
          *(_QWORD *)(v15 + 56) = v34;
          v35 = *(_QWORD *)(v14 + 64);
          *(_QWORD *)(v14 + 64) = *(_QWORD *)(v15 + 64);
          *(_QWORD *)(v15 + 64) = v35;
          LODWORD(v35) = *(_DWORD *)(v14 + 72);
          *(_DWORD *)(v14 + 72) = *(_DWORD *)(v15 + 72);
          *(_DWORD *)(v15 + 72) = v35;
          goto LABEL_31;
        }
        v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 24))(*(_QWORD *)(v13 - 8));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 64))(v21, v14);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 64))(v14, v15);
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 64))(v15, v21);
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
LABEL_31:
      v36 = v13 >= (unint64_t)--v11;
      v13 += 8;
      if (v36)
        goto LABEL_74;
    }
  }
LABEL_75:
  *a1 = 0;
}

void sub_245D174A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_245D174F0(_QWORD *a1, _QWORD ***a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  std::string::size_type size;
  std::string::size_type v17;
  std::string *v18;
  int v19;
  std::string::size_type v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  std::string *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  int v30;
  void *v31;
  size_t v32;
  int v33;
  _QWORD *v34;
  int v35;
  unint64_t v36;
  int v37;
  _QWORD v38[11];
  char v39;
  uint64_t v40;
  std::string v41;

  if ((int)a3 >= a4)
  {
    *a1 = 0;
  }
  else
  {
    v6 = a3;
    memset(&v41, 0, sizeof(v41));
    v8 = 8 * (int)a3 + 8;
    v9 = a3;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)((**a2)[8] + v8) + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        v12 = *(void **)v10;
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v10 + 23);
        v12 = (void *)(*(_QWORD *)(*(_QWORD *)((**a2)[8] + v8) + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v13 = sub_245D009A4(v12, v11);
      if (v13 < 0)
      {
        v37 = 13;
        sub_245CF4F98((uint64_t)v38);
        sub_245CF35A0(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
        sub_245CF35A0(v38, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_245CF35A0(v38, (uint64_t)") [", 3);
        sub_245CF35A0(v38, (uint64_t)"(0) <= (byte)", 13);
        sub_245CF35A0(v38, (uint64_t)"] ", 2);
        sub_245CF5084((uint64_t)a1, &v37);
        goto LABEL_52;
      }
      std::string::append(&v41, 1uLL, v13);
      ++v9;
      v8 += 8;
    }
    while (a4 != v9);
    v33 = a4;
    v34 = a1;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    else
      v14 = v41.__r_.__value_.__r.__words[1];
    if (v14 >= 1)
    {
      v15 = 0;
      v35 = v14;
      while (1)
      {
        v36 = 0;
        size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v41.__r_.__value_.__l.__size_;
        if (size < v15)
          sub_245D17B5C("string_view::substr");
        v17 = v15;
        v18 = (std::string *)v41.__r_.__value_.__r.__words[0];
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v41;
        if (sub_245D21084((unsigned __int8 *)v18 + v17, (uint64_t)v18 + size, (uint64_t *)&v36) != 65533)
          break;
        v19 = v17 + v6;
        if (v36 != 1)
        {
          if (v36 != 3)
          {
            v37 = 13;
            sub_245CF4F98((uint64_t)v38);
            sub_245CF35A0(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
            sub_245CF35A0(v38, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_245CF35A0(v38, (uint64_t)") [", 3);
            sub_245CF35A0(v38, (uint64_t)"(consumed) == (1)", 17);
            sub_245CF35A0(v38, (uint64_t)"] ", 2);
            sub_245CF5084((uint64_t)v34, &v37);
            goto LABEL_52;
          }
          goto LABEL_23;
        }
        sub_245D179F0(a2[1], v19, &unk_245D22697, 3uLL);
        LODWORD(v23) = 1;
LABEL_44:
        v15 = v17 + v23;
        if ((int)v17 + (int)v23 >= v14)
          goto LABEL_49;
      }
      v19 = v17 + v6;
LABEL_23:
      v20 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = v41.__r_.__value_.__l.__size_;
      v21 = v20 >= v17;
      v22 = v20 - v17;
      if (!v21)
        sub_245D17B5C("string_view::substr");
      v23 = v36;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v41;
      else
        v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
      if (v22 >= v36)
        v25 = v36;
      else
        v25 = v22;
      if (v36)
      {
        v26 = v6;
        v27 = 0;
        v28 = (char *)v24 + v17;
        v29 = v36 - 1;
        v30 = v19;
        do
        {
          if (v29 == v27)
            v31 = v28;
          else
            v31 = &unk_245D25DC9;
          if (v29 == v27)
            v32 = v25;
          else
            v32 = 0;
          sub_245D179F0(a2[1], v30 + v27++, v31, v32);
        }
        while (v23 != v27);
        v6 = v26;
        v14 = v35;
      }
      goto LABEL_44;
    }
    v15 = 0;
LABEL_49:
    if (v15 + (_DWORD)v6 == v33)
    {
      *v34 = 0;
      goto LABEL_55;
    }
    v37 = 13;
    sub_245CF4F98((uint64_t)v38);
    sub_245CF35A0(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
    sub_245CF35A0(v38, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_245CF35A0(v38, (uint64_t)") [", 3);
    sub_245CF35A0(v38, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    sub_245CF35A0(v38, (uint64_t)"] ", 2);
    sub_245CF5084((uint64_t)v34, &v37);
LABEL_52:
    v38[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v38[1] = MEMORY[0x24BEDB848] + 16;
    if (v39 < 0)
      operator delete((void *)v38[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249546A20](&v40);
LABEL_55:
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_245D17994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (*(char *)(v13 - 89) < 0)
    operator delete(*(void **)(v13 - 112));
  _Unwind_Resume(exception_object);
}

std::string *sub_245D179F0(_QWORD **a1, int a2, void *__src, size_t __len)
{
  uint64_t v7;
  __int128 *p_dst;
  size_t v9;
  size_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 __dst;
  unint64_t v19;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_245CF238C();
  v7 = *(_QWORD *)(*(_QWORD *)(**a1 + 64) + 8 * a2 + 8);
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v19 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v19) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  *(_DWORD *)(v7 + 40) |= 2u;
  v11 = *(_QWORD *)(v7 + 8);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
  if ((v11 & 1) != 0)
    v12 = (_QWORD *)*v12;
  sub_245CF25F0((uint64_t **)(v7 + 56), &__dst, (uint64_t)v12);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__dst);
  v13 = *a1[1];
  if (*(char *)(v13 + 23) < 0)
    v14 = *(_QWORD *)(v13 + 8);
  else
    LODWORD(v14) = *(unsigned __int8 *)(v13 + 23);
  v15 = *(_DWORD *)(v7 + 40);
  *(_DWORD *)(v7 + 40) = v15 | 8;
  *(_DWORD *)(v7 + 68) = v14;
  if (*(char *)(v13 + 23) < 0)
    v16 = *(_QWORD *)(v13 + 8);
  else
    LODWORD(v16) = *(unsigned __int8 *)(v13 + 23);
  *(_DWORD *)(v7 + 40) = v15 | 0x18;
  *(_DWORD *)(v7 + 72) = v16 + __len;
  return std::string::append((std::string *)v13, (const std::string::value_type *)__src, __len);
}

void sub_245D17B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_245D17B5C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_245D17BAC(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2516F6780, MEMORY[0x24BEDAB00]);
}

void sub_245D17B98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_245D17BAC(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void sub_245D17BD0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  v3 = *a2;
  v2 = a2[1];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v4 = v2 - v3;
  if (v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    sub_245D17CC0(a1, v7);
    v8 = (char *)a1[1];
    bzero(v8, 16 * v7);
    a1[1] = &v8[16 * v7];
    v9 = *a2;
    if (a2[1] != *a2)
    {
      v10 = 0;
      v11 = 0;
      v12 = (_QWORD *)(*a1 + 8);
      do
      {
        v13 = (_QWORD *)(v9 + v10);
        LODWORD(v9) = *(char *)(v9 + v10 + 23);
        if ((v9 & 0x80000000) != 0)
        {
          v14 = (_QWORD *)*v13;
          v9 = v13[1];
        }
        else
        {
          v9 = v9;
          v14 = v13;
        }
        *(v12 - 1) = v14;
        *v12 = v9;
        ++v11;
        v9 = *a2;
        v12 += 2;
        v10 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v11);
    }
  }
}

void sub_245D17CA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_245D17CC0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_245CF3B34();
  result = (char *)sub_245CF8184(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_245D17CFC(_QWORD *a1, uint64_t *a2, char *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  unint64_t v12;
  char v13;
  size_t v14;
  std::string::value_type *v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  std::string::value_type v30;
  std::string::value_type v31;
  int *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *p_dst;
  std::string::size_type size;
  int v40;
  std::string *v41;
  std::string::size_type v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  std::string *v57;
  int *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  const std::string::value_type *v73;
  std::string::size_type v74;
  std::string *v75;
  uint64_t v76;
  _QWORD *v77;
  size_t v78;
  uint64_t v79;
  std::string *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  const std::string::value_type *v85;
  std::string::size_type v86;
  std::string *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v105;
  int v106;
  char *__src;
  size_t __len;
  std::string __dst;
  std::string __p[3];
  void *v111;
  char v112;
  uint64_t v113;

  if (a8 != a9)
  {
    v11 = a8;
    v12 = 0;
    v13 = 0;
    v105 = (uint64_t *)(a10 + 48);
    while (1)
    {
      v14 = *(_QWORD *)(v11 + 8);
      if (!v14)
      {
        LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
        v93 = (_QWORD *)sub_245CF4F98((uint64_t)&__p[0].__r_.__value_.__l.__size_);
        sub_245CF35A0(v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
        sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
        sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"!w.empty()", 10);
        sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
        sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"Empty piece is not allowed.", 27);
        sub_245CF5084((uint64_t)a1, (int *)__p);
        goto LABEL_144;
      }
      v15 = *(std::string::value_type **)v11;
      v16 = *(unsigned int *)(v11 + 16);
      v106 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 496))(a2, v16);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a2 + 504))(a2, v16))
        break;
      v17 = *(int **)(a10 + 64);
      if (!v17)
      {
        v18 = *(_DWORD *)(a10 + 56);
        v19 = *(_DWORD *)(a10 + 60);
        goto LABEL_58;
      }
      v18 = *(_DWORD *)(a10 + 56);
      v19 = *v17;
      if (v18 >= *v17)
      {
        if (v19 == *(_DWORD *)(a10 + 60))
        {
LABEL_58:
          if (v18 <= v19)
          {
            sub_245D034FC(v105, v19 - v18 + 1);
            v17 = *(int **)(a10 + 64);
          }
          v19 = *v17;
        }
        *v17 = v19 + 1;
        v20 = sub_245D0424C(*(_QWORD *)(a10 + 48));
        v51 = *(_QWORD *)(a10 + 64);
        v52 = *(int *)(a10 + 56);
        *(_DWORD *)(a10 + 56) = v52 + 1;
        *(_QWORD *)(v51 + 8 * v52 + 8) = v20;
        goto LABEL_62;
      }
      *(_DWORD *)(a10 + 56) = v18 + 1;
      v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_62:
      *(_DWORD *)(v20 + 40) |= 1u;
      sub_245CF22E8(__p, v15, v14);
      v53 = *(_QWORD *)(v20 + 8);
      v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFFELL);
      if ((v53 & 1) != 0)
        v54 = (_QWORD *)*v54;
      sub_245CF25F0((uint64_t **)(v20 + 48), (__int128 *)__p, (uint64_t)v54);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v55 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      v25 = *(_QWORD *)(*a7 + 8 * v12);
      *(_DWORD *)(v20 + 68) = v25;
      *(_DWORD *)(v20 + 40) = v55 | 0x1C;
LABEL_90:
      *(_DWORD *)(v20 + 72) = v25;
      v23 = v12;
LABEL_91:
      v11 += 24;
      v13 = v106;
      if (v11 == a9)
        goto LABEL_130;
    }
    v21 = *a7;
    v22 = a7[1] - *a7;
    if (v12 >= v22 >> 3)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v94 = (_QWORD *)sub_245CF4F98((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      sub_245CF35A0(v94, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(begin) < (norm_to_orig.size())", 31);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_245CF5084((uint64_t)a1, (int *)__p);
      goto LABEL_144;
    }
    v23 = v14 + v12;
    if (v14 + v12 >= v22 >> 3)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v95 = (_QWORD *)sub_245CF4F98((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      sub_245CF35A0(v95, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(end) < (norm_to_orig.size())", 29);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_245CF5084((uint64_t)a1, (int *)__p);
      goto LABEL_144;
    }
    v24 = *(_QWORD *)(v21 + 8 * v12);
    if (v24 > a4)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v96 = (_QWORD *)sub_245CF4F98((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      sub_245CF35A0(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(orig_begin) <= (input.size())", 30);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_245CF5084((uint64_t)a1, (int *)__p);
      goto LABEL_144;
    }
    v25 = *(_QWORD *)(v21 + 8 * v23);
    if (v25 > a4)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v97 = (_QWORD *)sub_245CF4F98((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      sub_245CF35A0(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(orig_end) <= (input.size())", 28);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_245CF5084((uint64_t)a1, (int *)__p);
      goto LABEL_144;
    }
    v26 = v25 - v24;
    if (v25 < v24)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v98 = (_QWORD *)sub_245CF4F98((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      sub_245CF35A0(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(orig_begin) <= (orig_end)", 26);
      sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_245CF5084((uint64_t)a1, (int *)__p);
      goto LABEL_144;
    }
    if (a4 >= v24)
      v27 = v24;
    else
      v27 = a4;
    v28 = &a3[v27];
    v29 = a4 - v27;
    if (v29 < v26)
      v26 = v29;
    __src = v28;
    __len = v26;
    if (v106)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2[1] + 184))(a2[1]))
      {
        while (1)
        {
          v31 = *v15++;
          v30 = v31;
          v32 = *(int **)(a10 + 64);
          if (!v32)
            break;
          v33 = *(_DWORD *)(a10 + 56);
          v34 = *v32;
          if (v33 >= *v32)
          {
            if (v34 == *(_DWORD *)(a10 + 60))
            {
LABEL_25:
              if (v33 <= v34)
              {
                sub_245D034FC(v105, v34 - v33 + 1);
                v32 = *(int **)(a10 + 64);
              }
              v34 = *v32;
            }
            *v32 = v34 + 1;
            v35 = sub_245D0424C(*(_QWORD *)(a10 + 48));
            v36 = *(_QWORD *)(a10 + 64);
            v37 = *(int *)(a10 + 56);
            *(_DWORD *)(a10 + 56) = v37 + 1;
            *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
            goto LABEL_29;
          }
          *(_DWORD *)(a10 + 56) = v33 + 1;
          v35 = *(_QWORD *)&v32[2 * v33 + 2];
LABEL_29:
          __p[0].__r_.__value_.__s.__data_[0] = v30;
          sub_245D01110((uint64_t)&__dst, (unsigned __int8 *)__p);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            size = __dst.__r_.__value_.__l.__size_;
          v40 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a2[1] + 112))(a2[1], p_dst, size);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = &__dst;
          else
            v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v42 = __dst.__r_.__value_.__l.__size_;
          *(_DWORD *)(v35 + 40) |= 1u;
          sub_245CF22E8(__p, v41, v42);
          v43 = *(_QWORD *)(v35 + 8);
          v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL);
          if ((v43 & 1) != 0)
            v44 = (_QWORD *)*v44;
          sub_245CF25F0((uint64_t **)(v35 + 48), (__int128 *)__p, (uint64_t)v44);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          v45 = *(_DWORD *)(v35 + 40);
          *(_DWORD *)(v35 + 40) = v45 | 4;
          *(_DWORD *)(v35 + 64) = v40;
          if (v14 == 1)
          {
            *(_DWORD *)(v35 + 40) = v45 | 6;
            sub_245CF22E8(__p, __src, __len);
            v46 = *(_QWORD *)(v35 + 8);
            v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
            if ((v46 & 1) != 0)
              v47 = (_QWORD *)*v47;
            sub_245CF25F0((uint64_t **)(v35 + 56), (__int128 *)__p, (uint64_t)v47);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            v48 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 68) = v24;
            v49 = v48 | 0x18;
            v50 = v25;
          }
          else
          {
            *(_DWORD *)(v35 + 68) = v24;
            v49 = v45 | 0x1C;
            v50 = v24;
          }
          *(_DWORD *)(v35 + 40) = v49;
          *(_DWORD *)(v35 + 72) = v50;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (!--v14)
          {
            v12 = v23;
            goto LABEL_91;
          }
        }
        v33 = *(_DWORD *)(a10 + 56);
        v34 = *(_DWORD *)(a10 + 60);
        goto LABEL_25;
      }
      if ((v13 & 1) != 0)
      {
        if (v14 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_148;
        v20 = *(_QWORD *)(*(_QWORD *)(a10 + 64) + 8 * *(int *)(a10 + 56));
        v56 = *(_QWORD *)(v20 + 48);
        if (v14 >= 0x17)
        {
          v70 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v70 = v14 | 7;
          v99 = v70 + 1;
          v57 = (std::string *)operator new(v70 + 1);
          __dst.__r_.__value_.__l.__size_ = v14;
          __dst.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
          v57 = &__dst;
        }
        v71 = v56 & 0xFFFFFFFFFFFFFFFELL;
        memmove(v57, v15, v14);
        v57->__r_.__value_.__s.__data_[v14] = 0;
        v72 = *(char *)(v71 + 23);
        if (v72 >= 0)
          v73 = (const std::string::value_type *)v71;
        else
          v73 = *(const std::string::value_type **)v71;
        if (v72 >= 0)
          v74 = *(unsigned __int8 *)(v71 + 23);
        else
          v74 = *(_QWORD *)(v71 + 8);
        v75 = std::string::insert(&__dst, 0, v73, v74);
        __p[0] = *v75;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        *(_DWORD *)(v20 + 40) |= 1u;
        v76 = *(_QWORD *)(v20 + 8);
        v77 = (_QWORD *)(v76 & 0xFFFFFFFFFFFFFFFELL);
        v78 = __len;
        if ((v76 & 1) != 0)
          v77 = (_QWORD *)*v77;
        sub_245CF25F0((uint64_t **)(v20 + 48), (__int128 *)__p, (uint64_t)v77);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_148:
          sub_245CF238C();
        v79 = *(_QWORD *)(v20 + 56);
        if (__len >= 0x17)
        {
          v81 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__len | 7) != 0x17)
            v81 = __len | 7;
          v82 = v81 + 1;
          v80 = (std::string *)operator new(v81 + 1);
          v83 = v82 | 0x8000000000000000;
          v78 = __len;
          __dst.__r_.__value_.__l.__size_ = __len;
          __dst.__r_.__value_.__r.__words[2] = v83;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
          v80 = &__dst;
          if (!__len)
            goto LABEL_116;
        }
        memmove(v80, __src, v78);
LABEL_116:
        v80->__r_.__value_.__s.__data_[v78] = 0;
        v84 = *(char *)((v79 & 0xFFFFFFFFFFFFFFFELL) + 23);
        if (v84 >= 0)
          v85 = (const std::string::value_type *)(v79 & 0xFFFFFFFFFFFFFFFELL);
        else
          v85 = *(const std::string::value_type **)(v79 & 0xFFFFFFFFFFFFFFFELL);
        if (v84 >= 0)
          v86 = *(unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFFELL) + 23);
        else
          v86 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v87 = std::string::insert(&__dst, 0, v85, v86);
        __p[0] = *v87;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        *(_DWORD *)(v20 + 40) |= 2u;
        v88 = *(_QWORD *)(v20 + 8);
        v89 = (_QWORD *)(v88 & 0xFFFFFFFFFFFFFFFELL);
        if ((v88 & 1) != 0)
          v89 = (_QWORD *)*v89;
        sub_245CF25F0((uint64_t **)(v20 + 56), (__int128 *)__p, (uint64_t)v89);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v69 = *(_DWORD *)(v20 + 40) | 0x10;
LABEL_89:
        *(_DWORD *)(v20 + 40) = v69;
        v12 = v23;
        goto LABEL_90;
      }
    }
    v58 = *(int **)(a10 + 64);
    if (v58)
    {
      v59 = *(_DWORD *)(a10 + 56);
      v60 = *v58;
      if (v59 < *v58)
      {
        *(_DWORD *)(a10 + 56) = v59 + 1;
        v20 = *(_QWORD *)&v58[2 * v59 + 2];
LABEL_80:
        *(_DWORD *)(v20 + 40) |= 1u;
        sub_245CF22E8(__p, v15, v14);
        v63 = *(_QWORD *)(v20 + 8);
        v64 = (_QWORD *)(v63 & 0xFFFFFFFFFFFFFFFELL);
        if ((v63 & 1) != 0)
          v64 = (_QWORD *)*v64;
        sub_245CF25F0((uint64_t **)(v20 + 48), (__int128 *)__p, (uint64_t)v64);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        v65 = *(_DWORD *)(v20 + 40);
        *(_DWORD *)(v20 + 64) = v16;
        *(_DWORD *)(v20 + 40) = v65 | 6;
        sub_245CF22E8(__p, __src, __len);
        v66 = *(_QWORD *)(v20 + 8);
        v67 = (_QWORD *)(v66 & 0xFFFFFFFFFFFFFFFELL);
        if ((v66 & 1) != 0)
          v67 = (_QWORD *)*v67;
        sub_245CF25F0((uint64_t **)(v20 + 56), (__int128 *)__p, (uint64_t)v67);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        v68 = *(_DWORD *)(v20 + 40);
        *(_DWORD *)(v20 + 68) = v24;
        v69 = v68 | 0x18;
        goto LABEL_89;
      }
      if (v60 != *(_DWORD *)(a10 + 60))
      {
LABEL_79:
        *v58 = v60 + 1;
        v20 = sub_245D0424C(*(_QWORD *)(a10 + 48));
        v61 = *(_QWORD *)(a10 + 64);
        v62 = *(int *)(a10 + 56);
        *(_DWORD *)(a10 + 56) = v62 + 1;
        *(_QWORD *)(v61 + 8 * v62 + 8) = v20;
        goto LABEL_80;
      }
    }
    else
    {
      v59 = *(_DWORD *)(a10 + 56);
      v60 = *(_DWORD *)(a10 + 60);
    }
    if (v59 <= v60)
    {
      sub_245D034FC(v105, v60 - v59 + 1);
      v58 = *(int **)(a10 + 64);
    }
    v60 = *v58;
    goto LABEL_79;
  }
  v23 = 0;
LABEL_130:
  if (v23 == a6)
  {
    sub_245D16E68(a1, a2, (_DWORD *)a2[5], (_DWORD *)a2[6], a10);
    if (!*a1)
    {
      *a1 = 0;
      *(_DWORD *)(a10 + 40) |= 1u;
      sub_245CF22E8(__p, a3, a4);
      v90 = *(_QWORD *)(a10 + 8);
      v91 = (_QWORD *)(v90 & 0xFFFFFFFFFFFFFFFELL);
      if ((v90 & 1) != 0)
        v91 = (_QWORD *)*v91;
      sub_245CF25F0((uint64_t **)(a10 + 72), (__int128 *)__p, (uint64_t)v91);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      *a1 = 0;
    }
    return;
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
  v92 = (_QWORD *)sub_245CF4F98((uint64_t)&__p[0].__r_.__value_.__l.__size_);
  sub_245CF35A0(v92, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
  sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(consumed) == (normalized.size())", 33);
  sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  sub_245CF35A0(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"all normalized characters are not consumed.", 43);
  sub_245CF5084((uint64_t)a1, (int *)__p);
LABEL_144:
  __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
  *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                            + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                              + 24);
  __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
  if (v112 < 0)
    operator delete(v111);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249546A20](&v113);
}

void sub_245D189D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_245D18A7C(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 62)
      sub_245CF3B34();
    v6 = sub_245CF7A54(a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v7];
    v8 = &v6[a2];
    v9 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v9 -= 4;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_245D18AF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double **sub_245D18B14(double **a1, float *a2, float *a3)
{
  uint64_t v4;
  float *v6;
  double *v7;
  uint64_t v8;
  double *v9;
  double *v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double *v16;
  unint64_t v17;
  double *v18;
  uint64_t v19;
  double *v20;
  __int128 v21;
  unint64_t v22;
  char *v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double *v31;
  double v32;
  double *v33;
  double v34;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 != a2)
  {
    if ((unint64_t)v4 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_245CF3B34();
    v6 = a2;
    v7 = (double *)sub_245CF7A9C(v4 >> 2);
    *a1 = v7;
    a1[1] = v7;
    v9 = &v7[v8];
    a1[2] = v9;
    v10 = v7;
    while (v6 != a3)
    {
      v11 = *v6++;
      *v10++ = v11;
    }
    a1[1] = v10;
    v12 = (char *)v10 - (char *)v7;
    if (v10 != v7)
    {
      if ((unint64_t)v12 >= 9)
      {
        v13 = 0;
        v14 = v12 >> 3;
        v15 = 0.0;
        do
        {
          v15 = v15 + v7[v13 / 8];
          v13 += 8;
        }
        while (v12 != v13);
        if (v7 < v10)
        {
          v16 = v7;
          do
          {
            *v16 = *v16 / v15;
            ++v16;
          }
          while (v16 < v10);
        }
        v17 = v14 - 1;
        if (v14 == 1)
        {
          v18 = 0;
          v21 = 0uLL;
        }
        else
        {
          if (v17 >> 61)
            sub_245CF3B34();
          v18 = (double *)sub_245CF7A9C(v14 - 1);
          v20 = &v18[v19];
          bzero(v18, 8 * v17);
          *(_QWORD *)&v21 = &v18[v17];
          *((_QWORD *)&v21 + 1) = v20;
          v7 = *a1;
          v10 = a1[1];
        }
        v30 = v10 - 1;
        if (v7 == v30)
        {
LABEL_27:
          *a1 = v18;
          *(_OWORD *)(a1 + 1) = v21;
          if (!v7)
            return a1;
          goto LABEL_33;
        }
        v31 = v7 + 1;
        v32 = *v7;
        *v18 = *v7;
        if (v7 + 1 != v30)
        {
          v33 = v18 + 1;
          do
          {
            v34 = *v31++;
            v32 = v32 + v34;
            *v33++ = v32;
          }
          while (v31 != v30);
          goto LABEL_27;
        }
        *a1 = v18;
        *(_OWORD *)(a1 + 1) = v21;
LABEL_33:
        operator delete(v7);
        return a1;
      }
      a1[1] = v7;
      v22 = v7 - *a1;
      if (v22 < v9 - *a1)
      {
        if (v7 == *a1)
        {
          v27 = 0;
          v25 = 8 * v22;
        }
        else
        {
          v23 = (char *)sub_245CF7A9C(v7 - *a1);
          v24 = *a1;
          v7 = a1[1];
          v25 = (uint64_t)&v23[8 * v22];
          v27 = (double *)&v23[8 * v26];
          if (v7 != *a1)
          {
            v28 = v25;
            do
            {
              v29 = *((_QWORD *)v7-- - 1);
              *(_QWORD *)(v28 - 8) = v29;
              v28 -= 8;
            }
            while (v7 != v24);
            v7 = v24;
LABEL_32:
            *a1 = (double *)v28;
            a1[1] = (double *)v25;
            a1[2] = v27;
            if (v7)
              goto LABEL_33;
            return a1;
          }
        }
        v28 = v25;
        goto LABEL_32;
      }
    }
  }
  return a1;
}

void sub_245D18D10(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x245D18CECLL);
}

void sub_245D18D20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_245D18D40(uint64_t a1, double **a2)
{
  double *v4;
  double *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  double *v10;
  double *v11;
  double v12;

  v4 = *a2;
  v5 = a2[1];
  v6 = sub_245CF43B0(a1);
  v7 = sub_245CF43B0(a1);
  if (v5 != v4)
  {
    v8 = v5 - v4;
    do
    {
      v9 = v8 >> 1;
      v10 = &v4[v8 >> 1];
      v12 = *v10;
      v11 = v10 + 1;
      v8 += ~(v8 >> 1);
      if (((double)v6 + (double)v7 * 4294967300.0) * 5.42101086e-20 + 0.0 < v12)
        v8 = v9;
      else
        v4 = v11;
    }
    while (v8);
    v5 = v4;
  }
  return (unint64_t)((char *)v5 - (char *)*a2) >> 3;
}

void *sub_245D18DF4(unint64_t a1)
{
  if (a1 >> 59)
    sub_245CF3B8C();
  return operator new(32 * a1);
}

_QWORD *sub_245D18E28(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_245CF7A04(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_245D18E84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_245D18EA0(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_245D18F34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v4)
    {
      *(_QWORD *)(v2 - 24) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_245D18F9C(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (a4)
  {
    v6 = result;
    sub_245CF8124(result, a4);
    v7 = v6[1];
    v12 = v7;
    v13 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    v11 = 0;
    if (a2 == a3)
    {
      v8 = v7;
    }
    else
    {
      v8 = v7;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          sub_245CF2554((_BYTE *)v8, *(void **)a2, *((_QWORD *)a2 + 1));
          v8 = v13;
        }
        else
        {
          v9 = *a2;
          *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v8 = v9;
        }
        a2 = (__int128 *)((char *)a2 + 24);
        v8 += 24;
        v13 = v8;
      }
      while (a2 != a3);
    }
    v11 = 1;
    result = (_QWORD *)sub_245D1910C((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_245D19074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_245CF7EF0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_245D190B0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    sub_245CF7EF0(&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_245D1910C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

_QWORD *sub_245D19168(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_245CF2554((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

uint64_t sub_245D191D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_245D1924C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    sub_245CF7EF0(&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_245D192A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x249546A20](a1 + 128);
  return a1;
}

void sub_245D19330(_QWORD *a1, uint64_t *a2, uint64_t a3, unint64_t a4, char **a5)
{
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *__p[2];
  __int128 v49;
  uint64_t v50;
  _QWORD v51[21];

  v51[19] = *MEMORY[0x24BDAC8D0];
  a5[1] = *a5;
  if (!a4)
    goto LABEL_38;
  (*(void (**)(uint64_t *))(*a2 + 56))(a2);
  if (*a1)
    return;
  *a1 = 0;
  v10 = atomic_load((unsigned __int8 *)&qword_25751ADD8);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25751ADD8))
  {
    v47 = xmmword_2516F7C90;
    *(_OWORD *)__p = unk_2516F7CA0;
    v49 = xmmword_2516F7CB0;
    v50 = 3;
    v43 = xmmword_2516F7C50;
    v44 = unk_2516F7C60;
    v45 = xmmword_2516F7C70;
    v46 = *(_OWORD *)&off_2516F7C80;
    sub_245D19A50((uint64_t)&v43, 5);
    __cxa_atexit((void (*)(void *))sub_245D19C10, &qword_25751ADC0, &dword_245CF0000);
    __cxa_guard_release(&qword_25751ADD8);
  }
  sub_245CF7C68(&v41, a3, a4, ":", 1);
  v11 = (uint64_t *)v41;
  v12 = v42;
  if (v41 == v42)
  {
LABEL_36:
    if (v11)
    {
      v42 = v11;
      operator delete(v11);
    }
LABEL_38:
    *a1 = 0;
    return;
  }
  while (1)
  {
    v13 = qword_25751ADC8;
    if (!qword_25751ADC8)
      break;
    v14 = (void *)*v11;
    v15 = v11[1];
    v16 = &qword_25751ADC8;
    do
    {
      v17 = sub_245D012B0(*(const void **)(v13 + 32), *(_QWORD *)(v13 + 40), v14, v15);
      v18 = (uint64_t *)(v13 + 8);
      if (!v17)
      {
        v18 = (uint64_t *)v13;
        v16 = (uint64_t *)v13;
      }
      v13 = *v18;
    }
    while (*v18);
    if (v16 == &qword_25751ADC8 || (sub_245D012B0(v14, v15, (void *)v16[4], v16[5]) & 1) != 0)
      break;
    v20 = a5[1];
    v19 = (unint64_t)a5[2];
    if ((unint64_t)v20 >= v19)
    {
      v22 = *a5;
      v23 = (v20 - *a5) >> 2;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62)
        sub_245CF3B34();
      v25 = v19 - (_QWORD)v22;
      if (v25 >> 1 > v24)
        v24 = v25 >> 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 >> 62)
          sub_245CF3B8C();
        v27 = (char *)operator new(4 * v26);
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[4 * v23];
      *(_DWORD *)v28 = *((_DWORD *)v16 + 12);
      v21 = v28 + 4;
      while (v20 != v22)
      {
        v29 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v28 - 1) = v29;
        v28 -= 4;
      }
      *a5 = v28;
      a5[1] = v21;
      a5[2] = &v27[4 * v26];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_DWORD *)v20 = *((_DWORD *)v16 + 12);
      v21 = v20 + 4;
    }
    a5[1] = v21;
    v30 = *((_DWORD *)v16 + 12);
    if (v30 == 1)
    {
      v31 = sub_245CFFABC(a2[1]);
      v32 = strlen(v31);
      v33 = (*(uint64_t (**)(uint64_t *, char *, size_t))(*a2 + 472))(a2, v31, v32);
      if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 496))(a2, v33) & 1) != 0)
      {
        LODWORD(v43) = 13;
        sub_245CF4F98((uint64_t)&v43 + 8);
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)") [", 3);
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"] ", 2);
        v37 = sub_245CFFABC(a2[1]);
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)v37, v38);
        sub_245CF5084((uint64_t)a1, (int *)&v43);
        goto LABEL_45;
      }
      v30 = *((_DWORD *)v16 + 12);
    }
    if (v30 == 2)
    {
      v34 = sub_245CFFB9C(a2[1]);
      v35 = strlen(v34);
      v36 = (*(uint64_t (**)(uint64_t *, char *, size_t))(*a2 + 472))(a2, v34, v35);
      if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 496))(a2, v36) & 1) != 0)
      {
        LODWORD(v43) = 13;
        sub_245CF4F98((uint64_t)&v43 + 8);
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)") [", 3);
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"] ", 2);
        v39 = sub_245CFFB9C(a2[1]);
        sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)v39, v40);
        sub_245CF5084((uint64_t)a1, (int *)&v43);
LABEL_45:
        *((_QWORD *)&v43 + 1) = *MEMORY[0x24BEDB800];
        *(_QWORD *)((char *)&v43 + *(_QWORD *)(*((_QWORD *)&v43 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                              + 24);
        *(_QWORD *)&v44 = MEMORY[0x24BEDB848] + 16;
        if (SBYTE7(v49) < 0)
          operator delete(__p[0]);
        goto LABEL_47;
      }
    }
    v11 += 2;
    if (v11 == v12)
    {
      v11 = (uint64_t *)v41;
      goto LABEL_36;
    }
  }
  LODWORD(v43) = 13;
  sub_245CF4F98((uint64_t)&v43 + 8);
  sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/IntelligencePlatformSentencePiece/SentencePiece/libsentencepiece/src/sentencepiece_processor.cc", 133);
  sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)") [", 3);
  sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"it != extra_option_map.end()", 28);
  sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"] ", 2);
  sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"option \"", 8);
  sub_245CF35A0((_QWORD *)&v43 + 1, *v11, v11[1]);
  sub_245CF35A0((_QWORD *)&v43 + 1, (uint64_t)"\" is not available.", 19);
  sub_245CF5084((uint64_t)a1, (int *)&v43);
  *((_QWORD *)&v43 + 1) = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v43 + *(_QWORD *)(*((_QWORD *)&v43 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *(_QWORD *)&v44 = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v49) < 0)
    operator delete(__p[0]);
LABEL_47:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249546A20](v51);
  if (v41)
  {
    v42 = (uint64_t *)v41;
    operator delete(v41);
  }
}

void sub_245D199D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_guard_abort(&qword_25751ADD8);
  _Unwind_Resume(a1);
}

uint64_t sub_245D19A50(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  void *v10;
  size_t v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  size_t v15;
  _QWORD *v16;
  __int128 v17;

  qword_25751ADD0 = 0;
  qword_25751ADC8 = 0;
  qword_25751ADC0 = (uint64_t)&qword_25751ADC8;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = result + 24 * a2;
    for (i = &qword_25751ADC8; i != &qword_25751ADC8; i = (uint64_t *)qword_25751ADC0)
    {
      v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        v8 = &qword_25751ADC8;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      v10 = *(void **)v2;
      v11 = *(_QWORD *)(v2 + 8);
      result = sub_245D012B0((const void *)v7[4], v7[5], *(void **)v2, v11);
      if ((_DWORD)result)
        goto LABEL_11;
      if (!v3)
        goto LABEL_22;
      v13 = (uint64_t *)v3;
      while (1)
      {
        while (1)
        {
          v7 = v13;
          v14 = (void *)v13[4];
          v15 = v13[5];
          if (!sub_245D012B0(v10, v11, v14, v15))
            break;
          v13 = (uint64_t *)*v7;
          v12 = v7;
          if (!*v7)
            goto LABEL_23;
        }
        result = sub_245D012B0(v14, v15, v10, v11);
        if (!(_DWORD)result)
          break;
        v12 = v7 + 1;
        v13 = (uint64_t *)v7[1];
        if (!v13)
          goto LABEL_23;
      }
LABEL_26:
      v2 += 24;
      if (v2 == v4)
        return result;
    }
    v7 = &qword_25751ADC8;
LABEL_11:
    if (v3)
    {
      v12 = v7 + 1;
      if (v7[1])
        goto LABEL_26;
    }
    else
    {
LABEL_22:
      v7 = &qword_25751ADC8;
      v12 = &qword_25751ADC8;
    }
LABEL_23:
    v16 = operator new(0x38uLL);
    v17 = *(_OWORD *)v2;
    v16[6] = *(_QWORD *)(v2 + 16);
    *((_OWORD *)v16 + 2) = v17;
    *v16 = 0;
    v16[1] = 0;
    v16[2] = v7;
    *v12 = (uint64_t)v16;
    if (*(_QWORD *)qword_25751ADC0)
    {
      qword_25751ADC0 = *(_QWORD *)qword_25751ADC0;
      v16 = (_QWORD *)*v12;
    }
    result = (uint64_t)sub_245CF7AD0((uint64_t *)qword_25751ADC8, v16);
    v3 = qword_25751ADC8;
    ++qword_25751ADD0;
    goto LABEL_26;
  }
  return result;
}

void sub_245D19BFC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_245CF9290(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_245D19C10(uint64_t a1)
{
  sub_245CF9290(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_245D19C44(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = sub_245D0C0C8(v2, 0);
  *a1 = v2;
  return result;
}

void sub_245D19C88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249546A74](v1, 0x10A1C401E679671);
  _Unwind_Resume(a1);
}

uint64_t sub_245D19CAC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_245D0D2AC(result);
    JUMPOUT(0x249546A74);
  }
  return result;
}

_QWORD *sub_245D19CE8(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_2516F72C8;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  sub_245D19CAC(a1 + 4, 0);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_245D19EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_245D1A0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (__p)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);

  _Unwind_Resume(a1);
}

void sub_245D1A294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  a9 = &a16;
  sub_245CF7EF0((void ***)&a9);
  if (a24 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_245D1A5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  a12 = &a26;
  sub_245CF7EF0((void ***)&a12);

  _Unwind_Resume(a1);
}

void sub_245D1A878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_245D1A93C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_245D1A9A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_2516F7B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_245D1A9B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_2516F7B88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249546A74);
}

uint64_t sub_245D1A9E0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_245D1A9F4(uint64_t a1)
{
  sub_245D1AA18(a1);
  JUMPOUT(0x249546A74);
}

uint64_t sub_245D1AA18(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_2516F7930;
  sub_245D1AA80((_QWORD *)(a1 + 96));
  v4 = (void **)(a1 + 72);
  sub_245D16B94(&v4);
  v4 = (void **)(a1 + 48);
  sub_245D16B94(&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_245D1AA80(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_2516F7818;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x249546A50](*v2, 0x1070C8005A2B047);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_245D1AB14(_QWORD *a1)
{
  sub_245D1AA80(a1);
  JUMPOUT(0x249546A74);
}

uint64_t sub_245D1AB38(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2516F7858;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_245CFF984((uint64_t)a1);
}

void sub_245D1AB7C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2516F7858;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_245CFF984((uint64_t)a1);
  JUMPOUT(0x249546A74);
}

void sub_245D1ABD4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  char *v29;
  float *v30;
  float *v31;
  unsigned __int8 *v32;
  int v33;
  float v34;
  int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  double v46;
  double v47;
  float v48;
  float *v49;
  int *v50;
  int v51;
  float v52;
  char *v54;
  char *v55;
  char *v56;
  unsigned int v57;
  float *v58;
  unint64_t v59;
  unsigned int *v60;
  int v61;
  unsigned __int8 *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v75;
  int v76;
  float *v77;
  uint64_t *v79;
  uint64_t *v80;
  _BYTE v81[96];
  uint64_t (**v82)();
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  if (!*(_DWORD *)(a1 + 140))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v81, a1);
    v7 = *(_QWORD *)v81;
    if (*(_QWORD *)v81)
      goto LABEL_25;
    if (!a3)
      goto LABEL_26;
    v24 = *(float *)(a1 + 120);
    v25 = (a3 << 32) + 0x100000000;
    if (a3 << 32 == 0xFFFFFFFF00000000)
    {
      v30 = 0;
    }
    else
    {
      if (v25 < 0)
        sub_245CF3B34();
      v26 = v25 >> 32;
      v27 = 3 * v26;
      v28 = (float *)operator new(12 * v26);
      v29 = (char *)&v28[v27];
      v30 = v28;
      v31 = v28;
      do
      {
        *(_QWORD *)v31 = 0xFFFFFFFFLL;
        v31[2] = NAN;
        v31 += 3;
      }
      while (v31 != (float *)v29);
    }
    v32 = a2;
    if ((int)a3 <= 0)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    else
    {
      v33 = 0;
      do
      {
        v34 = v30[3 * v33 + 1];
        v35 = asc_245D25FED[(unint64_t)a2[v33] >> 4];
        if ((int)a3 - v33 < v35)
          v35 = a3 - v33;
        if ((int)a3 <= (unint64_t)v33)
          goto LABEL_53;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 16);
        v40 = (int *)&v30[3 * v33 + 5];
        do
        {
          v41 = a2[v33 + v36];
          LODWORD(v38) = (*(_DWORD *)(v39 + 4 * v38) >> 10 << ((*(_DWORD *)(v39 + 4 * v38) >> 6) & 8)) ^ v38 ^ v41;
          v42 = *(_DWORD *)(v39 + 4 * v38);
          if ((v42 & 0x800000FF) != v41)
            break;
          if ((v42 & 0x100) != 0)
          {
            v43 = *(_DWORD *)(v39 + 4 * ((v42 >> 10 << ((v42 >> 6) & 8)) ^ v38)) & 0x7FFFFFFF;
            v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * v43 + 8);
            v45 = *(_DWORD *)(v44 + 60);
            if (v45 != 5)
            {
              if (v45 == 4)
                v46 = (float)(*(float *)(a1 + 124) * (float)(unint64_t)(v36 + 1)) + -0.1;
              else
                v46 = *(float *)(v44 + 56);
              v47 = v46 + v34;
              if (*v40 == -1 || v47 > *((float *)v40 - 1))
              {
                v48 = v47;
                *((float *)v40 - 1) = v48;
                *v40 = v33;
                *(v40 - 2) = v43;
              }
              v37 |= v35 - 1 == v36;
            }
          }
          ++v36;
          v40 += 3;
        }
        while ((int)a3 - (uint64_t)v33 != v36);
        if ((v37 & 1) == 0)
        {
LABEL_53:
          v49 = &v30[3 * v35 + 3 * v33];
          v51 = *((_DWORD *)v49 + 2);
          v50 = (int *)(v49 + 2);
          v52 = (float)(v24 + -10.0) + v34;
          if (v51 == -1 || v52 > *((float *)v50 - 1))
          {
            *((float *)v50 - 1) = v52;
            *v50 = v33;
            v30[3 * v35 + 3 * v33] = *(float *)(a1 + 104);
          }
        }
        v33 += v35;
      }
      while (v33 < (int)a3);
      v54 = 0;
      v55 = 0;
      v56 = 0;
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v57 = a3;
      v77 = v30;
      do
      {
        v58 = &v30[3 * v57];
        v60 = (unsigned int *)(v58 + 2);
        v59 = *((int *)v58 + 2);
        if (a3 < v59)
          sub_245D17B5C("string_view::substr");
        v61 = v57 - v59;
        v62 = &v32[v59];
        if (a3 - v59 >= v61)
          v63 = v61;
        else
          v63 = a3 - v59;
        if (v54 >= v56)
        {
          v64 = 0xAAAAAAAAAAAAAAABLL * ((v54 - v55) >> 3) + 1;
          if (v64 > 0xAAAAAAAAAAAAAAALL)
            sub_245CF3B34();
          if (0x5555555555555556 * ((v56 - v55) >> 3) > v64)
            v64 = 0x5555555555555556 * ((v56 - v55) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 3) >= 0x555555555555555)
            v65 = 0xAAAAAAAAAAAAAAALL;
          else
            v65 = v64;
          v66 = (char *)sub_245CF3B48(v65);
          v68 = &v66[8 * ((v54 - v55) >> 3)];
          *(_QWORD *)v68 = v62;
          *((_QWORD *)v68 + 1) = v63;
          *((float *)v68 + 4) = *v58;
          if (v54 == v55)
          {
            v71 = v54;
            v55 = &v66[8 * ((v54 - v55) >> 3)];
            v30 = v77;
          }
          else
          {
            v69 = &v66[8 * ((v54 - v55) >> 3)];
            v30 = v77;
            do
            {
              v70 = *(_OWORD *)(v54 - 24);
              *((_QWORD *)v69 - 1) = *((_QWORD *)v54 - 1);
              *(_OWORD *)(v69 - 24) = v70;
              v69 -= 24;
              v54 -= 24;
            }
            while (v54 != v55);
            v71 = v55;
            v55 = v69;
          }
          v56 = &v66[24 * v67];
          v54 = v68 + 24;
          *a4 = v55;
          a4[1] = v68 + 24;
          a4[2] = v56;
          if (v71)
            operator delete(v71);
          v32 = a2;
        }
        else
        {
          *(_QWORD *)v54 = v62;
          *((_QWORD *)v54 + 1) = v63;
          *((float *)v54 + 4) = *v58;
          v54 += 24;
        }
        a4[1] = v54;
        v57 = *v60;
      }
      while ((int)*v60 > 0);
      v72 = *a4;
      v73 = v54 - 24;
      if (*a4 == v54 || v73 <= v72)
        goto LABEL_90;
      do
      {
        *(_OWORD *)v81 = *(_OWORD *)v72;
        v75 = *(_OWORD *)v81;
        *(_OWORD *)v72 = *(_OWORD *)v73;
        *(_OWORD *)v73 = v75;
        v76 = *((_DWORD *)v72 + 4);
        *((_DWORD *)v72 + 4) = *((_DWORD *)v73 + 4);
        *((_DWORD *)v73 + 4) = v76;
        v72 += 24;
        v73 -= 24;
      }
      while (v72 < v73);
    }
    if (!v30)
      return;
LABEL_90:
    operator delete(v30);
    return;
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v81, a1);
  v7 = *(_QWORD *)v81;
  if (*(_QWORD *)v81)
  {
LABEL_25:
    *(_QWORD *)v81 = 0;
    sub_245CF8D4C(v7);
    goto LABEL_26;
  }
  if (!a3)
  {
LABEL_26:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  *(_QWORD *)v81 = &off_2516F7930;
  memset(&v81[8], 0, 88);
  v82 = &off_2516F7818;
  v83 = 0u;
  v84 = 0u;
  v85 = 0;
  v86 = 1024;
  sub_245D1D0C4((uint64_t)v81, a2, a3);
  sub_245D1D544(a1, v81);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_245D1E068((uint64_t)&v79, v81);
  v8 = v79;
  v9 = v80;
  if (v79 != v80)
  {
    v10 = 0;
    do
    {
      v11 = *v8;
      v12 = (unint64_t)a4[2];
      if ((unint64_t)v10 >= v12)
      {
        v14 = *a4;
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a4) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_245CF3B34();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v14) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v19 = (char *)sub_245CF3B48(v18);
        v21 = &v19[24 * v15];
        *(_OWORD *)v21 = *(_OWORD *)v11;
        *((_DWORD *)v21 + 4) = *(_DWORD *)(v11 + 28);
        v22 = v21;
        if (v10 != v14)
        {
          do
          {
            v23 = *(_OWORD *)(v10 - 24);
            *((_QWORD *)v22 - 1) = *((_QWORD *)v10 - 1);
            *(_OWORD *)(v22 - 24) = v23;
            v22 -= 24;
            v10 -= 24;
          }
          while (v10 != v14);
          v10 = v14;
        }
        v13 = v21 + 24;
        *a4 = v22;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_OWORD *)v10 = *(_OWORD *)v11;
        *((_DWORD *)v10 + 4) = *(_DWORD *)(v11 + 28);
        v13 = v10 + 24;
      }
      a4[1] = v13;
      ++v8;
      v10 = v13;
    }
    while (v8 != v9);
    v8 = v79;
  }
  if (v8)
    operator delete(v8);
  sub_245D1AA18((uint64_t)v81);
}

void sub_245D1B218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_245D1AA18((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_245D1B27C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  void *v10;
  char *v11;
  void *v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)();
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t (*v42)();
  uint64_t *v43;
  uint64_t (*v44)();
  uint64_t (*v45)();
  uint64_t (*v46)();
  __int128 v47;
  char *v48;
  unint64_t v49;
  uint64_t *v50;
  void *__p[13];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  v10 = __p[0];
  if (__p[0])
  {
    __p[0] = 0;
    sub_245CF8D4C((uint64_t)v10);
LABEL_3:
    memset(__p, 0, 28);
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(_QWORD *)&v47 = a5;
    BYTE8(v47) = 0;
    v11 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v11;
    a5[1] = (uint64_t)v11;
    a5[2] = (uint64_t)(v11 + 32);
    a5[1] = sub_245CF38EC((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v11);
    v12 = __p[0];
    if (!__p[0])
      return;
    __p[1] = __p[0];
    goto LABEL_5;
  }
  if (!a3)
    goto LABEL_3;
  if (a4 >= 1024)
    v13 = 1024;
  else
    v13 = a4;
  if (v13 <= 1)
    v14 = 1;
  else
    v14 = v13;
  if (v14 > 1)
  {
    __p[0] = &off_2516F7930;
    memset(&__p[1], 0, 88);
    __p[12] = &off_2516F7818;
    v52 = 0u;
    v53 = 0u;
    v54 = 0;
    v55 = 1024;
    sub_245D1D0C4((uint64_t)__p, a2, a3);
    sub_245D1D544(a1, __p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v43 = a5;
    sub_245D1E384(&v45, __p, v14, 0, 0.0);
    v16 = v45;
    v42 = v46;
    if (v45 != v46)
    {
      v41 = a5 + 2;
      do
      {
        v17 = *(uint64_t **)v16;
        v18 = (uint64_t *)*((_QWORD *)v16 + 1);
        v44 = v16;
        if (*(uint64_t **)v16 == v18)
        {
          v19 = 0;
          v20 = 0;
        }
        else
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          do
          {
            v22 = *v17;
            if (v20 >= v21)
            {
              v23 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3) + 1;
              if (v23 > 0xAAAAAAAAAAAAAAALL)
                sub_245CF3B34();
              if (0x5555555555555556 * ((v21 - v19) >> 3) > v23)
                v23 = 0x5555555555555556 * ((v21 - v19) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v21 - v19) >> 3) >= 0x555555555555555)
                v24 = 0xAAAAAAAAAAAAAAALL;
              else
                v24 = v23;
              v25 = (char *)sub_245CF3B48(v24);
              v27 = &v25[8 * ((v20 - v19) >> 3)];
              *(_OWORD *)v27 = *(_OWORD *)v22;
              *((_DWORD *)v27 + 4) = *(_DWORD *)(v22 + 28);
              if (v20 == v19)
              {
                v29 = &v25[8 * ((v20 - v19) >> 3)];
              }
              else
              {
                v28 = &v25[8 * ((v20 - v19) >> 3)];
                do
                {
                  v29 = v28 - 24;
                  v30 = *(_OWORD *)(v20 - 24);
                  *((_QWORD *)v28 - 1) = *((_QWORD *)v20 - 1);
                  *(_OWORD *)(v28 - 24) = v30;
                  v20 -= 24;
                  v28 -= 24;
                }
                while (v20 != v19);
              }
              v21 = &v25[24 * v26];
              v20 = v27 + 24;
              if (v19)
                operator delete(v19);
              v19 = v29;
            }
            else
            {
              *(_OWORD *)v20 = *(_OWORD *)v22;
              *((_DWORD *)v20 + 4) = *(_DWORD *)(v22 + 28);
              v20 += 24;
            }
            ++v17;
          }
          while (v17 != v18);
        }
        v32 = v43[1];
        v31 = v43[2];
        if (v32 >= v31)
        {
          v35 = (uint64_t)(v32 - *v43) >> 5;
          if ((unint64_t)(v35 + 1) >> 59)
            sub_245CF3B34();
          v36 = v31 - *v43;
          v37 = v36 >> 4;
          if (v36 >> 4 <= (unint64_t)(v35 + 1))
            v37 = v35 + 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0)
            v38 = 0x7FFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          v50 = v41;
          if (v38)
            v38 = (unint64_t)sub_245D18DF4(v38);
          else
            v39 = 0;
          v40 = (char *)(v38 + 32 * v35);
          *(_QWORD *)&v47 = v38;
          *((_QWORD *)&v47 + 1) = v40;
          v48 = v40;
          v49 = v38 + 32 * v39;
          *(_QWORD *)v40 = 0;
          *((_QWORD *)v40 + 1) = 0;
          *((_QWORD *)v40 + 2) = 0;
          sub_245CF3A2C(v40, (__int128 *)v19, (__int128 *)v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3));
          v33 = v44;
          *((_DWORD *)v40 + 6) = *((_DWORD *)v44 + 6);
          v48 += 32;
          sub_245D18EA0(v43, &v47);
          v34 = v43[1];
          sub_245D18F34((uint64_t)&v47);
        }
        else
        {
          *(_QWORD *)v32 = 0;
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v32 + 16) = 0;
          sub_245CF3A2C((_QWORD *)v32, (__int128 *)v19, (__int128 *)v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3));
          v33 = v44;
          *(_DWORD *)(v32 + 24) = *((_DWORD *)v44 + 6);
          v34 = v32 + 32;
          v43[1] = v32 + 32;
        }
        v43[1] = v34;
        if (v19)
          operator delete(v19);
        v16 = (uint64_t (*)())((char *)v33 + 32);
      }
      while (v16 != v42);
    }
    *(_QWORD *)&v47 = &v45;
    sub_245CF39B0((void ***)&v47);
    sub_245D1AA18((uint64_t)__p);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 40))(&v47, a1, a2, a3);
    *(_OWORD *)__p = v47;
    __p[2] = v48;
    v48 = 0;
    v47 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v45 = (uint64_t (*)())a5;
    LOBYTE(v46) = 0;
    v15 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v15;
    a5[1] = (uint64_t)v15;
    a5[2] = (uint64_t)(v15 + 32);
    a5[1] = sub_245CF38EC((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v15);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v12 = (void *)v47;
    if ((_QWORD)v47)
    {
      *((_QWORD *)&v47 + 1) = v47;
LABEL_5:
      operator delete(v12);
    }
  }
}

void sub_245D1B738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  a16 = a11;
  sub_245CF39B0((void ***)&a16);
  sub_245D1AA18((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_245D1B820(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>, float a5@<S0>)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t (**v29)();
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (**v36)();
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  (*(void (**)(uint64_t (***__return_ptr)()))(*(_QWORD *)a1 + 16))(&v29);
  v10 = (uint64_t)v29;
  if (v29)
  {
    v29 = 0;
    sub_245CF8D4C(v10);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  if (!a3)
    goto LABEL_3;
  v29 = &off_2516F7930;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v36 = &off_2516F7818;
  v37 = 0u;
  v38 = 0u;
  v39 = 0;
  v40 = 1024;
  sub_245D1D0C4((uint64_t)&v29, a2, a3);
  sub_245D1D544(a1, &v29);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_245D1FABC((unint64_t *)&v27, &v29, a5);
  v11 = v27;
  v12 = v28;
  if (v27 != v28)
  {
    v13 = 0;
    do
    {
      v14 = *v11;
      v15 = (unint64_t)a4[2];
      if ((unint64_t)v13 >= v15)
      {
        v17 = *a4;
        v18 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a4) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_245CF3B34();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v17) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v19;
        v22 = (char *)sub_245CF3B48(v21);
        v24 = &v22[24 * v18];
        *(_OWORD *)v24 = *(_OWORD *)v14;
        *((_DWORD *)v24 + 4) = *(_DWORD *)(v14 + 28);
        v25 = v24;
        if (v13 != v17)
        {
          do
          {
            v26 = *(_OWORD *)(v13 - 24);
            *((_QWORD *)v25 - 1) = *((_QWORD *)v13 - 1);
            *(_OWORD *)(v25 - 24) = v26;
            v25 -= 24;
            v13 -= 24;
          }
          while (v13 != v17);
          v13 = v17;
        }
        v16 = v24 + 24;
        *a4 = v25;
        a4[1] = v24 + 24;
        a4[2] = &v22[24 * v23];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v14;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v14 + 28);
        v16 = v13 + 24;
      }
      a4[1] = v16;
      ++v11;
      v13 = v16;
    }
    while (v11 != v12);
    v11 = v27;
  }
  if (v11)
    operator delete(v11);
  sub_245D1AA18((uint64_t)&v29);
}

void sub_245D1BA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_245D1AA18((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_245D1BA90(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *j@<X8>, float a8@<S0>)
{
  uint64_t v14;
  void **v16;
  float v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  __int128 *v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  size_t v49;
  __int128 *v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  int64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  void *v67;
  char *v68;
  char *v69;
  _BYTE *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  void *v74;
  size_t v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int128 *v81;
  float v82;
  uint64_t v83;
  __int128 *v84;
  __int128 *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  __int128 *v92;
  __int128 v93;
  float v94;
  float *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  void *v99;
  __int128 *v100;
  __int128 *v101;
  void *v102;
  __int128 *v103;
  __int128 *v104;
  void *v105;
  void *v106;
  void *v107;
  float v108;
  __int128 *i;
  uint64_t *v110;
  uint64_t *v111;
  __int128 *v112;
  float v113;
  uint64_t v114;
  float v115;
  __int128 *v116;
  __int128 *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  __int128 v125;
  float v126;
  float *v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  float v132;
  double v133;
  long double v134;
  long double v135;
  double v136;
  float v137;
  int v138;
  uint64_t *v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  __int128 *v147;
  float v148;
  void *__p;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  uint64_t (**v156)();
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  __int128 *v164;
  __int128 *v165;
  __int128 *v166;
  void *v167[3];
  void **v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t (**v175)();
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  unint64_t v182;

  v14 = a1;
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)a1 + 16))(&v168);
  v16 = v168;
  if (v168)
  {
    v168 = 0;
    sub_245CF8D4C((uint64_t)v16);
LABEL_3:
    *j = 0;
    j[1] = 0;
    j[2] = 0;
    return;
  }
  if (!a3)
    goto LABEL_3;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v168 = (void **)&off_2516F7930;
  v169 = 0u;
  v170 = 0u;
  v171 = 0u;
  v172 = 0u;
  v173 = 0u;
  v174 = 0;
  v175 = &off_2516F7818;
  v176 = 0u;
  v177 = 0u;
  v178 = 0;
  v179 = 1024;
  sub_245D1D0C4((uint64_t)&v168, a2, a3);
  sub_245D1D544(v14, &v168);
  sub_245D1D8D4((uint64_t *)v167, &v168, a8);
  v17 = *((float *)v167[0]
        + *(unsigned int *)(**(_QWORD **)(*((_QWORD *)&v171 + 1)
                                        + 24
                                        * ((((*((_QWORD *)&v170 + 1) - (_QWORD)v170) >> 3) - 1) & ~((int)(((*((_QWORD *)&v170 + 1) - (_QWORD)v170) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      LOBYTE(__p) = 0;
      v32 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
      sub_245CF35A0(v32, (uint64_t)"(", 1);
      v33 = (_QWORD *)std::ostream::operator<<();
      v34 = sub_245CF35A0(v33, (uint64_t)") ", 2);
      v35 = sub_245CF35A0(v34, (uint64_t)"LOG(", 4);
      v36 = sub_245CF35A0(v35, (uint64_t)"ERROR", 5);
      v37 = sub_245CF35A0(v36, (uint64_t)") ", 2);
      sub_245CF35A0(v37, (uint64_t)"include_best not supported for wor false", 40);
      sub_245CF3834(&__p);
      goto LABEL_165;
    }
    v140 = a5;
    sub_245D1E068((uint64_t)&v164, &v168);
    v138 = a4;
    v141 = v14;
    v144 = a3;
    v18 = v164;
    v19 = v165;
    if (v164 == v165)
    {
      v24 = 0;
      v22 = 0;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)v18;
        if (v20 >= v21)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v22) >> 3) + 1;
          if (v25 > 0xAAAAAAAAAAAAAAALL)
            sub_245CF3B34();
          if (0x5555555555555556 * (((char *)v21 - (char *)v22) >> 3) > v25)
            v25 = 0x5555555555555556 * (((char *)v21 - (char *)v22) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v22) >> 3) >= 0x555555555555555)
            v26 = 0xAAAAAAAAAAAAAAALL;
          else
            v26 = v25;
          v27 = (char *)sub_245CF3B48(v26);
          v29 = &v27[8 * (((char *)v20 - (char *)v22) >> 3)];
          *(_OWORD *)v29 = *(_OWORD *)v23;
          *((_DWORD *)v29 + 4) = *(_DWORD *)(v23 + 28);
          if (v20 == v22)
          {
            v22 = (__int128 *)&v27[8 * (((char *)v20 - (char *)v22) >> 3)];
          }
          else
          {
            v30 = (__int128 *)&v27[8 * (((char *)v20 - (char *)v22) >> 3)];
            do
            {
              v31 = *(__int128 *)((char *)v20 - 24);
              *((_QWORD *)v30 - 1) = *((_QWORD *)v20 - 1);
              *(__int128 *)((char *)v30 - 24) = v31;
              v30 = (__int128 *)((char *)v30 - 24);
              v20 = (__int128 *)((char *)v20 - 24);
            }
            while (v20 != v22);
            v20 = v22;
            v22 = v30;
          }
          v21 = (__int128 *)&v27[24 * v28];
          v24 = (__int128 *)(v29 + 24);
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v20 = *(_OWORD *)v23;
          *((_DWORD *)v20 + 4) = *(_DWORD *)(v23 + 28);
          v24 = (__int128 *)((char *)v20 + 24);
        }
        v18 = (__int128 *)((char *)v18 + 8);
        v20 = v24;
      }
      while (v18 != v19);
    }
    v38 = v181;
    if ((unint64_t)v181 >= v182)
    {
      v40 = ((uint64_t)v181 - v180) >> 5;
      a3 = v144;
      v14 = v141;
      if ((unint64_t)(v40 + 1) >> 59)
        sub_245CF3B34();
      v41 = (uint64_t)(v182 - v180) >> 4;
      if (v41 <= v40 + 1)
        v41 = v40 + 1;
      if (v182 - v180 >= 0x7FFFFFFFFFFFFFE0)
        v42 = 0x7FFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      *((_QWORD *)&v151 + 1) = &v182;
      if (v42)
        v42 = (unint64_t)sub_245D18DF4(v42);
      else
        v43 = 0;
      v44 = v42 + 32 * v40;
      __p = (void *)v42;
      *(_QWORD *)&v150 = v44;
      *((_QWORD *)&v150 + 1) = v44;
      *(_QWORD *)&v151 = v42 + 32 * v43;
      *(_QWORD *)v44 = 0;
      *(_QWORD *)(v44 + 8) = 0;
      *(_QWORD *)(v44 + 16) = 0;
      sub_245CF3A2C((_QWORD *)v44, v22, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v22) >> 3));
      *(_DWORD *)(v44 + 24) = 0;
      *((_QWORD *)&v150 + 1) += 32;
      sub_245D18EA0(&v180, &__p);
      v39 = v181;
      sub_245D18F34((uint64_t)&__p);
    }
    else
    {
      *v181 = 0;
      v38[1] = 0;
      v38[2] = 0;
      sub_245CF3A2C(v38, v22, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v22) >> 3));
      a3 = v144;
      v14 = v141;
      *((_DWORD *)v38 + 6) = 0;
      v39 = v38 + 4;
    }
    a4 = v138;
    v181 = v39;
    if (v164)
      operator delete(v164);
    a5 = v140;
    if (v22)
      operator delete(v22);
  }
  if ((a5 & 1) != 0)
  {
    sub_245D1E384((uint64_t (**)())&v164, &v168, a4 + 1, 1, a8);
    v139 = j;
    if (a6)
    {
      v162 = 0;
      v163 = 0;
      v161 = 0;
      __p = &v161;
      LOBYTE(v150) = 0;
      v45 = (char *)v165 - (char *)v164;
      if (v165 != v164)
      {
        if (v45 < 0)
          sub_245CF3B34();
        v46 = v45 >> 5;
        v47 = (char *)sub_245CF3B48(v45 >> 5);
        v161 = v47;
        v163 = &v47[24 * v48];
        v49 = 24 * ((24 * v46 - 24) / 0x18uLL) + 24;
        bzero(v47, v49);
        v162 = &v47[v49];
        v51 = v164;
        v50 = v165;
        if (v165 != v164)
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          while (1)
          {
            v55 = &v51[v52];
            v56 = v161;
            v57 = &v161[v53];
            if (&v51[v52] != (__int128 *)&v161[v53])
              break;
LABEL_73:
            ++v54;
            v53 += 24;
            v52 += 2;
            if (v54 >= ((char *)v50 - (char *)v51) >> 5)
              goto LABEL_74;
          }
          v58 = *(char **)v55;
          v59 = (char *)*((_QWORD *)v55 + 1);
          v60 = (int64_t)&v59[-*(_QWORD *)v55];
          v61 = v60 >> 3;
          v62 = *((_QWORD *)v57 + 2);
          v63 = *(char **)v57;
          if (v60 >> 3 <= (unint64_t)((v62 - *(_QWORD *)v57) >> 3))
          {
            v145 = &v161[24 * v54 + 8];
            v69 = &v161[v53];
            v70 = *(_BYTE **)&v161[v53 + 8];
            v71 = (v70 - v63) >> 3;
            if (v71 >= v61)
            {
              if (v59 != v58)
                memmove(v63, v58, v60);
              v66 = v145;
              goto LABEL_72;
            }
            if (v70 != v63)
            {
              memmove(v63, v58, v70 - v63);
              v63 = (char *)*((_QWORD *)v69 + 1);
            }
            v66 = v145;
            v68 = &v58[8 * v71];
            v60 = v59 - v68;
            if (v59 == v68)
            {
LABEL_72:
              *(_QWORD *)v66 = &v63[v60];
              v51 = v164;
              v50 = v165;
              goto LABEL_73;
            }
            v67 = v63;
          }
          else
          {
            if (v63)
            {
              *(_QWORD *)&v161[v53 + 8] = v63;
              operator delete(v63);
              v62 = 0;
              *(_QWORD *)v57 = 0;
              *((_QWORD *)v57 + 1) = 0;
              *((_QWORD *)v57 + 2) = 0;
            }
            if (v60 < 0)
              sub_245CF3B34();
            v64 = v62 >> 2;
            if (v62 >> 2 <= v61)
              v64 = v60 >> 3;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
              v65 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v65 = v64;
            sub_245D1FECC(v57, v65);
            v66 = &v56[v53 + 8];
            v63 = *(char **)v66;
            if (v59 == v58)
              goto LABEL_72;
            v67 = *(void **)&v56[v53 + 8];
            v68 = v58;
          }
          memmove(v67, v68, v60);
          goto LABEL_72;
        }
      }
LABEL_74:
      sub_245D1E068((uint64_t)&__p, &v168);
      v72 = v161;
      v73 = v162;
      if (v161 == v162)
      {
        v76 = v161;
      }
      else
      {
        v74 = __p;
        v75 = v150 - (_QWORD)__p;
        v76 = v161;
        while (*((_QWORD *)v76 + 1) - *(_QWORD *)v76 != v75 || memcmp(*(const void **)v76, v74, v75))
        {
          v76 += 24;
          if (v76 == v73)
          {
            v76 = v73;
            break;
          }
        }
      }
      v97 = (int)(-1431655765 * ((unint64_t)(v76 - v72) >> 3));
      v98 = v165;
      if (v97 == ((char *)v165 - (char *)v164) >> 5)
      {
        v100 = v165 - 2;
        v99 = (void *)*((_QWORD *)v165 - 4);
        if (v99)
        {
          *((_QWORD *)v165 - 3) = v99;
          operator delete(v99);
        }
      }
      else
      {
        v101 = &v164[2 * v97];
        if (v101 + 2 == v165)
        {
          v100 = &v164[2 * v97];
        }
        else
        {
          do
          {
            v102 = *(void **)v101;
            if (*(_QWORD *)v101)
            {
              *((_QWORD *)v101 + 1) = v102;
              operator delete(v102);
              *(_QWORD *)v101 = 0;
              *((_QWORD *)v101 + 1) = 0;
              *((_QWORD *)v101 + 2) = 0;
            }
            v100 = v101 + 2;
            *v101 = v101[2];
            *((_QWORD *)v101 + 2) = *((_QWORD *)v101 + 6);
            *((_QWORD *)v101 + 5) = 0;
            *((_QWORD *)v101 + 6) = 0;
            *((_QWORD *)v101 + 4) = 0;
            *((_DWORD *)v101 + 6) = *((_DWORD *)v101 + 14);
            v103 = v101 + 4;
            v101 += 2;
          }
          while (v103 != v98);
          v98 = v165;
        }
        if (v98 == v100)
        {
          v100 = v98;
        }
        else
        {
          v104 = v98;
          do
          {
            v106 = (void *)*((_QWORD *)v104 - 4);
            v104 -= 2;
            v105 = v106;
            if (v106)
            {
              *((_QWORD *)v98 - 3) = v105;
              operator delete(v105);
            }
            v98 = v104;
          }
          while (v104 != v100);
        }
      }
      v165 = v100;
      if (__p)
        operator delete(__p);
      __p = &v161;
      sub_245D16B94((void ***)&__p);
    }
    v107 = (void *)*((_QWORD *)v165 - 4);
    v147 = v165 - 2;
    v108 = *((float *)v165 - 2);
    if (v107)
    {
      *((_QWORD *)v165 - 3) = v107;
      operator delete(v107);
    }
    v165 = v147;
    for (i = v164; i != v147; i += 2)
    {
      __p = 0;
      v150 = 0uLL;
      v110 = *(uint64_t **)i;
      v111 = (uint64_t *)*((_QWORD *)i + 1);
      if (*(uint64_t **)i == v111)
      {
        v116 = 0;
        v113 = 0.0;
      }
      else
      {
        v112 = 0;
        v113 = 0.0;
        do
        {
          v114 = *v110;
          v115 = *(float *)(*v110 + 32);
          if ((unint64_t)v112 >= *((_QWORD *)&v150 + 1))
          {
            v117 = (__int128 *)__p;
            v118 = 0xAAAAAAAAAAAAAAABLL * (((char *)v112 - (_BYTE *)__p) >> 3);
            v119 = v118 + 1;
            if (v118 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_245CF3B34();
            if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v150 + 1) - (_QWORD)__p) >> 3) > v119)
              v119 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v150 + 1) - (_QWORD)__p) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v150 + 1) - (_QWORD)__p) >> 3) >= 0x555555555555555)
              v120 = 0xAAAAAAAAAAAAAAALL;
            else
              v120 = v119;
            v121 = (char *)sub_245CF3B48(v120);
            v123 = &v121[24 * v118];
            *(_OWORD *)v123 = *(_OWORD *)v114;
            *((_DWORD *)v123 + 4) = *(_DWORD *)(v114 + 28);
            v124 = v123;
            if (v112 != v117)
            {
              do
              {
                v125 = *(__int128 *)((char *)v112 - 24);
                *((_QWORD *)v124 - 1) = *((_QWORD *)v112 - 1);
                *(_OWORD *)(v124 - 24) = v125;
                v124 -= 24;
                v112 = (__int128 *)((char *)v112 - 24);
              }
              while (v112 != v117);
              v112 = v117;
            }
            v116 = (__int128 *)(v123 + 24);
            __p = v124;
            *(_QWORD *)&v150 = v123 + 24;
            *((_QWORD *)&v150 + 1) = &v121[24 * v122];
            if (v112)
              operator delete(v112);
          }
          else
          {
            *v112 = *(_OWORD *)v114;
            *((_DWORD *)v112 + 4) = *(_DWORD *)(v114 + 28);
            v116 = (__int128 *)((char *)v112 + 24);
          }
          *(_QWORD *)&v150 = v116;
          v113 = v113 + (float)(a8 * v115);
          ++v110;
          v112 = v116;
        }
        while (v110 != v111);
      }
      v126 = v113 - v17;
      *(float *)&v161 = v126;
      v127 = (float *)v181;
      if ((unint64_t)v181 >= v182)
      {
        v129 = sub_245D1F998(&v180, (__int128 **)&__p, &v161);
        v128 = __p;
      }
      else
      {
        *v181 = 0;
        *((_QWORD *)v127 + 1) = 0;
        *((_QWORD *)v127 + 2) = 0;
        v128 = __p;
        sub_245CF3A2C(v127, (__int128 *)__p, v116, 0xAAAAAAAAAAAAAAABLL * (((char *)v116 - (_BYTE *)__p) >> 3));
        v127[6] = v126;
        v129 = (uint64_t)(v127 + 8);
      }
      v181 = (_QWORD *)v129;
      if (v128)
        operator delete(v128);
    }
    v130 = v180;
    v131 = v181;
    for (j = v139; (_QWORD *)v130 != v131; v130 += 32)
    {
      v132 = *(float *)(v130 + 24);
      if (v132 != 0.0)
      {
        v133 = v132 - v108;
        v134 = exp(v133);
        if (v133 <= -10.0)
        {
          v136 = v133 + v134 * -0.5 + v134 * v134 / 24.0 + pow(v134, 4.0) / -2880.0;
        }
        else
        {
          v135 = expm1(-v134);
          v136 = log(-v135);
        }
        v137 = v136;
        *(float *)(v130 + 24) = v137;
      }
    }
    __p = &v164;
    sub_245CF39B0((void ***)&__p);
    v78 = v180;
    v77 = v181;
  }
  else
  {
    v78 = v180;
    v77 = v181;
    if (a4 > (unint64_t)(((uint64_t)v181 - v180) >> 5))
    {
      v143 = a2;
      v146 = a3;
      v142 = v14;
      do
      {
        v150 = 0u;
        v151 = 0u;
        v152 = 0u;
        v153 = 0u;
        v154 = 0u;
        v155 = 0;
        __p = &off_2516F7930;
        v156 = &off_2516F7818;
        v157 = 0u;
        v158 = 0u;
        v159 = 0;
        v160 = 1024;
        sub_245D1D0C4((uint64_t)&__p, a2, a3);
        sub_245D1D544(v14, &__p);
        v164 = 0;
        v165 = 0;
        v166 = 0;
        sub_245D1FABC((unint64_t *)&v161, &__p, a8);
        v80 = v161;
        v79 = v162;
        if (v161 == v162)
        {
          v84 = 0;
          v82 = 0.0;
        }
        else
        {
          v81 = 0;
          v82 = 0.0;
          do
          {
            v83 = *(_QWORD *)v80;
            if (v81 >= v166)
            {
              v85 = v164;
              v86 = 0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (char *)v164) >> 3);
              v87 = v86 + 1;
              if (v86 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_245CF3B34();
              if (0x5555555555555556 * (((char *)v166 - (char *)v164) >> 3) > v87)
                v87 = 0x5555555555555556 * (((char *)v166 - (char *)v164) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v166 - (char *)v164) >> 3) >= 0x555555555555555)
                v88 = 0xAAAAAAAAAAAAAAALL;
              else
                v88 = v87;
              v89 = (char *)sub_245CF3B48(v88);
              v91 = &v89[24 * v86];
              *(_OWORD *)v91 = *(_OWORD *)v83;
              *((_DWORD *)v91 + 4) = *(_DWORD *)(v83 + 28);
              v92 = (__int128 *)v91;
              if (v81 != v85)
              {
                do
                {
                  v93 = *(__int128 *)((char *)v81 - 24);
                  *((_QWORD *)v92 - 1) = *((_QWORD *)v81 - 1);
                  *(__int128 *)((char *)v92 - 24) = v93;
                  v92 = (__int128 *)((char *)v92 - 24);
                  v81 = (__int128 *)((char *)v81 - 24);
                }
                while (v81 != v85);
                v81 = v85;
              }
              v84 = (__int128 *)(v91 + 24);
              v164 = v92;
              v165 = (__int128 *)(v91 + 24);
              v166 = (__int128 *)&v89[24 * v90];
              if (v81)
                operator delete(v81);
            }
            else
            {
              *v81 = *(_OWORD *)v83;
              *((_DWORD *)v81 + 4) = *(_DWORD *)(v83 + 28);
              v84 = (__int128 *)((char *)v81 + 24);
            }
            v165 = v84;
            v82 = v82 + (float)(a8 * *(float *)(v83 + 32));
            v80 += 8;
            v81 = v84;
          }
          while (v80 != v79);
        }
        v94 = v82 - v17;
        v148 = v94;
        v95 = (float *)v181;
        if ((unint64_t)v181 >= v182)
        {
          v96 = sub_245D1F998(&v180, &v164, &v148);
        }
        else
        {
          *v181 = 0;
          *((_QWORD *)v95 + 1) = 0;
          *((_QWORD *)v95 + 2) = 0;
          sub_245CF3A2C(v95, v164, v84, 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)v164) >> 3));
          v95[6] = v94;
          v96 = (uint64_t)(v95 + 8);
        }
        a2 = v143;
        a3 = v146;
        v14 = v142;
        v181 = (_QWORD *)v96;
        if (v161)
          operator delete(v161);
        if (v164)
          operator delete(v164);
        sub_245D1AA18((uint64_t)&__p);
        v78 = v180;
        v77 = v181;
      }
      while (a4 > (unint64_t)(((uint64_t)v181 - v180) >> 5));
    }
  }
  *j = v78;
  j[1] = (uint64_t)v77;
  j[2] = v182;
  j = &v180;
LABEL_165:
  *j = 0;
  j[1] = 0;
  j[2] = 0;
  if (v167[0])
  {
    v167[1] = v167[0];
    operator delete(v167[0]);
  }
  sub_245D1AA18((uint64_t)&v168);
  v168 = (void **)&v180;
  sub_245CF39B0(&v168);
}

void sub_245D1C7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *a44,uint64_t a45,void **a46)
{
  void *v46;
  uint64_t v47;

  sub_245D18F34((uint64_t)&a17);
  if (a39)
    operator delete(a39);
  if (v46)
    operator delete(v46);
  if (a43)
  {
    a44 = a43;
    operator delete(a43);
  }
  sub_245D1AA18((uint64_t)&a46);
  a46 = (void **)(v47 - 160);
  sub_245CF39B0(&a46);
  _Unwind_Resume(a1);
}

float sub_245D1C924(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  void *v22;
  float v23;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t (**v35)();
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40[3];
  _QWORD v41[4];

  v28 = &off_2516F7930;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = &off_2516F7818;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v39 = 1024;
  sub_245D1D0C4((uint64_t)&v28, a2, a3);
  sub_245D1D544(a1, &v28);
  v6 = v30;
  LODWORD(v40[0]) = 0;
  sub_245D18A7C(v41, *((_QWORD *)&v37 + 1) + v38 * v39, v40);
  sub_245D1D8D4((uint64_t *)v40, &v28, a4);
  v7 = 0;
  v25 = (((*((_QWORD *)&v6 + 1) - (_QWORD)v6) >> 3) - 1) & ~((int)(((*((_QWORD *)&v6 + 1) - (_QWORD)v6) >> 3) - 1) >> 31);
  v27 = *((_QWORD *)&v31 + 1);
  v26 = v33;
  do
  {
    v8 = (uint64_t *)(v27 + 24 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      v11 = (uint64_t **)(v26 + 24 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = (float *)v40[0];
      v15 = v41[0];
      do
      {
        if (v12 != v13)
        {
          v16 = *(unsigned int *)(*(_QWORD *)v9 + 24);
          v17 = *(float *)(v15 + 4 * v16);
          v18 = v12;
          do
          {
            v19 = *v18++;
            v20 = *(unsigned int *)(v19 + 24);
            v21 = (float)(v14[v20] + (float)(a4 * *(float *)(v19 + 32))) - v14[v16];
            v17 = v17 + (float)(expf(v21) * (float)(v21 + *(float *)(v15 + 4 * v20)));
            *(float *)(v15 + 4 * v16) = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  v22 = (void *)v41[0];
  v23 = *(float *)(v41[0] + 4 * *(unsigned int *)(**(_QWORD **)(v27 + 24 * v25) + 24));
  if (!v40[0] || (v40[1] = v40[0], operator delete(v40[0]), (v22 = (void *)v41[0]) != 0))
  {
    v41[1] = v22;
    operator delete(v22);
  }
  sub_245D1AA18((uint64_t)&v28);
  return -v23;
}

void sub_245D1CB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  v7 = *(void **)(v5 - 144);
  if (v7)
  {
    *(_QWORD *)(v5 - 136) = v7;
    operator delete(v7);
  }
  sub_245D1AA18((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_245D1CB50()
{
  return 1;
}

uint64_t sub_245D1CB58()
{
  return 1;
}

uint64_t sub_245D1CB60()
{
  return 1;
}

uint64_t sub_245D1CB68()
{
  return 1;
}

uint64_t sub_245D1CB70(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t **v6;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;

  v3 = a3;
  v4 = a2;
  v6 = sub_245CF4DEC((_QWORD *)(a1 + 64), a2, a3);
  if (v6)
    return *((unsigned int *)v6 + 8);
  v8 = *(unsigned int **)(*(_QWORD *)(a1 + 128) + 16);
  v9 = *v8;
  if (v3)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(unsigned __int8 *)v4;
      v4 = (uint64_t *)((char *)v4 + 1);
      v10 ^= (v9 >> 10 << ((v9 >> 6) & 8)) ^ v11;
      v9 = v8[v10];
      if ((v9 & 0x800000FF) != v11)
        return *(unsigned int *)(a1 + 104);
      if (!--v3)
        goto LABEL_12;
    }
  }
  v12 = *(unsigned __int8 *)v4;
  if (*(_BYTE *)v4)
  {
    v10 = 0;
    v13 = (unsigned __int8 *)v4 + 1;
    while (1)
    {
      v10 ^= (v9 >> 10 << ((v9 >> 6) & 8)) ^ v12;
      v9 = v8[v10];
      if ((v9 & 0x800000FF) != v12)
        break;
      v14 = *v13++;
      v12 = v14;
      if (!v14)
      {
LABEL_12:
        if ((v9 & 0x100) != 0)
          return v8[v10 ^ (v9 >> 10 << ((v9 >> 6) & 8))] & 0x7FFFFFFF;
        return *(unsigned int *)(a1 + 104);
      }
    }
    return *(unsigned int *)(a1 + 104);
  }
  v10 = 0;
  if ((v9 & 0x100) == 0)
    return *(unsigned int *)(a1 + 104);
  return v8[v10 ^ (v9 >> 10 << ((v9 >> 6) & 8))] & 0x7FFFFFFF;
}

BOOL sub_245D1CC6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  size_t v10;
  void *v11;
  _QWORD *v12;
  float v13;
  float v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  double v19;
  size_t v20;
  void *v21;
  _QWORD *v22;
  float v23;
  float v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  double v29;
  float v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  void *__p;
  _BYTE *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char __s[2];

  strcpy(__s, " ");
  v10 = strlen(__s);
  sub_245CF7C68(&__p, a2, a3, (unsigned __int8 *)__s, v10);
  v50 = 0;
  v51 = 0;
  v49 = 0;
  sub_245D1D04C(&v49, __p, (uint64_t)v48, (v48 - (_BYTE *)__p) >> 4);
  v11 = v49;
  v12 = v50;
  if (v49 == v50)
  {
    v14 = 0.0;
    if (v49)
LABEL_11:
      operator delete(v11);
  }
  else
  {
    v13 = *(float *)(a1 + 120) + -10.0;
    v14 = 0.0;
    v15 = v49;
    do
    {
      v16 = v15[1];
      v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v15, v16);
      if (v17 == *(_DWORD *)(a1 + 104))
      {
        v14 = v13 + v14;
      }
      else
      {
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * v17 + 8);
        if (*(_DWORD *)(v18 + 60) == 4)
          v19 = (float)(*(float *)(a1 + 124) * (float)(int)v16) + -0.1;
        else
          v19 = *(float *)(v18 + 56);
        v14 = v19 + v14;
      }
      v15 += 2;
    }
    while (v15 != v12);
    if (v11)
      goto LABEL_11;
  }
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  strcpy(__s, " ");
  v20 = strlen(__s);
  sub_245CF7C68(&__p, a4, a5, (unsigned __int8 *)__s, v20);
  v45 = 0;
  v46 = 0;
  v44 = 0;
  sub_245D1D04C(&v44, __p, (uint64_t)v48, (v48 - (_BYTE *)__p) >> 4);
  v21 = v44;
  v22 = v45;
  if (v44 != v45)
  {
    v23 = *(float *)(a1 + 120) + -10.0;
    v24 = 0.0;
    v25 = v44;
    do
    {
      v26 = v25[1];
      v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v25, v26);
      if (v27 == *(_DWORD *)(a1 + 104))
      {
        v24 = v23 + v24;
      }
      else
      {
        v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * v27 + 8);
        if (*(_DWORD *)(v28 + 60) == 4)
          v29 = (float)(*(float *)(a1 + 124) * (float)(int)v26) + -0.1;
        else
          v29 = *(float *)(v28 + 56);
        v24 = v29 + v24;
      }
      v25 += 2;
    }
    while (v25 != v22);
    if (!v21)
      goto LABEL_25;
    goto LABEL_24;
  }
  v24 = 0.0;
  if (v44)
LABEL_24:
    operator delete(v21);
LABEL_25:
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  v30 = vabds_f32(v14, v24);
  if (v30 > 0.0000001)
  {
    LOBYTE(__p) = 0;
    v31 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
    sub_245CF35A0(v31, (uint64_t)"(", 1);
    v32 = (_QWORD *)std::ostream::operator<<();
    v33 = sub_245CF35A0(v32, (uint64_t)") ", 2);
    v34 = sub_245CF35A0(v33, (uint64_t)"LOG(", 4);
    v35 = sub_245CF35A0(v34, (uint64_t)"WARNING", 7);
    v36 = sub_245CF35A0(v35, (uint64_t)") ", 2);
    v37 = sub_245CF35A0(v36, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    v38 = sub_245CF35A0(v37, a2, a3);
    sub_245CF35A0(v38, (uint64_t)", Score: ", 9);
    v39 = (_QWORD *)std::ostream::operator<<();
    v40 = sub_245CF35A0(v39, (uint64_t)". Right: ", 9);
    v41 = sub_245CF35A0(v40, a4, a5);
    sub_245CF35A0(v41, (uint64_t)", Score: ", 9);
    v42 = (_QWORD *)std::ostream::operator<<();
    sub_245CF35A0(v42, (uint64_t)".", 1);
    sub_245CF3834(&__p);
  }
  return v30 <= 0.0000001;
}

void sub_245D1D004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_245D1D04C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_245D17CC0(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_245D1D0A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_245D1D0C4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  char **v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  void **v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  void **v58;
  void **v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;

  v6 = (_QWORD *)(a1 + 48);
  sub_245D16BD4((uint64_t *)(a1 + 48));
  sub_245D16BD4((uint64_t *)(a1 + 72));
  v8 = (char **)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = &unk_245D25DC9;
  *(_QWORD *)(a1 + 32) = v7;
  v9 = *(_DWORD *)(a1 + 136);
  if (v9 + 1 < (int)((*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3))
    v10 = v9 + 1;
  else
    v10 = (*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3;
  if (v10 >= 1)
  {
    v11 = 0;
    v12 = 8 * v10;
    do
    {
      bzero(*(void **)(*(_QWORD *)(a1 + 104) + v11), 48 * *(_QWORD *)(a1 + 144));
      v11 += 8;
    }
    while (v12 != v11);
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  sub_245D023D4((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    v13 = *(_QWORD **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_245D25FED[(unint64_t)*a2 >> 4])
        v14 = asc_245D25FED[(unint64_t)*a2 >> 4];
      else
        v14 = a3;
      v15 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v13 >= v15)
      {
        v16 = ((char *)v13 - *v8) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          goto LABEL_82;
        v17 = v15 - (_QWORD)*v8;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v19 = (unint64_t)sub_245CF7A9C(v19);
        else
          v20 = 0;
        v21 = (_QWORD *)(v19 + 8 * v16);
        *v21 = a2;
        v13 = v21 + 1;
        v23 = *(char **)(a1 + 24);
        v22 = *(char **)(a1 + 32);
        if (v22 != v23)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v21 = v24;
          }
          while (v22 != v23);
          v22 = *v8;
        }
        *(_QWORD *)(a1 + 24) = v21;
        *(_QWORD *)(a1 + 32) = v13;
        *(_QWORD *)(a1 + 40) = v19 + 8 * v20;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v13++ = a2;
      }
      *(_QWORD *)(a1 + 32) = v13;
      a2 += v14;
      a3 -= v14;
    }
    while (a3);
  }
  else
  {
    v13 = *(_QWORD **)(a1 + 32);
  }
  v25 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v13 >= v25)
  {
    v27 = ((char *)v13 - *v8) >> 3;
    if ((unint64_t)(v27 + 1) >> 61)
LABEL_82:
      sub_245CF3B34();
    v28 = v25 - (_QWORD)*v8;
    v29 = v28 >> 2;
    if (v28 >> 2 <= (unint64_t)(v27 + 1))
      v29 = v27 + 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
      v30 = (unint64_t)sub_245CF7A9C(v30);
    else
      v31 = 0;
    v32 = (_QWORD *)(v30 + 8 * v27);
    v33 = v30 + 8 * v31;
    *v32 = a2;
    v26 = v32 + 1;
    v35 = *(char **)(a1 + 24);
    v34 = *(char **)(a1 + 32);
    if (v34 != v35)
    {
      do
      {
        v36 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *--v32 = v36;
      }
      while (v34 != v35);
      v34 = *v8;
    }
    *(_QWORD *)(a1 + 24) = v32;
    *(_QWORD *)(a1 + 32) = v26;
    *(_QWORD *)(a1 + 40) = v33;
    if (v34)
      operator delete(v34);
  }
  else
  {
    *v13 = a2;
    v26 = v13 + 1;
  }
  *(_QWORD *)(a1 + 32) = v26;
  v37 = (((unint64_t)v26 - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  v38 = v37 & ~(v37 >> 31);
  sub_245D1DDD4((uint64_t)v6, v38 + 1);
  sub_245D1DDD4(a1 + 72, v38 + 1);
  v39 = 0;
  do
  {
    sub_245D1DFC0(*v6 + v39);
    sub_245D1DFC0(*(_QWORD *)(a1 + 72) + v39);
    v39 += 24;
  }
  while (24 * v38 + 24 != v39);
  v40 = (_DWORD *)sub_245D1DC64((_QWORD *)(a1 + 96));
  v41 = v40;
  v40[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v40[7] = -1;
  v40[4] = 0;
  v42 = *(void ***)(a1 + 72);
  v44 = v42[1];
  v43 = (unint64_t)v42[2];
  if ((unint64_t)v44 >= v43)
  {
    v46 = ((char *)v44 - (_BYTE *)*v42) >> 3;
    if ((unint64_t)(v46 + 1) >> 61)
      goto LABEL_83;
    v47 = v43 - (_QWORD)*v42;
    v48 = v47 >> 2;
    if (v47 >> 2 <= (unint64_t)(v46 + 1))
      v48 = v46 + 1;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v48;
    if (v49)
      v49 = (unint64_t)sub_245CF7A9C(v49);
    else
      v50 = 0;
    v51 = (_QWORD *)(v49 + 8 * v46);
    v52 = v49 + 8 * v50;
    *v51 = v41;
    v45 = v51 + 1;
    v54 = (char *)*v42;
    v53 = (char *)v42[1];
    if (v53 != *v42)
    {
      do
      {
        v55 = *((_QWORD *)v53 - 1);
        v53 -= 8;
        *--v51 = v55;
      }
      while (v53 != v54);
      v53 = (char *)*v42;
    }
    *v42 = v51;
    v42[1] = v45;
    v42[2] = (void *)v52;
    if (v53)
      operator delete(v53);
  }
  else
  {
    *v44 = v40;
    v45 = v44 + 1;
  }
  v42[1] = v45;
  v56 = (_DWORD *)sub_245D1DC64((_QWORD *)(a1 + 96));
  v57 = v56;
  v56[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v56[7] = -1;
  v56[4] = v38;
  v58 = (void **)(*(_QWORD *)(a1 + 48) + 24 * v38);
  v59 = v58 + 1;
  v60 = v58[1];
  v61 = (unint64_t)v58[2];
  if ((unint64_t)v60 < v61)
  {
    *v60 = v56;
    v62 = v60 + 1;
    goto LABEL_81;
  }
  v63 = ((char *)v60 - (_BYTE *)*v58) >> 3;
  if ((unint64_t)(v63 + 1) >> 61)
LABEL_83:
    sub_245CF3B34();
  v64 = v61 - (_QWORD)*v58;
  v65 = v64 >> 2;
  if (v64 >> 2 <= (unint64_t)(v63 + 1))
    v65 = v63 + 1;
  if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
    v66 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v66 = v65;
  if (v66)
    v66 = (unint64_t)sub_245CF7A9C(v66);
  else
    v67 = 0;
  v68 = (_QWORD *)(v66 + 8 * v63);
  v69 = v66 + 8 * v67;
  *v68 = v57;
  v62 = v68 + 1;
  v70 = (char *)*v59;
  v71 = (char *)*v58;
  if (*v59 != *v58)
  {
    do
    {
      v72 = *((_QWORD *)v70 - 1);
      v70 -= 8;
      *--v68 = v72;
    }
    while (v70 != v71);
    v70 = (char *)*v58;
  }
  *v58 = v68;
  *v59 = v62;
  v58[2] = (void *)v69;
  if (v70)
    operator delete(v70);
LABEL_81:
  *v59 = v62;
}

void sub_245D1D544(uint64_t a1, _QWORD *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *__p;
  _BYTE *v45;

  v4 = *(float *)(a1 + 120);
  v5 = ((a2[4] - a2[3]) >> 3) - 1;
  v6 = a2[1];
  v7 = a2[2];
  sub_245CF5DF0(&__p, *(int *)(a1 + 136) + 1);
  if ((int)v5 < 1)
    goto LABEL_40;
  v8 = 0;
  v9 = v4 + -10.0;
  v42 = v6 + (int)v7;
  do
  {
    v10 = *(_BYTE **)(a2[3] + 8 * v8);
    v11 = (char *)__p;
    v12 = (v45 - (_BYTE *)__p) >> 4;
    v13 = *(_DWORD **)(*(_QWORD *)(a1 + 128) + 16);
    v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v42 - (_QWORD)v10) << 32)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v10[v15];
        v18 = v14 ^ v17;
        v19 = v13[v18];
        if ((v19 & 0x800000FF) != (_DWORD)v17)
          break;
        v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            v20 = &v11[16 * v16];
            *(_DWORD *)v20 = v13[v14] & 0x7FFFFFFF;
            *((_QWORD *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while ((_DWORD)v42 - (_DWORD)v10 != v15);
    }
    else
    {
      v21 = *v10;
      if (*v10)
      {
        v16 = 0;
        v22 = 1;
        do
        {
          v23 = v14 ^ v21;
          v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21)
            break;
          v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              v25 = &v11[16 * v16];
              *(_DWORD *)v25 = v13[v14] & 0x7FFFFFFF;
              *((_QWORD *)v25 + 1) = v22;
            }
            ++v16;
          }
          v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      v43 = 1;
      v26 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
      sub_245CF35A0(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = sub_245CF35A0(v27, (uint64_t)") [", 3);
      v29 = sub_245CF35A0(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      sub_245CF35A0(v29, (uint64_t)"] ", 2);
      sub_245CF3834(&v43);
    }
    if (!v16)
    {
LABEL_38:
      v41 = sub_245D1DA54((uint64_t)a2, v8, 1);
      *(_DWORD *)(v41 + 28) = *(_DWORD *)(a1 + 104);
      *(float *)(v41 + 32) = v9;
      goto LABEL_39;
    }
    v30 = 0;
    v31 = 0;
    do
    {
      while (1)
      {
        v32 = v8;
        do
        {
          v33 = v32;
          v34 = *(_QWORD *)(a2[3] + 8 * v32++);
        }
        while (v34 < (unint64_t)&v10[*((_QWORD *)__p + 2 * v30 + 1)]);
        v35 = *((_DWORD *)__p + 4 * v30);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * v35 + 8) + 60) == 5)
          break;
        v36 = v33 - v8;
        v37 = sub_245D1DA54((uint64_t)a2, v8, v33 - (int)v8);
        *(_DWORD *)(v37 + 28) = v35;
        v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * v35 + 8);
        if (*(_DWORD *)(v38 + 60) == 4)
          v39 = (float)(*(float *)(a1 + 124) * (float)v36) + -0.1;
        else
          v39 = *(float *)(v38 + 56);
        v40 = v39;
        *(float *)(v37 + 32) = v40;
        if (!v31)
        {
          v31 = *(_DWORD *)(v37 + 20) == 1;
          break;
        }
        ++v30;
        v31 = 1;
        if (v30 == v16)
          goto LABEL_39;
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31)
      goto LABEL_38;
LABEL_39:
    ++v8;
  }
  while (v8 != v5);
LABEL_40:
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
}

void sub_245D1D8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_245D1D8D4(uint64_t *a1, _QWORD *a2, float a3)
{
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  _QWORD *v19;
  float v20;
  float v21;
  double v22;
  long double v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v5 = ((a2[4] - a2[3]) >> 3) - 1;
  v6 = v5 & ~(v5 >> 31);
  v7 = a2[16] + a2[17] * a2[18];
  v28 = 0;
  sub_245D18A7C(a1, v7, &v28);
  v8 = 0;
  v27 = a2[6];
  v25 = a2;
  v26 = (v6 + 1);
  do
  {
    v9 = (uint64_t *)(v27 + 24 * v8);
    v10 = *v9;
    v11 = v9[1];
    if (*v9 != v11)
    {
      v12 = v25[9] + 24 * v8;
      v14 = *(_QWORD **)v12;
      v13 = *(_QWORD **)(v12 + 8);
      v15 = *a1;
      do
      {
        if (v14 != v13)
        {
          v16 = *(unsigned int *)(*(_QWORD *)v10 + 24);
          v17 = *v14;
          v18 = *(float *)(v15 + 4 * v16);
          v19 = v14;
          do
          {
            v20 = *(float *)(v15 + 4 * *(unsigned int *)(*v19 + 24)) + (float)(a3 * *(float *)(*v19 + 32));
            if (*v19 != v17)
            {
              if (v20 >= v18)
                v21 = v18;
              else
                v21 = *(float *)(v15 + 4 * *(unsigned int *)(*v19 + 24)) + (float)(a3 * *(float *)(*v19 + 32));
              if (v18 >= v20)
                v20 = v18;
              if (v20 <= (float)(v21 + 50.0))
              {
                v22 = v20;
                v23 = exp((float)(v21 - v20));
                v20 = log(v23 + 1.0) + v22;
              }
            }
            *(float *)(v15 + 4 * v16) = v20;
            ++v19;
            v18 = v20;
          }
          while (v19 != v13);
        }
        v10 += 8;
      }
      while (v10 != v11);
    }
    ++v8;
  }
  while (v8 != v26);
}

uint64_t sub_245D1DA54(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void **v27;
  void **v28;
  uint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v6 = sub_245D1DC64((_QWORD *)(a1 + 96));
  v7 = v6;
  v8 = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  *(_DWORD *)(v6 + 20) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 8 * (a3 + a2));
  v11 = *(_QWORD *)(v9 + 8 * a2);
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = (int)v10 - (int)v11;
  v12 = (void **)(*(_QWORD *)(a1 + 48) + 24 * a2);
  v13 = v12 + 1;
  v14 = (uint64_t *)v12[1];
  v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    v17 = ((char *)v14 - (_BYTE *)*v12) >> 3;
    if ((unint64_t)(v17 + 1) >> 61)
      goto LABEL_34;
    v18 = v15 - (_QWORD)*v12;
    v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v20 = (unint64_t)sub_245CF7A9C(v20);
    else
      v21 = 0;
    v22 = (uint64_t *)(v20 + 8 * v17);
    v23 = v20 + 8 * v21;
    *v22 = v7;
    v16 = v22 + 1;
    v24 = (char *)*v13;
    v25 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        v26 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *--v22 = v26;
      }
      while (v24 != v25);
      v24 = (char *)*v12;
    }
    *v12 = v22;
    *v13 = v16;
    v12[2] = (void *)v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v14 = v6;
    v16 = v14 + 1;
  }
  *v13 = v16;
  v27 = (void **)(*(_QWORD *)(a1 + 72) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  v28 = v27 + 1;
  v29 = (uint64_t *)v27[1];
  v30 = (unint64_t)v27[2];
  if ((unint64_t)v29 < v30)
  {
    *v29 = v7;
    v31 = v29 + 1;
    goto LABEL_33;
  }
  v32 = ((char *)v29 - (_BYTE *)*v27) >> 3;
  if ((unint64_t)(v32 + 1) >> 61)
LABEL_34:
    sub_245CF3B34();
  v33 = v30 - (_QWORD)*v27;
  v34 = v33 >> 2;
  if (v33 >> 2 <= (unint64_t)(v32 + 1))
    v34 = v32 + 1;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
    v35 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v35 = v34;
  if (v35)
    v35 = (unint64_t)sub_245CF7A9C(v35);
  else
    v36 = 0;
  v37 = (uint64_t *)(v35 + 8 * v32);
  v38 = v35 + 8 * v36;
  *v37 = v7;
  v31 = v37 + 1;
  v39 = (char *)*v28;
  v40 = (char *)*v27;
  if (*v28 != *v27)
  {
    do
    {
      v41 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      *--v37 = v41;
    }
    while (v39 != v40);
    v39 = (char *)*v27;
  }
  *v27 = v37;
  *v28 = v31;
  v27[2] = (void *)v38;
  if (v39)
    operator delete(v39);
LABEL_33:
  *v28 = v31;
  return v7;
}

uint64_t sub_245D1DC64(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    v6 = 48 * v3;
    is_mul_ok(v3, 0x30uLL);
    v7 = (_QWORD *)operator new[]();
    v8 = v7;
    if (v3)
    {
      v9 = v7;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9 += 6;
        v6 -= 48;
      }
      while (v6);
    }
    bzero(v7, 48 * a1[6]);
    v11 = (_QWORD *)a1[2];
    v10 = a1[3];
    if ((unint64_t)v11 >= v10)
    {
      v13 = a1[1];
      v14 = ((uint64_t)v11 - v13) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_245CF3B34();
      v15 = v10 - v13;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v17 = (unint64_t)sub_245CF7A9C(v17);
      else
        v18 = 0;
      v19 = (_QWORD *)(v17 + 8 * v14);
      v20 = v17 + 8 * v18;
      *v19 = v8;
      v12 = v19 + 1;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = (char *)a1[1];
      }
      a1[1] = v19;
      a1[2] = v12;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v11 = v8;
      v12 = v11 + 1;
    }
    a1[2] = v12;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sub_245D1DDD4(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  size_t v28;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      v28 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v28);
      *(_QWORD *)(a1 + 8) = (char *)v4 + v28;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      sub_245CF3B34();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    v11 = (char *)sub_245CF3B48(v10);
    v12 = &v11[24 * v5];
    v14 = &v11[24 * v13];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v12, v15);
    v16 = &v12[v15];
    v18 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(a1 + 8);
    if (v17 == *(_QWORD **)a1)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v17)
        return;
    }
    else
    {
      do
      {
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        v12 -= 24;
        *((_QWORD *)v12 + 2) = 0;
        v19 = *(_OWORD *)(v17 - 3);
        v17 -= 3;
        *(_OWORD *)v12 = v19;
        *((_QWORD *)v12 + 2) = v17[2];
        *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
      }
      while (v17 != v18);
      v20 = *(_QWORD **)a1;
      v17 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v17 != v20)
      {
        v21 = v17;
        do
        {
          v23 = (void *)*(v21 - 3);
          v21 -= 3;
          v22 = v23;
          if (v23)
          {
            *(v17 - 2) = v22;
            operator delete(v22);
          }
          v17 = v21;
        }
        while (v21 != v20);
        v17 = v20;
      }
      if (!v17)
        return;
    }
    operator delete(v17);
    return;
  }
  if (a2 < v5)
  {
    v24 = &v3[3 * a2];
    if (v4 != v24)
    {
      v25 = *(_QWORD **)(a1 + 8);
      do
      {
        v27 = (void *)*(v25 - 3);
        v25 -= 3;
        v26 = v27;
        if (v27)
        {
          *(v4 - 2) = v26;
          operator delete(v26);
        }
        v4 = v25;
      }
      while (v25 != v24);
    }
    *(_QWORD *)(a1 + 8) = v24;
  }
}

void sub_245D1DFC0(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v1 = *(_BYTE **)a1;
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)a1 <= 0x7FuLL)
  {
    v3 = *(_BYTE **)(a1 + 8);
    v4 = (char *)operator new(0x80uLL);
    v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
    v6 = v5;
    if (v3 != v1)
    {
      v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v7 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        *((_QWORD *)v6 - 1) = v7;
        v6 -= 8;
      }
      while (v3 != v1);
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4 + 128;
    if (v1)
      operator delete(v1);
  }
}

void sub_245D1E068(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;

  v3 = 0;
  v4 = ((a2[4] - a2[3]) >> 3) - 1;
  v5 = v4 & ~(v4 >> 31);
  v6 = a2[6];
  while (1)
  {
    v7 = (uint64_t **)(v6 + 24 * v3);
    v8 = *v7;
    v9 = v7[1];
    if (v8 != v9)
      break;
LABEL_14:
    if (++v3 == v5 + 1)
    {
      v21 = **(_QWORD **)(v6 + 24 * v5);
      v22 = *(_DWORD *)(v21 + 36);
      v23 = *(_QWORD *)(v21 + 40);
      if (*(_QWORD *)(v23 + 40))
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          if ((unint64_t)v25 >= v26)
          {
            v27 = (v25 - v24) >> 3;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61)
              sub_245CF3B34();
            if ((uint64_t)(v26 - (_QWORD)v24) >> 2 > v28)
              v28 = (uint64_t)(v26 - (_QWORD)v24) >> 2;
            if (v26 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v28;
            if (v29)
              v29 = (unint64_t)sub_245CF7A9C(v29);
            else
              v30 = 0;
            v31 = (char *)(v29 + 8 * v27);
            *(_QWORD *)v31 = v23;
            v32 = v31 + 8;
            while (v25 != v24)
            {
              v33 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v31 - 1) = v33;
              v31 -= 8;
            }
            v26 = v29 + 8 * v30;
            if (v24)
              operator delete(v24);
            v24 = v31;
            v25 = v32;
          }
          else
          {
            *(_QWORD *)v25 = v23;
            v25 += 8;
          }
          v23 = *(_QWORD *)(v23 + 40);
        }
        while (*(_QWORD *)(v23 + 40));
        if (v24 != v25)
        {
          v34 = v25 - 8;
          if (v25 - 8 > v24)
          {
            v35 = v24 + 8;
            do
            {
              v36 = *((_QWORD *)v35 - 1);
              *((_QWORD *)v35 - 1) = *(_QWORD *)v34;
              *(_QWORD *)v34 = v36;
              v34 -= 8;
              v37 = v35 >= v34;
              v35 += 8;
            }
            while (!v37);
          }
        }
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      sub_245D20180((_QWORD *)a1, v24, (uint64_t)v25, (v25 - v24) >> 3);
      *(_DWORD *)(a1 + 24) = v22;
      if (v24)
        operator delete(v24);
      return;
    }
  }
  v10 = (uint64_t **)(a2[9] + 24 * v3);
  v11 = *v10;
  v12 = v10[1];
  while (1)
  {
    v13 = *v8;
    *(_QWORD *)(*v8 + 40) = 0;
    if (v11 == v12)
      break;
    v14 = 0;
    v15 = 0.0;
    v16 = v11;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        v15 = v19;
        v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14)
      break;
    *(_QWORD *)(v13 + 40) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9)
      goto LABEL_14;
  }
  v44 = 0;
  v38 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
  sub_245CF35A0(v38, (uint64_t)"(", 1);
  v39 = (_QWORD *)std::ostream::operator<<();
  v40 = sub_245CF35A0(v39, (uint64_t)") ", 2);
  v41 = sub_245CF35A0(v40, (uint64_t)"LOG(", 4);
  v42 = sub_245CF35A0(v41, (uint64_t)"ERROR", 5);
  v43 = sub_245CF35A0(v42, (uint64_t)") ", 2);
  sub_245CF35A0(v43, (uint64_t)"Failed to find the best path in Viterbi.", 40);
  sub_245CF3834(&v44);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

void sub_245D1E354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_245D1E384(uint64_t (**a1)(), _QWORD *a2, uint64_t a3, int a4, float a5)
{
  _QWORD *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  float v21;
  _QWORD *v22;
  __int128 v23;
  int v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  _QWORD **v36;
  uint64_t (*v37)();
  uint64_t (*v38)();
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)();
  uint64_t (*v43)();
  void *v44;
  void *v45;
  uint64_t (*v46)();
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t (*v51)();
  uint64_t (*v52)();
  uint64_t (*v53)();
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t (*v57)();
  uint64_t (*v58)();
  void *v59;
  void *v60;
  _QWORD *v61;
  _QWORD *i;
  uint64_t (*v63)();
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t (*v77)();
  uint64_t v78;
  unint64_t v79;
  double *v80;
  double *v81;
  unint64_t v82;
  uint64_t v83;
  double *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  unint64_t v89;
  float v90;
  float v91;
  uint64_t v92;
  unsigned int v93;
  float v94;
  float v95;
  int v96;
  float v97;
  float *v98;
  uint64_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  float *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  int v137;
  __int128 v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint8x8_t v146;
  unint64_t v147;
  _QWORD *v148;
  _QWORD *j;
  unint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint8x8_t v153;
  _QWORD *v154;
  _QWORD *k;
  unint64_t v156;
  _QWORD *v157;
  float v158;
  _BOOL4 v159;
  unint64_t v160;
  unint64_t v161;
  int8x8_t prime;
  void *v163;
  void *v164;
  uint64_t v165;
  _QWORD **v166;
  unint64_t v167;
  uint8x8_t v168;
  unint64_t v169;
  uint8x8_t v170;
  uint64_t v171;
  _QWORD *m;
  unint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  _QWORD *v200;
  __int128 v201;
  unint64_t v202;
  uint64_t (*v203)();
  int v204;
  int v205;
  char v206;
  int v207;
  double *v208;
  float *v210;
  _QWORD *v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  char *v216;
  __int128 v217;
  void *v218[2];
  __int128 v219;
  float v220;
  void *v221[3];
  void *v222[3];
  void *v223[4];
  void *__p[2];
  uint64_t v225;
  uint64_t (**v226)();
  __int128 v227;
  _QWORD v228[3];
  uint64_t v229;
  uint64_t v230;
  _BYTE v231[48];
  uint64_t v232;
  uint64_t v233;

  v7 = a2;
  v233 = *MEMORY[0x24BDAC8D0];
  if (a3 == 1)
  {
    if ((a4 & 1) == 0)
    {
      sub_245D1E068((uint64_t)v231, a2);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      v218[0] = a1;
      LOBYTE(v218[1]) = 0;
      v200 = operator new(0x20uLL);
      *a1 = (uint64_t (*)())v200;
      a1[1] = (uint64_t (*)())v200;
      a1[2] = (uint64_t (*)())(v200 + 4);
      __p[0] = v200;
      v222[0] = v200;
      v226 = a1 + 2;
      *(_QWORD *)&v227 = v222;
      *((_QWORD *)&v227 + 1) = __p;
      LOBYTE(v228[0]) = 0;
      v200[1] = 0;
      v200[2] = 0;
      v201 = *(_OWORD *)v231;
      v202 = (uint64_t)(*(_QWORD *)&v231[8] - *(_QWORD *)v231) >> 3;
      *v200 = 0;
      sub_245D20180(v200, (const void *)v201, *((uint64_t *)&v201 + 1), v202);
      *((_DWORD *)v200 + 6) = *(_DWORD *)&v231[24];
      __p[0] = (char *)__p[0] + 32;
      v203 = (uint64_t (*)())__p[0];
      LOBYTE(v228[0]) = 1;
      sub_245CF3AD0((uint64_t)&v226);
      a1[1] = v203;
      if (*(_QWORD *)v231)
      {
        *(_QWORD *)&v231[8] = *(_QWORD *)v231;
        operator delete(*(void **)v231);
      }
      return;
    }
  }
  else if (!a3)
  {
    LOBYTE(v226) = 0;
    v9 = sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
    sub_245CF35A0(v9, (uint64_t)"(", 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = sub_245CF35A0(v10, (uint64_t)") ", 2);
    v12 = sub_245CF35A0(v11, (uint64_t)"LOG(", 4);
    v13 = sub_245CF35A0(v12, (uint64_t)"WARNING", 7);
    v14 = sub_245CF35A0(v13, (uint64_t)") ", 2);
    sub_245CF35A0(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
    sub_245CF3834(&v226);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  v227 = 0u;
  memset(v228, 0, sizeof(v228));
  v226 = &off_2516F77F8;
  v229 = 512;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v15 = sub_245D1FF08(&v226);
  v16 = ((v7[4] - v7[3]) >> 3) - 1;
  *(_QWORD *)v15 = **(_QWORD **)(v7[6] + 24 * (v16 & ~(v16 >> 31)));
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = 0;
  v17 = v7[16] + v7[17] * v7[18];
  *(_DWORD *)v231 = 0;
  sub_245D18A7C(__p, v17, v231);
  if (a4)
  {
    sub_245D1D8D4((uint64_t *)v231, v7, a5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v231;
    v225 = *(_QWORD *)&v231[16];
    v18 = sub_245D211CC();
    v19 = sub_245CF43B0(v18);
    v20 = logf((float)((float)((float)v19 * 2.3283e-10) + 0.0) + 0.0000001);
    v21 = -logf(-v20);
  }
  else
  {
    sub_245D1E068((uint64_t)v223, v7);
    if (v223[0])
    {
      v223[1] = v223[0];
      operator delete(v223[0]);
    }
    v21 = *(float *)(*(_QWORD *)v15 + 36);
  }
  *(float *)(v15 + 16) = v21;
  v22 = operator new(8uLL);
  *v22 = v15;
  *(_QWORD *)&v23 = v22;
  *((_QWORD *)&v23 + 1) = v22 + 1;
  v217 = v23;
  v216 = (char *)(v22 + 1);
  sub_245D20074((uint64_t)v22, (uint64_t)(v22 + 1), 1);
  v205 = 0;
  v206 = 0;
  v204 = 10 * a3;
  if (10 * (int)a3 >= 512)
    v24 = 512;
  else
    v24 = 10 * a3;
  if (v24 <= 1)
    v25 = 1;
  else
    v25 = v24;
  v207 = v25;
  v212 = a3;
  while ((_QWORD)v217 != *((_QWORD *)&v217 + 1))
  {
    v26 = *(_QWORD **)v217;
    if ((uint64_t)(*((_QWORD *)&v217 + 1) - v217) >= 9)
    {
      v27 = 0;
      v28 = (uint64_t)(*((_QWORD *)&v217 + 1) - v217) >> 3;
      v29 = (_QWORD *)v217;
      do
      {
        v30 = v29;
        v29 += v27 + 1;
        v31 = 2 * v27;
        v27 = (2 * v27) | 1;
        v32 = v31 + 2;
        if (v32 < v28 && *(float *)(*v29 + 16) < *(float *)(v29[1] + 16))
        {
          ++v29;
          v27 = v32;
        }
        *v30 = *v29;
      }
      while (v27 <= (uint64_t)((unint64_t)(v28 - 2) >> 1));
      v33 = (_QWORD *)(*((_QWORD *)&v217 + 1) - 8);
      if (v29 == (_QWORD *)(*((_QWORD *)&v217 + 1) - 8))
      {
        *v29 = v26;
      }
      else
      {
        *v29 = *v33;
        *v33 = v26;
        sub_245D20074(v217, (uint64_t)(v29 + 1), (uint64_t)((uint64_t)v29 - v217 + 8) >> 3);
      }
    }
    *(_QWORD *)&v34 = v217;
    *((_QWORD *)&v34 + 1) = *((_QWORD *)&v217 + 1) - 8;
    v217 = v34;
    v35 = *v26;
    v36 = (_QWORD **)v7[9];
    if (*v26 == **v36)
    {
      v37 = *a1;
      v38 = a1[1];
      v39 = (char *)v38 - (char *)*a1;
      v40 = v39 >> 5;
      v41 = (v39 >> 5) + 1;
      if (v39 == -32)
      {
        v42 = (uint64_t (*)())((char *)v37 + 32 * v41);
        if (v38 != v42)
        {
          v43 = a1[1];
          do
          {
            v45 = (void *)*((_QWORD *)v43 - 4);
            v43 = (uint64_t (*)())((char *)v43 - 32);
            v44 = v45;
            if (v45)
            {
              *((_QWORD *)v38 - 3) = v44;
              operator delete(v44);
            }
            v38 = v43;
          }
          while (v43 != v42);
        }
        a1[1] = v42;
        goto LABEL_57;
      }
      v46 = a1[2];
      if (v46 != v38)
      {
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
        *((_DWORD *)v38 + 6) = 0;
        *((_QWORD *)v38 + 2) = 0;
        a1[1] = (uint64_t (*)())((char *)v38 + 32);
        goto LABEL_57;
      }
      if (v41 >> 59)
        sub_245CF3B34();
      v47 = (char *)v46 - (char *)v37;
      if (v47 >> 4 > v41)
        v41 = v47 >> 4;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0)
        v48 = 0x7FFFFFFFFFFFFFFLL;
      else
        v48 = v41;
      if (v48 >> 59)
        sub_245CF3B8C();
      v49 = (char *)operator new(32 * v48);
      v50 = &v49[32 * v40];
      v51 = (uint64_t (*)())&v49[32 * v48];
      *(_QWORD *)v50 = 0;
      *((_QWORD *)v50 + 1) = 0;
      *((_DWORD *)v50 + 6) = 0;
      *((_QWORD *)v50 + 2) = 0;
      v52 = (uint64_t (*)())(v50 + 32);
      v53 = *a1;
      if (v38 != *a1)
      {
        v54 = 0;
        do
        {
          v55 = &v50[v54];
          v56 = (char *)v38 + v54;
          *((_QWORD *)v55 - 4) = 0;
          *((_QWORD *)v55 - 3) = 0;
          *((_QWORD *)v55 - 2) = 0;
          *((_OWORD *)v55 - 2) = *(_OWORD *)((char *)v38 + v54 - 32);
          *((_QWORD *)v55 - 2) = *(_QWORD *)((char *)v38 + v54 - 16);
          *((_QWORD *)v56 - 4) = 0;
          *((_QWORD *)v56 - 3) = 0;
          *((_QWORD *)v56 - 2) = 0;
          *((_DWORD *)v55 - 2) = *(_DWORD *)((char *)v38 + v54 - 8);
          v54 -= 32;
        }
        while ((uint64_t (*)())((char *)v38 + v54) != v53);
        v57 = *a1;
        v38 = a1[1];
        *a1 = (uint64_t (*)())&v50[v54];
        a1[1] = v52;
        a1[2] = v51;
        if (v38 != v57)
        {
          v58 = v38;
          do
          {
            v60 = (void *)*((_QWORD *)v58 - 4);
            v58 = (uint64_t (*)())((char *)v58 - 32);
            v59 = v60;
            if (v60)
            {
              *((_QWORD *)v38 - 3) = v59;
              operator delete(v59);
            }
            v38 = v58;
          }
          while (v58 != v57);
          v38 = v57;
        }
        if (!v38)
          goto LABEL_57;
LABEL_56:
        operator delete(v38);
        goto LABEL_57;
      }
      *a1 = (uint64_t (*)())v50;
      a1[1] = v52;
      a1[2] = v51;
      if (v38)
        goto LABEL_56;
LABEL_57:
      v61 = v26;
      for (i = (_QWORD *)v26[1]; i[1]; i = (_QWORD *)i[1])
      {
        v63 = a1[1];
        v65 = (_QWORD *)*((_QWORD *)v63 - 3);
        v64 = *((_QWORD *)v63 - 2);
        if ((unint64_t)v65 >= v64)
        {
          v67 = *((_QWORD *)v63 - 4);
          v68 = ((uint64_t)v65 - v67) >> 3;
          if ((unint64_t)(v68 + 1) >> 61)
            sub_245CF3B34();
          v69 = v64 - v67;
          v70 = v69 >> 2;
          if (v69 >> 2 <= (unint64_t)(v68 + 1))
            v70 = v68 + 1;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v71 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v71 = v70;
          if (v71)
            v71 = (unint64_t)sub_245CF7A9C(v71);
          else
            v72 = 0;
          v73 = (_QWORD *)(v71 + 8 * v68);
          *v73 = *i;
          v66 = v73 + 1;
          v75 = (char *)*((_QWORD *)v63 - 4);
          v74 = (char *)*((_QWORD *)v63 - 3);
          if (v74 != v75)
          {
            do
            {
              v76 = *((_QWORD *)v74 - 1);
              v74 -= 8;
              *--v73 = v76;
            }
            while (v74 != v75);
            v74 = (char *)*((_QWORD *)v63 - 4);
          }
          *((_QWORD *)v63 - 4) = v73;
          *((_QWORD *)v63 - 3) = v66;
          *((_QWORD *)v63 - 2) = v71 + 8 * v72;
          if (v74)
            operator delete(v74);
        }
        else
        {
          *v65 = *i;
          v66 = v65 + 1;
        }
        *((_QWORD *)v63 - 3) = v66;
      }
      v77 = a1[1];
      *((_DWORD *)v77 - 2) = *((_DWORD *)v61 + 4);
      if (v212 == ((char *)v77 - (char *)*a1) >> 5)
        break;
    }
    else
    {
      v78 = (char *)v36[3 * *(int *)(v35 + 16) + 1] - (char *)v36[3 * *(int *)(v35 + 16)];
      v79 = (int)(v78 >> 3);
      *(_DWORD *)v231 = 0;
      sub_245D18A7C(v222, v79, v231);
      *(_DWORD *)v231 = 0;
      sub_245D18A7C(v221, v79, v231);
      v210 = (float *)v26;
      if (v78 << 29)
      {
        if (v78 << 29 < 0)
          sub_245CF3B34();
        v80 = (double *)sub_245CF7A9C((int)(v78 >> 3));
        v81 = v80;
        v82 = 0;
        v83 = 8 * v79;
        v84 = &v80[v79];
        do
        {
          v80[v82 / 8] = 0.0;
          v82 += 8;
        }
        while (v83 != v82);
      }
      else
      {
        v81 = 0;
        v84 = 0;
      }
      v85 = *(_DWORD *)(v35 + 16);
      v86 = v7[9];
      v208 = v81;
      if (a4)
      {
        v87 = *(_QWORD *)(v86 + 24 * v85);
        v88 = -100000000.0;
        if (*(_QWORD *)(v86 + 24 * v85 + 8) != v87)
        {
          v89 = 0;
          v90 = *((float *)__p[0] + *(unsigned int *)(v35 + 24));
          v88 = -100000000.0;
          do
          {
            v91 = (float)((float)(v210[5] + *((float *)__p[0] + *(unsigned int *)(*(_QWORD *)(v87 + 8 * v89) + 24)))
                        + (float)(a5 * *(float *)(*(_QWORD *)(v87 + 8 * v89) + 32)))
                - v90;
            *((float *)v222[0] + v89) = v91;
            v92 = sub_245D211CC();
            v93 = sub_245CF43B0(v92);
            v94 = logf((float)((float)((float)v93 * 2.3283e-10) + 0.0) + 0.0000001);
            v95 = v91 - logf(-v94);
            *((float *)v221[0] + v89) = v95;
            if (v95 > v88)
              v88 = v95;
            ++v89;
            v96 = *(_DWORD *)(v35 + 16);
            v86 = v7[9];
            v87 = *(_QWORD *)(v86 + 24 * v96);
          }
          while (v89 < (*(_QWORD *)(v86 + 24 * v96 + 8) - v87) >> 3);
          v85 = *(_DWORD *)(v35 + 16);
        }
        if (v84 != v81)
        {
          v97 = v210[4];
          v98 = (float *)v221[0];
          if ((unint64_t)(v84 - v81) <= 1)
            v99 = 1;
          else
            v99 = v84 - v81;
          do
          {
            v100 = *v98++;
            v101 = expf(v100 - v88);
            v102 = (float)(v97 - v100) + log1pf(-v101);
            v103 = v97 - fmaxf(v102, 0.0);
            v104 = expf(-fabsf(v102));
            *v81++ = (float)(v103 - log1pf(v104));
            --v99;
          }
          while (v99);
        }
      }
      v105 = *(_QWORD *)(v86 + 24 * v85);
      if (*(_QWORD *)(v86 + 24 * v85 + 8) == v105)
      {
        v120 = v217;
      }
      else
      {
        v106 = 0;
        do
        {
          v107 = *(_QWORD *)(v105 + 8 * v106);
          v108 = sub_245D1FF08(&v226);
          v86 = v108;
          *(_QWORD *)v108 = v107;
          if (a4)
          {
            *(_DWORD *)(v108 + 20) = *((_DWORD *)v222[0] + v106);
            v109 = v208[v106];
            v110 = v210;
          }
          else
          {
            v110 = v210;
            *(float *)(v108 + 20) = *(float *)(v107 + 32) + v210[5];
            v109 = *(float *)(v107 + 36) + v210[5];
          }
          *(float *)(v108 + 16) = v109;
          *(_QWORD *)(v108 + 8) = v110;
          v111 = (char *)*((_QWORD *)&v217 + 1);
          if (*((_QWORD *)&v217 + 1) >= (unint64_t)v216)
          {
            v113 = (uint64_t)(*((_QWORD *)&v217 + 1) - v217) >> 3;
            v114 = v113 + 1;
            if ((unint64_t)(v113 + 1) >> 61)
              sub_245CF3B34();
            if ((uint64_t)&v216[-v217] >> 2 > v114)
              v114 = (uint64_t)&v216[-v217] >> 2;
            if ((unint64_t)&v216[-v217] >= 0x7FFFFFFFFFFFFFF8)
              v115 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v115 = v114;
            if (v115)
            {
              if (v115 >> 61)
                sub_245CF3B8C();
              v116 = (char *)operator new(8 * v115);
            }
            else
            {
              v116 = 0;
            }
            v117 = (uint64_t *)&v116[8 * v113];
            *v117 = v86;
            v112 = (uint64_t)(v117 + 1);
            if (*((_QWORD *)&v217 + 1) != (_QWORD)v217)
            {
              do
              {
                v118 = *((_QWORD *)v111 - 1);
                v111 -= 8;
                *--v117 = v118;
              }
              while (v111 != (char *)v217);
              v111 = (char *)v217;
            }
            v216 = &v116[8 * v115];
            *(_QWORD *)&v217 = v117;
            if (v111)
              operator delete(v111);
          }
          else
          {
            **((_QWORD **)&v217 + 1) = v108;
            v112 = *((_QWORD *)&v217 + 1) + 8;
          }
          *(_QWORD *)&v119 = v217;
          *((_QWORD *)&v119 + 1) = v112;
          v213 = v119;
          sub_245D20074(v217, v112, (v112 - (uint64_t)v217) >> 3);
          v120 = v213;
          ++v106;
          v105 = *(_QWORD *)(v7[9] + 24 * *(int *)(v35 + 16));
          v217 = v213;
        }
        while (v106 < (*(_QWORD *)(v7[9] + 24 * *(int *)(v35 + 16) + 8) - v105) >> 3);
      }
      v214 = v120;
      v121 = (_QWORD *)MEMORY[0x24BEDB310];
      if (!(((unint64_t)(v228[1] + v228[2] * v229) < 0x3B9ACA00) | v206 & 1))
      {
        v231[0] = 0;
        sub_245CF35A0(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
        sub_245CF35A0(v121, (uint64_t)"(", 1);
        v122 = (_QWORD *)std::ostream::operator<<();
        v123 = sub_245CF35A0(v122, (uint64_t)") ", 2);
        v124 = sub_245CF35A0(v123, (uint64_t)"LOG(", 4);
        v125 = sub_245CF35A0(v124, (uint64_t)"WARNING", 7);
        v126 = sub_245CF35A0(v125, (uint64_t)") ", 2);
        sub_245CF35A0(v126, (uint64_t)"Allocator size exceeds ", 23);
        v127 = (_QWORD *)std::ostream::operator<<();
        sub_245CF35A0(v127, (uint64_t)" with an example of length ", 27);
        std::ostream::operator<<();
        sub_245CF3834(v231);
        v206 = 1;
      }
      if (*((_QWORD *)&v214 + 1) - (_QWORD)v214 < 0x13879uLL)
      {
        v217 = v214;
      }
      else
      {
        v128 = *((_QWORD *)&v214 + 1);
        memset(&v231[8], 0, 40);
        *(_QWORD *)v231 = &off_2516F77F8;
        v232 = 512;
        *(_OWORD *)v218 = 0u;
        v219 = 0u;
        v220 = 1.0;
        LOBYTE(v230) = 0;
        sub_245CF35A0(v121, (uint64_t)"unigram_model.cc", 16);
        sub_245CF35A0(v121, (uint64_t)"(", 1);
        v129 = (_QWORD *)std::ostream::operator<<();
        v130 = sub_245CF35A0(v129, (uint64_t)") ", 2);
        v131 = sub_245CF35A0(v130, (uint64_t)"LOG(", 4);
        v132 = sub_245CF35A0(v131, (uint64_t)"WARNING", 7);
        v133 = sub_245CF35A0(v132, (uint64_t)") ", 2);
        sub_245CF35A0(v133, (uint64_t)"Too big agenda size ", 20);
        v134 = (_QWORD *)std::ostream::operator<<();
        sub_245CF35A0(v134, (uint64_t)". Shrinking (round ", 19);
        ++v205;
        v135 = (_QWORD *)std::ostream::operator<<();
        sub_245CF35A0(v135, (uint64_t)") down to ", 10);
        v136 = (_QWORD *)std::ostream::operator<<();
        sub_245CF35A0(v136, (uint64_t)".", 1);
        v211 = v7;
        sub_245CF3834(&v230);
        if (v204 >= 1)
        {
          v216 = 0;
          v137 = 0;
          v217 = 0u;
          v138 = v214;
          while (1)
          {
            v215 = v138;
            v139 = (_QWORD *)v138;
            v140 = *(_QWORD *)v138;
            v230 = 0;
            if (!v140)
              goto LABEL_229;
            v141 = &v230;
            v142 = (unint64_t)v218[1];
            do
            {
              v143 = 0x9DDFEA08EB382D69 * (((8 * v140) + 8) ^ HIDWORD(v140));
              v144 = 0x9DDFEA08EB382D69 * (HIDWORD(v140) ^ (v143 >> 47) ^ v143);
              v145 = 0x9DDFEA08EB382D69 * (v144 ^ (v144 >> 47));
              if (v142)
              {
                v146 = (uint8x8_t)vcnt_s8((int8x8_t)v142);
                v146.i16[0] = vaddlv_u8(v146);
                if (v146.u32[0] > 1uLL)
                {
                  v147 = 0x9DDFEA08EB382D69 * (v144 ^ (v144 >> 47));
                  if (v145 >= v142)
                    v147 = v145 % v142;
                }
                else
                {
                  v147 = v145 & (v142 - 1);
                }
                v148 = (_QWORD *)*((_QWORD *)v218[0] + v147);
                if (v148)
                {
                  for (j = (_QWORD *)*v148; j; j = (_QWORD *)*j)
                  {
                    v150 = j[1];
                    if (v150 == v145)
                    {
                      if (j[2] == v140)
                      {
                        *v141 = j[3];
                        goto LABEL_229;
                      }
                    }
                    else
                    {
                      if (v146.u32[0] > 1uLL)
                      {
                        if (v150 >= v142)
                          v150 %= v142;
                      }
                      else
                      {
                        v150 &= v142 - 1;
                      }
                      if (v150 != v147)
                        break;
                    }
                  }
                }
              }
              v151 = sub_245D1FF08(v231);
              v152 = *(_OWORD *)v140;
              *(_QWORD *)(v151 + 16) = *(_QWORD *)(v140 + 16);
              *(_OWORD *)v151 = v152;
              *v141 = v151;
              v142 = (unint64_t)v218[1];
              if (v218[1])
              {
                v153 = (uint8x8_t)vcnt_s8((int8x8_t)v218[1]);
                v153.i16[0] = vaddlv_u8(v153);
                if (v153.u32[0] > 1uLL)
                {
                  v86 = v145;
                  if ((void *)v145 >= v218[1])
                    v86 = v145 % (unint64_t)v218[1];
                }
                else
                {
                  v86 = ((unint64_t)v218[1] - 1) & v145;
                }
                v154 = (_QWORD *)*((_QWORD *)v218[0] + v86);
                if (v154)
                {
                  for (k = (_QWORD *)*v154; k; k = (_QWORD *)*k)
                  {
                    v156 = k[1];
                    if (v156 == v145)
                    {
                      if (k[2] == v140)
                        goto LABEL_218;
                    }
                    else
                    {
                      if (v153.u32[0] > 1uLL)
                      {
                        if ((void *)v156 >= v218[1])
                          v156 %= (unint64_t)v218[1];
                      }
                      else
                      {
                        v156 &= (unint64_t)v218[1] - 1;
                      }
                      if (v156 != v86)
                        break;
                    }
                  }
                }
              }
              v157 = operator new(0x20uLL);
              *v157 = 0;
              v157[1] = v145;
              v157[2] = v140;
              v157[3] = v151;
              v158 = (float)(unint64_t)(*((_QWORD *)&v219 + 1) + 1);
              if (!v142 || (float)(v220 * (float)v142) < v158)
              {
                v159 = (v142 & (v142 - 1)) == 0;
                if (v142 < 3)
                  v159 = 0;
                v160 = (2 * v142) | !v159;
                v161 = vcvtps_u32_f32(v158 / v220);
                if (v160 <= v161)
                  prime = (int8x8_t)v161;
                else
                  prime = (int8x8_t)v160;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v142 = (unint64_t)v218[1];
                }
                if (*(_QWORD *)&prime <= v142)
                {
                  if (*(_QWORD *)&prime < v142)
                  {
                    v169 = vcvtps_u32_f32((float)*((unint64_t *)&v219 + 1) / v220);
                    if (v142 < 3
                      || (v170 = (uint8x8_t)vcnt_s8((int8x8_t)v142), v170.i16[0] = vaddlv_u8(v170), v170.u32[0] > 1uLL))
                    {
                      v169 = std::__next_prime(v169);
                    }
                    else
                    {
                      v171 = 1 << -(char)__clz(v169 - 1);
                      if (v169 >= 2)
                        v169 = v171;
                    }
                    if (*(_QWORD *)&prime <= v169)
                      prime = (int8x8_t)v169;
                    if (*(_QWORD *)&prime >= v142)
                    {
                      v142 = (unint64_t)v218[1];
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_174;
                      v177 = v218[0];
                      v218[0] = 0;
                      if (v177)
                        operator delete(v177);
                      v142 = 0;
                      v218[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_174:
                  if (*(_QWORD *)&prime >> 61)
                    sub_245CF3B8C();
                  v163 = operator new(8 * *(_QWORD *)&prime);
                  v164 = v218[0];
                  v218[0] = v163;
                  if (v164)
                    operator delete(v164);
                  v165 = 0;
                  v218[1] = (void *)prime;
                  do
                    *((_QWORD *)v218[0] + v165++) = 0;
                  while (*(_QWORD *)&prime != v165);
                  v166 = (_QWORD **)v219;
                  if ((_QWORD)v219)
                  {
                    v167 = *(_QWORD *)(v219 + 8);
                    v168 = (uint8x8_t)vcnt_s8(prime);
                    v168.i16[0] = vaddlv_u8(v168);
                    if (v168.u32[0] > 1uLL)
                    {
                      if (v167 >= *(_QWORD *)&prime)
                        v167 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v167 &= *(_QWORD *)&prime - 1;
                    }
                    *((_QWORD *)v218[0] + v167) = &v219;
                    for (m = *v166; m; v167 = v173)
                    {
                      v173 = m[1];
                      if (v168.u32[0] > 1uLL)
                      {
                        if (v173 >= *(_QWORD *)&prime)
                          v173 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v173 &= *(_QWORD *)&prime - 1;
                      }
                      if (v173 != v167)
                      {
                        if (!*((_QWORD *)v218[0] + v173))
                        {
                          *((_QWORD *)v218[0] + v173) = v166;
                          goto LABEL_199;
                        }
                        *v166 = (_QWORD *)*m;
                        *m = **((_QWORD **)v218[0] + v173);
                        **((_QWORD **)v218[0] + v173) = m;
                        m = v166;
                      }
                      v173 = v167;
LABEL_199:
                      v166 = (_QWORD **)m;
                      m = (_QWORD *)*m;
                    }
                  }
                  v142 = (unint64_t)prime;
                }
                if ((v142 & (v142 - 1)) != 0)
                {
                  if (v145 >= v142)
                    v86 = v145 % v142;
                  else
                    v86 = v145;
                }
                else
                {
                  v86 = (v142 - 1) & v145;
                }
              }
              v174 = v218[0];
              v175 = (_QWORD *)*((_QWORD *)v218[0] + v86);
              if (v175)
              {
                *v157 = *v175;
LABEL_216:
                *v175 = v157;
                goto LABEL_217;
              }
              *v157 = v219;
              *(_QWORD *)&v219 = v157;
              v174[v86] = &v219;
              if (*v157)
              {
                v176 = *(_QWORD *)(*v157 + 8);
                if ((v142 & (v142 - 1)) != 0)
                {
                  if (v176 >= v142)
                    v176 %= v142;
                }
                else
                {
                  v176 &= v142 - 1;
                }
                v175 = (char *)v218[0] + 8 * v176;
                goto LABEL_216;
              }
LABEL_217:
              ++*((_QWORD *)&v219 + 1);
LABEL_218:
              v140 = *(_QWORD *)(v140 + 8);
              v141 = (uint64_t *)(v151 + 8);
            }
            while (v140);
LABEL_229:
            v178 = v230;
            v86 = *((_QWORD *)&v217 + 1);
            if (*((_QWORD *)&v217 + 1) >= (unint64_t)v216)
            {
              v181 = (uint64_t)(*((_QWORD *)&v217 + 1) - v217) >> 3;
              v182 = v181 + 1;
              if ((unint64_t)(v181 + 1) >> 61)
                sub_245CF3B34();
              v180 = v139;
              if ((uint64_t)&v216[-v217] >> 2 > v182)
                v182 = (uint64_t)&v216[-v217] >> 2;
              if ((unint64_t)&v216[-v217] >= 0x7FFFFFFFFFFFFFF8)
                v183 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v183 = v182;
              if (v183)
              {
                if (v183 >> 61)
                  sub_245CF3B8C();
                v184 = (char *)operator new(8 * v183);
              }
              else
              {
                v184 = 0;
              }
              v185 = &v184[8 * v181];
              *(_QWORD *)v185 = v178;
              v179 = (uint64_t)(v185 + 8);
              if (*((_QWORD *)&v217 + 1) != (_QWORD)v217)
              {
                do
                {
                  v186 = *(_QWORD *)(v86 - 8);
                  v86 -= 8;
                  *((_QWORD *)v185 - 1) = v186;
                  v185 -= 8;
                }
                while (v86 != (_QWORD)v217);
                v86 = v217;
              }
              v216 = &v184[8 * v183];
              *(_QWORD *)&v217 = v185;
              if (v86)
                operator delete((void *)v86);
            }
            else
            {
              **((_QWORD **)&v217 + 1) = v230;
              v86 = *((_QWORD *)&v217 + 1) + 8;
              v179 = *((_QWORD *)&v217 + 1) + 8;
              v180 = v139;
            }
            sub_245D20074(v217, v179, (v179 - (uint64_t)v217) >> 3);
            if (v128 - (uint64_t)v180 >= 9)
            {
              v187 = 0;
              v188 = (v128 - (uint64_t)v180) >> 3;
              v189 = *v180;
              v190 = v180;
              do
              {
                v191 = v190;
                v190 += v187 + 1;
                v192 = 2 * v187;
                v187 = (2 * v187) | 1;
                v193 = v192 + 2;
                if (v193 < v188 && *(float *)(*v190 + 16) < *(float *)(v190[1] + 16))
                {
                  ++v190;
                  v187 = v193;
                }
                *v191 = *v190;
              }
              while (v187 <= (uint64_t)((unint64_t)(v188 - 2) >> 1));
              v194 = (_QWORD *)(v128 - 8);
              if (v190 == (_QWORD *)(v128 - 8))
              {
                *v190 = v189;
              }
              else
              {
                *v190 = *v194;
                *v194 = v189;
                sub_245D20074((uint64_t)v180, (uint64_t)(v190 + 1), v190 + 1 - v180);
              }
            }
            *(_QWORD *)&v195 = v217;
            *((_QWORD *)&v195 + 1) = v179;
            v217 = v195;
            *(_QWORD *)&v138 = v215;
            v128 = *((_QWORD *)&v215 + 1) - 8;
            *((_QWORD *)&v138 + 1) = *((_QWORD *)&v215 + 1) - 8;
            if (++v137 == v207)
            {
              if (v180)
                goto LABEL_257;
              goto LABEL_258;
            }
          }
        }
        v216 = 0;
        v217 = 0u;
        v180 = (_QWORD *)v214;
        if ((_QWORD)v214)
LABEL_257:
          operator delete(v180);
LABEL_258:
        v196 = v227;
        v227 = *(_OWORD *)&v231[8];
        *(_OWORD *)&v231[8] = v196;
        v197 = v228[0];
        v228[0] = *(_QWORD *)&v231[24];
        *(_QWORD *)&v231[24] = v197;
        v198 = *(_OWORD *)&v228[1];
        *(_OWORD *)&v228[1] = *(_OWORD *)&v231[32];
        *(_OWORD *)&v231[32] = v198;
        v199 = v229;
        v229 = v232;
        v232 = v199;
        sub_245CF4508((uint64_t)v218);
        sub_245D200D8(v231);
        v7 = v211;
      }
      if (v208)
        operator delete(v208);
      if (v221[0])
      {
        v221[1] = v221[0];
        operator delete(v221[0]);
      }
      if (v222[0])
      {
        v222[1] = v222[0];
        operator delete(v222[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v217)
    operator delete((void *)v217);
  sub_245D200D8(&v226);
}

void sub_245D1F7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, uint64_t a20,uint64_t a21,__int128 a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  uint64_t v44;

  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  if (a39)
    operator delete(a39);
  *(_QWORD *)(v44 - 224) = v43;
  sub_245CF39B0((void ***)(v44 - 224));
  if ((_QWORD)a22)
    operator delete((void *)a22);
  sub_245D200D8(&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_245D1F998(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;

  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_245CF3B34();
  v8 = a1 + 2;
  v9 = a1[2] - *a1;
  if (v9 >> 4 > v4)
    v4 = v9 >> 4;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v4;
  v18 = v8;
  if (v10)
    v10 = (unint64_t)sub_245D18DF4(v10);
  else
    v11 = 0;
  v12 = v10 + 32 * v3;
  v15[0] = v10;
  v15[1] = v12;
  v16 = v12;
  v17 = v10 + 32 * v11;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  sub_245CF3A2C((_QWORD *)v12, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_DWORD *)(v12 + 24) = *a3;
  v16 += 32;
  sub_245D18EA0(a1, v15);
  v13 = a1[1];
  sub_245D18F34((uint64_t)v15);
  return v13;
}

void sub_245D1FA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_245D18F34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_245D1FABC(unint64_t *a1, _QWORD *a2, float a3)
{
  _QWORD *v5;
  unint64_t v6;
  float *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;

  if ((int)(((a2[4] - a2[3]) >> 3) - 1) <= 0)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    v5 = a2;
    v6 = a2[16] + a2[17] * a2[18];
    LODWORD(v48[0]) = 0;
    sub_245D18A7C(__p, v6, v48);
    sub_245D1D8D4((uint64_t *)v48, v5, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v48;
    v51 = v49;
    v45 = sub_245D211CC();
    v7 = 0;
    v8 = 0;
    v9 = ((v5[4] - v5[3]) >> 3) - 1;
    v10 = **(_QWORD **)(v5[6] + 24 * (v9 & ~(v9 >> 31)));
    v11 = *((float *)__p[0] + *(unsigned int *)(v10 + 24));
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v46 = v5;
    v47 = a1;
    do
    {
      v12 = (uint64_t *)(v5[9] + 24 * *(unsigned int *)(v10 + 16));
      v13 = *v12;
      v14 = v12[1];
      v15 = v7;
      while (v13 != v14)
      {
        v16 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(_QWORD *)v13 + 24))
                                + (float)(a3 * *(float *)(*(_QWORD *)v13 + 32)))
                        - v11));
        if ((unint64_t)v15 >= v8)
        {
          v18 = v15 - v7;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            sub_245CF3B34();
          if ((uint64_t)(v8 - (_QWORD)v7) >> 1 > v19)
            v19 = (uint64_t)(v8 - (_QWORD)v7) >> 1;
          if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v19;
          if (v20)
            v20 = (unint64_t)sub_245CF7A54(v20);
          else
            v21 = 0;
          v22 = (float *)(v20 + 4 * v18);
          *v22 = v16;
          v17 = v22 + 1;
          while (v15 != v7)
          {
            v23 = *((_DWORD *)v15-- - 1);
            *((_DWORD *)v22-- - 1) = v23;
          }
          v8 = v20 + 4 * v21;
          if (v7)
            operator delete(v7);
          v7 = v22;
        }
        else
        {
          *v15 = v16;
          v17 = v15 + 1;
        }
        v13 += 8;
        v15 = v17;
      }
      sub_245D18B14((double **)v48, v7, v15);
      v24 = *(_DWORD *)(v10 + 16);
      v5 = v46;
      v25 = v46[9];
      v10 = *(_QWORD *)(*(_QWORD *)(v25 + 24 * v24) + 8 * (int)sub_245D18D40(v45, (double **)v48));
      v26 = **(_QWORD **)v46[9];
      v27 = v47;
      if (v10 != v26)
      {
        v11 = *((float *)__p[0] + *(unsigned int *)(v10 + 24));
        v29 = (_QWORD *)v47[1];
        v28 = v47[2];
        if ((unint64_t)v29 >= v28)
        {
          v31 = (_QWORD *)*v47;
          v32 = (uint64_t)((uint64_t)v29 - *v47) >> 3;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61)
            sub_245CF3B34();
          v34 = v28 - (_QWORD)v31;
          if (v34 >> 2 > v33)
            v33 = v34 >> 2;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
            v35 = (unint64_t)sub_245CF7A9C(v35);
          else
            v36 = 0;
          v37 = (_QWORD *)(v35 + 8 * v32);
          *v37 = v10;
          v30 = v37 + 1;
          if (v29 == v31)
          {
            v27 = v47;
          }
          else
          {
            do
            {
              v38 = *--v29;
              *--v37 = v38;
            }
            while (v29 != v31);
            v27 = v47;
            v29 = (_QWORD *)*v47;
          }
          *v27 = (unint64_t)v37;
          v27[1] = (unint64_t)v30;
          v27[2] = v35 + 8 * v36;
          v5 = v46;
          if (v29)
            operator delete(v29);
        }
        else
        {
          *v29 = v10;
          v30 = v29 + 1;
        }
        v27[1] = (unint64_t)v30;
      }
      if (v48[0])
      {
        v48[1] = v48[0];
        operator delete(v48[0]);
      }
    }
    while (v10 != v26);
    v40 = *v27;
    v39 = v27[1];
    if (*v27 != v39)
    {
      v41 = (_QWORD *)(v39 - 8);
      if ((unint64_t)v41 > v40)
      {
        v42 = v40 + 8;
        do
        {
          v43 = *(_QWORD *)(v42 - 8);
          *(_QWORD *)(v42 - 8) = *v41;
          *v41-- = v43;
          v44 = v42 >= (unint64_t)v41;
          v42 += 8;
        }
        while (!v44);
      }
    }
    if (v7)
      operator delete(v7);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_245D1FE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_245D1FECC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_245CF3B34();
  result = (char *)sub_245CF7A9C(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_245D1FF08(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    v6 = (void *)operator new[]();
    bzero(v6, 24 * a1[6]);
    v8 = (_QWORD *)a1[2];
    v7 = a1[3];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v8 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_245CF3B34();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          sub_245CF3B8C();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v6;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *--v8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = (_QWORD *)a1[1];
      }
      a1[1] = v16;
      a1[2] = v9;
      a1[3] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_245D20074(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *v10 = v7;
    }
  }
  return result;
}

_QWORD *sub_245D200D8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_2516F77F8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x249546A50](*v2, 0x1020C8062D53EE8);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_245D2015C(_QWORD *a1)
{
  sub_245D200D8(a1);
  JUMPOUT(0x249546A74);
}

_QWORD *sub_245D20180(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_245D1FECC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_245D201DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_245D20210(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  __n128 *v8;
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  uint64_t v14;
  unsigned __int32 v15;
  __n128 v16;
  unint64_t v17;
  __n128 *v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  unsigned __int32 v22;
  __n128 *v23;
  BOOL v24;
  __n128 v25;
  unint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  unsigned __int32 v29;
  __n128 *v30;
  unsigned __int32 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  __n128 *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  __n128 *v51;
  uint64_t v52;
  __n128 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __n128 v63;
  __n128 *v64;
  uint64_t v66;
  __int8 *v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  unsigned __int32 v74;
  __n128 *v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  unint64_t v79;

LABEL_1:
  v8 = (__n128 *)((char *)a2 - 24);
  v73 = (uint64_t)&a2[-3];
  v75 = a2;
  v9 = (uint64_t)&a2[-5].n128_i64[1];
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_245D20A98((uint64_t)v8, (uint64_t)a1))
        {
          v78 = *a1;
          *a1 = *v8;
          *v8 = v78;
          v31 = a1[1].n128_u32[0];
          a1[1].n128_u32[0] = a2[-1].n128_u32[2];
          a2[-1].n128_u32[2] = v31;
        }
        return;
      case 3uLL:
        sub_245D20B40((uint64_t)a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)v8);
        return;
      case 4uLL:
        sub_245D20C5C(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], (uint64_t)v8);
        return;
      case 5uLL:
        sub_245D20D28(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], (uint64_t)&a1[4].n128_i64[1], (uint64_t)v8);
        return;
      default:
        if (v11 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              v32 = (uint64_t)&a1[1].n128_i64[1];
              if (&a1[1].n128_i8[8] != (__int8 *)a2)
              {
                v33 = 0;
                v34 = (uint64_t)a1;
                do
                {
                  v35 = v34;
                  v34 = v32;
                  if (sub_245D20A98(v32, v35))
                  {
                    v36 = *(__n128 *)v34;
                    v79 = *(_QWORD *)(v34 + 16);
                    v78 = v36;
                    v37 = v33;
                    while (1)
                    {
                      v38 = (char *)a1 + v37;
                      *(__n128 *)(v38 + 24) = *(__n128 *)((char *)a1 + v37);
                      *((_DWORD *)v38 + 10) = *(unsigned __int32 *)((char *)a1[1].n128_u32 + v37);
                      if (!v37)
                        break;
                      v37 -= 24;
                      if (!sub_245D20A98((uint64_t)&v78, (uint64_t)a1 + v37))
                      {
                        v39 = (uint64_t)&a1[1].n128_i64[1] + v37;
                        goto LABEL_68;
                      }
                    }
                    v39 = (uint64_t)a1;
LABEL_68:
                    *(__n128 *)v39 = v78;
                    *(_DWORD *)(v39 + 16) = v79;
                  }
                  v32 = v34 + 24;
                  v33 += 24;
                }
                while ((__n128 *)(v34 + 24) != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v66 = (uint64_t)&a1[1].n128_i64[1];
            if (&a1[1].n128_i8[8] != (__int8 *)a2)
            {
              v67 = &a1[-2].n128_i8[8];
              do
              {
                v68 = (uint64_t)a1;
                a1 = (__n128 *)v66;
                if (sub_245D20A98(v66, v68))
                {
                  v69 = *a1;
                  v79 = a1[1].n128_u64[0];
                  v78 = v69;
                  v70 = (uint64_t)v67;
                  do
                  {
                    v71 = v70;
                    *(_OWORD *)(v70 + 48) = *(_OWORD *)(v70 + 24);
                    *(_DWORD *)(v70 + 64) = *(_DWORD *)(v70 + 40);
                    v72 = sub_245D20A98((uint64_t)&v78, v70);
                    v70 = v71 - 24;
                  }
                  while (v72);
                  *(__n128 *)(v71 + 24) = v78;
                  *(_DWORD *)(v71 + 40) = v79;
                }
                v66 = (uint64_t)&a1[1].n128_i64[1];
                v67 += 24;
              }
              while (&a1[1].n128_i8[8] != (__int8 *)a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v40 = (v12 - 2) >> 1;
            v41 = v40;
            do
            {
              v42 = v41;
              if (v40 >= v41)
              {
                v43 = (2 * v41) | 1;
                v44 = (uint64_t)a1 + 24 * v43;
                if (2 * v41 + 2 < (uint64_t)v12 && sub_245D20A98((uint64_t)a1 + 24 * v43, v44 + 24))
                {
                  v44 += 24;
                  v43 = 2 * v42 + 2;
                }
                v45 = (uint64_t)a1 + 24 * v42;
                if (!sub_245D20A98(v44, v45))
                {
                  v46 = *(__n128 *)v45;
                  v79 = *(_QWORD *)(v45 + 16);
                  v78 = v46;
                  do
                  {
                    v47 = (__n128 *)v44;
                    *(_OWORD *)v45 = *(_OWORD *)v44;
                    *(_DWORD *)(v45 + 16) = *(_DWORD *)(v44 + 16);
                    if (v40 < v43)
                      break;
                    v48 = (2 * v43) | 1;
                    v44 = (uint64_t)a1 + 24 * v48;
                    v49 = 2 * v43 + 2;
                    if (v49 < (uint64_t)v12 && sub_245D20A98((uint64_t)a1 + 24 * v48, v44 + 24))
                    {
                      v44 += 24;
                      v48 = v49;
                    }
                    v45 = (uint64_t)v47;
                    v43 = v48;
                  }
                  while (!sub_245D20A98(v44, (uint64_t)&v78));
                  *v47 = v78;
                  v47[1].n128_u32[0] = v79;
                }
              }
              v41 = v42 - 1;
            }
            while (v42);
            v50 = v11 / 0x18uLL;
            v51 = v75;
            do
            {
              v52 = 0;
              v53 = v51;
              v77 = *a1;
              v74 = a1[1].n128_u32[0];
              v54 = v50 - 2;
              if (v50 < 2)
                v54 = v50 - 1;
              v55 = v54 >> 1;
              v56 = (uint64_t)a1;
              do
              {
                v57 = v56 + 24 * v52 + 24;
                v58 = (2 * v52) | 1;
                v59 = 2 * v52 + 2;
                if (v59 < v50 && sub_245D20A98(v56 + 24 * v52 + 24, v56 + 24 * v52 + 48))
                {
                  v57 += 24;
                  v58 = v59;
                }
                *(_OWORD *)v56 = *(_OWORD *)v57;
                *(_DWORD *)(v56 + 16) = *(_DWORD *)(v57 + 16);
                v56 = v57;
                v52 = v58;
              }
              while (v58 <= v55);
              v51 = (__n128 *)((char *)v53 - 24);
              if ((__int8 *)v57 == &v53[-2].n128_i8[8])
              {
                *(__n128 *)v57 = v77;
                *(_DWORD *)(v57 + 16) = v74;
              }
              else
              {
                *(__n128 *)v57 = *v51;
                *(_DWORD *)(v57 + 16) = v53[-1].n128_u32[2];
                *v51 = v77;
                v53[-1].n128_u32[2] = v74;
                v60 = v57 - (_QWORD)a1 + 24;
                if (v60 >= 25)
                {
                  v61 = (unint64_t)(-2 - 0x5555555555555555 * (v60 >> 3)) >> 1;
                  v62 = (uint64_t)a1 + 24 * v61;
                  if (sub_245D20A98(v62, v57))
                  {
                    v63 = *(__n128 *)v57;
                    v79 = *(_QWORD *)(v57 + 16);
                    v78 = v63;
                    do
                    {
                      v64 = (__n128 *)v62;
                      *(_OWORD *)v57 = *(_OWORD *)v62;
                      *(_DWORD *)(v57 + 16) = *(_DWORD *)(v62 + 16);
                      if (!v61)
                        break;
                      v61 = (v61 - 1) >> 1;
                      v62 = (uint64_t)a1 + 24 * v61;
                      v57 = (uint64_t)v64;
                    }
                    while (sub_245D20A98(v62, (uint64_t)&v78));
                    *v64 = v78;
                    v64[1].n128_u32[0] = v79;
                  }
                }
              }
            }
            while (v50-- > 2);
          }
          return;
        }
        v13 = (__n128 *)((char *)a1 + 24 * (v12 >> 1));
        if ((unint64_t)v11 < 0xC01)
        {
          sub_245D20B40((uint64_t)a1 + 24 * (v12 >> 1), (uint64_t)a1, (uint64_t)v8);
        }
        else
        {
          sub_245D20B40((uint64_t)a1, (uint64_t)a1 + 24 * (v12 >> 1), (uint64_t)v8);
          v14 = (uint64_t)a1 + 24 * (v12 >> 1);
          sub_245D20B40((uint64_t)&a1[1].n128_i64[1], v14 - 24, v73);
          sub_245D20B40((uint64_t)&a1[3], (uint64_t)&a1[1].n128_i64[3 * (v12 >> 1) + 1], v9);
          sub_245D20B40(v14 - 24, v14, (uint64_t)&a1[1].n128_i64[3 * (v12 >> 1) + 1]);
          v78 = *a1;
          *a1 = *v13;
          *v13 = v78;
          v15 = a1[1].n128_u32[0];
          a1[1].n128_u32[0] = *(_DWORD *)(v14 + 16);
          *(_DWORD *)(v14 + 16) = v15;
        }
        --a3;
        if ((a4 & 1) == 0 && !sub_245D20A98((uint64_t)&a1[-2].n128_i64[1], (uint64_t)a1))
        {
          v25 = *a1;
          v79 = a1[1].n128_u64[0];
          v78 = v25;
          if (sub_245D20A98((uint64_t)&v78, (uint64_t)v8))
          {
            v10 = a1;
            a2 = v75;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!sub_245D20A98((uint64_t)&v78, (uint64_t)v10));
          }
          else
          {
            v26 = (unint64_t)&a1[1].n128_u64[1];
            a2 = v75;
            do
            {
              v10 = (__n128 *)v26;
              if (v26 >= (unint64_t)v75)
                break;
              v27 = sub_245D20A98((uint64_t)&v78, v26);
              v26 = (unint64_t)&v10[1].n128_u64[1];
            }
            while (!v27);
          }
          v28 = (unint64_t)a2;
          if (v10 < a2)
          {
            v28 = (unint64_t)a2;
            do
              v28 -= 24;
            while (sub_245D20A98((uint64_t)&v78, v28));
          }
          while ((unint64_t)v10 < v28)
          {
            v76 = *v10;
            *v10 = *(__n128 *)v28;
            *(__n128 *)v28 = v76;
            v29 = v10[1].n128_u32[0];
            v10[1].n128_u32[0] = *(_DWORD *)(v28 + 16);
            *(_DWORD *)(v28 + 16) = v29;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (!sub_245D20A98((uint64_t)&v78, (uint64_t)v10));
            do
              v28 -= 24;
            while (sub_245D20A98((uint64_t)&v78, v28));
          }
          v30 = (__n128 *)((char *)v10 - 24);
          if (&v10[-2].n128_i8[8] != (__int8 *)a1)
          {
            *a1 = *v30;
            a1[1].n128_u32[0] = v10[-1].n128_u32[2];
          }
          a4 = 0;
          *v30 = v78;
          v10[-1].n128_u32[2] = v79;
          continue;
        }
        v16 = *a1;
        v79 = a1[1].n128_u64[0];
        v78 = v16;
        v17 = (unint64_t)a1;
        do
        {
          v18 = (__n128 *)v17;
          v17 += 24;
        }
        while (sub_245D20A98(v17, (uint64_t)&v78));
        v19 = (unint64_t)v75;
        if (v18 == a1)
        {
          v19 = (unint64_t)v75;
          do
          {
            if (v17 >= v19)
              break;
            v19 -= 24;
          }
          while (!sub_245D20A98(v19, (uint64_t)&v78));
        }
        else
        {
          do
            v19 -= 24;
          while (!sub_245D20A98(v19, (uint64_t)&v78));
        }
        v10 = (__n128 *)v17;
        if (v17 >= v19)
        {
          a2 = v75;
        }
        else
        {
          v20 = v19;
          a2 = v75;
          do
          {
            v21 = *v10;
            *v10 = *(__n128 *)v20;
            *(__n128 *)v20 = v21;
            v22 = v10[1].n128_u32[0];
            v10[1].n128_u32[0] = *(_DWORD *)(v20 + 16);
            *(_DWORD *)(v20 + 16) = v22;
            do
              v10 = (__n128 *)((char *)v10 + 24);
            while (sub_245D20A98((uint64_t)v10, (uint64_t)&v78));
            do
              v20 -= 24;
            while (!sub_245D20A98(v20, (uint64_t)&v78));
          }
          while ((unint64_t)v10 < v20);
        }
        v23 = (__n128 *)((char *)v10 - 24);
        if (&v10[-2].n128_i8[8] != (__int8 *)a1)
        {
          *a1 = *v23;
          a1[1].n128_u32[0] = v10[-1].n128_u32[2];
        }
        *v23 = v78;
        v10[-1].n128_u32[2] = v79;
        if (v17 < v19)
        {
LABEL_31:
          sub_245D20210(a1, &v10[-2].n128_i8[8], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v24 = sub_245D20E30(a1, (__n128 *)((char *)v10 - 24));
        if (!sub_245D20E30(v10, a2))
        {
          if (v24)
            continue;
          goto LABEL_31;
        }
        a2 = (__n128 *)((char *)v10 - 24);
        if (!v24)
          goto LABEL_1;
        return;
    }
  }
}

BOOL sub_245D20A98(uint64_t a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  const void *v6;
  unint64_t v7;
  size_t v8;
  int v9;
  int v11;

  v4 = *(const void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >= v5)
    v8 = *(_QWORD *)(a1 + 8);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = memcmp(*(const void **)a1, *(const void **)a2, v8);
  if (v9)
  {
    if (v9 < 0)
      return 1;
  }
  else if (v5 < v7)
  {
    return 1;
  }
  v11 = memcmp(v6, v4, v8);
  if (v11)
  {
    if (v11 < 0)
      return 0;
  }
  else if (v7 < v5)
  {
    return 0;
  }
  return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
}

BOOL sub_245D20B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  _BOOL8 result;
  int *v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int *v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;

  v6 = sub_245D20A98(a2, a1);
  result = sub_245D20A98(a3, a2);
  if (v6)
  {
    if (result)
    {
      v8 = (int *)(a1 + 16);
      v9 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
    }
    else
    {
      v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v14;
      v8 = (int *)(a2 + 16);
      v15 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = v15;
      result = sub_245D20A98(a3, a2);
      if (!result)
        return result;
      v9 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v9;
    v12 = (int *)(a3 + 16);
    goto LABEL_10;
  }
  if (result)
  {
    v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
    v12 = (int *)(a2 + 16);
    v11 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = v11;
    result = sub_245D20A98(a2, a1);
    if (result)
    {
      v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v13;
      v8 = (int *)(a1 + 16);
LABEL_10:
      v16 = *v8;
      *v8 = *v12;
      *v12 = v16;
    }
  }
  return result;
}

__n128 sub_245D20C5C(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  int v10;
  __n128 v11;
  int v12;
  unsigned __int32 v13;

  sub_245D20B40((uint64_t)a1, a2, a3);
  if (sub_245D20A98(a4, a3))
  {
    v9 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v9;
    v10 = *(_DWORD *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(_DWORD *)(a4 + 16) = v10;
    if (sub_245D20A98(a3, a2))
    {
      v11 = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = v11;
      v12 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(a3 + 16) = v12;
      if (sub_245D20A98(a2, (uint64_t)a1))
      {
        result = *a1;
        *a1 = *(__n128 *)a2;
        *(__n128 *)a2 = result;
        v13 = a1[1].n128_u32[0];
        a1[1].n128_u32[0] = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

__n128 sub_245D20D28(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  __n128 v15;
  int v16;
  unsigned __int32 v17;

  sub_245D20C5C(a1, a2, a3, a4);
  if (sub_245D20A98(a5, a4))
  {
    v11 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v11;
    v12 = *(_DWORD *)(a4 + 16);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    *(_DWORD *)(a5 + 16) = v12;
    if (sub_245D20A98(a4, a3))
    {
      v13 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v13;
      v14 = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      *(_DWORD *)(a4 + 16) = v14;
      if (sub_245D20A98(a3, a2))
      {
        v15 = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = v15;
        v16 = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        *(_DWORD *)(a3 + 16) = v16;
        if (sub_245D20A98(a2, (uint64_t)a1))
        {
          result = *a1;
          *a1 = *(__n128 *)a2;
          *(__n128 *)a2 = result;
          v17 = a1[1].n128_u32[0];
          a1[1].n128_u32[0] = *(_DWORD *)(a2 + 16);
          *(_DWORD *)(a2 + 16) = v17;
        }
      }
    }
  }
  return result;
}

BOOL sub_245D20E30(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  __n128 v7;
  unsigned __int32 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if (sub_245D20A98((uint64_t)&a2[-2].n128_i64[1], (uint64_t)a1))
      {
        v7 = *a1;
        *a1 = *v6;
        *v6 = v7;
        v8 = a1[1].n128_u32[0];
        a1[1].n128_u32[0] = a2[-1].n128_u32[2];
        a2[-1].n128_u32[2] = v8;
      }
      return 1;
    case 3uLL:
      sub_245D20B40((uint64_t)a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    case 4uLL:
      sub_245D20C5C(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    case 5uLL:
      sub_245D20D28(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], (uint64_t)&a1[4].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    default:
      v9 = (uint64_t)&a1[3];
      sub_245D20B40((uint64_t)a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3]);
      v10 = (uint64_t)&a1[4].n128_i64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_245D20A98(v10, v9))
    {
      v16 = *(_OWORD *)v10;
      v17 = *(_QWORD *)(v10 + 16);
      v13 = v11;
      while (1)
      {
        v14 = (char *)a1 + v13;
        *(__n128 *)(v14 + 72) = *(__n128 *)((char *)a1 + v13 + 48);
        *((_DWORD *)v14 + 22) = *(unsigned __int32 *)((char *)a1[4].n128_u32 + v13);
        if (v13 == -48)
          break;
        v13 -= 24;
        if (!sub_245D20A98((uint64_t)&v16, (uint64_t)(v14 + 24)))
        {
          v15 = (uint64_t)&a1[4].n128_i64[1] + v13;
          goto LABEL_12;
        }
      }
      v15 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v15 = v16;
      *(_DWORD *)(v15 + 16) = v17;
      if (++v12 == 8)
        return v10 + 24 == (_QWORD)a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 24;
    if ((__n128 *)v10 == a2)
      return 1;
  }
}

uint64_t sub_245D20FF4()
{
  uint64_t v0;
  std::random_device v2;
  std::string __token;

  sub_245CF7F30(&__token, "/dev/urandom");
  std::random_device::random_device(&v2, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  v0 = MEMORY[0x249546984](&v2);
  std::random_device::~random_device(&v2);
  return v0;
}

void sub_245D21058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, std::random_device a10, std::random_device __p, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::random_device::~random_device(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_245D21084(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t result;
  unint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  int v11;
  char v12;
  int v13;

  v3 = (char)*a1;
  if ((v3 & 0x80000000) == 0)
  {
    *a3 = 1;
    return *a1;
  }
  v5 = a2 - (_QWORD)a1;
  if ((unint64_t)(a2 - (_QWORD)a1) >= 2)
  {
    if ((v3 & 0xE0) == 0xC0)
    {
      v6 = a1[1];
      if (v6 <= -65)
      {
        result = v6 & 0x3F | ((v3 & 0x1F) << 6);
        if (result >= 0x80)
        {
          v7 = 2;
LABEL_8:
          *a3 = v7;
          return result;
        }
      }
    }
    else if (v5 >= 3)
    {
      if ((v3 & 0xF0) == 0xE0)
      {
        v8 = (char)a1[1];
        if (v8 <= -65)
        {
          v9 = a1[2];
          if (v9 <= -65)
          {
            result = v9 & 0x3F | ((v8 & 0x3F) << 6) & 0xFFF | ((v3 & 0xF) << 12);
            if (result >= 0x800
              && (((v3 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              v7 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v5 >= 4 && (v3 & 0xF8) == 0xF0)
      {
        v10 = (char)a1[1];
        if (v10 <= -65)
        {
          v11 = (char)a1[2];
          if (v11 <= -65)
          {
            v12 = a1[3];
            if (v12 <= -65)
            {
              v13 = ((v3 & 7) << 18) | ((v10 & 0x3F) << 12);
              result = v12 & 0x3F | ((v11 & 0x3F) << 6) | v13;
              if (result >= 0x10000 && (v13 - 57344) < 0x102000)
              {
                v7 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *a3 = 1;
  return 65533;
}

uint64_t sub_245D211CC()
{
  uint64_t (*v0)(_QWORD);
  _DWORD *v2;
  uint64_t (*v3)(_QWORD);
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v0 = off_25751A1C8;
  if ((*(_BYTE *)off_25751A1C8(&off_25751A1C8) & 1) == 0)
  {
    sub_245D20FF4();
    v2 = (_DWORD *)off_25751A1B0(&off_25751A1B0);
    *v2 = v4;
    do
    {
      v5 = v3(&off_25751A1B0);
      *(_DWORD *)(v5 + 4 * v7) = v6;
    }
    while (v7 != 623);
    *(_QWORD *)(v3(&off_25751A1B0) + 2496) = 0;
    *(_BYTE *)v0(&off_25751A1C8) = 1;
  }
  return off_25751A1B0(&off_25751A1B0);
}

void sub_245D21284(uint64_t a1)
{
  sub_245CFF984(a1);
  JUMPOUT(0x249546A74);
}

void sub_245D212A8(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  const char *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  const void *v14;
  int v15;
  uint64_t v16;
  int v17;
  const void *v18;
  unsigned __int8 *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned __int8 **v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  void **v44;
  char *v45;
  uint64_t v46;

  v6 = a1;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v46);
  v8 = v46;
  if (v46)
  {
    v46 = 0;
    sub_245CF8D4C(v8);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3 < 1)
    return;
  v9 = 0;
  v10 = 0;
  v44 = a4;
  v45 = 0;
  v11 = "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x02\x03\x04";
  v12 = (unint64_t)&a2[a3];
  v13 = a2;
  v14 = &unk_245D22386;
  do
  {
    v15 = v11[(unint64_t)*v13 >> 4];
    if ((int)v12 - (int)v13 < v15)
      v15 = v12 - (_DWORD)v13;
    v16 = v15;
    if (v15 == 3)
    {
      v17 = memcmp(v13, v14, 3uLL);
      if (v13 != a2 && v17)
        goto LABEL_31;
    }
    else if (v13 != a2)
    {
      goto LABEL_31;
    }
    if (v10 >= v45)
    {
      v18 = v14;
      v19 = a2;
      v20 = v11;
      v21 = v6;
      v22 = (v10 - v9) >> 4;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60)
        sub_245CF3B34();
      if ((v45 - v9) >> 3 > v23)
        v23 = (v45 - v9) >> 3;
      if ((unint64_t)(v45 - v9) >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      v25 = (char *)sub_245CF8184(v24);
      v27 = (unsigned __int8 **)&v25[16 * v22];
      *v27 = v13;
      v27[1] = 0;
      if (v10 == v9)
      {
        v29 = &v25[16 * v22];
      }
      else
      {
        v28 = &v25[16 * v22];
        do
        {
          v29 = v28 - 16;
          *((_OWORD *)v28 - 1) = *((_OWORD *)v10 - 1);
          v10 -= 16;
          v28 -= 16;
        }
        while (v10 != v9);
      }
      v45 = &v25[16 * v26];
      v10 = (char *)(v27 + 2);
      if (v9)
        operator delete(v9);
      v9 = v29;
      v6 = v21;
      v11 = v20;
      a2 = v19;
      v14 = v18;
      a4 = v44;
    }
    else
    {
      *(_QWORD *)v10 = v13;
      *((_QWORD *)v10 + 1) = 0;
      v10 += 16;
    }
LABEL_31:
    *((_QWORD *)v10 - 1) += v16;
    v13 += v16;
  }
  while ((unint64_t)v13 < v12);
  if (v9 != v10)
  {
    v31 = (char *)a4[1];
    v30 = (char *)a4[2];
    v32 = v9;
    v33 = (char *)*a4;
    do
    {
      v34 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 112))(v6, *(_QWORD *)v32, *((_QWORD *)v32 + 1));
      v35 = v34;
      if (v31 >= v30)
      {
        v36 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v33) >> 3) + 1;
        if (v36 > 0xAAAAAAAAAAAAAAALL)
          sub_245CF3B34();
        if (0x5555555555555556 * ((v30 - v33) >> 3) > v36)
          v36 = 0x5555555555555556 * ((v30 - v33) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v30 - v33) >> 3) >= 0x555555555555555)
          v37 = 0xAAAAAAAAAAAAAAALL;
        else
          v37 = v36;
        v38 = (char *)sub_245CF3B48(v37);
        v40 = &v38[8 * ((v31 - v33) >> 3)];
        *(_OWORD *)v40 = *(_OWORD *)v32;
        *((_DWORD *)v40 + 4) = v35;
        if (v31 == v33)
        {
          v42 = &v38[8 * ((v31 - v33) >> 3)];
        }
        else
        {
          v41 = &v38[8 * ((v31 - v33) >> 3)];
          do
          {
            v42 = v41 - 24;
            v43 = *(_OWORD *)(v31 - 24);
            *((_QWORD *)v41 - 1) = *((_QWORD *)v31 - 1);
            *(_OWORD *)(v41 - 24) = v43;
            v31 -= 24;
            v41 -= 24;
          }
          while (v31 != v33);
        }
        v30 = &v38[24 * v39];
        v31 = v40 + 24;
        *a4 = v42;
        a4[1] = v40 + 24;
        a4[2] = v30;
        if (v33)
          operator delete(v33);
        v33 = v42;
      }
      else
      {
        *(_OWORD *)v31 = *(_OWORD *)v32;
        *((_DWORD *)v31 + 4) = v34;
        v31 += 24;
      }
      a4[1] = v31;
      v32 += 16;
    }
    while (v32 != v10);
  }
  if (v9)
    operator delete(v9);
}

void sub_245D215C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC50](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC60](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x24BEDAE90]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF60]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x24BEDAFD8](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
  MEMORY[0x24BEDAFE0](this);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x24BEDAFE8](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_2516F67E8();
}

void operator delete(void *__p)
{
  off_2516F67F0(__p);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_2516F67F8(__p, a2);
}

uint64_t operator delete()
{
  return off_2516F6800();
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_2516F6808(__sz);
}

uint64_t operator new[]()
{
  return off_2516F6810();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_2516F6818(__sz);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_2516F6820(__sz, a2);
}

uint64_t operator new()
{
  return off_2516F6828();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

long double expm1(long double __x)
{
  long double result;

  MEMORY[0x24BDAE290](__x);
  return result;
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

float log1pf(float a1)
{
  float result;

  MEMORY[0x24BDAEAC8](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x24BDAF860](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x24BDAF888](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x24BDAFF20](*(_QWORD *)&__errnum, __strerrbuf, __buflen);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

